
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_table>:
   1c200:	2002e920 	.word	0x2002e920
   1c204:	000241b5 	.word	0x000241b5
   1c208:	0003c9ad 	.word	0x0003c9ad
   1c20c:	00023e11 	.word	0x00023e11
   1c210:	00023e11 	.word	0x00023e11
   1c214:	00023e11 	.word	0x00023e11
   1c218:	00023e11 	.word	0x00023e11
   1c21c:	00023e11 	.word	0x00023e11
   1c220:	00023e11 	.word	0x00023e11
   1c224:	00023e11 	.word	0x00023e11
   1c228:	00023e11 	.word	0x00023e11
   1c22c:	00023dd9 	.word	0x00023dd9
   1c230:	00023e11 	.word	0x00023e11
   1c234:	00023e11 	.word	0x00023e11
   1c238:	00023d15 	.word	0x00023d15
   1c23c:	00023951 	.word	0x00023951

0001c240 <_irq_vector_table>:
   1c240:	00023e2d 00023e2d 00023e2d 00023e2d     ->..->..->..->..
   1c250:	00023e2d 00023e2d 00023e2d 00023e2d     ->..->..->..->..
   1c260:	00023e2d 00023e2d 00023e2d 00023e2d     ->..->..->..->..
   1c270:	00023e2d 00023e2d 00023e2d 00023e2d     ->..->..->..->..
   1c280:	00023e2d 00023e2d 00023e2d 00023e2d     ->..->..->..->..
   1c290:	00023e2d 00023e2d 00023e2d 00023e2d     ->..->..->..->..
   1c2a0:	00023e2d 00023e2d 00023e2d 00023e2d     ->..->..->..->..
   1c2b0:	00026a01 0003daa1 00023e2d 00023e2d     .j......->..->..
   1c2c0:	00023e2d 00023e2d 00023e2d 00023e2d     ->..->..->..->..
   1c2d0:	00023e2d 00023e2d 00023e2d 00023e2d     ->..->..->..->..
   1c2e0:	00023e2d 00023e2d 0003dabf 00023e2d     ->..->......->..
   1c2f0:	00023e2d 00023e2d 00023e2d 00023e2d     ->..->..->..->..
   1c300:	00023e2d 00023e2d 00023e2d 00023e2d     ->..->..->..->..
   1c310:	00023e2d 00023e2d 00023e2d 00023e2d     ->..->..->..->..
   1c320:	00023e2d 00023e2d 00023e2d 00023e2d     ->..->..->..->..
   1c330:	00023e2d 00023e2d 00023e2d 00023e2d     ->..->..->..->..
   1c340:	00023e2d                                ->..

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   1c410:	0002b5fc 00000001 0001c200 0001c200     ................
   1c420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c57e:	f1a4 0401 	sub.w	r4, r4, #1
   1c582:	d1e9      	bne.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_dmul>:
   1c7b8:	b570      	push	{r4, r5, r6, lr}
   1c7ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c7be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c7c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c7c6:	bf1d      	ittte	ne
   1c7c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c7cc:	ea94 0f0c 	teqne	r4, ip
   1c7d0:	ea95 0f0c 	teqne	r5, ip
   1c7d4:	f000 f8de 	bleq	1c994 <__aeabi_dmul+0x1dc>
   1c7d8:	442c      	add	r4, r5
   1c7da:	ea81 0603 	eor.w	r6, r1, r3
   1c7de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c7e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c7e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c7ea:	bf18      	it	ne
   1c7ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c7f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c7f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c7f8:	d038      	beq.n	1c86c <__aeabi_dmul+0xb4>
   1c7fa:	fba0 ce02 	umull	ip, lr, r0, r2
   1c7fe:	f04f 0500 	mov.w	r5, #0
   1c802:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c80a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c80e:	f04f 0600 	mov.w	r6, #0
   1c812:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c816:	f09c 0f00 	teq	ip, #0
   1c81a:	bf18      	it	ne
   1c81c:	f04e 0e01 	orrne.w	lr, lr, #1
   1c820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c82c:	d204      	bcs.n	1c838 <__aeabi_dmul+0x80>
   1c82e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c832:	416d      	adcs	r5, r5
   1c834:	eb46 0606 	adc.w	r6, r6, r6
   1c838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c83c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c84c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c850:	bf88      	it	hi
   1c852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c856:	d81e      	bhi.n	1c896 <__aeabi_dmul+0xde>
   1c858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c85c:	bf08      	it	eq
   1c85e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c862:	f150 0000 	adcs.w	r0, r0, #0
   1c866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c86a:	bd70      	pop	{r4, r5, r6, pc}
   1c86c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c870:	ea46 0101 	orr.w	r1, r6, r1
   1c874:	ea40 0002 	orr.w	r0, r0, r2
   1c878:	ea81 0103 	eor.w	r1, r1, r3
   1c87c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c880:	bfc2      	ittt	gt
   1c882:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c88a:	bd70      	popgt	{r4, r5, r6, pc}
   1c88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c890:	f04f 0e00 	mov.w	lr, #0
   1c894:	3c01      	subs	r4, #1
   1c896:	f300 80ab 	bgt.w	1c9f0 <__aeabi_dmul+0x238>
   1c89a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c89e:	bfde      	ittt	le
   1c8a0:	2000      	movle	r0, #0
   1c8a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c8a6:	bd70      	pople	{r4, r5, r6, pc}
   1c8a8:	f1c4 0400 	rsb	r4, r4, #0
   1c8ac:	3c20      	subs	r4, #32
   1c8ae:	da35      	bge.n	1c91c <__aeabi_dmul+0x164>
   1c8b0:	340c      	adds	r4, #12
   1c8b2:	dc1b      	bgt.n	1c8ec <__aeabi_dmul+0x134>
   1c8b4:	f104 0414 	add.w	r4, r4, #20
   1c8b8:	f1c4 0520 	rsb	r5, r4, #32
   1c8bc:	fa00 f305 	lsl.w	r3, r0, r5
   1c8c0:	fa20 f004 	lsr.w	r0, r0, r4
   1c8c4:	fa01 f205 	lsl.w	r2, r1, r5
   1c8c8:	ea40 0002 	orr.w	r0, r0, r2
   1c8cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c8d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c8d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c8d8:	fa21 f604 	lsr.w	r6, r1, r4
   1c8dc:	eb42 0106 	adc.w	r1, r2, r6
   1c8e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c8e4:	bf08      	it	eq
   1c8e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c8ea:	bd70      	pop	{r4, r5, r6, pc}
   1c8ec:	f1c4 040c 	rsb	r4, r4, #12
   1c8f0:	f1c4 0520 	rsb	r5, r4, #32
   1c8f4:	fa00 f304 	lsl.w	r3, r0, r4
   1c8f8:	fa20 f005 	lsr.w	r0, r0, r5
   1c8fc:	fa01 f204 	lsl.w	r2, r1, r4
   1c900:	ea40 0002 	orr.w	r0, r0, r2
   1c904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c90c:	f141 0100 	adc.w	r1, r1, #0
   1c910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c914:	bf08      	it	eq
   1c916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c91a:	bd70      	pop	{r4, r5, r6, pc}
   1c91c:	f1c4 0520 	rsb	r5, r4, #32
   1c920:	fa00 f205 	lsl.w	r2, r0, r5
   1c924:	ea4e 0e02 	orr.w	lr, lr, r2
   1c928:	fa20 f304 	lsr.w	r3, r0, r4
   1c92c:	fa01 f205 	lsl.w	r2, r1, r5
   1c930:	ea43 0302 	orr.w	r3, r3, r2
   1c934:	fa21 f004 	lsr.w	r0, r1, r4
   1c938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c93c:	fa21 f204 	lsr.w	r2, r1, r4
   1c940:	ea20 0002 	bic.w	r0, r0, r2
   1c944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c94c:	bf08      	it	eq
   1c94e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c952:	bd70      	pop	{r4, r5, r6, pc}
   1c954:	f094 0f00 	teq	r4, #0
   1c958:	d10f      	bne.n	1c97a <__aeabi_dmul+0x1c2>
   1c95a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c95e:	0040      	lsls	r0, r0, #1
   1c960:	eb41 0101 	adc.w	r1, r1, r1
   1c964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c968:	bf08      	it	eq
   1c96a:	3c01      	subeq	r4, #1
   1c96c:	d0f7      	beq.n	1c95e <__aeabi_dmul+0x1a6>
   1c96e:	ea41 0106 	orr.w	r1, r1, r6
   1c972:	f095 0f00 	teq	r5, #0
   1c976:	bf18      	it	ne
   1c978:	4770      	bxne	lr
   1c97a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c97e:	0052      	lsls	r2, r2, #1
   1c980:	eb43 0303 	adc.w	r3, r3, r3
   1c984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c988:	bf08      	it	eq
   1c98a:	3d01      	subeq	r5, #1
   1c98c:	d0f7      	beq.n	1c97e <__aeabi_dmul+0x1c6>
   1c98e:	ea43 0306 	orr.w	r3, r3, r6
   1c992:	4770      	bx	lr
   1c994:	ea94 0f0c 	teq	r4, ip
   1c998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c99c:	bf18      	it	ne
   1c99e:	ea95 0f0c 	teqne	r5, ip
   1c9a2:	d00c      	beq.n	1c9be <__aeabi_dmul+0x206>
   1c9a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9a8:	bf18      	it	ne
   1c9aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9ae:	d1d1      	bne.n	1c954 <__aeabi_dmul+0x19c>
   1c9b0:	ea81 0103 	eor.w	r1, r1, r3
   1c9b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9b8:	f04f 0000 	mov.w	r0, #0
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
   1c9be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9c2:	bf06      	itte	eq
   1c9c4:	4610      	moveq	r0, r2
   1c9c6:	4619      	moveq	r1, r3
   1c9c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9cc:	d019      	beq.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ce:	ea94 0f0c 	teq	r4, ip
   1c9d2:	d102      	bne.n	1c9da <__aeabi_dmul+0x222>
   1c9d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c9d8:	d113      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9da:	ea95 0f0c 	teq	r5, ip
   1c9de:	d105      	bne.n	1c9ec <__aeabi_dmul+0x234>
   1c9e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c9e4:	bf1c      	itt	ne
   1c9e6:	4610      	movne	r0, r2
   1c9e8:	4619      	movne	r1, r3
   1c9ea:	d10a      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ec:	ea81 0103 	eor.w	r1, r1, r3
   1c9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c9f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c9fc:	f04f 0000 	mov.w	r0, #0
   1ca00:	bd70      	pop	{r4, r5, r6, pc}
   1ca02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ca06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ca0a:	bd70      	pop	{r4, r5, r6, pc}

0001ca0c <__aeabi_ddiv>:
   1ca0c:	b570      	push	{r4, r5, r6, lr}
   1ca0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ca12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ca16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ca1a:	bf1d      	ittte	ne
   1ca1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ca20:	ea94 0f0c 	teqne	r4, ip
   1ca24:	ea95 0f0c 	teqne	r5, ip
   1ca28:	f000 f8a7 	bleq	1cb7a <__aeabi_ddiv+0x16e>
   1ca2c:	eba4 0405 	sub.w	r4, r4, r5
   1ca30:	ea81 0e03 	eor.w	lr, r1, r3
   1ca34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ca38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ca3c:	f000 8088 	beq.w	1cb50 <__aeabi_ddiv+0x144>
   1ca40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ca44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ca48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ca4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ca50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ca54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ca58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ca5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ca60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ca64:	429d      	cmp	r5, r3
   1ca66:	bf08      	it	eq
   1ca68:	4296      	cmpeq	r6, r2
   1ca6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ca6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ca72:	d202      	bcs.n	1ca7a <__aeabi_ddiv+0x6e>
   1ca74:	085b      	lsrs	r3, r3, #1
   1ca76:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca7a:	1ab6      	subs	r6, r6, r2
   1ca7c:	eb65 0503 	sbc.w	r5, r5, r3
   1ca80:	085b      	lsrs	r3, r3, #1
   1ca82:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ca8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ca8e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ca92:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ca96:	bf22      	ittt	cs
   1ca98:	1ab6      	subcs	r6, r6, r2
   1ca9a:	4675      	movcs	r5, lr
   1ca9c:	ea40 000c 	orrcs.w	r0, r0, ip
   1caa0:	085b      	lsrs	r3, r3, #1
   1caa2:	ea4f 0232 	mov.w	r2, r2, rrx
   1caa6:	ebb6 0e02 	subs.w	lr, r6, r2
   1caaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   1caae:	bf22      	ittt	cs
   1cab0:	1ab6      	subcs	r6, r6, r2
   1cab2:	4675      	movcs	r5, lr
   1cab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cab8:	085b      	lsrs	r3, r3, #1
   1caba:	ea4f 0232 	mov.w	r2, r2, rrx
   1cabe:	ebb6 0e02 	subs.w	lr, r6, r2
   1cac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cac6:	bf22      	ittt	cs
   1cac8:	1ab6      	subcs	r6, r6, r2
   1caca:	4675      	movcs	r5, lr
   1cacc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cad0:	085b      	lsrs	r3, r3, #1
   1cad2:	ea4f 0232 	mov.w	r2, r2, rrx
   1cad6:	ebb6 0e02 	subs.w	lr, r6, r2
   1cada:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cade:	bf22      	ittt	cs
   1cae0:	1ab6      	subcs	r6, r6, r2
   1cae2:	4675      	movcs	r5, lr
   1cae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cae8:	ea55 0e06 	orrs.w	lr, r5, r6
   1caec:	d018      	beq.n	1cb20 <__aeabi_ddiv+0x114>
   1caee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1caf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1caf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cafa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cafe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cb02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cb06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cb0a:	d1c0      	bne.n	1ca8e <__aeabi_ddiv+0x82>
   1cb0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb10:	d10b      	bne.n	1cb2a <__aeabi_ddiv+0x11e>
   1cb12:	ea41 0100 	orr.w	r1, r1, r0
   1cb16:	f04f 0000 	mov.w	r0, #0
   1cb1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1cb1e:	e7b6      	b.n	1ca8e <__aeabi_ddiv+0x82>
   1cb20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb24:	bf04      	itt	eq
   1cb26:	4301      	orreq	r1, r0
   1cb28:	2000      	moveq	r0, #0
   1cb2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb2e:	bf88      	it	hi
   1cb30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb34:	f63f aeaf 	bhi.w	1c896 <__aeabi_dmul+0xde>
   1cb38:	ebb5 0c03 	subs.w	ip, r5, r3
   1cb3c:	bf04      	itt	eq
   1cb3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   1cb42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1cb46:	f150 0000 	adcs.w	r0, r0, #0
   1cb4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb4e:	bd70      	pop	{r4, r5, r6, pc}
   1cb50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1cb54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1cb58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1cb5c:	bfc2      	ittt	gt
   1cb5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb66:	bd70      	popgt	{r4, r5, r6, pc}
   1cb68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb6c:	f04f 0e00 	mov.w	lr, #0
   1cb70:	3c01      	subs	r4, #1
   1cb72:	e690      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb74:	ea45 0e06 	orr.w	lr, r5, r6
   1cb78:	e68d      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cb7e:	ea94 0f0c 	teq	r4, ip
   1cb82:	bf08      	it	eq
   1cb84:	ea95 0f0c 	teqeq	r5, ip
   1cb88:	f43f af3b 	beq.w	1ca02 <__aeabi_dmul+0x24a>
   1cb8c:	ea94 0f0c 	teq	r4, ip
   1cb90:	d10a      	bne.n	1cba8 <__aeabi_ddiv+0x19c>
   1cb92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1cb96:	f47f af34 	bne.w	1ca02 <__aeabi_dmul+0x24a>
   1cb9a:	ea95 0f0c 	teq	r5, ip
   1cb9e:	f47f af25 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cba2:	4610      	mov	r0, r2
   1cba4:	4619      	mov	r1, r3
   1cba6:	e72c      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cba8:	ea95 0f0c 	teq	r5, ip
   1cbac:	d106      	bne.n	1cbbc <__aeabi_ddiv+0x1b0>
   1cbae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cbb2:	f43f aefd 	beq.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbb6:	4610      	mov	r0, r2
   1cbb8:	4619      	mov	r1, r3
   1cbba:	e722      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cbbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cbc0:	bf18      	it	ne
   1cbc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cbc6:	f47f aec5 	bne.w	1c954 <__aeabi_dmul+0x19c>
   1cbca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cbce:	f47f af0d 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cbd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1cbd6:	f47f aeeb 	bne.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbda:	e712      	b.n	1ca02 <__aeabi_dmul+0x24a>

0001cbdc <__gedf2>:
   1cbdc:	f04f 3cff 	mov.w	ip, #4294967295
   1cbe0:	e006      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbe2:	bf00      	nop

0001cbe4 <__ledf2>:
   1cbe4:	f04f 0c01 	mov.w	ip, #1
   1cbe8:	e002      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbea:	bf00      	nop

0001cbec <__cmpdf2>:
   1cbec:	f04f 0c01 	mov.w	ip, #1
   1cbf0:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cbfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc00:	bf18      	it	ne
   1cc02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cc06:	d01b      	beq.n	1cc40 <__cmpdf2+0x54>
   1cc08:	b001      	add	sp, #4
   1cc0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cc0e:	bf0c      	ite	eq
   1cc10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cc14:	ea91 0f03 	teqne	r1, r3
   1cc18:	bf02      	ittt	eq
   1cc1a:	ea90 0f02 	teqeq	r0, r2
   1cc1e:	2000      	moveq	r0, #0
   1cc20:	4770      	bxeq	lr
   1cc22:	f110 0f00 	cmn.w	r0, #0
   1cc26:	ea91 0f03 	teq	r1, r3
   1cc2a:	bf58      	it	pl
   1cc2c:	4299      	cmppl	r1, r3
   1cc2e:	bf08      	it	eq
   1cc30:	4290      	cmpeq	r0, r2
   1cc32:	bf2c      	ite	cs
   1cc34:	17d8      	asrcs	r0, r3, #31
   1cc36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cc3a:	f040 0001 	orr.w	r0, r0, #1
   1cc3e:	4770      	bx	lr
   1cc40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cc44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc48:	d102      	bne.n	1cc50 <__cmpdf2+0x64>
   1cc4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cc4e:	d107      	bne.n	1cc60 <__cmpdf2+0x74>
   1cc50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc58:	d1d6      	bne.n	1cc08 <__cmpdf2+0x1c>
   1cc5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cc5e:	d0d3      	beq.n	1cc08 <__cmpdf2+0x1c>
   1cc60:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cc64:	4770      	bx	lr
   1cc66:	bf00      	nop

0001cc68 <__aeabi_cdrcmple>:
   1cc68:	4684      	mov	ip, r0
   1cc6a:	4610      	mov	r0, r2
   1cc6c:	4662      	mov	r2, ip
   1cc6e:	468c      	mov	ip, r1
   1cc70:	4619      	mov	r1, r3
   1cc72:	4663      	mov	r3, ip
   1cc74:	e000      	b.n	1cc78 <__aeabi_cdcmpeq>
   1cc76:	bf00      	nop

0001cc78 <__aeabi_cdcmpeq>:
   1cc78:	b501      	push	{r0, lr}
   1cc7a:	f7ff ffb7 	bl	1cbec <__cmpdf2>
   1cc7e:	2800      	cmp	r0, #0
   1cc80:	bf48      	it	mi
   1cc82:	f110 0f00 	cmnmi.w	r0, #0
   1cc86:	bd01      	pop	{r0, pc}

0001cc88 <__aeabi_dcmpeq>:
   1cc88:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cc8c:	f7ff fff4 	bl	1cc78 <__aeabi_cdcmpeq>
   1cc90:	bf0c      	ite	eq
   1cc92:	2001      	moveq	r0, #1
   1cc94:	2000      	movne	r0, #0
   1cc96:	f85d fb08 	ldr.w	pc, [sp], #8
   1cc9a:	bf00      	nop

0001cc9c <__aeabi_dcmplt>:
   1cc9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cca0:	f7ff ffea 	bl	1cc78 <__aeabi_cdcmpeq>
   1cca4:	bf34      	ite	cc
   1cca6:	2001      	movcc	r0, #1
   1cca8:	2000      	movcs	r0, #0
   1ccaa:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccae:	bf00      	nop

0001ccb0 <__aeabi_dcmple>:
   1ccb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccb4:	f7ff ffe0 	bl	1cc78 <__aeabi_cdcmpeq>
   1ccb8:	bf94      	ite	ls
   1ccba:	2001      	movls	r0, #1
   1ccbc:	2000      	movhi	r0, #0
   1ccbe:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccc2:	bf00      	nop

0001ccc4 <__aeabi_dcmpge>:
   1ccc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccc8:	f7ff ffce 	bl	1cc68 <__aeabi_cdrcmple>
   1cccc:	bf94      	ite	ls
   1ccce:	2001      	movls	r0, #1
   1ccd0:	2000      	movhi	r0, #0
   1ccd2:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccd6:	bf00      	nop

0001ccd8 <__aeabi_dcmpgt>:
   1ccd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccdc:	f7ff ffc4 	bl	1cc68 <__aeabi_cdrcmple>
   1cce0:	bf34      	ite	cc
   1cce2:	2001      	movcc	r0, #1
   1cce4:	2000      	movcs	r0, #0
   1cce6:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccea:	bf00      	nop

0001ccec <__aeabi_d2iz>:
   1ccec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1ccf0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1ccf4:	d215      	bcs.n	1cd22 <__aeabi_d2iz+0x36>
   1ccf6:	d511      	bpl.n	1cd1c <__aeabi_d2iz+0x30>
   1ccf8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1ccfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd00:	d912      	bls.n	1cd28 <__aeabi_d2iz+0x3c>
   1cd02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cd12:	fa23 f002 	lsr.w	r0, r3, r2
   1cd16:	bf18      	it	ne
   1cd18:	4240      	negne	r0, r0
   1cd1a:	4770      	bx	lr
   1cd1c:	f04f 0000 	mov.w	r0, #0
   1cd20:	4770      	bx	lr
   1cd22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd26:	d105      	bne.n	1cd34 <__aeabi_d2iz+0x48>
   1cd28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cd2c:	bf08      	it	eq
   1cd2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cd32:	4770      	bx	lr
   1cd34:	f04f 0000 	mov.w	r0, #0
   1cd38:	4770      	bx	lr
   1cd3a:	bf00      	nop

0001cd3c <__aeabi_d2uiz>:
   1cd3c:	004a      	lsls	r2, r1, #1
   1cd3e:	d211      	bcs.n	1cd64 <__aeabi_d2uiz+0x28>
   1cd40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd44:	d211      	bcs.n	1cd6a <__aeabi_d2uiz+0x2e>
   1cd46:	d50d      	bpl.n	1cd64 <__aeabi_d2uiz+0x28>
   1cd48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd50:	d40e      	bmi.n	1cd70 <__aeabi_d2uiz+0x34>
   1cd52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd5e:	fa23 f002 	lsr.w	r0, r3, r2
   1cd62:	4770      	bx	lr
   1cd64:	f04f 0000 	mov.w	r0, #0
   1cd68:	4770      	bx	lr
   1cd6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd6e:	d102      	bne.n	1cd76 <__aeabi_d2uiz+0x3a>
   1cd70:	f04f 30ff 	mov.w	r0, #4294967295
   1cd74:	4770      	bx	lr
   1cd76:	f04f 0000 	mov.w	r0, #0
   1cd7a:	4770      	bx	lr

0001cd7c <__aeabi_uldivmod>:
   1cd7c:	b953      	cbnz	r3, 1cd94 <__aeabi_uldivmod+0x18>
   1cd7e:	b94a      	cbnz	r2, 1cd94 <__aeabi_uldivmod+0x18>
   1cd80:	2900      	cmp	r1, #0
   1cd82:	bf08      	it	eq
   1cd84:	2800      	cmpeq	r0, #0
   1cd86:	bf1c      	itt	ne
   1cd88:	f04f 31ff 	movne.w	r1, #4294967295
   1cd8c:	f04f 30ff 	movne.w	r0, #4294967295
   1cd90:	f000 b970 	b.w	1d074 <__aeabi_idiv0>
   1cd94:	f1ad 0c08 	sub.w	ip, sp, #8
   1cd98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cd9c:	f000 f806 	bl	1cdac <__udivmoddi4>
   1cda0:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cda4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cda8:	b004      	add	sp, #16
   1cdaa:	4770      	bx	lr

0001cdac <__udivmoddi4>:
   1cdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cdb0:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1cdb2:	4604      	mov	r4, r0
   1cdb4:	4689      	mov	r9, r1
   1cdb6:	2b00      	cmp	r3, #0
   1cdb8:	f040 8083 	bne.w	1cec2 <__udivmoddi4+0x116>
   1cdbc:	428a      	cmp	r2, r1
   1cdbe:	4615      	mov	r5, r2
   1cdc0:	d945      	bls.n	1ce4e <__udivmoddi4+0xa2>
   1cdc2:	fab2 f282 	clz	r2, r2
   1cdc6:	b14a      	cbz	r2, 1cddc <__udivmoddi4+0x30>
   1cdc8:	f1c2 0720 	rsb	r7, r2, #32
   1cdcc:	fa01 f302 	lsl.w	r3, r1, r2
   1cdd0:	4095      	lsls	r5, r2
   1cdd2:	4094      	lsls	r4, r2
   1cdd4:	fa20 f707 	lsr.w	r7, r0, r7
   1cdd8:	ea47 0903 	orr.w	r9, r7, r3
   1cddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cde0:	0c23      	lsrs	r3, r4, #16
   1cde2:	fa1f f885 	uxth.w	r8, r5
   1cde6:	fbb9 fcfe 	udiv	ip, r9, lr
   1cdea:	fb0e 991c 	mls	r9, lr, ip, r9
   1cdee:	fb0c f108 	mul.w	r1, ip, r8
   1cdf2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   1cdf6:	4299      	cmp	r1, r3
   1cdf8:	d90a      	bls.n	1ce10 <__udivmoddi4+0x64>
   1cdfa:	18eb      	adds	r3, r5, r3
   1cdfc:	bf2c      	ite	cs
   1cdfe:	2001      	movcs	r0, #1
   1ce00:	2000      	movcc	r0, #0
   1ce02:	4299      	cmp	r1, r3
   1ce04:	d902      	bls.n	1ce0c <__udivmoddi4+0x60>
   1ce06:	2800      	cmp	r0, #0
   1ce08:	f000 811d 	beq.w	1d046 <__udivmoddi4+0x29a>
   1ce0c:	f10c 3cff 	add.w	ip, ip, #4294967295
   1ce10:	1a59      	subs	r1, r3, r1
   1ce12:	b2a3      	uxth	r3, r4
   1ce14:	fbb1 f0fe 	udiv	r0, r1, lr
   1ce18:	fb0e 1110 	mls	r1, lr, r0, r1
   1ce1c:	fb00 f808 	mul.w	r8, r0, r8
   1ce20:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1ce24:	45a0      	cmp	r8, r4
   1ce26:	d905      	bls.n	1ce34 <__udivmoddi4+0x88>
   1ce28:	192c      	adds	r4, r5, r4
   1ce2a:	d202      	bcs.n	1ce32 <__udivmoddi4+0x86>
   1ce2c:	45a0      	cmp	r8, r4
   1ce2e:	f200 810e 	bhi.w	1d04e <__udivmoddi4+0x2a2>
   1ce32:	3801      	subs	r0, #1
   1ce34:	eba4 0408 	sub.w	r4, r4, r8
   1ce38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1ce3c:	2700      	movs	r7, #0
   1ce3e:	b11e      	cbz	r6, 1ce48 <__udivmoddi4+0x9c>
   1ce40:	40d4      	lsrs	r4, r2
   1ce42:	2300      	movs	r3, #0
   1ce44:	e9c6 4300 	strd	r4, r3, [r6]
   1ce48:	4639      	mov	r1, r7
   1ce4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce4e:	2a00      	cmp	r2, #0
   1ce50:	d051      	beq.n	1cef6 <__udivmoddi4+0x14a>
   1ce52:	fab2 f282 	clz	r2, r2
   1ce56:	2a00      	cmp	r2, #0
   1ce58:	f040 80af 	bne.w	1cfba <__udivmoddi4+0x20e>
   1ce5c:	1b49      	subs	r1, r1, r5
   1ce5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1ce62:	fa1f f885 	uxth.w	r8, r5
   1ce66:	2701      	movs	r7, #1
   1ce68:	0c23      	lsrs	r3, r4, #16
   1ce6a:	fbb1 fcfe 	udiv	ip, r1, lr
   1ce6e:	fb0e 111c 	mls	r1, lr, ip, r1
   1ce72:	fb08 f00c 	mul.w	r0, r8, ip
   1ce76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1ce7a:	4298      	cmp	r0, r3
   1ce7c:	d90a      	bls.n	1ce94 <__udivmoddi4+0xe8>
   1ce7e:	18eb      	adds	r3, r5, r3
   1ce80:	bf2c      	ite	cs
   1ce82:	2101      	movcs	r1, #1
   1ce84:	2100      	movcc	r1, #0
   1ce86:	4298      	cmp	r0, r3
   1ce88:	d902      	bls.n	1ce90 <__udivmoddi4+0xe4>
   1ce8a:	2900      	cmp	r1, #0
   1ce8c:	f000 80d7 	beq.w	1d03e <__udivmoddi4+0x292>
   1ce90:	f10c 3cff 	add.w	ip, ip, #4294967295
   1ce94:	1a19      	subs	r1, r3, r0
   1ce96:	b2a3      	uxth	r3, r4
   1ce98:	fbb1 f0fe 	udiv	r0, r1, lr
   1ce9c:	fb0e 1110 	mls	r1, lr, r0, r1
   1cea0:	fb08 f800 	mul.w	r8, r8, r0
   1cea4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1cea8:	45a0      	cmp	r8, r4
   1ceaa:	d905      	bls.n	1ceb8 <__udivmoddi4+0x10c>
   1ceac:	192c      	adds	r4, r5, r4
   1ceae:	d202      	bcs.n	1ceb6 <__udivmoddi4+0x10a>
   1ceb0:	45a0      	cmp	r8, r4
   1ceb2:	f200 80c1 	bhi.w	1d038 <__udivmoddi4+0x28c>
   1ceb6:	3801      	subs	r0, #1
   1ceb8:	eba4 0408 	sub.w	r4, r4, r8
   1cebc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1cec0:	e7bd      	b.n	1ce3e <__udivmoddi4+0x92>
   1cec2:	428b      	cmp	r3, r1
   1cec4:	d908      	bls.n	1ced8 <__udivmoddi4+0x12c>
   1cec6:	2e00      	cmp	r6, #0
   1cec8:	d074      	beq.n	1cfb4 <__udivmoddi4+0x208>
   1ceca:	2700      	movs	r7, #0
   1cecc:	e9c6 0100 	strd	r0, r1, [r6]
   1ced0:	4638      	mov	r0, r7
   1ced2:	4639      	mov	r1, r7
   1ced4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ced8:	fab3 f783 	clz	r7, r3
   1cedc:	b967      	cbnz	r7, 1cef8 <__udivmoddi4+0x14c>
   1cede:	428b      	cmp	r3, r1
   1cee0:	f0c0 80a4 	bcc.w	1d02c <__udivmoddi4+0x280>
   1cee4:	4282      	cmp	r2, r0
   1cee6:	f240 80a1 	bls.w	1d02c <__udivmoddi4+0x280>
   1ceea:	4638      	mov	r0, r7
   1ceec:	2e00      	cmp	r6, #0
   1ceee:	d0ab      	beq.n	1ce48 <__udivmoddi4+0x9c>
   1cef0:	e9c6 4900 	strd	r4, r9, [r6]
   1cef4:	e7a8      	b.n	1ce48 <__udivmoddi4+0x9c>
   1cef6:	deff      	udf	#255	; 0xff
   1cef8:	f1c7 0520 	rsb	r5, r7, #32
   1cefc:	40bb      	lsls	r3, r7
   1cefe:	fa02 fc07 	lsl.w	ip, r2, r7
   1cf02:	fa01 f407 	lsl.w	r4, r1, r7
   1cf06:	40ea      	lsrs	r2, r5
   1cf08:	fa20 f805 	lsr.w	r8, r0, r5
   1cf0c:	40e9      	lsrs	r1, r5
   1cf0e:	fa00 fe07 	lsl.w	lr, r0, r7
   1cf12:	431a      	orrs	r2, r3
   1cf14:	ea48 0404 	orr.w	r4, r8, r4
   1cf18:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1cf1c:	0c20      	lsrs	r0, r4, #16
   1cf1e:	fa1f f982 	uxth.w	r9, r2
   1cf22:	fbb1 faf8 	udiv	sl, r1, r8
   1cf26:	fb08 111a 	mls	r1, r8, sl, r1
   1cf2a:	fb0a fb09 	mul.w	fp, sl, r9
   1cf2e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1cf32:	458b      	cmp	fp, r1
   1cf34:	d90a      	bls.n	1cf4c <__udivmoddi4+0x1a0>
   1cf36:	1851      	adds	r1, r2, r1
   1cf38:	bf2c      	ite	cs
   1cf3a:	2301      	movcs	r3, #1
   1cf3c:	2300      	movcc	r3, #0
   1cf3e:	458b      	cmp	fp, r1
   1cf40:	d902      	bls.n	1cf48 <__udivmoddi4+0x19c>
   1cf42:	2b00      	cmp	r3, #0
   1cf44:	f000 8088 	beq.w	1d058 <__udivmoddi4+0x2ac>
   1cf48:	f10a 3aff 	add.w	sl, sl, #4294967295
   1cf4c:	eba1 010b 	sub.w	r1, r1, fp
   1cf50:	b2a4      	uxth	r4, r4
   1cf52:	fbb1 f0f8 	udiv	r0, r1, r8
   1cf56:	fb08 1110 	mls	r1, r8, r0, r1
   1cf5a:	fb00 f909 	mul.w	r9, r0, r9
   1cf5e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   1cf62:	4589      	cmp	r9, r1
   1cf64:	d904      	bls.n	1cf70 <__udivmoddi4+0x1c4>
   1cf66:	1851      	adds	r1, r2, r1
   1cf68:	d201      	bcs.n	1cf6e <__udivmoddi4+0x1c2>
   1cf6a:	4589      	cmp	r9, r1
   1cf6c:	d87b      	bhi.n	1d066 <__udivmoddi4+0x2ba>
   1cf6e:	3801      	subs	r0, #1
   1cf70:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1cf74:	eba1 0109 	sub.w	r1, r1, r9
   1cf78:	fba0 890c 	umull	r8, r9, r0, ip
   1cf7c:	4549      	cmp	r1, r9
   1cf7e:	4644      	mov	r4, r8
   1cf80:	464b      	mov	r3, r9
   1cf82:	d302      	bcc.n	1cf8a <__udivmoddi4+0x1de>
   1cf84:	d106      	bne.n	1cf94 <__udivmoddi4+0x1e8>
   1cf86:	45c6      	cmp	lr, r8
   1cf88:	d204      	bcs.n	1cf94 <__udivmoddi4+0x1e8>
   1cf8a:	3801      	subs	r0, #1
   1cf8c:	ebb8 040c 	subs.w	r4, r8, ip
   1cf90:	eb69 0302 	sbc.w	r3, r9, r2
   1cf94:	2e00      	cmp	r6, #0
   1cf96:	d05d      	beq.n	1d054 <__udivmoddi4+0x2a8>
   1cf98:	ebbe 0204 	subs.w	r2, lr, r4
   1cf9c:	eb61 0103 	sbc.w	r1, r1, r3
   1cfa0:	fa01 f505 	lsl.w	r5, r1, r5
   1cfa4:	fa22 f307 	lsr.w	r3, r2, r7
   1cfa8:	40f9      	lsrs	r1, r7
   1cfaa:	2700      	movs	r7, #0
   1cfac:	431d      	orrs	r5, r3
   1cfae:	e9c6 5100 	strd	r5, r1, [r6]
   1cfb2:	e749      	b.n	1ce48 <__udivmoddi4+0x9c>
   1cfb4:	4637      	mov	r7, r6
   1cfb6:	4630      	mov	r0, r6
   1cfb8:	e746      	b.n	1ce48 <__udivmoddi4+0x9c>
   1cfba:	f1c2 0020 	rsb	r0, r2, #32
   1cfbe:	4095      	lsls	r5, r2
   1cfc0:	fa01 f702 	lsl.w	r7, r1, r2
   1cfc4:	fa21 f300 	lsr.w	r3, r1, r0
   1cfc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cfcc:	fa24 f100 	lsr.w	r1, r4, r0
   1cfd0:	fa1f f885 	uxth.w	r8, r5
   1cfd4:	4094      	lsls	r4, r2
   1cfd6:	4339      	orrs	r1, r7
   1cfd8:	fbb3 f0fe 	udiv	r0, r3, lr
   1cfdc:	0c0f      	lsrs	r7, r1, #16
   1cfde:	fb0e 3310 	mls	r3, lr, r0, r3
   1cfe2:	fb00 fc08 	mul.w	ip, r0, r8
   1cfe6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   1cfea:	459c      	cmp	ip, r3
   1cfec:	d907      	bls.n	1cffe <__udivmoddi4+0x252>
   1cfee:	18eb      	adds	r3, r5, r3
   1cff0:	bf2c      	ite	cs
   1cff2:	2701      	movcs	r7, #1
   1cff4:	2700      	movcc	r7, #0
   1cff6:	459c      	cmp	ip, r3
   1cff8:	d900      	bls.n	1cffc <__udivmoddi4+0x250>
   1cffa:	b38f      	cbz	r7, 1d060 <__udivmoddi4+0x2b4>
   1cffc:	3801      	subs	r0, #1
   1cffe:	eba3 030c 	sub.w	r3, r3, ip
   1d002:	b289      	uxth	r1, r1
   1d004:	fbb3 f7fe 	udiv	r7, r3, lr
   1d008:	fb0e 3317 	mls	r3, lr, r7, r3
   1d00c:	fb07 fc08 	mul.w	ip, r7, r8
   1d010:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d014:	458c      	cmp	ip, r1
   1d016:	d904      	bls.n	1d022 <__udivmoddi4+0x276>
   1d018:	1869      	adds	r1, r5, r1
   1d01a:	d201      	bcs.n	1d020 <__udivmoddi4+0x274>
   1d01c:	458c      	cmp	ip, r1
   1d01e:	d825      	bhi.n	1d06c <__udivmoddi4+0x2c0>
   1d020:	3f01      	subs	r7, #1
   1d022:	eba1 010c 	sub.w	r1, r1, ip
   1d026:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   1d02a:	e71d      	b.n	1ce68 <__udivmoddi4+0xbc>
   1d02c:	1a84      	subs	r4, r0, r2
   1d02e:	eb61 0303 	sbc.w	r3, r1, r3
   1d032:	2001      	movs	r0, #1
   1d034:	4699      	mov	r9, r3
   1d036:	e759      	b.n	1ceec <__udivmoddi4+0x140>
   1d038:	3802      	subs	r0, #2
   1d03a:	442c      	add	r4, r5
   1d03c:	e73c      	b.n	1ceb8 <__udivmoddi4+0x10c>
   1d03e:	f1ac 0c02 	sub.w	ip, ip, #2
   1d042:	442b      	add	r3, r5
   1d044:	e726      	b.n	1ce94 <__udivmoddi4+0xe8>
   1d046:	f1ac 0c02 	sub.w	ip, ip, #2
   1d04a:	442b      	add	r3, r5
   1d04c:	e6e0      	b.n	1ce10 <__udivmoddi4+0x64>
   1d04e:	3802      	subs	r0, #2
   1d050:	442c      	add	r4, r5
   1d052:	e6ef      	b.n	1ce34 <__udivmoddi4+0x88>
   1d054:	4637      	mov	r7, r6
   1d056:	e6f7      	b.n	1ce48 <__udivmoddi4+0x9c>
   1d058:	f1aa 0a02 	sub.w	sl, sl, #2
   1d05c:	4411      	add	r1, r2
   1d05e:	e775      	b.n	1cf4c <__udivmoddi4+0x1a0>
   1d060:	3802      	subs	r0, #2
   1d062:	442b      	add	r3, r5
   1d064:	e7cb      	b.n	1cffe <__udivmoddi4+0x252>
   1d066:	3802      	subs	r0, #2
   1d068:	4411      	add	r1, r2
   1d06a:	e781      	b.n	1cf70 <__udivmoddi4+0x1c4>
   1d06c:	3f02      	subs	r7, #2
   1d06e:	4429      	add	r1, r5
   1d070:	e7d7      	b.n	1d022 <__udivmoddi4+0x276>
   1d072:	bf00      	nop

0001d074 <__aeabi_idiv0>:
   1d074:	4770      	bx	lr
   1d076:	bf00      	nop

0001d078 <__aeabi_dcmpun>:
   1d078:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1d07c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d080:	d102      	bne.n	1d088 <__aeabi_dcmpun+0x10>
   1d082:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1d086:	d10a      	bne.n	1d09e <__aeabi_dcmpun+0x26>
   1d088:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1d08c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d090:	d102      	bne.n	1d098 <__aeabi_dcmpun+0x20>
   1d092:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1d096:	d102      	bne.n	1d09e <__aeabi_dcmpun+0x26>
   1d098:	f04f 0000 	mov.w	r0, #0
   1d09c:	4770      	bx	lr
   1d09e:	f04f 0001 	mov.w	r0, #1
   1d0a2:	4770      	bx	lr

0001d0a4 <__aeabi_d2lz>:
   1d0a4:	b538      	push	{r3, r4, r5, lr}
   1d0a6:	2200      	movs	r2, #0
   1d0a8:	2300      	movs	r3, #0
   1d0aa:	4604      	mov	r4, r0
   1d0ac:	460d      	mov	r5, r1
   1d0ae:	f7ff fdf5 	bl	1cc9c <__aeabi_dcmplt>
   1d0b2:	b928      	cbnz	r0, 1d0c0 <__aeabi_d2lz+0x1c>
   1d0b4:	4620      	mov	r0, r4
   1d0b6:	4629      	mov	r1, r5
   1d0b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d0bc:	f000 b80a 	b.w	1d0d4 <__aeabi_d2ulz>
   1d0c0:	4620      	mov	r0, r4
   1d0c2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1d0c6:	f000 f805 	bl	1d0d4 <__aeabi_d2ulz>
   1d0ca:	4240      	negs	r0, r0
   1d0cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1d0d0:	bd38      	pop	{r3, r4, r5, pc}
   1d0d2:	bf00      	nop

0001d0d4 <__aeabi_d2ulz>:
   1d0d4:	b5d0      	push	{r4, r6, r7, lr}
   1d0d6:	2200      	movs	r2, #0
   1d0d8:	4b0b      	ldr	r3, [pc, #44]	; (1d108 <__aeabi_d2ulz+0x34>)
   1d0da:	4606      	mov	r6, r0
   1d0dc:	460f      	mov	r7, r1
   1d0de:	f7ff fb6b 	bl	1c7b8 <__aeabi_dmul>
   1d0e2:	f7ff fe2b 	bl	1cd3c <__aeabi_d2uiz>
   1d0e6:	4604      	mov	r4, r0
   1d0e8:	f7ff faec 	bl	1c6c4 <__aeabi_ui2d>
   1d0ec:	2200      	movs	r2, #0
   1d0ee:	4b07      	ldr	r3, [pc, #28]	; (1d10c <__aeabi_d2ulz+0x38>)
   1d0f0:	f7ff fb62 	bl	1c7b8 <__aeabi_dmul>
   1d0f4:	4602      	mov	r2, r0
   1d0f6:	460b      	mov	r3, r1
   1d0f8:	4630      	mov	r0, r6
   1d0fa:	4639      	mov	r1, r7
   1d0fc:	f7ff f9a4 	bl	1c448 <__aeabi_dsub>
   1d100:	f7ff fe1c 	bl	1cd3c <__aeabi_d2uiz>
   1d104:	4621      	mov	r1, r4
   1d106:	bdd0      	pop	{r4, r6, r7, pc}
   1d108:	3df00000 	.word	0x3df00000
   1d10c:	41f00000 	.word	0x41f00000

0001d110 <strcmp>:
   1d110:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d114:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d118:	2a01      	cmp	r2, #1
   1d11a:	bf28      	it	cs
   1d11c:	429a      	cmpcs	r2, r3
   1d11e:	d0f7      	beq.n	1d110 <strcmp>
   1d120:	1ad0      	subs	r0, r2, r3
   1d122:	4770      	bx	lr

0001d124 <strlen>:
   1d124:	4603      	mov	r3, r0
   1d126:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d12a:	2a00      	cmp	r2, #0
   1d12c:	d1fb      	bne.n	1d126 <strlen+0x2>
   1d12e:	1a18      	subs	r0, r3, r0
   1d130:	3801      	subs	r0, #1
   1d132:	4770      	bx	lr
   1d134:	0000      	movs	r0, r0
	...

0001d138 <motion_work_q_handler>:
	k_delayed_work_submit_to_queue(motion_work_q, &motion_work, K_NO_WAIT);
}

/**@brief Workqueue handler that runs the callback provided by application.*/
static void motion_work_q_handler(struct k_work *work)
{
   1d138:	b570      	push	{r4, r5, r6, lr}
		err = sensor_sample_fetch_chan(accel_dev,
   1d13a:	4c4f      	ldr	r4, [pc, #316]	; (1d278 <motion_work_q_handler+0x140>)
{
   1d13c:	b092      	sub	sp, #72	; 0x48
		err = sensor_sample_fetch_chan(accel_dev,
   1d13e:	6820      	ldr	r0, [r4, #0]
						 enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->driver_api;

	return api->sample_fetch(dev, type);
   1d140:	6843      	ldr	r3, [r0, #4]
   1d142:	2103      	movs	r1, #3
   1d144:	689b      	ldr	r3, [r3, #8]
   1d146:	4798      	blx	r3
	if (err) {
   1d148:	4601      	mov	r1, r0
   1d14a:	b178      	cbz	r0, 1d16c <motion_work_q_handler+0x34>
		LOG_ERR("sensor_sample_fetch failed");
   1d14c:	2301      	movs	r3, #1
   1d14e:	f04f 0000 	mov.w	r0, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   1d152:	4a4a      	ldr	r2, [pc, #296]	; (1d27c <motion_work_q_handler+0x144>)
   1d154:	f363 0007 	bfi	r0, r3, #0, #8
   1d158:	4b49      	ldr	r3, [pc, #292]	; (1d280 <motion_work_q_handler+0x148>)
   1d15a:	494a      	ldr	r1, [pc, #296]	; (1d284 <motion_work_q_handler+0x14c>)
   1d15c:	1a9b      	subs	r3, r3, r2
   1d15e:	08db      	lsrs	r3, r3, #3
   1d160:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("sensor_channel_get failed");
   1d164:	f01f fa8d 	bl	3c682 <log_string_sync>
		if (get_orientation(&motion_data.orientation,
					&motion_data.acceleration) == 0) {
			handler(motion_data);
		}
	}
}
   1d168:	b012      	add	sp, #72	; 0x48
   1d16a:	bd70      	pop	{r4, r5, r6, pc}
	err = sensor_channel_get(accel_dev,
   1d16c:	aa04      	add	r2, sp, #16
   1d16e:	6820      	ldr	r0, [r4, #0]
   1d170:	f01e ff3d 	bl	3bfee <sensor_channel_get>
	if (err) {
   1d174:	b160      	cbz	r0, 1d190 <motion_work_q_handler+0x58>
		LOG_ERR("sensor_channel_get failed");
   1d176:	2301      	movs	r3, #1
   1d178:	f04f 0000 	mov.w	r0, #0
   1d17c:	4a3f      	ldr	r2, [pc, #252]	; (1d27c <motion_work_q_handler+0x144>)
   1d17e:	f363 0007 	bfi	r0, r3, #0, #8
   1d182:	4b3f      	ldr	r3, [pc, #252]	; (1d280 <motion_work_q_handler+0x148>)
   1d184:	4940      	ldr	r1, [pc, #256]	; (1d288 <motion_work_q_handler+0x150>)
   1d186:	1a9b      	subs	r3, r3, r2
   1d188:	08db      	lsrs	r3, r3, #3
   1d18a:	f363 108f 	bfi	r0, r3, #6, #10
   1d18e:	e7e9      	b.n	1d164 <motion_work_q_handler+0x2c>
	err = sensor_channel_get(accel_dev,
   1d190:	aa06      	add	r2, sp, #24
   1d192:	2101      	movs	r1, #1
   1d194:	6820      	ldr	r0, [r4, #0]
   1d196:	f01e ff2a 	bl	3bfee <sensor_channel_get>
	if (err) {
   1d19a:	2800      	cmp	r0, #0
   1d19c:	d1eb      	bne.n	1d176 <motion_work_q_handler+0x3e>
	err = sensor_channel_get(accel_dev,
   1d19e:	aa08      	add	r2, sp, #32
   1d1a0:	2102      	movs	r1, #2
   1d1a2:	6820      	ldr	r0, [r4, #0]
   1d1a4:	f01e ff23 	bl	3bfee <sensor_channel_get>
	if (err) {
   1d1a8:	2800      	cmp	r0, #0
   1d1aa:	d1e4      	bne.n	1d176 <motion_work_q_handler+0x3e>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
   1d1ac:	9805      	ldr	r0, [sp, #20]
   1d1ae:	f7ff fa99 	bl	1c6e4 <__aeabi_i2d>
   1d1b2:	a32f      	add	r3, pc, #188	; (adr r3, 1d270 <motion_work_q_handler+0x138>)
   1d1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d1b8:	f7ff fc28 	bl	1ca0c <__aeabi_ddiv>
   1d1bc:	4604      	mov	r4, r0
   1d1be:	9804      	ldr	r0, [sp, #16]
   1d1c0:	460d      	mov	r5, r1
   1d1c2:	f7ff fa8f 	bl	1c6e4 <__aeabi_i2d>
   1d1c6:	4602      	mov	r2, r0
   1d1c8:	460b      	mov	r3, r1
   1d1ca:	4620      	mov	r0, r4
   1d1cc:	4629      	mov	r1, r5
   1d1ce:	f7ff f93d 	bl	1c44c <__adddf3>
	sensor_data->x = sensor_value_to_double(&accel_data[0]);
   1d1d2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1d1d6:	9807      	ldr	r0, [sp, #28]
   1d1d8:	f7ff fa84 	bl	1c6e4 <__aeabi_i2d>
   1d1dc:	a324      	add	r3, pc, #144	; (adr r3, 1d270 <motion_work_q_handler+0x138>)
   1d1de:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d1e2:	f7ff fc13 	bl	1ca0c <__aeabi_ddiv>
   1d1e6:	4604      	mov	r4, r0
   1d1e8:	9806      	ldr	r0, [sp, #24]
   1d1ea:	460d      	mov	r5, r1
   1d1ec:	f7ff fa7a 	bl	1c6e4 <__aeabi_i2d>
   1d1f0:	4602      	mov	r2, r0
   1d1f2:	460b      	mov	r3, r1
   1d1f4:	4620      	mov	r0, r4
   1d1f6:	4629      	mov	r1, r5
   1d1f8:	f7ff f928 	bl	1c44c <__adddf3>
	sensor_data->y = sensor_value_to_double(&accel_data[1]);
   1d1fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   1d200:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d202:	f7ff fa6f 	bl	1c6e4 <__aeabi_i2d>
   1d206:	a31a      	add	r3, pc, #104	; (adr r3, 1d270 <motion_work_q_handler+0x138>)
   1d208:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d20c:	f7ff fbfe 	bl	1ca0c <__aeabi_ddiv>
   1d210:	4604      	mov	r4, r0
   1d212:	9808      	ldr	r0, [sp, #32]
   1d214:	460d      	mov	r5, r1
   1d216:	f7ff fa65 	bl	1c6e4 <__aeabi_i2d>
   1d21a:	4602      	mov	r2, r0
   1d21c:	460b      	mov	r3, r1
   1d21e:	4620      	mov	r0, r4
   1d220:	4629      	mov	r1, r5
   1d222:	f7ff f913 	bl	1c44c <__adddf3>
	if (acceleration_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   1d226:	2200      	movs	r2, #0
   1d228:	4b18      	ldr	r3, [pc, #96]	; (1d28c <motion_work_q_handler+0x154>)
   1d22a:	4604      	mov	r4, r0
   1d22c:	460d      	mov	r5, r1
   1d22e:	f7ff fd49 	bl	1ccc4 <__aeabi_dcmpge>
   1d232:	b178      	cbz	r0, 1d254 <motion_work_q_handler+0x11c>
		*orientation = IS_ENABLED(CONFIG_ACCEL_INVERTED) ?
   1d234:	2301      	movs	r3, #1
		*orientation = MOTION_ORIENTATION_ON_SIDE;
   1d236:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			handler(motion_data);
   1d23a:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   1d23e:	4b14      	ldr	r3, [pc, #80]	; (1d290 <motion_work_q_handler+0x158>)
   1d240:	681e      	ldr	r6, [r3, #0]
   1d242:	ab12      	add	r3, sp, #72	; 0x48
   1d244:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d248:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   1d24c:	ab0a      	add	r3, sp, #40	; 0x28
   1d24e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d250:	47b0      	blx	r6
}
   1d252:	e789      	b.n	1d168 <motion_work_q_handler+0x30>
	} else if (acceleration_data->z <= -FLIP_ACCELERATION_THRESHOLD) {
   1d254:	2200      	movs	r2, #0
   1d256:	4b0f      	ldr	r3, [pc, #60]	; (1d294 <motion_work_q_handler+0x15c>)
   1d258:	4620      	mov	r0, r4
   1d25a:	4629      	mov	r1, r5
   1d25c:	f7ff fd28 	bl	1ccb0 <__aeabi_dcmple>
   1d260:	b108      	cbz	r0, 1d266 <motion_work_q_handler+0x12e>
		*orientation = IS_ENABLED(CONFIG_ACCEL_INVERTED) ?
   1d262:	2302      	movs	r3, #2
   1d264:	e7e7      	b.n	1d236 <motion_work_q_handler+0xfe>
		*orientation = MOTION_ORIENTATION_ON_SIDE;
   1d266:	2303      	movs	r3, #3
   1d268:	e7e5      	b.n	1d236 <motion_work_q_handler+0xfe>
   1d26a:	bf00      	nop
   1d26c:	f3af 8000 	nop.w
   1d270:	00000000 	.word	0x00000000
   1d274:	412e8480 	.word	0x412e8480
   1d278:	20023978 	.word	0x20023978
   1d27c:	000402cc 	.word	0x000402cc
   1d280:	00040384 	.word	0x00040384
   1d284:	00041c3a 	.word	0x00041c3a
   1d288:	00041c55 	.word	0x00041c55
   1d28c:	40140000 	.word	0x40140000
   1d290:	2002397c 	.word	0x2002397c
   1d294:	c0140000 	.word	0xc0140000

0001d298 <env_sensors_poll_fn>:
{
	return initialized ? submit_poll_work(K_NO_WAIT) : -ENXIO;
}

static void env_sensors_poll_fn(struct k_work *work)
{
   1d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d29c:	b08d      	sub	sp, #52	; 0x34
	int num_sensors = ARRAY_SIZE(env_sensors);
	struct sensor_value data[num_sensors];

	int err;

	if (data_send_interval_s == 0) {
   1d29e:	4b5c      	ldr	r3, [pc, #368]	; (1d410 <env_sensors_poll_fn+0x178>)
{
   1d2a0:	af00      	add	r7, sp, #0
	if (data_send_interval_s == 0) {
   1d2a2:	681a      	ldr	r2, [r3, #0]
{
   1d2a4:	f8c7 d014 	str.w	sp, [r7, #20]
	if (data_send_interval_s == 0) {
   1d2a8:	607b      	str	r3, [r7, #4]
   1d2aa:	2a00      	cmp	r2, #0
   1d2ac:	d055      	beq.n	1d35a <env_sensors_poll_fn+0xc2>
		if (err) {
			LOG_ERR("Failed to fetch data from %s, error: %d",
				log_strdup(env_sensors[0]->dev_name), err);
		}
	}
	for (int i = 0; i < num_sensors; i++) {
   1d2ae:	f04f 0800 	mov.w	r8, #0
   1d2b2:	4b58      	ldr	r3, [pc, #352]	; (1d414 <env_sensors_poll_fn+0x17c>)
		if (!(IS_ENABLED(CONFIG_BME680))) {
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
				env_sensors[i]->channel);
			if (err) {
				LOG_ERR("Failed to fetch data from %s, error: %d",
   1d2b4:	4a58      	ldr	r2, [pc, #352]	; (1d418 <env_sensors_poll_fn+0x180>)
   1d2b6:	4c59      	ldr	r4, [pc, #356]	; (1d41c <env_sensors_poll_fn+0x184>)
   1d2b8:	1a9b      	subs	r3, r3, r2
   1d2ba:	f3c3 09c9 	ubfx	r9, r3, #3, #10
   1d2be:	f107 0518 	add.w	r5, r7, #24
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
   1d2c2:	6823      	ldr	r3, [r4, #0]
   1d2c4:	6998      	ldr	r0, [r3, #24]
   1d2c6:	8a19      	ldrh	r1, [r3, #16]
	return api->sample_fetch(dev, type);
   1d2c8:	6843      	ldr	r3, [r0, #4]
   1d2ca:	689b      	ldr	r3, [r3, #8]
   1d2cc:	4798      	blx	r3
			if (err) {
   1d2ce:	4606      	mov	r6, r0
   1d2d0:	b188      	cbz	r0, 1d2f6 <env_sensors_poll_fn+0x5e>
				LOG_ERR("Failed to fetch data from %s, error: %d",
   1d2d2:	6823      	ldr	r3, [r4, #0]
   1d2d4:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
   1d2d8:	f042 0201 	orr.w	r2, r2, #1
   1d2dc:	6958      	ldr	r0, [r3, #20]
   1d2de:	f362 0a07 	bfi	sl, r2, #0, #8
   1d2e2:	f01f f9e0 	bl	3c6a6 <log_strdup>
   1d2e6:	f369 1a8f 	bfi	sl, r9, #6, #10
   1d2ea:	4602      	mov	r2, r0
   1d2ec:	4633      	mov	r3, r6
   1d2ee:	494c      	ldr	r1, [pc, #304]	; (1d420 <env_sensors_poll_fn+0x188>)
   1d2f0:	4650      	mov	r0, sl
   1d2f2:	f01f f9c6 	bl	3c682 <log_string_sync>
					log_strdup(env_sensors[i]->dev_name), err);
			}
		}
		err = sensor_channel_get(env_sensors[i]->dev,
   1d2f6:	6823      	ldr	r3, [r4, #0]
   1d2f8:	6998      	ldr	r0, [r3, #24]
   1d2fa:	8a19      	ldrh	r1, [r3, #16]
	return api->channel_get(dev, chan, val);
   1d2fc:	6843      	ldr	r3, [r0, #4]
   1d2fe:	462a      	mov	r2, r5
   1d300:	68db      	ldr	r3, [r3, #12]
   1d302:	4798      	blx	r3
			env_sensors[i]->channel, &data[i]);
		if (err) {
   1d304:	6823      	ldr	r3, [r4, #0]
   1d306:	4606      	mov	r6, r0
   1d308:	b358      	cbz	r0, 1d362 <env_sensors_poll_fn+0xca>
			LOG_ERR("Failed to fetch data from %s, error: %d",
   1d30a:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
   1d30e:	f042 0201 	orr.w	r2, r2, #1
   1d312:	6958      	ldr	r0, [r3, #20]
   1d314:	f362 0b07 	bfi	fp, r2, #0, #8
   1d318:	f01f f9c5 	bl	3c6a6 <log_strdup>
   1d31c:	f369 1b8f 	bfi	fp, r9, #6, #10
   1d320:	4602      	mov	r2, r0
   1d322:	4633      	mov	r3, r6
   1d324:	493e      	ldr	r1, [pc, #248]	; (1d420 <env_sensors_poll_fn+0x188>)
   1d326:	4658      	mov	r0, fp
   1d328:	f01f f9ab 	bl	3c682 <log_string_sync>
	for (int i = 0; i < num_sensors; i++) {
   1d32c:	f108 0801 	add.w	r8, r8, #1
   1d330:	f1b8 0f03 	cmp.w	r8, #3
   1d334:	f104 0404 	add.w	r4, r4, #4
   1d338:	f105 0508 	add.w	r5, r5, #8
   1d33c:	d1c1      	bne.n	1d2c2 <env_sensors_poll_fn+0x2a>
			env_sensors[i]->sensor.value = sensor_value_to_double(&data[i]);
			k_spin_unlock(&(env_sensors[i]->lock), key);
		}
	}

	if (data_ready_cb) {
   1d33e:	4b39      	ldr	r3, [pc, #228]	; (1d424 <env_sensors_poll_fn+0x18c>)
   1d340:	681b      	ldr	r3, [r3, #0]
   1d342:	b103      	cbz	r3, 1d346 <env_sensors_poll_fn+0xae>
		data_ready_cb();
   1d344:	4798      	blx	r3
	}

	submit_poll_work(backoff_enabled ?
   1d346:	4b38      	ldr	r3, [pc, #224]	; (1d428 <env_sensors_poll_fn+0x190>)
   1d348:	781b      	ldrb	r3, [r3, #0]
   1d34a:	2b00      	cmp	r3, #0
   1d34c:	d158      	bne.n	1d400 <env_sensors_poll_fn+0x168>
   1d34e:	687b      	ldr	r3, [r7, #4]
   1d350:	6818      	ldr	r0, [r3, #0]
   1d352:	f005 f9e5 	bl	22720 <submit_poll_work>
   1d356:	f8d7 d014 	ldr.w	sp, [r7, #20]
		CONFIG_ENVIRONMENT_DATA_BACKOFF_TIME : data_send_interval_s);
}
   1d35a:	3734      	adds	r7, #52	; 0x34
   1d35c:	46bd      	mov	sp, r7
   1d35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			k_spinlock_key_t key = k_spin_lock(&(env_sensors[i]->lock));
   1d362:	f103 061c 	add.w	r6, r3, #28
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1d366:	f04f 0320 	mov.w	r3, #32
   1d36a:	f3ef 8211 	mrs	r2, BASEPRI
   1d36e:	f383 8811 	msr	BASEPRI, r3
   1d372:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d376:	4630      	mov	r0, r6
   1d378:	613a      	str	r2, [r7, #16]
   1d37a:	f01b fbbd 	bl	38af8 <z_spin_lock_valid>
   1d37e:	b968      	cbnz	r0, 1d39c <env_sensors_poll_fn+0x104>
   1d380:	234a      	movs	r3, #74	; 0x4a
   1d382:	4a2a      	ldr	r2, [pc, #168]	; (1d42c <env_sensors_poll_fn+0x194>)
   1d384:	492a      	ldr	r1, [pc, #168]	; (1d430 <env_sensors_poll_fn+0x198>)
   1d386:	482b      	ldr	r0, [pc, #172]	; (1d434 <env_sensors_poll_fn+0x19c>)
   1d388:	f01f f924 	bl	3c5d4 <printk>
   1d38c:	4631      	mov	r1, r6
   1d38e:	482a      	ldr	r0, [pc, #168]	; (1d438 <env_sensors_poll_fn+0x1a0>)
   1d390:	f01f f920 	bl	3c5d4 <printk>
   1d394:	214a      	movs	r1, #74	; 0x4a
   1d396:	4825      	ldr	r0, [pc, #148]	; (1d42c <env_sensors_poll_fn+0x194>)
   1d398:	f01f f962 	bl	3c660 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   1d39c:	4630      	mov	r0, r6
   1d39e:	f01b fbc9 	bl	38b34 <z_spin_lock_set_owner>
	return (double)val->val1 + (double)val->val2 / 1000000;
   1d3a2:	6868      	ldr	r0, [r5, #4]
   1d3a4:	f7ff f99e 	bl	1c6e4 <__aeabi_i2d>
   1d3a8:	a317      	add	r3, pc, #92	; (adr r3, 1d408 <env_sensors_poll_fn+0x170>)
   1d3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d3ae:	f7ff fb2d 	bl	1ca0c <__aeabi_ddiv>
   1d3b2:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1d3b6:	6828      	ldr	r0, [r5, #0]
   1d3b8:	f7ff f994 	bl	1c6e4 <__aeabi_i2d>
   1d3bc:	4602      	mov	r2, r0
   1d3be:	460b      	mov	r3, r1
   1d3c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1d3c4:	f7ff f842 	bl	1c44c <__adddf3>
			env_sensors[i]->sensor.value = sensor_value_to_double(&data[i]);
   1d3c8:	6826      	ldr	r6, [r4, #0]
   1d3ca:	e9c6 0102 	strd	r0, r1, [r6, #8]
			k_spin_unlock(&(env_sensors[i]->lock), key);
   1d3ce:	361c      	adds	r6, #28
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d3d0:	4630      	mov	r0, r6
   1d3d2:	f01b fb9f 	bl	38b14 <z_spin_unlock_valid>
   1d3d6:	b968      	cbnz	r0, 1d3f4 <env_sensors_poll_fn+0x15c>
   1d3d8:	235d      	movs	r3, #93	; 0x5d
   1d3da:	4a14      	ldr	r2, [pc, #80]	; (1d42c <env_sensors_poll_fn+0x194>)
   1d3dc:	4917      	ldr	r1, [pc, #92]	; (1d43c <env_sensors_poll_fn+0x1a4>)
   1d3de:	4815      	ldr	r0, [pc, #84]	; (1d434 <env_sensors_poll_fn+0x19c>)
   1d3e0:	f01f f8f8 	bl	3c5d4 <printk>
   1d3e4:	4631      	mov	r1, r6
   1d3e6:	4816      	ldr	r0, [pc, #88]	; (1d440 <env_sensors_poll_fn+0x1a8>)
   1d3e8:	f01f f8f4 	bl	3c5d4 <printk>
   1d3ec:	215d      	movs	r1, #93	; 0x5d
   1d3ee:	480f      	ldr	r0, [pc, #60]	; (1d42c <env_sensors_poll_fn+0x194>)
   1d3f0:	f01f f936 	bl	3c660 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1d3f4:	693b      	ldr	r3, [r7, #16]
   1d3f6:	f383 8811 	msr	BASEPRI, r3
   1d3fa:	f3bf 8f6f 	isb	sy
   1d3fe:	e795      	b.n	1d32c <env_sensors_poll_fn+0x94>
	submit_poll_work(backoff_enabled ?
   1d400:	2014      	movs	r0, #20
   1d402:	e7a6      	b.n	1d352 <env_sensors_poll_fn+0xba>
   1d404:	f3af 8000 	nop.w
   1d408:	00000000 	.word	0x00000000
   1d40c:	412e8480 	.word	0x412e8480
   1d410:	20031500 	.word	0x20031500
   1d414:	0004033c 	.word	0x0004033c
   1d418:	000402cc 	.word	0x000402cc
   1d41c:	00040640 	.word	0x00040640
   1d420:	00042241 	.word	0x00042241
   1d424:	20023a04 	.word	0x20023a04
   1d428:	20029f2c 	.word	0x20029f2c
   1d42c:	00042269 	.word	0x00042269
   1d430:	00042288 	.word	0x00042288
   1d434:	00041757 	.word	0x00041757
   1d438:	0004229d 	.word	0x0004229d
   1d43c:	000422b5 	.word	0x000422b5
   1d440:	000422cc 	.word	0x000422cc
   1d444:	00000000 	.word	0x00000000

0001d448 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1d448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d44c:	4605      	mov	r5, r0
   1d44e:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d450:	460c      	mov	r4, r1
   1d452:	b909      	cbnz	r1, 1d458 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1d454:	2000      	movs	r0, #0
   1d456:	e024      	b.n	1d4a2 <parse_value+0x5a>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d458:	6808      	ldr	r0, [r1, #0]
   1d45a:	2800      	cmp	r0, #0
   1d45c:	d0fa      	beq.n	1d454 <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1d45e:	688b      	ldr	r3, [r1, #8]
   1d460:	6862      	ldr	r2, [r4, #4]
   1d462:	1d19      	adds	r1, r3, #4
   1d464:	4291      	cmp	r1, r2
   1d466:	d80b      	bhi.n	1d480 <parse_value+0x38>
   1d468:	2204      	movs	r2, #4
   1d46a:	49b1      	ldr	r1, [pc, #708]	; (1d730 <parse_value+0x2e8>)
   1d46c:	4418      	add	r0, r3
   1d46e:	f021 fe25 	bl	3f0bc <strncmp>
   1d472:	b928      	cbnz	r0, 1d480 <parse_value+0x38>
        item->type = cJSON_NULL;
   1d474:	2304      	movs	r3, #4
   1d476:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1d478:	68a3      	ldr	r3, [r4, #8]
   1d47a:	3304      	adds	r3, #4
    input_buffer->offset++;
   1d47c:	60a3      	str	r3, [r4, #8]
   1d47e:	e074      	b.n	1d56a <parse_value+0x122>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1d480:	68a3      	ldr	r3, [r4, #8]
   1d482:	6862      	ldr	r2, [r4, #4]
   1d484:	1d59      	adds	r1, r3, #5
   1d486:	4291      	cmp	r1, r2
   1d488:	d80e      	bhi.n	1d4a8 <parse_value+0x60>
   1d48a:	6820      	ldr	r0, [r4, #0]
   1d48c:	2205      	movs	r2, #5
   1d48e:	49a9      	ldr	r1, [pc, #676]	; (1d734 <parse_value+0x2ec>)
   1d490:	4418      	add	r0, r3
   1d492:	f021 fe13 	bl	3f0bc <strncmp>
   1d496:	b938      	cbnz	r0, 1d4a8 <parse_value+0x60>
        item->type = cJSON_False;
   1d498:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1d49a:	68a3      	ldr	r3, [r4, #8]
        item->type = cJSON_False;
   1d49c:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
   1d49e:	3305      	adds	r3, #5
        input_buffer->offset += 4;
   1d4a0:	60a3      	str	r3, [r4, #8]
}
   1d4a2:	b013      	add	sp, #76	; 0x4c
   1d4a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1d4a8:	68a3      	ldr	r3, [r4, #8]
   1d4aa:	6862      	ldr	r2, [r4, #4]
   1d4ac:	1d19      	adds	r1, r3, #4
   1d4ae:	4291      	cmp	r1, r2
   1d4b0:	d80d      	bhi.n	1d4ce <parse_value+0x86>
   1d4b2:	6820      	ldr	r0, [r4, #0]
   1d4b4:	2204      	movs	r2, #4
   1d4b6:	49a0      	ldr	r1, [pc, #640]	; (1d738 <parse_value+0x2f0>)
   1d4b8:	4418      	add	r0, r3
   1d4ba:	f021 fdff 	bl	3f0bc <strncmp>
   1d4be:	b930      	cbnz	r0, 1d4ce <parse_value+0x86>
        item->type = cJSON_True;
   1d4c0:	2302      	movs	r3, #2
        item->valueint = 1;
   1d4c2:	2001      	movs	r0, #1
        item->type = cJSON_True;
   1d4c4:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1d4c6:	68a3      	ldr	r3, [r4, #8]
        item->valueint = 1;
   1d4c8:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
   1d4ca:	3304      	adds	r3, #4
   1d4cc:	e7e8      	b.n	1d4a0 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1d4ce:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
   1d4d2:	42ba      	cmp	r2, r7
   1d4d4:	d2be      	bcs.n	1d454 <parse_value+0xc>
   1d4d6:	6820      	ldr	r0, [r4, #0]
   1d4d8:	5c83      	ldrb	r3, [r0, r2]
   1d4da:	2b22      	cmp	r3, #34	; 0x22
   1d4dc:	d104      	bne.n	1d4e8 <parse_value+0xa0>
        return parse_string(item, input_buffer);
   1d4de:	4621      	mov	r1, r4
   1d4e0:	4628      	mov	r0, r5
   1d4e2:	f008 fd71 	bl	25fc8 <parse_string>
   1d4e6:	e7dc      	b.n	1d4a2 <parse_value+0x5a>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1d4e8:	2b2d      	cmp	r3, #45	; 0x2d
   1d4ea:	d003      	beq.n	1d4f4 <parse_value+0xac>
   1d4ec:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   1d4f0:	2e09      	cmp	r6, #9
   1d4f2:	d850      	bhi.n	1d596 <parse_value+0x14e>
    unsigned char *after_end = NULL;
   1d4f4:	2300      	movs	r3, #0
   1d4f6:	9301      	str	r3, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d4f8:	2800      	cmp	r0, #0
   1d4fa:	d0ab      	beq.n	1d454 <parse_value+0xc>
   1d4fc:	1abf      	subs	r7, r7, r2
   1d4fe:	ae02      	add	r6, sp, #8
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1d500:	429f      	cmp	r7, r3
   1d502:	eb02 0103 	add.w	r1, r2, r3
   1d506:	d00e      	beq.n	1d526 <parse_value+0xde>
        switch (buffer_at_offset(input_buffer)[i])
   1d508:	5c41      	ldrb	r1, [r0, r1]
   1d50a:	2939      	cmp	r1, #57	; 0x39
   1d50c:	d82f      	bhi.n	1d56e <parse_value+0x126>
   1d50e:	2930      	cmp	r1, #48	; 0x30
   1d510:	d205      	bcs.n	1d51e <parse_value+0xd6>
   1d512:	292d      	cmp	r1, #45	; 0x2d
   1d514:	d003      	beq.n	1d51e <parse_value+0xd6>
   1d516:	292e      	cmp	r1, #46	; 0x2e
   1d518:	d001      	beq.n	1d51e <parse_value+0xd6>
   1d51a:	292b      	cmp	r1, #43	; 0x2b
   1d51c:	d103      	bne.n	1d526 <parse_value+0xde>
                number_c_string[i] = decimal_point;
   1d51e:	54f1      	strb	r1, [r6, r3]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1d520:	3301      	adds	r3, #1
   1d522:	2b3f      	cmp	r3, #63	; 0x3f
   1d524:	d1ec      	bne.n	1d500 <parse_value+0xb8>
    number_c_string[i] = '\0';
   1d526:	aa12      	add	r2, sp, #72	; 0x48
   1d528:	4413      	add	r3, r2
   1d52a:	2200      	movs	r2, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d52c:	a901      	add	r1, sp, #4
   1d52e:	4630      	mov	r0, r6
    number_c_string[i] = '\0';
   1d530:	f803 2c40 	strb.w	r2, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d534:	f01d fa56 	bl	3a9e4 <strtod>
    if (number_c_string == after_end)
   1d538:	9f01      	ldr	r7, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d53a:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
   1d53e:	42b7      	cmp	r7, r6
   1d540:	d088      	beq.n	1d454 <parse_value+0xc>
    if (number >= INT_MAX)
   1d542:	a379      	add	r3, pc, #484	; (adr r3, 1d728 <parse_value+0x2e0>)
   1d544:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1d548:	ed85 0b06 	vstr	d0, [r5, #24]
    if (number >= INT_MAX)
   1d54c:	ee10 0a10 	vmov	r0, s0
   1d550:	4649      	mov	r1, r9
   1d552:	f7ff fbb7 	bl	1ccc4 <__aeabi_dcmpge>
   1d556:	b170      	cbz	r0, 1d576 <parse_value+0x12e>
        item->valueint = INT_MAX;
   1d558:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1d55c:	616b      	str	r3, [r5, #20]
    item->type = cJSON_Number;
   1d55e:	2308      	movs	r3, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1d560:	1bbe      	subs	r6, r7, r6
   1d562:	68a7      	ldr	r7, [r4, #8]
    item->type = cJSON_Number;
   1d564:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1d566:	443e      	add	r6, r7
   1d568:	60a6      	str	r6, [r4, #8]
    return true;
   1d56a:	2001      	movs	r0, #1
   1d56c:	e799      	b.n	1d4a2 <parse_value+0x5a>
        switch (buffer_at_offset(input_buffer)[i])
   1d56e:	2945      	cmp	r1, #69	; 0x45
   1d570:	d0d5      	beq.n	1d51e <parse_value+0xd6>
   1d572:	2965      	cmp	r1, #101	; 0x65
   1d574:	e7d2      	b.n	1d51c <parse_value+0xd4>
    else if (number <= (double)INT_MIN)
   1d576:	2200      	movs	r2, #0
   1d578:	4b70      	ldr	r3, [pc, #448]	; (1d73c <parse_value+0x2f4>)
   1d57a:	4640      	mov	r0, r8
   1d57c:	4649      	mov	r1, r9
   1d57e:	f7ff fb97 	bl	1ccb0 <__aeabi_dcmple>
   1d582:	b110      	cbz	r0, 1d58a <parse_value+0x142>
        item->valueint = INT_MIN;
   1d584:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1d588:	e7e8      	b.n	1d55c <parse_value+0x114>
        item->valueint = (int)number;
   1d58a:	4640      	mov	r0, r8
   1d58c:	4649      	mov	r1, r9
   1d58e:	f7ff fbad 	bl	1ccec <__aeabi_d2iz>
   1d592:	6168      	str	r0, [r5, #20]
   1d594:	e7e3      	b.n	1d55e <parse_value+0x116>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1d596:	2b5b      	cmp	r3, #91	; 0x5b
   1d598:	d153      	bne.n	1d642 <parse_value+0x1fa>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d59a:	68e3      	ldr	r3, [r4, #12]
   1d59c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1d5a0:	f4bf af58 	bcs.w	1d454 <parse_value+0xc>
    input_buffer->depth++;
   1d5a4:	3301      	adds	r3, #1
   1d5a6:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1d5a8:	5c83      	ldrb	r3, [r0, r2]
   1d5aa:	2b5b      	cmp	r3, #91	; 0x5b
   1d5ac:	f47f af52 	bne.w	1d454 <parse_value+0xc>
    input_buffer->offset++;
   1d5b0:	3201      	adds	r2, #1
   1d5b2:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1d5b4:	4620      	mov	r0, r4
   1d5b6:	f020 f97d 	bl	3d8b4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1d5ba:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d5be:	4293      	cmp	r3, r2
   1d5c0:	d262      	bcs.n	1d688 <parse_value+0x240>
   1d5c2:	6822      	ldr	r2, [r4, #0]
   1d5c4:	5cd2      	ldrb	r2, [r2, r3]
   1d5c6:	2a5d      	cmp	r2, #93	; 0x5d
   1d5c8:	d109      	bne.n	1d5de <parse_value+0x196>
    cJSON *head = NULL; /* head of the linked list */
   1d5ca:	2600      	movs	r6, #0
    input_buffer->depth--;
   1d5cc:	68e3      	ldr	r3, [r4, #12]
   1d5ce:	3b01      	subs	r3, #1
   1d5d0:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   1d5d2:	2320      	movs	r3, #32
    item->child = head;
   1d5d4:	e9c5 6302 	strd	r6, r3, [r5, #8]
    input_buffer->offset++;
   1d5d8:	68a3      	ldr	r3, [r4, #8]
   1d5da:	3301      	adds	r3, #1
   1d5dc:	e74e      	b.n	1d47c <parse_value+0x34>
    cJSON *current_item = NULL;
   1d5de:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* head of the linked list */
   1d5e2:	4646      	mov	r6, r8
    input_buffer->offset--;
   1d5e4:	3b01      	subs	r3, #1
   1d5e6:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1d5e8:	6920      	ldr	r0, [r4, #16]
   1d5ea:	f020 f995 	bl	3d918 <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1d5ee:	4607      	mov	r7, r0
   1d5f0:	b300      	cbz	r0, 1d634 <parse_value+0x1ec>
        if (head == NULL)
   1d5f2:	b1ee      	cbz	r6, 1d630 <parse_value+0x1e8>
            current_item->next = new_item;
   1d5f4:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1d5f8:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1d5fc:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d5fe:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d600:	3301      	adds	r3, #1
   1d602:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d604:	f020 f956 	bl	3d8b4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1d608:	4621      	mov	r1, r4
   1d60a:	4638      	mov	r0, r7
   1d60c:	f7ff ff1c 	bl	1d448 <parse_value>
   1d610:	b198      	cbz	r0, 1d63a <parse_value+0x1f2>
        buffer_skip_whitespace(input_buffer);
   1d612:	4620      	mov	r0, r4
   1d614:	f020 f94e 	bl	3d8b4 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1d618:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d61c:	4293      	cmp	r3, r2
   1d61e:	d20c      	bcs.n	1d63a <parse_value+0x1f2>
   1d620:	6822      	ldr	r2, [r4, #0]
   1d622:	46b8      	mov	r8, r7
   1d624:	5cd3      	ldrb	r3, [r2, r3]
   1d626:	2b2c      	cmp	r3, #44	; 0x2c
   1d628:	d0de      	beq.n	1d5e8 <parse_value+0x1a0>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1d62a:	2b5d      	cmp	r3, #93	; 0x5d
   1d62c:	d105      	bne.n	1d63a <parse_value+0x1f2>
   1d62e:	e7cd      	b.n	1d5cc <parse_value+0x184>
        if (head == NULL)
   1d630:	4606      	mov	r6, r0
   1d632:	e7e3      	b.n	1d5fc <parse_value+0x1b4>
    if (head != NULL)
   1d634:	2e00      	cmp	r6, #0
   1d636:	f43f af0d 	beq.w	1d454 <parse_value+0xc>
        cJSON_Delete(head);
   1d63a:	4630      	mov	r0, r6
        cJSON_Delete(head);
   1d63c:	f009 f8ce 	bl	267dc <cJSON_Delete>
   1d640:	e708      	b.n	1d454 <parse_value+0xc>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1d642:	2b7b      	cmp	r3, #123	; 0x7b
   1d644:	f47f af06 	bne.w	1d454 <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d648:	68e3      	ldr	r3, [r4, #12]
   1d64a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1d64e:	f4bf af01 	bcs.w	1d454 <parse_value+0xc>
    input_buffer->depth++;
   1d652:	3301      	adds	r3, #1
   1d654:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1d656:	5c83      	ldrb	r3, [r0, r2]
   1d658:	2b7b      	cmp	r3, #123	; 0x7b
   1d65a:	f47f aefb 	bne.w	1d454 <parse_value+0xc>
    input_buffer->offset++;
   1d65e:	3201      	adds	r2, #1
   1d660:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1d662:	4620      	mov	r0, r4
   1d664:	f020 f926 	bl	3d8b4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1d668:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d66c:	4293      	cmp	r3, r2
   1d66e:	d20b      	bcs.n	1d688 <parse_value+0x240>
   1d670:	6822      	ldr	r2, [r4, #0]
   1d672:	5cd2      	ldrb	r2, [r2, r3]
   1d674:	2a7d      	cmp	r2, #125	; 0x7d
   1d676:	d10a      	bne.n	1d68e <parse_value+0x246>
    cJSON *head = NULL; /* linked list head */
   1d678:	2700      	movs	r7, #0
    input_buffer->depth--;
   1d67a:	68e3      	ldr	r3, [r4, #12]
   1d67c:	3b01      	subs	r3, #1
   1d67e:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   1d680:	2340      	movs	r3, #64	; 0x40
    item->child = head;
   1d682:	e9c5 7302 	strd	r7, r3, [r5, #8]
   1d686:	e7a7      	b.n	1d5d8 <parse_value+0x190>
        input_buffer->offset--;
   1d688:	3b01      	subs	r3, #1
   1d68a:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1d68c:	e6e2      	b.n	1d454 <parse_value+0xc>
    cJSON *current_item = NULL;
   1d68e:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* linked list head */
   1d692:	4647      	mov	r7, r8
        current_item->valuestring = NULL;
   1d694:	46c1      	mov	r9, r8
    input_buffer->offset--;
   1d696:	3b01      	subs	r3, #1
   1d698:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1d69a:	6920      	ldr	r0, [r4, #16]
   1d69c:	f020 f93c 	bl	3d918 <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1d6a0:	4606      	mov	r6, r0
   1d6a2:	2800      	cmp	r0, #0
   1d6a4:	d039      	beq.n	1d71a <parse_value+0x2d2>
        if (head == NULL)
   1d6a6:	b3b7      	cbz	r7, 1d716 <parse_value+0x2ce>
            current_item->next = new_item;
   1d6a8:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1d6ac:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1d6b0:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d6b2:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d6b4:	3301      	adds	r3, #1
   1d6b6:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d6b8:	f020 f8fc 	bl	3d8b4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1d6bc:	4621      	mov	r1, r4
   1d6be:	4630      	mov	r0, r6
   1d6c0:	f008 fc82 	bl	25fc8 <parse_string>
   1d6c4:	b360      	cbz	r0, 1d720 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1d6c6:	4620      	mov	r0, r4
   1d6c8:	f020 f8f4 	bl	3d8b4 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1d6cc:	6933      	ldr	r3, [r6, #16]
        current_item->valuestring = NULL;
   1d6ce:	f8c6 9010 	str.w	r9, [r6, #16]
        current_item->string = current_item->valuestring;
   1d6d2:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1d6d4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d6d8:	4293      	cmp	r3, r2
   1d6da:	d221      	bcs.n	1d720 <parse_value+0x2d8>
   1d6dc:	6822      	ldr	r2, [r4, #0]
   1d6de:	5cd2      	ldrb	r2, [r2, r3]
   1d6e0:	2a3a      	cmp	r2, #58	; 0x3a
   1d6e2:	d11d      	bne.n	1d720 <parse_value+0x2d8>
        input_buffer->offset++;
   1d6e4:	3301      	adds	r3, #1
   1d6e6:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d6e8:	4620      	mov	r0, r4
   1d6ea:	f020 f8e3 	bl	3d8b4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1d6ee:	4621      	mov	r1, r4
   1d6f0:	4630      	mov	r0, r6
   1d6f2:	f7ff fea9 	bl	1d448 <parse_value>
   1d6f6:	b198      	cbz	r0, 1d720 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1d6f8:	4620      	mov	r0, r4
   1d6fa:	f020 f8db 	bl	3d8b4 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1d6fe:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d702:	4293      	cmp	r3, r2
   1d704:	d20c      	bcs.n	1d720 <parse_value+0x2d8>
   1d706:	6822      	ldr	r2, [r4, #0]
   1d708:	46b0      	mov	r8, r6
   1d70a:	5cd3      	ldrb	r3, [r2, r3]
   1d70c:	2b2c      	cmp	r3, #44	; 0x2c
   1d70e:	d0c4      	beq.n	1d69a <parse_value+0x252>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1d710:	2b7d      	cmp	r3, #125	; 0x7d
   1d712:	d105      	bne.n	1d720 <parse_value+0x2d8>
   1d714:	e7b1      	b.n	1d67a <parse_value+0x232>
        if (head == NULL)
   1d716:	4607      	mov	r7, r0
   1d718:	e7ca      	b.n	1d6b0 <parse_value+0x268>
    if (head != NULL)
   1d71a:	2f00      	cmp	r7, #0
   1d71c:	f43f ae9a 	beq.w	1d454 <parse_value+0xc>
        cJSON_Delete(head);
   1d720:	4638      	mov	r0, r7
   1d722:	e78b      	b.n	1d63c <parse_value+0x1f4>
   1d724:	f3af 8000 	nop.w
   1d728:	ffc00000 	.word	0xffc00000
   1d72c:	41dfffff 	.word	0x41dfffff
   1d730:	000434f6 	.word	0x000434f6
   1d734:	0004350d 	.word	0x0004350d
   1d738:	00043513 	.word	0x00043513
   1d73c:	c1e00000 	.word	0xc1e00000

0001d740 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d740:	4b17      	ldr	r3, [pc, #92]	; (1d7a0 <cJSON_CreateNumber+0x60>)
{
   1d742:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d744:	6818      	ldr	r0, [r3, #0]
{
   1d746:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d74a:	f020 f8e5 	bl	3d918 <cJSON_New_Item.isra.1>
    if(item)
   1d74e:	4604      	mov	r4, r0
   1d750:	b170      	cbz	r0, 1d770 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1d752:	2308      	movs	r3, #8
        item->valuedouble = num;
   1d754:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1d758:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1d75a:	4639      	mov	r1, r7
   1d75c:	a30e      	add	r3, pc, #56	; (adr r3, 1d798 <cJSON_CreateNumber+0x58>)
   1d75e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d762:	4630      	mov	r0, r6
   1d764:	f7ff faae 	bl	1ccc4 <__aeabi_dcmpge>
   1d768:	b120      	cbz	r0, 1d774 <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1d76a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1d76e:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1d770:	4620      	mov	r0, r4
   1d772:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1d774:	2200      	movs	r2, #0
   1d776:	4b0b      	ldr	r3, [pc, #44]	; (1d7a4 <cJSON_CreateNumber+0x64>)
   1d778:	4630      	mov	r0, r6
   1d77a:	4639      	mov	r1, r7
   1d77c:	f7ff fa98 	bl	1ccb0 <__aeabi_dcmple>
   1d780:	b110      	cbz	r0, 1d788 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1d782:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1d786:	e7f2      	b.n	1d76e <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1d788:	4630      	mov	r0, r6
   1d78a:	4639      	mov	r1, r7
   1d78c:	f7ff faae 	bl	1ccec <__aeabi_d2iz>
   1d790:	6160      	str	r0, [r4, #20]
    return item;
   1d792:	e7ed      	b.n	1d770 <cJSON_CreateNumber+0x30>
   1d794:	f3af 8000 	nop.w
   1d798:	ffc00000 	.word	0xffc00000
   1d79c:	41dfffff 	.word	0x41dfffff
   1d7a0:	2003153c 	.word	0x2003153c
   1d7a4:	c1e00000 	.word	0xc1e00000

0001d7a8 <double_to_sensor_value>:
 * @param val Sensor value to convert.
 * @param sense_val Pointer to sensor_value to store the converted data.
 */
static void double_to_sensor_value(double val,
				struct sensor_value *sense_val)
{
   1d7a8:	b5d0      	push	{r4, r6, r7, lr}
   1d7aa:	4614      	mov	r4, r2
   1d7ac:	460f      	mov	r7, r1
   1d7ae:	4606      	mov	r6, r0
	sense_val->val1 = (int)val;
   1d7b0:	f7ff fa9c 	bl	1ccec <__aeabi_d2iz>
   1d7b4:	6020      	str	r0, [r4, #0]
	sense_val->val2 = (val - (int)val) * 1000000;
   1d7b6:	f7fe ff95 	bl	1c6e4 <__aeabi_i2d>
   1d7ba:	4602      	mov	r2, r0
   1d7bc:	460b      	mov	r3, r1
   1d7be:	4630      	mov	r0, r6
   1d7c0:	4639      	mov	r1, r7
   1d7c2:	f7fe fe41 	bl	1c448 <__aeabi_dsub>
   1d7c6:	a304      	add	r3, pc, #16	; (adr r3, 1d7d8 <double_to_sensor_value+0x30>)
   1d7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d7cc:	f7fe fff4 	bl	1c7b8 <__aeabi_dmul>
   1d7d0:	f7ff fa8c 	bl	1ccec <__aeabi_d2iz>
   1d7d4:	6060      	str	r0, [r4, #4]
}
   1d7d6:	bdd0      	pop	{r4, r6, r7, pc}
   1d7d8:	00000000 	.word	0x00000000
   1d7dc:	412e8480 	.word	0x412e8480

0001d7e0 <sensor_sim_sample_fetch>:
	return 0;
}

static int sensor_sim_sample_fetch(struct device *dev,
				enum sensor_channel chan)
{
   1d7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (chan) {
   1d7e2:	2910      	cmp	r1, #16
   1d7e4:	f200 80a6 	bhi.w	1d934 <sensor_sim_sample_fetch+0x154>
   1d7e8:	e8df f001 	tbb	[pc, r1]
   1d7ec:	40302009 	.word	0x40302009
   1d7f0:	a4a4a4a4 	.word	0xa4a4a4a4
   1d7f4:	a4a4a4a4 	.word	0xa4a4a4a4
   1d7f8:	a49068a4 	.word	0xa49068a4
   1d7fc:	7d          	.byte	0x7d
   1d7fd:	00          	.byte	0x00
			accel_samples[0] = static_val_coeff * max_variation;
   1d7fe:	4c54      	ldr	r4, [pc, #336]	; (1d950 <sensor_sim_sample_fetch+0x170>)
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1d800:	f00f fe02 	bl	2d408 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1d804:	6820      	ldr	r0, [r4, #0]
   1d806:	f7fe ff6d 	bl	1c6e4 <__aeabi_i2d>
   1d80a:	4b52      	ldr	r3, [pc, #328]	; (1d954 <sensor_sim_sample_fetch+0x174>)
   1d80c:	2200      	movs	r2, #0
   1d80e:	4606      	mov	r6, r0
   1d810:	460f      	mov	r7, r1
   1d812:	f7fe ffd1 	bl	1c7b8 <__aeabi_dmul>
   1d816:	4b50      	ldr	r3, [pc, #320]	; (1d958 <sensor_sim_sample_fetch+0x178>)
   1d818:	e9c3 0100 	strd	r0, r1, [r3]
		static_val_coeff *= -1.0;
   1d81c:	4630      	mov	r0, r6
   1d81e:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1d822:	f7ff fa63 	bl	1ccec <__aeabi_d2iz>
   1d826:	6020      	str	r0, [r4, #0]
	return 0;
   1d828:	2000      	movs	r0, #0
	return sensor_sim_generate_data(chan);
}
   1d82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			accel_samples[1] = static_val_coeff * max_variation;
   1d82c:	4c48      	ldr	r4, [pc, #288]	; (1d950 <sensor_sim_sample_fetch+0x170>)
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1d82e:	f00f fdeb 	bl	2d408 <generate_sine.constprop.2>
			accel_samples[1] = static_val_coeff * max_variation;
   1d832:	6820      	ldr	r0, [r4, #0]
   1d834:	f7fe ff56 	bl	1c6e4 <__aeabi_i2d>
   1d838:	4b46      	ldr	r3, [pc, #280]	; (1d954 <sensor_sim_sample_fetch+0x174>)
   1d83a:	2200      	movs	r2, #0
   1d83c:	4606      	mov	r6, r0
   1d83e:	460f      	mov	r7, r1
   1d840:	f7fe ffba 	bl	1c7b8 <__aeabi_dmul>
   1d844:	4b44      	ldr	r3, [pc, #272]	; (1d958 <sensor_sim_sample_fetch+0x178>)
   1d846:	e9c3 0102 	strd	r0, r1, [r3, #8]
		static_val_coeff *= -1.0;
   1d84a:	e7e7      	b.n	1d81c <sensor_sim_sample_fetch+0x3c>
			accel_samples[2] = static_val_coeff * max_variation;
   1d84c:	4c40      	ldr	r4, [pc, #256]	; (1d950 <sensor_sim_sample_fetch+0x170>)
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1d84e:	f00f fddb 	bl	2d408 <generate_sine.constprop.2>
			accel_samples[2] = static_val_coeff * max_variation;
   1d852:	6820      	ldr	r0, [r4, #0]
   1d854:	f7fe ff46 	bl	1c6e4 <__aeabi_i2d>
   1d858:	4b3e      	ldr	r3, [pc, #248]	; (1d954 <sensor_sim_sample_fetch+0x174>)
   1d85a:	2200      	movs	r2, #0
   1d85c:	4606      	mov	r6, r0
   1d85e:	460f      	mov	r7, r1
   1d860:	f7fe ffaa 	bl	1c7b8 <__aeabi_dmul>
   1d864:	4b3c      	ldr	r3, [pc, #240]	; (1d958 <sensor_sim_sample_fetch+0x178>)
   1d866:	e9c3 0104 	strd	r0, r1, [r3, #16]
   1d86a:	e7d7      	b.n	1d81c <sensor_sim_sample_fetch+0x3c>
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1d86c:	f00f fdcc 	bl	2d408 <generate_sine.constprop.2>
   1d870:	4c39      	ldr	r4, [pc, #228]	; (1d958 <sensor_sim_sample_fetch+0x178>)
   1d872:	e9c4 0100 	strd	r0, r1, [r4]
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
   1d876:	2001      	movs	r0, #1
   1d878:	f01a fffe 	bl	38878 <z_impl_k_sleep>
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1d87c:	f00f fdc4 	bl	2d408 <generate_sine.constprop.2>
   1d880:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[0] = static_val_coeff * max_variation;
   1d884:	4d32      	ldr	r5, [pc, #200]	; (1d950 <sensor_sim_sample_fetch+0x170>)
   1d886:	2001      	movs	r0, #1
   1d888:	f01a fff6 	bl	38878 <z_impl_k_sleep>
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1d88c:	f00f fdbc 	bl	2d408 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1d890:	6828      	ldr	r0, [r5, #0]
   1d892:	f7fe ff27 	bl	1c6e4 <__aeabi_i2d>
   1d896:	2200      	movs	r2, #0
   1d898:	4b2e      	ldr	r3, [pc, #184]	; (1d954 <sensor_sim_sample_fetch+0x174>)
   1d89a:	4606      	mov	r6, r0
   1d89c:	460f      	mov	r7, r1
   1d89e:	f7fe ff8b 	bl	1c7b8 <__aeabi_dmul>
   1d8a2:	e9c4 0100 	strd	r0, r1, [r4]
			accel_samples[1] = static_val_coeff * max_variation;
   1d8a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[2] = static_val_coeff * max_variation;
   1d8aa:	e9c4 0104 	strd	r0, r1, [r4, #16]
		static_val_coeff *= -1.0;
   1d8ae:	4630      	mov	r0, r6
   1d8b0:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1d8b4:	f7ff fa1a 	bl	1ccec <__aeabi_d2iz>
   1d8b8:	6028      	str	r0, [r5, #0]
	return retval;
   1d8ba:	e7b5      	b.n	1d828 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1d8bc:	f01c ffe8 	bl	3a890 <rand>
   1d8c0:	f7fe ff10 	bl	1c6e4 <__aeabi_i2d>
   1d8c4:	a31e      	add	r3, pc, #120	; (adr r3, 1d940 <sensor_sim_sample_fetch+0x160>)
   1d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d8ca:	f7ff f89f 	bl	1ca0c <__aeabi_ddiv>
   1d8ce:	2200      	movs	r2, #0
   1d8d0:	4b22      	ldr	r3, [pc, #136]	; (1d95c <sensor_sim_sample_fetch+0x17c>)
   1d8d2:	f7fe fdb9 	bl	1c448 <__aeabi_dsub>
	temp_sample = base_temp_sample + generate_pseudo_random();
   1d8d6:	4b22      	ldr	r3, [pc, #136]	; (1d960 <sensor_sim_sample_fetch+0x180>)
   1d8d8:	2200      	movs	r2, #0
   1d8da:	f7fe fdb7 	bl	1c44c <__adddf3>
   1d8de:	4b21      	ldr	r3, [pc, #132]	; (1d964 <sensor_sim_sample_fetch+0x184>)
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1d8e0:	e9c3 0100 	strd	r0, r1, [r3]
   1d8e4:	e7a0      	b.n	1d828 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1d8e6:	f01c ffd3 	bl	3a890 <rand>
   1d8ea:	f7fe fefb 	bl	1c6e4 <__aeabi_i2d>
   1d8ee:	a314      	add	r3, pc, #80	; (adr r3, 1d940 <sensor_sim_sample_fetch+0x160>)
   1d8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d8f4:	f7ff f88a 	bl	1ca0c <__aeabi_ddiv>
   1d8f8:	2200      	movs	r2, #0
   1d8fa:	4b18      	ldr	r3, [pc, #96]	; (1d95c <sensor_sim_sample_fetch+0x17c>)
   1d8fc:	f7fe fda4 	bl	1c448 <__aeabi_dsub>
	humidity_sample = base_humidity_sample + generate_pseudo_random();
   1d900:	4b19      	ldr	r3, [pc, #100]	; (1d968 <sensor_sim_sample_fetch+0x188>)
   1d902:	2200      	movs	r2, #0
   1d904:	f7fe fda2 	bl	1c44c <__adddf3>
   1d908:	4b18      	ldr	r3, [pc, #96]	; (1d96c <sensor_sim_sample_fetch+0x18c>)
   1d90a:	e7e9      	b.n	1d8e0 <sensor_sim_sample_fetch+0x100>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1d90c:	f01c ffc0 	bl	3a890 <rand>
   1d910:	f7fe fee8 	bl	1c6e4 <__aeabi_i2d>
   1d914:	a30a      	add	r3, pc, #40	; (adr r3, 1d940 <sensor_sim_sample_fetch+0x160>)
   1d916:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d91a:	f7ff f877 	bl	1ca0c <__aeabi_ddiv>
   1d91e:	2200      	movs	r2, #0
   1d920:	4b0e      	ldr	r3, [pc, #56]	; (1d95c <sensor_sim_sample_fetch+0x17c>)
   1d922:	f7fe fd91 	bl	1c448 <__aeabi_dsub>
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1d926:	a308      	add	r3, pc, #32	; (adr r3, 1d948 <sensor_sim_sample_fetch+0x168>)
   1d928:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d92c:	f7fe fd8e 	bl	1c44c <__adddf3>
   1d930:	4b0f      	ldr	r3, [pc, #60]	; (1d970 <sensor_sim_sample_fetch+0x190>)
   1d932:	e7d5      	b.n	1d8e0 <sensor_sim_sample_fetch+0x100>
		return -ENOTSUP;
   1d934:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return sensor_sim_generate_data(chan);
   1d938:	e777      	b.n	1d82a <sensor_sim_sample_fetch+0x4a>
   1d93a:	bf00      	nop
   1d93c:	f3af 8000 	nop.w
   1d940:	ffc00000 	.word	0xffc00000
   1d944:	41cfffff 	.word	0x41cfffff
   1d948:	cccccccd 	.word	0xcccccccd
   1d94c:	40588ccc 	.word	0x40588ccc
   1d950:	20031568 	.word	0x20031568
   1d954:	40340000 	.word	0x40340000
   1d958:	20022a40 	.word	0x20022a40
   1d95c:	3ff00000 	.word	0x3ff00000
   1d960:	40350000 	.word	0x40350000
   1d964:	20022d50 	.word	0x20022d50
   1d968:	404a0000 	.word	0x404a0000
   1d96c:	20022a58 	.word	0x20022a58
   1d970:	20022a60 	.word	0x20022a60
   1d974:	00000000 	.word	0x00000000

0001d978 <sin>:
   1d978:	ec51 0b10 	vmov	r0, r1, d0
   1d97c:	4a2c      	ldr	r2, [pc, #176]	; (1da30 <sin+0xb8>)
   1d97e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1d982:	4293      	cmp	r3, r2
   1d984:	b500      	push	{lr}
   1d986:	b085      	sub	sp, #20
   1d988:	dd27      	ble.n	1d9da <sin+0x62>
   1d98a:	4a2a      	ldr	r2, [pc, #168]	; (1da34 <sin+0xbc>)
   1d98c:	4293      	cmp	r3, r2
   1d98e:	dd09      	ble.n	1d9a4 <sin+0x2c>
   1d990:	ee10 2a10 	vmov	r2, s0
   1d994:	460b      	mov	r3, r1
   1d996:	f7fe fd57 	bl	1c448 <__aeabi_dsub>
   1d99a:	ec41 0b10 	vmov	d0, r0, r1
   1d99e:	b005      	add	sp, #20
   1d9a0:	f85d fb04 	ldr.w	pc, [sp], #4
   1d9a4:	4668      	mov	r0, sp
   1d9a6:	f000 f847 	bl	1da38 <__ieee754_rem_pio2>
   1d9aa:	f000 0003 	and.w	r0, r0, #3
   1d9ae:	2801      	cmp	r0, #1
   1d9b0:	d01f      	beq.n	1d9f2 <sin+0x7a>
   1d9b2:	2802      	cmp	r0, #2
   1d9b4:	d030      	beq.n	1da18 <sin+0xa0>
   1d9b6:	b328      	cbz	r0, 1da04 <sin+0x8c>
   1d9b8:	ed9d 1b02 	vldr	d1, [sp, #8]
   1d9bc:	ed9d 0b00 	vldr	d0, [sp]
   1d9c0:	f000 fa56 	bl	1de70 <__kernel_cos>
   1d9c4:	ee10 0a10 	vmov	r0, s0
   1d9c8:	ec53 2b10 	vmov	r2, r3, d0
   1d9cc:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   1d9d0:	ec41 0b10 	vmov	d0, r0, r1
   1d9d4:	b005      	add	sp, #20
   1d9d6:	f85d fb04 	ldr.w	pc, [sp], #4
   1d9da:	2000      	movs	r0, #0
   1d9dc:	ed9f 1b12 	vldr	d1, [pc, #72]	; 1da28 <sin+0xb0>
   1d9e0:	f000 ff9e 	bl	1e920 <__kernel_sin>
   1d9e4:	ec51 0b10 	vmov	r0, r1, d0
   1d9e8:	ec41 0b10 	vmov	d0, r0, r1
   1d9ec:	b005      	add	sp, #20
   1d9ee:	f85d fb04 	ldr.w	pc, [sp], #4
   1d9f2:	ed9d 1b02 	vldr	d1, [sp, #8]
   1d9f6:	ed9d 0b00 	vldr	d0, [sp]
   1d9fa:	f000 fa39 	bl	1de70 <__kernel_cos>
   1d9fe:	ec51 0b10 	vmov	r0, r1, d0
   1da02:	e7ca      	b.n	1d99a <sin+0x22>
   1da04:	2001      	movs	r0, #1
   1da06:	ed9d 1b02 	vldr	d1, [sp, #8]
   1da0a:	ed9d 0b00 	vldr	d0, [sp]
   1da0e:	f000 ff87 	bl	1e920 <__kernel_sin>
   1da12:	ec51 0b10 	vmov	r0, r1, d0
   1da16:	e7c0      	b.n	1d99a <sin+0x22>
   1da18:	2001      	movs	r0, #1
   1da1a:	ed9d 1b02 	vldr	d1, [sp, #8]
   1da1e:	ed9d 0b00 	vldr	d0, [sp]
   1da22:	f000 ff7d 	bl	1e920 <__kernel_sin>
   1da26:	e7cd      	b.n	1d9c4 <sin+0x4c>
	...
   1da30:	3fe921fb 	.word	0x3fe921fb
   1da34:	7fefffff 	.word	0x7fefffff

0001da38 <__ieee754_rem_pio2>:
   1da38:	ec53 2b10 	vmov	r2, r3, d0
   1da3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da40:	4999      	ldr	r1, [pc, #612]	; (1dca8 <__ieee754_rem_pio2+0x270>)
   1da42:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   1da46:	b08f      	sub	sp, #60	; 0x3c
   1da48:	428d      	cmp	r5, r1
   1da4a:	f340 8088 	ble.w	1db5e <__ieee754_rem_pio2+0x126>
   1da4e:	4997      	ldr	r1, [pc, #604]	; (1dcac <__ieee754_rem_pio2+0x274>)
   1da50:	461e      	mov	r6, r3
   1da52:	4604      	mov	r4, r0
   1da54:	428d      	cmp	r5, r1
   1da56:	dc29      	bgt.n	1daac <__ieee754_rem_pio2+0x74>
   1da58:	2e00      	cmp	r6, #0
   1da5a:	4619      	mov	r1, r3
   1da5c:	ee10 0a10 	vmov	r0, s0
   1da60:	a387      	add	r3, pc, #540	; (adr r3, 1dc80 <__ieee754_rem_pio2+0x248>)
   1da62:	e9d3 2300 	ldrd	r2, r3, [r3]
   1da66:	f340 81ae 	ble.w	1ddc6 <__ieee754_rem_pio2+0x38e>
   1da6a:	f7fe fced 	bl	1c448 <__aeabi_dsub>
   1da6e:	4b90      	ldr	r3, [pc, #576]	; (1dcb0 <__ieee754_rem_pio2+0x278>)
   1da70:	4680      	mov	r8, r0
   1da72:	4689      	mov	r9, r1
   1da74:	429d      	cmp	r5, r3
   1da76:	f000 8088 	beq.w	1db8a <__ieee754_rem_pio2+0x152>
   1da7a:	2701      	movs	r7, #1
   1da7c:	a382      	add	r3, pc, #520	; (adr r3, 1dc88 <__ieee754_rem_pio2+0x250>)
   1da7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1da82:	f7fe fce1 	bl	1c448 <__aeabi_dsub>
   1da86:	4602      	mov	r2, r0
   1da88:	460b      	mov	r3, r1
   1da8a:	4640      	mov	r0, r8
   1da8c:	4649      	mov	r1, r9
   1da8e:	e9c4 2300 	strd	r2, r3, [r4]
   1da92:	f7fe fcd9 	bl	1c448 <__aeabi_dsub>
   1da96:	a37c      	add	r3, pc, #496	; (adr r3, 1dc88 <__ieee754_rem_pio2+0x250>)
   1da98:	e9d3 2300 	ldrd	r2, r3, [r3]
   1da9c:	f7fe fcd4 	bl	1c448 <__aeabi_dsub>
   1daa0:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1daa4:	4638      	mov	r0, r7
   1daa6:	b00f      	add	sp, #60	; 0x3c
   1daa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1daac:	4981      	ldr	r1, [pc, #516]	; (1dcb4 <__ieee754_rem_pio2+0x27c>)
   1daae:	428d      	cmp	r5, r1
   1dab0:	f340 808b 	ble.w	1dbca <__ieee754_rem_pio2+0x192>
   1dab4:	4980      	ldr	r1, [pc, #512]	; (1dcb8 <__ieee754_rem_pio2+0x280>)
   1dab6:	428d      	cmp	r5, r1
   1dab8:	dc5c      	bgt.n	1db74 <__ieee754_rem_pio2+0x13c>
   1daba:	152f      	asrs	r7, r5, #20
   1dabc:	ee10 0a10 	vmov	r0, s0
   1dac0:	ee10 8a10 	vmov	r8, s0
   1dac4:	f2a7 4716 	subw	r7, r7, #1046	; 0x416
   1dac8:	eba5 5907 	sub.w	r9, r5, r7, lsl #20
   1dacc:	4649      	mov	r1, r9
   1dace:	f7ff f90d 	bl	1ccec <__aeabi_d2iz>
   1dad2:	f7fe fe07 	bl	1c6e4 <__aeabi_i2d>
   1dad6:	4682      	mov	sl, r0
   1dad8:	468b      	mov	fp, r1
   1dada:	4640      	mov	r0, r8
   1dadc:	4649      	mov	r1, r9
   1dade:	4652      	mov	r2, sl
   1dae0:	465b      	mov	r3, fp
   1dae2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   1dae6:	f7fe fcaf 	bl	1c448 <__aeabi_dsub>
   1daea:	2200      	movs	r2, #0
   1daec:	4b73      	ldr	r3, [pc, #460]	; (1dcbc <__ieee754_rem_pio2+0x284>)
   1daee:	f7fe fe63 	bl	1c7b8 <__aeabi_dmul>
   1daf2:	4689      	mov	r9, r1
   1daf4:	4680      	mov	r8, r0
   1daf6:	f7ff f8f9 	bl	1ccec <__aeabi_d2iz>
   1dafa:	4605      	mov	r5, r0
   1dafc:	f7fe fdf2 	bl	1c6e4 <__aeabi_i2d>
   1db00:	4602      	mov	r2, r0
   1db02:	460b      	mov	r3, r1
   1db04:	4640      	mov	r0, r8
   1db06:	4649      	mov	r1, r9
   1db08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1db0c:	f7fe fc9c 	bl	1c448 <__aeabi_dsub>
   1db10:	2200      	movs	r2, #0
   1db12:	4b6a      	ldr	r3, [pc, #424]	; (1dcbc <__ieee754_rem_pio2+0x284>)
   1db14:	f7fe fe50 	bl	1c7b8 <__aeabi_dmul>
   1db18:	2200      	movs	r2, #0
   1db1a:	2300      	movs	r3, #0
   1db1c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1db20:	f7ff f8b2 	bl	1cc88 <__aeabi_dcmpeq>
   1db24:	2800      	cmp	r0, #0
   1db26:	f000 814c 	beq.w	1ddc2 <__ieee754_rem_pio2+0x38a>
   1db2a:	2d00      	cmp	r5, #0
   1db2c:	bf0c      	ite	eq
   1db2e:	2301      	moveq	r3, #1
   1db30:	2302      	movne	r3, #2
   1db32:	4963      	ldr	r1, [pc, #396]	; (1dcc0 <__ieee754_rem_pio2+0x288>)
   1db34:	2002      	movs	r0, #2
   1db36:	463a      	mov	r2, r7
   1db38:	9101      	str	r1, [sp, #4]
   1db3a:	4621      	mov	r1, r4
   1db3c:	9000      	str	r0, [sp, #0]
   1db3e:	a808      	add	r0, sp, #32
   1db40:	f000 fada 	bl	1e0f8 <__kernel_rem_pio2>
   1db44:	2e00      	cmp	r6, #0
   1db46:	4607      	mov	r7, r0
   1db48:	daac      	bge.n	1daa4 <__ieee754_rem_pio2+0x6c>
   1db4a:	6862      	ldr	r2, [r4, #4]
   1db4c:	4247      	negs	r7, r0
   1db4e:	68e3      	ldr	r3, [r4, #12]
   1db50:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   1db54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1db58:	6062      	str	r2, [r4, #4]
   1db5a:	60e3      	str	r3, [r4, #12]
   1db5c:	e7a2      	b.n	1daa4 <__ieee754_rem_pio2+0x6c>
   1db5e:	2700      	movs	r7, #0
   1db60:	2400      	movs	r4, #0
   1db62:	2500      	movs	r5, #0
   1db64:	ed80 0b00 	vstr	d0, [r0]
   1db68:	e9c0 4502 	strd	r4, r5, [r0, #8]
   1db6c:	4638      	mov	r0, r7
   1db6e:	b00f      	add	sp, #60	; 0x3c
   1db70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db74:	ee10 0a10 	vmov	r0, s0
   1db78:	4619      	mov	r1, r3
   1db7a:	f7fe fc65 	bl	1c448 <__aeabi_dsub>
   1db7e:	2700      	movs	r7, #0
   1db80:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1db84:	e9c4 0100 	strd	r0, r1, [r4]
   1db88:	e78c      	b.n	1daa4 <__ieee754_rem_pio2+0x6c>
   1db8a:	a341      	add	r3, pc, #260	; (adr r3, 1dc90 <__ieee754_rem_pio2+0x258>)
   1db8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1db90:	f7fe fc5a 	bl	1c448 <__aeabi_dsub>
   1db94:	4606      	mov	r6, r0
   1db96:	460f      	mov	r7, r1
   1db98:	a33f      	add	r3, pc, #252	; (adr r3, 1dc98 <__ieee754_rem_pio2+0x260>)
   1db9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1db9e:	f7fe fc53 	bl	1c448 <__aeabi_dsub>
   1dba2:	4602      	mov	r2, r0
   1dba4:	460b      	mov	r3, r1
   1dba6:	4630      	mov	r0, r6
   1dba8:	4639      	mov	r1, r7
   1dbaa:	2701      	movs	r7, #1
   1dbac:	e9c4 2300 	strd	r2, r3, [r4]
   1dbb0:	f7fe fc4a 	bl	1c448 <__aeabi_dsub>
   1dbb4:	a338      	add	r3, pc, #224	; (adr r3, 1dc98 <__ieee754_rem_pio2+0x260>)
   1dbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dbba:	f7fe fc45 	bl	1c448 <__aeabi_dsub>
   1dbbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1dbc2:	4638      	mov	r0, r7
   1dbc4:	b00f      	add	sp, #60	; 0x3c
   1dbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbca:	f01c f8e5 	bl	39d98 <fabs>
   1dbce:	ee10 0a10 	vmov	r0, s0
   1dbd2:	ec59 8b10 	vmov	r8, r9, d0
   1dbd6:	a332      	add	r3, pc, #200	; (adr r3, 1dca0 <__ieee754_rem_pio2+0x268>)
   1dbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dbdc:	4649      	mov	r1, r9
   1dbde:	f7fe fdeb 	bl	1c7b8 <__aeabi_dmul>
   1dbe2:	2200      	movs	r2, #0
   1dbe4:	4b37      	ldr	r3, [pc, #220]	; (1dcc4 <__ieee754_rem_pio2+0x28c>)
   1dbe6:	f7fe fc31 	bl	1c44c <__adddf3>
   1dbea:	f7ff f87f 	bl	1ccec <__aeabi_d2iz>
   1dbee:	4607      	mov	r7, r0
   1dbf0:	f7fe fd78 	bl	1c6e4 <__aeabi_i2d>
   1dbf4:	a322      	add	r3, pc, #136	; (adr r3, 1dc80 <__ieee754_rem_pio2+0x248>)
   1dbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dbfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1dbfe:	f7fe fddb 	bl	1c7b8 <__aeabi_dmul>
   1dc02:	4602      	mov	r2, r0
   1dc04:	460b      	mov	r3, r1
   1dc06:	4640      	mov	r0, r8
   1dc08:	4649      	mov	r1, r9
   1dc0a:	f7fe fc1d 	bl	1c448 <__aeabi_dsub>
   1dc0e:	4682      	mov	sl, r0
   1dc10:	468b      	mov	fp, r1
   1dc12:	a31d      	add	r3, pc, #116	; (adr r3, 1dc88 <__ieee754_rem_pio2+0x250>)
   1dc14:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dc18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1dc1c:	f7fe fdcc 	bl	1c7b8 <__aeabi_dmul>
   1dc20:	2f1f      	cmp	r7, #31
   1dc22:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1dc26:	dc51      	bgt.n	1dccc <__ieee754_rem_pio2+0x294>
   1dc28:	4602      	mov	r2, r0
   1dc2a:	460b      	mov	r3, r1
   1dc2c:	4650      	mov	r0, sl
   1dc2e:	4659      	mov	r1, fp
   1dc30:	f7fe fc0a 	bl	1c448 <__aeabi_dsub>
   1dc34:	4b24      	ldr	r3, [pc, #144]	; (1dcc8 <__ieee754_rem_pio2+0x290>)
   1dc36:	1e7a      	subs	r2, r7, #1
   1dc38:	4680      	mov	r8, r0
   1dc3a:	4689      	mov	r9, r1
   1dc3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1dc40:	42ab      	cmp	r3, r5
   1dc42:	d04b      	beq.n	1dcdc <__ieee754_rem_pio2+0x2a4>
   1dc44:	4642      	mov	r2, r8
   1dc46:	464b      	mov	r3, r9
   1dc48:	4650      	mov	r0, sl
   1dc4a:	4659      	mov	r1, fp
   1dc4c:	e9c4 8900 	strd	r8, r9, [r4]
   1dc50:	f7fe fbfa 	bl	1c448 <__aeabi_dsub>
   1dc54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1dc58:	f7fe fbf6 	bl	1c448 <__aeabi_dsub>
   1dc5c:	2e00      	cmp	r6, #0
   1dc5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1dc62:	f6bf af1f 	bge.w	1daa4 <__ieee754_rem_pio2+0x6c>
   1dc66:	f109 4500 	add.w	r5, r9, #2147483648	; 0x80000000
   1dc6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1dc6e:	427f      	negs	r7, r7
   1dc70:	e9c4 8500 	strd	r8, r5, [r4]
   1dc74:	e9c4 0302 	strd	r0, r3, [r4, #8]
   1dc78:	e714      	b.n	1daa4 <__ieee754_rem_pio2+0x6c>
   1dc7a:	bf00      	nop
   1dc7c:	f3af 8000 	nop.w
   1dc80:	54400000 	.word	0x54400000
   1dc84:	3ff921fb 	.word	0x3ff921fb
   1dc88:	1a626331 	.word	0x1a626331
   1dc8c:	3dd0b461 	.word	0x3dd0b461
   1dc90:	1a600000 	.word	0x1a600000
   1dc94:	3dd0b461 	.word	0x3dd0b461
   1dc98:	2e037073 	.word	0x2e037073
   1dc9c:	3ba3198a 	.word	0x3ba3198a
   1dca0:	6dc9c883 	.word	0x6dc9c883
   1dca4:	3fe45f30 	.word	0x3fe45f30
   1dca8:	3fe921fb 	.word	0x3fe921fb
   1dcac:	4002d97b 	.word	0x4002d97b
   1dcb0:	3ff921fb 	.word	0x3ff921fb
   1dcb4:	413921fb 	.word	0x413921fb
   1dcb8:	7fefffff 	.word	0x7fefffff
   1dcbc:	41700000 	.word	0x41700000
   1dcc0:	000410b4 	.word	0x000410b4
   1dcc4:	3fe00000 	.word	0x3fe00000
   1dcc8:	00041034 	.word	0x00041034
   1dccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1dcd0:	4650      	mov	r0, sl
   1dcd2:	4659      	mov	r1, fp
   1dcd4:	f7fe fbb8 	bl	1c448 <__aeabi_dsub>
   1dcd8:	4680      	mov	r8, r0
   1dcda:	4689      	mov	r9, r1
   1dcdc:	152d      	asrs	r5, r5, #20
   1dcde:	f3c9 530a 	ubfx	r3, r9, #20, #11
   1dce2:	1aeb      	subs	r3, r5, r3
   1dce4:	2b10      	cmp	r3, #16
   1dce6:	ddad      	ble.n	1dc44 <__ieee754_rem_pio2+0x20c>
   1dce8:	a357      	add	r3, pc, #348	; (adr r3, 1de48 <__ieee754_rem_pio2+0x410>)
   1dcea:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dcee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1dcf2:	f7fe fd61 	bl	1c7b8 <__aeabi_dmul>
   1dcf6:	4680      	mov	r8, r0
   1dcf8:	4689      	mov	r9, r1
   1dcfa:	4602      	mov	r2, r0
   1dcfc:	460b      	mov	r3, r1
   1dcfe:	4650      	mov	r0, sl
   1dd00:	4659      	mov	r1, fp
   1dd02:	f7fe fba1 	bl	1c448 <__aeabi_dsub>
   1dd06:	4602      	mov	r2, r0
   1dd08:	460b      	mov	r3, r1
   1dd0a:	4650      	mov	r0, sl
   1dd0c:	4659      	mov	r1, fp
   1dd0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1dd12:	f7fe fb99 	bl	1c448 <__aeabi_dsub>
   1dd16:	4642      	mov	r2, r8
   1dd18:	464b      	mov	r3, r9
   1dd1a:	f7fe fb95 	bl	1c448 <__aeabi_dsub>
   1dd1e:	4680      	mov	r8, r0
   1dd20:	4689      	mov	r9, r1
   1dd22:	a34b      	add	r3, pc, #300	; (adr r3, 1de50 <__ieee754_rem_pio2+0x418>)
   1dd24:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dd28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1dd2c:	f7fe fd44 	bl	1c7b8 <__aeabi_dmul>
   1dd30:	4642      	mov	r2, r8
   1dd32:	464b      	mov	r3, r9
   1dd34:	f7fe fb88 	bl	1c448 <__aeabi_dsub>
   1dd38:	460b      	mov	r3, r1
   1dd3a:	4602      	mov	r2, r0
   1dd3c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   1dd40:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1dd44:	4650      	mov	r0, sl
   1dd46:	4659      	mov	r1, fp
   1dd48:	f7fe fb7e 	bl	1c448 <__aeabi_dsub>
   1dd4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1dd50:	4680      	mov	r8, r0
   1dd52:	4689      	mov	r9, r1
   1dd54:	1aed      	subs	r5, r5, r3
   1dd56:	2d31      	cmp	r5, #49	; 0x31
   1dd58:	f77f af74 	ble.w	1dc44 <__ieee754_rem_pio2+0x20c>
   1dd5c:	a33f      	add	r3, pc, #252	; (adr r3, 1de5c <__ieee754_rem_pio2+0x424>)
   1dd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dd62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1dd66:	f7fe fd27 	bl	1c7b8 <__aeabi_dmul>
   1dd6a:	4680      	mov	r8, r0
   1dd6c:	4689      	mov	r9, r1
   1dd6e:	4602      	mov	r2, r0
   1dd70:	460b      	mov	r3, r1
   1dd72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1dd76:	f7fe fb67 	bl	1c448 <__aeabi_dsub>
   1dd7a:	4602      	mov	r2, r0
   1dd7c:	460b      	mov	r3, r1
   1dd7e:	4682      	mov	sl, r0
   1dd80:	468b      	mov	fp, r1
   1dd82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1dd86:	f7fe fb5f 	bl	1c448 <__aeabi_dsub>
   1dd8a:	4642      	mov	r2, r8
   1dd8c:	464b      	mov	r3, r9
   1dd8e:	f7fe fb5b 	bl	1c448 <__aeabi_dsub>
   1dd92:	4680      	mov	r8, r0
   1dd94:	4689      	mov	r9, r1
   1dd96:	a333      	add	r3, pc, #204	; (adr r3, 1de64 <__ieee754_rem_pio2+0x42c>)
   1dd98:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dd9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1dda0:	f7fe fd0a 	bl	1c7b8 <__aeabi_dmul>
   1dda4:	4642      	mov	r2, r8
   1dda6:	464b      	mov	r3, r9
   1dda8:	f7fe fb4e 	bl	1c448 <__aeabi_dsub>
   1ddac:	4602      	mov	r2, r0
   1ddae:	460b      	mov	r3, r1
   1ddb0:	4650      	mov	r0, sl
   1ddb2:	4659      	mov	r1, fp
   1ddb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ddb8:	f7fe fb46 	bl	1c448 <__aeabi_dsub>
   1ddbc:	4680      	mov	r8, r0
   1ddbe:	4689      	mov	r9, r1
   1ddc0:	e740      	b.n	1dc44 <__ieee754_rem_pio2+0x20c>
   1ddc2:	2303      	movs	r3, #3
   1ddc4:	e6b5      	b.n	1db32 <__ieee754_rem_pio2+0xfa>
   1ddc6:	f7fe fb41 	bl	1c44c <__adddf3>
   1ddca:	4b23      	ldr	r3, [pc, #140]	; (1de58 <__ieee754_rem_pio2+0x420>)
   1ddcc:	4680      	mov	r8, r0
   1ddce:	4689      	mov	r9, r1
   1ddd0:	429d      	cmp	r5, r3
   1ddd2:	d016      	beq.n	1de02 <__ieee754_rem_pio2+0x3ca>
   1ddd4:	f04f 37ff 	mov.w	r7, #4294967295
   1ddd8:	a319      	add	r3, pc, #100	; (adr r3, 1de40 <__ieee754_rem_pio2+0x408>)
   1ddda:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ddde:	f7fe fb35 	bl	1c44c <__adddf3>
   1dde2:	4602      	mov	r2, r0
   1dde4:	460b      	mov	r3, r1
   1dde6:	4640      	mov	r0, r8
   1dde8:	4649      	mov	r1, r9
   1ddea:	e9c4 2300 	strd	r2, r3, [r4]
   1ddee:	f7fe fb2b 	bl	1c448 <__aeabi_dsub>
   1ddf2:	a313      	add	r3, pc, #76	; (adr r3, 1de40 <__ieee754_rem_pio2+0x408>)
   1ddf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ddf8:	f7fe fb28 	bl	1c44c <__adddf3>
   1ddfc:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1de00:	e650      	b.n	1daa4 <__ieee754_rem_pio2+0x6c>
   1de02:	a311      	add	r3, pc, #68	; (adr r3, 1de48 <__ieee754_rem_pio2+0x410>)
   1de04:	e9d3 2300 	ldrd	r2, r3, [r3]
   1de08:	f7fe fb20 	bl	1c44c <__adddf3>
   1de0c:	460f      	mov	r7, r1
   1de0e:	4606      	mov	r6, r0
   1de10:	a30f      	add	r3, pc, #60	; (adr r3, 1de50 <__ieee754_rem_pio2+0x418>)
   1de12:	e9d3 2300 	ldrd	r2, r3, [r3]
   1de16:	f7fe fb19 	bl	1c44c <__adddf3>
   1de1a:	4602      	mov	r2, r0
   1de1c:	460b      	mov	r3, r1
   1de1e:	4630      	mov	r0, r6
   1de20:	4639      	mov	r1, r7
   1de22:	f04f 37ff 	mov.w	r7, #4294967295
   1de26:	e9c4 2300 	strd	r2, r3, [r4]
   1de2a:	f7fe fb0d 	bl	1c448 <__aeabi_dsub>
   1de2e:	a308      	add	r3, pc, #32	; (adr r3, 1de50 <__ieee754_rem_pio2+0x418>)
   1de30:	e9d3 2300 	ldrd	r2, r3, [r3]
   1de34:	f7fe fb0a 	bl	1c44c <__adddf3>
   1de38:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1de3c:	e632      	b.n	1daa4 <__ieee754_rem_pio2+0x6c>
   1de3e:	bf00      	nop
   1de40:	1a626331 	.word	0x1a626331
   1de44:	3dd0b461 	.word	0x3dd0b461
   1de48:	1a600000 	.word	0x1a600000
   1de4c:	3dd0b461 	.word	0x3dd0b461
   1de50:	2e037073 	.word	0x2e037073
   1de54:	3ba3198a 	.word	0x3ba3198a
   1de58:	3ff921fb 	.word	0x3ff921fb
   1de5c:	2e000000 	.word	0x2e000000
   1de60:	3ba3198a 	.word	0x3ba3198a
   1de64:	252049c1 	.word	0x252049c1
   1de68:	397b839a 	.word	0x397b839a
   1de6c:	00000000 	.word	0x00000000

0001de70 <__kernel_cos>:
   1de70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de74:	ec57 6b10 	vmov	r6, r7, d0
   1de78:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   1de7c:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   1de80:	ed2d 8b02 	vpush	{d8}
   1de84:	eeb0 8a41 	vmov.f32	s16, s2
   1de88:	eef0 8a61 	vmov.f32	s17, s3
   1de8c:	b083      	sub	sp, #12
   1de8e:	da72      	bge.n	1df76 <__kernel_cos+0x106>
   1de90:	ee10 0a10 	vmov	r0, s0
   1de94:	4639      	mov	r1, r7
   1de96:	f7fe ff29 	bl	1ccec <__aeabi_d2iz>
   1de9a:	2800      	cmp	r0, #0
   1de9c:	f000 80f6 	beq.w	1e08c <__kernel_cos+0x21c>
   1dea0:	4632      	mov	r2, r6
   1dea2:	463b      	mov	r3, r7
   1dea4:	4630      	mov	r0, r6
   1dea6:	4639      	mov	r1, r7
   1dea8:	f7fe fc86 	bl	1c7b8 <__aeabi_dmul>
   1deac:	4604      	mov	r4, r0
   1deae:	460d      	mov	r5, r1
   1deb0:	a37b      	add	r3, pc, #492	; (adr r3, 1e0a0 <__kernel_cos+0x230>)
   1deb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1deb6:	f7fe fc7f 	bl	1c7b8 <__aeabi_dmul>
   1deba:	a37b      	add	r3, pc, #492	; (adr r3, 1e0a8 <__kernel_cos+0x238>)
   1debc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dec0:	f7fe fac4 	bl	1c44c <__adddf3>
   1dec4:	4622      	mov	r2, r4
   1dec6:	462b      	mov	r3, r5
   1dec8:	f7fe fc76 	bl	1c7b8 <__aeabi_dmul>
   1decc:	a378      	add	r3, pc, #480	; (adr r3, 1e0b0 <__kernel_cos+0x240>)
   1dece:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ded2:	f7fe fab9 	bl	1c448 <__aeabi_dsub>
   1ded6:	4622      	mov	r2, r4
   1ded8:	462b      	mov	r3, r5
   1deda:	f7fe fc6d 	bl	1c7b8 <__aeabi_dmul>
   1dede:	a376      	add	r3, pc, #472	; (adr r3, 1e0b8 <__kernel_cos+0x248>)
   1dee0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dee4:	f7fe fab2 	bl	1c44c <__adddf3>
   1dee8:	4622      	mov	r2, r4
   1deea:	462b      	mov	r3, r5
   1deec:	f7fe fc64 	bl	1c7b8 <__aeabi_dmul>
   1def0:	a373      	add	r3, pc, #460	; (adr r3, 1e0c0 <__kernel_cos+0x250>)
   1def2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1def6:	f7fe faa7 	bl	1c448 <__aeabi_dsub>
   1defa:	4622      	mov	r2, r4
   1defc:	462b      	mov	r3, r5
   1defe:	f7fe fc5b 	bl	1c7b8 <__aeabi_dmul>
   1df02:	a371      	add	r3, pc, #452	; (adr r3, 1e0c8 <__kernel_cos+0x258>)
   1df04:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df08:	f7fe faa0 	bl	1c44c <__adddf3>
   1df0c:	4622      	mov	r2, r4
   1df0e:	462b      	mov	r3, r5
   1df10:	f7fe fc52 	bl	1c7b8 <__aeabi_dmul>
   1df14:	4682      	mov	sl, r0
   1df16:	468b      	mov	fp, r1
   1df18:	2200      	movs	r2, #0
   1df1a:	4b71      	ldr	r3, [pc, #452]	; (1e0e0 <__kernel_cos+0x270>)
   1df1c:	4620      	mov	r0, r4
   1df1e:	4629      	mov	r1, r5
   1df20:	f7fe fc4a 	bl	1c7b8 <__aeabi_dmul>
   1df24:	4652      	mov	r2, sl
   1df26:	4680      	mov	r8, r0
   1df28:	4689      	mov	r9, r1
   1df2a:	465b      	mov	r3, fp
   1df2c:	4620      	mov	r0, r4
   1df2e:	4629      	mov	r1, r5
   1df30:	f7fe fc42 	bl	1c7b8 <__aeabi_dmul>
   1df34:	4604      	mov	r4, r0
   1df36:	460d      	mov	r5, r1
   1df38:	4630      	mov	r0, r6
   1df3a:	4639      	mov	r1, r7
   1df3c:	ec53 2b18 	vmov	r2, r3, d8
   1df40:	f7fe fc3a 	bl	1c7b8 <__aeabi_dmul>
   1df44:	4602      	mov	r2, r0
   1df46:	460b      	mov	r3, r1
   1df48:	4620      	mov	r0, r4
   1df4a:	4629      	mov	r1, r5
   1df4c:	f7fe fa7c 	bl	1c448 <__aeabi_dsub>
   1df50:	4602      	mov	r2, r0
   1df52:	460b      	mov	r3, r1
   1df54:	4640      	mov	r0, r8
   1df56:	4649      	mov	r1, r9
   1df58:	f7fe fa76 	bl	1c448 <__aeabi_dsub>
   1df5c:	4602      	mov	r2, r0
   1df5e:	460b      	mov	r3, r1
   1df60:	2000      	movs	r0, #0
   1df62:	4960      	ldr	r1, [pc, #384]	; (1e0e4 <__kernel_cos+0x274>)
   1df64:	f7fe fa70 	bl	1c448 <__aeabi_dsub>
   1df68:	ec41 0b10 	vmov	d0, r0, r1
   1df6c:	b003      	add	sp, #12
   1df6e:	ecbd 8b02 	vpop	{d8}
   1df72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df76:	ee10 2a10 	vmov	r2, s0
   1df7a:	ee10 0a10 	vmov	r0, s0
   1df7e:	463b      	mov	r3, r7
   1df80:	4639      	mov	r1, r7
   1df82:	f7fe fc19 	bl	1c7b8 <__aeabi_dmul>
   1df86:	4604      	mov	r4, r0
   1df88:	460d      	mov	r5, r1
   1df8a:	a345      	add	r3, pc, #276	; (adr r3, 1e0a0 <__kernel_cos+0x230>)
   1df8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df90:	f7fe fc12 	bl	1c7b8 <__aeabi_dmul>
   1df94:	a344      	add	r3, pc, #272	; (adr r3, 1e0a8 <__kernel_cos+0x238>)
   1df96:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df9a:	f7fe fa57 	bl	1c44c <__adddf3>
   1df9e:	4622      	mov	r2, r4
   1dfa0:	462b      	mov	r3, r5
   1dfa2:	f7fe fc09 	bl	1c7b8 <__aeabi_dmul>
   1dfa6:	a342      	add	r3, pc, #264	; (adr r3, 1e0b0 <__kernel_cos+0x240>)
   1dfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfac:	f7fe fa4c 	bl	1c448 <__aeabi_dsub>
   1dfb0:	4622      	mov	r2, r4
   1dfb2:	462b      	mov	r3, r5
   1dfb4:	f7fe fc00 	bl	1c7b8 <__aeabi_dmul>
   1dfb8:	a33f      	add	r3, pc, #252	; (adr r3, 1e0b8 <__kernel_cos+0x248>)
   1dfba:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfbe:	f7fe fa45 	bl	1c44c <__adddf3>
   1dfc2:	4622      	mov	r2, r4
   1dfc4:	462b      	mov	r3, r5
   1dfc6:	f7fe fbf7 	bl	1c7b8 <__aeabi_dmul>
   1dfca:	a33d      	add	r3, pc, #244	; (adr r3, 1e0c0 <__kernel_cos+0x250>)
   1dfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfd0:	f7fe fa3a 	bl	1c448 <__aeabi_dsub>
   1dfd4:	4622      	mov	r2, r4
   1dfd6:	462b      	mov	r3, r5
   1dfd8:	f7fe fbee 	bl	1c7b8 <__aeabi_dmul>
   1dfdc:	a33a      	add	r3, pc, #232	; (adr r3, 1e0c8 <__kernel_cos+0x258>)
   1dfde:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfe2:	f7fe fa33 	bl	1c44c <__adddf3>
   1dfe6:	462b      	mov	r3, r5
   1dfe8:	4622      	mov	r2, r4
   1dfea:	f7fe fbe5 	bl	1c7b8 <__aeabi_dmul>
   1dfee:	4b3e      	ldr	r3, [pc, #248]	; (1e0e8 <__kernel_cos+0x278>)
   1dff0:	4682      	mov	sl, r0
   1dff2:	468b      	mov	fp, r1
   1dff4:	4599      	cmp	r9, r3
   1dff6:	dd8f      	ble.n	1df18 <__kernel_cos+0xa8>
   1dff8:	4b3c      	ldr	r3, [pc, #240]	; (1e0ec <__kernel_cos+0x27c>)
   1dffa:	4599      	cmp	r9, r3
   1dffc:	dc3d      	bgt.n	1e07a <__kernel_cos+0x20a>
   1dffe:	2200      	movs	r2, #0
   1e000:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   1e004:	2000      	movs	r0, #0
   1e006:	4937      	ldr	r1, [pc, #220]	; (1e0e4 <__kernel_cos+0x274>)
   1e008:	4690      	mov	r8, r2
   1e00a:	4699      	mov	r9, r3
   1e00c:	f7fe fa1c 	bl	1c448 <__aeabi_dsub>
   1e010:	e9cd 0100 	strd	r0, r1, [sp]
   1e014:	2200      	movs	r2, #0
   1e016:	4b32      	ldr	r3, [pc, #200]	; (1e0e0 <__kernel_cos+0x270>)
   1e018:	4620      	mov	r0, r4
   1e01a:	4629      	mov	r1, r5
   1e01c:	f7fe fbcc 	bl	1c7b8 <__aeabi_dmul>
   1e020:	4642      	mov	r2, r8
   1e022:	464b      	mov	r3, r9
   1e024:	f7fe fa10 	bl	1c448 <__aeabi_dsub>
   1e028:	4652      	mov	r2, sl
   1e02a:	4680      	mov	r8, r0
   1e02c:	4689      	mov	r9, r1
   1e02e:	465b      	mov	r3, fp
   1e030:	4620      	mov	r0, r4
   1e032:	4629      	mov	r1, r5
   1e034:	f7fe fbc0 	bl	1c7b8 <__aeabi_dmul>
   1e038:	4604      	mov	r4, r0
   1e03a:	460d      	mov	r5, r1
   1e03c:	4630      	mov	r0, r6
   1e03e:	4639      	mov	r1, r7
   1e040:	ec53 2b18 	vmov	r2, r3, d8
   1e044:	f7fe fbb8 	bl	1c7b8 <__aeabi_dmul>
   1e048:	4602      	mov	r2, r0
   1e04a:	460b      	mov	r3, r1
   1e04c:	4620      	mov	r0, r4
   1e04e:	4629      	mov	r1, r5
   1e050:	f7fe f9fa 	bl	1c448 <__aeabi_dsub>
   1e054:	4602      	mov	r2, r0
   1e056:	460b      	mov	r3, r1
   1e058:	4640      	mov	r0, r8
   1e05a:	4649      	mov	r1, r9
   1e05c:	f7fe f9f4 	bl	1c448 <__aeabi_dsub>
   1e060:	4602      	mov	r2, r0
   1e062:	460b      	mov	r3, r1
   1e064:	e9dd 0100 	ldrd	r0, r1, [sp]
   1e068:	f7fe f9ee 	bl	1c448 <__aeabi_dsub>
   1e06c:	ec41 0b10 	vmov	d0, r0, r1
   1e070:	b003      	add	sp, #12
   1e072:	ecbd 8b02 	vpop	{d8}
   1e076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e07a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 1e0d0 <__kernel_cos+0x260>
   1e07e:	f04f 0800 	mov.w	r8, #0
   1e082:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1e0f0 <__kernel_cos+0x280>
   1e086:	ed8d 7b00 	vstr	d7, [sp]
   1e08a:	e7c3      	b.n	1e014 <__kernel_cos+0x1a4>
   1e08c:	ed9f 0b12 	vldr	d0, [pc, #72]	; 1e0d8 <__kernel_cos+0x268>
   1e090:	b003      	add	sp, #12
   1e092:	ecbd 8b02 	vpop	{d8}
   1e096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e09a:	bf00      	nop
   1e09c:	f3af 8000 	nop.w
   1e0a0:	be8838d4 	.word	0xbe8838d4
   1e0a4:	bda8fae9 	.word	0xbda8fae9
   1e0a8:	bdb4b1c4 	.word	0xbdb4b1c4
   1e0ac:	3e21ee9e 	.word	0x3e21ee9e
   1e0b0:	809c52ad 	.word	0x809c52ad
   1e0b4:	3e927e4f 	.word	0x3e927e4f
   1e0b8:	19cb1590 	.word	0x19cb1590
   1e0bc:	3efa01a0 	.word	0x3efa01a0
   1e0c0:	16c15177 	.word	0x16c15177
   1e0c4:	3f56c16c 	.word	0x3f56c16c
   1e0c8:	5555554c 	.word	0x5555554c
   1e0cc:	3fa55555 	.word	0x3fa55555
   1e0d0:	00000000 	.word	0x00000000
   1e0d4:	3fe70000 	.word	0x3fe70000
   1e0d8:	00000000 	.word	0x00000000
   1e0dc:	3ff00000 	.word	0x3ff00000
   1e0e0:	3fe00000 	.word	0x3fe00000
   1e0e4:	3ff00000 	.word	0x3ff00000
   1e0e8:	3fd33332 	.word	0x3fd33332
   1e0ec:	3fe90000 	.word	0x3fe90000
   1e0f0:	3fd20000 	.word	0x3fd20000
   1e0f4:	00000000 	.word	0x00000000

0001e0f8 <__kernel_rem_pio2>:
   1e0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0fc:	461c      	mov	r4, r3
   1e0fe:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   1e102:	f112 0f14 	cmn.w	r2, #20
   1e106:	910b      	str	r1, [sp, #44]	; 0x2c
   1e108:	f104 31ff 	add.w	r1, r4, #4294967295
   1e10c:	9308      	str	r3, [sp, #32]
   1e10e:	9103      	str	r1, [sp, #12]
   1e110:	4bb1      	ldr	r3, [pc, #708]	; (1e3d8 <__kernel_rem_pio2+0x2e0>)
   1e112:	99a2      	ldr	r1, [sp, #648]	; 0x288
   1e114:	9004      	str	r0, [sp, #16]
   1e116:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1e11a:	9305      	str	r3, [sp, #20]
   1e11c:	f2c0 82c1 	blt.w	1e6a2 <__kernel_rem_pio2+0x5aa>
   1e120:	1ed3      	subs	r3, r2, #3
   1e122:	49ae      	ldr	r1, [pc, #696]	; (1e3dc <__kernel_rem_pio2+0x2e4>)
   1e124:	fb81 0103 	smull	r0, r1, r1, r3
   1e128:	17db      	asrs	r3, r3, #31
   1e12a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1e12e:	9307      	str	r3, [sp, #28]
   1e130:	3301      	adds	r3, #1
   1e132:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   1e136:	00db      	lsls	r3, r3, #3
   1e138:	18d3      	adds	r3, r2, r3
   1e13a:	9a07      	ldr	r2, [sp, #28]
   1e13c:	9306      	str	r3, [sp, #24]
   1e13e:	9b03      	ldr	r3, [sp, #12]
   1e140:	1ad6      	subs	r6, r2, r3
   1e142:	9a05      	ldr	r2, [sp, #20]
   1e144:	eb12 0803 	adds.w	r8, r2, r3
   1e148:	d414      	bmi.n	1e174 <__kernel_rem_pio2+0x7c>
   1e14a:	f108 0801 	add.w	r8, r8, #1
   1e14e:	af20      	add	r7, sp, #128	; 0x80
   1e150:	2400      	movs	r4, #0
   1e152:	2500      	movs	r5, #0
   1e154:	44b0      	add	r8, r6
   1e156:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
   1e15a:	2e00      	cmp	r6, #0
   1e15c:	4620      	mov	r0, r4
   1e15e:	4629      	mov	r1, r5
   1e160:	db03      	blt.n	1e16a <__kernel_rem_pio2+0x72>
   1e162:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
   1e166:	f7fe fabd 	bl	1c6e4 <__aeabi_i2d>
   1e16a:	3601      	adds	r6, #1
   1e16c:	4546      	cmp	r6, r8
   1e16e:	e8e7 0102 	strd	r0, r1, [r7], #8
   1e172:	d1f2      	bne.n	1e15a <__kernel_rem_pio2+0x62>
   1e174:	9b05      	ldr	r3, [sp, #20]
   1e176:	2b00      	cmp	r3, #0
   1e178:	9b08      	ldr	r3, [sp, #32]
   1e17a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1e17e:	9301      	str	r3, [sp, #4]
   1e180:	db29      	blt.n	1e1d6 <__kernel_rem_pio2+0xde>
   1e182:	9a04      	ldr	r2, [sp, #16]
   1e184:	a920      	add	r1, sp, #128	; 0x80
   1e186:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1e18a:	eb02 0803 	add.w	r8, r2, r3
   1e18e:	eb01 0903 	add.w	r9, r1, r3
   1e192:	aa72      	add	r2, sp, #456	; 0x1c8
   1e194:	9b05      	ldr	r3, [sp, #20]
   1e196:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
   1e19a:	9b03      	ldr	r3, [sp, #12]
   1e19c:	2b00      	cmp	r3, #0
   1e19e:	f2c0 819e 	blt.w	1e4de <__kernel_rem_pio2+0x3e6>
   1e1a2:	464d      	mov	r5, r9
   1e1a4:	9c04      	ldr	r4, [sp, #16]
   1e1a6:	2600      	movs	r6, #0
   1e1a8:	2700      	movs	r7, #0
   1e1aa:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1e1ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1e1b2:	f7fe fb01 	bl	1c7b8 <__aeabi_dmul>
   1e1b6:	4602      	mov	r2, r0
   1e1b8:	460b      	mov	r3, r1
   1e1ba:	4630      	mov	r0, r6
   1e1bc:	4639      	mov	r1, r7
   1e1be:	f7fe f945 	bl	1c44c <__adddf3>
   1e1c2:	4544      	cmp	r4, r8
   1e1c4:	4606      	mov	r6, r0
   1e1c6:	460f      	mov	r7, r1
   1e1c8:	d1ef      	bne.n	1e1aa <__kernel_rem_pio2+0xb2>
   1e1ca:	f109 0908 	add.w	r9, r9, #8
   1e1ce:	e8ea 6702 	strd	r6, r7, [sl], #8
   1e1d2:	45da      	cmp	sl, fp
   1e1d4:	d1e1      	bne.n	1e19a <__kernel_rem_pio2+0xa2>
   1e1d6:	9905      	ldr	r1, [sp, #20]
   1e1d8:	9a01      	ldr	r2, [sp, #4]
   1e1da:	9804      	ldr	r0, [sp, #16]
   1e1dc:	008b      	lsls	r3, r1, #2
   1e1de:	9101      	str	r1, [sp, #4]
   1e1e0:	4402      	add	r2, r0
   1e1e2:	a80b      	add	r0, sp, #44	; 0x2c
   1e1e4:	4693      	mov	fp, r2
   1e1e6:	f1a3 0208 	sub.w	r2, r3, #8
   1e1ea:	18c3      	adds	r3, r0, r3
   1e1ec:	930a      	str	r3, [sp, #40]	; 0x28
   1e1ee:	ab0c      	add	r3, sp, #48	; 0x30
   1e1f0:	4413      	add	r3, r2
   1e1f2:	9309      	str	r3, [sp, #36]	; 0x24
   1e1f4:	9a01      	ldr	r2, [sp, #4]
   1e1f6:	a998      	add	r1, sp, #608	; 0x260
   1e1f8:	2a00      	cmp	r2, #0
   1e1fa:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   1e1fe:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   1e202:	dd29      	ble.n	1e258 <__kernel_rem_pio2+0x160>
   1e204:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1e208:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   1e20c:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   1e210:	2200      	movs	r2, #0
   1e212:	4b73      	ldr	r3, [pc, #460]	; (1e3e0 <__kernel_rem_pio2+0x2e8>)
   1e214:	4620      	mov	r0, r4
   1e216:	4629      	mov	r1, r5
   1e218:	f7fe face 	bl	1c7b8 <__aeabi_dmul>
   1e21c:	f7fe fd66 	bl	1ccec <__aeabi_d2iz>
   1e220:	f7fe fa60 	bl	1c6e4 <__aeabi_i2d>
   1e224:	2200      	movs	r2, #0
   1e226:	4b6f      	ldr	r3, [pc, #444]	; (1e3e4 <__kernel_rem_pio2+0x2ec>)
   1e228:	4606      	mov	r6, r0
   1e22a:	460f      	mov	r7, r1
   1e22c:	f7fe fac4 	bl	1c7b8 <__aeabi_dmul>
   1e230:	4602      	mov	r2, r0
   1e232:	460b      	mov	r3, r1
   1e234:	4620      	mov	r0, r4
   1e236:	4629      	mov	r1, r5
   1e238:	f7fe f906 	bl	1c448 <__aeabi_dsub>
   1e23c:	f7fe fd56 	bl	1ccec <__aeabi_d2iz>
   1e240:	4639      	mov	r1, r7
   1e242:	f849 0b04 	str.w	r0, [r9], #4
   1e246:	4630      	mov	r0, r6
   1e248:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   1e24c:	f7fe f8fe 	bl	1c44c <__adddf3>
   1e250:	4604      	mov	r4, r0
   1e252:	45d0      	cmp	r8, sl
   1e254:	460d      	mov	r5, r1
   1e256:	d1db      	bne.n	1e210 <__kernel_rem_pio2+0x118>
   1e258:	f8dd 9018 	ldr.w	r9, [sp, #24]
   1e25c:	ec45 4b10 	vmov	d0, r4, r5
   1e260:	4648      	mov	r0, r9
   1e262:	f000 fcad 	bl	1ebc0 <scalbn>
   1e266:	2200      	movs	r2, #0
   1e268:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1e26c:	ee10 0a10 	vmov	r0, s0
   1e270:	ec55 4b10 	vmov	r4, r5, d0
   1e274:	4629      	mov	r1, r5
   1e276:	f7fe fa9f 	bl	1c7b8 <__aeabi_dmul>
   1e27a:	ec41 0b10 	vmov	d0, r0, r1
   1e27e:	f000 fc1b 	bl	1eab8 <floor>
   1e282:	2200      	movs	r2, #0
   1e284:	4b58      	ldr	r3, [pc, #352]	; (1e3e8 <__kernel_rem_pio2+0x2f0>)
   1e286:	ec51 0b10 	vmov	r0, r1, d0
   1e28a:	f7fe fa95 	bl	1c7b8 <__aeabi_dmul>
   1e28e:	4602      	mov	r2, r0
   1e290:	460b      	mov	r3, r1
   1e292:	4620      	mov	r0, r4
   1e294:	4629      	mov	r1, r5
   1e296:	f7fe f8d7 	bl	1c448 <__aeabi_dsub>
   1e29a:	460d      	mov	r5, r1
   1e29c:	4604      	mov	r4, r0
   1e29e:	f7fe fd25 	bl	1ccec <__aeabi_d2iz>
   1e2a2:	4680      	mov	r8, r0
   1e2a4:	f7fe fa1e 	bl	1c6e4 <__aeabi_i2d>
   1e2a8:	460b      	mov	r3, r1
   1e2aa:	4602      	mov	r2, r0
   1e2ac:	4629      	mov	r1, r5
   1e2ae:	4620      	mov	r0, r4
   1e2b0:	f7fe f8ca 	bl	1c448 <__aeabi_dsub>
   1e2b4:	464b      	mov	r3, r9
   1e2b6:	4606      	mov	r6, r0
   1e2b8:	460f      	mov	r7, r1
   1e2ba:	2b00      	cmp	r3, #0
   1e2bc:	f340 8096 	ble.w	1e3ec <__kernel_rem_pio2+0x2f4>
   1e2c0:	9a01      	ldr	r2, [sp, #4]
   1e2c2:	a90c      	add	r1, sp, #48	; 0x30
   1e2c4:	f1c9 0318 	rsb	r3, r9, #24
   1e2c8:	f1c9 0517 	rsb	r5, r9, #23
   1e2cc:	3a01      	subs	r2, #1
   1e2ce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   1e2d2:	fa41 f003 	asr.w	r0, r1, r3
   1e2d6:	fa00 f303 	lsl.w	r3, r0, r3
   1e2da:	4480      	add	r8, r0
   1e2dc:	1acb      	subs	r3, r1, r3
   1e2de:	a90c      	add	r1, sp, #48	; 0x30
   1e2e0:	fa43 f505 	asr.w	r5, r3, r5
   1e2e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1e2e8:	2d00      	cmp	r5, #0
   1e2ea:	f300 8089 	bgt.w	1e400 <__kernel_rem_pio2+0x308>
   1e2ee:	2200      	movs	r2, #0
   1e2f0:	2300      	movs	r3, #0
   1e2f2:	4630      	mov	r0, r6
   1e2f4:	4639      	mov	r1, r7
   1e2f6:	f7fe fcc7 	bl	1cc88 <__aeabi_dcmpeq>
   1e2fa:	2800      	cmp	r0, #0
   1e2fc:	f000 8297 	beq.w	1e82e <__kernel_rem_pio2+0x736>
   1e300:	9901      	ldr	r1, [sp, #4]
   1e302:	9b05      	ldr	r3, [sp, #20]
   1e304:	f101 39ff 	add.w	r9, r1, #4294967295
   1e308:	454b      	cmp	r3, r9
   1e30a:	dc10      	bgt.n	1e32e <__kernel_rem_pio2+0x236>
   1e30c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   1e310:	2200      	movs	r2, #0
   1e312:	980a      	ldr	r0, [sp, #40]	; 0x28
   1e314:	440b      	add	r3, r1
   1e316:	a90c      	add	r1, sp, #48	; 0x30
   1e318:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1e31c:	f853 1904 	ldr.w	r1, [r3], #-4
   1e320:	4283      	cmp	r3, r0
   1e322:	ea42 0201 	orr.w	r2, r2, r1
   1e326:	d1f9      	bne.n	1e31c <__kernel_rem_pio2+0x224>
   1e328:	2a00      	cmp	r2, #0
   1e32a:	f040 80e2 	bne.w	1e4f2 <__kernel_rem_pio2+0x3fa>
   1e32e:	9b05      	ldr	r3, [sp, #20]
   1e330:	aa0c      	add	r2, sp, #48	; 0x30
   1e332:	3b01      	subs	r3, #1
   1e334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1e338:	2b00      	cmp	r3, #0
   1e33a:	f040 80cb 	bne.w	1e4d4 <__kernel_rem_pio2+0x3dc>
   1e33e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e340:	2301      	movs	r3, #1
   1e342:	f852 1904 	ldr.w	r1, [r2], #-4
   1e346:	3301      	adds	r3, #1
   1e348:	2900      	cmp	r1, #0
   1e34a:	d0fa      	beq.n	1e342 <__kernel_rem_pio2+0x24a>
   1e34c:	9901      	ldr	r1, [sp, #4]
   1e34e:	1c4a      	adds	r2, r1, #1
   1e350:	18cb      	adds	r3, r1, r3
   1e352:	4691      	mov	r9, r2
   1e354:	9302      	str	r3, [sp, #8]
   1e356:	9b07      	ldr	r3, [sp, #28]
   1e358:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   1e35c:	9901      	ldr	r1, [sp, #4]
   1e35e:	18d3      	adds	r3, r2, r3
   1e360:	9808      	ldr	r0, [sp, #32]
   1e362:	449a      	add	sl, r3
   1e364:	4401      	add	r1, r0
   1e366:	ab20      	add	r3, sp, #128	; 0x80
   1e368:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
   1e36c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   1e36e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
   1e372:	ab70      	add	r3, sp, #448	; 0x1c0
   1e374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1e378:	9301      	str	r3, [sp, #4]
   1e37a:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   1e37e:	46a8      	mov	r8, r5
   1e380:	f7fe f9b0 	bl	1c6e4 <__aeabi_i2d>
   1e384:	460b      	mov	r3, r1
   1e386:	9903      	ldr	r1, [sp, #12]
   1e388:	4602      	mov	r2, r0
   1e38a:	2900      	cmp	r1, #0
   1e38c:	e8e8 2302 	strd	r2, r3, [r8], #8
   1e390:	db1f      	blt.n	1e3d2 <__kernel_rem_pio2+0x2da>
   1e392:	9c04      	ldr	r4, [sp, #16]
   1e394:	2600      	movs	r6, #0
   1e396:	2700      	movs	r7, #0
   1e398:	e001      	b.n	1e39e <__kernel_rem_pio2+0x2a6>
   1e39a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1e39e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1e3a2:	f7fe fa09 	bl	1c7b8 <__aeabi_dmul>
   1e3a6:	4602      	mov	r2, r0
   1e3a8:	460b      	mov	r3, r1
   1e3aa:	4630      	mov	r0, r6
   1e3ac:	4639      	mov	r1, r7
   1e3ae:	f7fe f84d 	bl	1c44c <__adddf3>
   1e3b2:	455c      	cmp	r4, fp
   1e3b4:	4606      	mov	r6, r0
   1e3b6:	460f      	mov	r7, r1
   1e3b8:	d1ef      	bne.n	1e39a <__kernel_rem_pio2+0x2a2>
   1e3ba:	9b01      	ldr	r3, [sp, #4]
   1e3bc:	f109 0901 	add.w	r9, r9, #1
   1e3c0:	4645      	mov	r5, r8
   1e3c2:	e8e3 6702 	strd	r6, r7, [r3], #8
   1e3c6:	9301      	str	r3, [sp, #4]
   1e3c8:	9b02      	ldr	r3, [sp, #8]
   1e3ca:	4599      	cmp	r9, r3
   1e3cc:	ddd5      	ble.n	1e37a <__kernel_rem_pio2+0x282>
   1e3ce:	9301      	str	r3, [sp, #4]
   1e3d0:	e710      	b.n	1e1f4 <__kernel_rem_pio2+0xfc>
   1e3d2:	2600      	movs	r6, #0
   1e3d4:	2700      	movs	r7, #0
   1e3d6:	e7f0      	b.n	1e3ba <__kernel_rem_pio2+0x2c2>
   1e3d8:	000411bc 	.word	0x000411bc
   1e3dc:	2aaaaaab 	.word	0x2aaaaaab
   1e3e0:	3e700000 	.word	0x3e700000
   1e3e4:	41700000 	.word	0x41700000
   1e3e8:	40200000 	.word	0x40200000
   1e3ec:	d169      	bne.n	1e4c2 <__kernel_rem_pio2+0x3ca>
   1e3ee:	9b01      	ldr	r3, [sp, #4]
   1e3f0:	aa0c      	add	r2, sp, #48	; 0x30
   1e3f2:	3b01      	subs	r3, #1
   1e3f4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1e3f8:	15ed      	asrs	r5, r5, #23
   1e3fa:	2d00      	cmp	r5, #0
   1e3fc:	f77f af77 	ble.w	1e2ee <__kernel_rem_pio2+0x1f6>
   1e400:	9b01      	ldr	r3, [sp, #4]
   1e402:	f108 0801 	add.w	r8, r8, #1
   1e406:	2b00      	cmp	r3, #0
   1e408:	f340 820f 	ble.w	1e82a <__kernel_rem_pio2+0x732>
   1e40c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1e40e:	2c00      	cmp	r4, #0
   1e410:	d13a      	bne.n	1e488 <__kernel_rem_pio2+0x390>
   1e412:	9b01      	ldr	r3, [sp, #4]
   1e414:	2b01      	cmp	r3, #1
   1e416:	d009      	beq.n	1e42c <__kernel_rem_pio2+0x334>
   1e418:	a90c      	add	r1, sp, #48	; 0x30
   1e41a:	2201      	movs	r2, #1
   1e41c:	f851 4f04 	ldr.w	r4, [r1, #4]!
   1e420:	1c53      	adds	r3, r2, #1
   1e422:	bb9c      	cbnz	r4, 1e48c <__kernel_rem_pio2+0x394>
   1e424:	461a      	mov	r2, r3
   1e426:	9b01      	ldr	r3, [sp, #4]
   1e428:	4293      	cmp	r3, r2
   1e42a:	d1f7      	bne.n	1e41c <__kernel_rem_pio2+0x324>
   1e42c:	9b06      	ldr	r3, [sp, #24]
   1e42e:	2b00      	cmp	r3, #0
   1e430:	dd0e      	ble.n	1e450 <__kernel_rem_pio2+0x358>
   1e432:	2b01      	cmp	r3, #1
   1e434:	f000 811a 	beq.w	1e66c <__kernel_rem_pio2+0x574>
   1e438:	2b02      	cmp	r3, #2
   1e43a:	d109      	bne.n	1e450 <__kernel_rem_pio2+0x358>
   1e43c:	9b01      	ldr	r3, [sp, #4]
   1e43e:	a90c      	add	r1, sp, #48	; 0x30
   1e440:	1e5a      	subs	r2, r3, #1
   1e442:	ab0c      	add	r3, sp, #48	; 0x30
   1e444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1e448:	f3c3 0315 	ubfx	r3, r3, #0, #22
   1e44c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1e450:	2d02      	cmp	r5, #2
   1e452:	f47f af4c 	bne.w	1e2ee <__kernel_rem_pio2+0x1f6>
   1e456:	4632      	mov	r2, r6
   1e458:	463b      	mov	r3, r7
   1e45a:	2000      	movs	r0, #0
   1e45c:	4998      	ldr	r1, [pc, #608]	; (1e6c0 <__kernel_rem_pio2+0x5c8>)
   1e45e:	f7fd fff3 	bl	1c448 <__aeabi_dsub>
   1e462:	4606      	mov	r6, r0
   1e464:	460f      	mov	r7, r1
   1e466:	2c00      	cmp	r4, #0
   1e468:	f43f af41 	beq.w	1e2ee <__kernel_rem_pio2+0x1f6>
   1e46c:	9806      	ldr	r0, [sp, #24]
   1e46e:	ed9f 0b90 	vldr	d0, [pc, #576]	; 1e6b0 <__kernel_rem_pio2+0x5b8>
   1e472:	f000 fba5 	bl	1ebc0 <scalbn>
   1e476:	4630      	mov	r0, r6
   1e478:	4639      	mov	r1, r7
   1e47a:	ec53 2b10 	vmov	r2, r3, d0
   1e47e:	f7fd ffe3 	bl	1c448 <__aeabi_dsub>
   1e482:	4606      	mov	r6, r0
   1e484:	460f      	mov	r7, r1
   1e486:	e732      	b.n	1e2ee <__kernel_rem_pio2+0x1f6>
   1e488:	2301      	movs	r3, #1
   1e48a:	2200      	movs	r2, #0
   1e48c:	a90c      	add	r1, sp, #48	; 0x30
   1e48e:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   1e492:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   1e496:	9901      	ldr	r1, [sp, #4]
   1e498:	4299      	cmp	r1, r3
   1e49a:	dd10      	ble.n	1e4be <__kernel_rem_pio2+0x3c6>
   1e49c:	a80c      	add	r0, sp, #48	; 0x30
   1e49e:	aa0c      	add	r2, sp, #48	; 0x30
   1e4a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1e4a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1e4a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1e4ac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   1e4b0:	e000      	b.n	1e4b4 <__kernel_rem_pio2+0x3bc>
   1e4b2:	681a      	ldr	r2, [r3, #0]
   1e4b4:	1a8a      	subs	r2, r1, r2
   1e4b6:	f843 2b04 	str.w	r2, [r3], #4
   1e4ba:	4283      	cmp	r3, r0
   1e4bc:	d1f9      	bne.n	1e4b2 <__kernel_rem_pio2+0x3ba>
   1e4be:	2401      	movs	r4, #1
   1e4c0:	e7b4      	b.n	1e42c <__kernel_rem_pio2+0x334>
   1e4c2:	2200      	movs	r2, #0
   1e4c4:	4b7f      	ldr	r3, [pc, #508]	; (1e6c4 <__kernel_rem_pio2+0x5cc>)
   1e4c6:	f7fe fbfd 	bl	1ccc4 <__aeabi_dcmpge>
   1e4ca:	2800      	cmp	r0, #0
   1e4cc:	f040 80d9 	bne.w	1e682 <__kernel_rem_pio2+0x58a>
   1e4d0:	4605      	mov	r5, r0
   1e4d2:	e70c      	b.n	1e2ee <__kernel_rem_pio2+0x1f6>
   1e4d4:	9b01      	ldr	r3, [sp, #4]
   1e4d6:	1c5a      	adds	r2, r3, #1
   1e4d8:	4691      	mov	r9, r2
   1e4da:	9202      	str	r2, [sp, #8]
   1e4dc:	e73b      	b.n	1e356 <__kernel_rem_pio2+0x25e>
   1e4de:	2600      	movs	r6, #0
   1e4e0:	2700      	movs	r7, #0
   1e4e2:	f109 0908 	add.w	r9, r9, #8
   1e4e6:	e8ea 6702 	strd	r6, r7, [sl], #8
   1e4ea:	45da      	cmp	sl, fp
   1e4ec:	f47f ae55 	bne.w	1e19a <__kernel_rem_pio2+0xa2>
   1e4f0:	e671      	b.n	1e1d6 <__kernel_rem_pio2+0xde>
   1e4f2:	9a06      	ldr	r2, [sp, #24]
   1e4f4:	ab0c      	add	r3, sp, #48	; 0x30
   1e4f6:	f8cd 801c 	str.w	r8, [sp, #28]
   1e4fa:	3a18      	subs	r2, #24
   1e4fc:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   1e500:	9504      	str	r5, [sp, #16]
   1e502:	9206      	str	r2, [sp, #24]
   1e504:	b973      	cbnz	r3, 1e524 <__kernel_rem_pio2+0x42c>
   1e506:	4b70      	ldr	r3, [pc, #448]	; (1e6c8 <__kernel_rem_pio2+0x5d0>)
   1e508:	9901      	ldr	r1, [sp, #4]
   1e50a:	4419      	add	r1, r3
   1e50c:	460b      	mov	r3, r1
   1e50e:	a90c      	add	r1, sp, #48	; 0x30
   1e510:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1e514:	f853 1904 	ldr.w	r1, [r3], #-4
   1e518:	f109 39ff 	add.w	r9, r9, #4294967295
   1e51c:	3a18      	subs	r2, #24
   1e51e:	2900      	cmp	r1, #0
   1e520:	d0f8      	beq.n	1e514 <__kernel_rem_pio2+0x41c>
   1e522:	9206      	str	r2, [sp, #24]
   1e524:	9806      	ldr	r0, [sp, #24]
   1e526:	ed9f 0b62 	vldr	d0, [pc, #392]	; 1e6b0 <__kernel_rem_pio2+0x5b8>
   1e52a:	f000 fb49 	bl	1ebc0 <scalbn>
   1e52e:	f1b9 0f00 	cmp.w	r9, #0
   1e532:	ec55 4b10 	vmov	r4, r5, d0
   1e536:	f2c0 81da 	blt.w	1e8ee <__kernel_rem_pio2+0x7f6>
   1e53a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1e53e:	aa70      	add	r2, sp, #448	; 0x1c0
   1e540:	f109 0601 	add.w	r6, r9, #1
   1e544:	f04f 0a00 	mov.w	sl, #0
   1e548:	eb02 0803 	add.w	r8, r2, r3
   1e54c:	9306      	str	r3, [sp, #24]
   1e54e:	ab0c      	add	r3, sp, #48	; 0x30
   1e550:	f8df b178 	ldr.w	fp, [pc, #376]	; 1e6cc <__kernel_rem_pio2+0x5d4>
   1e554:	f108 0708 	add.w	r7, r8, #8
   1e558:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1e55c:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   1e560:	f7fe f8c0 	bl	1c6e4 <__aeabi_i2d>
   1e564:	4622      	mov	r2, r4
   1e566:	462b      	mov	r3, r5
   1e568:	f7fe f926 	bl	1c7b8 <__aeabi_dmul>
   1e56c:	465b      	mov	r3, fp
   1e56e:	4652      	mov	r2, sl
   1e570:	e967 0102 	strd	r0, r1, [r7, #-8]!
   1e574:	4620      	mov	r0, r4
   1e576:	4629      	mov	r1, r5
   1e578:	f7fe f91e 	bl	1c7b8 <__aeabi_dmul>
   1e57c:	ab0c      	add	r3, sp, #48	; 0x30
   1e57e:	4604      	mov	r4, r0
   1e580:	460d      	mov	r5, r1
   1e582:	429e      	cmp	r6, r3
   1e584:	d1ea      	bne.n	1e55c <__kernel_rem_pio2+0x464>
   1e586:	ab48      	add	r3, sp, #288	; 0x120
   1e588:	46c3      	mov	fp, r8
   1e58a:	f04f 0a00 	mov.w	sl, #0
   1e58e:	9303      	str	r3, [sp, #12]
   1e590:	e9cd 3901 	strd	r3, r9, [sp, #4]
   1e594:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1e598:	f1b9 0f00 	cmp.w	r9, #0
   1e59c:	db2b      	blt.n	1e5f6 <__kernel_rem_pio2+0x4fe>
   1e59e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1e6d0 <__kernel_rem_pio2+0x5d8>
   1e5a2:	465d      	mov	r5, fp
   1e5a4:	2400      	movs	r4, #0
   1e5a6:	2600      	movs	r6, #0
   1e5a8:	2700      	movs	r7, #0
   1e5aa:	a343      	add	r3, pc, #268	; (adr r3, 1e6b8 <__kernel_rem_pio2+0x5c0>)
   1e5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e5b0:	e003      	b.n	1e5ba <__kernel_rem_pio2+0x4c2>
   1e5b2:	4554      	cmp	r4, sl
   1e5b4:	dc10      	bgt.n	1e5d8 <__kernel_rem_pio2+0x4e0>
   1e5b6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   1e5ba:	3401      	adds	r4, #1
   1e5bc:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1e5c0:	f7fe f8fa 	bl	1c7b8 <__aeabi_dmul>
   1e5c4:	4602      	mov	r2, r0
   1e5c6:	460b      	mov	r3, r1
   1e5c8:	4630      	mov	r0, r6
   1e5ca:	4639      	mov	r1, r7
   1e5cc:	f7fd ff3e 	bl	1c44c <__adddf3>
   1e5d0:	45a1      	cmp	r9, r4
   1e5d2:	4606      	mov	r6, r0
   1e5d4:	460f      	mov	r7, r1
   1e5d6:	daec      	bge.n	1e5b2 <__kernel_rem_pio2+0x4ba>
   1e5d8:	9a02      	ldr	r2, [sp, #8]
   1e5da:	f1ab 0b08 	sub.w	fp, fp, #8
   1e5de:	9b01      	ldr	r3, [sp, #4]
   1e5e0:	4592      	cmp	sl, r2
   1e5e2:	e8e3 6702 	strd	r6, r7, [r3], #8
   1e5e6:	9301      	str	r3, [sp, #4]
   1e5e8:	f10a 0301 	add.w	r3, sl, #1
   1e5ec:	d006      	beq.n	1e5fc <__kernel_rem_pio2+0x504>
   1e5ee:	f1b9 0f00 	cmp.w	r9, #0
   1e5f2:	469a      	mov	sl, r3
   1e5f4:	dad3      	bge.n	1e59e <__kernel_rem_pio2+0x4a6>
   1e5f6:	2600      	movs	r6, #0
   1e5f8:	2700      	movs	r7, #0
   1e5fa:	e7ed      	b.n	1e5d8 <__kernel_rem_pio2+0x4e0>
   1e5fc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1e5fe:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1e602:	2b03      	cmp	r3, #3
   1e604:	d82b      	bhi.n	1e65e <__kernel_rem_pio2+0x566>
   1e606:	e8df f013 	tbh	[pc, r3, lsl #1]
   1e60a:	00f5      	.short	0x00f5
   1e60c:	00e400e4 	.word	0x00e400e4
   1e610:	0067      	.short	0x0067
   1e612:	ab48      	add	r3, sp, #288	; 0x120
   1e614:	2400      	movs	r4, #0
   1e616:	2500      	movs	r5, #0
   1e618:	9303      	str	r3, [sp, #12]
   1e61a:	9903      	ldr	r1, [sp, #12]
   1e61c:	462b      	mov	r3, r5
   1e61e:	4622      	mov	r2, r4
   1e620:	e9d1 0100 	ldrd	r0, r1, [r1]
   1e624:	f7fd ff10 	bl	1c448 <__aeabi_dsub>
   1e628:	9b04      	ldr	r3, [sp, #16]
   1e62a:	2b00      	cmp	r3, #0
   1e62c:	f040 813e 	bne.w	1e8ac <__kernel_rem_pio2+0x7b4>
   1e630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e632:	f1b9 0f00 	cmp.w	r9, #0
   1e636:	e9c3 4500 	strd	r4, r5, [r3]
   1e63a:	dd0d      	ble.n	1e658 <__kernel_rem_pio2+0x560>
   1e63c:	ad4a      	add	r5, sp, #296	; 0x128
   1e63e:	2401      	movs	r4, #1
   1e640:	3401      	adds	r4, #1
   1e642:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1e646:	f7fd ff01 	bl	1c44c <__adddf3>
   1e64a:	45a1      	cmp	r9, r4
   1e64c:	daf8      	bge.n	1e640 <__kernel_rem_pio2+0x548>
   1e64e:	9b04      	ldr	r3, [sp, #16]
   1e650:	b113      	cbz	r3, 1e658 <__kernel_rem_pio2+0x560>
   1e652:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1e656:	4619      	mov	r1, r3
   1e658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e65a:	e9c3 0102 	strd	r0, r1, [r3, #8]
   1e65e:	9b07      	ldr	r3, [sp, #28]
   1e660:	f003 0007 	and.w	r0, r3, #7
   1e664:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1e668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e66c:	9b01      	ldr	r3, [sp, #4]
   1e66e:	a90c      	add	r1, sp, #48	; 0x30
   1e670:	1e5a      	subs	r2, r3, #1
   1e672:	ab0c      	add	r3, sp, #48	; 0x30
   1e674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1e678:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1e67c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1e680:	e6e6      	b.n	1e450 <__kernel_rem_pio2+0x358>
   1e682:	9b01      	ldr	r3, [sp, #4]
   1e684:	f108 0801 	add.w	r8, r8, #1
   1e688:	2502      	movs	r5, #2
   1e68a:	2b00      	cmp	r3, #0
   1e68c:	f73f aebe 	bgt.w	1e40c <__kernel_rem_pio2+0x314>
   1e690:	4632      	mov	r2, r6
   1e692:	463b      	mov	r3, r7
   1e694:	2000      	movs	r0, #0
   1e696:	490a      	ldr	r1, [pc, #40]	; (1e6c0 <__kernel_rem_pio2+0x5c8>)
   1e698:	f7fd fed6 	bl	1c448 <__aeabi_dsub>
   1e69c:	4606      	mov	r6, r0
   1e69e:	460f      	mov	r7, r1
   1e6a0:	e625      	b.n	1e2ee <__kernel_rem_pio2+0x1f6>
   1e6a2:	2100      	movs	r1, #0
   1e6a4:	f06f 0317 	mvn.w	r3, #23
   1e6a8:	9107      	str	r1, [sp, #28]
   1e6aa:	e545      	b.n	1e138 <__kernel_rem_pio2+0x40>
   1e6ac:	f3af 8000 	nop.w
   1e6b0:	00000000 	.word	0x00000000
   1e6b4:	3ff00000 	.word	0x3ff00000
   1e6b8:	40000000 	.word	0x40000000
   1e6bc:	3ff921fb 	.word	0x3ff921fb
   1e6c0:	3ff00000 	.word	0x3ff00000
   1e6c4:	3fe00000 	.word	0x3fe00000
   1e6c8:	3ffffffe 	.word	0x3ffffffe
   1e6cc:	3e700000 	.word	0x3e700000
   1e6d0:	00040450 	.word	0x00040450
   1e6d4:	ab48      	add	r3, sp, #288	; 0x120
   1e6d6:	9303      	str	r3, [sp, #12]
   1e6d8:	f1b9 0f00 	cmp.w	r9, #0
   1e6dc:	f340 8119 	ble.w	1e912 <__kernel_rem_pio2+0x81a>
   1e6e0:	9a03      	ldr	r2, [sp, #12]
   1e6e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1e6e6:	eb02 08c9 	add.w	r8, r2, r9, lsl #3
   1e6ea:	9301      	str	r3, [sp, #4]
   1e6ec:	e9d8 ab00 	ldrd	sl, fp, [r8]
   1e6f0:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
   1e6f4:	4652      	mov	r2, sl
   1e6f6:	465b      	mov	r3, fp
   1e6f8:	4630      	mov	r0, r6
   1e6fa:	4639      	mov	r1, r7
   1e6fc:	f7fd fea6 	bl	1c44c <__adddf3>
   1e700:	4604      	mov	r4, r0
   1e702:	460d      	mov	r5, r1
   1e704:	4602      	mov	r2, r0
   1e706:	460b      	mov	r3, r1
   1e708:	4630      	mov	r0, r6
   1e70a:	4639      	mov	r1, r7
   1e70c:	f7fd fe9c 	bl	1c448 <__aeabi_dsub>
   1e710:	465b      	mov	r3, fp
   1e712:	4652      	mov	r2, sl
   1e714:	46ab      	mov	fp, r5
   1e716:	f7fd fe99 	bl	1c44c <__adddf3>
   1e71a:	9b03      	ldr	r3, [sp, #12]
   1e71c:	46a2      	mov	sl, r4
   1e71e:	4543      	cmp	r3, r8
   1e720:	e9c8 0102 	strd	r0, r1, [r8, #8]
   1e724:	e9c8 4500 	strd	r4, r5, [r8]
   1e728:	d1e2      	bne.n	1e6f0 <__kernel_rem_pio2+0x5f8>
   1e72a:	f1b9 0f01 	cmp.w	r9, #1
   1e72e:	f340 80f0 	ble.w	1e912 <__kernel_rem_pio2+0x81a>
   1e732:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   1e736:	9b01      	ldr	r3, [sp, #4]
   1e738:	9903      	ldr	r1, [sp, #12]
   1e73a:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
   1e73e:	444a      	add	r2, r9
   1e740:	440b      	add	r3, r1
   1e742:	00d2      	lsls	r2, r2, #3
   1e744:	f102 0b08 	add.w	fp, r2, #8
   1e748:	9201      	str	r2, [sp, #4]
   1e74a:	e9d3 6700 	ldrd	r6, r7, [r3]
   1e74e:	448b      	add	fp, r1
   1e750:	4632      	mov	r2, r6
   1e752:	463b      	mov	r3, r7
   1e754:	e97b 8902 	ldrd	r8, r9, [fp, #-8]!
   1e758:	4640      	mov	r0, r8
   1e75a:	4649      	mov	r1, r9
   1e75c:	f7fd fe76 	bl	1c44c <__adddf3>
   1e760:	4604      	mov	r4, r0
   1e762:	460d      	mov	r5, r1
   1e764:	4602      	mov	r2, r0
   1e766:	460b      	mov	r3, r1
   1e768:	4640      	mov	r0, r8
   1e76a:	4649      	mov	r1, r9
   1e76c:	f7fd fe6c 	bl	1c448 <__aeabi_dsub>
   1e770:	4632      	mov	r2, r6
   1e772:	463b      	mov	r3, r7
   1e774:	4626      	mov	r6, r4
   1e776:	f7fd fe69 	bl	1c44c <__adddf3>
   1e77a:	45da      	cmp	sl, fp
   1e77c:	462f      	mov	r7, r5
   1e77e:	e9cb 0102 	strd	r0, r1, [fp, #8]
   1e782:	e9cb 4500 	strd	r4, r5, [fp]
   1e786:	d1e3      	bne.n	1e750 <__kernel_rem_pio2+0x658>
   1e788:	9c01      	ldr	r4, [sp, #4]
   1e78a:	2000      	movs	r0, #0
   1e78c:	9b03      	ldr	r3, [sp, #12]
   1e78e:	2100      	movs	r1, #0
   1e790:	3410      	adds	r4, #16
   1e792:	f103 0510 	add.w	r5, r3, #16
   1e796:	441c      	add	r4, r3
   1e798:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1e79c:	f7fd fe56 	bl	1c44c <__adddf3>
   1e7a0:	42a5      	cmp	r5, r4
   1e7a2:	d1f9      	bne.n	1e798 <__kernel_rem_pio2+0x6a0>
   1e7a4:	9c03      	ldr	r4, [sp, #12]
   1e7a6:	9e04      	ldr	r6, [sp, #16]
   1e7a8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e7ac:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
   1e7b0:	2e00      	cmp	r6, #0
   1e7b2:	f040 8086 	bne.w	1e8c2 <__kernel_rem_pio2+0x7ca>
   1e7b6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1e7b8:	e9c6 2300 	strd	r2, r3, [r6]
   1e7bc:	9b07      	ldr	r3, [sp, #28]
   1e7be:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1e7c2:	f003 0007 	and.w	r0, r3, #7
   1e7c6:	e9c6 4502 	strd	r4, r5, [r6, #8]
   1e7ca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1e7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7d2:	9e06      	ldr	r6, [sp, #24]
   1e7d4:	2400      	movs	r4, #0
   1e7d6:	9f03      	ldr	r7, [sp, #12]
   1e7d8:	2500      	movs	r5, #0
   1e7da:	3608      	adds	r6, #8
   1e7dc:	443e      	add	r6, r7
   1e7de:	4620      	mov	r0, r4
   1e7e0:	4629      	mov	r1, r5
   1e7e2:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
   1e7e6:	f7fd fe31 	bl	1c44c <__adddf3>
   1e7ea:	4604      	mov	r4, r0
   1e7ec:	42b7      	cmp	r7, r6
   1e7ee:	460d      	mov	r5, r1
   1e7f0:	d1f5      	bne.n	1e7de <__kernel_rem_pio2+0x6e6>
   1e7f2:	e712      	b.n	1e61a <__kernel_rem_pio2+0x522>
   1e7f4:	9c06      	ldr	r4, [sp, #24]
   1e7f6:	2000      	movs	r0, #0
   1e7f8:	9d03      	ldr	r5, [sp, #12]
   1e7fa:	2100      	movs	r1, #0
   1e7fc:	3408      	adds	r4, #8
   1e7fe:	442c      	add	r4, r5
   1e800:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1e804:	f7fd fe22 	bl	1c44c <__adddf3>
   1e808:	42a5      	cmp	r5, r4
   1e80a:	d1f9      	bne.n	1e800 <__kernel_rem_pio2+0x708>
   1e80c:	9b04      	ldr	r3, [sp, #16]
   1e80e:	b113      	cbz	r3, 1e816 <__kernel_rem_pio2+0x71e>
   1e810:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1e814:	4619      	mov	r1, r3
   1e816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e818:	e9c3 0100 	strd	r0, r1, [r3]
   1e81c:	9b07      	ldr	r3, [sp, #28]
   1e81e:	f003 0007 	and.w	r0, r3, #7
   1e822:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1e826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e82a:	2400      	movs	r4, #0
   1e82c:	e5fe      	b.n	1e42c <__kernel_rem_pio2+0x334>
   1e82e:	9c06      	ldr	r4, [sp, #24]
   1e830:	f8cd 801c 	str.w	r8, [sp, #28]
   1e834:	4260      	negs	r0, r4
   1e836:	9504      	str	r5, [sp, #16]
   1e838:	ec47 6b10 	vmov	d0, r6, r7
   1e83c:	f000 f9c0 	bl	1ebc0 <scalbn>
   1e840:	2200      	movs	r2, #0
   1e842:	ee10 0a10 	vmov	r0, s0
   1e846:	4b34      	ldr	r3, [pc, #208]	; (1e918 <__kernel_rem_pio2+0x820>)
   1e848:	ec57 6b10 	vmov	r6, r7, d0
   1e84c:	4639      	mov	r1, r7
   1e84e:	f7fe fa39 	bl	1ccc4 <__aeabi_dcmpge>
   1e852:	b308      	cbz	r0, 1e898 <__kernel_rem_pio2+0x7a0>
   1e854:	3418      	adds	r4, #24
   1e856:	2200      	movs	r2, #0
   1e858:	4b30      	ldr	r3, [pc, #192]	; (1e91c <__kernel_rem_pio2+0x824>)
   1e85a:	4630      	mov	r0, r6
   1e85c:	4639      	mov	r1, r7
   1e85e:	9406      	str	r4, [sp, #24]
   1e860:	f7fd ffaa 	bl	1c7b8 <__aeabi_dmul>
   1e864:	9d01      	ldr	r5, [sp, #4]
   1e866:	f7fe fa41 	bl	1ccec <__aeabi_d2iz>
   1e86a:	4604      	mov	r4, r0
   1e86c:	f7fd ff3a 	bl	1c6e4 <__aeabi_i2d>
   1e870:	2200      	movs	r2, #0
   1e872:	4b29      	ldr	r3, [pc, #164]	; (1e918 <__kernel_rem_pio2+0x820>)
   1e874:	f105 0901 	add.w	r9, r5, #1
   1e878:	f7fd ff9e 	bl	1c7b8 <__aeabi_dmul>
   1e87c:	460b      	mov	r3, r1
   1e87e:	4602      	mov	r2, r0
   1e880:	4639      	mov	r1, r7
   1e882:	4630      	mov	r0, r6
   1e884:	f7fd fde0 	bl	1c448 <__aeabi_dsub>
   1e888:	f7fe fa30 	bl	1ccec <__aeabi_d2iz>
   1e88c:	ab0c      	add	r3, sp, #48	; 0x30
   1e88e:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
   1e892:	f843 4029 	str.w	r4, [r3, r9, lsl #2]
   1e896:	e645      	b.n	1e524 <__kernel_rem_pio2+0x42c>
   1e898:	4630      	mov	r0, r6
   1e89a:	4639      	mov	r1, r7
   1e89c:	9c01      	ldr	r4, [sp, #4]
   1e89e:	f7fe fa25 	bl	1ccec <__aeabi_d2iz>
   1e8a2:	aa0c      	add	r2, sp, #48	; 0x30
   1e8a4:	46a1      	mov	r9, r4
   1e8a6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
   1e8aa:	e63b      	b.n	1e524 <__kernel_rem_pio2+0x42c>
   1e8ac:	4622      	mov	r2, r4
   1e8ae:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   1e8b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1e8b4:	f1b9 0f00 	cmp.w	r9, #0
   1e8b8:	e9c4 2300 	strd	r2, r3, [r4]
   1e8bc:	f73f aebe 	bgt.w	1e63c <__kernel_rem_pio2+0x544>
   1e8c0:	e6c7      	b.n	1e652 <__kernel_rem_pio2+0x55a>
   1e8c2:	f103 4700 	add.w	r7, r3, #2147483648	; 0x80000000
   1e8c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1e8ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1e8cc:	4626      	mov	r6, r4
   1e8ce:	4694      	mov	ip, r2
   1e8d0:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
   1e8d4:	e9c1 0304 	strd	r0, r3, [r1, #16]
   1e8d8:	9b07      	ldr	r3, [sp, #28]
   1e8da:	f003 0007 	and.w	r0, r3, #7
   1e8de:	e9c1 c700 	strd	ip, r7, [r1]
   1e8e2:	e9c1 6402 	strd	r6, r4, [r1, #8]
   1e8e6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1e8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8ee:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1e8f0:	2b03      	cmp	r3, #3
   1e8f2:	f63f aeb4 	bhi.w	1e65e <__kernel_rem_pio2+0x566>
   1e8f6:	a201      	add	r2, pc, #4	; (adr r2, 1e8fc <__kernel_rem_pio2+0x804>)
   1e8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e8fc:	0001e90d 	.word	0x0001e90d
   1e900:	0001e613 	.word	0x0001e613
   1e904:	0001e613 	.word	0x0001e613
   1e908:	0001e6d5 	.word	0x0001e6d5
   1e90c:	2000      	movs	r0, #0
   1e90e:	2100      	movs	r1, #0
   1e910:	e77c      	b.n	1e80c <__kernel_rem_pio2+0x714>
   1e912:	2000      	movs	r0, #0
   1e914:	2100      	movs	r1, #0
   1e916:	e745      	b.n	1e7a4 <__kernel_rem_pio2+0x6ac>
   1e918:	41700000 	.word	0x41700000
   1e91c:	3e700000 	.word	0x3e700000

0001e920 <__kernel_sin>:
   1e920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e924:	ec55 4b10 	vmov	r4, r5, d0
   1e928:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   1e92c:	4682      	mov	sl, r0
   1e92e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1e932:	ed2d 8b02 	vpush	{d8}
   1e936:	eeb0 8a41 	vmov.f32	s16, s2
   1e93a:	eef0 8a61 	vmov.f32	s17, s3
   1e93e:	b083      	sub	sp, #12
   1e940:	da07      	bge.n	1e952 <__kernel_sin+0x32>
   1e942:	ee10 0a10 	vmov	r0, s0
   1e946:	4629      	mov	r1, r5
   1e948:	f7fe f9d0 	bl	1ccec <__aeabi_d2iz>
   1e94c:	2800      	cmp	r0, #0
   1e94e:	f000 808e 	beq.w	1ea6e <__kernel_sin+0x14e>
   1e952:	4622      	mov	r2, r4
   1e954:	462b      	mov	r3, r5
   1e956:	4620      	mov	r0, r4
   1e958:	4629      	mov	r1, r5
   1e95a:	f7fd ff2d 	bl	1c7b8 <__aeabi_dmul>
   1e95e:	4606      	mov	r6, r0
   1e960:	460f      	mov	r7, r1
   1e962:	4602      	mov	r2, r0
   1e964:	460b      	mov	r3, r1
   1e966:	4620      	mov	r0, r4
   1e968:	4629      	mov	r1, r5
   1e96a:	f7fd ff25 	bl	1c7b8 <__aeabi_dmul>
   1e96e:	4680      	mov	r8, r0
   1e970:	4689      	mov	r9, r1
   1e972:	4630      	mov	r0, r6
   1e974:	4639      	mov	r1, r7
   1e976:	a345      	add	r3, pc, #276	; (adr r3, 1ea8c <__kernel_sin+0x16c>)
   1e978:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e97c:	f7fd ff1c 	bl	1c7b8 <__aeabi_dmul>
   1e980:	a344      	add	r3, pc, #272	; (adr r3, 1ea94 <__kernel_sin+0x174>)
   1e982:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e986:	f7fd fd5f 	bl	1c448 <__aeabi_dsub>
   1e98a:	4632      	mov	r2, r6
   1e98c:	463b      	mov	r3, r7
   1e98e:	f7fd ff13 	bl	1c7b8 <__aeabi_dmul>
   1e992:	a342      	add	r3, pc, #264	; (adr r3, 1ea9c <__kernel_sin+0x17c>)
   1e994:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e998:	f7fd fd58 	bl	1c44c <__adddf3>
   1e99c:	4632      	mov	r2, r6
   1e99e:	463b      	mov	r3, r7
   1e9a0:	f7fd ff0a 	bl	1c7b8 <__aeabi_dmul>
   1e9a4:	a33f      	add	r3, pc, #252	; (adr r3, 1eaa4 <__kernel_sin+0x184>)
   1e9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e9aa:	f7fd fd4d 	bl	1c448 <__aeabi_dsub>
   1e9ae:	4632      	mov	r2, r6
   1e9b0:	463b      	mov	r3, r7
   1e9b2:	f7fd ff01 	bl	1c7b8 <__aeabi_dmul>
   1e9b6:	a33d      	add	r3, pc, #244	; (adr r3, 1eaac <__kernel_sin+0x18c>)
   1e9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e9bc:	f7fd fd46 	bl	1c44c <__adddf3>
   1e9c0:	e9cd 0100 	strd	r0, r1, [sp]
   1e9c4:	f1ba 0f00 	cmp.w	sl, #0
   1e9c8:	d037      	beq.n	1ea3a <__kernel_sin+0x11a>
   1e9ca:	2200      	movs	r2, #0
   1e9cc:	4b2e      	ldr	r3, [pc, #184]	; (1ea88 <__kernel_sin+0x168>)
   1e9ce:	ec51 0b18 	vmov	r0, r1, d8
   1e9d2:	f7fd fef1 	bl	1c7b8 <__aeabi_dmul>
   1e9d6:	4682      	mov	sl, r0
   1e9d8:	468b      	mov	fp, r1
   1e9da:	4640      	mov	r0, r8
   1e9dc:	4649      	mov	r1, r9
   1e9de:	e9dd 2300 	ldrd	r2, r3, [sp]
   1e9e2:	f7fd fee9 	bl	1c7b8 <__aeabi_dmul>
   1e9e6:	4602      	mov	r2, r0
   1e9e8:	460b      	mov	r3, r1
   1e9ea:	4650      	mov	r0, sl
   1e9ec:	4659      	mov	r1, fp
   1e9ee:	f7fd fd2b 	bl	1c448 <__aeabi_dsub>
   1e9f2:	4632      	mov	r2, r6
   1e9f4:	463b      	mov	r3, r7
   1e9f6:	f7fd fedf 	bl	1c7b8 <__aeabi_dmul>
   1e9fa:	ec53 2b18 	vmov	r2, r3, d8
   1e9fe:	f7fd fd23 	bl	1c448 <__aeabi_dsub>
   1ea02:	4606      	mov	r6, r0
   1ea04:	460f      	mov	r7, r1
   1ea06:	4640      	mov	r0, r8
   1ea08:	4649      	mov	r1, r9
   1ea0a:	a31d      	add	r3, pc, #116	; (adr r3, 1ea80 <__kernel_sin+0x160>)
   1ea0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ea10:	f7fd fed2 	bl	1c7b8 <__aeabi_dmul>
   1ea14:	4602      	mov	r2, r0
   1ea16:	460b      	mov	r3, r1
   1ea18:	4630      	mov	r0, r6
   1ea1a:	4639      	mov	r1, r7
   1ea1c:	f7fd fd16 	bl	1c44c <__adddf3>
   1ea20:	4602      	mov	r2, r0
   1ea22:	460b      	mov	r3, r1
   1ea24:	4620      	mov	r0, r4
   1ea26:	4629      	mov	r1, r5
   1ea28:	f7fd fd0e 	bl	1c448 <__aeabi_dsub>
   1ea2c:	ec41 0b10 	vmov	d0, r0, r1
   1ea30:	b003      	add	sp, #12
   1ea32:	ecbd 8b02 	vpop	{d8}
   1ea36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea3a:	4602      	mov	r2, r0
   1ea3c:	460b      	mov	r3, r1
   1ea3e:	4630      	mov	r0, r6
   1ea40:	4639      	mov	r1, r7
   1ea42:	f7fd feb9 	bl	1c7b8 <__aeabi_dmul>
   1ea46:	a30e      	add	r3, pc, #56	; (adr r3, 1ea80 <__kernel_sin+0x160>)
   1ea48:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ea4c:	f7fd fcfc 	bl	1c448 <__aeabi_dsub>
   1ea50:	4642      	mov	r2, r8
   1ea52:	464b      	mov	r3, r9
   1ea54:	f7fd feb0 	bl	1c7b8 <__aeabi_dmul>
   1ea58:	4622      	mov	r2, r4
   1ea5a:	462b      	mov	r3, r5
   1ea5c:	f7fd fcf6 	bl	1c44c <__adddf3>
   1ea60:	ec41 0b10 	vmov	d0, r0, r1
   1ea64:	b003      	add	sp, #12
   1ea66:	ecbd 8b02 	vpop	{d8}
   1ea6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea6e:	ec45 4b10 	vmov	d0, r4, r5
   1ea72:	b003      	add	sp, #12
   1ea74:	ecbd 8b02 	vpop	{d8}
   1ea78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea7c:	f3af 8000 	nop.w
   1ea80:	55555549 	.word	0x55555549
   1ea84:	3fc55555 	.word	0x3fc55555
   1ea88:	3fe00000 	.word	0x3fe00000
   1ea8c:	5acfd57c 	.word	0x5acfd57c
   1ea90:	3de5d93a 	.word	0x3de5d93a
   1ea94:	8a2b9ceb 	.word	0x8a2b9ceb
   1ea98:	3e5ae5e6 	.word	0x3e5ae5e6
   1ea9c:	57b1fe7d 	.word	0x57b1fe7d
   1eaa0:	3ec71de3 	.word	0x3ec71de3
   1eaa4:	19c161d5 	.word	0x19c161d5
   1eaa8:	3f2a01a0 	.word	0x3f2a01a0
   1eaac:	1110f8a6 	.word	0x1110f8a6
   1eab0:	3f811111 	.word	0x3f811111
   1eab4:	00000000 	.word	0x00000000

0001eab8 <floor>:
   1eab8:	ec51 0b10 	vmov	r0, r1, d0
   1eabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eabe:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1eac2:	460c      	mov	r4, r1
   1eac4:	ee10 6a10 	vmov	r6, s0
   1eac8:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   1eacc:	2d13      	cmp	r5, #19
   1eace:	dc30      	bgt.n	1eb32 <floor+0x7a>
   1ead0:	2d00      	cmp	r5, #0
   1ead2:	db1e      	blt.n	1eb12 <floor+0x5a>
   1ead4:	4f38      	ldr	r7, [pc, #224]	; (1ebb8 <floor+0x100>)
   1ead6:	412f      	asrs	r7, r5
   1ead8:	ea07 0301 	and.w	r3, r7, r1
   1eadc:	4303      	orrs	r3, r0
   1eade:	d02d      	beq.n	1eb3c <floor+0x84>
   1eae0:	a333      	add	r3, pc, #204	; (adr r3, 1ebb0 <floor+0xf8>)
   1eae2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1eae6:	f7fd fcb1 	bl	1c44c <__adddf3>
   1eaea:	2200      	movs	r2, #0
   1eaec:	2300      	movs	r3, #0
   1eaee:	f7fe f8f3 	bl	1ccd8 <__aeabi_dcmpgt>
   1eaf2:	b148      	cbz	r0, 1eb08 <floor+0x50>
   1eaf4:	2c00      	cmp	r4, #0
   1eaf6:	da04      	bge.n	1eb02 <floor+0x4a>
   1eaf8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1eafc:	fa43 f505 	asr.w	r5, r3, r5
   1eb00:	442c      	add	r4, r5
   1eb02:	ea24 0407 	bic.w	r4, r4, r7
   1eb06:	2600      	movs	r6, #0
   1eb08:	4623      	mov	r3, r4
   1eb0a:	4632      	mov	r2, r6
   1eb0c:	ec43 2b10 	vmov	d0, r2, r3
   1eb10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eb12:	a327      	add	r3, pc, #156	; (adr r3, 1ebb0 <floor+0xf8>)
   1eb14:	e9d3 2300 	ldrd	r2, r3, [r3]
   1eb18:	f7fd fc98 	bl	1c44c <__adddf3>
   1eb1c:	2200      	movs	r2, #0
   1eb1e:	2300      	movs	r3, #0
   1eb20:	f7fe f8da 	bl	1ccd8 <__aeabi_dcmpgt>
   1eb24:	2800      	cmp	r0, #0
   1eb26:	d0ef      	beq.n	1eb08 <floor+0x50>
   1eb28:	2c00      	cmp	r4, #0
   1eb2a:	db29      	blt.n	1eb80 <floor+0xc8>
   1eb2c:	2600      	movs	r6, #0
   1eb2e:	4634      	mov	r4, r6
   1eb30:	e7ea      	b.n	1eb08 <floor+0x50>
   1eb32:	2d33      	cmp	r5, #51	; 0x33
   1eb34:	dd05      	ble.n	1eb42 <floor+0x8a>
   1eb36:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1eb3a:	d019      	beq.n	1eb70 <floor+0xb8>
   1eb3c:	ec41 0b10 	vmov	d0, r0, r1
   1eb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eb42:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   1eb46:	f04f 37ff 	mov.w	r7, #4294967295
   1eb4a:	40df      	lsrs	r7, r3
   1eb4c:	4207      	tst	r7, r0
   1eb4e:	d0f5      	beq.n	1eb3c <floor+0x84>
   1eb50:	a317      	add	r3, pc, #92	; (adr r3, 1ebb0 <floor+0xf8>)
   1eb52:	e9d3 2300 	ldrd	r2, r3, [r3]
   1eb56:	f7fd fc79 	bl	1c44c <__adddf3>
   1eb5a:	2200      	movs	r2, #0
   1eb5c:	2300      	movs	r3, #0
   1eb5e:	f7fe f8bb 	bl	1ccd8 <__aeabi_dcmpgt>
   1eb62:	2800      	cmp	r0, #0
   1eb64:	d0d0      	beq.n	1eb08 <floor+0x50>
   1eb66:	2c00      	cmp	r4, #0
   1eb68:	db13      	blt.n	1eb92 <floor+0xda>
   1eb6a:	ea26 0607 	bic.w	r6, r6, r7
   1eb6e:	e7cb      	b.n	1eb08 <floor+0x50>
   1eb70:	ee10 2a10 	vmov	r2, s0
   1eb74:	460b      	mov	r3, r1
   1eb76:	f7fd fc69 	bl	1c44c <__adddf3>
   1eb7a:	ec41 0b10 	vmov	d0, r0, r1
   1eb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eb80:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1eb84:	4a0d      	ldr	r2, [pc, #52]	; (1ebbc <floor+0x104>)
   1eb86:	4333      	orrs	r3, r6
   1eb88:	2600      	movs	r6, #0
   1eb8a:	42b3      	cmp	r3, r6
   1eb8c:	bf18      	it	ne
   1eb8e:	4614      	movne	r4, r2
   1eb90:	e7ba      	b.n	1eb08 <floor+0x50>
   1eb92:	2d14      	cmp	r5, #20
   1eb94:	d008      	beq.n	1eba8 <floor+0xf0>
   1eb96:	2301      	movs	r3, #1
   1eb98:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   1eb9c:	fa03 f505 	lsl.w	r5, r3, r5
   1eba0:	19ae      	adds	r6, r5, r6
   1eba2:	bf28      	it	cs
   1eba4:	18e4      	addcs	r4, r4, r3
   1eba6:	e7e0      	b.n	1eb6a <floor+0xb2>
   1eba8:	3401      	adds	r4, #1
   1ebaa:	e7de      	b.n	1eb6a <floor+0xb2>
   1ebac:	f3af 8000 	nop.w
   1ebb0:	8800759c 	.word	0x8800759c
   1ebb4:	7e37e43c 	.word	0x7e37e43c
   1ebb8:	000fffff 	.word	0x000fffff
   1ebbc:	bff00000 	.word	0xbff00000

0001ebc0 <scalbn>:
   1ebc0:	b538      	push	{r3, r4, r5, lr}
   1ebc2:	ec53 2b10 	vmov	r2, r3, d0
   1ebc6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   1ebca:	461c      	mov	r4, r3
   1ebcc:	4605      	mov	r5, r0
   1ebce:	bb81      	cbnz	r1, 1ec32 <scalbn+0x72>
   1ebd0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   1ebd4:	ee10 1a10 	vmov	r1, s0
   1ebd8:	4321      	orrs	r1, r4
   1ebda:	d029      	beq.n	1ec30 <scalbn+0x70>
   1ebdc:	4c3c      	ldr	r4, [pc, #240]	; (1ecd0 <scalbn+0x110>)
   1ebde:	4619      	mov	r1, r3
   1ebe0:	2200      	movs	r2, #0
   1ebe2:	4b3c      	ldr	r3, [pc, #240]	; (1ecd4 <scalbn+0x114>)
   1ebe4:	ee10 0a10 	vmov	r0, s0
   1ebe8:	f7fd fde6 	bl	1c7b8 <__aeabi_dmul>
   1ebec:	42a5      	cmp	r5, r4
   1ebee:	4602      	mov	r2, r0
   1ebf0:	460b      	mov	r3, r1
   1ebf2:	db16      	blt.n	1ec22 <scalbn+0x62>
   1ebf4:	460c      	mov	r4, r1
   1ebf6:	f3c1 510a 	ubfx	r1, r1, #20, #11
   1ebfa:	3936      	subs	r1, #54	; 0x36
   1ebfc:	4429      	add	r1, r5
   1ebfe:	f240 70fe 	movw	r0, #2046	; 0x7fe
   1ec02:	4281      	cmp	r1, r0
   1ec04:	dc21      	bgt.n	1ec4a <scalbn+0x8a>
   1ec06:	2900      	cmp	r1, #0
   1ec08:	dc45      	bgt.n	1ec96 <scalbn+0xd6>
   1ec0a:	f111 0f35 	cmn.w	r1, #53	; 0x35
   1ec0e:	da34      	bge.n	1ec7a <scalbn+0xba>
   1ec10:	f24c 3150 	movw	r1, #50000	; 0xc350
   1ec14:	428d      	cmp	r5, r1
   1ec16:	dc18      	bgt.n	1ec4a <scalbn+0x8a>
   1ec18:	2b00      	cmp	r3, #0
   1ec1a:	a125      	add	r1, pc, #148	; (adr r1, 1ecb0 <scalbn+0xf0>)
   1ec1c:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ec20:	db40      	blt.n	1eca4 <scalbn+0xe4>
   1ec22:	a323      	add	r3, pc, #140	; (adr r3, 1ecb0 <scalbn+0xf0>)
   1ec24:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ec28:	f7fd fdc6 	bl	1c7b8 <__aeabi_dmul>
   1ec2c:	ec41 0b10 	vmov	d0, r0, r1
   1ec30:	bd38      	pop	{r3, r4, r5, pc}
   1ec32:	f240 70ff 	movw	r0, #2047	; 0x7ff
   1ec36:	4281      	cmp	r1, r0
   1ec38:	d1e0      	bne.n	1ebfc <scalbn+0x3c>
   1ec3a:	ee10 0a10 	vmov	r0, s0
   1ec3e:	4619      	mov	r1, r3
   1ec40:	f7fd fc04 	bl	1c44c <__adddf3>
   1ec44:	ec41 0b10 	vmov	d0, r0, r1
   1ec48:	bd38      	pop	{r3, r4, r5, pc}
   1ec4a:	2b00      	cmp	r3, #0
   1ec4c:	a11a      	add	r1, pc, #104	; (adr r1, 1ecb8 <scalbn+0xf8>)
   1ec4e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ec52:	db07      	blt.n	1ec64 <scalbn+0xa4>
   1ec54:	a318      	add	r3, pc, #96	; (adr r3, 1ecb8 <scalbn+0xf8>)
   1ec56:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ec5a:	f7fd fdad 	bl	1c7b8 <__aeabi_dmul>
   1ec5e:	ec41 0b10 	vmov	d0, r0, r1
   1ec62:	bd38      	pop	{r3, r4, r5, pc}
   1ec64:	a116      	add	r1, pc, #88	; (adr r1, 1ecc0 <scalbn+0x100>)
   1ec66:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ec6a:	a313      	add	r3, pc, #76	; (adr r3, 1ecb8 <scalbn+0xf8>)
   1ec6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ec70:	f7fd fda2 	bl	1c7b8 <__aeabi_dmul>
   1ec74:	ec41 0b10 	vmov	d0, r0, r1
   1ec78:	e7f3      	b.n	1ec62 <scalbn+0xa2>
   1ec7a:	4817      	ldr	r0, [pc, #92]	; (1ecd8 <scalbn+0x118>)
   1ec7c:	3136      	adds	r1, #54	; 0x36
   1ec7e:	4020      	ands	r0, r4
   1ec80:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1ec84:	4610      	mov	r0, r2
   1ec86:	2200      	movs	r2, #0
   1ec88:	4619      	mov	r1, r3
   1ec8a:	4b14      	ldr	r3, [pc, #80]	; (1ecdc <scalbn+0x11c>)
   1ec8c:	f7fd fd94 	bl	1c7b8 <__aeabi_dmul>
   1ec90:	ec41 0b10 	vmov	d0, r0, r1
   1ec94:	bd38      	pop	{r3, r4, r5, pc}
   1ec96:	4810      	ldr	r0, [pc, #64]	; (1ecd8 <scalbn+0x118>)
   1ec98:	4020      	ands	r0, r4
   1ec9a:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1ec9e:	ec43 2b10 	vmov	d0, r2, r3
   1eca2:	bd38      	pop	{r3, r4, r5, pc}
   1eca4:	a108      	add	r1, pc, #32	; (adr r1, 1ecc8 <scalbn+0x108>)
   1eca6:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ecaa:	e7ba      	b.n	1ec22 <scalbn+0x62>
   1ecac:	f3af 8000 	nop.w
   1ecb0:	c2f8f359 	.word	0xc2f8f359
   1ecb4:	01a56e1f 	.word	0x01a56e1f
   1ecb8:	8800759c 	.word	0x8800759c
   1ecbc:	7e37e43c 	.word	0x7e37e43c
   1ecc0:	8800759c 	.word	0x8800759c
   1ecc4:	fe37e43c 	.word	0xfe37e43c
   1ecc8:	c2f8f359 	.word	0xc2f8f359
   1eccc:	81a56e1f 	.word	0x81a56e1f
   1ecd0:	ffff3cb0 	.word	0xffff3cb0
   1ecd4:	43500000 	.word	0x43500000
   1ecd8:	800fffff 	.word	0x800fffff
   1ecdc:	3c900000 	.word	0x3c900000

0001ece0 <_strtod_l>:
   1ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ece4:	461f      	mov	r7, r3
   1ece6:	b0a1      	sub	sp, #132	; 0x84
   1ece8:	2300      	movs	r3, #0
   1ecea:	460e      	mov	r6, r1
   1ecec:	9004      	str	r0, [sp, #16]
   1ecee:	f04f 0a00 	mov.w	sl, #0
   1ecf2:	931c      	str	r3, [sp, #112]	; 0x70
   1ecf4:	f04f 0b00 	mov.w	fp, #0
   1ecf8:	4b97      	ldr	r3, [pc, #604]	; (1ef58 <_strtod_l+0x278>)
   1ecfa:	9217      	str	r2, [sp, #92]	; 0x5c
   1ecfc:	681b      	ldr	r3, [r3, #0]
   1ecfe:	4618      	mov	r0, r3
   1ed00:	9305      	str	r3, [sp, #20]
   1ed02:	f7fe fa0f 	bl	1d124 <strlen>
   1ed06:	4604      	mov	r4, r0
   1ed08:	961b      	str	r6, [sp, #108]	; 0x6c
   1ed0a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1ed0c:	7813      	ldrb	r3, [r2, #0]
   1ed0e:	2b0d      	cmp	r3, #13
   1ed10:	d832      	bhi.n	1ed78 <_strtod_l+0x98>
   1ed12:	2b09      	cmp	r3, #9
   1ed14:	d236      	bcs.n	1ed84 <_strtod_l+0xa4>
   1ed16:	2b00      	cmp	r3, #0
   1ed18:	d03e      	beq.n	1ed98 <_strtod_l+0xb8>
   1ed1a:	2300      	movs	r3, #0
   1ed1c:	930c      	str	r3, [sp, #48]	; 0x30
   1ed1e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
   1ed20:	782b      	ldrb	r3, [r5, #0]
   1ed22:	2b30      	cmp	r3, #48	; 0x30
   1ed24:	f040 80a9 	bne.w	1ee7a <_strtod_l+0x19a>
   1ed28:	786b      	ldrb	r3, [r5, #1]
   1ed2a:	2b58      	cmp	r3, #88	; 0x58
   1ed2c:	d001      	beq.n	1ed32 <_strtod_l+0x52>
   1ed2e:	2b78      	cmp	r3, #120	; 0x78
   1ed30:	d167      	bne.n	1ee02 <_strtod_l+0x122>
   1ed32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ed34:	a91b      	add	r1, sp, #108	; 0x6c
   1ed36:	9702      	str	r7, [sp, #8]
   1ed38:	9301      	str	r3, [sp, #4]
   1ed3a:	ab1c      	add	r3, sp, #112	; 0x70
   1ed3c:	4a87      	ldr	r2, [pc, #540]	; (1ef5c <_strtod_l+0x27c>)
   1ed3e:	9300      	str	r3, [sp, #0]
   1ed40:	ab1d      	add	r3, sp, #116	; 0x74
   1ed42:	9804      	ldr	r0, [sp, #16]
   1ed44:	f01c fa0e 	bl	3b164 <__gethex>
   1ed48:	f010 0407 	ands.w	r4, r0, #7
   1ed4c:	4606      	mov	r6, r0
   1ed4e:	d005      	beq.n	1ed5c <_strtod_l+0x7c>
   1ed50:	2c06      	cmp	r4, #6
   1ed52:	d12b      	bne.n	1edac <_strtod_l+0xcc>
   1ed54:	3501      	adds	r5, #1
   1ed56:	2300      	movs	r3, #0
   1ed58:	951b      	str	r5, [sp, #108]	; 0x6c
   1ed5a:	930c      	str	r3, [sp, #48]	; 0x30
   1ed5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ed5e:	2b00      	cmp	r3, #0
   1ed60:	f040 8572 	bne.w	1f848 <_strtod_l+0xb68>
   1ed64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ed66:	b1e3      	cbz	r3, 1eda2 <_strtod_l+0xc2>
   1ed68:	4652      	mov	r2, sl
   1ed6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1ed6e:	ec43 2b10 	vmov	d0, r2, r3
   1ed72:	b021      	add	sp, #132	; 0x84
   1ed74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed78:	2b2b      	cmp	r3, #43	; 0x2b
   1ed7a:	d006      	beq.n	1ed8a <_strtod_l+0xaa>
   1ed7c:	2b2d      	cmp	r3, #45	; 0x2d
   1ed7e:	d013      	beq.n	1eda8 <_strtod_l+0xc8>
   1ed80:	2b20      	cmp	r3, #32
   1ed82:	d1ca      	bne.n	1ed1a <_strtod_l+0x3a>
   1ed84:	3201      	adds	r2, #1
   1ed86:	921b      	str	r2, [sp, #108]	; 0x6c
   1ed88:	e7bf      	b.n	1ed0a <_strtod_l+0x2a>
   1ed8a:	2300      	movs	r3, #0
   1ed8c:	930c      	str	r3, [sp, #48]	; 0x30
   1ed8e:	1c53      	adds	r3, r2, #1
   1ed90:	931b      	str	r3, [sp, #108]	; 0x6c
   1ed92:	7853      	ldrb	r3, [r2, #1]
   1ed94:	2b00      	cmp	r3, #0
   1ed96:	d1c2      	bne.n	1ed1e <_strtod_l+0x3e>
   1ed98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ed9a:	961b      	str	r6, [sp, #108]	; 0x6c
   1ed9c:	2b00      	cmp	r3, #0
   1ed9e:	f040 8551 	bne.w	1f844 <_strtod_l+0xb64>
   1eda2:	4652      	mov	r2, sl
   1eda4:	465b      	mov	r3, fp
   1eda6:	e7e2      	b.n	1ed6e <_strtod_l+0x8e>
   1eda8:	2301      	movs	r3, #1
   1edaa:	e7ef      	b.n	1ed8c <_strtod_l+0xac>
   1edac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1edae:	b13a      	cbz	r2, 1edc0 <_strtod_l+0xe0>
   1edb0:	2135      	movs	r1, #53	; 0x35
   1edb2:	a81e      	add	r0, sp, #120	; 0x78
   1edb4:	f020 ff33 	bl	3fc1e <__copybits>
   1edb8:	991c      	ldr	r1, [sp, #112]	; 0x70
   1edba:	9804      	ldr	r0, [sp, #16]
   1edbc:	f020 fc67 	bl	3f68e <_Bfree>
   1edc0:	3c01      	subs	r4, #1
   1edc2:	2c04      	cmp	r4, #4
   1edc4:	d806      	bhi.n	1edd4 <_strtod_l+0xf4>
   1edc6:	e8df f004 	tbb	[pc, r4]
   1edca:	030a      	.short	0x030a
   1edcc:	1714      	.short	0x1714
   1edce:	0a          	.byte	0x0a
   1edcf:	00          	.byte	0x00
   1edd0:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
   1edd4:	0731      	lsls	r1, r6, #28
   1edd6:	d5c1      	bpl.n	1ed5c <_strtod_l+0x7c>
   1edd8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1eddc:	e7be      	b.n	1ed5c <_strtod_l+0x7c>
   1edde:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
   1ede2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1ede4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1ede8:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1edec:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   1edf0:	e7f0      	b.n	1edd4 <_strtod_l+0xf4>
   1edf2:	f8df b16c 	ldr.w	fp, [pc, #364]	; 1ef60 <_strtod_l+0x280>
   1edf6:	e7ed      	b.n	1edd4 <_strtod_l+0xf4>
   1edf8:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   1edfc:	f04f 3aff 	mov.w	sl, #4294967295
   1ee00:	e7e8      	b.n	1edd4 <_strtod_l+0xf4>
   1ee02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ee04:	1c5a      	adds	r2, r3, #1
   1ee06:	921b      	str	r2, [sp, #108]	; 0x6c
   1ee08:	785b      	ldrb	r3, [r3, #1]
   1ee0a:	2b30      	cmp	r3, #48	; 0x30
   1ee0c:	d0f9      	beq.n	1ee02 <_strtod_l+0x122>
   1ee0e:	2b00      	cmp	r3, #0
   1ee10:	d0a4      	beq.n	1ed5c <_strtod_l+0x7c>
   1ee12:	2301      	movs	r3, #1
   1ee14:	f04f 0900 	mov.w	r9, #0
   1ee18:	9306      	str	r3, [sp, #24]
   1ee1a:	220a      	movs	r2, #10
   1ee1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ee1e:	46c8      	mov	r8, r9
   1ee20:	f8cd 901c 	str.w	r9, [sp, #28]
   1ee24:	9309      	str	r3, [sp, #36]	; 0x24
   1ee26:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1ee28:	7805      	ldrb	r5, [r0, #0]
   1ee2a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   1ee2e:	b2d9      	uxtb	r1, r3
   1ee30:	2909      	cmp	r1, #9
   1ee32:	d924      	bls.n	1ee7e <_strtod_l+0x19e>
   1ee34:	4622      	mov	r2, r4
   1ee36:	9905      	ldr	r1, [sp, #20]
   1ee38:	f020 f940 	bl	3f0bc <strncmp>
   1ee3c:	b378      	cbz	r0, 1ee9e <_strtod_l+0x1be>
   1ee3e:	2000      	movs	r0, #0
   1ee40:	462b      	mov	r3, r5
   1ee42:	4644      	mov	r4, r8
   1ee44:	4602      	mov	r2, r0
   1ee46:	9005      	str	r0, [sp, #20]
   1ee48:	2b65      	cmp	r3, #101	; 0x65
   1ee4a:	d001      	beq.n	1ee50 <_strtod_l+0x170>
   1ee4c:	2b45      	cmp	r3, #69	; 0x45
   1ee4e:	d112      	bne.n	1ee76 <_strtod_l+0x196>
   1ee50:	b91c      	cbnz	r4, 1ee5a <_strtod_l+0x17a>
   1ee52:	9b06      	ldr	r3, [sp, #24]
   1ee54:	4303      	orrs	r3, r0
   1ee56:	d09f      	beq.n	1ed98 <_strtod_l+0xb8>
   1ee58:	2400      	movs	r4, #0
   1ee5a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   1ee5c:	1c73      	adds	r3, r6, #1
   1ee5e:	931b      	str	r3, [sp, #108]	; 0x6c
   1ee60:	7873      	ldrb	r3, [r6, #1]
   1ee62:	2b2b      	cmp	r3, #43	; 0x2b
   1ee64:	d071      	beq.n	1ef4a <_strtod_l+0x26a>
   1ee66:	2b2d      	cmp	r3, #45	; 0x2d
   1ee68:	d074      	beq.n	1ef54 <_strtod_l+0x274>
   1ee6a:	2700      	movs	r7, #0
   1ee6c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1ee70:	2909      	cmp	r1, #9
   1ee72:	d97b      	bls.n	1ef6c <_strtod_l+0x28c>
   1ee74:	961b      	str	r6, [sp, #108]	; 0x6c
   1ee76:	2500      	movs	r5, #0
   1ee78:	e098      	b.n	1efac <_strtod_l+0x2cc>
   1ee7a:	2300      	movs	r3, #0
   1ee7c:	e7ca      	b.n	1ee14 <_strtod_l+0x134>
   1ee7e:	f1b8 0f08 	cmp.w	r8, #8
   1ee82:	f100 0001 	add.w	r0, r0, #1
   1ee86:	f108 0801 	add.w	r8, r8, #1
   1ee8a:	bfd4      	ite	le
   1ee8c:	9907      	ldrle	r1, [sp, #28]
   1ee8e:	fb02 3909 	mlagt	r9, r2, r9, r3
   1ee92:	901b      	str	r0, [sp, #108]	; 0x6c
   1ee94:	bfdc      	itt	le
   1ee96:	fb02 3301 	mlale	r3, r2, r1, r3
   1ee9a:	9307      	strle	r3, [sp, #28]
   1ee9c:	e7c3      	b.n	1ee26 <_strtod_l+0x146>
   1ee9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1eea0:	191a      	adds	r2, r3, r4
   1eea2:	921b      	str	r2, [sp, #108]	; 0x6c
   1eea4:	5d1b      	ldrb	r3, [r3, r4]
   1eea6:	f1b8 0f00 	cmp.w	r8, #0
   1eeaa:	d035      	beq.n	1ef18 <_strtod_l+0x238>
   1eeac:	4644      	mov	r4, r8
   1eeae:	9005      	str	r0, [sp, #20]
   1eeb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1eeb4:	2a09      	cmp	r2, #9
   1eeb6:	d912      	bls.n	1eede <_strtod_l+0x1fe>
   1eeb8:	2201      	movs	r2, #1
   1eeba:	e7c5      	b.n	1ee48 <_strtod_l+0x168>
   1eebc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1eebe:	3001      	adds	r0, #1
   1eec0:	1c5a      	adds	r2, r3, #1
   1eec2:	921b      	str	r2, [sp, #108]	; 0x6c
   1eec4:	785b      	ldrb	r3, [r3, #1]
   1eec6:	2b30      	cmp	r3, #48	; 0x30
   1eec8:	d0f8      	beq.n	1eebc <_strtod_l+0x1dc>
   1eeca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   1eece:	2a08      	cmp	r2, #8
   1eed0:	f200 84bf 	bhi.w	1f852 <_strtod_l+0xb72>
   1eed4:	9005      	str	r0, [sp, #20]
   1eed6:	2000      	movs	r0, #0
   1eed8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1eeda:	4604      	mov	r4, r0
   1eedc:	9209      	str	r2, [sp, #36]	; 0x24
   1eede:	3b30      	subs	r3, #48	; 0x30
   1eee0:	f100 0201 	add.w	r2, r0, #1
   1eee4:	d012      	beq.n	1ef0c <_strtod_l+0x22c>
   1eee6:	9905      	ldr	r1, [sp, #20]
   1eee8:	1905      	adds	r5, r0, r4
   1eeea:	4411      	add	r1, r2
   1eeec:	4622      	mov	r2, r4
   1eeee:	9105      	str	r1, [sp, #20]
   1eef0:	210a      	movs	r1, #10
   1eef2:	42aa      	cmp	r2, r5
   1eef4:	d112      	bne.n	1ef1c <_strtod_l+0x23c>
   1eef6:	1822      	adds	r2, r4, r0
   1eef8:	3401      	adds	r4, #1
   1eefa:	2a08      	cmp	r2, #8
   1eefc:	4404      	add	r4, r0
   1eefe:	dc1a      	bgt.n	1ef36 <_strtod_l+0x256>
   1ef00:	9907      	ldr	r1, [sp, #28]
   1ef02:	220a      	movs	r2, #10
   1ef04:	fb02 3301 	mla	r3, r2, r1, r3
   1ef08:	9307      	str	r3, [sp, #28]
   1ef0a:	2200      	movs	r2, #0
   1ef0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ef0e:	4610      	mov	r0, r2
   1ef10:	1c59      	adds	r1, r3, #1
   1ef12:	911b      	str	r1, [sp, #108]	; 0x6c
   1ef14:	785b      	ldrb	r3, [r3, #1]
   1ef16:	e7cb      	b.n	1eeb0 <_strtod_l+0x1d0>
   1ef18:	4640      	mov	r0, r8
   1ef1a:	e7d4      	b.n	1eec6 <_strtod_l+0x1e6>
   1ef1c:	2a08      	cmp	r2, #8
   1ef1e:	dc04      	bgt.n	1ef2a <_strtod_l+0x24a>
   1ef20:	9f07      	ldr	r7, [sp, #28]
   1ef22:	434f      	muls	r7, r1
   1ef24:	9707      	str	r7, [sp, #28]
   1ef26:	3201      	adds	r2, #1
   1ef28:	e7e3      	b.n	1eef2 <_strtod_l+0x212>
   1ef2a:	1c57      	adds	r7, r2, #1
   1ef2c:	2f10      	cmp	r7, #16
   1ef2e:	bfd8      	it	le
   1ef30:	fb01 f909 	mulle.w	r9, r1, r9
   1ef34:	e7f7      	b.n	1ef26 <_strtod_l+0x246>
   1ef36:	2c10      	cmp	r4, #16
   1ef38:	bfdc      	itt	le
   1ef3a:	220a      	movle	r2, #10
   1ef3c:	fb02 3909 	mlale	r9, r2, r9, r3
   1ef40:	e7e3      	b.n	1ef0a <_strtod_l+0x22a>
   1ef42:	2300      	movs	r3, #0
   1ef44:	2201      	movs	r2, #1
   1ef46:	9305      	str	r3, [sp, #20]
   1ef48:	e783      	b.n	1ee52 <_strtod_l+0x172>
   1ef4a:	2700      	movs	r7, #0
   1ef4c:	1cb3      	adds	r3, r6, #2
   1ef4e:	931b      	str	r3, [sp, #108]	; 0x6c
   1ef50:	78b3      	ldrb	r3, [r6, #2]
   1ef52:	e78b      	b.n	1ee6c <_strtod_l+0x18c>
   1ef54:	2701      	movs	r7, #1
   1ef56:	e7f9      	b.n	1ef4c <_strtod_l+0x26c>
   1ef58:	00041258 	.word	0x00041258
   1ef5c:	000411d0 	.word	0x000411d0
   1ef60:	7ff00000 	.word	0x7ff00000
   1ef64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ef66:	1c59      	adds	r1, r3, #1
   1ef68:	911b      	str	r1, [sp, #108]	; 0x6c
   1ef6a:	785b      	ldrb	r3, [r3, #1]
   1ef6c:	2b30      	cmp	r3, #48	; 0x30
   1ef6e:	d0f9      	beq.n	1ef64 <_strtod_l+0x284>
   1ef70:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   1ef74:	2908      	cmp	r1, #8
   1ef76:	f63f af7e 	bhi.w	1ee76 <_strtod_l+0x196>
   1ef7a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
   1ef7e:	f04f 0e0a 	mov.w	lr, #10
   1ef82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ef84:	9308      	str	r3, [sp, #32]
   1ef86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ef88:	1c59      	adds	r1, r3, #1
   1ef8a:	911b      	str	r1, [sp, #108]	; 0x6c
   1ef8c:	785b      	ldrb	r3, [r3, #1]
   1ef8e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
   1ef92:	2d09      	cmp	r5, #9
   1ef94:	d92e      	bls.n	1eff4 <_strtod_l+0x314>
   1ef96:	9d08      	ldr	r5, [sp, #32]
   1ef98:	1b49      	subs	r1, r1, r5
   1ef9a:	f644 651f 	movw	r5, #19999	; 0x4e1f
   1ef9e:	2908      	cmp	r1, #8
   1efa0:	dc02      	bgt.n	1efa8 <_strtod_l+0x2c8>
   1efa2:	4565      	cmp	r5, ip
   1efa4:	bfa8      	it	ge
   1efa6:	4665      	movge	r5, ip
   1efa8:	b107      	cbz	r7, 1efac <_strtod_l+0x2cc>
   1efaa:	426d      	negs	r5, r5
   1efac:	2c00      	cmp	r4, #0
   1efae:	d14b      	bne.n	1f048 <_strtod_l+0x368>
   1efb0:	9906      	ldr	r1, [sp, #24]
   1efb2:	4301      	orrs	r1, r0
   1efb4:	f47f aed2 	bne.w	1ed5c <_strtod_l+0x7c>
   1efb8:	2a00      	cmp	r2, #0
   1efba:	f47f aeed 	bne.w	1ed98 <_strtod_l+0xb8>
   1efbe:	2b4e      	cmp	r3, #78	; 0x4e
   1efc0:	d022      	beq.n	1f008 <_strtod_l+0x328>
   1efc2:	dc1c      	bgt.n	1effe <_strtod_l+0x31e>
   1efc4:	2b49      	cmp	r3, #73	; 0x49
   1efc6:	f47f aee7 	bne.w	1ed98 <_strtod_l+0xb8>
   1efca:	499a      	ldr	r1, [pc, #616]	; (1f234 <_strtod_l+0x554>)
   1efcc:	a81b      	add	r0, sp, #108	; 0x6c
   1efce:	f020 fa33 	bl	3f438 <__match>
   1efd2:	2800      	cmp	r0, #0
   1efd4:	f43f aee0 	beq.w	1ed98 <_strtod_l+0xb8>
   1efd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1efda:	a81b      	add	r0, sp, #108	; 0x6c
   1efdc:	4996      	ldr	r1, [pc, #600]	; (1f238 <_strtod_l+0x558>)
   1efde:	3b01      	subs	r3, #1
   1efe0:	931b      	str	r3, [sp, #108]	; 0x6c
   1efe2:	f020 fa29 	bl	3f438 <__match>
   1efe6:	b910      	cbnz	r0, 1efee <_strtod_l+0x30e>
   1efe8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1efea:	3301      	adds	r3, #1
   1efec:	931b      	str	r3, [sp, #108]	; 0x6c
   1efee:	f8df b260 	ldr.w	fp, [pc, #608]	; 1f250 <_strtod_l+0x570>
   1eff2:	e6b3      	b.n	1ed5c <_strtod_l+0x7c>
   1eff4:	fb0e 3c0c 	mla	ip, lr, ip, r3
   1eff8:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
   1effc:	e7c3      	b.n	1ef86 <_strtod_l+0x2a6>
   1effe:	2b69      	cmp	r3, #105	; 0x69
   1f000:	d0e3      	beq.n	1efca <_strtod_l+0x2ea>
   1f002:	2b6e      	cmp	r3, #110	; 0x6e
   1f004:	f47f aec8 	bne.w	1ed98 <_strtod_l+0xb8>
   1f008:	498c      	ldr	r1, [pc, #560]	; (1f23c <_strtod_l+0x55c>)
   1f00a:	a81b      	add	r0, sp, #108	; 0x6c
   1f00c:	f020 fa14 	bl	3f438 <__match>
   1f010:	2800      	cmp	r0, #0
   1f012:	f43f aec1 	beq.w	1ed98 <_strtod_l+0xb8>
   1f016:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f018:	781b      	ldrb	r3, [r3, #0]
   1f01a:	2b28      	cmp	r3, #40	; 0x28
   1f01c:	d10e      	bne.n	1f03c <_strtod_l+0x35c>
   1f01e:	aa1e      	add	r2, sp, #120	; 0x78
   1f020:	4987      	ldr	r1, [pc, #540]	; (1f240 <_strtod_l+0x560>)
   1f022:	a81b      	add	r0, sp, #108	; 0x6c
   1f024:	f020 fa1c 	bl	3f460 <__hexnan>
   1f028:	2805      	cmp	r0, #5
   1f02a:	d107      	bne.n	1f03c <_strtod_l+0x35c>
   1f02c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1f02e:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
   1f032:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   1f036:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   1f03a:	e68f      	b.n	1ed5c <_strtod_l+0x7c>
   1f03c:	4881      	ldr	r0, [pc, #516]	; (1f244 <_strtod_l+0x564>)
   1f03e:	f001 f9c7 	bl	203d0 <nan>
   1f042:	ec5b ab10 	vmov	sl, fp, d0
   1f046:	e689      	b.n	1ed5c <_strtod_l+0x7c>
   1f048:	9b05      	ldr	r3, [sp, #20]
   1f04a:	f1b8 0f00 	cmp.w	r8, #0
   1f04e:	bf08      	it	eq
   1f050:	46a0      	moveq	r8, r4
   1f052:	2c10      	cmp	r4, #16
   1f054:	9807      	ldr	r0, [sp, #28]
   1f056:	eba5 0303 	sub.w	r3, r5, r3
   1f05a:	4626      	mov	r6, r4
   1f05c:	bfa8      	it	ge
   1f05e:	2610      	movge	r6, #16
   1f060:	9308      	str	r3, [sp, #32]
   1f062:	f7fd fb2f 	bl	1c6c4 <__aeabi_ui2d>
   1f066:	2c09      	cmp	r4, #9
   1f068:	4682      	mov	sl, r0
   1f06a:	468b      	mov	fp, r1
   1f06c:	dd13      	ble.n	1f096 <_strtod_l+0x3b6>
   1f06e:	4b76      	ldr	r3, [pc, #472]	; (1f248 <_strtod_l+0x568>)
   1f070:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1f074:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1f078:	f7fd fb9e 	bl	1c7b8 <__aeabi_dmul>
   1f07c:	4682      	mov	sl, r0
   1f07e:	468b      	mov	fp, r1
   1f080:	4648      	mov	r0, r9
   1f082:	f7fd fb1f 	bl	1c6c4 <__aeabi_ui2d>
   1f086:	4602      	mov	r2, r0
   1f088:	460b      	mov	r3, r1
   1f08a:	4650      	mov	r0, sl
   1f08c:	4659      	mov	r1, fp
   1f08e:	f7fd f9dd 	bl	1c44c <__adddf3>
   1f092:	4682      	mov	sl, r0
   1f094:	468b      	mov	fp, r1
   1f096:	2c0f      	cmp	r4, #15
   1f098:	dc38      	bgt.n	1f10c <_strtod_l+0x42c>
   1f09a:	9b08      	ldr	r3, [sp, #32]
   1f09c:	2b00      	cmp	r3, #0
   1f09e:	f43f ae5d 	beq.w	1ed5c <_strtod_l+0x7c>
   1f0a2:	dd24      	ble.n	1f0ee <_strtod_l+0x40e>
   1f0a4:	2b16      	cmp	r3, #22
   1f0a6:	dc0b      	bgt.n	1f0c0 <_strtod_l+0x3e0>
   1f0a8:	4c67      	ldr	r4, [pc, #412]	; (1f248 <_strtod_l+0x568>)
   1f0aa:	4652      	mov	r2, sl
   1f0ac:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   1f0b0:	465b      	mov	r3, fp
   1f0b2:	e9d4 0100 	ldrd	r0, r1, [r4]
   1f0b6:	f7fd fb7f 	bl	1c7b8 <__aeabi_dmul>
   1f0ba:	4682      	mov	sl, r0
   1f0bc:	468b      	mov	fp, r1
   1f0be:	e64d      	b.n	1ed5c <_strtod_l+0x7c>
   1f0c0:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
   1f0c4:	9a08      	ldr	r2, [sp, #32]
   1f0c6:	4293      	cmp	r3, r2
   1f0c8:	db20      	blt.n	1f10c <_strtod_l+0x42c>
   1f0ca:	f1c4 040f 	rsb	r4, r4, #15
   1f0ce:	4d5e      	ldr	r5, [pc, #376]	; (1f248 <_strtod_l+0x568>)
   1f0d0:	4652      	mov	r2, sl
   1f0d2:	465b      	mov	r3, fp
   1f0d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
   1f0d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f0dc:	f7fd fb6c 	bl	1c7b8 <__aeabi_dmul>
   1f0e0:	9b08      	ldr	r3, [sp, #32]
   1f0e2:	1b1c      	subs	r4, r3, r4
   1f0e4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1f0e8:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f0ec:	e7e3      	b.n	1f0b6 <_strtod_l+0x3d6>
   1f0ee:	9b08      	ldr	r3, [sp, #32]
   1f0f0:	3316      	adds	r3, #22
   1f0f2:	db0b      	blt.n	1f10c <_strtod_l+0x42c>
   1f0f4:	9b05      	ldr	r3, [sp, #20]
   1f0f6:	4650      	mov	r0, sl
   1f0f8:	4a53      	ldr	r2, [pc, #332]	; (1f248 <_strtod_l+0x568>)
   1f0fa:	4659      	mov	r1, fp
   1f0fc:	1b5d      	subs	r5, r3, r5
   1f0fe:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
   1f102:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f106:	f7fd fc81 	bl	1ca0c <__aeabi_ddiv>
   1f10a:	e7d6      	b.n	1f0ba <_strtod_l+0x3da>
   1f10c:	1ba6      	subs	r6, r4, r6
   1f10e:	9b08      	ldr	r3, [sp, #32]
   1f110:	441e      	add	r6, r3
   1f112:	2e00      	cmp	r6, #0
   1f114:	dd6e      	ble.n	1f1f4 <_strtod_l+0x514>
   1f116:	f016 030f 	ands.w	r3, r6, #15
   1f11a:	d00a      	beq.n	1f132 <_strtod_l+0x452>
   1f11c:	494a      	ldr	r1, [pc, #296]	; (1f248 <_strtod_l+0x568>)
   1f11e:	4652      	mov	r2, sl
   1f120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1f124:	465b      	mov	r3, fp
   1f126:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f12a:	f7fd fb45 	bl	1c7b8 <__aeabi_dmul>
   1f12e:	4682      	mov	sl, r0
   1f130:	468b      	mov	fp, r1
   1f132:	f036 060f 	bics.w	r6, r6, #15
   1f136:	d04e      	beq.n	1f1d6 <_strtod_l+0x4f6>
   1f138:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
   1f13c:	dd23      	ble.n	1f186 <_strtod_l+0x4a6>
   1f13e:	2400      	movs	r4, #0
   1f140:	9405      	str	r4, [sp, #20]
   1f142:	9409      	str	r4, [sp, #36]	; 0x24
   1f144:	9407      	str	r4, [sp, #28]
   1f146:	2322      	movs	r3, #34	; 0x22
   1f148:	9a04      	ldr	r2, [sp, #16]
   1f14a:	f8df b104 	ldr.w	fp, [pc, #260]	; 1f250 <_strtod_l+0x570>
   1f14e:	f04f 0a00 	mov.w	sl, #0
   1f152:	6013      	str	r3, [r2, #0]
   1f154:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f156:	2b00      	cmp	r3, #0
   1f158:	f43f ae00 	beq.w	1ed5c <_strtod_l+0x7c>
   1f15c:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f15e:	9804      	ldr	r0, [sp, #16]
   1f160:	f020 fa95 	bl	3f68e <_Bfree>
   1f164:	9907      	ldr	r1, [sp, #28]
   1f166:	9804      	ldr	r0, [sp, #16]
   1f168:	f020 fa91 	bl	3f68e <_Bfree>
   1f16c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f170:	f020 fa8d 	bl	3f68e <_Bfree>
   1f174:	9909      	ldr	r1, [sp, #36]	; 0x24
   1f176:	9804      	ldr	r0, [sp, #16]
   1f178:	f020 fa89 	bl	3f68e <_Bfree>
   1f17c:	4621      	mov	r1, r4
   1f17e:	9804      	ldr	r0, [sp, #16]
   1f180:	f020 fa85 	bl	3f68e <_Bfree>
   1f184:	e5ea      	b.n	1ed5c <_strtod_l+0x7c>
   1f186:	2300      	movs	r3, #0
   1f188:	1136      	asrs	r6, r6, #4
   1f18a:	4650      	mov	r0, sl
   1f18c:	4659      	mov	r1, fp
   1f18e:	461f      	mov	r7, r3
   1f190:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1f24c <_strtod_l+0x56c>
   1f194:	2e01      	cmp	r6, #1
   1f196:	dc21      	bgt.n	1f1dc <_strtod_l+0x4fc>
   1f198:	b10b      	cbz	r3, 1f19e <_strtod_l+0x4be>
   1f19a:	4682      	mov	sl, r0
   1f19c:	468b      	mov	fp, r1
   1f19e:	4b2b      	ldr	r3, [pc, #172]	; (1f24c <_strtod_l+0x56c>)
   1f1a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   1f1a4:	4652      	mov	r2, sl
   1f1a6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   1f1aa:	465b      	mov	r3, fp
   1f1ac:	e9d7 0100 	ldrd	r0, r1, [r7]
   1f1b0:	f7fd fb02 	bl	1c7b8 <__aeabi_dmul>
   1f1b4:	4b26      	ldr	r3, [pc, #152]	; (1f250 <_strtod_l+0x570>)
   1f1b6:	460a      	mov	r2, r1
   1f1b8:	4682      	mov	sl, r0
   1f1ba:	400b      	ands	r3, r1
   1f1bc:	4925      	ldr	r1, [pc, #148]	; (1f254 <_strtod_l+0x574>)
   1f1be:	428b      	cmp	r3, r1
   1f1c0:	d8bd      	bhi.n	1f13e <_strtod_l+0x45e>
   1f1c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1f1c6:	428b      	cmp	r3, r1
   1f1c8:	bf86      	itte	hi
   1f1ca:	f8df b08c 	ldrhi.w	fp, [pc, #140]	; 1f258 <_strtod_l+0x578>
   1f1ce:	f04f 3aff 	movhi.w	sl, #4294967295
   1f1d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   1f1d6:	2300      	movs	r3, #0
   1f1d8:	9306      	str	r3, [sp, #24]
   1f1da:	e078      	b.n	1f2ce <_strtod_l+0x5ee>
   1f1dc:	07f2      	lsls	r2, r6, #31
   1f1de:	d506      	bpl.n	1f1ee <_strtod_l+0x50e>
   1f1e0:	eb09 03c7 	add.w	r3, r9, r7, lsl #3
   1f1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f1e8:	f7fd fae6 	bl	1c7b8 <__aeabi_dmul>
   1f1ec:	2301      	movs	r3, #1
   1f1ee:	3701      	adds	r7, #1
   1f1f0:	1076      	asrs	r6, r6, #1
   1f1f2:	e7cf      	b.n	1f194 <_strtod_l+0x4b4>
   1f1f4:	d0ef      	beq.n	1f1d6 <_strtod_l+0x4f6>
   1f1f6:	4276      	negs	r6, r6
   1f1f8:	f016 020f 	ands.w	r2, r6, #15
   1f1fc:	d00a      	beq.n	1f214 <_strtod_l+0x534>
   1f1fe:	4b12      	ldr	r3, [pc, #72]	; (1f248 <_strtod_l+0x568>)
   1f200:	4650      	mov	r0, sl
   1f202:	4659      	mov	r1, fp
   1f204:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f208:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f20c:	f7fd fbfe 	bl	1ca0c <__aeabi_ddiv>
   1f210:	4682      	mov	sl, r0
   1f212:	468b      	mov	fp, r1
   1f214:	1136      	asrs	r6, r6, #4
   1f216:	d0de      	beq.n	1f1d6 <_strtod_l+0x4f6>
   1f218:	2e1f      	cmp	r6, #31
   1f21a:	dd1f      	ble.n	1f25c <_strtod_l+0x57c>
   1f21c:	2400      	movs	r4, #0
   1f21e:	9405      	str	r4, [sp, #20]
   1f220:	9409      	str	r4, [sp, #36]	; 0x24
   1f222:	9407      	str	r4, [sp, #28]
   1f224:	2322      	movs	r3, #34	; 0x22
   1f226:	9a04      	ldr	r2, [sp, #16]
   1f228:	f04f 0a00 	mov.w	sl, #0
   1f22c:	f04f 0b00 	mov.w	fp, #0
   1f230:	6013      	str	r3, [r2, #0]
   1f232:	e78f      	b.n	1f154 <_strtod_l+0x474>
   1f234:	000424a6 	.word	0x000424a6
   1f238:	00046dc6 	.word	0x00046dc6
   1f23c:	00046d70 	.word	0x00046d70
   1f240:	000411e4 	.word	0x000411e4
   1f244:	00043121 	.word	0x00043121
   1f248:	000404d8 	.word	0x000404d8
   1f24c:	000404b0 	.word	0x000404b0
   1f250:	7ff00000 	.word	0x7ff00000
   1f254:	7ca00000 	.word	0x7ca00000
   1f258:	7fefffff 	.word	0x7fefffff
   1f25c:	f016 0310 	ands.w	r3, r6, #16
   1f260:	4650      	mov	r0, sl
   1f262:	4659      	mov	r1, fp
   1f264:	4fac      	ldr	r7, [pc, #688]	; (1f518 <_strtod_l+0x838>)
   1f266:	bf18      	it	ne
   1f268:	236a      	movne	r3, #106	; 0x6a
   1f26a:	9306      	str	r3, [sp, #24]
   1f26c:	2300      	movs	r3, #0
   1f26e:	07f2      	lsls	r2, r6, #31
   1f270:	d504      	bpl.n	1f27c <_strtod_l+0x59c>
   1f272:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f276:	f7fd fa9f 	bl	1c7b8 <__aeabi_dmul>
   1f27a:	2301      	movs	r3, #1
   1f27c:	1076      	asrs	r6, r6, #1
   1f27e:	f107 0708 	add.w	r7, r7, #8
   1f282:	d1f4      	bne.n	1f26e <_strtod_l+0x58e>
   1f284:	b10b      	cbz	r3, 1f28a <_strtod_l+0x5aa>
   1f286:	4682      	mov	sl, r0
   1f288:	468b      	mov	fp, r1
   1f28a:	9b06      	ldr	r3, [sp, #24]
   1f28c:	b1bb      	cbz	r3, 1f2be <_strtod_l+0x5de>
   1f28e:	f3cb 530a 	ubfx	r3, fp, #20, #11
   1f292:	4659      	mov	r1, fp
   1f294:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1f298:	2b00      	cmp	r3, #0
   1f29a:	dd10      	ble.n	1f2be <_strtod_l+0x5de>
   1f29c:	2b1f      	cmp	r3, #31
   1f29e:	f340 8126 	ble.w	1f4ee <_strtod_l+0x80e>
   1f2a2:	2b34      	cmp	r3, #52	; 0x34
   1f2a4:	f04f 0a00 	mov.w	sl, #0
   1f2a8:	bfdb      	ittet	le
   1f2aa:	3b20      	suble	r3, #32
   1f2ac:	f04f 32ff 	movle.w	r2, #4294967295
   1f2b0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1f2b4:	fa02 f303 	lslle.w	r3, r2, r3
   1f2b8:	bfd8      	it	le
   1f2ba:	ea03 0b01 	andle.w	fp, r3, r1
   1f2be:	2200      	movs	r2, #0
   1f2c0:	2300      	movs	r3, #0
   1f2c2:	4650      	mov	r0, sl
   1f2c4:	4659      	mov	r1, fp
   1f2c6:	f7fd fcdf 	bl	1cc88 <__aeabi_dcmpeq>
   1f2ca:	2800      	cmp	r0, #0
   1f2cc:	d1a6      	bne.n	1f21c <_strtod_l+0x53c>
   1f2ce:	9b07      	ldr	r3, [sp, #28]
   1f2d0:	4642      	mov	r2, r8
   1f2d2:	9909      	ldr	r1, [sp, #36]	; 0x24
   1f2d4:	9300      	str	r3, [sp, #0]
   1f2d6:	4623      	mov	r3, r4
   1f2d8:	9804      	ldr	r0, [sp, #16]
   1f2da:	f020 fa2c 	bl	3f736 <__s2b>
   1f2de:	9009      	str	r0, [sp, #36]	; 0x24
   1f2e0:	2800      	cmp	r0, #0
   1f2e2:	f43f af2c 	beq.w	1f13e <_strtod_l+0x45e>
   1f2e6:	9b05      	ldr	r3, [sp, #20]
   1f2e8:	2400      	movs	r4, #0
   1f2ea:	1b5d      	subs	r5, r3, r5
   1f2ec:	9b08      	ldr	r3, [sp, #32]
   1f2ee:	9405      	str	r4, [sp, #20]
   1f2f0:	2b00      	cmp	r3, #0
   1f2f2:	bfb4      	ite	lt
   1f2f4:	462b      	movlt	r3, r5
   1f2f6:	2300      	movge	r3, #0
   1f2f8:	930e      	str	r3, [sp, #56]	; 0x38
   1f2fa:	9b08      	ldr	r3, [sp, #32]
   1f2fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f300:	9316      	str	r3, [sp, #88]	; 0x58
   1f302:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f304:	9804      	ldr	r0, [sp, #16]
   1f306:	6859      	ldr	r1, [r3, #4]
   1f308:	f020 f98d 	bl	3f626 <_Balloc>
   1f30c:	9007      	str	r0, [sp, #28]
   1f30e:	2800      	cmp	r0, #0
   1f310:	f43f af19 	beq.w	1f146 <_strtod_l+0x466>
   1f314:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f316:	300c      	adds	r0, #12
   1f318:	691a      	ldr	r2, [r3, #16]
   1f31a:	f103 010c 	add.w	r1, r3, #12
   1f31e:	3202      	adds	r2, #2
   1f320:	0092      	lsls	r2, r2, #2
   1f322:	f01f fcd2 	bl	3ecca <memcpy>
   1f326:	aa1e      	add	r2, sp, #120	; 0x78
   1f328:	a91d      	add	r1, sp, #116	; 0x74
   1f32a:	9804      	ldr	r0, [sp, #16]
   1f32c:	ec4b ab10 	vmov	d0, sl, fp
   1f330:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   1f334:	f020 fbf2 	bl	3fb1c <__d2b>
   1f338:	901c      	str	r0, [sp, #112]	; 0x70
   1f33a:	2800      	cmp	r0, #0
   1f33c:	f43f af03 	beq.w	1f146 <_strtod_l+0x466>
   1f340:	2101      	movs	r1, #1
   1f342:	9804      	ldr	r0, [sp, #16]
   1f344:	f020 fa85 	bl	3f852 <__i2b>
   1f348:	9005      	str	r0, [sp, #20]
   1f34a:	4603      	mov	r3, r0
   1f34c:	2800      	cmp	r0, #0
   1f34e:	f43f aefa 	beq.w	1f146 <_strtod_l+0x466>
   1f352:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   1f354:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1f356:	2e00      	cmp	r6, #0
   1f358:	bfa9      	itett	ge
   1f35a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
   1f35c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
   1f35e:	18f7      	addge	r7, r6, r3
   1f360:	9d16      	ldrge	r5, [sp, #88]	; 0x58
   1f362:	bfb8      	it	lt
   1f364:	1b9d      	sublt	r5, r3, r6
   1f366:	9b06      	ldr	r3, [sp, #24]
   1f368:	bfb8      	it	lt
   1f36a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
   1f36c:	1af6      	subs	r6, r6, r3
   1f36e:	4b6b      	ldr	r3, [pc, #428]	; (1f51c <_strtod_l+0x83c>)
   1f370:	4416      	add	r6, r2
   1f372:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1f376:	3e01      	subs	r6, #1
   1f378:	429e      	cmp	r6, r3
   1f37a:	f280 80bf 	bge.w	1f4fc <_strtod_l+0x81c>
   1f37e:	1b9b      	subs	r3, r3, r6
   1f380:	f04f 0801 	mov.w	r8, #1
   1f384:	2b1f      	cmp	r3, #31
   1f386:	eba2 0203 	sub.w	r2, r2, r3
   1f38a:	bfcd      	iteet	gt
   1f38c:	f1c6 467f 	rsbgt	r6, r6, #4278190080	; 0xff000000
   1f390:	fa08 f803 	lslle.w	r8, r8, r3
   1f394:	2600      	movle	r6, #0
   1f396:	f506 067f 	addgt.w	r6, r6, #16711680	; 0xff0000
   1f39a:	bfc2      	ittt	gt
   1f39c:	f506 467b 	addgt.w	r6, r6, #64256	; 0xfb00
   1f3a0:	36e2      	addgt	r6, #226	; 0xe2
   1f3a2:	fa08 f606 	lslgt.w	r6, r8, r6
   1f3a6:	eb07 0902 	add.w	r9, r7, r2
   1f3aa:	9b06      	ldr	r3, [sp, #24]
   1f3ac:	4415      	add	r5, r2
   1f3ae:	454f      	cmp	r7, r9
   1f3b0:	441d      	add	r5, r3
   1f3b2:	463b      	mov	r3, r7
   1f3b4:	bfa8      	it	ge
   1f3b6:	464b      	movge	r3, r9
   1f3b8:	42ab      	cmp	r3, r5
   1f3ba:	bfa8      	it	ge
   1f3bc:	462b      	movge	r3, r5
   1f3be:	2b00      	cmp	r3, #0
   1f3c0:	bfc2      	ittt	gt
   1f3c2:	eba9 0903 	subgt.w	r9, r9, r3
   1f3c6:	1aed      	subgt	r5, r5, r3
   1f3c8:	1aff      	subgt	r7, r7, r3
   1f3ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f3cc:	2b00      	cmp	r3, #0
   1f3ce:	dd17      	ble.n	1f400 <_strtod_l+0x720>
   1f3d0:	461a      	mov	r2, r3
   1f3d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f3d6:	f01c f949 	bl	3b66c <__pow5mult>
   1f3da:	9005      	str	r0, [sp, #20]
   1f3dc:	2800      	cmp	r0, #0
   1f3de:	f43f aeb2 	beq.w	1f146 <_strtod_l+0x466>
   1f3e2:	4601      	mov	r1, r0
   1f3e4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1f3e6:	9804      	ldr	r0, [sp, #16]
   1f3e8:	f020 fa3c 	bl	3f864 <__multiply>
   1f3ec:	900d      	str	r0, [sp, #52]	; 0x34
   1f3ee:	2800      	cmp	r0, #0
   1f3f0:	f43f aea9 	beq.w	1f146 <_strtod_l+0x466>
   1f3f4:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f3f6:	9804      	ldr	r0, [sp, #16]
   1f3f8:	f020 f949 	bl	3f68e <_Bfree>
   1f3fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f3fe:	931c      	str	r3, [sp, #112]	; 0x70
   1f400:	f1b9 0f00 	cmp.w	r9, #0
   1f404:	dc7e      	bgt.n	1f504 <_strtod_l+0x824>
   1f406:	9b08      	ldr	r3, [sp, #32]
   1f408:	2b00      	cmp	r3, #0
   1f40a:	dd08      	ble.n	1f41e <_strtod_l+0x73e>
   1f40c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1f40e:	9907      	ldr	r1, [sp, #28]
   1f410:	9804      	ldr	r0, [sp, #16]
   1f412:	f01c f92b 	bl	3b66c <__pow5mult>
   1f416:	9007      	str	r0, [sp, #28]
   1f418:	2800      	cmp	r0, #0
   1f41a:	f43f ae94 	beq.w	1f146 <_strtod_l+0x466>
   1f41e:	2d00      	cmp	r5, #0
   1f420:	dd08      	ble.n	1f434 <_strtod_l+0x754>
   1f422:	462a      	mov	r2, r5
   1f424:	9907      	ldr	r1, [sp, #28]
   1f426:	9804      	ldr	r0, [sp, #16]
   1f428:	f020 faab 	bl	3f982 <__lshift>
   1f42c:	9007      	str	r0, [sp, #28]
   1f42e:	2800      	cmp	r0, #0
   1f430:	f43f ae89 	beq.w	1f146 <_strtod_l+0x466>
   1f434:	2f00      	cmp	r7, #0
   1f436:	dd08      	ble.n	1f44a <_strtod_l+0x76a>
   1f438:	463a      	mov	r2, r7
   1f43a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f43e:	f020 faa0 	bl	3f982 <__lshift>
   1f442:	9005      	str	r0, [sp, #20]
   1f444:	2800      	cmp	r0, #0
   1f446:	f43f ae7e 	beq.w	1f146 <_strtod_l+0x466>
   1f44a:	9a07      	ldr	r2, [sp, #28]
   1f44c:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f44e:	9804      	ldr	r0, [sp, #16]
   1f450:	f020 fb04 	bl	3fa5c <__mdiff>
   1f454:	4604      	mov	r4, r0
   1f456:	2800      	cmp	r0, #0
   1f458:	f43f ae75 	beq.w	1f146 <_strtod_l+0x466>
   1f45c:	68c3      	ldr	r3, [r0, #12]
   1f45e:	9905      	ldr	r1, [sp, #20]
   1f460:	930d      	str	r3, [sp, #52]	; 0x34
   1f462:	2300      	movs	r3, #0
   1f464:	60c3      	str	r3, [r0, #12]
   1f466:	f020 fadf 	bl	3fa28 <__mcmp>
   1f46a:	2800      	cmp	r0, #0
   1f46c:	da5c      	bge.n	1f528 <_strtod_l+0x848>
   1f46e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f470:	ea53 030a 	orrs.w	r3, r3, sl
   1f474:	d17e      	bne.n	1f574 <_strtod_l+0x894>
   1f476:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f47a:	2b00      	cmp	r3, #0
   1f47c:	d17a      	bne.n	1f574 <_strtod_l+0x894>
   1f47e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1f482:	0d1b      	lsrs	r3, r3, #20
   1f484:	051b      	lsls	r3, r3, #20
   1f486:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1f48a:	d973      	bls.n	1f574 <_strtod_l+0x894>
   1f48c:	6963      	ldr	r3, [r4, #20]
   1f48e:	b913      	cbnz	r3, 1f496 <_strtod_l+0x7b6>
   1f490:	6923      	ldr	r3, [r4, #16]
   1f492:	2b01      	cmp	r3, #1
   1f494:	dd6e      	ble.n	1f574 <_strtod_l+0x894>
   1f496:	4621      	mov	r1, r4
   1f498:	2201      	movs	r2, #1
   1f49a:	9804      	ldr	r0, [sp, #16]
   1f49c:	f020 fa71 	bl	3f982 <__lshift>
   1f4a0:	9905      	ldr	r1, [sp, #20]
   1f4a2:	4604      	mov	r4, r0
   1f4a4:	f020 fac0 	bl	3fa28 <__mcmp>
   1f4a8:	2800      	cmp	r0, #0
   1f4aa:	dd63      	ble.n	1f574 <_strtod_l+0x894>
   1f4ac:	9906      	ldr	r1, [sp, #24]
   1f4ae:	465b      	mov	r3, fp
   1f4b0:	4a1b      	ldr	r2, [pc, #108]	; (1f520 <_strtod_l+0x840>)
   1f4b2:	2900      	cmp	r1, #0
   1f4b4:	d07d      	beq.n	1f5b2 <_strtod_l+0x8d2>
   1f4b6:	ea02 010b 	and.w	r1, r2, fp
   1f4ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   1f4be:	dc78      	bgt.n	1f5b2 <_strtod_l+0x8d2>
   1f4c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   1f4c4:	f77f aeae 	ble.w	1f224 <_strtod_l+0x544>
   1f4c8:	2300      	movs	r3, #0
   1f4ca:	4a16      	ldr	r2, [pc, #88]	; (1f524 <_strtod_l+0x844>)
   1f4cc:	4650      	mov	r0, sl
   1f4ce:	4659      	mov	r1, fp
   1f4d0:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
   1f4d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1f4d8:	f7fd f96e 	bl	1c7b8 <__aeabi_dmul>
   1f4dc:	460b      	mov	r3, r1
   1f4de:	4682      	mov	sl, r0
   1f4e0:	468b      	mov	fp, r1
   1f4e2:	4303      	orrs	r3, r0
   1f4e4:	bf02      	ittt	eq
   1f4e6:	2322      	moveq	r3, #34	; 0x22
   1f4e8:	9a04      	ldreq	r2, [sp, #16]
   1f4ea:	6013      	streq	r3, [r2, #0]
   1f4ec:	e636      	b.n	1f15c <_strtod_l+0x47c>
   1f4ee:	f04f 32ff 	mov.w	r2, #4294967295
   1f4f2:	fa02 f303 	lsl.w	r3, r2, r3
   1f4f6:	ea03 0a0a 	and.w	sl, r3, sl
   1f4fa:	e6e0      	b.n	1f2be <_strtod_l+0x5de>
   1f4fc:	2600      	movs	r6, #0
   1f4fe:	f04f 0801 	mov.w	r8, #1
   1f502:	e750      	b.n	1f3a6 <_strtod_l+0x6c6>
   1f504:	464a      	mov	r2, r9
   1f506:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f508:	9804      	ldr	r0, [sp, #16]
   1f50a:	f020 fa3a 	bl	3f982 <__lshift>
   1f50e:	901c      	str	r0, [sp, #112]	; 0x70
   1f510:	2800      	cmp	r0, #0
   1f512:	f47f af78 	bne.w	1f406 <_strtod_l+0x726>
   1f516:	e616      	b.n	1f146 <_strtod_l+0x466>
   1f518:	00040488 	.word	0x00040488
   1f51c:	fffffc02 	.word	0xfffffc02
   1f520:	7ff00000 	.word	0x7ff00000
   1f524:	39500000 	.word	0x39500000
   1f528:	465d      	mov	r5, fp
   1f52a:	d160      	bne.n	1f5ee <_strtod_l+0x90e>
   1f52c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f52e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f532:	b342      	cbz	r2, 1f586 <_strtod_l+0x8a6>
   1f534:	4ab8      	ldr	r2, [pc, #736]	; (1f818 <_strtod_l+0xb38>)
   1f536:	4293      	cmp	r3, r2
   1f538:	d128      	bne.n	1f58c <_strtod_l+0x8ac>
   1f53a:	9b06      	ldr	r3, [sp, #24]
   1f53c:	4650      	mov	r0, sl
   1f53e:	b1eb      	cbz	r3, 1f57c <_strtod_l+0x89c>
   1f540:	4ab6      	ldr	r2, [pc, #728]	; (1f81c <_strtod_l+0xb3c>)
   1f542:	f04f 31ff 	mov.w	r1, #4294967295
   1f546:	402a      	ands	r2, r5
   1f548:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   1f54c:	d819      	bhi.n	1f582 <_strtod_l+0x8a2>
   1f54e:	0d12      	lsrs	r2, r2, #20
   1f550:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1f554:	fa01 f303 	lsl.w	r3, r1, r3
   1f558:	4298      	cmp	r0, r3
   1f55a:	d117      	bne.n	1f58c <_strtod_l+0x8ac>
   1f55c:	4bb0      	ldr	r3, [pc, #704]	; (1f820 <_strtod_l+0xb40>)
   1f55e:	429d      	cmp	r5, r3
   1f560:	d102      	bne.n	1f568 <_strtod_l+0x888>
   1f562:	3001      	adds	r0, #1
   1f564:	f43f adef 	beq.w	1f146 <_strtod_l+0x466>
   1f568:	4bac      	ldr	r3, [pc, #688]	; (1f81c <_strtod_l+0xb3c>)
   1f56a:	f04f 0a00 	mov.w	sl, #0
   1f56e:	402b      	ands	r3, r5
   1f570:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   1f574:	9b06      	ldr	r3, [sp, #24]
   1f576:	2b00      	cmp	r3, #0
   1f578:	d1a6      	bne.n	1f4c8 <_strtod_l+0x7e8>
   1f57a:	e5ef      	b.n	1f15c <_strtod_l+0x47c>
   1f57c:	f04f 33ff 	mov.w	r3, #4294967295
   1f580:	e7ea      	b.n	1f558 <_strtod_l+0x878>
   1f582:	460b      	mov	r3, r1
   1f584:	e7e8      	b.n	1f558 <_strtod_l+0x878>
   1f586:	ea53 030a 	orrs.w	r3, r3, sl
   1f58a:	d08f      	beq.n	1f4ac <_strtod_l+0x7cc>
   1f58c:	b1de      	cbz	r6, 1f5c6 <_strtod_l+0x8e6>
   1f58e:	422e      	tst	r6, r5
   1f590:	d0f0      	beq.n	1f574 <_strtod_l+0x894>
   1f592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f594:	4650      	mov	r0, sl
   1f596:	9a06      	ldr	r2, [sp, #24]
   1f598:	4659      	mov	r1, fp
   1f59a:	b1bb      	cbz	r3, 1f5cc <_strtod_l+0x8ec>
   1f59c:	f01f fdd6 	bl	3f14c <sulp>
   1f5a0:	4602      	mov	r2, r0
   1f5a2:	460b      	mov	r3, r1
   1f5a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1f5a8:	f7fc ff50 	bl	1c44c <__adddf3>
   1f5ac:	4682      	mov	sl, r0
   1f5ae:	468b      	mov	fp, r1
   1f5b0:	e7e0      	b.n	1f574 <_strtod_l+0x894>
   1f5b2:	4013      	ands	r3, r2
   1f5b4:	f04f 3aff 	mov.w	sl, #4294967295
   1f5b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1f5bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   1f5c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1f5c4:	e7d6      	b.n	1f574 <_strtod_l+0x894>
   1f5c6:	ea18 0f0a 	tst.w	r8, sl
   1f5ca:	e7e1      	b.n	1f590 <_strtod_l+0x8b0>
   1f5cc:	f01f fdbe 	bl	3f14c <sulp>
   1f5d0:	4602      	mov	r2, r0
   1f5d2:	460b      	mov	r3, r1
   1f5d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1f5d8:	f7fc ff36 	bl	1c448 <__aeabi_dsub>
   1f5dc:	2200      	movs	r2, #0
   1f5de:	2300      	movs	r3, #0
   1f5e0:	4682      	mov	sl, r0
   1f5e2:	468b      	mov	fp, r1
   1f5e4:	f7fd fb50 	bl	1cc88 <__aeabi_dcmpeq>
   1f5e8:	2800      	cmp	r0, #0
   1f5ea:	d0c3      	beq.n	1f574 <_strtod_l+0x894>
   1f5ec:	e61a      	b.n	1f224 <_strtod_l+0x544>
   1f5ee:	9905      	ldr	r1, [sp, #20]
   1f5f0:	4620      	mov	r0, r4
   1f5f2:	f020 fae1 	bl	3fbb8 <__ratio>
   1f5f6:	2200      	movs	r2, #0
   1f5f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f5fc:	ee10 0a10 	vmov	r0, s0
   1f600:	ec57 6b10 	vmov	r6, r7, d0
   1f604:	4639      	mov	r1, r7
   1f606:	f7fd fb53 	bl	1ccb0 <__aeabi_dcmple>
   1f60a:	2800      	cmp	r0, #0
   1f60c:	d073      	beq.n	1f6f6 <_strtod_l+0xa16>
   1f60e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f610:	2b00      	cmp	r3, #0
   1f612:	d046      	beq.n	1f6a2 <_strtod_l+0x9c2>
   1f614:	f04f 0800 	mov.w	r8, #0
   1f618:	f8df 9208 	ldr.w	r9, [pc, #520]	; 1f824 <_strtod_l+0xb44>
   1f61c:	2600      	movs	r6, #0
   1f61e:	4f81      	ldr	r7, [pc, #516]	; (1f824 <_strtod_l+0xb44>)
   1f620:	4b7e      	ldr	r3, [pc, #504]	; (1f81c <_strtod_l+0xb3c>)
   1f622:	402b      	ands	r3, r5
   1f624:	930f      	str	r3, [sp, #60]	; 0x3c
   1f626:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f628:	4b7f      	ldr	r3, [pc, #508]	; (1f828 <_strtod_l+0xb48>)
   1f62a:	429a      	cmp	r2, r3
   1f62c:	f040 80ab 	bne.w	1f786 <_strtod_l+0xaa6>
   1f630:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
   1f634:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1f638:	ec4b ab10 	vmov	d0, sl, fp
   1f63c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   1f640:	f01c f862 	bl	3b708 <__ulp>
   1f644:	4640      	mov	r0, r8
   1f646:	4649      	mov	r1, r9
   1f648:	ec53 2b10 	vmov	r2, r3, d0
   1f64c:	f7fd f8b4 	bl	1c7b8 <__aeabi_dmul>
   1f650:	4652      	mov	r2, sl
   1f652:	465b      	mov	r3, fp
   1f654:	f7fc fefa 	bl	1c44c <__adddf3>
   1f658:	460b      	mov	r3, r1
   1f65a:	4970      	ldr	r1, [pc, #448]	; (1f81c <_strtod_l+0xb3c>)
   1f65c:	4682      	mov	sl, r0
   1f65e:	4a73      	ldr	r2, [pc, #460]	; (1f82c <_strtod_l+0xb4c>)
   1f660:	4019      	ands	r1, r3
   1f662:	4291      	cmp	r1, r2
   1f664:	d95b      	bls.n	1f71e <_strtod_l+0xa3e>
   1f666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f668:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   1f66c:	4293      	cmp	r3, r2
   1f66e:	d103      	bne.n	1f678 <_strtod_l+0x998>
   1f670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f672:	3301      	adds	r3, #1
   1f674:	f43f ad67 	beq.w	1f146 <_strtod_l+0x466>
   1f678:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 1f820 <_strtod_l+0xb40>
   1f67c:	f04f 3aff 	mov.w	sl, #4294967295
   1f680:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f682:	9804      	ldr	r0, [sp, #16]
   1f684:	f020 f803 	bl	3f68e <_Bfree>
   1f688:	9907      	ldr	r1, [sp, #28]
   1f68a:	9804      	ldr	r0, [sp, #16]
   1f68c:	f01f ffff 	bl	3f68e <_Bfree>
   1f690:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f694:	f01f fffb 	bl	3f68e <_Bfree>
   1f698:	4621      	mov	r1, r4
   1f69a:	9804      	ldr	r0, [sp, #16]
   1f69c:	f01f fff7 	bl	3f68e <_Bfree>
   1f6a0:	e62f      	b.n	1f302 <_strtod_l+0x622>
   1f6a2:	f1ba 0f00 	cmp.w	sl, #0
   1f6a6:	d118      	bne.n	1f6da <_strtod_l+0x9fa>
   1f6a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f6ac:	b9db      	cbnz	r3, 1f6e6 <_strtod_l+0xa06>
   1f6ae:	2200      	movs	r2, #0
   1f6b0:	4b5c      	ldr	r3, [pc, #368]	; (1f824 <_strtod_l+0xb44>)
   1f6b2:	4630      	mov	r0, r6
   1f6b4:	4639      	mov	r1, r7
   1f6b6:	f7fd faf1 	bl	1cc9c <__aeabi_dcmplt>
   1f6ba:	b9c8      	cbnz	r0, 1f6f0 <_strtod_l+0xa10>
   1f6bc:	4630      	mov	r0, r6
   1f6be:	4639      	mov	r1, r7
   1f6c0:	2200      	movs	r2, #0
   1f6c2:	4b5b      	ldr	r3, [pc, #364]	; (1f830 <_strtod_l+0xb50>)
   1f6c4:	f7fd f878 	bl	1c7b8 <__aeabi_dmul>
   1f6c8:	4606      	mov	r6, r0
   1f6ca:	460f      	mov	r7, r1
   1f6cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1f6d0:	9618      	str	r6, [sp, #96]	; 0x60
   1f6d2:	9319      	str	r3, [sp, #100]	; 0x64
   1f6d4:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   1f6d8:	e7a2      	b.n	1f620 <_strtod_l+0x940>
   1f6da:	f1ba 0f01 	cmp.w	sl, #1
   1f6de:	d102      	bne.n	1f6e6 <_strtod_l+0xa06>
   1f6e0:	2d00      	cmp	r5, #0
   1f6e2:	f43f ad9f 	beq.w	1f224 <_strtod_l+0x544>
   1f6e6:	f04f 0800 	mov.w	r8, #0
   1f6ea:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1f834 <_strtod_l+0xb54>
   1f6ee:	e795      	b.n	1f61c <_strtod_l+0x93c>
   1f6f0:	2600      	movs	r6, #0
   1f6f2:	4f4f      	ldr	r7, [pc, #316]	; (1f830 <_strtod_l+0xb50>)
   1f6f4:	e7ea      	b.n	1f6cc <_strtod_l+0x9ec>
   1f6f6:	4b4e      	ldr	r3, [pc, #312]	; (1f830 <_strtod_l+0xb50>)
   1f6f8:	4630      	mov	r0, r6
   1f6fa:	4639      	mov	r1, r7
   1f6fc:	2200      	movs	r2, #0
   1f6fe:	f7fd f85b 	bl	1c7b8 <__aeabi_dmul>
   1f702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f704:	4606      	mov	r6, r0
   1f706:	460f      	mov	r7, r1
   1f708:	b933      	cbnz	r3, 1f718 <_strtod_l+0xa38>
   1f70a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f70e:	9010      	str	r0, [sp, #64]	; 0x40
   1f710:	9311      	str	r3, [sp, #68]	; 0x44
   1f712:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   1f716:	e783      	b.n	1f620 <_strtod_l+0x940>
   1f718:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   1f71c:	e7f9      	b.n	1f712 <_strtod_l+0xa32>
   1f71e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   1f722:	9b06      	ldr	r3, [sp, #24]
   1f724:	2b00      	cmp	r3, #0
   1f726:	d1ab      	bne.n	1f680 <_strtod_l+0x9a0>
   1f728:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1f72c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f72e:	0d1b      	lsrs	r3, r3, #20
   1f730:	051b      	lsls	r3, r3, #20
   1f732:	429a      	cmp	r2, r3
   1f734:	d1a4      	bne.n	1f680 <_strtod_l+0x9a0>
   1f736:	4630      	mov	r0, r6
   1f738:	4639      	mov	r1, r7
   1f73a:	f7fd fcb3 	bl	1d0a4 <__aeabi_d2lz>
   1f73e:	f7fd f80d 	bl	1c75c <__aeabi_l2d>
   1f742:	4602      	mov	r2, r0
   1f744:	460b      	mov	r3, r1
   1f746:	4630      	mov	r0, r6
   1f748:	4639      	mov	r1, r7
   1f74a:	f7fc fe7d 	bl	1c448 <__aeabi_dsub>
   1f74e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f752:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f754:	4606      	mov	r6, r0
   1f756:	ea43 030a 	orr.w	r3, r3, sl
   1f75a:	460f      	mov	r7, r1
   1f75c:	4313      	orrs	r3, r2
   1f75e:	d06b      	beq.n	1f838 <_strtod_l+0xb58>
   1f760:	a327      	add	r3, pc, #156	; (adr r3, 1f800 <_strtod_l+0xb20>)
   1f762:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f766:	f7fd fa99 	bl	1cc9c <__aeabi_dcmplt>
   1f76a:	2800      	cmp	r0, #0
   1f76c:	f47f acf6 	bne.w	1f15c <_strtod_l+0x47c>
   1f770:	4630      	mov	r0, r6
   1f772:	4639      	mov	r1, r7
   1f774:	a324      	add	r3, pc, #144	; (adr r3, 1f808 <_strtod_l+0xb28>)
   1f776:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f77a:	f7fd faad 	bl	1ccd8 <__aeabi_dcmpgt>
   1f77e:	2800      	cmp	r0, #0
   1f780:	f43f af7e 	beq.w	1f680 <_strtod_l+0x9a0>
   1f784:	e4ea      	b.n	1f15c <_strtod_l+0x47c>
   1f786:	9b06      	ldr	r3, [sp, #24]
   1f788:	b31b      	cbz	r3, 1f7d2 <_strtod_l+0xaf2>
   1f78a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f78c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1f790:	d81f      	bhi.n	1f7d2 <_strtod_l+0xaf2>
   1f792:	4630      	mov	r0, r6
   1f794:	4639      	mov	r1, r7
   1f796:	a31e      	add	r3, pc, #120	; (adr r3, 1f810 <_strtod_l+0xb30>)
   1f798:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f79c:	f7fd fa88 	bl	1ccb0 <__aeabi_dcmple>
   1f7a0:	b190      	cbz	r0, 1f7c8 <_strtod_l+0xae8>
   1f7a2:	4639      	mov	r1, r7
   1f7a4:	4630      	mov	r0, r6
   1f7a6:	f7fd fac9 	bl	1cd3c <__aeabi_d2uiz>
   1f7aa:	2800      	cmp	r0, #0
   1f7ac:	bf08      	it	eq
   1f7ae:	2001      	moveq	r0, #1
   1f7b0:	f7fc ff88 	bl	1c6c4 <__aeabi_ui2d>
   1f7b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f7b6:	4606      	mov	r6, r0
   1f7b8:	460f      	mov	r7, r1
   1f7ba:	b9db      	cbnz	r3, 1f7f4 <_strtod_l+0xb14>
   1f7bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f7c0:	9012      	str	r0, [sp, #72]	; 0x48
   1f7c2:	9313      	str	r3, [sp, #76]	; 0x4c
   1f7c4:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
   1f7c8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   1f7cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f7ce:	eba3 0902 	sub.w	r9, r3, r2
   1f7d2:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   1f7d6:	f01b ff97 	bl	3b708 <__ulp>
   1f7da:	4640      	mov	r0, r8
   1f7dc:	4649      	mov	r1, r9
   1f7de:	ec53 2b10 	vmov	r2, r3, d0
   1f7e2:	f7fc ffe9 	bl	1c7b8 <__aeabi_dmul>
   1f7e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1f7ea:	f7fc fe2f 	bl	1c44c <__adddf3>
   1f7ee:	4682      	mov	sl, r0
   1f7f0:	468b      	mov	fp, r1
   1f7f2:	e796      	b.n	1f722 <_strtod_l+0xa42>
   1f7f4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
   1f7f8:	e7e4      	b.n	1f7c4 <_strtod_l+0xae4>
   1f7fa:	bf00      	nop
   1f7fc:	f3af 8000 	nop.w
   1f800:	94a03595 	.word	0x94a03595
   1f804:	3fdfffff 	.word	0x3fdfffff
   1f808:	35afe535 	.word	0x35afe535
   1f80c:	3fe00000 	.word	0x3fe00000
   1f810:	ffc00000 	.word	0xffc00000
   1f814:	41dfffff 	.word	0x41dfffff
   1f818:	000fffff 	.word	0x000fffff
   1f81c:	7ff00000 	.word	0x7ff00000
   1f820:	7fefffff 	.word	0x7fefffff
   1f824:	3ff00000 	.word	0x3ff00000
   1f828:	7fe00000 	.word	0x7fe00000
   1f82c:	7c9fffff 	.word	0x7c9fffff
   1f830:	3fe00000 	.word	0x3fe00000
   1f834:	bff00000 	.word	0xbff00000
   1f838:	a30b      	add	r3, pc, #44	; (adr r3, 1f868 <_strtod_l+0xb88>)
   1f83a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f83e:	f7fd fa2d 	bl	1cc9c <__aeabi_dcmplt>
   1f842:	e79c      	b.n	1f77e <_strtod_l+0xa9e>
   1f844:	2300      	movs	r3, #0
   1f846:	930c      	str	r3, [sp, #48]	; 0x30
   1f848:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f84a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1f84c:	6013      	str	r3, [r2, #0]
   1f84e:	f7ff ba89 	b.w	1ed64 <_strtod_l+0x84>
   1f852:	2b65      	cmp	r3, #101	; 0x65
   1f854:	f43f ab75 	beq.w	1ef42 <_strtod_l+0x262>
   1f858:	2b45      	cmp	r3, #69	; 0x45
   1f85a:	f43f ab72 	beq.w	1ef42 <_strtod_l+0x262>
   1f85e:	2201      	movs	r2, #1
   1f860:	f7ff bba6 	b.w	1efb0 <_strtod_l+0x2d0>
   1f864:	f3af 8000 	nop.w
   1f868:	94a03595 	.word	0x94a03595
   1f86c:	3fcfffff 	.word	0x3fcfffff

0001f870 <_dtoa_r>:
   1f870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f874:	6a47      	ldr	r7, [r0, #36]	; 0x24
   1f876:	b099      	sub	sp, #100	; 0x64
   1f878:	4683      	mov	fp, r0
   1f87a:	9108      	str	r1, [sp, #32]
   1f87c:	920d      	str	r2, [sp, #52]	; 0x34
   1f87e:	9314      	str	r3, [sp, #80]	; 0x50
   1f880:	9e22      	ldr	r6, [sp, #136]	; 0x88
   1f882:	ec55 4b10 	vmov	r4, r5, d0
   1f886:	e9cd 4500 	strd	r4, r5, [sp]
   1f88a:	b947      	cbnz	r7, 1f89e <_dtoa_r+0x2e>
   1f88c:	2010      	movs	r0, #16
   1f88e:	f01a fabd 	bl	39e0c <malloc>
   1f892:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   1f896:	6007      	str	r7, [r0, #0]
   1f898:	60c7      	str	r7, [r0, #12]
   1f89a:	e9c0 7701 	strd	r7, r7, [r0, #4]
   1f89e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1f8a2:	6819      	ldr	r1, [r3, #0]
   1f8a4:	b159      	cbz	r1, 1f8be <_dtoa_r+0x4e>
   1f8a6:	685a      	ldr	r2, [r3, #4]
   1f8a8:	2301      	movs	r3, #1
   1f8aa:	4658      	mov	r0, fp
   1f8ac:	4093      	lsls	r3, r2
   1f8ae:	604a      	str	r2, [r1, #4]
   1f8b0:	608b      	str	r3, [r1, #8]
   1f8b2:	f01f feec 	bl	3f68e <_Bfree>
   1f8b6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1f8ba:	2200      	movs	r2, #0
   1f8bc:	601a      	str	r2, [r3, #0]
   1f8be:	1e2b      	subs	r3, r5, #0
   1f8c0:	bfb7      	itett	lt
   1f8c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   1f8c6:	2300      	movge	r3, #0
   1f8c8:	2201      	movlt	r2, #1
   1f8ca:	9301      	strlt	r3, [sp, #4]
   1f8cc:	bfa8      	it	ge
   1f8ce:	6033      	strge	r3, [r6, #0]
   1f8d0:	9c01      	ldr	r4, [sp, #4]
   1f8d2:	4bb1      	ldr	r3, [pc, #708]	; (1fb98 <_dtoa_r+0x328>)
   1f8d4:	bfb8      	it	lt
   1f8d6:	6032      	strlt	r2, [r6, #0]
   1f8d8:	43a3      	bics	r3, r4
   1f8da:	d11a      	bne.n	1f912 <_dtoa_r+0xa2>
   1f8dc:	f242 730f 	movw	r3, #9999	; 0x270f
   1f8e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f8e2:	6013      	str	r3, [r2, #0]
   1f8e4:	f3c4 0313 	ubfx	r3, r4, #0, #20
   1f8e8:	9a00      	ldr	r2, [sp, #0]
   1f8ea:	4313      	orrs	r3, r2
   1f8ec:	f000 8547 	beq.w	2037e <__kernel_ram_size+0x37e>
   1f8f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1f8f2:	b953      	cbnz	r3, 1f90a <_dtoa_r+0x9a>
   1f8f4:	4ba9      	ldr	r3, [pc, #676]	; (1fb9c <_dtoa_r+0x32c>)
   1f8f6:	e023      	b.n	1f940 <_dtoa_r+0xd0>
   1f8f8:	4ba9      	ldr	r3, [pc, #676]	; (1fba0 <_dtoa_r+0x330>)
   1f8fa:	9303      	str	r3, [sp, #12]
   1f8fc:	3308      	adds	r3, #8
   1f8fe:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1f900:	6013      	str	r3, [r2, #0]
   1f902:	9803      	ldr	r0, [sp, #12]
   1f904:	b019      	add	sp, #100	; 0x64
   1f906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f90a:	4ba4      	ldr	r3, [pc, #656]	; (1fb9c <_dtoa_r+0x32c>)
   1f90c:	9303      	str	r3, [sp, #12]
   1f90e:	3303      	adds	r3, #3
   1f910:	e7f5      	b.n	1f8fe <_dtoa_r+0x8e>
   1f912:	ed9d 7b00 	vldr	d7, [sp]
   1f916:	2200      	movs	r2, #0
   1f918:	2300      	movs	r3, #0
   1f91a:	ec51 0b17 	vmov	r0, r1, d7
   1f91e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   1f922:	f7fd f9b1 	bl	1cc88 <__aeabi_dcmpeq>
   1f926:	4607      	mov	r7, r0
   1f928:	b160      	cbz	r0, 1f944 <_dtoa_r+0xd4>
   1f92a:	2301      	movs	r3, #1
   1f92c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f92e:	6013      	str	r3, [r2, #0]
   1f930:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1f932:	2b00      	cmp	r3, #0
   1f934:	f000 8520 	beq.w	20378 <__kernel_ram_size+0x378>
   1f938:	4b9a      	ldr	r3, [pc, #616]	; (1fba4 <_dtoa_r+0x334>)
   1f93a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1f93c:	6013      	str	r3, [r2, #0]
   1f93e:	3b01      	subs	r3, #1
   1f940:	9303      	str	r3, [sp, #12]
   1f942:	e7de      	b.n	1f902 <_dtoa_r+0x92>
   1f944:	f3c4 560a 	ubfx	r6, r4, #20, #11
   1f948:	aa16      	add	r2, sp, #88	; 0x58
   1f94a:	a917      	add	r1, sp, #92	; 0x5c
   1f94c:	4658      	mov	r0, fp
   1f94e:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
   1f952:	f020 f8e3 	bl	3fb1c <__d2b>
   1f956:	4680      	mov	r8, r0
   1f958:	2e00      	cmp	r6, #0
   1f95a:	d07d      	beq.n	1fa58 <_dtoa_r+0x1e8>
   1f95c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f95e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   1f962:	9715      	str	r7, [sp, #84]	; 0x54
   1f964:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1f968:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   1f96c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
   1f970:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   1f974:	2200      	movs	r2, #0
   1f976:	4b8c      	ldr	r3, [pc, #560]	; (1fba8 <_dtoa_r+0x338>)
   1f978:	4620      	mov	r0, r4
   1f97a:	4629      	mov	r1, r5
   1f97c:	f7fc fd64 	bl	1c448 <__aeabi_dsub>
   1f980:	a37f      	add	r3, pc, #508	; (adr r3, 1fb80 <_dtoa_r+0x310>)
   1f982:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f986:	f7fc ff17 	bl	1c7b8 <__aeabi_dmul>
   1f98a:	a37f      	add	r3, pc, #508	; (adr r3, 1fb88 <_dtoa_r+0x318>)
   1f98c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f990:	f7fc fd5c 	bl	1c44c <__adddf3>
   1f994:	4604      	mov	r4, r0
   1f996:	460d      	mov	r5, r1
   1f998:	4630      	mov	r0, r6
   1f99a:	f7fc fea3 	bl	1c6e4 <__aeabi_i2d>
   1f99e:	a37c      	add	r3, pc, #496	; (adr r3, 1fb90 <_dtoa_r+0x320>)
   1f9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f9a4:	f7fc ff08 	bl	1c7b8 <__aeabi_dmul>
   1f9a8:	4602      	mov	r2, r0
   1f9aa:	460b      	mov	r3, r1
   1f9ac:	4620      	mov	r0, r4
   1f9ae:	4629      	mov	r1, r5
   1f9b0:	f7fc fd4c 	bl	1c44c <__adddf3>
   1f9b4:	4604      	mov	r4, r0
   1f9b6:	460d      	mov	r5, r1
   1f9b8:	f7fd f998 	bl	1ccec <__aeabi_d2iz>
   1f9bc:	2200      	movs	r2, #0
   1f9be:	4682      	mov	sl, r0
   1f9c0:	2300      	movs	r3, #0
   1f9c2:	4620      	mov	r0, r4
   1f9c4:	4629      	mov	r1, r5
   1f9c6:	f7fd f969 	bl	1cc9c <__aeabi_dcmplt>
   1f9ca:	b148      	cbz	r0, 1f9e0 <_dtoa_r+0x170>
   1f9cc:	4650      	mov	r0, sl
   1f9ce:	f7fc fe89 	bl	1c6e4 <__aeabi_i2d>
   1f9d2:	4622      	mov	r2, r4
   1f9d4:	462b      	mov	r3, r5
   1f9d6:	f7fd f957 	bl	1cc88 <__aeabi_dcmpeq>
   1f9da:	b908      	cbnz	r0, 1f9e0 <_dtoa_r+0x170>
   1f9dc:	f10a 3aff 	add.w	sl, sl, #4294967295
   1f9e0:	f1ba 0f16 	cmp.w	sl, #22
   1f9e4:	d857      	bhi.n	1fa96 <_dtoa_r+0x226>
   1f9e6:	4b71      	ldr	r3, [pc, #452]	; (1fbac <_dtoa_r+0x33c>)
   1f9e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1f9ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1f9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f9f4:	f7fd f952 	bl	1cc9c <__aeabi_dcmplt>
   1f9f8:	2800      	cmp	r0, #0
   1f9fa:	d04e      	beq.n	1fa9a <_dtoa_r+0x22a>
   1f9fc:	f10a 3aff 	add.w	sl, sl, #4294967295
   1fa00:	2300      	movs	r3, #0
   1fa02:	9311      	str	r3, [sp, #68]	; 0x44
   1fa04:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1fa06:	1b9e      	subs	r6, r3, r6
   1fa08:	1e73      	subs	r3, r6, #1
   1fa0a:	9307      	str	r3, [sp, #28]
   1fa0c:	bf49      	itett	mi
   1fa0e:	f1c6 0301 	rsbmi	r3, r6, #1
   1fa12:	2300      	movpl	r3, #0
   1fa14:	9306      	strmi	r3, [sp, #24]
   1fa16:	2300      	movmi	r3, #0
   1fa18:	bf54      	ite	pl
   1fa1a:	9306      	strpl	r3, [sp, #24]
   1fa1c:	9307      	strmi	r3, [sp, #28]
   1fa1e:	f1ba 0f00 	cmp.w	sl, #0
   1fa22:	db3c      	blt.n	1fa9e <_dtoa_r+0x22e>
   1fa24:	9b07      	ldr	r3, [sp, #28]
   1fa26:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   1fa2a:	4453      	add	r3, sl
   1fa2c:	9307      	str	r3, [sp, #28]
   1fa2e:	2300      	movs	r3, #0
   1fa30:	9309      	str	r3, [sp, #36]	; 0x24
   1fa32:	9b08      	ldr	r3, [sp, #32]
   1fa34:	2b09      	cmp	r3, #9
   1fa36:	f200 808d 	bhi.w	1fb54 <_dtoa_r+0x2e4>
   1fa3a:	2b05      	cmp	r3, #5
   1fa3c:	bfc5      	ittet	gt
   1fa3e:	3b04      	subgt	r3, #4
   1fa40:	2400      	movgt	r4, #0
   1fa42:	2401      	movle	r4, #1
   1fa44:	9308      	strgt	r3, [sp, #32]
   1fa46:	9b08      	ldr	r3, [sp, #32]
   1fa48:	3b02      	subs	r3, #2
   1fa4a:	2b03      	cmp	r3, #3
   1fa4c:	f200 808d 	bhi.w	1fb6a <_dtoa_r+0x2fa>
   1fa50:	e8df f003 	tbb	[pc, r3]
   1fa54:	7e3a3c2f 	.word	0x7e3a3c2f
   1fa58:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
   1fa5c:	441e      	add	r6, r3
   1fa5e:	f206 4032 	addw	r0, r6, #1074	; 0x432
   1fa62:	2820      	cmp	r0, #32
   1fa64:	dd11      	ble.n	1fa8a <_dtoa_r+0x21a>
   1fa66:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   1fa6a:	9b00      	ldr	r3, [sp, #0]
   1fa6c:	4084      	lsls	r4, r0
   1fa6e:	f206 4012 	addw	r0, r6, #1042	; 0x412
   1fa72:	fa23 f000 	lsr.w	r0, r3, r0
   1fa76:	4320      	orrs	r0, r4
   1fa78:	f7fc fe24 	bl	1c6c4 <__aeabi_ui2d>
   1fa7c:	2301      	movs	r3, #1
   1fa7e:	4604      	mov	r4, r0
   1fa80:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
   1fa84:	3e01      	subs	r6, #1
   1fa86:	9315      	str	r3, [sp, #84]	; 0x54
   1fa88:	e774      	b.n	1f974 <_dtoa_r+0x104>
   1fa8a:	f1c0 0020 	rsb	r0, r0, #32
   1fa8e:	9b00      	ldr	r3, [sp, #0]
   1fa90:	fa03 f000 	lsl.w	r0, r3, r0
   1fa94:	e7f0      	b.n	1fa78 <_dtoa_r+0x208>
   1fa96:	2301      	movs	r3, #1
   1fa98:	e7b3      	b.n	1fa02 <_dtoa_r+0x192>
   1fa9a:	9011      	str	r0, [sp, #68]	; 0x44
   1fa9c:	e7b2      	b.n	1fa04 <_dtoa_r+0x194>
   1fa9e:	9b06      	ldr	r3, [sp, #24]
   1faa0:	eba3 030a 	sub.w	r3, r3, sl
   1faa4:	9306      	str	r3, [sp, #24]
   1faa6:	f1ca 0300 	rsb	r3, sl, #0
   1faaa:	9309      	str	r3, [sp, #36]	; 0x24
   1faac:	2300      	movs	r3, #0
   1faae:	9310      	str	r3, [sp, #64]	; 0x40
   1fab0:	e7bf      	b.n	1fa32 <_dtoa_r+0x1c2>
   1fab2:	2300      	movs	r3, #0
   1fab4:	930c      	str	r3, [sp, #48]	; 0x30
   1fab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fab8:	2b00      	cmp	r3, #0
   1faba:	dc59      	bgt.n	1fb70 <_dtoa_r+0x300>
   1fabc:	2301      	movs	r3, #1
   1fabe:	4699      	mov	r9, r3
   1fac0:	461a      	mov	r2, r3
   1fac2:	9304      	str	r3, [sp, #16]
   1fac4:	920d      	str	r2, [sp, #52]	; 0x34
   1fac6:	e00c      	b.n	1fae2 <_dtoa_r+0x272>
   1fac8:	2301      	movs	r3, #1
   1faca:	e7f3      	b.n	1fab4 <_dtoa_r+0x244>
   1facc:	2300      	movs	r3, #0
   1face:	930c      	str	r3, [sp, #48]	; 0x30
   1fad0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fad2:	4453      	add	r3, sl
   1fad4:	f103 0901 	add.w	r9, r3, #1
   1fad8:	9304      	str	r3, [sp, #16]
   1fada:	464b      	mov	r3, r9
   1fadc:	2b01      	cmp	r3, #1
   1fade:	bfb8      	it	lt
   1fae0:	2301      	movlt	r3, #1
   1fae2:	2200      	movs	r2, #0
   1fae4:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
   1fae8:	606a      	str	r2, [r5, #4]
   1faea:	2204      	movs	r2, #4
   1faec:	f102 0014 	add.w	r0, r2, #20
   1faf0:	6869      	ldr	r1, [r5, #4]
   1faf2:	4298      	cmp	r0, r3
   1faf4:	d940      	bls.n	1fb78 <_dtoa_r+0x308>
   1faf6:	4658      	mov	r0, fp
   1faf8:	f01f fd95 	bl	3f626 <_Balloc>
   1fafc:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1fb00:	6028      	str	r0, [r5, #0]
   1fb02:	f1b9 0f0e 	cmp.w	r9, #14
   1fb06:	681b      	ldr	r3, [r3, #0]
   1fb08:	9303      	str	r3, [sp, #12]
   1fb0a:	f200 80d4 	bhi.w	1fcb6 <_dtoa_r+0x446>
   1fb0e:	2c00      	cmp	r4, #0
   1fb10:	f000 80d1 	beq.w	1fcb6 <_dtoa_r+0x446>
   1fb14:	f1ba 0f00 	cmp.w	sl, #0
   1fb18:	dd66      	ble.n	1fbe8 <_dtoa_r+0x378>
   1fb1a:	4a24      	ldr	r2, [pc, #144]	; (1fbac <_dtoa_r+0x33c>)
   1fb1c:	f00a 030f 	and.w	r3, sl, #15
   1fb20:	ea4f 142a 	mov.w	r4, sl, asr #4
   1fb24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1fb28:	06e2      	lsls	r2, r4, #27
   1fb2a:	ed93 7b00 	vldr	d7, [r3]
   1fb2e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1fb32:	d557      	bpl.n	1fbe4 <_dtoa_r+0x374>
   1fb34:	4b1e      	ldr	r3, [pc, #120]	; (1fbb0 <_dtoa_r+0x340>)
   1fb36:	f004 040f 	and.w	r4, r4, #15
   1fb3a:	2603      	movs	r6, #3
   1fb3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1fb40:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1fb44:	f7fc ff62 	bl	1ca0c <__aeabi_ddiv>
   1fb48:	e9cd 0100 	strd	r0, r1, [sp]
   1fb4c:	4d18      	ldr	r5, [pc, #96]	; (1fbb0 <_dtoa_r+0x340>)
   1fb4e:	e03e      	b.n	1fbce <_dtoa_r+0x35e>
   1fb50:	2301      	movs	r3, #1
   1fb52:	e7bc      	b.n	1face <_dtoa_r+0x25e>
   1fb54:	2401      	movs	r4, #1
   1fb56:	2300      	movs	r3, #0
   1fb58:	940c      	str	r4, [sp, #48]	; 0x30
   1fb5a:	9308      	str	r3, [sp, #32]
   1fb5c:	f04f 33ff 	mov.w	r3, #4294967295
   1fb60:	2200      	movs	r2, #0
   1fb62:	9304      	str	r3, [sp, #16]
   1fb64:	4699      	mov	r9, r3
   1fb66:	2312      	movs	r3, #18
   1fb68:	e7ac      	b.n	1fac4 <_dtoa_r+0x254>
   1fb6a:	2301      	movs	r3, #1
   1fb6c:	930c      	str	r3, [sp, #48]	; 0x30
   1fb6e:	e7f5      	b.n	1fb5c <_dtoa_r+0x2ec>
   1fb70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fb72:	9304      	str	r3, [sp, #16]
   1fb74:	4699      	mov	r9, r3
   1fb76:	e7b4      	b.n	1fae2 <_dtoa_r+0x272>
   1fb78:	3101      	adds	r1, #1
   1fb7a:	0052      	lsls	r2, r2, #1
   1fb7c:	6069      	str	r1, [r5, #4]
   1fb7e:	e7b5      	b.n	1faec <_dtoa_r+0x27c>
   1fb80:	636f4361 	.word	0x636f4361
   1fb84:	3fd287a7 	.word	0x3fd287a7
   1fb88:	8b60c8b3 	.word	0x8b60c8b3
   1fb8c:	3fc68a28 	.word	0x3fc68a28
   1fb90:	509f79fb 	.word	0x509f79fb
   1fb94:	3fd34413 	.word	0x3fd34413
   1fb98:	7ff00000 	.word	0x7ff00000
   1fb9c:	00046dcc 	.word	0x00046dcc
   1fba0:	00046dc3 	.word	0x00046dc3
   1fba4:	00046835 	.word	0x00046835
   1fba8:	3ff80000 	.word	0x3ff80000
   1fbac:	000404d8 	.word	0x000404d8
   1fbb0:	000404b0 	.word	0x000404b0
   1fbb4:	07e3      	lsls	r3, r4, #31
   1fbb6:	d508      	bpl.n	1fbca <_dtoa_r+0x35a>
   1fbb8:	3601      	adds	r6, #1
   1fbba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1fbbe:	e9d5 2300 	ldrd	r2, r3, [r5]
   1fbc2:	f7fc fdf9 	bl	1c7b8 <__aeabi_dmul>
   1fbc6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1fbca:	1064      	asrs	r4, r4, #1
   1fbcc:	3508      	adds	r5, #8
   1fbce:	2c00      	cmp	r4, #0
   1fbd0:	d1f0      	bne.n	1fbb4 <_dtoa_r+0x344>
   1fbd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1fbd6:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fbda:	f7fc ff17 	bl	1ca0c <__aeabi_ddiv>
   1fbde:	e9cd 0100 	strd	r0, r1, [sp]
   1fbe2:	e01a      	b.n	1fc1a <_dtoa_r+0x3aa>
   1fbe4:	2602      	movs	r6, #2
   1fbe6:	e7b1      	b.n	1fb4c <_dtoa_r+0x2dc>
   1fbe8:	f000 809f 	beq.w	1fd2a <_dtoa_r+0x4ba>
   1fbec:	f1ca 0400 	rsb	r4, sl, #0
   1fbf0:	4b9e      	ldr	r3, [pc, #632]	; (1fe6c <_dtoa_r+0x5fc>)
   1fbf2:	4d9f      	ldr	r5, [pc, #636]	; (1fe70 <_dtoa_r+0x600>)
   1fbf4:	2602      	movs	r6, #2
   1fbf6:	f004 020f 	and.w	r2, r4, #15
   1fbfa:	1124      	asrs	r4, r4, #4
   1fbfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1fc00:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1fc04:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fc08:	f7fc fdd6 	bl	1c7b8 <__aeabi_dmul>
   1fc0c:	2300      	movs	r3, #0
   1fc0e:	e9cd 0100 	strd	r0, r1, [sp]
   1fc12:	2c00      	cmp	r4, #0
   1fc14:	d17e      	bne.n	1fd14 <_dtoa_r+0x4a4>
   1fc16:	2b00      	cmp	r3, #0
   1fc18:	d1e1      	bne.n	1fbde <_dtoa_r+0x36e>
   1fc1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fc1c:	2b00      	cmp	r3, #0
   1fc1e:	f000 8086 	beq.w	1fd2e <_dtoa_r+0x4be>
   1fc22:	2200      	movs	r2, #0
   1fc24:	4b93      	ldr	r3, [pc, #588]	; (1fe74 <_dtoa_r+0x604>)
   1fc26:	e9dd 4500 	ldrd	r4, r5, [sp]
   1fc2a:	4620      	mov	r0, r4
   1fc2c:	4629      	mov	r1, r5
   1fc2e:	f7fd f835 	bl	1cc9c <__aeabi_dcmplt>
   1fc32:	2800      	cmp	r0, #0
   1fc34:	d07b      	beq.n	1fd2e <_dtoa_r+0x4be>
   1fc36:	f1b9 0f00 	cmp.w	r9, #0
   1fc3a:	d078      	beq.n	1fd2e <_dtoa_r+0x4be>
   1fc3c:	9b04      	ldr	r3, [sp, #16]
   1fc3e:	2b00      	cmp	r3, #0
   1fc40:	dd35      	ble.n	1fcae <_dtoa_r+0x43e>
   1fc42:	f10a 33ff 	add.w	r3, sl, #4294967295
   1fc46:	4620      	mov	r0, r4
   1fc48:	2200      	movs	r2, #0
   1fc4a:	4629      	mov	r1, r5
   1fc4c:	930a      	str	r3, [sp, #40]	; 0x28
   1fc4e:	3601      	adds	r6, #1
   1fc50:	4b89      	ldr	r3, [pc, #548]	; (1fe78 <_dtoa_r+0x608>)
   1fc52:	f7fc fdb1 	bl	1c7b8 <__aeabi_dmul>
   1fc56:	9c04      	ldr	r4, [sp, #16]
   1fc58:	e9cd 0100 	strd	r0, r1, [sp]
   1fc5c:	4630      	mov	r0, r6
   1fc5e:	f7fc fd41 	bl	1c6e4 <__aeabi_i2d>
   1fc62:	e9dd 2300 	ldrd	r2, r3, [sp]
   1fc66:	f7fc fda7 	bl	1c7b8 <__aeabi_dmul>
   1fc6a:	2200      	movs	r2, #0
   1fc6c:	4b83      	ldr	r3, [pc, #524]	; (1fe7c <_dtoa_r+0x60c>)
   1fc6e:	f7fc fbed 	bl	1c44c <__adddf3>
   1fc72:	4606      	mov	r6, r0
   1fc74:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   1fc78:	2c00      	cmp	r4, #0
   1fc7a:	d15c      	bne.n	1fd36 <_dtoa_r+0x4c6>
   1fc7c:	2200      	movs	r2, #0
   1fc7e:	4b80      	ldr	r3, [pc, #512]	; (1fe80 <_dtoa_r+0x610>)
   1fc80:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fc84:	f7fc fbe0 	bl	1c448 <__aeabi_dsub>
   1fc88:	4632      	mov	r2, r6
   1fc8a:	463b      	mov	r3, r7
   1fc8c:	e9cd 0100 	strd	r0, r1, [sp]
   1fc90:	f7fd f822 	bl	1ccd8 <__aeabi_dcmpgt>
   1fc94:	2800      	cmp	r0, #0
   1fc96:	f040 8289 	bne.w	201ac <__kernel_ram_size+0x1ac>
   1fc9a:	4632      	mov	r2, r6
   1fc9c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1fca0:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fca4:	f7fc fffa 	bl	1cc9c <__aeabi_dcmplt>
   1fca8:	2800      	cmp	r0, #0
   1fcaa:	f040 827d 	bne.w	201a8 <__kernel_ram_size+0x1a8>
   1fcae:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   1fcb2:	e9cd 3400 	strd	r3, r4, [sp]
   1fcb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1fcb8:	2b00      	cmp	r3, #0
   1fcba:	f2c0 814c 	blt.w	1ff56 <_dtoa_r+0x6e6>
   1fcbe:	f1ba 0f0e 	cmp.w	sl, #14
   1fcc2:	f300 8148 	bgt.w	1ff56 <_dtoa_r+0x6e6>
   1fcc6:	4b69      	ldr	r3, [pc, #420]	; (1fe6c <_dtoa_r+0x5fc>)
   1fcc8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1fccc:	ed93 7b00 	vldr	d7, [r3]
   1fcd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fcd2:	2b00      	cmp	r3, #0
   1fcd4:	ed8d 7b04 	vstr	d7, [sp, #16]
   1fcd8:	f280 80d6 	bge.w	1fe88 <_dtoa_r+0x618>
   1fcdc:	f1b9 0f00 	cmp.w	r9, #0
   1fce0:	f300 80d2 	bgt.w	1fe88 <_dtoa_r+0x618>
   1fce4:	f040 825f 	bne.w	201a6 <__kernel_ram_size+0x1a6>
   1fce8:	2200      	movs	r2, #0
   1fcea:	4b65      	ldr	r3, [pc, #404]	; (1fe80 <_dtoa_r+0x610>)
   1fcec:	464c      	mov	r4, r9
   1fcee:	464e      	mov	r6, r9
   1fcf0:	ec51 0b17 	vmov	r0, r1, d7
   1fcf4:	f7fc fd60 	bl	1c7b8 <__aeabi_dmul>
   1fcf8:	e9dd 2300 	ldrd	r2, r3, [sp]
   1fcfc:	f7fc ffe2 	bl	1ccc4 <__aeabi_dcmpge>
   1fd00:	2800      	cmp	r0, #0
   1fd02:	f040 8238 	bne.w	20176 <__kernel_ram_size+0x176>
   1fd06:	9d03      	ldr	r5, [sp, #12]
   1fd08:	2331      	movs	r3, #49	; 0x31
   1fd0a:	f10a 0a01 	add.w	sl, sl, #1
   1fd0e:	f805 3b01 	strb.w	r3, [r5], #1
   1fd12:	e234      	b.n	2017e <__kernel_ram_size+0x17e>
   1fd14:	07e7      	lsls	r7, r4, #31
   1fd16:	d505      	bpl.n	1fd24 <_dtoa_r+0x4b4>
   1fd18:	3601      	adds	r6, #1
   1fd1a:	e9d5 2300 	ldrd	r2, r3, [r5]
   1fd1e:	f7fc fd4b 	bl	1c7b8 <__aeabi_dmul>
   1fd22:	2301      	movs	r3, #1
   1fd24:	1064      	asrs	r4, r4, #1
   1fd26:	3508      	adds	r5, #8
   1fd28:	e773      	b.n	1fc12 <_dtoa_r+0x3a2>
   1fd2a:	2602      	movs	r6, #2
   1fd2c:	e775      	b.n	1fc1a <_dtoa_r+0x3aa>
   1fd2e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1fd32:	464c      	mov	r4, r9
   1fd34:	e792      	b.n	1fc5c <_dtoa_r+0x3ec>
   1fd36:	4b4d      	ldr	r3, [pc, #308]	; (1fe6c <_dtoa_r+0x5fc>)
   1fd38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1fd3c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   1fd40:	9b03      	ldr	r3, [sp, #12]
   1fd42:	441c      	add	r4, r3
   1fd44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fd46:	2b00      	cmp	r3, #0
   1fd48:	d046      	beq.n	1fdd8 <_dtoa_r+0x568>
   1fd4a:	4602      	mov	r2, r0
   1fd4c:	460b      	mov	r3, r1
   1fd4e:	2000      	movs	r0, #0
   1fd50:	494c      	ldr	r1, [pc, #304]	; (1fe84 <_dtoa_r+0x614>)
   1fd52:	f7fc fe5b 	bl	1ca0c <__aeabi_ddiv>
   1fd56:	4632      	mov	r2, r6
   1fd58:	463b      	mov	r3, r7
   1fd5a:	f7fc fb75 	bl	1c448 <__aeabi_dsub>
   1fd5e:	9d03      	ldr	r5, [sp, #12]
   1fd60:	4606      	mov	r6, r0
   1fd62:	460f      	mov	r7, r1
   1fd64:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fd68:	f7fc ffc0 	bl	1ccec <__aeabi_d2iz>
   1fd6c:	9012      	str	r0, [sp, #72]	; 0x48
   1fd6e:	f7fc fcb9 	bl	1c6e4 <__aeabi_i2d>
   1fd72:	4602      	mov	r2, r0
   1fd74:	460b      	mov	r3, r1
   1fd76:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fd7a:	f7fc fb65 	bl	1c448 <__aeabi_dsub>
   1fd7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1fd80:	4632      	mov	r2, r6
   1fd82:	3330      	adds	r3, #48	; 0x30
   1fd84:	f805 3b01 	strb.w	r3, [r5], #1
   1fd88:	463b      	mov	r3, r7
   1fd8a:	e9cd 0100 	strd	r0, r1, [sp]
   1fd8e:	f7fc ff85 	bl	1cc9c <__aeabi_dcmplt>
   1fd92:	2800      	cmp	r0, #0
   1fd94:	d15f      	bne.n	1fe56 <_dtoa_r+0x5e6>
   1fd96:	2000      	movs	r0, #0
   1fd98:	4936      	ldr	r1, [pc, #216]	; (1fe74 <_dtoa_r+0x604>)
   1fd9a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1fd9e:	f7fc fb53 	bl	1c448 <__aeabi_dsub>
   1fda2:	4632      	mov	r2, r6
   1fda4:	463b      	mov	r3, r7
   1fda6:	f7fc ff79 	bl	1cc9c <__aeabi_dcmplt>
   1fdaa:	2800      	cmp	r0, #0
   1fdac:	f040 80b2 	bne.w	1ff14 <_dtoa_r+0x6a4>
   1fdb0:	42a5      	cmp	r5, r4
   1fdb2:	f43f af7c 	beq.w	1fcae <_dtoa_r+0x43e>
   1fdb6:	2200      	movs	r2, #0
   1fdb8:	4b2f      	ldr	r3, [pc, #188]	; (1fe78 <_dtoa_r+0x608>)
   1fdba:	4630      	mov	r0, r6
   1fdbc:	4639      	mov	r1, r7
   1fdbe:	f7fc fcfb 	bl	1c7b8 <__aeabi_dmul>
   1fdc2:	2200      	movs	r2, #0
   1fdc4:	4606      	mov	r6, r0
   1fdc6:	460f      	mov	r7, r1
   1fdc8:	4b2b      	ldr	r3, [pc, #172]	; (1fe78 <_dtoa_r+0x608>)
   1fdca:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fdce:	f7fc fcf3 	bl	1c7b8 <__aeabi_dmul>
   1fdd2:	e9cd 0100 	strd	r0, r1, [sp]
   1fdd6:	e7c5      	b.n	1fd64 <_dtoa_r+0x4f4>
   1fdd8:	4632      	mov	r2, r6
   1fdda:	463b      	mov	r3, r7
   1fddc:	f7fc fcec 	bl	1c7b8 <__aeabi_dmul>
   1fde0:	4625      	mov	r5, r4
   1fde2:	9e03      	ldr	r6, [sp, #12]
   1fde4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   1fde8:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fdec:	f7fc ff7e 	bl	1ccec <__aeabi_d2iz>
   1fdf0:	4607      	mov	r7, r0
   1fdf2:	f7fc fc77 	bl	1c6e4 <__aeabi_i2d>
   1fdf6:	4602      	mov	r2, r0
   1fdf8:	3730      	adds	r7, #48	; 0x30
   1fdfa:	460b      	mov	r3, r1
   1fdfc:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fe00:	f7fc fb22 	bl	1c448 <__aeabi_dsub>
   1fe04:	f806 7b01 	strb.w	r7, [r6], #1
   1fe08:	42a6      	cmp	r6, r4
   1fe0a:	f04f 0200 	mov.w	r2, #0
   1fe0e:	e9cd 0100 	strd	r0, r1, [sp]
   1fe12:	d125      	bne.n	1fe60 <_dtoa_r+0x5f0>
   1fe14:	4b1b      	ldr	r3, [pc, #108]	; (1fe84 <_dtoa_r+0x614>)
   1fe16:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1fe1a:	f7fc fb17 	bl	1c44c <__adddf3>
   1fe1e:	4602      	mov	r2, r0
   1fe20:	460b      	mov	r3, r1
   1fe22:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fe26:	f7fc ff57 	bl	1ccd8 <__aeabi_dcmpgt>
   1fe2a:	2800      	cmp	r0, #0
   1fe2c:	d172      	bne.n	1ff14 <_dtoa_r+0x6a4>
   1fe2e:	2000      	movs	r0, #0
   1fe30:	4914      	ldr	r1, [pc, #80]	; (1fe84 <_dtoa_r+0x614>)
   1fe32:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   1fe36:	f7fc fb07 	bl	1c448 <__aeabi_dsub>
   1fe3a:	4602      	mov	r2, r0
   1fe3c:	460b      	mov	r3, r1
   1fe3e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fe42:	f7fc ff2b 	bl	1cc9c <__aeabi_dcmplt>
   1fe46:	2800      	cmp	r0, #0
   1fe48:	f43f af31 	beq.w	1fcae <_dtoa_r+0x43e>
   1fe4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1fe50:	1e6a      	subs	r2, r5, #1
   1fe52:	2b30      	cmp	r3, #48	; 0x30
   1fe54:	d002      	beq.n	1fe5c <_dtoa_r+0x5ec>
   1fe56:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1fe5a:	e049      	b.n	1fef0 <_dtoa_r+0x680>
   1fe5c:	4615      	mov	r5, r2
   1fe5e:	e7f5      	b.n	1fe4c <_dtoa_r+0x5dc>
   1fe60:	4b05      	ldr	r3, [pc, #20]	; (1fe78 <_dtoa_r+0x608>)
   1fe62:	f7fc fca9 	bl	1c7b8 <__aeabi_dmul>
   1fe66:	e9cd 0100 	strd	r0, r1, [sp]
   1fe6a:	e7bd      	b.n	1fde8 <_dtoa_r+0x578>
   1fe6c:	000404d8 	.word	0x000404d8
   1fe70:	000404b0 	.word	0x000404b0
   1fe74:	3ff00000 	.word	0x3ff00000
   1fe78:	40240000 	.word	0x40240000
   1fe7c:	401c0000 	.word	0x401c0000
   1fe80:	40140000 	.word	0x40140000
   1fe84:	3fe00000 	.word	0x3fe00000
   1fe88:	e9dd 6700 	ldrd	r6, r7, [sp]
   1fe8c:	9d03      	ldr	r5, [sp, #12]
   1fe8e:	4630      	mov	r0, r6
   1fe90:	4639      	mov	r1, r7
   1fe92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fe96:	f7fc fdb9 	bl	1ca0c <__aeabi_ddiv>
   1fe9a:	f7fc ff27 	bl	1ccec <__aeabi_d2iz>
   1fe9e:	4604      	mov	r4, r0
   1fea0:	f7fc fc20 	bl	1c6e4 <__aeabi_i2d>
   1fea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fea8:	f7fc fc86 	bl	1c7b8 <__aeabi_dmul>
   1feac:	4602      	mov	r2, r0
   1feae:	4630      	mov	r0, r6
   1feb0:	f104 0630 	add.w	r6, r4, #48	; 0x30
   1feb4:	460b      	mov	r3, r1
   1feb6:	4639      	mov	r1, r7
   1feb8:	f7fc fac6 	bl	1c448 <__aeabi_dsub>
   1febc:	f805 6b01 	strb.w	r6, [r5], #1
   1fec0:	9e03      	ldr	r6, [sp, #12]
   1fec2:	4602      	mov	r2, r0
   1fec4:	460b      	mov	r3, r1
   1fec6:	1bae      	subs	r6, r5, r6
   1fec8:	45b1      	cmp	r9, r6
   1feca:	d137      	bne.n	1ff3c <_dtoa_r+0x6cc>
   1fecc:	f7fc fabe 	bl	1c44c <__adddf3>
   1fed0:	4606      	mov	r6, r0
   1fed2:	460f      	mov	r7, r1
   1fed4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fed8:	f7fc fefe 	bl	1ccd8 <__aeabi_dcmpgt>
   1fedc:	b9c0      	cbnz	r0, 1ff10 <_dtoa_r+0x6a0>
   1fede:	4630      	mov	r0, r6
   1fee0:	4639      	mov	r1, r7
   1fee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fee6:	f7fc fecf 	bl	1cc88 <__aeabi_dcmpeq>
   1feea:	b108      	cbz	r0, 1fef0 <_dtoa_r+0x680>
   1feec:	07e1      	lsls	r1, r4, #31
   1feee:	d40f      	bmi.n	1ff10 <_dtoa_r+0x6a0>
   1fef0:	4641      	mov	r1, r8
   1fef2:	4658      	mov	r0, fp
   1fef4:	f01f fbcb 	bl	3f68e <_Bfree>
   1fef8:	2300      	movs	r3, #0
   1fefa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1fefc:	702b      	strb	r3, [r5, #0]
   1fefe:	f10a 0301 	add.w	r3, sl, #1
   1ff02:	6013      	str	r3, [r2, #0]
   1ff04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1ff06:	2b00      	cmp	r3, #0
   1ff08:	f43f acfb 	beq.w	1f902 <_dtoa_r+0x92>
   1ff0c:	601d      	str	r5, [r3, #0]
   1ff0e:	e4f8      	b.n	1f902 <_dtoa_r+0x92>
   1ff10:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1ff14:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1ff18:	1e6b      	subs	r3, r5, #1
   1ff1a:	2a39      	cmp	r2, #57	; 0x39
   1ff1c:	d108      	bne.n	1ff30 <_dtoa_r+0x6c0>
   1ff1e:	9a03      	ldr	r2, [sp, #12]
   1ff20:	429a      	cmp	r2, r3
   1ff22:	d109      	bne.n	1ff38 <_dtoa_r+0x6c8>
   1ff24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ff26:	9903      	ldr	r1, [sp, #12]
   1ff28:	3201      	adds	r2, #1
   1ff2a:	920a      	str	r2, [sp, #40]	; 0x28
   1ff2c:	2230      	movs	r2, #48	; 0x30
   1ff2e:	700a      	strb	r2, [r1, #0]
   1ff30:	781a      	ldrb	r2, [r3, #0]
   1ff32:	3201      	adds	r2, #1
   1ff34:	701a      	strb	r2, [r3, #0]
   1ff36:	e78e      	b.n	1fe56 <_dtoa_r+0x5e6>
   1ff38:	461d      	mov	r5, r3
   1ff3a:	e7eb      	b.n	1ff14 <_dtoa_r+0x6a4>
   1ff3c:	2200      	movs	r2, #0
   1ff3e:	4b9d      	ldr	r3, [pc, #628]	; (201b4 <__kernel_ram_size+0x1b4>)
   1ff40:	f7fc fc3a 	bl	1c7b8 <__aeabi_dmul>
   1ff44:	2200      	movs	r2, #0
   1ff46:	2300      	movs	r3, #0
   1ff48:	4606      	mov	r6, r0
   1ff4a:	460f      	mov	r7, r1
   1ff4c:	f7fc fe9c 	bl	1cc88 <__aeabi_dcmpeq>
   1ff50:	2800      	cmp	r0, #0
   1ff52:	d09c      	beq.n	1fe8e <_dtoa_r+0x61e>
   1ff54:	e7cc      	b.n	1fef0 <_dtoa_r+0x680>
   1ff56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ff58:	2a00      	cmp	r2, #0
   1ff5a:	f000 80cb 	beq.w	200f4 <__kernel_ram_size+0xf4>
   1ff5e:	9a08      	ldr	r2, [sp, #32]
   1ff60:	2a01      	cmp	r2, #1
   1ff62:	f300 80ae 	bgt.w	200c2 <__kernel_ram_size+0xc2>
   1ff66:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1ff68:	2a00      	cmp	r2, #0
   1ff6a:	f000 80a6 	beq.w	200ba <__kernel_ram_size+0xba>
   1ff6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1ff72:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1ff74:	9d06      	ldr	r5, [sp, #24]
   1ff76:	9a06      	ldr	r2, [sp, #24]
   1ff78:	2101      	movs	r1, #1
   1ff7a:	4658      	mov	r0, fp
   1ff7c:	441a      	add	r2, r3
   1ff7e:	9206      	str	r2, [sp, #24]
   1ff80:	9a07      	ldr	r2, [sp, #28]
   1ff82:	441a      	add	r2, r3
   1ff84:	9207      	str	r2, [sp, #28]
   1ff86:	f01f fc64 	bl	3f852 <__i2b>
   1ff8a:	4606      	mov	r6, r0
   1ff8c:	2d00      	cmp	r5, #0
   1ff8e:	dd0c      	ble.n	1ffaa <_dtoa_r+0x73a>
   1ff90:	9b07      	ldr	r3, [sp, #28]
   1ff92:	2b00      	cmp	r3, #0
   1ff94:	dd09      	ble.n	1ffaa <_dtoa_r+0x73a>
   1ff96:	42ab      	cmp	r3, r5
   1ff98:	9a06      	ldr	r2, [sp, #24]
   1ff9a:	bfa8      	it	ge
   1ff9c:	462b      	movge	r3, r5
   1ff9e:	1ad2      	subs	r2, r2, r3
   1ffa0:	1aed      	subs	r5, r5, r3
   1ffa2:	9206      	str	r2, [sp, #24]
   1ffa4:	9a07      	ldr	r2, [sp, #28]
   1ffa6:	1ad3      	subs	r3, r2, r3
   1ffa8:	9307      	str	r3, [sp, #28]
   1ffaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ffac:	b1f3      	cbz	r3, 1ffec <_dtoa_r+0x77c>
   1ffae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ffb0:	2b00      	cmp	r3, #0
   1ffb2:	f000 80a3 	beq.w	200fc <__kernel_ram_size+0xfc>
   1ffb6:	2c00      	cmp	r4, #0
   1ffb8:	dd10      	ble.n	1ffdc <_dtoa_r+0x76c>
   1ffba:	4631      	mov	r1, r6
   1ffbc:	4622      	mov	r2, r4
   1ffbe:	4658      	mov	r0, fp
   1ffc0:	f01b fb54 	bl	3b66c <__pow5mult>
   1ffc4:	4642      	mov	r2, r8
   1ffc6:	4601      	mov	r1, r0
   1ffc8:	4606      	mov	r6, r0
   1ffca:	4658      	mov	r0, fp
   1ffcc:	f01f fc4a 	bl	3f864 <__multiply>
   1ffd0:	4607      	mov	r7, r0
   1ffd2:	4641      	mov	r1, r8
   1ffd4:	4658      	mov	r0, fp
   1ffd6:	46b8      	mov	r8, r7
   1ffd8:	f01f fb59 	bl	3f68e <_Bfree>
   1ffdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ffde:	1b1a      	subs	r2, r3, r4
   1ffe0:	d004      	beq.n	1ffec <_dtoa_r+0x77c>
   1ffe2:	4641      	mov	r1, r8
   1ffe4:	4658      	mov	r0, fp
   1ffe6:	f01b fb41 	bl	3b66c <__pow5mult>
   1ffea:	4680      	mov	r8, r0
   1ffec:	2101      	movs	r1, #1
   1ffee:	4658      	mov	r0, fp
   1fff0:	f01f fc2f 	bl	3f852 <__i2b>
   1fff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1fff6:	4604      	mov	r4, r0
   1fff8:	2b00      	cmp	r3, #0
   1fffa:	f340 8081 	ble.w	20100 <__kernel_ram_size+0x100>
   1fffe:	461a      	mov	r2, r3
   20000:	4601      	mov	r1, r0
   20002:	4658      	mov	r0, fp
   20004:	f01b fb32 	bl	3b66c <__pow5mult>
   20008:	9b08      	ldr	r3, [sp, #32]
   2000a:	4604      	mov	r4, r0
   2000c:	2b01      	cmp	r3, #1
   2000e:	dd7a      	ble.n	20106 <__kernel_ram_size+0x106>
   20010:	2700      	movs	r7, #0
   20012:	6923      	ldr	r3, [r4, #16]
   20014:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   20018:	6918      	ldr	r0, [r3, #16]
   2001a:	f01f fbca 	bl	3f7b2 <__hi0bits>
   2001e:	f1c0 0020 	rsb	r0, r0, #32
   20022:	9b07      	ldr	r3, [sp, #28]
   20024:	4418      	add	r0, r3
   20026:	f010 001f 	ands.w	r0, r0, #31
   2002a:	f000 808b 	beq.w	20144 <__kernel_ram_size+0x144>
   2002e:	f1c0 0320 	rsb	r3, r0, #32
   20032:	2b04      	cmp	r3, #4
   20034:	f340 8084 	ble.w	20140 <__kernel_ram_size+0x140>
   20038:	f1c0 001c 	rsb	r0, r0, #28
   2003c:	9b06      	ldr	r3, [sp, #24]
   2003e:	4405      	add	r5, r0
   20040:	4403      	add	r3, r0
   20042:	9306      	str	r3, [sp, #24]
   20044:	9b07      	ldr	r3, [sp, #28]
   20046:	4403      	add	r3, r0
   20048:	9307      	str	r3, [sp, #28]
   2004a:	9b06      	ldr	r3, [sp, #24]
   2004c:	2b00      	cmp	r3, #0
   2004e:	dd05      	ble.n	2005c <__kernel_ram_size+0x5c>
   20050:	4641      	mov	r1, r8
   20052:	461a      	mov	r2, r3
   20054:	4658      	mov	r0, fp
   20056:	f01f fc94 	bl	3f982 <__lshift>
   2005a:	4680      	mov	r8, r0
   2005c:	9b07      	ldr	r3, [sp, #28]
   2005e:	2b00      	cmp	r3, #0
   20060:	dd05      	ble.n	2006e <__kernel_ram_size+0x6e>
   20062:	4621      	mov	r1, r4
   20064:	461a      	mov	r2, r3
   20066:	4658      	mov	r0, fp
   20068:	f01f fc8b 	bl	3f982 <__lshift>
   2006c:	4604      	mov	r4, r0
   2006e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20070:	2b00      	cmp	r3, #0
   20072:	d069      	beq.n	20148 <__kernel_ram_size+0x148>
   20074:	4621      	mov	r1, r4
   20076:	4640      	mov	r0, r8
   20078:	f01f fcd6 	bl	3fa28 <__mcmp>
   2007c:	2800      	cmp	r0, #0
   2007e:	da63      	bge.n	20148 <__kernel_ram_size+0x148>
   20080:	2300      	movs	r3, #0
   20082:	4641      	mov	r1, r8
   20084:	220a      	movs	r2, #10
   20086:	4658      	mov	r0, fp
   20088:	f01f fb18 	bl	3f6bc <__multadd>
   2008c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2008e:	f10a 3aff 	add.w	sl, sl, #4294967295
   20092:	4680      	mov	r8, r0
   20094:	2b00      	cmp	r3, #0
   20096:	f000 8179 	beq.w	2038c <__kernel_ram_size+0x38c>
   2009a:	2300      	movs	r3, #0
   2009c:	4631      	mov	r1, r6
   2009e:	220a      	movs	r2, #10
   200a0:	4658      	mov	r0, fp
   200a2:	f01f fb0b 	bl	3f6bc <__multadd>
   200a6:	9b04      	ldr	r3, [sp, #16]
   200a8:	4606      	mov	r6, r0
   200aa:	2b00      	cmp	r3, #0
   200ac:	f300 808a 	bgt.w	201c4 <__kernel_ram_size+0x1c4>
   200b0:	9b08      	ldr	r3, [sp, #32]
   200b2:	2b02      	cmp	r3, #2
   200b4:	f340 8086 	ble.w	201c4 <__kernel_ram_size+0x1c4>
   200b8:	e04e      	b.n	20158 <__kernel_ram_size+0x158>
   200ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
   200bc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   200c0:	e757      	b.n	1ff72 <_dtoa_r+0x702>
   200c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   200c4:	f109 34ff 	add.w	r4, r9, #4294967295
   200c8:	42a3      	cmp	r3, r4
   200ca:	bfb7      	itett	lt
   200cc:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   200ce:	1b1c      	subge	r4, r3, r4
   200d0:	9409      	strlt	r4, [sp, #36]	; 0x24
   200d2:	1ae2      	sublt	r2, r4, r3
   200d4:	bfbf      	itttt	lt
   200d6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   200d8:	2400      	movlt	r4, #0
   200da:	189b      	addlt	r3, r3, r2
   200dc:	9310      	strlt	r3, [sp, #64]	; 0x40
   200de:	f1b9 0f00 	cmp.w	r9, #0
   200e2:	bfb3      	iteet	lt
   200e4:	9b06      	ldrlt	r3, [sp, #24]
   200e6:	464b      	movge	r3, r9
   200e8:	9d06      	ldrge	r5, [sp, #24]
   200ea:	eba3 0509 	sublt.w	r5, r3, r9
   200ee:	bfb8      	it	lt
   200f0:	2300      	movlt	r3, #0
   200f2:	e740      	b.n	1ff76 <_dtoa_r+0x706>
   200f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   200f6:	9d06      	ldr	r5, [sp, #24]
   200f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   200fa:	e747      	b.n	1ff8c <_dtoa_r+0x71c>
   200fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   200fe:	e770      	b.n	1ffe2 <_dtoa_r+0x772>
   20100:	9b08      	ldr	r3, [sp, #32]
   20102:	2b01      	cmp	r3, #1
   20104:	dc18      	bgt.n	20138 <__kernel_ram_size+0x138>
   20106:	9b00      	ldr	r3, [sp, #0]
   20108:	b9b3      	cbnz	r3, 20138 <__kernel_ram_size+0x138>
   2010a:	9b01      	ldr	r3, [sp, #4]
   2010c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   20110:	b9a3      	cbnz	r3, 2013c <__kernel_ram_size+0x13c>
   20112:	9b01      	ldr	r3, [sp, #4]
   20114:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   20118:	0d3f      	lsrs	r7, r7, #20
   2011a:	053f      	lsls	r7, r7, #20
   2011c:	b137      	cbz	r7, 2012c <__kernel_ram_size+0x12c>
   2011e:	9b06      	ldr	r3, [sp, #24]
   20120:	2701      	movs	r7, #1
   20122:	3301      	adds	r3, #1
   20124:	9306      	str	r3, [sp, #24]
   20126:	9b07      	ldr	r3, [sp, #28]
   20128:	3301      	adds	r3, #1
   2012a:	9307      	str	r3, [sp, #28]
   2012c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2012e:	2b00      	cmp	r3, #0
   20130:	f47f af6f 	bne.w	20012 <__kernel_ram_size+0x12>
   20134:	2001      	movs	r0, #1
   20136:	e774      	b.n	20022 <__kernel_ram_size+0x22>
   20138:	2700      	movs	r7, #0
   2013a:	e7f7      	b.n	2012c <__kernel_ram_size+0x12c>
   2013c:	9f00      	ldr	r7, [sp, #0]
   2013e:	e7f5      	b.n	2012c <__kernel_ram_size+0x12c>
   20140:	d083      	beq.n	2004a <__kernel_ram_size+0x4a>
   20142:	4618      	mov	r0, r3
   20144:	301c      	adds	r0, #28
   20146:	e779      	b.n	2003c <__kernel_ram_size+0x3c>
   20148:	f1b9 0f00 	cmp.w	r9, #0
   2014c:	dc34      	bgt.n	201b8 <__kernel_ram_size+0x1b8>
   2014e:	9b08      	ldr	r3, [sp, #32]
   20150:	2b02      	cmp	r3, #2
   20152:	dd31      	ble.n	201b8 <__kernel_ram_size+0x1b8>
   20154:	f8cd 9010 	str.w	r9, [sp, #16]
   20158:	9b04      	ldr	r3, [sp, #16]
   2015a:	b963      	cbnz	r3, 20176 <__kernel_ram_size+0x176>
   2015c:	4621      	mov	r1, r4
   2015e:	2205      	movs	r2, #5
   20160:	4658      	mov	r0, fp
   20162:	f01f faab 	bl	3f6bc <__multadd>
   20166:	4601      	mov	r1, r0
   20168:	4604      	mov	r4, r0
   2016a:	4640      	mov	r0, r8
   2016c:	f01f fc5c 	bl	3fa28 <__mcmp>
   20170:	2800      	cmp	r0, #0
   20172:	f73f adc8 	bgt.w	1fd06 <_dtoa_r+0x496>
   20176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20178:	9d03      	ldr	r5, [sp, #12]
   2017a:	ea6f 0a03 	mvn.w	sl, r3
   2017e:	2700      	movs	r7, #0
   20180:	4621      	mov	r1, r4
   20182:	4658      	mov	r0, fp
   20184:	f01f fa83 	bl	3f68e <_Bfree>
   20188:	2e00      	cmp	r6, #0
   2018a:	f43f aeb1 	beq.w	1fef0 <_dtoa_r+0x680>
   2018e:	b12f      	cbz	r7, 2019c <__kernel_ram_size+0x19c>
   20190:	42b7      	cmp	r7, r6
   20192:	d003      	beq.n	2019c <__kernel_ram_size+0x19c>
   20194:	4639      	mov	r1, r7
   20196:	4658      	mov	r0, fp
   20198:	f01f fa79 	bl	3f68e <_Bfree>
   2019c:	4631      	mov	r1, r6
   2019e:	4658      	mov	r0, fp
   201a0:	f01f fa75 	bl	3f68e <_Bfree>
   201a4:	e6a4      	b.n	1fef0 <_dtoa_r+0x680>
   201a6:	2400      	movs	r4, #0
   201a8:	4626      	mov	r6, r4
   201aa:	e7e4      	b.n	20176 <__kernel_ram_size+0x176>
   201ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   201b0:	4626      	mov	r6, r4
   201b2:	e5a8      	b.n	1fd06 <_dtoa_r+0x496>
   201b4:	40240000 	.word	0x40240000
   201b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   201ba:	f8cd 9010 	str.w	r9, [sp, #16]
   201be:	2b00      	cmp	r3, #0
   201c0:	f000 80eb 	beq.w	2039a <__kernel_ram_size+0x39a>
   201c4:	2d00      	cmp	r5, #0
   201c6:	dd05      	ble.n	201d4 <__kernel_ram_size+0x1d4>
   201c8:	4631      	mov	r1, r6
   201ca:	462a      	mov	r2, r5
   201cc:	4658      	mov	r0, fp
   201ce:	f01f fbd8 	bl	3f982 <__lshift>
   201d2:	4606      	mov	r6, r0
   201d4:	2f00      	cmp	r7, #0
   201d6:	d056      	beq.n	20286 <__kernel_ram_size+0x286>
   201d8:	6871      	ldr	r1, [r6, #4]
   201da:	4658      	mov	r0, fp
   201dc:	f01f fa23 	bl	3f626 <_Balloc>
   201e0:	6932      	ldr	r2, [r6, #16]
   201e2:	4605      	mov	r5, r0
   201e4:	f106 010c 	add.w	r1, r6, #12
   201e8:	3202      	adds	r2, #2
   201ea:	300c      	adds	r0, #12
   201ec:	0092      	lsls	r2, r2, #2
   201ee:	f01e fd6c 	bl	3ecca <memcpy>
   201f2:	2201      	movs	r2, #1
   201f4:	4629      	mov	r1, r5
   201f6:	4658      	mov	r0, fp
   201f8:	f01f fbc3 	bl	3f982 <__lshift>
   201fc:	9b03      	ldr	r3, [sp, #12]
   201fe:	4637      	mov	r7, r6
   20200:	4606      	mov	r6, r0
   20202:	f103 0901 	add.w	r9, r3, #1
   20206:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   2020a:	4413      	add	r3, r2
   2020c:	9309      	str	r3, [sp, #36]	; 0x24
   2020e:	9b00      	ldr	r3, [sp, #0]
   20210:	f003 0301 	and.w	r3, r3, #1
   20214:	9307      	str	r3, [sp, #28]
   20216:	f109 33ff 	add.w	r3, r9, #4294967295
   2021a:	4621      	mov	r1, r4
   2021c:	4640      	mov	r0, r8
   2021e:	9300      	str	r3, [sp, #0]
   20220:	f01e ffe7 	bl	3f1f2 <quorem>
   20224:	4603      	mov	r3, r0
   20226:	9004      	str	r0, [sp, #16]
   20228:	4639      	mov	r1, r7
   2022a:	4640      	mov	r0, r8
   2022c:	3330      	adds	r3, #48	; 0x30
   2022e:	930a      	str	r3, [sp, #40]	; 0x28
   20230:	f01f fbfa 	bl	3fa28 <__mcmp>
   20234:	4632      	mov	r2, r6
   20236:	9006      	str	r0, [sp, #24]
   20238:	4621      	mov	r1, r4
   2023a:	4658      	mov	r0, fp
   2023c:	f01f fc0e 	bl	3fa5c <__mdiff>
   20240:	68c2      	ldr	r2, [r0, #12]
   20242:	4605      	mov	r5, r0
   20244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20246:	bb02      	cbnz	r2, 2028a <__kernel_ram_size+0x28a>
   20248:	4601      	mov	r1, r0
   2024a:	4640      	mov	r0, r8
   2024c:	f01f fbec 	bl	3fa28 <__mcmp>
   20250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20252:	4602      	mov	r2, r0
   20254:	4629      	mov	r1, r5
   20256:	4658      	mov	r0, fp
   20258:	920c      	str	r2, [sp, #48]	; 0x30
   2025a:	464d      	mov	r5, r9
   2025c:	930a      	str	r3, [sp, #40]	; 0x28
   2025e:	f01f fa16 	bl	3f68e <_Bfree>
   20262:	9b08      	ldr	r3, [sp, #32]
   20264:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20266:	ea43 0102 	orr.w	r1, r3, r2
   2026a:	9b07      	ldr	r3, [sp, #28]
   2026c:	430b      	orrs	r3, r1
   2026e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20270:	d10d      	bne.n	2028e <__kernel_ram_size+0x28e>
   20272:	2b39      	cmp	r3, #57	; 0x39
   20274:	d027      	beq.n	202c6 <__kernel_ram_size+0x2c6>
   20276:	9a06      	ldr	r2, [sp, #24]
   20278:	2a00      	cmp	r2, #0
   2027a:	dd01      	ble.n	20280 <__kernel_ram_size+0x280>
   2027c:	9b04      	ldr	r3, [sp, #16]
   2027e:	3331      	adds	r3, #49	; 0x31
   20280:	9a00      	ldr	r2, [sp, #0]
   20282:	7013      	strb	r3, [r2, #0]
   20284:	e77c      	b.n	20180 <__kernel_ram_size+0x180>
   20286:	4630      	mov	r0, r6
   20288:	e7b8      	b.n	201fc <__kernel_ram_size+0x1fc>
   2028a:	2201      	movs	r2, #1
   2028c:	e7e2      	b.n	20254 <__kernel_ram_size+0x254>
   2028e:	9906      	ldr	r1, [sp, #24]
   20290:	2900      	cmp	r1, #0
   20292:	db04      	blt.n	2029e <__kernel_ram_size+0x29e>
   20294:	9808      	ldr	r0, [sp, #32]
   20296:	4301      	orrs	r1, r0
   20298:	9807      	ldr	r0, [sp, #28]
   2029a:	4301      	orrs	r1, r0
   2029c:	d11d      	bne.n	202da <__kernel_ram_size+0x2da>
   2029e:	2a00      	cmp	r2, #0
   202a0:	ddee      	ble.n	20280 <__kernel_ram_size+0x280>
   202a2:	4641      	mov	r1, r8
   202a4:	2201      	movs	r2, #1
   202a6:	4658      	mov	r0, fp
   202a8:	9306      	str	r3, [sp, #24]
   202aa:	f01f fb6a 	bl	3f982 <__lshift>
   202ae:	4621      	mov	r1, r4
   202b0:	4680      	mov	r8, r0
   202b2:	f01f fbb9 	bl	3fa28 <__mcmp>
   202b6:	2800      	cmp	r0, #0
   202b8:	9b06      	ldr	r3, [sp, #24]
   202ba:	dc02      	bgt.n	202c2 <__kernel_ram_size+0x2c2>
   202bc:	d1e0      	bne.n	20280 <__kernel_ram_size+0x280>
   202be:	07da      	lsls	r2, r3, #31
   202c0:	d5de      	bpl.n	20280 <__kernel_ram_size+0x280>
   202c2:	2b39      	cmp	r3, #57	; 0x39
   202c4:	d1da      	bne.n	2027c <__kernel_ram_size+0x27c>
   202c6:	2339      	movs	r3, #57	; 0x39
   202c8:	9a00      	ldr	r2, [sp, #0]
   202ca:	7013      	strb	r3, [r2, #0]
   202cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   202d0:	1e6a      	subs	r2, r5, #1
   202d2:	2b39      	cmp	r3, #57	; 0x39
   202d4:	d046      	beq.n	20364 <__kernel_ram_size+0x364>
   202d6:	3301      	adds	r3, #1
   202d8:	e7d3      	b.n	20282 <__kernel_ram_size+0x282>
   202da:	2a00      	cmp	r2, #0
   202dc:	dd03      	ble.n	202e6 <__kernel_ram_size+0x2e6>
   202de:	2b39      	cmp	r3, #57	; 0x39
   202e0:	d0f1      	beq.n	202c6 <__kernel_ram_size+0x2c6>
   202e2:	3301      	adds	r3, #1
   202e4:	e7cc      	b.n	20280 <__kernel_ram_size+0x280>
   202e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   202e8:	f809 3c01 	strb.w	r3, [r9, #-1]
   202ec:	4591      	cmp	r9, r2
   202ee:	d021      	beq.n	20334 <__kernel_ram_size+0x334>
   202f0:	4641      	mov	r1, r8
   202f2:	2300      	movs	r3, #0
   202f4:	220a      	movs	r2, #10
   202f6:	4658      	mov	r0, fp
   202f8:	f01f f9e0 	bl	3f6bc <__multadd>
   202fc:	42b7      	cmp	r7, r6
   202fe:	4680      	mov	r8, r0
   20300:	f04f 0300 	mov.w	r3, #0
   20304:	f04f 020a 	mov.w	r2, #10
   20308:	4639      	mov	r1, r7
   2030a:	4658      	mov	r0, fp
   2030c:	d106      	bne.n	2031c <__kernel_ram_size+0x31c>
   2030e:	f01f f9d5 	bl	3f6bc <__multadd>
   20312:	4607      	mov	r7, r0
   20314:	4606      	mov	r6, r0
   20316:	f109 0901 	add.w	r9, r9, #1
   2031a:	e77c      	b.n	20216 <__kernel_ram_size+0x216>
   2031c:	f01f f9ce 	bl	3f6bc <__multadd>
   20320:	4631      	mov	r1, r6
   20322:	4607      	mov	r7, r0
   20324:	2300      	movs	r3, #0
   20326:	220a      	movs	r2, #10
   20328:	4658      	mov	r0, fp
   2032a:	f01f f9c7 	bl	3f6bc <__multadd>
   2032e:	4606      	mov	r6, r0
   20330:	e7f1      	b.n	20316 <__kernel_ram_size+0x316>
   20332:	2700      	movs	r7, #0
   20334:	4641      	mov	r1, r8
   20336:	2201      	movs	r2, #1
   20338:	4658      	mov	r0, fp
   2033a:	9300      	str	r3, [sp, #0]
   2033c:	f01f fb21 	bl	3f982 <__lshift>
   20340:	4621      	mov	r1, r4
   20342:	4680      	mov	r8, r0
   20344:	f01f fb70 	bl	3fa28 <__mcmp>
   20348:	2800      	cmp	r0, #0
   2034a:	dcbf      	bgt.n	202cc <__kernel_ram_size+0x2cc>
   2034c:	d102      	bne.n	20354 <__kernel_ram_size+0x354>
   2034e:	9b00      	ldr	r3, [sp, #0]
   20350:	07db      	lsls	r3, r3, #31
   20352:	d4bb      	bmi.n	202cc <__kernel_ram_size+0x2cc>
   20354:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   20358:	1e6a      	subs	r2, r5, #1
   2035a:	2b30      	cmp	r3, #48	; 0x30
   2035c:	f47f af10 	bne.w	20180 <__kernel_ram_size+0x180>
   20360:	4615      	mov	r5, r2
   20362:	e7f7      	b.n	20354 <__kernel_ram_size+0x354>
   20364:	9b03      	ldr	r3, [sp, #12]
   20366:	4293      	cmp	r3, r2
   20368:	d104      	bne.n	20374 <__kernel_ram_size+0x374>
   2036a:	f10a 0a01 	add.w	sl, sl, #1
   2036e:	2331      	movs	r3, #49	; 0x31
   20370:	9a03      	ldr	r2, [sp, #12]
   20372:	e786      	b.n	20282 <__kernel_ram_size+0x282>
   20374:	4615      	mov	r5, r2
   20376:	e7a9      	b.n	202cc <__kernel_ram_size+0x2cc>
   20378:	4b13      	ldr	r3, [pc, #76]	; (203c8 <__kernel_ram_size+0x3c8>)
   2037a:	f7ff bae1 	b.w	1f940 <_dtoa_r+0xd0>
   2037e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   20380:	2b00      	cmp	r3, #0
   20382:	f47f aab9 	bne.w	1f8f8 <_dtoa_r+0x88>
   20386:	4b11      	ldr	r3, [pc, #68]	; (203cc <__kernel_ram_size+0x3cc>)
   20388:	f7ff bada 	b.w	1f940 <_dtoa_r+0xd0>
   2038c:	9b04      	ldr	r3, [sp, #16]
   2038e:	2b00      	cmp	r3, #0
   20390:	dc03      	bgt.n	2039a <__kernel_ram_size+0x39a>
   20392:	9b08      	ldr	r3, [sp, #32]
   20394:	2b02      	cmp	r3, #2
   20396:	f73f aedf 	bgt.w	20158 <__kernel_ram_size+0x158>
   2039a:	9d03      	ldr	r5, [sp, #12]
   2039c:	4621      	mov	r1, r4
   2039e:	4640      	mov	r0, r8
   203a0:	f01e ff27 	bl	3f1f2 <quorem>
   203a4:	9a03      	ldr	r2, [sp, #12]
   203a6:	f100 0330 	add.w	r3, r0, #48	; 0x30
   203aa:	9904      	ldr	r1, [sp, #16]
   203ac:	f805 3b01 	strb.w	r3, [r5], #1
   203b0:	1aaa      	subs	r2, r5, r2
   203b2:	4291      	cmp	r1, r2
   203b4:	ddbd      	ble.n	20332 <__kernel_ram_size+0x332>
   203b6:	4641      	mov	r1, r8
   203b8:	2300      	movs	r3, #0
   203ba:	220a      	movs	r2, #10
   203bc:	4658      	mov	r0, fp
   203be:	f01f f97d 	bl	3f6bc <__multadd>
   203c2:	4680      	mov	r8, r0
   203c4:	e7ea      	b.n	2039c <__kernel_ram_size+0x39c>
   203c6:	bf00      	nop
   203c8:	00046834 	.word	0x00046834
   203cc:	00046dc3 	.word	0x00046dc3

000203d0 <nan>:
   203d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 203d8 <nan+0x8>
   203d4:	4770      	bx	lr
   203d6:	bf00      	nop
   203d8:	00000000 	.word	0x00000000
   203dc:	7ff80000 	.word	0x7ff80000

000203e0 <shutdown_modem>:

static void shutdown_modem(void)
{
#if defined(CONFIG_LTE_LINK_CONTROL)
	/* Turn off and shutdown modem */
	LOG_ERR("LTE link disconnect");
   203e0:	2301      	movs	r3, #1
   203e2:	f04f 0000 	mov.w	r0, #0
{
   203e6:	b510      	push	{r4, lr}
	LOG_ERR("LTE link disconnect");
   203e8:	f363 0007 	bfi	r0, r3, #0, #8
   203ec:	4c12      	ldr	r4, [pc, #72]	; (20438 <shutdown_modem+0x58>)
   203ee:	4b13      	ldr	r3, [pc, #76]	; (2043c <shutdown_modem+0x5c>)
   203f0:	4913      	ldr	r1, [pc, #76]	; (20440 <shutdown_modem+0x60>)
   203f2:	1ae4      	subs	r4, r4, r3
   203f4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   203f8:	f364 108f 	bfi	r0, r4, #6, #10
   203fc:	f01c f941 	bl	3c682 <log_string_sync>
	int err = lte_lc_power_off();
   20400:	f008 fa9a 	bl	28938 <lte_lc_power_off>

	if (err) {
   20404:	4602      	mov	r2, r0
   20406:	b148      	cbz	r0, 2041c <shutdown_modem+0x3c>
		LOG_ERR("lte_lc_power_off failed: %d", err);
   20408:	2101      	movs	r1, #1
   2040a:	f04f 0000 	mov.w	r0, #0
   2040e:	f361 0007 	bfi	r0, r1, #0, #8
   20412:	f364 108f 	bfi	r0, r4, #6, #10
   20416:	490b      	ldr	r1, [pc, #44]	; (20444 <shutdown_modem+0x64>)
   20418:	f01c f933 	bl	3c682 <log_string_sync>
	}
#endif /* CONFIG_LTE_LINK_CONTROL */
#if defined(CONFIG_BSD_LIBRARY)
	LOG_ERR("Shutdown modem");
   2041c:	2301      	movs	r3, #1
   2041e:	f04f 0000 	mov.w	r0, #0
   20422:	f363 0007 	bfi	r0, r3, #0, #8
   20426:	f364 108f 	bfi	r0, r4, #6, #10
   2042a:	4907      	ldr	r1, [pc, #28]	; (20448 <shutdown_modem+0x68>)
   2042c:	f01c f929 	bl	3c682 <log_string_sync>
	bsdlib_shutdown();
#endif
}
   20430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bsdlib_shutdown();
   20434:	f01d bb2f 	b.w	3da96 <bsdlib_shutdown>
   20438:	000402cc 	.word	0x000402cc
   2043c:	000402cc 	.word	0x000402cc
   20440:	00041ba1 	.word	0x00041ba1
   20444:	00041bb5 	.word	0x00041bb5
   20448:	00041bd1 	.word	0x00041bd1

0002044c <cycle_cloud_connection>:
static void cycle_cloud_connection(struct k_work *work)
{
	int err;
	s32_t reboot_wait_ms = REBOOT_AFTER_DISCONNECT_WAIT_MS;

	LOG_INF("Disconnecting from cloud...");
   2044c:	2303      	movs	r3, #3
   2044e:	f04f 0000 	mov.w	r0, #0
{
   20452:	b510      	push	{r4, lr}
	LOG_INF("Disconnecting from cloud...");
   20454:	f363 0007 	bfi	r0, r3, #0, #8
   20458:	4c16      	ldr	r4, [pc, #88]	; (204b4 <cycle_cloud_connection+0x68>)
   2045a:	4b17      	ldr	r3, [pc, #92]	; (204b8 <cycle_cloud_connection+0x6c>)
   2045c:	4917      	ldr	r1, [pc, #92]	; (204bc <cycle_cloud_connection+0x70>)
   2045e:	1ae4      	subs	r4, r4, r3
   20460:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   20464:	f364 108f 	bfi	r0, r4, #6, #10
   20468:	f01c f90b 	bl	3c682 <log_string_sync>

	err = cloud_disconnect(cloud_backend);
   2046c:	4b14      	ldr	r3, [pc, #80]	; (204c0 <cycle_cloud_connection+0x74>)
   2046e:	6818      	ldr	r0, [r3, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_disconnect(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
   20470:	b188      	cbz	r0, 20496 <cycle_cloud_connection+0x4a>
   20472:	6803      	ldr	r3, [r0, #0]
   20474:	b17b      	cbz	r3, 20496 <cycle_cloud_connection+0x4a>
	    backend->api->disconnect == NULL) {
   20476:	68db      	ldr	r3, [r3, #12]
	if (backend == NULL || backend->api == NULL ||
   20478:	b16b      	cbz	r3, 20496 <cycle_cloud_connection+0x4a>
		return -ENOTSUP;
	}

	return backend->api->disconnect(backend);
   2047a:	4798      	blx	r3
	if (err == 0) {
   2047c:	b958      	cbnz	r0, 20496 <cycle_cloud_connection+0x4a>
		atomic_set(&reconnect_to_cloud, 1);
   2047e:	2101      	movs	r1, #1
   20480:	4810      	ldr	r0, [pc, #64]	; (204c4 <cycle_cloud_connection+0x78>)
   20482:	f01b fd98 	bl	3bfb6 <atomic_set>
	s32_t reboot_wait_ms = REBOOT_AFTER_DISCONNECT_WAIT_MS;
   20486:	f643 2298 	movw	r2, #15000	; 0x3a98
	}

	/* Reboot fail-safe on disconnect */
	k_delayed_work_submit_to_queue(&application_work_q, &cloud_reboot_work,
				       reboot_wait_ms);
}
   2048a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_delayed_work_submit_to_queue(&application_work_q, &cloud_reboot_work,
   2048e:	490e      	ldr	r1, [pc, #56]	; (204c8 <cycle_cloud_connection+0x7c>)
   20490:	480e      	ldr	r0, [pc, #56]	; (204cc <cycle_cloud_connection+0x80>)
   20492:	f018 bd37 	b.w	38f04 <k_delayed_work_submit_to_queue>
		LOG_INF("Disconnect failed. Device will reboot in %d seconds",
   20496:	2303      	movs	r3, #3
   20498:	f04f 0000 	mov.w	r0, #0
   2049c:	f363 0007 	bfi	r0, r3, #0, #8
   204a0:	2205      	movs	r2, #5
   204a2:	f364 108f 	bfi	r0, r4, #6, #10
   204a6:	490a      	ldr	r1, [pc, #40]	; (204d0 <cycle_cloud_connection+0x84>)
   204a8:	f01c f8eb 	bl	3c682 <log_string_sync>
		reboot_wait_ms = K_SECONDS(5);
   204ac:	f241 3288 	movw	r2, #5000	; 0x1388
   204b0:	e7eb      	b.n	2048a <cycle_cloud_connection+0x3e>
   204b2:	bf00      	nop
   204b4:	000402cc 	.word	0x000402cc
   204b8:	000402cc 	.word	0x000402cc
   204bc:	00041590 	.word	0x00041590
   204c0:	200238a0 	.word	0x200238a0
   204c4:	20023924 	.word	0x20023924
   204c8:	200238a4 	.word	0x200238a4
   204cc:	200237d8 	.word	0x200237d8
   204d0:	000415ac 	.word	0x000415ac

000204d4 <set_gps_enable>:
		break;
	}
}

static void set_gps_enable(const bool enable)
{
   204d4:	b510      	push	{r4, lr}
   204d6:	4604      	mov	r4, r0
	if (enable == gps_control_is_enabled()) {
   204d8:	f002 f866 	bl	225a8 <gps_control_is_enabled>
   204dc:	42a0      	cmp	r0, r4
   204de:	d01e      	beq.n	2051e <set_gps_enable+0x4a>
		return;
	}

	if (enable) {
   204e0:	4a0f      	ldr	r2, [pc, #60]	; (20520 <set_gps_enable+0x4c>)
   204e2:	4b10      	ldr	r3, [pc, #64]	; (20524 <set_gps_enable+0x50>)
		LOG_INF("Starting GPS");
   204e4:	f04f 0000 	mov.w	r0, #0
   204e8:	1a9b      	subs	r3, r3, r2
   204ea:	2203      	movs	r2, #3
   204ec:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   204f0:	f362 0007 	bfi	r0, r2, #0, #8
   204f4:	f363 108f 	bfi	r0, r3, #6, #10
	if (enable) {
   204f8:	b154      	cbz	r4, 20510 <set_gps_enable+0x3c>
		LOG_INF("Starting GPS");
   204fa:	490b      	ldr	r1, [pc, #44]	; (20528 <set_gps_enable+0x54>)
   204fc:	f01c f8c1 	bl	3c682 <log_string_sync>
		gps_control_enable();
   20500:	f002 f898 	bl	22634 <gps_control_enable>

	} else {
		LOG_INF("Stopping GPS");
		gps_control_disable();
	}
}
   20504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		gps_control_start(K_SECONDS(1));
   20508:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2050c:	f002 b87c 	b.w	22608 <gps_control_start>
		LOG_INF("Stopping GPS");
   20510:	4906      	ldr	r1, [pc, #24]	; (2052c <set_gps_enable+0x58>)
   20512:	f01c f8b6 	bl	3c682 <log_string_sync>
}
   20516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		gps_control_disable();
   2051a:	f002 b865 	b.w	225e8 <gps_control_disable>
}
   2051e:	bd10      	pop	{r4, pc}
   20520:	000402cc 	.word	0x000402cc
   20524:	000402cc 	.word	0x000402cc
   20528:	00041b94 	.word	0x00041b94
   2052c:	000463ee 	.word	0x000463ee

00020530 <long_press_handler>:

static void long_press_handler(struct k_work *work)
{
   20530:	b508      	push	{r3, lr}
	if (!atomic_get(&send_data_enable)) {
   20532:	480d      	ldr	r0, [pc, #52]	; (20568 <long_press_handler+0x38>)
   20534:	f01b fd47 	bl	3bfc6 <atomic_get>
   20538:	b968      	cbnz	r0, 20556 <long_press_handler+0x26>
		LOG_INF("Link not ready, long press disregarded");
   2053a:	2303      	movs	r3, #3
   2053c:	4a0b      	ldr	r2, [pc, #44]	; (2056c <long_press_handler+0x3c>)
   2053e:	f363 0007 	bfi	r0, r3, #0, #8
   20542:	4b0b      	ldr	r3, [pc, #44]	; (20570 <long_press_handler+0x40>)
   20544:	490b      	ldr	r1, [pc, #44]	; (20574 <long_press_handler+0x44>)
   20546:	1a9b      	subs	r3, r3, r2
   20548:	08db      	lsrs	r3, r3, #3
   2054a:	f363 108f 	bfi	r0, r3, #6, #10
		return;
	}

	/* Toggle GPS state */
	set_gps_enable(!gps_control_is_enabled());
}
   2054e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_INF("Link not ready, long press disregarded");
   20552:	f01c b896 	b.w	3c682 <log_string_sync>
	set_gps_enable(!gps_control_is_enabled());
   20556:	f002 f827 	bl	225a8 <gps_control_is_enabled>
}
   2055a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_gps_enable(!gps_control_is_enabled());
   2055e:	f080 0001 	eor.w	r0, r0, #1
   20562:	b2c0      	uxtb	r0, r0
   20564:	f7ff bfb6 	b.w	204d4 <set_gps_enable>
   20568:	2002394c 	.word	0x2002394c
   2056c:	000402cc 	.word	0x000402cc
   20570:	000402cc 	.word	0x000402cc
   20574:	000416e5 	.word	0x000416e5

00020578 <ui_evt_handler>:
}

#if defined(CONFIG_USE_UI_MODULE)
/**@brief User interface event handler. */
static void ui_evt_handler(struct ui_evt evt)
{
   20578:	b507      	push	{r0, r1, r2, lr}
   2057a:	ab02      	add	r3, sp, #8
   2057c:	e903 0003 	stmdb	r3, {r0, r1}
   20580:	9b01      	ldr	r3, [sp, #4]
	if (IS_ENABLED(CONFIG_CLOUD_BUTTON) &&
	   (evt.button == CONFIG_CLOUD_BUTTON_INPUT)) {
		button_send(evt.type == UI_EVT_BUTTON_ACTIVE ? 1 : 0);
	}

	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (evt.button == FLIP_INPUT)
   20582:	2b03      	cmp	r3, #3
   20584:	d108      	bne.n	20598 <ui_evt_handler+0x20>
	   && atomic_get(&send_data_enable)) {
   20586:	4810      	ldr	r0, [pc, #64]	; (205c8 <ui_evt_handler+0x50>)
   20588:	f01b fd1d 	bl	3bfc6 <atomic_get>
   2058c:	b1c0      	cbz	r0, 205c0 <ui_evt_handler+0x48>
				error_handler(ERROR_LTE_LC, err);
			}
		}
	}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */
}
   2058e:	b003      	add	sp, #12
   20590:	f85d eb04 	ldr.w	lr, [sp], #4
		motion_simulate_trigger();
   20594:	f001 b934 	b.w	21800 <motion_simulate_trigger>
	if (IS_ENABLED(CONFIG_GPS_CONTROL_ON_LONG_PRESS) &&
   20598:	2b01      	cmp	r3, #1
   2059a:	d111      	bne.n	205c0 <ui_evt_handler+0x48>
		if (evt.type == UI_EVT_BUTTON_ACTIVE) {
   2059c:	f89d 3000 	ldrb.w	r3, [sp]
   205a0:	b943      	cbnz	r3, 205b4 <ui_evt_handler+0x3c>
			k_delayed_work_submit_to_queue(&application_work_q,
   205a2:	f241 3288 	movw	r2, #5000	; 0x1388
   205a6:	4909      	ldr	r1, [pc, #36]	; (205cc <ui_evt_handler+0x54>)
   205a8:	4809      	ldr	r0, [pc, #36]	; (205d0 <ui_evt_handler+0x58>)
}
   205aa:	b003      	add	sp, #12
   205ac:	f85d eb04 	ldr.w	lr, [sp], #4
			k_delayed_work_submit_to_queue(&application_work_q,
   205b0:	f018 bca8 	b.w	38f04 <k_delayed_work_submit_to_queue>
			k_delayed_work_cancel(&long_press_button_work);
   205b4:	4805      	ldr	r0, [pc, #20]	; (205cc <ui_evt_handler+0x54>)
}
   205b6:	b003      	add	sp, #12
   205b8:	f85d eb04 	ldr.w	lr, [sp], #4
			k_delayed_work_cancel(&long_press_button_work);
   205bc:	f018 bd2e 	b.w	3901c <k_delayed_work_cancel>
}
   205c0:	b003      	add	sp, #12
   205c2:	f85d fb04 	ldr.w	pc, [sp], #4
   205c6:	bf00      	nop
   205c8:	2002394c 	.word	0x2002394c
   205cc:	20023904 	.word	0x20023904
   205d0:	200237d8 	.word	0x200237d8

000205d4 <send_modem_at_cmd_work_fn>:
	struct cloud_channel_data modem_data = {
   205d4:	2210      	movs	r2, #16
{
   205d6:	b530      	push	{r4, r5, lr}
   205d8:	b08f      	sub	sp, #60	; 0x3c
	struct cloud_channel_data modem_data = {
   205da:	2100      	movs	r1, #0
   205dc:	eb0d 0002 	add.w	r0, sp, r2
   205e0:	f01e fb93 	bl	3ed0a <memset>
   205e4:	2314      	movs	r3, #20
	struct cloud_msg msg = {
   205e6:	2218      	movs	r2, #24
   205e8:	2100      	movs	r1, #0
   205ea:	a808      	add	r0, sp, #32
	struct cloud_channel_data modem_data = {
   205ec:	f88d 3010 	strb.w	r3, [sp, #16]
	struct cloud_msg msg = {
   205f0:	f01e fb8b 	bl	3ed0a <memset>
	size_t len = strlen(modem_at_cmd_buff);
   205f4:	4836      	ldr	r0, [pc, #216]	; (206d0 <send_modem_at_cmd_work_fn+0xfc>)
   205f6:	f7fc fd95 	bl	1d124 <strlen>
	if (len == 0) {
   205fa:	4c35      	ldr	r4, [pc, #212]	; (206d0 <send_modem_at_cmd_work_fn+0xfc>)
   205fc:	bb90      	cbnz	r0, 20664 <send_modem_at_cmd_work_fn+0x90>
		state = AT_CMD_ERROR;
   205fe:	2301      	movs	r3, #1
		err = -ENOBUFS;
   20600:	f06f 0568 	mvn.w	r5, #104	; 0x68
		state = AT_CMD_ERROR;
   20604:	f88d 300f 	strb.w	r3, [sp, #15]
	len = strlen(modem_at_cmd_buff);
   20608:	4831      	ldr	r0, [pc, #196]	; (206d0 <send_modem_at_cmd_work_fn+0xfc>)
   2060a:	f7fc fd8b 	bl	1d124 <strlen>
	if (err) {
   2060e:	b39d      	cbz	r5, 20678 <send_modem_at_cmd_work_fn+0xa4>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   20610:	f89d 300f 	ldrb.w	r3, [sp, #15]
   20614:	4a2f      	ldr	r2, [pc, #188]	; (206d4 <send_modem_at_cmd_work_fn+0x100>)
   20616:	9300      	str	r3, [sp, #0]
   20618:	f640 218d 	movw	r1, #2701	; 0xa8d
   2061c:	462b      	mov	r3, r5
   2061e:	482c      	ldr	r0, [pc, #176]	; (206d0 <send_modem_at_cmd_work_fn+0xfc>)
   20620:	f01a f982 	bl	3a928 <sniprintf>
	modem_data.data.len = len;
   20624:	e9cd 4005 	strd	r4, r0, [sp, #20]
	err = cloud_encode_data(&modem_data, CLOUD_CMD_GROUP_COMMAND, &msg);
   20628:	aa08      	add	r2, sp, #32
   2062a:	210a      	movs	r1, #10
   2062c:	a804      	add	r0, sp, #16
   2062e:	f001 facb 	bl	21bc8 <cloud_encode_data>
	if (err) {
   20632:	4602      	mov	r2, r0
   20634:	b380      	cbz	r0, 20698 <send_modem_at_cmd_work_fn+0xc4>
		LOG_ERR("[%s:%d] cloud_encode_data failed with error %d",
   20636:	2301      	movs	r3, #1
   20638:	f04f 0000 	mov.w	r0, #0
   2063c:	4926      	ldr	r1, [pc, #152]	; (206d8 <send_modem_at_cmd_work_fn+0x104>)
   2063e:	f363 0007 	bfi	r0, r3, #0, #8
   20642:	4b26      	ldr	r3, [pc, #152]	; (206dc <send_modem_at_cmd_work_fn+0x108>)
   20644:	9200      	str	r2, [sp, #0]
   20646:	1a5b      	subs	r3, r3, r1
   20648:	08db      	lsrs	r3, r3, #3
   2064a:	f363 108f 	bfi	r0, r3, #6, #10
   2064e:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   20652:	4a23      	ldr	r2, [pc, #140]	; (206e0 <send_modem_at_cmd_work_fn+0x10c>)
   20654:	4923      	ldr	r1, [pc, #140]	; (206e4 <send_modem_at_cmd_work_fn+0x110>)
			LOG_ERR("[%s:%d] cloud_send failed with error %d",
   20656:	f01c f814 	bl	3c682 <log_string_sync>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   2065a:	4823      	ldr	r0, [pc, #140]	; (206e8 <send_modem_at_cmd_work_fn+0x114>)
   2065c:	f018 f94e 	bl	388fc <z_impl_k_sem_give>
}
   20660:	b00f      	add	sp, #60	; 0x3c
   20662:	bd30      	pop	{r4, r5, pc}
		err = at_cmd_write(modem_at_cmd_buff, modem_at_cmd_buff,
   20664:	f10d 030f 	add.w	r3, sp, #15
   20668:	f640 228d 	movw	r2, #2701	; 0xa8d
   2066c:	4621      	mov	r1, r4
   2066e:	4620      	mov	r0, r4
   20670:	f007 f9ec 	bl	27a4c <at_cmd_write>
   20674:	4605      	mov	r5, r0
   20676:	e7c7      	b.n	20608 <send_modem_at_cmd_work_fn+0x34>
	} else if (len == 0) {
   20678:	b928      	cbnz	r0, 20686 <send_modem_at_cmd_work_fn+0xb2>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   2067a:	491c      	ldr	r1, [pc, #112]	; (206ec <send_modem_at_cmd_work_fn+0x118>)
   2067c:	4814      	ldr	r0, [pc, #80]	; (206d0 <send_modem_at_cmd_work_fn+0xfc>)
   2067e:	f01e fcf9 	bl	3f074 <strcpy>
   20682:	2004      	movs	r0, #4
   20684:	e7ce      	b.n	20624 <send_modem_at_cmd_work_fn+0x50>
	} else if (len > MODEM_AT_CMD_MAX_RESPONSE_LEN) {
   20686:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   2068a:	d9cb      	bls.n	20624 <send_modem_at_cmd_work_fn+0x50>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   2068c:	4918      	ldr	r1, [pc, #96]	; (206f0 <send_modem_at_cmd_work_fn+0x11c>)
   2068e:	4810      	ldr	r0, [pc, #64]	; (206d0 <send_modem_at_cmd_work_fn+0xfc>)
   20690:	f01e fcf0 	bl	3f074 <strcpy>
   20694:	2032      	movs	r0, #50	; 0x32
   20696:	e7c5      	b.n	20624 <send_modem_at_cmd_work_fn+0x50>
		err = cloud_send(cloud_backend, &msg);
   20698:	4b16      	ldr	r3, [pc, #88]	; (206f4 <send_modem_at_cmd_work_fn+0x120>)
   2069a:	a908      	add	r1, sp, #32
   2069c:	6818      	ldr	r0, [r3, #0]
   2069e:	f01b fc81 	bl	3bfa4 <cloud_send>
   206a2:	4604      	mov	r4, r0
 *
 * @return 0 if the operation was successful, otherwise a (negative) error code.
 */
static inline void cloud_release_data(struct cloud_msg *data)
{
	k_free(data->buf);
   206a4:	9808      	ldr	r0, [sp, #32]
   206a6:	f01e f96f 	bl	3e988 <k_free>
		if (err) {
   206aa:	2c00      	cmp	r4, #0
   206ac:	d0d5      	beq.n	2065a <send_modem_at_cmd_work_fn+0x86>
			LOG_ERR("[%s:%d] cloud_send failed with error %d",
   206ae:	2301      	movs	r3, #1
   206b0:	f04f 0000 	mov.w	r0, #0
   206b4:	4a08      	ldr	r2, [pc, #32]	; (206d8 <send_modem_at_cmd_work_fn+0x104>)
   206b6:	f363 0007 	bfi	r0, r3, #0, #8
   206ba:	4b08      	ldr	r3, [pc, #32]	; (206dc <send_modem_at_cmd_work_fn+0x108>)
   206bc:	9400      	str	r4, [sp, #0]
   206be:	1a9b      	subs	r3, r3, r2
   206c0:	08db      	lsrs	r3, r3, #3
   206c2:	f363 108f 	bfi	r0, r3, #6, #10
   206c6:	4a06      	ldr	r2, [pc, #24]	; (206e0 <send_modem_at_cmd_work_fn+0x10c>)
   206c8:	f44f 73c2 	mov.w	r3, #388	; 0x184
   206cc:	490a      	ldr	r1, [pc, #40]	; (206f8 <send_modem_at_cmd_work_fn+0x124>)
   206ce:	e7c2      	b.n	20656 <send_modem_at_cmd_work_fn+0x82>
   206d0:	2002949d 	.word	0x2002949d
   206d4:	00041a50 	.word	0x00041a50
   206d8:	000402cc 	.word	0x000402cc
   206dc:	000402cc 	.word	0x000402cc
   206e0:	00041270 	.word	0x00041270
   206e4:	00041aa3 	.word	0x00041aa3
   206e8:	20031898 	.word	0x20031898
   206ec:	00041a6b 	.word	0x00041a6b
   206f0:	00041a70 	.word	0x00041a70
   206f4:	200238a0 	.word	0x200238a0
   206f8:	00041ad2 	.word	0x00041ad2

000206fc <modem_rsrp_handler>:
	if (rsrp_value > 97) {
   206fc:	2861      	cmp	r0, #97	; 0x61
{
   206fe:	b508      	push	{r3, lr}
	if (rsrp_value > 97) {
   20700:	d812      	bhi.n	20728 <modem_rsrp_handler+0x2c>
	rsrp.value = rsrp_value;
   20702:	4b0a      	ldr	r3, [pc, #40]	; (2072c <modem_rsrp_handler+0x30>)
   20704:	8018      	strh	r0, [r3, #0]
 * @return Remaining time (in milliseconds).
 * @req K-DWORK-001
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return k_ticks_to_ms_floor64(z_timeout_remaining(&work->timeout));
   20706:	480a      	ldr	r0, [pc, #40]	; (20730 <modem_rsrp_handler+0x34>)
   20708:	f018 fe06 	bl	39318 <z_timeout_remaining>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   2070c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20710:	fb80 0103 	smull	r0, r1, r0, r3
   20714:	0bc2      	lsrs	r2, r0, #15
	if (CONFIG_HOLD_TIME_RSRP == 0 ||
   20716:	ea52 4241 	orrs.w	r2, r2, r1, lsl #17
   2071a:	d105      	bne.n	20728 <modem_rsrp_handler+0x2c>
}
   2071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   20720:	4904      	ldr	r1, [pc, #16]	; (20734 <modem_rsrp_handler+0x38>)
   20722:	4805      	ldr	r0, [pc, #20]	; (20738 <modem_rsrp_handler+0x3c>)
   20724:	f018 bbee 	b.w	38f04 <k_delayed_work_submit_to_queue>
}
   20728:	bd08      	pop	{r3, pc}
   2072a:	bf00      	nop
   2072c:	2003174c 	.word	0x2003174c
   20730:	20023938 	.word	0x20023938
   20734:	2002392c 	.word	0x2002392c
   20738:	200237d8 	.word	0x200237d8

0002073c <k_work_submit_to_queue.constprop.15>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   2073c:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2073e:	f100 0308 	add.w	r3, r0, #8
   20742:	e8d3 2fef 	ldaex	r2, [r3]
   20746:	f042 0001 	orr.w	r0, r2, #1
   2074a:	e8c3 0fec 	stlex	ip, r0, [r3]
   2074e:	f1bc 0f00 	cmp.w	ip, #0
   20752:	d1f6      	bne.n	20742 <k_work_submit_to_queue.constprop.15+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   20754:	07d3      	lsls	r3, r2, #31
   20756:	d402      	bmi.n	2075e <k_work_submit_to_queue.constprop.15+0x22>
		k_queue_append(&work_q->queue, work);
   20758:	4801      	ldr	r0, [pc, #4]	; (20760 <k_work_submit_to_queue.constprop.15+0x24>)
   2075a:	f01e b94b 	b.w	3e9f4 <k_queue_append>
}
   2075e:	4770      	bx	lr
   20760:	200237d8 	.word	0x200237d8

00020764 <cloud_cmd_handler>:
{
   20764:	b537      	push	{r0, r1, r2, r4, r5, lr}
	    (cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   20766:	6802      	ldr	r2, [r0, #0]
	if ((cmd->channel == CLOUD_CHANNEL_GPS) &&
   20768:	4951      	ldr	r1, [pc, #324]	; (208b0 <cloud_cmd_handler+0x14c>)
	    (cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   2076a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	if ((cmd->channel == CLOUD_CHANNEL_GPS) &&
   2076e:	428b      	cmp	r3, r1
   20770:	d109      	bne.n	20786 <cloud_cmd_handler+0x22>
		set_gps_enable(cmd->data.sv.state == CLOUD_CMD_STATE_TRUE);
   20772:	f990 0010 	ldrsb.w	r0, [r0, #16]
   20776:	1e43      	subs	r3, r0, #1
   20778:	4258      	negs	r0, r3
   2077a:	4158      	adcs	r0, r3
}
   2077c:	b003      	add	sp, #12
   2077e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		set_gps_enable(cmd->data.sv.state == CLOUD_CMD_STATE_TRUE);
   20782:	f7ff bea7 	b.w	204d4 <set_gps_enable>
	} else if ((cmd->channel == CLOUD_CHANNEL_MODEM) &&
   20786:	494b      	ldr	r1, [pc, #300]	; (208b4 <cloud_cmd_handler+0x150>)
   20788:	428b      	cmp	r3, r1
   2078a:	d147      	bne.n	2081c <cloud_cmd_handler+0xb8>
		cloud_cmd_handle_modem_at_cmd(cmd->data.data_string);
   2078c:	6884      	ldr	r4, [r0, #8]
	if (!at_cmd) {
   2078e:	2c00      	cmp	r4, #0
   20790:	f000 808c 	beq.w	208ac <cloud_cmd_handler+0x148>
	return z_impl_k_sem_take(sem, timeout);
   20794:	2114      	movs	r1, #20
   20796:	4848      	ldr	r0, [pc, #288]	; (208b8 <cloud_cmd_handler+0x154>)
   20798:	f018 f8fa 	bl	38990 <z_impl_k_sem_take>
	if (k_sem_take(&modem_at_cmd_sem, K_MSEC(20)) != 0) {
   2079c:	4605      	mov	r5, r0
   2079e:	b198      	cbz	r0, 207c8 <cloud_cmd_handler+0x64>
		LOG_ERR("[%s:%d] Modem AT cmd in progress.", __func__,
   207a0:	2301      	movs	r3, #1
   207a2:	f04f 0000 	mov.w	r0, #0
   207a6:	4a45      	ldr	r2, [pc, #276]	; (208bc <cloud_cmd_handler+0x158>)
   207a8:	f363 0007 	bfi	r0, r3, #0, #8
   207ac:	4b44      	ldr	r3, [pc, #272]	; (208c0 <cloud_cmd_handler+0x15c>)
   207ae:	4945      	ldr	r1, [pc, #276]	; (208c4 <cloud_cmd_handler+0x160>)
   207b0:	1a9b      	subs	r3, r3, r2
   207b2:	08db      	lsrs	r3, r3, #3
   207b4:	f363 108f 	bfi	r0, r3, #6, #10
   207b8:	f240 233e 	movw	r3, #574	; 0x23e
   207bc:	4a42      	ldr	r2, [pc, #264]	; (208c8 <cloud_cmd_handler+0x164>)
}
   207be:	b003      	add	sp, #12
   207c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LOG_ERR("[%s:%d] Modem AT cmd in progress.", __func__,
   207c4:	f01b bf5d 	b.w	3c682 <log_string_sync>
	if (strnlen(at_cmd, max_cmd_len) == max_cmd_len) {
   207c8:	f640 218d 	movw	r1, #2701	; 0xa8d
   207cc:	4620      	mov	r0, r4
   207ce:	f01e fc9a 	bl	3f106 <strnlen>
   207d2:	f640 228d 	movw	r2, #2701	; 0xa8d
   207d6:	4290      	cmp	r0, r2
   207d8:	d11b      	bne.n	20812 <cloud_cmd_handler+0xae>
		LOG_ERR("[%s:%d] AT cmd is too long, max length is %zu",
   207da:	2301      	movs	r3, #1
   207dc:	f04f 0000 	mov.w	r0, #0
   207e0:	4a36      	ldr	r2, [pc, #216]	; (208bc <cloud_cmd_handler+0x158>)
   207e2:	f363 0007 	bfi	r0, r3, #0, #8
   207e6:	4b36      	ldr	r3, [pc, #216]	; (208c0 <cloud_cmd_handler+0x15c>)
   207e8:	4938      	ldr	r1, [pc, #224]	; (208cc <cloud_cmd_handler+0x168>)
   207ea:	1a9b      	subs	r3, r3, r2
   207ec:	08db      	lsrs	r3, r3, #3
   207ee:	f363 108f 	bfi	r0, r3, #6, #10
   207f2:	f640 238c 	movw	r3, #2700	; 0xa8c
   207f6:	4a34      	ldr	r2, [pc, #208]	; (208c8 <cloud_cmd_handler+0x164>)
   207f8:	9300      	str	r3, [sp, #0]
   207fa:	f240 2347 	movw	r3, #583	; 0x247
   207fe:	f01b ff40 	bl	3c682 <log_string_sync>
		modem_at_cmd_buff[0] = '\0';
   20802:	4b33      	ldr	r3, [pc, #204]	; (208d0 <cloud_cmd_handler+0x16c>)
   20804:	701d      	strb	r5, [r3, #0]
	k_work_submit_to_queue(&application_work_q, &send_modem_at_cmd_work);
   20806:	4833      	ldr	r0, [pc, #204]	; (208d4 <cloud_cmd_handler+0x170>)
}
   20808:	b003      	add	sp, #12
   2080a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		k_work_submit_to_queue(&application_work_q,
   2080e:	f7ff bf95 	b.w	2073c <k_work_submit_to_queue.constprop.15>
		strcpy(modem_at_cmd_buff, at_cmd);
   20812:	4621      	mov	r1, r4
   20814:	482e      	ldr	r0, [pc, #184]	; (208d0 <cloud_cmd_handler+0x16c>)
   20816:	f01e fc35 	bl	3f084 <__strcpy_chk>
   2081a:	e7f4      	b.n	20806 <cloud_cmd_handler+0xa2>
	} else if ((cmd->channel == CLOUD_CHANNEL_RGB_LED) &&
   2081c:	492e      	ldr	r1, [pc, #184]	; (208d8 <cloud_cmd_handler+0x174>)
   2081e:	428b      	cmp	r3, r1
   20820:	d10d      	bne.n	2083e <cloud_cmd_handler+0xda>
		ui_led_set_color(((u32_t)cmd->data.sv.value >> 16) & 0xFF,
   20822:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   20826:	f7fc fa89 	bl	1cd3c <__aeabi_d2uiz>
   2082a:	b2c2      	uxtb	r2, r0
   2082c:	f3c0 2107 	ubfx	r1, r0, #8, #8
   20830:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
   20834:	b003      	add	sp, #12
   20836:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		ui_led_set_color(((u32_t)cmd->data.sv.value >> 16) & 0xFF,
   2083a:	f01b bbdb 	b.w	3bff4 <ui_led_set_color>
	} else if ((cmd->channel == CLOUD_CHANNEL_DEVICE_INFO) &&
   2083e:	f640 5104 	movw	r1, #3332	; 0xd04
   20842:	428b      	cmp	r3, r1
   20844:	d101      	bne.n	2084a <cloud_cmd_handler+0xe6>
		k_work_submit_to_queue(&application_work_q,
   20846:	4825      	ldr	r0, [pc, #148]	; (208dc <cloud_cmd_handler+0x178>)
   20848:	e7de      	b.n	20808 <cloud_cmd_handler+0xa4>
	} else if ((cmd->channel == CLOUD_CHANNEL_LTE_LINK_RSRP) &&
   2084a:	f640 4104 	movw	r1, #3076	; 0xc04
   2084e:	428b      	cmp	r3, r1
   20850:	d107      	bne.n	20862 <cloud_cmd_handler+0xfe>
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   20852:	2200      	movs	r2, #0
   20854:	4922      	ldr	r1, [pc, #136]	; (208e0 <cloud_cmd_handler+0x17c>)
   20856:	4823      	ldr	r0, [pc, #140]	; (208e4 <cloud_cmd_handler+0x180>)
}
   20858:	b003      	add	sp, #12
   2085a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   2085e:	f018 bb51 	b.w	38f04 <k_delayed_work_submit_to_queue>
	} else if ((cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   20862:	4b21      	ldr	r3, [pc, #132]	; (208e8 <cloud_cmd_handler+0x184>)
   20864:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
   20868:	429a      	cmp	r2, r3
   2086a:	d11f      	bne.n	208ac <cloud_cmd_handler+0x148>
		if (cmd->channel == CLOUD_CHANNEL_LIGHT_SENSOR) {
   2086c:	7842      	ldrb	r2, [r0, #1]
   2086e:	2a0e      	cmp	r2, #14
   20870:	d01c      	beq.n	208ac <cloud_cmd_handler+0x148>
		} else if (cmd->channel == CLOUD_CHANNEL_ENVIRONMENT) {
   20872:	2a07      	cmp	r2, #7
   20874:	d108      	bne.n	20888 <cloud_cmd_handler+0x124>
			env_sensors_set_send_interval(
   20876:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   2087a:	f7fc fa5f 	bl	1cd3c <__aeabi_d2uiz>
}
   2087e:	b003      	add	sp, #12
   20880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			env_sensors_set_send_interval(
   20884:	f002 b8d0 	b.w	22a28 <env_sensors_set_send_interval>
		} else if (cmd->channel == CLOUD_CHANNEL_GPS) {
   20888:	b182      	cbz	r2, 208ac <cloud_cmd_handler+0x148>
			LOG_ERR("Interval command not valid for channel %d",
   2088a:	2301      	movs	r3, #1
   2088c:	f04f 0000 	mov.w	r0, #0
   20890:	490a      	ldr	r1, [pc, #40]	; (208bc <cloud_cmd_handler+0x158>)
   20892:	f363 0007 	bfi	r0, r3, #0, #8
   20896:	4b0a      	ldr	r3, [pc, #40]	; (208c0 <cloud_cmd_handler+0x15c>)
   20898:	1a5b      	subs	r3, r3, r1
   2089a:	08db      	lsrs	r3, r3, #3
   2089c:	4913      	ldr	r1, [pc, #76]	; (208ec <cloud_cmd_handler+0x188>)
   2089e:	f363 108f 	bfi	r0, r3, #6, #10
}
   208a2:	b003      	add	sp, #12
   208a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Interval command not valid for channel %d",
   208a8:	f01b beeb 	b.w	3c682 <log_string_sync>
}
   208ac:	b003      	add	sp, #12
   208ae:	bd30      	pop	{r4, r5, pc}
   208b0:	00010008 	.word	0x00010008
   208b4:	0007140a 	.word	0x0007140a
   208b8:	20031898 	.word	0x20031898
   208bc:	000402cc 	.word	0x000402cc
   208c0:	000402cc 	.word	0x000402cc
   208c4:	000412a8 	.word	0x000412a8
   208c8:	0004128a 	.word	0x0004128a
   208cc:	000412ca 	.word	0x000412ca
   208d0:	2002949d 	.word	0x2002949d
   208d4:	2002395c 	.word	0x2002395c
   208d8:	00050508 	.word	0x00050508
   208dc:	200238e4 	.word	0x200238e4
   208e0:	2002392c 	.word	0x2002392c
   208e4:	200237d8 	.word	0x200237d8
   208e8:	00040008 	.word	0x00040008
   208ec:	000412f8 	.word	0x000412f8

000208f0 <gps_trigger_handler>:
{
   208f0:	b570      	push	{r4, r5, r6, lr}
   208f2:	4604      	mov	r4, r0
	if (!atomic_get(&send_data_enable)) {
   208f4:	4818      	ldr	r0, [pc, #96]	; (20958 <gps_trigger_handler+0x68>)
   208f6:	f01b fb66 	bl	3bfc6 <atomic_get>
   208fa:	b128      	cbz	r0, 20908 <gps_trigger_handler+0x18>
	if (++fix_count < CONFIG_GPS_CONTROL_FIX_COUNT) {
   208fc:	4a17      	ldr	r2, [pc, #92]	; (2095c <gps_trigger_handler+0x6c>)
   208fe:	6813      	ldr	r3, [r2, #0]
   20900:	3301      	adds	r3, #1
   20902:	2b02      	cmp	r3, #2
   20904:	d801      	bhi.n	2090a <gps_trigger_handler+0x1a>
   20906:	6013      	str	r3, [r2, #0]
}
   20908:	bd70      	pop	{r4, r5, r6, pc}
	fix_count = 0;
   2090a:	2600      	movs	r6, #0
	ui_led_set_pattern(UI_LED_GPS_FIX);
   2090c:	2008      	movs	r0, #8
	fix_count = 0;
   2090e:	6016      	str	r6, [r2, #0]
	ui_led_set_pattern(UI_LED_GPS_FIX);
   20910:	f000 ffd8 	bl	218c4 <ui_led_set_pattern>
static inline int gps_sample_fetch(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->sample_fetch(dev);
   20914:	6863      	ldr	r3, [r4, #4]
   20916:	4620      	mov	r0, r4
   20918:	685b      	ldr	r3, [r3, #4]
   2091a:	4798      	blx	r3
				  struct gps_data *data)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->channel_get(dev, chan, data);
   2091c:	4d10      	ldr	r5, [pc, #64]	; (20960 <gps_trigger_handler+0x70>)
   2091e:	6863      	ldr	r3, [r4, #4]
   20920:	4631      	mov	r1, r6
   20922:	462a      	mov	r2, r5
   20924:	689b      	ldr	r3, [r3, #8]
   20926:	4620      	mov	r0, r4
   20928:	4798      	blx	r3
	gps_cloud_data.data.buf = gps_data.nmea.buf;
   2092a:	4b0e      	ldr	r3, [pc, #56]	; (20964 <gps_trigger_handler+0x74>)
   2092c:	f105 0208 	add.w	r2, r5, #8
   20930:	605a      	str	r2, [r3, #4]
	gps_cloud_data.data.len = gps_data.nmea.len;
   20932:	f895 205b 	ldrb.w	r2, [r5, #91]	; 0x5b
	gps_control_stop(K_NO_WAIT);
   20936:	2000      	movs	r0, #0
	gps_cloud_data.data.len = gps_data.nmea.len;
   20938:	609a      	str	r2, [r3, #8]
	gps_cloud_data.tag += 1;
   2093a:	68da      	ldr	r2, [r3, #12]
	if (gps_cloud_data.tag == 0) {
   2093c:	3201      	adds	r2, #1
		gps_cloud_data.tag = 0x1;
   2093e:	bf08      	it	eq
   20940:	2201      	moveq	r2, #1
   20942:	60da      	str	r2, [r3, #12]
	gps_control_stop(K_NO_WAIT);
   20944:	f001 fe3a 	bl	225bc <gps_control_stop>
	k_work_submit_to_queue(&application_work_q, &send_gps_data_work);
   20948:	4807      	ldr	r0, [pc, #28]	; (20968 <gps_trigger_handler+0x78>)
   2094a:	f7ff fef7 	bl	2073c <k_work_submit_to_queue.constprop.15>
}
   2094e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	env_sensors_poll();
   20952:	f001 bef1 	b.w	22738 <env_sensors_poll>
   20956:	bf00      	nop
   20958:	2002394c 	.word	0x2002394c
   2095c:	200238f0 	.word	0x200238f0
   20960:	20020000 	.word	0x20020000
   20964:	200238f4 	.word	0x200238f4
   20968:	20023950 	.word	0x20023950

0002096c <error_handler>:
{
   2096c:	b510      	push	{r4, lr}
	if (err_type == ERROR_CLOUD) {
   2096e:	4604      	mov	r4, r0
   20970:	b9a8      	cbnz	r0, 2099e <error_handler+0x32>
		if (gps_control_is_enabled()) {
   20972:	f001 fe19 	bl	225a8 <gps_control_is_enabled>
   20976:	b180      	cbz	r0, 2099a <error_handler+0x2e>
			LOG_ERR("Reboot");
   20978:	2301      	movs	r3, #1
   2097a:	f04f 0000 	mov.w	r0, #0
   2097e:	4a0b      	ldr	r2, [pc, #44]	; (209ac <error_handler+0x40>)
   20980:	f363 0007 	bfi	r0, r3, #0, #8
   20984:	4b0a      	ldr	r3, [pc, #40]	; (209b0 <error_handler+0x44>)
   20986:	490b      	ldr	r1, [pc, #44]	; (209b4 <error_handler+0x48>)
   20988:	1a9b      	subs	r3, r3, r2
   2098a:	08db      	lsrs	r3, r3, #3
   2098c:	f363 108f 	bfi	r0, r3, #6, #10
   20990:	f01b fe77 	bl	3c682 <log_string_sync>
			sys_reboot(0);
   20994:	4620      	mov	r0, r4
   20996:	f002 fe29 	bl	235ec <sys_reboot>
		shutdown_modem();
   2099a:	f7ff fd21 	bl	203e0 <shutdown_modem>
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   2099e:	f002 fa6b 	bl	22e78 <z_impl_log_panic>
}
   209a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sys_reboot(0);
   209a6:	2000      	movs	r0, #0
   209a8:	f002 be20 	b.w	235ec <sys_reboot>
   209ac:	000402cc 	.word	0x000402cc
   209b0:	000402cc 	.word	0x000402cc
   209b4:	00041641 	.word	0x00041641

000209b8 <k_sys_fatal_error_handler>:
{
   209b8:	b508      	push	{r3, lr}
   209ba:	f002 fa5d 	bl	22e78 <z_impl_log_panic>
	LOG_ERR("Running main.c error handler");
   209be:	2301      	movs	r3, #1
   209c0:	f04f 0000 	mov.w	r0, #0
   209c4:	4a07      	ldr	r2, [pc, #28]	; (209e4 <k_sys_fatal_error_handler+0x2c>)
   209c6:	f363 0007 	bfi	r0, r3, #0, #8
   209ca:	4b07      	ldr	r3, [pc, #28]	; (209e8 <k_sys_fatal_error_handler+0x30>)
   209cc:	4907      	ldr	r1, [pc, #28]	; (209ec <k_sys_fatal_error_handler+0x34>)
   209ce:	1a9b      	subs	r3, r3, r2
   209d0:	08db      	lsrs	r3, r3, #3
   209d2:	f363 108f 	bfi	r0, r3, #6, #10
   209d6:	f01b fe54 	bl	3c682 <log_string_sync>
   209da:	f002 fa4d 	bl	22e78 <z_impl_log_panic>
	sys_reboot(0);
   209de:	2000      	movs	r0, #0
   209e0:	f002 fe04 	bl	235ec <sys_reboot>
	CODE_UNREACHABLE;
   209e4:	000402cc 	.word	0x000402cc
   209e8:	000402cc 	.word	0x000402cc
   209ec:	000416c8 	.word	0x000416c8

000209f0 <env_data_send>:
{
   209f0:	b510      	push	{r4, lr}
   209f2:	b08a      	sub	sp, #40	; 0x28
	struct cloud_msg msg = {
   209f4:	2218      	movs	r2, #24
   209f6:	2100      	movs	r1, #0
   209f8:	a804      	add	r0, sp, #16
   209fa:	f01e f986 	bl	3ed0a <memset>
	if (!atomic_get(&send_data_enable)) {
   209fe:	484b      	ldr	r0, [pc, #300]	; (20b2c <env_data_send+0x13c>)
   20a00:	f01b fae1 	bl	3bfc6 <atomic_get>
   20a04:	b128      	cbz	r0, 20a12 <env_data_send+0x22>
	if (gps_control_is_active()) {
   20a06:	f001 fdc5 	bl	22594 <gps_control_is_active>
   20a0a:	b120      	cbz	r0, 20a16 <env_data_send+0x26>
		env_sensors_set_backoff_enable(true);
   20a0c:	2001      	movs	r0, #1
   20a0e:	f002 f839 	bl	22a84 <env_sensors_set_backoff_enable>
}
   20a12:	b00a      	add	sp, #40	; 0x28
   20a14:	bd10      	pop	{r4, pc}
	env_sensors_set_backoff_enable(false);
   20a16:	f002 f835 	bl	22a84 <env_sensors_set_backoff_enable>
	if (env_sensors_get_temperature(&env_data) == 0) {
   20a1a:	4668      	mov	r0, sp
   20a1c:	f001 fef6 	bl	2280c <env_sensors_get_temperature>
   20a20:	b338      	cbz	r0, 20a72 <env_data_send+0x82>
	if (env_sensors_get_humidity(&env_data) == 0) {
   20a22:	4668      	mov	r0, sp
   20a24:	f001 ff4c 	bl	228c0 <env_sensors_get_humidity>
   20a28:	2800      	cmp	r0, #0
   20a2a:	d04d      	beq.n	20ac8 <env_data_send+0xd8>
	if (env_sensors_get_pressure(&env_data) == 0) {
   20a2c:	4668      	mov	r0, sp
   20a2e:	f001 ffa1 	bl	22974 <env_sensors_get_pressure>
   20a32:	2800      	cmp	r0, #0
   20a34:	d061      	beq.n	20afa <env_data_send+0x10a>
	if (env_sensors_get_air_quality(&env_data) == 0) {
   20a36:	4668      	mov	r0, sp
   20a38:	f01b fb2a 	bl	3c090 <env_sensors_get_air_quality>
   20a3c:	2800      	cmp	r0, #0
   20a3e:	d1e8      	bne.n	20a12 <env_data_send+0x22>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_AIR_QUAL,
   20a40:	ed9d 0b02 	vldr	d0, [sp, #8]
   20a44:	200b      	movs	r0, #11
   20a46:	f001 fbff 	bl	22248 <cloud_is_send_allowed>
   20a4a:	2800      	cmp	r0, #0
   20a4c:	d0e1      	beq.n	20a12 <env_data_send+0x22>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   20a4e:	a904      	add	r1, sp, #16
   20a50:	4668      	mov	r0, sp
   20a52:	f001 fb67 	bl	22124 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   20a56:	2800      	cmp	r0, #0
   20a58:	d1db      	bne.n	20a12 <env_data_send+0x22>
			err = cloud_send(cloud_backend, &msg);
   20a5a:	4b35      	ldr	r3, [pc, #212]	; (20b30 <env_data_send+0x140>)
   20a5c:	a904      	add	r1, sp, #16
   20a5e:	6818      	ldr	r0, [r3, #0]
   20a60:	f01b faa0 	bl	3bfa4 <cloud_send>
   20a64:	4604      	mov	r4, r0
   20a66:	9804      	ldr	r0, [sp, #16]
   20a68:	f01d ff8e 	bl	3e988 <k_free>
			if (err) {
   20a6c:	2c00      	cmp	r4, #0
   20a6e:	d0d0      	beq.n	20a12 <env_data_send+0x22>
   20a70:	e017      	b.n	20aa2 <env_data_send+0xb2>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_TEMP, env_data.value) &&
   20a72:	ed9d 0b02 	vldr	d0, [sp, #8]
   20a76:	2008      	movs	r0, #8
   20a78:	f001 fbe6 	bl	22248 <cloud_is_send_allowed>
   20a7c:	2800      	cmp	r0, #0
   20a7e:	d0d0      	beq.n	20a22 <env_data_send+0x32>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   20a80:	a904      	add	r1, sp, #16
   20a82:	4668      	mov	r0, sp
   20a84:	f001 fb4e 	bl	22124 <cloud_encode_env_sensors_data>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_TEMP, env_data.value) &&
   20a88:	2800      	cmp	r0, #0
   20a8a:	d1ca      	bne.n	20a22 <env_data_send+0x32>
			err = cloud_send(cloud_backend, &msg);
   20a8c:	4b28      	ldr	r3, [pc, #160]	; (20b30 <env_data_send+0x140>)
   20a8e:	a904      	add	r1, sp, #16
   20a90:	6818      	ldr	r0, [r3, #0]
   20a92:	f01b fa87 	bl	3bfa4 <cloud_send>
   20a96:	4604      	mov	r4, r0
   20a98:	9804      	ldr	r0, [sp, #16]
   20a9a:	f01d ff75 	bl	3e988 <k_free>
			if (err) {
   20a9e:	2c00      	cmp	r4, #0
   20aa0:	d0bf      	beq.n	20a22 <env_data_send+0x32>
	LOG_ERR("sensor_data_send failed: %d", err);
   20aa2:	2301      	movs	r3, #1
   20aa4:	f04f 0000 	mov.w	r0, #0
   20aa8:	4a22      	ldr	r2, [pc, #136]	; (20b34 <env_data_send+0x144>)
   20aaa:	f363 0007 	bfi	r0, r3, #0, #8
   20aae:	4b22      	ldr	r3, [pc, #136]	; (20b38 <env_data_send+0x148>)
   20ab0:	4922      	ldr	r1, [pc, #136]	; (20b3c <env_data_send+0x14c>)
   20ab2:	1a9b      	subs	r3, r3, r2
   20ab4:	08db      	lsrs	r3, r3, #3
   20ab6:	f363 108f 	bfi	r0, r3, #6, #10
   20aba:	4622      	mov	r2, r4
   20abc:	f01b fde1 	bl	3c682 <log_string_sync>
	cloud_error_handler(err);
   20ac0:	4620      	mov	r0, r4
   20ac2:	f01b fa88 	bl	3bfd6 <cloud_error_handler>
   20ac6:	e7a4      	b.n	20a12 <env_data_send+0x22>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_HUMID,
   20ac8:	ed9d 0b02 	vldr	d0, [sp, #8]
   20acc:	2009      	movs	r0, #9
   20ace:	f001 fbbb 	bl	22248 <cloud_is_send_allowed>
   20ad2:	2800      	cmp	r0, #0
   20ad4:	d0aa      	beq.n	20a2c <env_data_send+0x3c>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   20ad6:	a904      	add	r1, sp, #16
   20ad8:	4668      	mov	r0, sp
   20ada:	f001 fb23 	bl	22124 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   20ade:	2800      	cmp	r0, #0
   20ae0:	d1a4      	bne.n	20a2c <env_data_send+0x3c>
			err = cloud_send(cloud_backend, &msg);
   20ae2:	4b13      	ldr	r3, [pc, #76]	; (20b30 <env_data_send+0x140>)
   20ae4:	a904      	add	r1, sp, #16
   20ae6:	6818      	ldr	r0, [r3, #0]
   20ae8:	f01b fa5c 	bl	3bfa4 <cloud_send>
   20aec:	4604      	mov	r4, r0
   20aee:	9804      	ldr	r0, [sp, #16]
   20af0:	f01d ff4a 	bl	3e988 <k_free>
			if (err) {
   20af4:	2c00      	cmp	r4, #0
   20af6:	d099      	beq.n	20a2c <env_data_send+0x3c>
   20af8:	e7d3      	b.n	20aa2 <env_data_send+0xb2>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_AIR_PRESS,
   20afa:	ed9d 0b02 	vldr	d0, [sp, #8]
   20afe:	200a      	movs	r0, #10
   20b00:	f001 fba2 	bl	22248 <cloud_is_send_allowed>
   20b04:	2800      	cmp	r0, #0
   20b06:	d096      	beq.n	20a36 <env_data_send+0x46>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   20b08:	a904      	add	r1, sp, #16
   20b0a:	4668      	mov	r0, sp
   20b0c:	f001 fb0a 	bl	22124 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   20b10:	2800      	cmp	r0, #0
   20b12:	d190      	bne.n	20a36 <env_data_send+0x46>
			err = cloud_send(cloud_backend, &msg);
   20b14:	4b06      	ldr	r3, [pc, #24]	; (20b30 <env_data_send+0x140>)
   20b16:	a904      	add	r1, sp, #16
   20b18:	6818      	ldr	r0, [r3, #0]
   20b1a:	f01b fa43 	bl	3bfa4 <cloud_send>
   20b1e:	4604      	mov	r4, r0
   20b20:	9804      	ldr	r0, [sp, #16]
   20b22:	f01d ff31 	bl	3e988 <k_free>
			if (err) {
   20b26:	2c00      	cmp	r4, #0
   20b28:	d085      	beq.n	20a36 <env_data_send+0x46>
   20b2a:	e7ba      	b.n	20aa2 <env_data_send+0xb2>
   20b2c:	2002394c 	.word	0x2002394c
   20b30:	200238a0 	.word	0x200238a0
   20b34:	000402cc 	.word	0x000402cc
   20b38:	000402cc 	.word	0x000402cc
   20b3c:	00041625 	.word	0x00041625

00020b40 <motion_handler>:
{
   20b40:	b084      	sub	sp, #16
   20b42:	b530      	push	{r4, r5, lr}
   20b44:	b087      	sub	sp, #28
   20b46:	ac0a      	add	r4, sp, #40	; 0x28
   20b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (gps_control_is_active()) {
   20b4c:	f001 fd22 	bl	22594 <gps_control_is_active>
   20b50:	4601      	mov	r1, r0
   20b52:	bb70      	cbnz	r0, 20bb2 <motion_handler+0x72>
	if (motion_data.orientation != last_orientation_state) {
   20b54:	4c1b      	ldr	r4, [pc, #108]	; (20bc4 <motion_handler+0x84>)
   20b56:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
   20b5a:	7822      	ldrb	r2, [r4, #0]
   20b5c:	4290      	cmp	r0, r2
   20b5e:	d028      	beq.n	20bb2 <motion_handler+0x72>
		if (flip_mode_enabled && atomic_get(&send_data_enable)) {
   20b60:	4819      	ldr	r0, [pc, #100]	; (20bc8 <motion_handler+0x88>)
   20b62:	f01b fa30 	bl	3bfc6 <atomic_get>
   20b66:	b320      	cbz	r0, 20bb2 <motion_handler+0x72>
			struct cloud_msg msg = {
   20b68:	2218      	movs	r2, #24
   20b6a:	4668      	mov	r0, sp
   20b6c:	f01e f8cd 	bl	3ed0a <memset>
			if (cloud_encode_motion_data(&motion_data, &msg) == 0) {
   20b70:	4669      	mov	r1, sp
   20b72:	a80a      	add	r0, sp, #40	; 0x28
   20b74:	f001 fb26 	bl	221c4 <cloud_encode_motion_data>
   20b78:	bb00      	cbnz	r0, 20bbc <motion_handler+0x7c>
				err = cloud_send(cloud_backend, &msg);
   20b7a:	4b14      	ldr	r3, [pc, #80]	; (20bcc <motion_handler+0x8c>)
   20b7c:	4669      	mov	r1, sp
   20b7e:	6818      	ldr	r0, [r3, #0]
   20b80:	f01b fa10 	bl	3bfa4 <cloud_send>
   20b84:	4605      	mov	r5, r0
   20b86:	9800      	ldr	r0, [sp, #0]
   20b88:	f01d fefe 	bl	3e988 <k_free>
				if (err) {
   20b8c:	b1b5      	cbz	r5, 20bbc <motion_handler+0x7c>
					LOG_ERR("Transmisison of "
   20b8e:	2301      	movs	r3, #1
   20b90:	f04f 0000 	mov.w	r0, #0
   20b94:	4a0e      	ldr	r2, [pc, #56]	; (20bd0 <motion_handler+0x90>)
   20b96:	f363 0007 	bfi	r0, r3, #0, #8
   20b9a:	4b0e      	ldr	r3, [pc, #56]	; (20bd4 <motion_handler+0x94>)
   20b9c:	490e      	ldr	r1, [pc, #56]	; (20bd8 <motion_handler+0x98>)
   20b9e:	1a9b      	subs	r3, r3, r2
   20ba0:	08db      	lsrs	r3, r3, #3
   20ba2:	f363 108f 	bfi	r0, r3, #6, #10
   20ba6:	462a      	mov	r2, r5
   20ba8:	f01b fd6b 	bl	3c682 <log_string_sync>
					cloud_error_handler(err);
   20bac:	4628      	mov	r0, r5
   20bae:	f01b fa12 	bl	3bfd6 <cloud_error_handler>
}
   20bb2:	b007      	add	sp, #28
   20bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   20bb8:	b004      	add	sp, #16
   20bba:	4770      	bx	lr
				last_orientation_state =
   20bbc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   20bc0:	7023      	strb	r3, [r4, #0]
   20bc2:	e7f6      	b.n	20bb2 <motion_handler+0x72>
   20bc4:	2002949c 	.word	0x2002949c
   20bc8:	2002394c 	.word	0x2002394c
   20bcc:	200238a0 	.word	0x200238a0
   20bd0:	000402cc 	.word	0x000402cc
   20bd4:	000402cc 	.word	0x000402cc
   20bd8:	000419dd 	.word	0x000419dd

00020bdc <sensor_data_send>:
{
   20bdc:	b510      	push	{r4, lr}
   20bde:	4604      	mov	r4, r0
   20be0:	b086      	sub	sp, #24
	struct cloud_msg msg = {
   20be2:	2218      	movs	r2, #24
   20be4:	2100      	movs	r1, #0
   20be6:	4668      	mov	r0, sp
   20be8:	f01e f88f 	bl	3ed0a <memset>
	if (data->type == CLOUD_CHANNEL_DEVICE_INFO) {
   20bec:	7823      	ldrb	r3, [r4, #0]
	if (!atomic_get(&send_data_enable) || gps_control_is_active()) {
   20bee:	4824      	ldr	r0, [pc, #144]	; (20c80 <sensor_data_send+0xa4>)
	if (data->type == CLOUD_CHANNEL_DEVICE_INFO) {
   20bf0:	2b0d      	cmp	r3, #13
		msg.endpoint.type = CLOUD_EP_TOPIC_STATE;
   20bf2:	bf04      	itt	eq
   20bf4:	2301      	moveq	r3, #1
   20bf6:	f8ad 300c 	strheq.w	r3, [sp, #12]
	if (!atomic_get(&send_data_enable) || gps_control_is_active()) {
   20bfa:	f01b f9e4 	bl	3bfc6 <atomic_get>
   20bfe:	2800      	cmp	r0, #0
   20c00:	d037      	beq.n	20c72 <sensor_data_send+0x96>
   20c02:	f001 fcc7 	bl	22594 <gps_control_is_active>
   20c06:	bba0      	cbnz	r0, 20c72 <sensor_data_send+0x96>
	if (data->type != CLOUD_CHANNEL_DEVICE_INFO) {
   20c08:	7823      	ldrb	r3, [r4, #0]
   20c0a:	2b0d      	cmp	r3, #13
   20c0c:	d033      	beq.n	20c76 <sensor_data_send+0x9a>
		err = cloud_encode_data(data, CLOUD_CMD_GROUP_DATA, &msg);
   20c0e:	466a      	mov	r2, sp
   20c10:	2106      	movs	r1, #6
   20c12:	4620      	mov	r0, r4
   20c14:	f000 ffd8 	bl	21bc8 <cloud_encode_data>
	if (err) {
   20c18:	b178      	cbz	r0, 20c3a <sensor_data_send+0x5e>
		LOG_ERR("Unable to encode cloud data: %d", err);
   20c1a:	2301      	movs	r3, #1
   20c1c:	f04f 0400 	mov.w	r4, #0
   20c20:	4a18      	ldr	r2, [pc, #96]	; (20c84 <sensor_data_send+0xa8>)
   20c22:	f363 0407 	bfi	r4, r3, #0, #8
   20c26:	4b18      	ldr	r3, [pc, #96]	; (20c88 <sensor_data_send+0xac>)
   20c28:	4918      	ldr	r1, [pc, #96]	; (20c8c <sensor_data_send+0xb0>)
   20c2a:	1a9b      	subs	r3, r3, r2
   20c2c:	08db      	lsrs	r3, r3, #3
   20c2e:	f363 148f 	bfi	r4, r3, #6, #10
   20c32:	4602      	mov	r2, r0
   20c34:	4620      	mov	r0, r4
   20c36:	f01b fd24 	bl	3c682 <log_string_sync>
	err = cloud_send(cloud_backend, &msg);
   20c3a:	4b15      	ldr	r3, [pc, #84]	; (20c90 <sensor_data_send+0xb4>)
   20c3c:	4669      	mov	r1, sp
   20c3e:	6818      	ldr	r0, [r3, #0]
   20c40:	f01b f9b0 	bl	3bfa4 <cloud_send>
   20c44:	4604      	mov	r4, r0
   20c46:	9800      	ldr	r0, [sp, #0]
   20c48:	f01d fe9e 	bl	3e988 <k_free>
	if (err) {
   20c4c:	b18c      	cbz	r4, 20c72 <sensor_data_send+0x96>
		LOG_ERR("sensor_data_send failed: %d", err);
   20c4e:	2301      	movs	r3, #1
   20c50:	f04f 0000 	mov.w	r0, #0
   20c54:	4a0b      	ldr	r2, [pc, #44]	; (20c84 <sensor_data_send+0xa8>)
   20c56:	f363 0007 	bfi	r0, r3, #0, #8
   20c5a:	4b0b      	ldr	r3, [pc, #44]	; (20c88 <sensor_data_send+0xac>)
   20c5c:	490d      	ldr	r1, [pc, #52]	; (20c94 <sensor_data_send+0xb8>)
   20c5e:	1a9b      	subs	r3, r3, r2
   20c60:	08db      	lsrs	r3, r3, #3
   20c62:	f363 108f 	bfi	r0, r3, #6, #10
   20c66:	4622      	mov	r2, r4
   20c68:	f01b fd0b 	bl	3c682 <log_string_sync>
		cloud_error_handler(err);
   20c6c:	4620      	mov	r0, r4
   20c6e:	f01b f9b2 	bl	3bfd6 <cloud_error_handler>
}
   20c72:	b006      	add	sp, #24
   20c74:	bd10      	pop	{r4, pc}
		err = cloud_encode_digital_twin_data(data, &msg);
   20c76:	4669      	mov	r1, sp
   20c78:	4620      	mov	r0, r4
   20c7a:	f001 f809 	bl	21c90 <cloud_encode_digital_twin_data>
   20c7e:	e7cb      	b.n	20c18 <sensor_data_send+0x3c>
   20c80:	2002394c 	.word	0x2002394c
   20c84:	000402cc 	.word	0x000402cc
   20c88:	000402cc 	.word	0x000402cc
   20c8c:	00041afa 	.word	0x00041afa
   20c90:	200238a0 	.word	0x200238a0
   20c94:	00041625 	.word	0x00041625

00020c98 <modem_rsrp_data_send>:
{
   20c98:	b530      	push	{r4, r5, lr}
   20c9a:	b0a1      	sub	sp, #132	; 0x84
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   20c9c:	2280      	movs	r2, #128	; 0x80
   20c9e:	2100      	movs	r1, #0
   20ca0:	4668      	mov	r0, sp
   20ca2:	f01e f832 	bl	3ed0a <memset>
	if (!atomic_get(&send_data_enable)) {
   20ca6:	4813      	ldr	r0, [pc, #76]	; (20cf4 <modem_rsrp_data_send+0x5c>)
   20ca8:	f01b f98d 	bl	3bfc6 <atomic_get>
   20cac:	b300      	cbz	r0, 20cf0 <modem_rsrp_data_send+0x58>
	rsrp_current = rsrp.value - rsrp.offset;
   20cae:	4b12      	ldr	r3, [pc, #72]	; (20cf8 <modem_rsrp_data_send+0x60>)
	if (rsrp_current == rsrp_prev) {
   20cb0:	4d12      	ldr	r5, [pc, #72]	; (20cfc <modem_rsrp_data_send+0x64>)
	rsrp_current = rsrp.value - rsrp.offset;
   20cb2:	881c      	ldrh	r4, [r3, #0]
   20cb4:	885b      	ldrh	r3, [r3, #2]
	if (rsrp_current == rsrp_prev) {
   20cb6:	682a      	ldr	r2, [r5, #0]
	rsrp_current = rsrp.value - rsrp.offset;
   20cb8:	1ae4      	subs	r4, r4, r3
	if (rsrp_current == rsrp_prev) {
   20cba:	42a2      	cmp	r2, r4
   20cbc:	d018      	beq.n	20cf0 <modem_rsrp_data_send+0x58>
	len = snprintf(buf, CONFIG_MODEM_INFO_BUFFER_SIZE,
   20cbe:	2180      	movs	r1, #128	; 0x80
   20cc0:	4623      	mov	r3, r4
   20cc2:	4a0f      	ldr	r2, [pc, #60]	; (20d00 <modem_rsrp_data_send+0x68>)
   20cc4:	4668      	mov	r0, sp
   20cc6:	f019 fe2f 	bl	3a928 <sniprintf>
	signal_strength_cloud_data.data.buf = buf;
   20cca:	4b0e      	ldr	r3, [pc, #56]	; (20d04 <modem_rsrp_data_send+0x6c>)
	signal_strength_cloud_data.tag += 1;
   20ccc:	68da      	ldr	r2, [r3, #12]
	signal_strength_cloud_data.data.len = len;
   20cce:	6098      	str	r0, [r3, #8]
	if (signal_strength_cloud_data.tag == 0) {
   20cd0:	3201      	adds	r2, #1
		signal_strength_cloud_data.tag = 0x1;
   20cd2:	bf08      	it	eq
   20cd4:	2201      	moveq	r2, #1
	sensor_data_send(&signal_strength_cloud_data);
   20cd6:	480b      	ldr	r0, [pc, #44]	; (20d04 <modem_rsrp_data_send+0x6c>)
		signal_strength_cloud_data.tag = 0x1;
   20cd8:	60da      	str	r2, [r3, #12]
	signal_strength_cloud_data.data.buf = buf;
   20cda:	f8c3 d004 	str.w	sp, [r3, #4]
	sensor_data_send(&signal_strength_cloud_data);
   20cde:	f7ff ff7d 	bl	20bdc <sensor_data_send>
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   20ce2:	f64e 2260 	movw	r2, #60000	; 0xea60
   20ce6:	4908      	ldr	r1, [pc, #32]	; (20d08 <modem_rsrp_data_send+0x70>)
   20ce8:	4808      	ldr	r0, [pc, #32]	; (20d0c <modem_rsrp_data_send+0x74>)
	rsrp_prev = rsrp_current;
   20cea:	602c      	str	r4, [r5, #0]
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   20cec:	f018 f90a 	bl	38f04 <k_delayed_work_submit_to_queue>
}
   20cf0:	b021      	add	sp, #132	; 0x84
   20cf2:	bd30      	pop	{r4, r5, pc}
   20cf4:	2002394c 	.word	0x2002394c
   20cf8:	2003174c 	.word	0x2003174c
   20cfc:	20023928 	.word	0x20023928
   20d00:	00044c3d 	.word	0x00044c3d
   20d04:	20023968 	.word	0x20023968
   20d08:	2002392c 	.word	0x2002392c
   20d0c:	200237d8 	.word	0x200237d8

00020d10 <device_status_send>:
{
   20d10:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!atomic_get(&send_data_enable)) {
   20d12:	482f      	ldr	r0, [pc, #188]	; (20dd0 <device_status_send+0xc0>)
{
   20d14:	b08b      	sub	sp, #44	; 0x2c
	if (!atomic_get(&send_data_enable)) {
   20d16:	f01b f956 	bl	3bfc6 <atomic_get>
   20d1a:	b188      	cbz	r0, 20d40 <device_status_send+0x30>
	cJSON *root_obj = cJSON_CreateObject();
   20d1c:	f005 fe22 	bl	26964 <cJSON_CreateObject>
	if (root_obj == NULL) {
   20d20:	4607      	mov	r7, r0
   20d22:	b978      	cbnz	r0, 20d44 <device_status_send+0x34>
		LOG_ERR("Unable to allocate JSON object");
   20d24:	2301      	movs	r3, #1
   20d26:	f04f 0000 	mov.w	r0, #0
   20d2a:	4a2a      	ldr	r2, [pc, #168]	; (20dd4 <device_status_send+0xc4>)
   20d2c:	f363 0007 	bfi	r0, r3, #0, #8
   20d30:	4b29      	ldr	r3, [pc, #164]	; (20dd8 <device_status_send+0xc8>)
   20d32:	492a      	ldr	r1, [pc, #168]	; (20ddc <device_status_send+0xcc>)
   20d34:	1a9b      	subs	r3, r3, r2
   20d36:	08db      	lsrs	r3, r3, #3
   20d38:	f363 108f 	bfi	r0, r3, #6, #10
   20d3c:	f01b fca1 	bl	3c682 <log_string_sync>
}
   20d40:	b00b      	add	sp, #44	; 0x2c
   20d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int ret = modem_info_params_get(&modem_param);
   20d44:	4826      	ldr	r0, [pc, #152]	; (20de0 <device_status_send+0xd0>)
   20d46:	f008 f835 	bl	28db4 <modem_info_params_get>
	if (ret < 0) {
   20d4a:	1e02      	subs	r2, r0, #0
   20d4c:	da31      	bge.n	20db2 <device_status_send+0xa2>
		LOG_ERR("Unable to obtain modem parameters: %d", ret);
   20d4e:	2301      	movs	r3, #1
   20d50:	f04f 0000 	mov.w	r0, #0
   20d54:	491f      	ldr	r1, [pc, #124]	; (20dd4 <device_status_send+0xc4>)
   20d56:	f363 0007 	bfi	r0, r3, #0, #8
   20d5a:	4b1f      	ldr	r3, [pc, #124]	; (20dd8 <device_status_send+0xc8>)
	size_t item_cnt = 0;
   20d5c:	2600      	movs	r6, #0
   20d5e:	1a5b      	subs	r3, r3, r1
   20d60:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to obtain modem parameters: %d", ret);
   20d62:	f363 108f 	bfi	r0, r3, #6, #10
   20d66:	491f      	ldr	r1, [pc, #124]	; (20de4 <device_status_send+0xd4>)
   20d68:	f01b fc8b 	bl	3c682 <log_string_sync>
	const char *const ui[] = {
   20d6c:	4d1e      	ldr	r5, [pc, #120]	; (20de8 <device_status_send+0xd8>)
   20d6e:	ac04      	add	r4, sp, #16
   20d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20d74:	e895 0003 	ldmia.w	r5, {r0, r1}
	const char *const fota[] = {
   20d78:	4b1c      	ldr	r3, [pc, #112]	; (20dec <device_status_send+0xdc>)
	const char *const ui[] = {
   20d7a:	e884 0003 	stmia.w	r4, {r0, r1}
	const char *const fota[] = {
   20d7e:	9302      	str	r3, [sp, #8]
   20d80:	4b1b      	ldr	r3, [pc, #108]	; (20df0 <device_status_send+0xe0>)
	if (service_info_json_object_encode(ui, ARRAY_SIZE(ui),
   20d82:	9701      	str	r7, [sp, #4]
	const char *const fota[] = {
   20d84:	9303      	str	r3, [sp, #12]
	if (service_info_json_object_encode(ui, ARRAY_SIZE(ui),
   20d86:	2301      	movs	r3, #1
   20d88:	aa02      	add	r2, sp, #8
   20d8a:	9300      	str	r3, [sp, #0]
   20d8c:	2106      	movs	r1, #6
   20d8e:	2302      	movs	r3, #2
   20d90:	a804      	add	r0, sp, #16
   20d92:	f001 faa5 	bl	222e0 <service_info_json_object_encode>
   20d96:	b9a8      	cbnz	r0, 20dc4 <device_status_send+0xb4>
		++item_cnt;
   20d98:	3601      	adds	r6, #1
	device_cloud_data.data.buf = (char *)root_obj;
   20d9a:	4b16      	ldr	r3, [pc, #88]	; (20df4 <device_status_send+0xe4>)
	sensor_data_send(&device_cloud_data);
   20d9c:	4815      	ldr	r0, [pc, #84]	; (20df4 <device_status_send+0xe4>)
	device_cloud_data.tag += 1;
   20d9e:	68da      	ldr	r2, [r3, #12]
	device_cloud_data.data.len = item_cnt;
   20da0:	e9c3 7601 	strd	r7, r6, [r3, #4]
	if (device_cloud_data.tag == 0) {
   20da4:	3201      	adds	r2, #1
		device_cloud_data.tag = 0x1;
   20da6:	bf08      	it	eq
   20da8:	2201      	moveq	r2, #1
   20daa:	60da      	str	r2, [r3, #12]
	sensor_data_send(&device_cloud_data);
   20dac:	f7ff ff16 	bl	20bdc <sensor_data_send>
   20db0:	e7c6      	b.n	20d40 <device_status_send+0x30>
		ret = modem_info_json_object_encode(&modem_param, root_obj);
   20db2:	4639      	mov	r1, r7
   20db4:	480a      	ldr	r0, [pc, #40]	; (20de0 <device_status_send+0xd0>)
   20db6:	f008 f977 	bl	290a8 <modem_info_json_object_encode>
			item_cnt = (size_t)ret;
   20dba:	2800      	cmp	r0, #0
   20dbc:	bfcc      	ite	gt
   20dbe:	4606      	movgt	r6, r0
   20dc0:	2600      	movle	r6, #0
   20dc2:	e7d3      	b.n	20d6c <device_status_send+0x5c>
	if (item_cnt == 0) {
   20dc4:	2e00      	cmp	r6, #0
   20dc6:	d1e8      	bne.n	20d9a <device_status_send+0x8a>
		cJSON_Delete(root_obj);
   20dc8:	4638      	mov	r0, r7
   20dca:	f005 fd07 	bl	267dc <cJSON_Delete>
		return;
   20dce:	e7b7      	b.n	20d40 <device_status_send+0x30>
   20dd0:	2002394c 	.word	0x2002394c
   20dd4:	000402cc 	.word	0x000402cc
   20dd8:	000402cc 	.word	0x000402cc
   20ddc:	000415e0 	.word	0x000415e0
   20de0:	200200c0 	.word	0x200200c0
   20de4:	000415ff 	.word	0x000415ff
   20de8:	00040408 	.word	0x00040408
   20dec:	00041be0 	.word	0x00041be0
   20df0:	00041be4 	.word	0x00041be4
   20df4:	20031180 	.word	0x20031180

00020df8 <send_gps_data_work_fn>:
	sensor_data_send(&gps_cloud_data);
   20df8:	4801      	ldr	r0, [pc, #4]	; (20e00 <send_gps_data_work_fn+0x8>)
   20dfa:	f7ff beef 	b.w	20bdc <sensor_data_send>
   20dfe:	bf00      	nop
   20e00:	200238f4 	.word	0x200238f4

00020e04 <cloud_connect_error_handler>:
{
   20e04:	b538      	push	{r3, r4, r5, lr}
	if (err == CLOUD_CONNECT_RES_SUCCESS) {
   20e06:	4605      	mov	r5, r0
   20e08:	2800      	cmp	r0, #0
   20e0a:	f000 8090 	beq.w	20f2e <cloud_connect_error_handler+0x12a>
	LOG_ERR("Failed to connect to cloud, error %d", err);
   20e0e:	2301      	movs	r3, #1
   20e10:	f04f 0000 	mov.w	r0, #0
   20e14:	4c46      	ldr	r4, [pc, #280]	; (20f30 <cloud_connect_error_handler+0x12c>)
   20e16:	f363 0007 	bfi	r0, r3, #0, #8
   20e1a:	4b46      	ldr	r3, [pc, #280]	; (20f34 <cloud_connect_error_handler+0x130>)
   20e1c:	462a      	mov	r2, r5
   20e1e:	1ae4      	subs	r4, r4, r3
   20e20:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   20e24:	f364 108f 	bfi	r0, r4, #6, #10
   20e28:	4943      	ldr	r1, [pc, #268]	; (20f38 <cloud_connect_error_handler+0x134>)
	switch (err) {
   20e2a:	350a      	adds	r5, #10
	LOG_ERR("Failed to connect to cloud, error %d", err);
   20e2c:	f01b fc29 	bl	3c682 <log_string_sync>
	switch (err) {
   20e30:	2d09      	cmp	r5, #9
   20e32:	d873      	bhi.n	20f1c <cloud_connect_error_handler+0x118>
   20e34:	e8df f005 	tbb	[pc, r5]
   20e38:	4e576069 	.word	0x4e576069
   20e3c:	1b263a72 	.word	0x1b263a72
   20e40:	0572      	.short	0x0572
		LOG_ERR("Cloud back-end has not been initialized");
   20e42:	f04f 0000 	mov.w	r0, #0
   20e46:	2301      	movs	r3, #1
   20e48:	f363 0007 	bfi	r0, r3, #0, #8
   20e4c:	f364 108f 	bfi	r0, r4, #6, #10
   20e50:	493a      	ldr	r1, [pc, #232]	; (20f3c <cloud_connect_error_handler+0x138>)
   20e52:	f01b fc16 	bl	3c682 <log_string_sync>
	ui_led_set_pattern(UI_LED_ERROR_CLOUD);
   20e56:	f44f 6010 	mov.w	r0, #2304	; 0x900
   20e5a:	f000 fd33 	bl	218c4 <ui_led_set_pattern>
	shutdown_modem();
   20e5e:	f7ff fabf 	bl	203e0 <shutdown_modem>
	return z_impl_k_current_get();
   20e62:	f017 fd45 	bl	388f0 <z_impl_k_current_get>
}
   20e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_suspend(thread);
   20e6a:	f017 bfa1 	b.w	38db0 <z_impl_k_thread_suspend>
		LOG_ERR("Network error, check cloud configuration");
   20e6e:	f04f 0000 	mov.w	r0, #0
   20e72:	2301      	movs	r3, #1
   20e74:	4932      	ldr	r1, [pc, #200]	; (20f40 <cloud_connect_error_handler+0x13c>)
   20e76:	f363 0007 	bfi	r0, r3, #0, #8
   20e7a:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Unhandled connect error");
   20e7e:	f01b fc00 	bl	3c682 <log_string_sync>
	if (reboot) {
   20e82:	e013      	b.n	20eac <cloud_connect_error_handler+0xa8>
		if (cloud_backend && cloud_backend->config &&
   20e84:	4b2f      	ldr	r3, [pc, #188]	; (20f44 <cloud_connect_error_handler+0x140>)
   20e86:	681b      	ldr	r3, [r3, #0]
   20e88:	b313      	cbz	r3, 20ed0 <cloud_connect_error_handler+0xcc>
   20e8a:	685b      	ldr	r3, [r3, #4]
   20e8c:	b303      	cbz	r3, 20ed0 <cloud_connect_error_handler+0xcc>
		    cloud_backend->config->name) {
   20e8e:	681a      	ldr	r2, [r3, #0]
	char *backend_name = "invalid";
   20e90:	4b2d      	ldr	r3, [pc, #180]	; (20f48 <cloud_connect_error_handler+0x144>)
   20e92:	2a00      	cmp	r2, #0
   20e94:	bf08      	it	eq
   20e96:	461a      	moveq	r2, r3
		LOG_ERR("An error occurred specific to the cloud back-end: %s",
   20e98:	f04f 0000 	mov.w	r0, #0
   20e9c:	2301      	movs	r3, #1
   20e9e:	f363 0007 	bfi	r0, r3, #0, #8
   20ea2:	f364 108f 	bfi	r0, r4, #6, #10
   20ea6:	4929      	ldr	r1, [pc, #164]	; (20f4c <cloud_connect_error_handler+0x148>)
   20ea8:	f01b fbeb 	bl	3c682 <log_string_sync>
		LOG_ERR("Device will reboot in %d seconds",
   20eac:	2301      	movs	r3, #1
   20eae:	f04f 0000 	mov.w	r0, #0
   20eb2:	f363 0007 	bfi	r0, r3, #0, #8
   20eb6:	f364 108f 	bfi	r0, r4, #6, #10
   20eba:	f44f 7296 	mov.w	r2, #300	; 0x12c
   20ebe:	4924      	ldr	r1, [pc, #144]	; (20f50 <cloud_connect_error_handler+0x14c>)
   20ec0:	f01b fbdf 	bl	3c682 <log_string_sync>
		k_delayed_work_submit_to_queue(
   20ec4:	4a23      	ldr	r2, [pc, #140]	; (20f54 <cloud_connect_error_handler+0x150>)
   20ec6:	4924      	ldr	r1, [pc, #144]	; (20f58 <cloud_connect_error_handler+0x154>)
   20ec8:	4824      	ldr	r0, [pc, #144]	; (20f5c <cloud_connect_error_handler+0x158>)
   20eca:	f018 f81b 	bl	38f04 <k_delayed_work_submit_to_queue>
   20ece:	e7c2      	b.n	20e56 <cloud_connect_error_handler+0x52>
	char *backend_name = "invalid";
   20ed0:	4a1d      	ldr	r2, [pc, #116]	; (20f48 <cloud_connect_error_handler+0x144>)
   20ed2:	e7e1      	b.n	20e98 <cloud_connect_error_handler+0x94>
		LOG_ERR("Ensure device has a valid private key");
   20ed4:	f04f 0000 	mov.w	r0, #0
   20ed8:	2301      	movs	r3, #1
   20eda:	f363 0007 	bfi	r0, r3, #0, #8
   20ede:	f364 108f 	bfi	r0, r4, #6, #10
   20ee2:	491f      	ldr	r1, [pc, #124]	; (20f60 <cloud_connect_error_handler+0x15c>)
   20ee4:	e7cb      	b.n	20e7e <cloud_connect_error_handler+0x7a>
		LOG_ERR("Ensure device has a valid CA and client certificate");
   20ee6:	f04f 0000 	mov.w	r0, #0
   20eea:	2301      	movs	r3, #1
   20eec:	f363 0007 	bfi	r0, r3, #0, #8
   20ef0:	f364 108f 	bfi	r0, r4, #6, #10
   20ef4:	491b      	ldr	r1, [pc, #108]	; (20f64 <cloud_connect_error_handler+0x160>)
   20ef6:	e7c2      	b.n	20e7e <cloud_connect_error_handler+0x7a>
		LOG_ERR("A certificate/authorization error has occurred");
   20ef8:	f04f 0000 	mov.w	r0, #0
   20efc:	2301      	movs	r3, #1
   20efe:	f363 0007 	bfi	r0, r3, #0, #8
   20f02:	f364 108f 	bfi	r0, r4, #6, #10
   20f06:	4918      	ldr	r1, [pc, #96]	; (20f68 <cloud_connect_error_handler+0x164>)
   20f08:	e7b9      	b.n	20e7e <cloud_connect_error_handler+0x7a>
		LOG_ERR("Connect timeout. SIM card may be out of data");
   20f0a:	f04f 0000 	mov.w	r0, #0
   20f0e:	2301      	movs	r3, #1
   20f10:	f363 0007 	bfi	r0, r3, #0, #8
   20f14:	f364 108f 	bfi	r0, r4, #6, #10
   20f18:	4914      	ldr	r1, [pc, #80]	; (20f6c <cloud_connect_error_handler+0x168>)
   20f1a:	e7b0      	b.n	20e7e <cloud_connect_error_handler+0x7a>
		LOG_ERR("Unhandled connect error");
   20f1c:	f04f 0000 	mov.w	r0, #0
   20f20:	2301      	movs	r3, #1
   20f22:	f363 0007 	bfi	r0, r3, #0, #8
   20f26:	f364 108f 	bfi	r0, r4, #6, #10
   20f2a:	4911      	ldr	r1, [pc, #68]	; (20f70 <cloud_connect_error_handler+0x16c>)
   20f2c:	e7a7      	b.n	20e7e <cloud_connect_error_handler+0x7a>
}
   20f2e:	bd38      	pop	{r3, r4, r5, pc}
   20f30:	000402cc 	.word	0x000402cc
   20f34:	000402cc 	.word	0x000402cc
   20f38:	0004132a 	.word	0x0004132a
   20f3c:	0004134f 	.word	0x0004134f
   20f40:	00041377 	.word	0x00041377
   20f44:	200238a0 	.word	0x200238a0
   20f48:	00041322 	.word	0x00041322
   20f4c:	000413a0 	.word	0x000413a0
   20f50:	000415bf 	.word	0x000415bf
   20f54:	000493e0 	.word	0x000493e0
   20f58:	200238a4 	.word	0x200238a4
   20f5c:	200237d8 	.word	0x200237d8
   20f60:	000413d5 	.word	0x000413d5
   20f64:	000413fb 	.word	0x000413fb
   20f68:	0004142f 	.word	0x0004142f
   20f6c:	0004145e 	.word	0x0004145e
   20f70:	0004148b 	.word	0x0004148b

00020f74 <sensors_start>:
{
   20f74:	b508      	push	{r3, lr}
	atomic_set(&send_data_enable, 1);
   20f76:	2101      	movs	r1, #1
   20f78:	4828      	ldr	r0, [pc, #160]	; (2101c <sensors_start+0xa8>)
   20f7a:	f01b f81c 	bl	3bfb6 <atomic_set>
	err = motion_init_and_start(&application_work_q, motion_handler);
   20f7e:	4928      	ldr	r1, [pc, #160]	; (21020 <sensors_start+0xac>)
   20f80:	4828      	ldr	r0, [pc, #160]	; (21024 <sensors_start+0xb0>)
   20f82:	f000 fbf9 	bl	21778 <motion_init_and_start>
	if (err) {
   20f86:	4602      	mov	r2, r0
   20f88:	b168      	cbz	r0, 20fa6 <sensors_start+0x32>
		LOG_ERR("motion module init failed, error: %d", err);
   20f8a:	2301      	movs	r3, #1
   20f8c:	f04f 0000 	mov.w	r0, #0
   20f90:	4925      	ldr	r1, [pc, #148]	; (21028 <sensors_start+0xb4>)
   20f92:	f363 0007 	bfi	r0, r3, #0, #8
   20f96:	4b25      	ldr	r3, [pc, #148]	; (2102c <sensors_start+0xb8>)
   20f98:	1a5b      	subs	r3, r3, r1
   20f9a:	08db      	lsrs	r3, r3, #3
   20f9c:	f363 108f 	bfi	r0, r3, #6, #10
   20fa0:	4923      	ldr	r1, [pc, #140]	; (21030 <sensors_start+0xbc>)
   20fa2:	f01b fb6e 	bl	3c682 <log_string_sync>
	err = env_sensors_init_and_start(&application_work_q, env_data_send);
   20fa6:	4923      	ldr	r1, [pc, #140]	; (21034 <sensors_start+0xc0>)
   20fa8:	481e      	ldr	r0, [pc, #120]	; (21024 <sensors_start+0xb0>)
   20faa:	f001 fbd1 	bl	22750 <env_sensors_init_and_start>
	if (err) {
   20fae:	4602      	mov	r2, r0
   20fb0:	b168      	cbz	r0, 20fce <sensors_start+0x5a>
		LOG_ERR("Environmental sensors init failed, error: %d", err);
   20fb2:	2301      	movs	r3, #1
   20fb4:	f04f 0000 	mov.w	r0, #0
   20fb8:	491b      	ldr	r1, [pc, #108]	; (21028 <sensors_start+0xb4>)
   20fba:	f363 0007 	bfi	r0, r3, #0, #8
   20fbe:	4b1b      	ldr	r3, [pc, #108]	; (2102c <sensors_start+0xb8>)
   20fc0:	1a5b      	subs	r3, r3, r1
   20fc2:	08db      	lsrs	r3, r3, #3
   20fc4:	f363 108f 	bfi	r0, r3, #6, #10
   20fc8:	491b      	ldr	r1, [pc, #108]	; (21038 <sensors_start+0xc4>)
   20fca:	f01b fb5a 	bl	3c682 <log_string_sync>
	err = modem_info_init();
   20fce:	f007 fe55 	bl	28c7c <modem_info_init>
	if (err) {
   20fd2:	4602      	mov	r2, r0
   20fd4:	b1b0      	cbz	r0, 21004 <sensors_start+0x90>
		LOG_ERR("Modem info could not be established: %d", err);
   20fd6:	2301      	movs	r3, #1
   20fd8:	f04f 0000 	mov.w	r0, #0
   20fdc:	4912      	ldr	r1, [pc, #72]	; (21028 <sensors_start+0xb4>)
   20fde:	f363 0007 	bfi	r0, r3, #0, #8
   20fe2:	4b12      	ldr	r3, [pc, #72]	; (2102c <sensors_start+0xb8>)
   20fe4:	1a5b      	subs	r3, r3, r1
   20fe6:	08db      	lsrs	r3, r3, #3
   20fe8:	f363 108f 	bfi	r0, r3, #6, #10
   20fec:	4913      	ldr	r1, [pc, #76]	; (2103c <sensors_start+0xc8>)
   20fee:	f01b fb48 	bl	3c682 <log_string_sync>
	k_work_submit_to_queue(&application_work_q, &device_status_work);
   20ff2:	4813      	ldr	r0, [pc, #76]	; (21040 <sensors_start+0xcc>)
   20ff4:	f7ff fba2 	bl	2073c <k_work_submit_to_queue.constprop.15>
}
   20ff8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gps_control_init(&application_work_q, gps_trigger_handler);
   20ffc:	4911      	ldr	r1, [pc, #68]	; (21044 <sensors_start+0xd0>)
   20ffe:	4809      	ldr	r0, [pc, #36]	; (21024 <sensors_start+0xb0>)
   21000:	f001 bb26 	b.w	22650 <gps_control_init>
	modem_info_params_init(&modem_param);
   21004:	4810      	ldr	r0, [pc, #64]	; (21048 <sensors_start+0xd4>)
   21006:	f007 fe85 	bl	28d14 <modem_info_params_init>
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   2100a:	220c      	movs	r2, #12
   2100c:	4b0f      	ldr	r3, [pc, #60]	; (2104c <sensors_start+0xd8>)
	modem_info_rsrp_register(modem_rsrp_handler);
   2100e:	4810      	ldr	r0, [pc, #64]	; (21050 <sensors_start+0xdc>)
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   21010:	701a      	strb	r2, [r3, #0]
	signal_strength_cloud_data.tag = 0x1;
   21012:	2201      	movs	r2, #1
   21014:	60da      	str	r2, [r3, #12]
	modem_info_rsrp_register(modem_rsrp_handler);
   21016:	f007 fdff 	bl	28c18 <modem_info_rsrp_register>
   2101a:	e7ea      	b.n	20ff2 <sensors_start+0x7e>
   2101c:	2002394c 	.word	0x2002394c
   21020:	00020b41 	.word	0x00020b41
   21024:	200237d8 	.word	0x200237d8
   21028:	000402cc 	.word	0x000402cc
   2102c:	000402cc 	.word	0x000402cc
   21030:	00041b1a 	.word	0x00041b1a
   21034:	000209f1 	.word	0x000209f1
   21038:	00041b3f 	.word	0x00041b3f
   2103c:	00041b6c 	.word	0x00041b6c
   21040:	200238e4 	.word	0x200238e4
   21044:	000208f1 	.word	0x000208f1
   21048:	200200c0 	.word	0x200200c0
   2104c:	20023968 	.word	0x20023968
   21050:	000206fd 	.word	0x000206fd

00021054 <on_pairing_done>:
{
   21054:	b510      	push	{r4, lr}
	if (atomic_get(&association_requested)) {
   21056:	4815      	ldr	r0, [pc, #84]	; (210ac <on_pairing_done+0x58>)
   21058:	f01a ffb5 	bl	3bfc6 <atomic_get>
   2105c:	b320      	cbz	r0, 210a8 <on_pairing_done+0x54>
		atomic_set(&association_requested, 0);
   2105e:	2100      	movs	r1, #0
   21060:	4812      	ldr	r0, [pc, #72]	; (210ac <on_pairing_done+0x58>)
   21062:	f01a ffa8 	bl	3bfb6 <atomic_set>
		k_delayed_work_cancel(&cycle_cloud_connection_work);
   21066:	4812      	ldr	r0, [pc, #72]	; (210b0 <on_pairing_done+0x5c>)
   21068:	f017 ffd8 	bl	3901c <k_delayed_work_cancel>
		LOG_INF("Device associated with cloud.");
   2106c:	2303      	movs	r3, #3
   2106e:	f04f 0000 	mov.w	r0, #0
   21072:	4c10      	ldr	r4, [pc, #64]	; (210b4 <on_pairing_done+0x60>)
   21074:	f363 0007 	bfi	r0, r3, #0, #8
   21078:	4b0f      	ldr	r3, [pc, #60]	; (210b8 <on_pairing_done+0x64>)
   2107a:	4910      	ldr	r1, [pc, #64]	; (210bc <on_pairing_done+0x68>)
   2107c:	1ae4      	subs	r4, r4, r3
   2107e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   21082:	f364 108f 	bfi	r0, r4, #6, #10
   21086:	f01b fafc 	bl	3c682 <log_string_sync>
		LOG_INF("Reconnecting for cloud policy to take effect.");
   2108a:	2303      	movs	r3, #3
   2108c:	f04f 0000 	mov.w	r0, #0
   21090:	f363 0007 	bfi	r0, r3, #0, #8
   21094:	f364 108f 	bfi	r0, r4, #6, #10
   21098:	4909      	ldr	r1, [pc, #36]	; (210c0 <on_pairing_done+0x6c>)
   2109a:	f01b faf2 	bl	3c682 <log_string_sync>
}
   2109e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		cycle_cloud_connection(NULL);
   210a2:	2000      	movs	r0, #0
   210a4:	f7ff b9d2 	b.w	2044c <cycle_cloud_connection>
}
   210a8:	bd10      	pop	{r4, pc}
   210aa:	bf00      	nop
   210ac:	2002389c 	.word	0x2002389c
   210b0:	200238c4 	.word	0x200238c4
   210b4:	000402cc 	.word	0x000402cc
   210b8:	000402cc 	.word	0x000402cc
   210bc:	00041a04 	.word	0x00041a04
   210c0:	00041a22 	.word	0x00041a22

000210c4 <cloud_event_handler>:
{
   210c4:	b538      	push	{r3, r4, r5, lr}
   210c6:	4c59      	ldr	r4, [pc, #356]	; (2122c <cloud_event_handler+0x168>)
   210c8:	4b59      	ldr	r3, [pc, #356]	; (21230 <cloud_event_handler+0x16c>)
	switch (evt->type) {
   210ca:	780a      	ldrb	r2, [r1, #0]
   210cc:	1ae4      	subs	r4, r4, r3
{
   210ce:	460d      	mov	r5, r1
   210d0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   210d4:	f04f 0000 	mov.w	r0, #0
	switch (evt->type) {
   210d8:	2a08      	cmp	r2, #8
   210da:	f200 809b 	bhi.w	21214 <cloud_event_handler+0x150>
   210de:	e8df f002 	tbb	[pc, r2]
   210e2:	2605      	.short	0x2605
   210e4:	413a3015 	.word	0x413a3015
   210e8:	7e4e      	.short	0x7e4e
   210ea:	8a          	.byte	0x8a
   210eb:	00          	.byte	0x00
		LOG_INF("CLOUD_EVT_CONNECTED");
   210ec:	2303      	movs	r3, #3
   210ee:	f363 0007 	bfi	r0, r3, #0, #8
   210f2:	f364 108f 	bfi	r0, r4, #6, #10
   210f6:	494f      	ldr	r1, [pc, #316]	; (21234 <cloud_event_handler+0x170>)
   210f8:	f01b fac3 	bl	3c682 <log_string_sync>
		k_delayed_work_cancel(&cloud_reboot_work);
   210fc:	484e      	ldr	r0, [pc, #312]	; (21238 <cloud_event_handler+0x174>)
   210fe:	f017 ff8d 	bl	3901c <k_delayed_work_cancel>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   21102:	2008      	movs	r0, #8
}
   21104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ui_led_set_pattern(UI_LTE_DISCONNECTED);
   21108:	f000 bbdc 	b.w	218c4 <ui_led_set_pattern>
		LOG_INF("CLOUD_EVT_READY");
   2110c:	2303      	movs	r3, #3
   2110e:	f363 0007 	bfi	r0, r3, #0, #8
   21112:	f364 108f 	bfi	r0, r4, #6, #10
   21116:	4949      	ldr	r1, [pc, #292]	; (2123c <cloud_event_handler+0x178>)
   21118:	f01b fab3 	bl	3c682 <log_string_sync>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   2111c:	2008      	movs	r0, #8
   2111e:	f000 fbd1 	bl	218c4 <ui_led_set_pattern>
		boot_write_img_confirmed();
   21122:	f01b fb1e 	bl	3c762 <boot_write_img_confirmed>
}
   21126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sensors_start();
   2112a:	f7ff bf23 	b.w	20f74 <sensors_start>
		LOG_INF("CLOUD_EVT_DISCONNECTED");
   2112e:	2303      	movs	r3, #3
   21130:	f363 0007 	bfi	r0, r3, #0, #8
   21134:	f364 108f 	bfi	r0, r4, #6, #10
   21138:	4941      	ldr	r1, [pc, #260]	; (21240 <cloud_event_handler+0x17c>)
   2113a:	f01b faa2 	bl	3c682 <log_string_sync>
		ui_led_set_pattern(UI_LTE_DISCONNECTED);
   2113e:	2000      	movs	r0, #0
   21140:	e7e0      	b.n	21104 <cloud_event_handler+0x40>
		LOG_INF("CLOUD_EVT_ERROR");
   21142:	2303      	movs	r3, #3
   21144:	493f      	ldr	r1, [pc, #252]	; (21244 <cloud_event_handler+0x180>)
   21146:	f363 0007 	bfi	r0, r3, #0, #8
   2114a:	f364 108f 	bfi	r0, r4, #6, #10
}
   2114e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_INF("CLOUD_EVT_DATA_SENT");
   21152:	f01b ba96 	b.w	3c682 <log_string_sync>
   21156:	2303      	movs	r3, #3
   21158:	f363 0007 	bfi	r0, r3, #0, #8
   2115c:	f364 108f 	bfi	r0, r4, #6, #10
   21160:	4939      	ldr	r1, [pc, #228]	; (21248 <cloud_event_handler+0x184>)
   21162:	e7f4      	b.n	2114e <cloud_event_handler+0x8a>
		LOG_INF("CLOUD_EVT_DATA_RECEIVED");
   21164:	2303      	movs	r3, #3
   21166:	f363 0007 	bfi	r0, r3, #0, #8
   2116a:	f364 108f 	bfi	r0, r4, #6, #10
   2116e:	4937      	ldr	r1, [pc, #220]	; (2124c <cloud_event_handler+0x188>)
   21170:	f01b fa87 	bl	3c682 <log_string_sync>
		cloud_decode_command(evt->data.msg.buf);
   21174:	6868      	ldr	r0, [r5, #4]
}
   21176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cloud_decode_command(evt->data.msg.buf);
   2117a:	f000 be3b 	b.w	21df4 <cloud_decode_command>
		LOG_INF("CLOUD_EVT_PAIR_REQUEST");
   2117e:	2303      	movs	r3, #3
   21180:	f363 0007 	bfi	r0, r3, #0, #8
   21184:	f364 108f 	bfi	r0, r4, #6, #10
   21188:	4931      	ldr	r1, [pc, #196]	; (21250 <cloud_event_handler+0x18c>)
   2118a:	f01b fa7a 	bl	3c682 <log_string_sync>
	if (atomic_get(&association_requested) == 0) {
   2118e:	4831      	ldr	r0, [pc, #196]	; (21254 <cloud_event_handler+0x190>)
   21190:	f01a ff19 	bl	3bfc6 <atomic_get>
   21194:	2800      	cmp	r0, #0
   21196:	d147      	bne.n	21228 <cloud_event_handler+0x164>
		atomic_set(&association_requested, 1);
   21198:	2101      	movs	r1, #1
   2119a:	482e      	ldr	r0, [pc, #184]	; (21254 <cloud_event_handler+0x190>)
   2119c:	f01a ff0b 	bl	3bfb6 <atomic_set>
		ui_led_set_pattern(UI_CLOUD_PAIRING);
   211a0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   211a4:	f000 fb8e 	bl	218c4 <ui_led_set_pattern>
		LOG_INF("Add device to cloud account.");
   211a8:	2303      	movs	r3, #3
   211aa:	f04f 0000 	mov.w	r0, #0
   211ae:	f363 0007 	bfi	r0, r3, #0, #8
   211b2:	f364 108f 	bfi	r0, r4, #6, #10
   211b6:	4928      	ldr	r1, [pc, #160]	; (21258 <cloud_event_handler+0x194>)
   211b8:	f01b fa63 	bl	3c682 <log_string_sync>
		LOG_INF("Waiting for cloud association...");
   211bc:	2303      	movs	r3, #3
   211be:	f04f 0000 	mov.w	r0, #0
   211c2:	f363 0007 	bfi	r0, r3, #0, #8
   211c6:	f364 108f 	bfi	r0, r4, #6, #10
   211ca:	4924      	ldr	r1, [pc, #144]	; (2125c <cloud_event_handler+0x198>)
   211cc:	f01b fa59 	bl	3c682 <log_string_sync>
}
   211d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_delayed_work_submit_to_queue(&application_work_q,
   211d4:	4a22      	ldr	r2, [pc, #136]	; (21260 <cloud_event_handler+0x19c>)
   211d6:	4923      	ldr	r1, [pc, #140]	; (21264 <cloud_event_handler+0x1a0>)
   211d8:	4823      	ldr	r0, [pc, #140]	; (21268 <cloud_event_handler+0x1a4>)
   211da:	f017 be93 	b.w	38f04 <k_delayed_work_submit_to_queue>
		LOG_INF("CLOUD_EVT_PAIR_DONE");
   211de:	2303      	movs	r3, #3
   211e0:	f363 0007 	bfi	r0, r3, #0, #8
   211e4:	f364 108f 	bfi	r0, r4, #6, #10
   211e8:	4920      	ldr	r1, [pc, #128]	; (2126c <cloud_event_handler+0x1a8>)
   211ea:	f01b fa4a 	bl	3c682 <log_string_sync>
}
   211ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		on_pairing_done();
   211f2:	f7ff bf2f 	b.w	21054 <on_pairing_done>
		LOG_INF("CLOUD_EVT_FOTA_DONE");
   211f6:	2303      	movs	r3, #3
   211f8:	f363 0007 	bfi	r0, r3, #0, #8
   211fc:	f364 108f 	bfi	r0, r4, #6, #10
   21200:	491b      	ldr	r1, [pc, #108]	; (21270 <cloud_event_handler+0x1ac>)
   21202:	f01b fa3e 	bl	3c682 <log_string_sync>
		lte_lc_power_off();
   21206:	f007 fb97 	bl	28938 <lte_lc_power_off>
}
   2120a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sys_reboot(SYS_REBOOT_COLD);
   2120e:	2001      	movs	r0, #1
   21210:	f002 b9ec 	b.w	235ec <sys_reboot>
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   21214:	2302      	movs	r3, #2
   21216:	f363 0007 	bfi	r0, r3, #0, #8
   2121a:	f364 108f 	bfi	r0, r4, #6, #10
   2121e:	4915      	ldr	r1, [pc, #84]	; (21274 <cloud_event_handler+0x1b0>)
}
   21220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   21224:	f01b ba2d 	b.w	3c682 <log_string_sync>
}
   21228:	bd38      	pop	{r3, r4, r5, pc}
   2122a:	bf00      	nop
   2122c:	000402cc 	.word	0x000402cc
   21230:	000402cc 	.word	0x000402cc
   21234:	000414a3 	.word	0x000414a3
   21238:	200238a4 	.word	0x200238a4
   2123c:	000441dc 	.word	0x000441dc
   21240:	000414b7 	.word	0x000414b7
   21244:	000414ce 	.word	0x000414ce
   21248:	000414de 	.word	0x000414de
   2124c:	000414f2 	.word	0x000414f2
   21250:	0004150a 	.word	0x0004150a
   21254:	2002389c 	.word	0x2002389c
   21258:	00041521 	.word	0x00041521
   2125c:	0004153e 	.word	0x0004153e
   21260:	000493e0 	.word	0x000493e0
   21264:	200238c4 	.word	0x200238c4
   21268:	200237d8 	.word	0x200237d8
   2126c:	0004155f 	.word	0x0004155f
   21270:	00044297 	.word	0x00044297
   21274:	00041573 	.word	0x00041573

00021278 <handle_bsdlib_init_ret>:
#endif /* defined(CONFIG_USE_UI_MODULE) */

void handle_bsdlib_init_ret(void)
{
   21278:	b508      	push	{r3, lr}
	#if defined(CONFIG_BSD_LIBRARY)
	int ret = bsdlib_get_init_ret();
   2127a:	f005 fb9b 	bl	269b4 <bsdlib_get_init_ret>

	/* Handle return values relating to modem firmware update */
	switch (ret) {
   2127e:	4b1e      	ldr	r3, [pc, #120]	; (212f8 <handle_bsdlib_init_ret+0x80>)
	int ret = bsdlib_get_init_ret();
   21280:	4602      	mov	r2, r0
	switch (ret) {
   21282:	4298      	cmp	r0, r3
   21284:	dc06      	bgt.n	21294 <handle_bsdlib_init_ret+0x1c>
   21286:	3b01      	subs	r3, #1
   21288:	4298      	cmp	r0, r3
   2128a:	da19      	bge.n	212c0 <handle_bsdlib_init_ret+0x48>
   2128c:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   21290:	dc25      	bgt.n	212de <handle_bsdlib_init_ret+0x66>
		break;
	default:
		break;
	}
	#endif /* CONFIG_BSD_LIBRARY */
}
   21292:	bd08      	pop	{r3, pc}
	switch (ret) {
   21294:	4b19      	ldr	r3, [pc, #100]	; (212fc <handle_bsdlib_init_ret+0x84>)
   21296:	4298      	cmp	r0, r3
   21298:	d1fb      	bne.n	21292 <handle_bsdlib_init_ret+0x1a>
		LOG_INF("MODEM UPDATE OK. Will run new firmware");
   2129a:	2303      	movs	r3, #3
   2129c:	f04f 0000 	mov.w	r0, #0
   212a0:	4a17      	ldr	r2, [pc, #92]	; (21300 <handle_bsdlib_init_ret+0x88>)
   212a2:	f363 0007 	bfi	r0, r3, #0, #8
   212a6:	4b17      	ldr	r3, [pc, #92]	; (21304 <handle_bsdlib_init_ret+0x8c>)
   212a8:	4917      	ldr	r1, [pc, #92]	; (21308 <handle_bsdlib_init_ret+0x90>)
   212aa:	1a9b      	subs	r3, r3, r2
   212ac:	08db      	lsrs	r3, r3, #3
   212ae:	f363 108f 	bfi	r0, r3, #6, #10
   212b2:	f01b f9e6 	bl	3c682 <log_string_sync>
}
   212b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_reboot(SYS_REBOOT_COLD);
   212ba:	2001      	movs	r0, #1
   212bc:	f002 b996 	b.w	235ec <sys_reboot>
		LOG_ERR("MODEM UPDATE ERROR %d. Will run old firmware", ret);
   212c0:	2301      	movs	r3, #1
   212c2:	f04f 0000 	mov.w	r0, #0
   212c6:	490e      	ldr	r1, [pc, #56]	; (21300 <handle_bsdlib_init_ret+0x88>)
   212c8:	f363 0007 	bfi	r0, r3, #0, #8
   212cc:	4b0d      	ldr	r3, [pc, #52]	; (21304 <handle_bsdlib_init_ret+0x8c>)
   212ce:	1a5b      	subs	r3, r3, r1
   212d0:	08db      	lsrs	r3, r3, #3
   212d2:	490e      	ldr	r1, [pc, #56]	; (2130c <handle_bsdlib_init_ret+0x94>)
   212d4:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("MODEM UPDATE FATAL ERROR %d. Modem failiure", ret);
   212d8:	f01b f9d3 	bl	3c682 <log_string_sync>
   212dc:	e7eb      	b.n	212b6 <handle_bsdlib_init_ret+0x3e>
   212de:	2301      	movs	r3, #1
   212e0:	f04f 0000 	mov.w	r0, #0
   212e4:	4906      	ldr	r1, [pc, #24]	; (21300 <handle_bsdlib_init_ret+0x88>)
   212e6:	f363 0007 	bfi	r0, r3, #0, #8
   212ea:	4b06      	ldr	r3, [pc, #24]	; (21304 <handle_bsdlib_init_ret+0x8c>)
   212ec:	1a5b      	subs	r3, r3, r1
   212ee:	08db      	lsrs	r3, r3, #3
   212f0:	f363 108f 	bfi	r0, r3, #6, #10
   212f4:	4906      	ldr	r1, [pc, #24]	; (21310 <handle_bsdlib_init_ret+0x98>)
   212f6:	e7ef      	b.n	212d8 <handle_bsdlib_init_ret+0x60>
   212f8:	04400004 	.word	0x04400004
   212fc:	05500001 	.word	0x05500001
   21300:	000402cc 	.word	0x000402cc
   21304:	000402cc 	.word	0x000402cc
   21308:	00041648 	.word	0x00041648
   2130c:	0004166f 	.word	0x0004166f
   21310:	0004169c 	.word	0x0004169c

00021314 <main>:

void main(void)
{
	int ret;

	LOG_INF("Asset tracker started");
   21314:	2303      	movs	r3, #3
   21316:	f04f 0000 	mov.w	r0, #0
{
   2131a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Asset tracker started");
   2131e:	f363 0007 	bfi	r0, r3, #0, #8
   21322:	4ca4      	ldr	r4, [pc, #656]	; (215b4 <main+0x2a0>)
   21324:	4ba4      	ldr	r3, [pc, #656]	; (215b8 <main+0x2a4>)
{
   21326:	b085      	sub	sp, #20
	LOG_INF("Asset tracker started");
   21328:	1ae4      	subs	r4, r4, r3
   2132a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2132e:	f364 108f 	bfi	r0, r4, #6, #10
   21332:	49a2      	ldr	r1, [pc, #648]	; (215bc <main+0x2a8>)
   21334:	f01b f9a5 	bl	3c682 <log_string_sync>
	k_work_q_start(&application_work_q, application_stack_area,
   21338:	f04f 33ff 	mov.w	r3, #4294967295
   2133c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21340:	499f      	ldr	r1, [pc, #636]	; (215c0 <main+0x2ac>)
   21342:	48a0      	ldr	r0, [pc, #640]	; (215c4 <main+0x2b0>)
   21344:	f017 fdba 	bl	38ebc <k_work_q_start>
		       K_THREAD_STACK_SIZEOF(application_stack_area),
		       CONFIG_APPLICATION_WORKQUEUE_PRIORITY);
	if (IS_ENABLED(CONFIG_WATCHDOG)) {
		watchdog_init_and_start(&application_work_q);
	}
	handle_bsdlib_init_ret();
   21348:	f7ff ff96 	bl	21278 <handle_bsdlib_init_ret>

	cloud_backend = cloud_get_binding("NRF_CLOUD");
   2134c:	489e      	ldr	r0, [pc, #632]	; (215c8 <main+0x2b4>)
   2134e:	f007 ff0b 	bl	29168 <cloud_get_binding>
   21352:	4d9e      	ldr	r5, [pc, #632]	; (215cc <main+0x2b8>)
   21354:	6028      	str	r0, [r5, #0]
	__ASSERT(cloud_backend != NULL, "nRF Cloud backend not found");
   21356:	b970      	cbnz	r0, 21376 <main+0x62>
   21358:	499d      	ldr	r1, [pc, #628]	; (215d0 <main+0x2bc>)
   2135a:	f240 5313 	movw	r3, #1299	; 0x513
   2135e:	4a9d      	ldr	r2, [pc, #628]	; (215d4 <main+0x2c0>)
   21360:	489d      	ldr	r0, [pc, #628]	; (215d8 <main+0x2c4>)
   21362:	f01b f937 	bl	3c5d4 <printk>
   21366:	489d      	ldr	r0, [pc, #628]	; (215dc <main+0x2c8>)
   21368:	f01b f934 	bl	3c5d4 <printk>
   2136c:	f240 5113 	movw	r1, #1299	; 0x513
   21370:	4898      	ldr	r0, [pc, #608]	; (215d4 <main+0x2c0>)
   21372:	f01b f975 	bl	3c660 <assert_post_action>

	ret = cloud_init(cloud_backend, cloud_event_handler);
   21376:	6828      	ldr	r0, [r5, #0]
	if (backend == NULL || backend->api == NULL ||
   21378:	2800      	cmp	r0, #0
   2137a:	f000 80fa 	beq.w	21572 <main+0x25e>
   2137e:	6803      	ldr	r3, [r0, #0]
   21380:	2b00      	cmp	r3, #0
   21382:	f000 80f6 	beq.w	21572 <main+0x25e>
	    backend->api->init == NULL) {
   21386:	681b      	ldr	r3, [r3, #0]
	if (backend == NULL || backend->api == NULL ||
   21388:	2b00      	cmp	r3, #0
   2138a:	f000 80f2 	beq.w	21572 <main+0x25e>
	return backend->api->init(backend, handler);
   2138e:	4994      	ldr	r1, [pc, #592]	; (215e0 <main+0x2cc>)
   21390:	4798      	blx	r3
	if (ret) {
   21392:	4680      	mov	r8, r0
   21394:	b168      	cbz	r0, 213b2 <main+0x9e>
		LOG_ERR("Cloud backend could not be initialized, error: %d",
   21396:	2301      	movs	r3, #1
   21398:	f04f 0000 	mov.w	r0, #0
   2139c:	f363 0007 	bfi	r0, r3, #0, #8
   213a0:	f364 108f 	bfi	r0, r4, #6, #10
   213a4:	4642      	mov	r2, r8
   213a6:	498f      	ldr	r1, [pc, #572]	; (215e4 <main+0x2d0>)
   213a8:	f01b f96b 	bl	3c682 <log_string_sync>
			ret);
		cloud_error_handler(ret);
   213ac:	4640      	mov	r0, r8
   213ae:	f01a fe12 	bl	3bfd6 <cloud_error_handler>
	}

#if defined(CONFIG_USE_UI_MODULE)
	ui_init(ui_evt_handler);
   213b2:	488d      	ldr	r0, [pc, #564]	; (215e8 <main+0x2d4>)
   213b4:	f000 fa8c 	bl	218d0 <ui_init>
#endif

	ret = cloud_decode_init(cloud_cmd_handler);
   213b8:	488c      	ldr	r0, [pc, #560]	; (215ec <main+0x2d8>)
   213ba:	f000 fead 	bl	22118 <cloud_decode_init>
	if (ret) {
   213be:	4680      	mov	r8, r0
   213c0:	b168      	cbz	r0, 213de <main+0xca>
		LOG_ERR("Cloud command decoder could not be initialized, error: %d", ret);
   213c2:	2301      	movs	r3, #1
   213c4:	f04f 0000 	mov.w	r0, #0
   213c8:	f363 0007 	bfi	r0, r3, #0, #8
   213cc:	f364 108f 	bfi	r0, r4, #6, #10
   213d0:	4642      	mov	r2, r8
   213d2:	4987      	ldr	r1, [pc, #540]	; (215f0 <main+0x2dc>)
   213d4:	f01b f955 	bl	3c682 <log_string_sync>
		cloud_error_handler(ret);
   213d8:	4640      	mov	r0, r8
   213da:	f01a fdfc 	bl	3bfd6 <cloud_error_handler>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   213de:	f04f 0800 	mov.w	r8, #0
   213e2:	4b84      	ldr	r3, [pc, #528]	; (215f4 <main+0x2e0>)
   213e4:	4a84      	ldr	r2, [pc, #528]	; (215f8 <main+0x2e4>)
   213e6:	f8c3 8000 	str.w	r8, [r3]
   213ea:	e9c3 2801 	strd	r2, r8, [r3, #4]
   213ee:	4b83      	ldr	r3, [pc, #524]	; (215fc <main+0x2e8>)
   213f0:	4a83      	ldr	r2, [pc, #524]	; (21600 <main+0x2ec>)
	k_delayed_work_init(&long_press_button_work, long_press_handler);
   213f2:	4984      	ldr	r1, [pc, #528]	; (21604 <main+0x2f0>)
   213f4:	4884      	ldr	r0, [pc, #528]	; (21608 <main+0x2f4>)
   213f6:	e9c3 2801 	strd	r2, r8, [r3, #4]
   213fa:	f8c3 8000 	str.w	r8, [r3]
   213fe:	f01d fbd2 	bl	3eba6 <k_delayed_work_init>
	k_delayed_work_init(&cloud_reboot_work, cloud_reboot_handler);
   21402:	4982      	ldr	r1, [pc, #520]	; (2160c <main+0x2f8>)
   21404:	4882      	ldr	r0, [pc, #520]	; (21610 <main+0x2fc>)
   21406:	f01d fbce 	bl	3eba6 <k_delayed_work_init>
	k_delayed_work_init(&cycle_cloud_connection_work,
   2140a:	4982      	ldr	r1, [pc, #520]	; (21614 <main+0x300>)
   2140c:	4882      	ldr	r0, [pc, #520]	; (21618 <main+0x304>)
   2140e:	f01d fbca 	bl	3eba6 <k_delayed_work_init>
   21412:	4a82      	ldr	r2, [pc, #520]	; (2161c <main+0x308>)
   21414:	4b82      	ldr	r3, [pc, #520]	; (21620 <main+0x30c>)
	k_delayed_work_init(&rsrp_work, modem_rsrp_data_send);
   21416:	4983      	ldr	r1, [pc, #524]	; (21624 <main+0x310>)
   21418:	4883      	ldr	r0, [pc, #524]	; (21628 <main+0x314>)
   2141a:	e9c3 2801 	strd	r2, r8, [r3, #4]
   2141e:	f8c3 8000 	str.w	r8, [r3]
   21422:	f01d fbc0 	bl	3eba6 <k_delayed_work_init>
		LOG_INF("Connecting to LTE network. ");
   21426:	2303      	movs	r3, #3
   21428:	f04f 0000 	mov.w	r0, #0
   2142c:	f363 0007 	bfi	r0, r3, #0, #8
   21430:	f364 108f 	bfi	r0, r4, #6, #10
   21434:	497d      	ldr	r1, [pc, #500]	; (2162c <main+0x318>)
   21436:	f01b f924 	bl	3c682 <log_string_sync>
		LOG_INF("This may take several minutes.");
   2143a:	2303      	movs	r3, #3
   2143c:	f04f 0000 	mov.w	r0, #0
   21440:	f363 0007 	bfi	r0, r3, #0, #8
   21444:	f364 108f 	bfi	r0, r4, #6, #10
   21448:	4979      	ldr	r1, [pc, #484]	; (21630 <main+0x31c>)
   2144a:	f01b f91a 	bl	3c682 <log_string_sync>
		ui_led_set_pattern(UI_LTE_CONNECTING);
   2144e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   21452:	f000 fa37 	bl	218c4 <ui_led_set_pattern>
		err = lte_lc_init_and_connect();
   21456:	f01d f88f 	bl	3e578 <lte_lc_init_and_connect>
		if (err) {
   2145a:	b170      	cbz	r0, 2147a <main+0x166>
			LOG_ERR("LTE link could not be established.");
   2145c:	2301      	movs	r3, #1
   2145e:	f04f 0000 	mov.w	r0, #0
   21462:	f363 0007 	bfi	r0, r3, #0, #8
   21466:	f364 108f 	bfi	r0, r4, #6, #10
   2146a:	4972      	ldr	r1, [pc, #456]	; (21634 <main+0x320>)
   2146c:	f01b f909 	bl	3c682 <log_string_sync>
   21470:	f001 fd02 	bl	22e78 <z_impl_log_panic>
	sys_reboot(0);
   21474:	4640      	mov	r0, r8
   21476:	f002 f8b9 	bl	235ec <sys_reboot>
		LOG_INF("Connected to LTE network");
   2147a:	2303      	movs	r3, #3
   2147c:	f04f 0000 	mov.w	r0, #0
   21480:	f363 0007 	bfi	r0, r3, #0, #8
   21484:	f364 108f 	bfi	r0, r4, #6, #10
   21488:	496b      	ldr	r1, [pc, #428]	; (21638 <main+0x324>)
	return socket_ops->connect(sock, addr, addrlen);
}

static inline int poll(struct pollfd *fds, int nfds, int timeout)
{
	__ASSERT_NO_MSG(socket_ops);
   2148a:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 21658 <main+0x344>
   2148e:	f01b f8f8 	bl	3c682 <log_string_sync>
		ui_led_set_pattern(UI_LTE_CONNECTED);
   21492:	f44f 6080 	mov.w	r0, #1024	; 0x400
   21496:	f000 fa15 	bl	218c4 <ui_led_set_pattern>
   2149a:	46c1      	mov	r9, r8
	}

	work_init();
	modem_configure();
connect:
	ret = cloud_connect(cloud_backend);
   2149c:	6828      	ldr	r0, [r5, #0]
	if (backend == NULL || backend->api == NULL ||
   2149e:	2800      	cmp	r0, #0
   214a0:	d06a      	beq.n	21578 <main+0x264>
   214a2:	6803      	ldr	r3, [r0, #0]
   214a4:	2b00      	cmp	r3, #0
   214a6:	d067      	beq.n	21578 <main+0x264>
	    backend->api->connect == NULL) {
   214a8:	689b      	ldr	r3, [r3, #8]
	if (backend == NULL || backend->api == NULL ||
   214aa:	2b00      	cmp	r3, #0
   214ac:	d064      	beq.n	21578 <main+0x264>
	return backend->api->connect(backend);
   214ae:	4798      	blx	r3
	if (ret != CLOUD_CONNECT_RES_SUCCESS) {
   214b0:	2800      	cmp	r0, #0
   214b2:	d064      	beq.n	2157e <main+0x26a>
		cloud_connect_error_handler(ret);
   214b4:	b240      	sxtb	r0, r0
   214b6:	f7ff fca5 	bl	20e04 <cloud_connect_error_handler>
		k_delayed_work_submit_to_queue(&application_work_q,
					       &cloud_reboot_work,
					       CLOUD_CONNACK_WAIT_DURATION);
	}

	struct pollfd fds[] = {
   214ba:	f04f 0300 	mov.w	r3, #0
   214be:	f8ad 300e 	strh.w	r3, [sp, #14]
		{
			.fd = cloud_backend->config->socket,
   214c2:	682b      	ldr	r3, [r5, #0]
 */
static inline int cloud_keepalive_time_left(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
	    backend->api->keepalive_time_left == NULL) {
		__ASSERT(0, "Missing cloud backend functionality");
   214c4:	f8df a194 	ldr.w	sl, [pc, #404]	; 2165c <main+0x348>
   214c8:	685b      	ldr	r3, [r3, #4]
	struct pollfd fds[] = {
   214ca:	689b      	ldr	r3, [r3, #8]
   214cc:	9302      	str	r3, [sp, #8]
   214ce:	2301      	movs	r3, #1
   214d0:	f8ad 300c 	strh.w	r3, [sp, #12]
			.events = POLLIN
		}
	};

	while (true) {
		ret = poll(fds, ARRAY_SIZE(fds),
   214d4:	6828      	ldr	r0, [r5, #0]
	if (backend == NULL || backend->api == NULL ||
   214d6:	b120      	cbz	r0, 214e2 <main+0x1ce>
   214d8:	6803      	ldr	r3, [r0, #0]
   214da:	b113      	cbz	r3, 214e2 <main+0x1ce>
	    backend->api->keepalive_time_left == NULL) {
   214dc:	699b      	ldr	r3, [r3, #24]
	if (backend == NULL || backend->api == NULL ||
   214de:	2b00      	cmp	r3, #0
   214e0:	d158      	bne.n	21594 <main+0x280>
		__ASSERT(0, "Missing cloud backend functionality");
   214e2:	f240 1325 	movw	r3, #293	; 0x125
   214e6:	4652      	mov	r2, sl
   214e8:	4954      	ldr	r1, [pc, #336]	; (2163c <main+0x328>)
   214ea:	483b      	ldr	r0, [pc, #236]	; (215d8 <main+0x2c4>)
   214ec:	f01b f872 	bl	3c5d4 <printk>
   214f0:	4853      	ldr	r0, [pc, #332]	; (21640 <main+0x32c>)
   214f2:	f01b f86f 	bl	3c5d4 <printk>
   214f6:	f240 1125 	movw	r1, #293	; 0x125
   214fa:	4650      	mov	r0, sl
   214fc:	f01b f8b0 	bl	3c660 <assert_post_action>
		return K_FOREVER;
   21500:	f04f 3bff 	mov.w	fp, #4294967295
   21504:	f8d8 3000 	ldr.w	r3, [r8]
   21508:	b94b      	cbnz	r3, 2151e <main+0x20a>
   2150a:	494e      	ldr	r1, [pc, #312]	; (21644 <main+0x330>)
   2150c:	4832      	ldr	r0, [pc, #200]	; (215d8 <main+0x2c4>)
   2150e:	234d      	movs	r3, #77	; 0x4d
   21510:	4a4d      	ldr	r2, [pc, #308]	; (21648 <main+0x334>)
   21512:	f01b f85f 	bl	3c5d4 <printk>
   21516:	214d      	movs	r1, #77	; 0x4d
   21518:	484b      	ldr	r0, [pc, #300]	; (21648 <main+0x334>)
   2151a:	f01b f8a1 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->poll);
   2151e:	f8d9 3000 	ldr.w	r3, [r9]
   21522:	699b      	ldr	r3, [r3, #24]
   21524:	b94b      	cbnz	r3, 2153a <main+0x226>
   21526:	4949      	ldr	r1, [pc, #292]	; (2164c <main+0x338>)
   21528:	482b      	ldr	r0, [pc, #172]	; (215d8 <main+0x2c4>)
   2152a:	234e      	movs	r3, #78	; 0x4e
   2152c:	4a46      	ldr	r2, [pc, #280]	; (21648 <main+0x334>)
   2152e:	f01b f851 	bl	3c5d4 <printk>
   21532:	214e      	movs	r1, #78	; 0x4e
   21534:	4844      	ldr	r0, [pc, #272]	; (21648 <main+0x334>)
   21536:	f01b f893 	bl	3c660 <assert_post_action>

	return socket_ops->poll(fds, nfds, timeout);
   2153a:	f8d9 3000 	ldr.w	r3, [r9]
   2153e:	465a      	mov	r2, fp
   21540:	699b      	ldr	r3, [r3, #24]
   21542:	2101      	movs	r1, #1
   21544:	a802      	add	r0, sp, #8
   21546:	4798      	blx	r3
			   cloud_keepalive_time_left(cloud_backend));
		if (ret < 0) {
   21548:	f1b0 0b00 	subs.w	fp, r0, #0
   2154c:	da25      	bge.n	2159a <main+0x286>
			LOG_ERR("poll() returned an error: %d", ret);
   2154e:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   21552:	f043 0301 	orr.w	r3, r3, #1
   21556:	f363 0607 	bfi	r6, r3, #0, #8
   2155a:	f364 168f 	bfi	r6, r4, #6, #10
   2155e:	4630      	mov	r0, r6
   21560:	465a      	mov	r2, fp
   21562:	493b      	ldr	r1, [pc, #236]	; (21650 <main+0x33c>)
   21564:	f01b f88d 	bl	3c682 <log_string_sync>
			error_handler(ERROR_CLOUD, ret);
   21568:	4659      	mov	r1, fp
   2156a:	2000      	movs	r0, #0
   2156c:	f7ff f9fe 	bl	2096c <error_handler>
			continue;
   21570:	e7b0      	b.n	214d4 <main+0x1c0>
		return -ENOTSUP;
   21572:	f06f 0885 	mvn.w	r8, #133	; 0x85
   21576:	e70e      	b.n	21396 <main+0x82>
		return CLOUD_CONNECT_RES_ERR_INVALID_PARAM;
   21578:	f06f 0001 	mvn.w	r0, #1
   2157c:	e79a      	b.n	214b4 <main+0x1a0>
		atomic_set(&reconnect_to_cloud, 0);
   2157e:	4601      	mov	r1, r0
   21580:	4834      	ldr	r0, [pc, #208]	; (21654 <main+0x340>)
   21582:	f01a fd18 	bl	3bfb6 <atomic_set>
		k_delayed_work_submit_to_queue(&application_work_q,
   21586:	f247 5230 	movw	r2, #30000	; 0x7530
   2158a:	4921      	ldr	r1, [pc, #132]	; (21610 <main+0x2fc>)
   2158c:	480d      	ldr	r0, [pc, #52]	; (215c4 <main+0x2b0>)
   2158e:	f017 fcb9 	bl	38f04 <k_delayed_work_submit_to_queue>
   21592:	e792      	b.n	214ba <main+0x1a6>
	}

	return backend->api->keepalive_time_left(backend);
   21594:	4798      	blx	r3
   21596:	4683      	mov	fp, r0
   21598:	e7b4      	b.n	21504 <main+0x1f0>
		}

		if (ret == 0) {
   2159a:	d161      	bne.n	21660 <main+0x34c>
			cloud_ping(cloud_backend);
   2159c:	6828      	ldr	r0, [r5, #0]
	if (backend == NULL || backend->api == NULL) {
   2159e:	2800      	cmp	r0, #0
   215a0:	d098      	beq.n	214d4 <main+0x1c0>
   215a2:	6803      	ldr	r3, [r0, #0]
   215a4:	2b00      	cmp	r3, #0
   215a6:	d095      	beq.n	214d4 <main+0x1c0>
	if (backend->api->ping != NULL) {
   215a8:	695b      	ldr	r3, [r3, #20]
   215aa:	2b00      	cmp	r3, #0
   215ac:	d092      	beq.n	214d4 <main+0x1c0>
		return backend->api->ping(backend);
   215ae:	4798      	blx	r3
   215b0:	e790      	b.n	214d4 <main+0x1c0>
   215b2:	bf00      	nop
   215b4:	000402cc 	.word	0x000402cc
   215b8:	000402cc 	.word	0x000402cc
   215bc:	0004170c 	.word	0x0004170c
   215c0:	2002bb20 	.word	0x2002bb20
   215c4:	200237d8 	.word	0x200237d8
   215c8:	00041722 	.word	0x00041722
   215cc:	200238a0 	.word	0x200238a0
   215d0:	0004173a 	.word	0x0004173a
   215d4:	0004172c 	.word	0x0004172c
   215d8:	00041757 	.word	0x00041757
   215dc:	00041774 	.word	0x00041774
   215e0:	000210c5 	.word	0x000210c5
   215e4:	00041792 	.word	0x00041792
   215e8:	00020579 	.word	0x00020579
   215ec:	00020765 	.word	0x00020765
   215f0:	000417c4 	.word	0x000417c4
   215f4:	20023950 	.word	0x20023950
   215f8:	00020df9 	.word	0x00020df9
   215fc:	2002395c 	.word	0x2002395c
   21600:	000205d5 	.word	0x000205d5
   21604:	00020531 	.word	0x00020531
   21608:	20023904 	.word	0x20023904
   2160c:	0003bfcd 	.word	0x0003bfcd
   21610:	200238a4 	.word	0x200238a4
   21614:	0002044d 	.word	0x0002044d
   21618:	200238c4 	.word	0x200238c4
   2161c:	00020d11 	.word	0x00020d11
   21620:	200238e4 	.word	0x200238e4
   21624:	00020c99 	.word	0x00020c99
   21628:	2002392c 	.word	0x2002392c
   2162c:	000417fe 	.word	0x000417fe
   21630:	000420ee 	.word	0x000420ee
   21634:	0004181a 	.word	0x0004181a
   21638:	0004183d 	.word	0x0004183d
   2163c:	00046834 	.word	0x00046834
   21640:	00041882 	.word	0x00041882
   21644:	000418d1 	.word	0x000418d1
   21648:	000418a8 	.word	0x000418a8
   2164c:	000418dc 	.word	0x000418dc
   21650:	000418ed 	.word	0x000418ed
   21654:	20023924 	.word	0x20023924
   21658:	20023a4c 	.word	0x20023a4c
   2165c:	00041856 	.word	0x00041856
			continue;
		}

		if ((fds[0].revents & POLLIN) == POLLIN) {
   21660:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   21664:	07da      	lsls	r2, r3, #31
   21666:	d506      	bpl.n	21676 <main+0x362>
			cloud_input(cloud_backend);
   21668:	6828      	ldr	r0, [r5, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_input(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
   2166a:	b120      	cbz	r0, 21676 <main+0x362>
   2166c:	6803      	ldr	r3, [r0, #0]
   2166e:	b113      	cbz	r3, 21676 <main+0x362>
	    backend->api->input == NULL) {
   21670:	69db      	ldr	r3, [r3, #28]
	if (backend == NULL || backend->api == NULL ||
   21672:	b103      	cbz	r3, 21676 <main+0x362>
		return -ENOTSUP;
	}

	return backend->api->input(backend);
   21674:	4798      	blx	r3
		}

		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   21676:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2167a:	f012 0320 	ands.w	r3, r2, #32
   2167e:	d030      	beq.n	216e2 <main+0x3ce>
			if (atomic_get(&reconnect_to_cloud)) {
   21680:	4834      	ldr	r0, [pc, #208]	; (21754 <main+0x440>)
   21682:	f01a fca0 	bl	3bfc6 <atomic_get>
   21686:	4682      	mov	sl, r0
   21688:	b178      	cbz	r0, 216aa <main+0x396>
				k_delayed_work_cancel(&cloud_reboot_work);
   2168a:	4833      	ldr	r0, [pc, #204]	; (21758 <main+0x444>)
   2168c:	f017 fcc6 	bl	3901c <k_delayed_work_cancel>
				LOG_INF("Attempting reconnect...");
   21690:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   21694:	f043 0303 	orr.w	r3, r3, #3
   21698:	f363 0707 	bfi	r7, r3, #0, #8
   2169c:	f364 178f 	bfi	r7, r4, #6, #10
   216a0:	492e      	ldr	r1, [pc, #184]	; (2175c <main+0x448>)
   216a2:	4638      	mov	r0, r7
   216a4:	f01a ffed 	bl	3c682 <log_string_sync>
				goto connect;
   216a8:	e6f8      	b.n	2149c <main+0x188>
			}
			LOG_ERR("Socket error: POLLNVAL");
   216aa:	2301      	movs	r3, #1
   216ac:	f04f 0000 	mov.w	r0, #0
   216b0:	f363 0007 	bfi	r0, r3, #0, #8
   216b4:	f364 108f 	bfi	r0, r4, #6, #10
   216b8:	4929      	ldr	r1, [pc, #164]	; (21760 <main+0x44c>)
   216ba:	f01a ffe2 	bl	3c682 <log_string_sync>
			LOG_ERR("The cloud socket was unexpectedly closed.");
   216be:	2301      	movs	r3, #1
   216c0:	f04f 0000 	mov.w	r0, #0
   216c4:	f363 0007 	bfi	r0, r3, #0, #8
   216c8:	f364 108f 	bfi	r0, r4, #6, #10
   216cc:	4925      	ldr	r1, [pc, #148]	; (21764 <main+0x450>)
   216ce:	f01a ffd8 	bl	3c682 <log_string_sync>
			error_handler(ERROR_CLOUD, -EIO);
   216d2:	f06f 0104 	mvn.w	r1, #4
   216d6:	4650      	mov	r0, sl
		}

		if ((fds[0].revents & POLLERR) == POLLERR) {
			LOG_ERR("Socket error: POLLERR");
			LOG_ERR("Cloud connection was unexpectedly closed.");
			error_handler(ERROR_CLOUD, -EIO);
   216d8:	f7ff f948 	bl	2096c <error_handler>
		}
	}

	cloud_disconnect(cloud_backend);
	goto connect;
}
   216dc:	b005      	add	sp, #20
   216de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   216e2:	f012 0b10 	ands.w	fp, r2, #16
   216e6:	d019      	beq.n	2171c <main+0x408>
			LOG_ERR("Socket error: POLLHUP");
   216e8:	2201      	movs	r2, #1
   216ea:	f04f 0000 	mov.w	r0, #0
   216ee:	f362 0007 	bfi	r0, r2, #0, #8
   216f2:	f364 108f 	bfi	r0, r4, #6, #10
   216f6:	491c      	ldr	r1, [pc, #112]	; (21768 <main+0x454>)
   216f8:	9301      	str	r3, [sp, #4]
   216fa:	f01a ffc2 	bl	3c682 <log_string_sync>
			LOG_ERR("Connection was closed by the cloud.");
   216fe:	2201      	movs	r2, #1
   21700:	f04f 0000 	mov.w	r0, #0
   21704:	f362 0007 	bfi	r0, r2, #0, #8
   21708:	f364 108f 	bfi	r0, r4, #6, #10
   2170c:	4917      	ldr	r1, [pc, #92]	; (2176c <main+0x458>)
   2170e:	f01a ffb8 	bl	3c682 <log_string_sync>
			error_handler(ERROR_CLOUD, -EIO);
   21712:	9b01      	ldr	r3, [sp, #4]
   21714:	f06f 0104 	mvn.w	r1, #4
   21718:	4618      	mov	r0, r3
   2171a:	e7dd      	b.n	216d8 <main+0x3c4>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   2171c:	0713      	lsls	r3, r2, #28
   2171e:	f57f aed9 	bpl.w	214d4 <main+0x1c0>
			LOG_ERR("Socket error: POLLERR");
   21722:	2301      	movs	r3, #1
   21724:	f04f 0000 	mov.w	r0, #0
   21728:	f363 0007 	bfi	r0, r3, #0, #8
   2172c:	f364 108f 	bfi	r0, r4, #6, #10
   21730:	490f      	ldr	r1, [pc, #60]	; (21770 <main+0x45c>)
   21732:	f01a ffa6 	bl	3c682 <log_string_sync>
			LOG_ERR("Cloud connection was unexpectedly closed.");
   21736:	2301      	movs	r3, #1
   21738:	f04f 0000 	mov.w	r0, #0
   2173c:	f363 0007 	bfi	r0, r3, #0, #8
   21740:	f364 108f 	bfi	r0, r4, #6, #10
   21744:	490b      	ldr	r1, [pc, #44]	; (21774 <main+0x460>)
   21746:	f01a ff9c 	bl	3c682 <log_string_sync>
			error_handler(ERROR_CLOUD, -EIO);
   2174a:	f06f 0104 	mvn.w	r1, #4
   2174e:	4658      	mov	r0, fp
   21750:	e7c2      	b.n	216d8 <main+0x3c4>
   21752:	bf00      	nop
   21754:	20023924 	.word	0x20023924
   21758:	200238a4 	.word	0x200238a4
   2175c:	0004190a 	.word	0x0004190a
   21760:	00041922 	.word	0x00041922
   21764:	00041939 	.word	0x00041939
   21768:	00041963 	.word	0x00041963
   2176c:	00041979 	.word	0x00041979
   21770:	0004199d 	.word	0x0004199d
   21774:	000419b3 	.word	0x000419b3

00021778 <motion_init_and_start>:
}

/**@brief Initialize motion module. */
int motion_init_and_start(struct k_work_q *work_q,
			  motion_handler_t motion_handler)
{
   21778:	b510      	push	{r4, lr}
	if ((work_q == NULL) || (motion_handler == NULL)) {
   2177a:	b358      	cbz	r0, 217d4 <motion_init_and_start+0x5c>
   2177c:	b351      	cbz	r1, 217d4 <motion_init_and_start+0x5c>
	}

	int err;

	motion_work_q = work_q;
	handler = motion_handler;
   2177e:	4b17      	ldr	r3, [pc, #92]	; (217dc <motion_init_and_start+0x64>)
	motion_work_q = work_q;
   21780:	4c17      	ldr	r4, [pc, #92]	; (217e0 <motion_init_and_start+0x68>)
	handler = motion_handler;
   21782:	6019      	str	r1, [r3, #0]
	motion_work_q = work_q;
   21784:	6020      	str	r0, [r4, #0]

	k_delayed_work_init(&motion_work, motion_work_q_handler);
   21786:	4917      	ldr	r1, [pc, #92]	; (217e4 <motion_init_and_start+0x6c>)
   21788:	4817      	ldr	r0, [pc, #92]	; (217e8 <motion_init_and_start+0x70>)
   2178a:	f01d fa0c 	bl	3eba6 <k_delayed_work_init>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   2178e:	4817      	ldr	r0, [pc, #92]	; (217ec <motion_init_and_start+0x74>)
   21790:	f014 ffb2 	bl	366f8 <z_impl_device_get_binding>
	accel_dev = device_get_binding(CONFIG_ACCEL_DEV_NAME);
   21794:	4b16      	ldr	r3, [pc, #88]	; (217f0 <motion_init_and_start+0x78>)
   21796:	6018      	str	r0, [r3, #0]
	if (accel_dev == NULL) {
   21798:	b130      	cbz	r0, 217a8 <motion_init_and_start+0x30>
	k_delayed_work_submit_to_queue(motion_work_q, &motion_work, K_NO_WAIT);
   2179a:	2200      	movs	r2, #0
   2179c:	4912      	ldr	r1, [pc, #72]	; (217e8 <motion_init_and_start+0x70>)
   2179e:	6820      	ldr	r0, [r4, #0]
   217a0:	f017 fbb0 	bl	38f04 <k_delayed_work_submit_to_queue>
	if (err) {
		return err;
	}

	sensor_trigger_handler(NULL, NULL);
	return 0;
   217a4:	2000      	movs	r0, #0
}
   217a6:	bd10      	pop	{r4, pc}
		LOG_ERR("Could not get %s device",
   217a8:	2301      	movs	r3, #1
   217aa:	f04f 0400 	mov.w	r4, #0
   217ae:	4a11      	ldr	r2, [pc, #68]	; (217f4 <motion_init_and_start+0x7c>)
   217b0:	f363 0407 	bfi	r4, r3, #0, #8
   217b4:	4b10      	ldr	r3, [pc, #64]	; (217f8 <motion_init_and_start+0x80>)
   217b6:	480d      	ldr	r0, [pc, #52]	; (217ec <motion_init_and_start+0x74>)
   217b8:	1a9b      	subs	r3, r3, r2
   217ba:	08db      	lsrs	r3, r3, #3
   217bc:	f363 148f 	bfi	r4, r3, #6, #10
   217c0:	f01a ff71 	bl	3c6a6 <log_strdup>
   217c4:	490d      	ldr	r1, [pc, #52]	; (217fc <motion_init_and_start+0x84>)
   217c6:	4602      	mov	r2, r0
   217c8:	4620      	mov	r0, r4
   217ca:	f01a ff5a 	bl	3c682 <log_string_sync>
		return -ENODEV;
   217ce:	f06f 0012 	mvn.w	r0, #18
   217d2:	e7e8      	b.n	217a6 <motion_init_and_start+0x2e>
		return -EINVAL;
   217d4:	f06f 0015 	mvn.w	r0, #21
   217d8:	e7e5      	b.n	217a6 <motion_init_and_start+0x2e>
   217da:	bf00      	nop
   217dc:	2002397c 	.word	0x2002397c
   217e0:	200239a0 	.word	0x200239a0
   217e4:	0001d139 	.word	0x0001d139
   217e8:	20023980 	.word	0x20023980
   217ec:	00041c17 	.word	0x00041c17
   217f0:	20023978 	.word	0x20023978
   217f4:	000402cc 	.word	0x000402cc
   217f8:	00040384 	.word	0x00040384
   217fc:	00041c22 	.word	0x00041c22

00021800 <motion_simulate_trigger>:
	k_delayed_work_submit_to_queue(motion_work_q, &motion_work, K_NO_WAIT);
   21800:	4b02      	ldr	r3, [pc, #8]	; (2180c <motion_simulate_trigger+0xc>)
   21802:	2200      	movs	r2, #0
   21804:	4902      	ldr	r1, [pc, #8]	; (21810 <motion_simulate_trigger+0x10>)
   21806:	6818      	ldr	r0, [r3, #0]
   21808:	f017 bb7c 	b.w	38f04 <k_delayed_work_submit_to_queue>
   2180c:	200239a0 	.word	0x200239a0
   21810:	20023980 	.word	0x20023980

00021814 <button_handler>:
}
#endif /* CONFIG_UI_LED_USE_PWM */

/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(u32_t button_states, u32_t has_changed)
{
   21814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21816:	4605      	mov	r5, r0
   21818:	460c      	mov	r4, r1
				break;
			}
		}

		/* Button number has been stored, remove from bitmask. */
		has_changed &= ~(1UL << (btn_num - 1));
   2181a:	2601      	movs	r6, #1
		evt.button = btn_num;
		evt.type = (button_states & BIT(btn_num - 1))
				? UI_EVT_BUTTON_ACTIVE
				: UI_EVT_BUTTON_INACTIVE;

		callback(evt);
   2181c:	4f11      	ldr	r7, [pc, #68]	; (21864 <button_handler+0x50>)
	while (has_changed) {
   2181e:	b90c      	cbnz	r4, 21824 <button_handler+0x10>
	}
}
   21820:	b003      	add	sp, #12
   21822:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21824:	2300      	movs	r3, #0
			if (has_changed & BIT(i)) {
   21826:	1c59      	adds	r1, r3, #1
   21828:	fa24 f303 	lsr.w	r3, r4, r3
   2182c:	f013 0001 	ands.w	r0, r3, #1
   21830:	b2ca      	uxtb	r2, r1
   21832:	d103      	bne.n	2183c <button_handler+0x28>
		for (u8_t i = 0; i < 32; i++) {
   21834:	2920      	cmp	r1, #32
   21836:	460b      	mov	r3, r1
   21838:	d1f5      	bne.n	21826 <button_handler+0x12>
		btn_num = 0;
   2183a:	4602      	mov	r2, r0
		has_changed &= ~(1UL << (btn_num - 1));
   2183c:	1e53      	subs	r3, r2, #1
   2183e:	fa06 f103 	lsl.w	r1, r6, r3
				? UI_EVT_BUTTON_ACTIVE
   21842:	fa25 f303 	lsr.w	r3, r5, r3
				: UI_EVT_BUTTON_INACTIVE;
   21846:	43db      	mvns	r3, r3
   21848:	f003 0301 	and.w	r3, r3, #1
		evt.button = btn_num;
   2184c:	9201      	str	r2, [sp, #4]
				: UI_EVT_BUTTON_INACTIVE;
   2184e:	f88d 3000 	strb.w	r3, [sp]
		callback(evt);
   21852:	aa02      	add	r2, sp, #8
		has_changed &= ~(1UL << (btn_num - 1));
   21854:	ea24 0401 	bic.w	r4, r4, r1
		callback(evt);
   21858:	683b      	ldr	r3, [r7, #0]
   2185a:	e912 0003 	ldmdb	r2, {r0, r1}
   2185e:	4798      	blx	r3
   21860:	e7dd      	b.n	2181e <button_handler+0xa>
   21862:	bf00      	nop
   21864:	200239a4 	.word	0x200239a4

00021868 <leds_update>:
	led_on_mask = UI_LED_GET_ON(current_led_state);
   21868:	4b11      	ldr	r3, [pc, #68]	; (218b0 <leds_update+0x48>)
{
   2186a:	b570      	push	{r4, r5, r6, lr}
	led_on_mask = UI_LED_GET_ON(current_led_state);
   2186c:	881c      	ldrh	r4, [r3, #0]
	led_on = !led_on;
   2186e:	4b11      	ldr	r3, [pc, #68]	; (218b4 <leds_update+0x4c>)
{
   21870:	4606      	mov	r6, r0
	led_on = !led_on;
   21872:	781a      	ldrb	r2, [r3, #0]
   21874:	f082 0201 	eor.w	r2, r2, #1
   21878:	701a      	strb	r2, [r3, #0]
	if (led_on) {
   2187a:	f344 2307 	sbfx	r3, r4, #8, #8
   2187e:	b264      	sxtb	r4, r4
   21880:	b192      	cbz	r2, 218a8 <leds_update+0x40>
		led_on_mask |= UI_LED_GET_BLINK(current_led_state);
   21882:	431c      	orrs	r4, r3
	if (led_on_mask != current_led_on_mask) {
   21884:	4d0c      	ldr	r5, [pc, #48]	; (218b8 <leds_update+0x50>)
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   21886:	b2e4      	uxtb	r4, r4
	if (led_on_mask != current_led_on_mask) {
   21888:	782b      	ldrb	r3, [r5, #0]
   2188a:	42a3      	cmp	r3, r4
   2188c:	d003      	beq.n	21896 <leds_update+0x2e>
		dk_set_leds(led_on_mask);
   2188e:	4620      	mov	r0, r4
   21890:	f01c fd26 	bl	3e2e0 <dk_set_leds>
		current_led_on_mask = led_on_mask;
   21894:	702c      	strb	r4, [r5, #0]
	if (work) {
   21896:	b156      	cbz	r6, 218ae <leds_update+0x46>
}
   21898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2189c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   218a0:	4906      	ldr	r1, [pc, #24]	; (218bc <leds_update+0x54>)
   218a2:	4807      	ldr	r0, [pc, #28]	; (218c0 <leds_update+0x58>)
   218a4:	f017 bb2e 	b.w	38f04 <k_delayed_work_submit_to_queue>
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   218a8:	ea24 0403 	bic.w	r4, r4, r3
   218ac:	e7ea      	b.n	21884 <leds_update+0x1c>
}
   218ae:	bd70      	pop	{r4, r5, r6, pc}
   218b0:	20029490 	.word	0x20029490
   218b4:	20029f2b 	.word	0x20029f2b
   218b8:	20029f2a 	.word	0x20029f2a
   218bc:	200239a8 	.word	0x200239a8
   218c0:	200293b0 	.word	0x200293b0

000218c4 <ui_led_set_pattern>:

void ui_led_set_pattern(enum ui_led_pattern state)
{
	current_led_state = state;
   218c4:	4b01      	ldr	r3, [pc, #4]	; (218cc <ui_led_set_pattern+0x8>)
   218c6:	8018      	strh	r0, [r3, #0]
#ifdef CONFIG_UI_LED_USE_PWM
	ui_led_set_effect(state);
#else
	current_led_state = state;
#endif /* CONFIG_UI_LED_USE_PWM */
}
   218c8:	4770      	bx	lr
   218ca:	bf00      	nop
   218cc:	20029490 	.word	0x20029490

000218d0 <ui_init>:
	}
#endif
}

int ui_init(ui_callback_t cb)
{
   218d0:	b538      	push	{r3, r4, r5, lr}
   218d2:	4605      	mov	r5, r0
	if (err) {
		LOG_ERR("Error when initializing PWM controlled LEDs");
		return err;
	}
#else
	err = dk_leds_init();
   218d4:	f005 fcc8 	bl	27268 <dk_leds_init>
	if (err) {
   218d8:	4604      	mov	r4, r0
   218da:	b180      	cbz	r0, 218fe <ui_init+0x2e>
		LOG_ERR("Could not initialize leds, err code: %d\n", err);
   218dc:	2301      	movs	r3, #1
   218de:	f04f 0000 	mov.w	r0, #0
   218e2:	4a21      	ldr	r2, [pc, #132]	; (21968 <ui_init+0x98>)
   218e4:	f363 0007 	bfi	r0, r3, #0, #8
   218e8:	4b20      	ldr	r3, [pc, #128]	; (2196c <ui_init+0x9c>)
   218ea:	4921      	ldr	r1, [pc, #132]	; (21970 <ui_init+0xa0>)
   218ec:	1a9b      	subs	r3, r3, r2
   218ee:	4622      	mov	r2, r4
   218f0:	08db      	lsrs	r3, r3, #3
   218f2:	f363 108f 	bfi	r0, r3, #6, #10
	if (cb) {
		callback  = cb;

		err = dk_buttons_init(button_handler);
		if (err) {
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   218f6:	f01a fec4 	bl	3c682 <log_string_sync>
		return err;
	}
#endif /* CONFIG_UI_NMOS */

	return err;
}
   218fa:	4620      	mov	r0, r4
   218fc:	bd38      	pop	{r3, r4, r5, pc}
	err = dk_set_leds_state(0x00, DK_ALL_LEDS_MSK);
   218fe:	210f      	movs	r1, #15
   21900:	f01c fce4 	bl	3e2cc <dk_set_leds_state>
	if (err) {
   21904:	4604      	mov	r4, r0
   21906:	b168      	cbz	r0, 21924 <ui_init+0x54>
		LOG_ERR("Could not set leds state, err code: %d\n", err);
   21908:	2301      	movs	r3, #1
   2190a:	f04f 0000 	mov.w	r0, #0
   2190e:	4a16      	ldr	r2, [pc, #88]	; (21968 <ui_init+0x98>)
   21910:	f363 0007 	bfi	r0, r3, #0, #8
   21914:	4b15      	ldr	r3, [pc, #84]	; (2196c <ui_init+0x9c>)
   21916:	4917      	ldr	r1, [pc, #92]	; (21974 <ui_init+0xa4>)
   21918:	1a9b      	subs	r3, r3, r2
   2191a:	08db      	lsrs	r3, r3, #3
   2191c:	f363 108f 	bfi	r0, r3, #6, #10
   21920:	4622      	mov	r2, r4
   21922:	e7e8      	b.n	218f6 <ui_init+0x26>
	k_delayed_work_init(&leds_update_work, leds_update);
   21924:	4914      	ldr	r1, [pc, #80]	; (21978 <ui_init+0xa8>)
   21926:	4815      	ldr	r0, [pc, #84]	; (2197c <ui_init+0xac>)
   21928:	f01d f93d 	bl	3eba6 <k_delayed_work_init>
   2192c:	4622      	mov	r2, r4
   2192e:	4913      	ldr	r1, [pc, #76]	; (2197c <ui_init+0xac>)
   21930:	4813      	ldr	r0, [pc, #76]	; (21980 <ui_init+0xb0>)
   21932:	f017 fae7 	bl	38f04 <k_delayed_work_submit_to_queue>
	if (cb) {
   21936:	2d00      	cmp	r5, #0
   21938:	d0df      	beq.n	218fa <ui_init+0x2a>
		callback  = cb;
   2193a:	4b12      	ldr	r3, [pc, #72]	; (21984 <ui_init+0xb4>)
		err = dk_buttons_init(button_handler);
   2193c:	4812      	ldr	r0, [pc, #72]	; (21988 <ui_init+0xb8>)
		callback  = cb;
   2193e:	601d      	str	r5, [r3, #0]
		err = dk_buttons_init(button_handler);
   21940:	f005 fcec 	bl	2731c <dk_buttons_init>
		if (err) {
   21944:	4604      	mov	r4, r0
   21946:	2800      	cmp	r0, #0
   21948:	d0d7      	beq.n	218fa <ui_init+0x2a>
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   2194a:	2301      	movs	r3, #1
   2194c:	f04f 0000 	mov.w	r0, #0
   21950:	4a05      	ldr	r2, [pc, #20]	; (21968 <ui_init+0x98>)
   21952:	f363 0007 	bfi	r0, r3, #0, #8
   21956:	4b05      	ldr	r3, [pc, #20]	; (2196c <ui_init+0x9c>)
   21958:	490c      	ldr	r1, [pc, #48]	; (2198c <ui_init+0xbc>)
   2195a:	1a9b      	subs	r3, r3, r2
   2195c:	08db      	lsrs	r3, r3, #3
   2195e:	f363 108f 	bfi	r0, r3, #6, #10
   21962:	4622      	mov	r2, r4
   21964:	e7c7      	b.n	218f6 <ui_init+0x26>
   21966:	bf00      	nop
   21968:	000402cc 	.word	0x000402cc
   2196c:	000403ec 	.word	0x000403ec
   21970:	00041c79 	.word	0x00041c79
   21974:	00041ca2 	.word	0x00041ca2
   21978:	00021869 	.word	0x00021869
   2197c:	200239a8 	.word	0x200239a8
   21980:	200293b0 	.word	0x200293b0
   21984:	200239a4 	.word	0x200239a4
   21988:	00021815 	.word	0x00021815
   2198c:	00041cca 	.word	0x00041cca

00021990 <cloud_set_chan_cfg_item>:
}

static int cloud_set_chan_cfg_item(const enum cloud_channel channel,
			  const enum sensor_chan_cfg_item_type type,
			  const double value)
{
   21990:	b5f0      	push	{r4, r5, r6, r7, lr}
   21992:	4616      	mov	r6, r2
   21994:	461f      	mov	r7, r3
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
		if (sensor_cfg[i].chan == channel) {
   21996:	2230      	movs	r2, #48	; 0x30
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   21998:	2300      	movs	r3, #0
		if (sensor_cfg[i].chan == channel) {
   2199a:	4c0a      	ldr	r4, [pc, #40]	; (219c4 <cloud_set_chan_cfg_item+0x34>)
   2199c:	fb02 f503 	mul.w	r5, r2, r3
   219a0:	5d2d      	ldrb	r5, [r5, r4]
   219a2:	4285      	cmp	r5, r0
   219a4:	d108      	bne.n	219b8 <cloud_set_chan_cfg_item+0x28>
	cfg->value[type] = value;
   219a6:	2206      	movs	r2, #6
	return 0;
   219a8:	2000      	movs	r0, #0
	cfg->value[type] = value;
   219aa:	fb02 1303 	mla	r3, r2, r3, r1
   219ae:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   219b2:	e9c3 6702 	strd	r6, r7, [r3, #8]
						      value);
		}
	}

	return -ENOTSUP;
}
   219b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   219b8:	3301      	adds	r3, #1
   219ba:	2b08      	cmp	r3, #8
   219bc:	d1ee      	bne.n	2199c <cloud_set_chan_cfg_item+0xc>
	return -ENOTSUP;
   219be:	f06f 0085 	mvn.w	r0, #133	; 0x85
   219c2:	e7f8      	b.n	219b6 <cloud_set_chan_cfg_item+0x26>
   219c4:	20030fa0 	.word	0x20030fa0

000219c8 <cloud_cmd_handle_sensor_set_chan_cfg>:

static int cloud_cmd_handle_sensor_set_chan_cfg(struct cloud_command const *const cmd)
{
	int err = -ENOTSUP;

	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   219c8:	7803      	ldrb	r3, [r0, #0]
{
   219ca:	b570      	push	{r4, r5, r6, lr}
	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   219cc:	2b08      	cmp	r3, #8
{
   219ce:	4604      	mov	r4, r0
	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   219d0:	d147      	bne.n	21a62 <cloud_cmd_handle_sensor_set_chan_cfg+0x9a>
		return -EINVAL;
	}

	switch (cmd->type) {
   219d2:	7883      	ldrb	r3, [r0, #2]
   219d4:	2b02      	cmp	r3, #2
   219d6:	d012      	beq.n	219fe <cloud_cmd_handle_sensor_set_chan_cfg+0x36>
   219d8:	2b03      	cmp	r3, #3
   219da:	d02b      	beq.n	21a34 <cloud_cmd_handle_sensor_set_chan_cfg+0x6c>
   219dc:	2b01      	cmp	r3, #1
   219de:	d143      	bne.n	21a68 <cloud_cmd_handle_sensor_set_chan_cfg+0xa0>
	case CLOUD_CMD_ENABLE:
		err = cloud_set_chan_cfg_item(
   219e0:	f994 3010 	ldrsb.w	r3, [r4, #16]
   219e4:	2200      	movs	r2, #0
   219e6:	2b01      	cmp	r3, #1
   219e8:	bf18      	it	ne
   219ea:	2300      	movne	r3, #0
   219ec:	f04f 0100 	mov.w	r1, #0
   219f0:	7840      	ldrb	r0, [r0, #1]
   219f2:	bf08      	it	eq
   219f4:	4b1e      	ldreq	r3, [pc, #120]	; (21a70 <cloud_cmd_handle_sensor_set_chan_cfg+0xa8>)
	default:
		break;
	}

	return err;
}
   219f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			err = cloud_set_chan_cfg_item(
   219fa:	f7ff bfc9 	b.w	21990 <cloud_set_chan_cfg_item>
		if (cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED) {
   219fe:	f990 3010 	ldrsb.w	r3, [r0, #16]
   21a02:	7840      	ldrb	r0, [r0, #1]
   21a04:	1c59      	adds	r1, r3, #1
   21a06:	d10d      	bne.n	21a24 <cloud_cmd_handle_sensor_set_chan_cfg+0x5c>
			err = cloud_set_chan_cfg_item(
   21a08:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   21a0c:	2103      	movs	r1, #3
   21a0e:	f7ff ffbf 	bl	21990 <cloud_set_chan_cfg_item>
			cloud_set_chan_cfg_item(
   21a12:	2200      	movs	r2, #0
			err = cloud_set_chan_cfg_item(
   21a14:	4605      	mov	r5, r0
			cloud_set_chan_cfg_item(
   21a16:	2104      	movs	r1, #4
   21a18:	4b15      	ldr	r3, [pc, #84]	; (21a70 <cloud_cmd_handle_sensor_set_chan_cfg+0xa8>)
			cloud_set_chan_cfg_item(
   21a1a:	7860      	ldrb	r0, [r4, #1]
   21a1c:	f7ff ffb8 	bl	21990 <cloud_set_chan_cfg_item>
}
   21a20:	4628      	mov	r0, r5
   21a22:	bd70      	pop	{r4, r5, r6, pc}
			err = cloud_set_chan_cfg_item(
   21a24:	2b01      	cmp	r3, #1
   21a26:	f04f 0200 	mov.w	r2, #0
   21a2a:	bf14      	ite	ne
   21a2c:	2300      	movne	r3, #0
   21a2e:	4b10      	ldreq	r3, [pc, #64]	; (21a70 <cloud_cmd_handle_sensor_set_chan_cfg+0xa8>)
   21a30:	2104      	movs	r1, #4
   21a32:	e7e0      	b.n	219f6 <cloud_cmd_handle_sensor_set_chan_cfg+0x2e>
		if (cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED) {
   21a34:	f990 3010 	ldrsb.w	r3, [r0, #16]
   21a38:	7840      	ldrb	r0, [r0, #1]
   21a3a:	1c5a      	adds	r2, r3, #1
   21a3c:	d109      	bne.n	21a52 <cloud_cmd_handle_sensor_set_chan_cfg+0x8a>
			err = cloud_set_chan_cfg_item(
   21a3e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   21a42:	2101      	movs	r1, #1
   21a44:	f7ff ffa4 	bl	21990 <cloud_set_chan_cfg_item>
			cloud_set_chan_cfg_item(
   21a48:	2200      	movs	r2, #0
			err = cloud_set_chan_cfg_item(
   21a4a:	4605      	mov	r5, r0
			cloud_set_chan_cfg_item(
   21a4c:	4b08      	ldr	r3, [pc, #32]	; (21a70 <cloud_cmd_handle_sensor_set_chan_cfg+0xa8>)
   21a4e:	2102      	movs	r1, #2
   21a50:	e7e3      	b.n	21a1a <cloud_cmd_handle_sensor_set_chan_cfg+0x52>
			err = cloud_set_chan_cfg_item(
   21a52:	2b01      	cmp	r3, #1
   21a54:	f04f 0200 	mov.w	r2, #0
   21a58:	bf14      	ite	ne
   21a5a:	2300      	movne	r3, #0
   21a5c:	4b04      	ldreq	r3, [pc, #16]	; (21a70 <cloud_cmd_handle_sensor_set_chan_cfg+0xa8>)
   21a5e:	2102      	movs	r1, #2
   21a60:	e7c9      	b.n	219f6 <cloud_cmd_handle_sensor_set_chan_cfg+0x2e>
		return -EINVAL;
   21a62:	f06f 0515 	mvn.w	r5, #21
   21a66:	e7db      	b.n	21a20 <cloud_cmd_handle_sensor_set_chan_cfg+0x58>
	int err = -ENOTSUP;
   21a68:	f06f 0585 	mvn.w	r5, #133	; 0x85
   21a6c:	e7d8      	b.n	21a20 <cloud_cmd_handle_sensor_set_chan_cfg+0x58>
   21a6e:	bf00      	nop
   21a70:	3ff00000 	.word	0x3ff00000

00021a74 <cloud_cmd_parse_type>:
{
   21a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21a78:	460f      	mov	r7, r1
   21a7a:	4614      	mov	r4, r2
	if ((type_cmd == NULL) || (parsed_cmd == NULL)) {
   21a7c:	4606      	mov	r6, r0
   21a7e:	2800      	cmp	r0, #0
   21a80:	f000 8084 	beq.w	21b8c <cloud_cmd_parse_type+0x118>
	if (type_obj != NULL) {
   21a84:	7903      	ldrb	r3, [r0, #4]
   21a86:	2900      	cmp	r1, #0
   21a88:	d07e      	beq.n	21b88 <cloud_cmd_parse_type+0x114>
		if (type_cmd->type != CLOUD_CMD_DATA_STRING) {
   21a8a:	2b07      	cmp	r3, #7
   21a8c:	d077      	beq.n	21b7e <cloud_cmd_parse_type+0x10a>
			decoded_obj = json_object_decode(type_obj,
   21a8e:	4a4a      	ldr	r2, [pc, #296]	; (21bb8 <cloud_cmd_parse_type+0x144>)
   21a90:	4638      	mov	r0, r7
   21a92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   21a96:	f01a fabf 	bl	3c018 <json_object_decode>
			if (!decoded_obj) {
   21a9a:	4605      	mov	r5, r0
   21a9c:	2800      	cmp	r0, #0
   21a9e:	f000 8085 	beq.w	21bac <cloud_cmd_parse_type+0x138>
		switch (type_cmd->type) {
   21aa2:	7933      	ldrb	r3, [r6, #4]
   21aa4:	3b01      	subs	r3, #1
   21aa6:	2b06      	cmp	r3, #6
   21aa8:	f200 8083 	bhi.w	21bb2 <cloud_cmd_parse_type+0x13e>
   21aac:	e8df f003 	tbb	[pc, r3]
   21ab0:	2f2f2f04 	.word	0x2f2f2f04
   21ab4:	4f3f      	.short	0x4f3f
   21ab6:	67          	.byte	0x67
   21ab7:	00          	.byte	0x00
			if (cJSON_IsNull(decoded_obj)) {
   21ab8:	f01b ffc7 	bl	3da4a <cJSON_IsNull>
   21abc:	b1b8      	cbz	r0, 21aee <cloud_cmd_parse_type+0x7a>
				parsed_cmd->data.sv.state =
   21abe:	2300      	movs	r3, #0
   21ac0:	7423      	strb	r3, [r4, #16]
	if ((type_cmd->type == CLOUD_CMD_INTERVAL) &&
   21ac2:	7935      	ldrb	r5, [r6, #4]
   21ac4:	2d04      	cmp	r5, #4
   21ac6:	d10f      	bne.n	21ae8 <cloud_cmd_parse_type+0x74>
   21ac8:	f994 3010 	ldrsb.w	r3, [r4, #16]
   21acc:	3301      	adds	r3, #1
   21ace:	d10b      	bne.n	21ae8 <cloud_cmd_parse_type+0x74>
		if (parsed_cmd->data.sv.value == DISABLE_SEND_INTERVAL_VAL) {
   21ad0:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   21ad4:	2200      	movs	r2, #0
   21ad6:	2300      	movs	r3, #0
   21ad8:	4640      	mov	r0, r8
   21ada:	4649      	mov	r1, r9
   21adc:	f7fb f8d4 	bl	1cc88 <__aeabi_dcmpeq>
   21ae0:	2800      	cmp	r0, #0
   21ae2:	d056      	beq.n	21b92 <cloud_cmd_parse_type+0x11e>
			parsed_cmd->data.sv.state = CLOUD_CMD_STATE_FALSE;
   21ae4:	2300      	movs	r3, #0
   21ae6:	7423      	strb	r3, [r4, #16]
	parsed_cmd->type = type_cmd->type;
   21ae8:	70a5      	strb	r5, [r4, #2]
	return 0;
   21aea:	2000      	movs	r0, #0
   21aec:	e005      	b.n	21afa <cloud_cmd_parse_type+0x86>
			} else if (cJSON_IsBool(decoded_obj)) {
   21aee:	4628      	mov	r0, r5
   21af0:	f01b ffa4 	bl	3da3c <cJSON_IsBool>
   21af4:	b918      	cbnz	r0, 21afe <cloud_cmd_parse_type+0x8a>
				return -ESRCH;
   21af6:	f06f 0002 	mvn.w	r0, #2
}
   21afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					cJSON_IsTrue(decoded_obj) ?
   21afe:	4628      	mov	r0, r5
   21b00:	f01b ff96 	bl	3da30 <cJSON_IsTrue>
						CLOUD_CMD_STATE_TRUE :
   21b04:	3000      	adds	r0, #0
   21b06:	bf18      	it	ne
   21b08:	2001      	movne	r0, #1
   21b0a:	7420      	strb	r0, [r4, #16]
   21b0c:	e7d9      	b.n	21ac2 <cloud_cmd_parse_type+0x4e>
			if (cJSON_IsNull(decoded_obj)) {
   21b0e:	f01b ff9c 	bl	3da4a <cJSON_IsNull>
   21b12:	2800      	cmp	r0, #0
   21b14:	d1d3      	bne.n	21abe <cloud_cmd_parse_type+0x4a>
			} else if (cJSON_IsNumber(decoded_obj)) {
   21b16:	4628      	mov	r0, r5
   21b18:	f01b ff9d 	bl	3da56 <cJSON_IsNumber>
   21b1c:	2800      	cmp	r0, #0
   21b1e:	d0ea      	beq.n	21af6 <cloud_cmd_parse_type+0x82>
				parsed_cmd->data.sv.state =
   21b20:	23ff      	movs	r3, #255	; 0xff
   21b22:	7423      	strb	r3, [r4, #16]
				parsed_cmd->data.sv.value =
   21b24:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   21b28:	e9c4 2302 	strd	r2, r3, [r4, #8]
   21b2c:	e7c9      	b.n	21ac2 <cloud_cmd_parse_type+0x4e>
			if (cJSON_GetStringValue(decoded_obj) == NULL) {
   21b2e:	f01b ffa0 	bl	3da72 <cJSON_GetStringValue>
   21b32:	2800      	cmp	r0, #0
   21b34:	d0df      	beq.n	21af6 <cloud_cmd_parse_type+0x82>
				cJSON_GetStringValue(decoded_obj), NULL, 16);
   21b36:	4628      	mov	r0, r5
   21b38:	f01b ff9b 	bl	3da72 <cJSON_GetStringValue>
			parsed_cmd->data.sv.value = (double)strtol(
   21b3c:	2210      	movs	r2, #16
   21b3e:	2100      	movs	r1, #0
   21b40:	f018 ffd4 	bl	3aaec <strtol>
   21b44:	f7fa fdce 	bl	1c6e4 <__aeabi_i2d>
   21b48:	e9c4 0102 	strd	r0, r1, [r4, #8]
			break;
   21b4c:	e7b9      	b.n	21ac2 <cloud_cmd_parse_type+0x4e>
	if (!cJSON_IsObject(data_obj)) {
   21b4e:	f01b ff97 	bl	3da80 <cJSON_IsObject>
   21b52:	2800      	cmp	r0, #0
   21b54:	d0cf      	beq.n	21af6 <cloud_cmd_parse_type+0x82>
	blob = json_object_decode(data_obj, MODEM_PARAM_BLOB_KEY_STR);
   21b56:	4919      	ldr	r1, [pc, #100]	; (21bbc <cloud_cmd_parse_type+0x148>)
   21b58:	4628      	mov	r0, r5
   21b5a:	f01a fa5d 	bl	3c018 <json_object_decode>
	params->blob = cJSON_GetStringValue(blob);
   21b5e:	f01b ff88 	bl	3da72 <cJSON_GetStringValue>
	checksum = json_object_decode(data_obj, MODEM_PARAM_CHECKSUM_KEY_STR);
   21b62:	4917      	ldr	r1, [pc, #92]	; (21bc0 <cloud_cmd_parse_type+0x14c>)
	params->blob = cJSON_GetStringValue(blob);
   21b64:	60a0      	str	r0, [r4, #8]
	checksum = json_object_decode(data_obj, MODEM_PARAM_CHECKSUM_KEY_STR);
   21b66:	4628      	mov	r0, r5
   21b68:	f01a fa56 	bl	3c018 <json_object_decode>
	params->checksum = cJSON_GetStringValue(checksum);
   21b6c:	f01b ff81 	bl	3da72 <cJSON_GetStringValue>
			-ESRCH : 0);
   21b70:	68a3      	ldr	r3, [r4, #8]
	params->checksum = cJSON_GetStringValue(checksum);
   21b72:	60e0      	str	r0, [r4, #12]
			-ESRCH : 0);
   21b74:	2b00      	cmp	r3, #0
   21b76:	d0be      	beq.n	21af6 <cloud_cmd_parse_type+0x82>
			if (parsed_cmd->data.data_string == NULL) {
   21b78:	2800      	cmp	r0, #0
   21b7a:	d1a2      	bne.n	21ac2 <cloud_cmd_parse_type+0x4e>
   21b7c:	e7bb      	b.n	21af6 <cloud_cmd_parse_type+0x82>
				cJSON_GetStringValue(type_obj);
   21b7e:	4638      	mov	r0, r7
   21b80:	f01b ff77 	bl	3da72 <cJSON_GetStringValue>
			parsed_cmd->data.data_string =
   21b84:	60a0      	str	r0, [r4, #8]
   21b86:	e7f7      	b.n	21b78 <cloud_cmd_parse_type+0x104>
	} else if (type_cmd->type != CLOUD_CMD_EMPTY) {
   21b88:	2b00      	cmp	r3, #0
   21b8a:	d09a      	beq.n	21ac2 <cloud_cmd_parse_type+0x4e>
		return -EINVAL;
   21b8c:	f06f 0015 	mvn.w	r0, #21
   21b90:	e7b3      	b.n	21afa <cloud_cmd_parse_type+0x86>
		} else if (parsed_cmd->data.sv.value <
   21b92:	2600      	movs	r6, #0
   21b94:	4f0b      	ldr	r7, [pc, #44]	; (21bc4 <cloud_cmd_parse_type+0x150>)
   21b96:	4632      	mov	r2, r6
   21b98:	463b      	mov	r3, r7
   21b9a:	4640      	mov	r0, r8
   21b9c:	4649      	mov	r1, r9
   21b9e:	f7fb f87d 	bl	1cc9c <__aeabi_dcmplt>
   21ba2:	2800      	cmp	r0, #0
   21ba4:	d0a0      	beq.n	21ae8 <cloud_cmd_parse_type+0x74>
			parsed_cmd->data.sv.value = MIN_INTERVAL_VAL_SECONDS;
   21ba6:	e9c4 6702 	strd	r6, r7, [r4, #8]
   21baa:	e79d      	b.n	21ae8 <cloud_cmd_parse_type+0x74>
				return -ENOENT; /* Command not found */
   21bac:	f06f 0001 	mvn.w	r0, #1
   21bb0:	e7a3      	b.n	21afa <cloud_cmd_parse_type+0x86>
			return -ENOTSUP;
   21bb2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21bb6:	e7a0      	b.n	21afa <cloud_cmd_parse_type+0x86>
   21bb8:	00040620 	.word	0x00040620
   21bbc:	00041d30 	.word	0x00041d30
   21bc0:	00041d35 	.word	0x00041d35
   21bc4:	40140000 	.word	0x40140000

00021bc8 <cloud_encode_data>:
{
   21bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21bcc:	4688      	mov	r8, r1
   21bce:	4617      	mov	r7, r2
	if (channel == NULL || channel->data.buf == NULL ||
   21bd0:	4606      	mov	r6, r0
   21bd2:	2800      	cmp	r0, #0
   21bd4:	d04f      	beq.n	21c76 <cloud_encode_data+0xae>
   21bd6:	6843      	ldr	r3, [r0, #4]
   21bd8:	2b00      	cmp	r3, #0
   21bda:	d04c      	beq.n	21c76 <cloud_encode_data+0xae>
   21bdc:	6883      	ldr	r3, [r0, #8]
   21bde:	2b00      	cmp	r3, #0
   21be0:	d049      	beq.n	21c76 <cloud_encode_data+0xae>
	    channel->data.len == 0 || output == NULL ||
   21be2:	2a00      	cmp	r2, #0
   21be4:	d047      	beq.n	21c76 <cloud_encode_data+0xae>
   21be6:	290a      	cmp	r1, #10
   21be8:	d845      	bhi.n	21c76 <cloud_encode_data+0xae>
	cJSON *root_obj = cJSON_CreateObject();
   21bea:	f004 febb 	bl	26964 <cJSON_CreateObject>
	if (root_obj == NULL) {
   21bee:	4605      	mov	r5, r0
   21bf0:	b930      	cbnz	r0, 21c00 <cloud_encode_data+0x38>
		cJSON_Delete(root_obj);
   21bf2:	f004 fdf3 	bl	267dc <cJSON_Delete>
		return -ENOMEM;
   21bf6:	f06f 040b 	mvn.w	r4, #11
}
   21bfa:	4620      	mov	r0, r4
   21bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			   channel_type_str[channel->type]);
   21c00:	7832      	ldrb	r2, [r6, #0]
	json_str = cJSON_CreateString(item);
   21c02:	4b1e      	ldr	r3, [pc, #120]	; (21c7c <cloud_encode_data+0xb4>)
   21c04:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   21c08:	f004 fe88 	bl	2691c <cJSON_CreateString>
	if (json_str == NULL) {
   21c0c:	4602      	mov	r2, r0
   21c0e:	b1c8      	cbz	r0, 21c44 <cloud_encode_data+0x7c>
	cJSON_AddItemToObject(parent, str, item);
   21c10:	491b      	ldr	r1, [pc, #108]	; (21c80 <cloud_encode_data+0xb8>)
   21c12:	4628      	mov	r0, r5
   21c14:	f01b feeb 	bl	3d9ee <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   21c18:	f04f 0900 	mov.w	r9, #0
	json_str = cJSON_CreateString(item);
   21c1c:	6870      	ldr	r0, [r6, #4]
   21c1e:	f004 fe7d 	bl	2691c <cJSON_CreateString>
	if (json_str == NULL) {
   21c22:	4602      	mov	r2, r0
   21c24:	b188      	cbz	r0, 21c4a <cloud_encode_data+0x82>
	cJSON_AddItemToObject(parent, str, item);
   21c26:	4917      	ldr	r1, [pc, #92]	; (21c84 <cloud_encode_data+0xbc>)
   21c28:	4628      	mov	r0, r5
   21c2a:	f01b fee0 	bl	3d9ee <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   21c2e:	2400      	movs	r4, #0
	ret += json_add_str(root_obj, CMD_GROUP_KEY_STR, cmd_group_str[group]);
   21c30:	4b15      	ldr	r3, [pc, #84]	; (21c88 <cloud_encode_data+0xc0>)
	ret += json_add_str(root_obj, CMD_DATA_TYPE_KEY_STR, channel->data.buf);
   21c32:	444c      	add	r4, r9
	json_str = cJSON_CreateString(item);
   21c34:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   21c38:	f004 fe70 	bl	2691c <cJSON_CreateString>
	if (json_str == NULL) {
   21c3c:	4602      	mov	r2, r0
   21c3e:	b938      	cbnz	r0, 21c50 <cloud_encode_data+0x88>
		cJSON_Delete(root_obj);
   21c40:	4628      	mov	r0, r5
   21c42:	e7d6      	b.n	21bf2 <cloud_encode_data+0x2a>
		return -ENOMEM;
   21c44:	f06f 090b 	mvn.w	r9, #11
   21c48:	e7e8      	b.n	21c1c <cloud_encode_data+0x54>
   21c4a:	f06f 040b 	mvn.w	r4, #11
   21c4e:	e7ef      	b.n	21c30 <cloud_encode_data+0x68>
	cJSON_AddItemToObject(parent, str, item);
   21c50:	490e      	ldr	r1, [pc, #56]	; (21c8c <cloud_encode_data+0xc4>)
   21c52:	4628      	mov	r0, r5
   21c54:	f01b fecb 	bl	3d9ee <cJSON_AddItemToObject>
	if (ret != 0) {
   21c58:	2c00      	cmp	r4, #0
   21c5a:	d1f1      	bne.n	21c40 <cloud_encode_data+0x78>
	buffer = cJSON_PrintUnformatted(root_obj);
   21c5c:	4628      	mov	r0, r5
   21c5e:	f01b feac 	bl	3d9ba <cJSON_PrintUnformatted>
   21c62:	4606      	mov	r6, r0
	cJSON_Delete(root_obj);
   21c64:	4628      	mov	r0, r5
   21c66:	f004 fdb9 	bl	267dc <cJSON_Delete>
	output->buf = buffer;
   21c6a:	603e      	str	r6, [r7, #0]
	output->len = strlen(buffer);
   21c6c:	4630      	mov	r0, r6
   21c6e:	f7fb fa59 	bl	1d124 <strlen>
   21c72:	6078      	str	r0, [r7, #4]
	return 0;
   21c74:	e7c1      	b.n	21bfa <cloud_encode_data+0x32>
		return -EINVAL;
   21c76:	f06f 0415 	mvn.w	r4, #21
   21c7a:	e7be      	b.n	21bfa <cloud_encode_data+0x32>
   21c7c:	000405a0 	.word	0x000405a0
   21c80:	00041e00 	.word	0x00041e00
   21c84:	00041486 	.word	0x00041486
   21c88:	000405f4 	.word	0x000405f4
   21c8c:	00041e06 	.word	0x00041e06

00021c90 <cloud_encode_digital_twin_data>:
{
   21c90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21c94:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(channel != NULL);
   21c96:	4606      	mov	r6, r0
   21c98:	b958      	cbnz	r0, 21cb2 <cloud_encode_digital_twin_data+0x22>
   21c9a:	494b      	ldr	r1, [pc, #300]	; (21dc8 <cloud_encode_digital_twin_data+0x138>)
   21c9c:	484b      	ldr	r0, [pc, #300]	; (21dcc <cloud_encode_digital_twin_data+0x13c>)
   21c9e:	f240 1359 	movw	r3, #345	; 0x159
   21ca2:	4a4b      	ldr	r2, [pc, #300]	; (21dd0 <cloud_encode_digital_twin_data+0x140>)
   21ca4:	f01a fc96 	bl	3c5d4 <printk>
   21ca8:	f240 1159 	movw	r1, #345	; 0x159
   21cac:	4848      	ldr	r0, [pc, #288]	; (21dd0 <cloud_encode_digital_twin_data+0x140>)
   21cae:	f01a fcd7 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(channel->data.buf != NULL);
   21cb2:	6873      	ldr	r3, [r6, #4]
   21cb4:	b95b      	cbnz	r3, 21cce <cloud_encode_digital_twin_data+0x3e>
   21cb6:	4947      	ldr	r1, [pc, #284]	; (21dd4 <cloud_encode_digital_twin_data+0x144>)
   21cb8:	4844      	ldr	r0, [pc, #272]	; (21dcc <cloud_encode_digital_twin_data+0x13c>)
   21cba:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   21cbe:	4a44      	ldr	r2, [pc, #272]	; (21dd0 <cloud_encode_digital_twin_data+0x140>)
   21cc0:	f01a fc88 	bl	3c5d4 <printk>
   21cc4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   21cc8:	4841      	ldr	r0, [pc, #260]	; (21dd0 <cloud_encode_digital_twin_data+0x140>)
   21cca:	f01a fcc9 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(channel->data.len != 0);
   21cce:	68b3      	ldr	r3, [r6, #8]
   21cd0:	b95b      	cbnz	r3, 21cea <cloud_encode_digital_twin_data+0x5a>
   21cd2:	4941      	ldr	r1, [pc, #260]	; (21dd8 <cloud_encode_digital_twin_data+0x148>)
   21cd4:	483d      	ldr	r0, [pc, #244]	; (21dcc <cloud_encode_digital_twin_data+0x13c>)
   21cd6:	f240 135b 	movw	r3, #347	; 0x15b
   21cda:	4a3d      	ldr	r2, [pc, #244]	; (21dd0 <cloud_encode_digital_twin_data+0x140>)
   21cdc:	f01a fc7a 	bl	3c5d4 <printk>
   21ce0:	f240 115b 	movw	r1, #347	; 0x15b
   21ce4:	483a      	ldr	r0, [pc, #232]	; (21dd0 <cloud_encode_digital_twin_data+0x140>)
   21ce6:	f01a fcbb 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   21cea:	f1b8 0f00 	cmp.w	r8, #0
   21cee:	d10b      	bne.n	21d08 <cloud_encode_digital_twin_data+0x78>
   21cf0:	493a      	ldr	r1, [pc, #232]	; (21ddc <cloud_encode_digital_twin_data+0x14c>)
   21cf2:	4836      	ldr	r0, [pc, #216]	; (21dcc <cloud_encode_digital_twin_data+0x13c>)
   21cf4:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   21cf8:	4a35      	ldr	r2, [pc, #212]	; (21dd0 <cloud_encode_digital_twin_data+0x140>)
   21cfa:	f01a fc6b 	bl	3c5d4 <printk>
   21cfe:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   21d02:	4833      	ldr	r0, [pc, #204]	; (21dd0 <cloud_encode_digital_twin_data+0x140>)
   21d04:	f01a fcac 	bl	3c660 <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   21d08:	f004 fe2c 	bl	26964 <cJSON_CreateObject>
   21d0c:	4604      	mov	r4, r0
	cJSON *state_obj = cJSON_CreateObject();
   21d0e:	f004 fe29 	bl	26964 <cJSON_CreateObject>
   21d12:	4607      	mov	r7, r0
	cJSON *reported_obj = cJSON_CreateObject();
   21d14:	f004 fe26 	bl	26964 <cJSON_CreateObject>
	char dev_str[] = CLOUD_CHANNEL_STR_DEVICE_INFO;
   21d18:	4b31      	ldr	r3, [pc, #196]	; (21de0 <cloud_encode_digital_twin_data+0x150>)
	cJSON *reported_obj = cJSON_CreateObject();
   21d1a:	4605      	mov	r5, r0
	char dev_str[] = CLOUD_CHANNEL_STR_DEVICE_INFO;
   21d1c:	889a      	ldrh	r2, [r3, #4]
   21d1e:	6818      	ldr	r0, [r3, #0]
   21d20:	799b      	ldrb	r3, [r3, #6]
   21d22:	9000      	str	r0, [sp, #0]
   21d24:	f8ad 2004 	strh.w	r2, [sp, #4]
   21d28:	f88d 3006 	strb.w	r3, [sp, #6]
	if (root_obj == NULL || state_obj == NULL || reported_obj == NULL) {
   21d2c:	b10c      	cbz	r4, 21d32 <cloud_encode_digital_twin_data+0xa2>
   21d2e:	b107      	cbz	r7, 21d32 <cloud_encode_digital_twin_data+0xa2>
   21d30:	b96d      	cbnz	r5, 21d4e <cloud_encode_digital_twin_data+0xbe>
		cJSON_Delete(root_obj);
   21d32:	4620      	mov	r0, r4
   21d34:	f004 fd52 	bl	267dc <cJSON_Delete>
		cJSON_Delete(state_obj);
   21d38:	4638      	mov	r0, r7
   21d3a:	f004 fd4f 	bl	267dc <cJSON_Delete>
		cJSON_Delete(reported_obj);
   21d3e:	4628      	mov	r0, r5
   21d40:	f004 fd4c 	bl	267dc <cJSON_Delete>
		return -ENOMEM;
   21d44:	f06f 000b 	mvn.w	r0, #11
}
   21d48:	b002      	add	sp, #8
   21d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (channel->type == CLOUD_CHANNEL_DEVICE_INFO) {
   21d4e:	7833      	ldrb	r3, [r6, #0]
   21d50:	2b0d      	cmp	r3, #13
   21d52:	d134      	bne.n	21dbe <cloud_encode_digital_twin_data+0x12e>
		cJSON *dummy_obj = cJSON_CreateNull();
   21d54:	f004 fdd6 	bl	26904 <cJSON_CreateNull>
		if (dummy_obj == NULL) {
   21d58:	4602      	mov	r2, r0
   21d5a:	b118      	cbz	r0, 21d64 <cloud_encode_digital_twin_data+0xd4>
	cJSON_AddItemToObject(parent, str, item);
   21d5c:	4669      	mov	r1, sp
   21d5e:	4628      	mov	r0, r5
   21d60:	f01b fe45 	bl	3d9ee <cJSON_AddItemToObject>
	return 0;
   21d64:	466a      	mov	r2, sp
			dev_str[i] = tolower(dev_str[i]);
   21d66:	481f      	ldr	r0, [pc, #124]	; (21de4 <cloud_encode_digital_twin_data+0x154>)
		for (int i = 0; dev_str[i]; ++i) {
   21d68:	f812 3b01 	ldrb.w	r3, [r2], #1
   21d6c:	b9f3      	cbnz	r3, 21dac <cloud_encode_digital_twin_data+0x11c>
		channel_type = dev_str;
   21d6e:	4669      	mov	r1, sp
	cJSON_AddItemToObject(parent, str, item);
   21d70:	4628      	mov	r0, r5
   21d72:	6872      	ldr	r2, [r6, #4]
   21d74:	f01b fe3b 	bl	3d9ee <cJSON_AddItemToObject>
   21d78:	462a      	mov	r2, r5
   21d7a:	491b      	ldr	r1, [pc, #108]	; (21de8 <cloud_encode_digital_twin_data+0x158>)
   21d7c:	4638      	mov	r0, r7
   21d7e:	f01b fe36 	bl	3d9ee <cJSON_AddItemToObject>
   21d82:	463a      	mov	r2, r7
   21d84:	4919      	ldr	r1, [pc, #100]	; (21dec <cloud_encode_digital_twin_data+0x15c>)
   21d86:	4620      	mov	r0, r4
   21d88:	f01b fe31 	bl	3d9ee <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(root_obj);
   21d8c:	4620      	mov	r0, r4
   21d8e:	f01b fe14 	bl	3d9ba <cJSON_PrintUnformatted>
   21d92:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   21d94:	4620      	mov	r0, r4
   21d96:	f004 fd21 	bl	267dc <cJSON_Delete>
	output->buf = buffer;
   21d9a:	f8c8 5000 	str.w	r5, [r8]
	output->len = strlen(buffer);
   21d9e:	4628      	mov	r0, r5
   21da0:	f7fb f9c0 	bl	1d124 <strlen>
   21da4:	f8c8 0004 	str.w	r0, [r8, #4]
	return 0;
   21da8:	2000      	movs	r0, #0
   21daa:	e7cd      	b.n	21d48 <cloud_encode_digital_twin_data+0xb8>
			dev_str[i] = tolower(dev_str[i]);
   21dac:	5cc1      	ldrb	r1, [r0, r3]
   21dae:	f001 0103 	and.w	r1, r1, #3
   21db2:	2901      	cmp	r1, #1
   21db4:	bf08      	it	eq
   21db6:	3320      	addeq	r3, #32
   21db8:	f802 3c01 	strb.w	r3, [r2, #-1]
   21dbc:	e7d4      	b.n	21d68 <cloud_encode_digital_twin_data+0xd8>
		channel_type = channel_type_str[channel->type];
   21dbe:	4a0c      	ldr	r2, [pc, #48]	; (21df0 <cloud_encode_digital_twin_data+0x160>)
   21dc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   21dc4:	e7d4      	b.n	21d70 <cloud_encode_digital_twin_data+0xe0>
   21dc6:	bf00      	nop
   21dc8:	00041e33 	.word	0x00041e33
   21dcc:	00041757 	.word	0x00041757
   21dd0:	00041e12 	.word	0x00041e12
   21dd4:	00041e4a 	.word	0x00041e4a
   21dd8:	00041e6b 	.word	0x00041e6b
   21ddc:	00041e82 	.word	0x00041e82
   21de0:	00041ea7 	.word	0x00041ea7
   21de4:	00046c56 	.word	0x00046c56
   21de8:	00041e98 	.word	0x00041e98
   21dec:	00041ea1 	.word	0x00041ea1
   21df0:	000405a0 	.word	0x000405a0

00021df4 <cloud_decode_command>:
{
   21df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21df8:	b08f      	sub	sp, #60	; 0x3c
	if (input == NULL) {
   21dfa:	2800      	cmp	r0, #0
   21dfc:	f000 8163 	beq.w	220c6 <cloud_decode_command+0x2d2>
	root_obj = cJSON_Parse(input);
   21e00:	f01b fdd7 	bl	3d9b2 <cJSON_Parse>
	if (root_obj == NULL) {
   21e04:	9004      	str	r0, [sp, #16]
   21e06:	b9a8      	cbnz	r0, 21e34 <cloud_decode_command+0x40>
		LOG_ERR("[%s:%d] Unable to parse input", __func__, __LINE__);
   21e08:	2301      	movs	r3, #1
   21e0a:	f04f 0000 	mov.w	r0, #0
   21e0e:	4aaf      	ldr	r2, [pc, #700]	; (220cc <cloud_decode_command+0x2d8>)
   21e10:	f363 0007 	bfi	r0, r3, #0, #8
   21e14:	4bae      	ldr	r3, [pc, #696]	; (220d0 <cloud_decode_command+0x2dc>)
   21e16:	49af      	ldr	r1, [pc, #700]	; (220d4 <cloud_decode_command+0x2e0>)
   21e18:	1a9b      	subs	r3, r3, r2
   21e1a:	08db      	lsrs	r3, r3, #3
   21e1c:	f363 108f 	bfi	r0, r3, #6, #10
   21e20:	4aad      	ldr	r2, [pc, #692]	; (220d8 <cloud_decode_command+0x2e4>)
   21e22:	f240 23c5 	movw	r3, #709	; 0x2c5
   21e26:	f01a fc2c 	bl	3c682 <log_string_sync>
		return -ENOENT;
   21e2a:	f06f 0001 	mvn.w	r0, #1
}
   21e2e:	b00f      	add	sp, #60	; 0x3c
   21e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e34:	4ea9      	ldr	r6, [pc, #676]	; (220dc <cloud_decode_command+0x2e8>)
	for (int i = 0; i < ARRAY_SIZE(cmd_groups); ++i) {
   21e36:	2400      	movs	r4, #0
   21e38:	4635      	mov	r5, r6
		group_obj = json_object_decode(root_obj, cmd_groups[i]->key);
   21e3a:	f856 3b04 	ldr.w	r3, [r6], #4
   21e3e:	9804      	ldr	r0, [sp, #16]
   21e40:	6819      	ldr	r1, [r3, #0]
   21e42:	f01a f8e9 	bl	3c018 <json_object_decode>
		if ((group_obj != NULL) &&
   21e46:	b1f8      	cbz	r0, 21e88 <cloud_decode_command+0x94>
					cmd_group_str[cmd_groups[i]->group]))) {
   21e48:	f856 3c04 	ldr.w	r3, [r6, #-4]
			(json_value_string_compare(group_obj,
   21e4c:	4aa4      	ldr	r2, [pc, #656]	; (220e0 <cloud_decode_command+0x2ec>)
					cmd_group_str[cmd_groups[i]->group]))) {
   21e4e:	791b      	ldrb	r3, [r3, #4]
			(json_value_string_compare(group_obj,
   21e50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   21e54:	f01a f8d1 	bl	3bffa <json_value_string_compare>
		if ((group_obj != NULL) &&
   21e58:	b1b0      	cbz	r0, 21e88 <cloud_decode_command+0x94>
			group = cmd_groups[i];
   21e5a:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
	if (group == NULL) {
   21e5e:	b9bd      	cbnz	r5, 21e90 <cloud_decode_command+0x9c>
	state_obj = cJSON_GetObjectItem(root_obj, "state");
   21e60:	49a0      	ldr	r1, [pc, #640]	; (220e4 <cloud_decode_command+0x2f0>)
   21e62:	9804      	ldr	r0, [sp, #16]
   21e64:	f01b fdb4 	bl	3d9d0 <cJSON_GetObjectItem>
	config_obj = cJSON_DetachItemFromObject(
   21e68:	9b04      	ldr	r3, [sp, #16]
   21e6a:	499f      	ldr	r1, [pc, #636]	; (220e8 <cloud_decode_command+0x2f4>)
   21e6c:	2800      	cmp	r0, #0
   21e6e:	bf08      	it	eq
   21e70:	4618      	moveq	r0, r3
   21e72:	f01b fdd3 	bl	3da1c <cJSON_DetachItemFromObject>
	if (config_obj == NULL) {
   21e76:	4607      	mov	r7, r0
   21e78:	2800      	cmp	r0, #0
   21e7a:	f040 80a1 	bne.w	21fc0 <cloud_decode_command+0x1cc>
	cJSON_Delete(root_obj);
   21e7e:	9804      	ldr	r0, [sp, #16]
   21e80:	f004 fcac 	bl	267dc <cJSON_Delete>
	return 0;
   21e84:	2000      	movs	r0, #0
   21e86:	e7d2      	b.n	21e2e <cloud_decode_command+0x3a>
	for (int i = 0; i < ARRAY_SIZE(cmd_groups); ++i) {
   21e88:	3401      	adds	r4, #1
   21e8a:	2c04      	cmp	r4, #4
   21e8c:	d1d5      	bne.n	21e3a <cloud_decode_command+0x46>
   21e8e:	e7e7      	b.n	21e60 <cloud_decode_command+0x6c>
	cmd_parsed.group = group->group;
   21e90:	4b96      	ldr	r3, [pc, #600]	; (220ec <cloud_decode_command+0x2f8>)
	for (size_t j = 0; j < group->num_children; ++j) {
   21e92:	2600      	movs	r6, #0
   21e94:	4699      	mov	r9, r3
	cmd_parsed.group = group->group;
   21e96:	792a      	ldrb	r2, [r5, #4]
   21e98:	701a      	strb	r2, [r3, #0]
	for (size_t j = 0; j < group->num_children; ++j) {
   21e9a:	68eb      	ldr	r3, [r5, #12]
   21e9c:	429e      	cmp	r6, r3
   21e9e:	d2df      	bcs.n	21e60 <cloud_decode_command+0x6c>
			json_object_decode(root_obj, group->children[j].key);
   21ea0:	68ab      	ldr	r3, [r5, #8]
   21ea2:	0134      	lsls	r4, r6, #4
   21ea4:	5919      	ldr	r1, [r3, r4]
   21ea6:	9804      	ldr	r0, [sp, #16]
   21ea8:	f01a f8b6 	bl	3c018 <json_object_decode>
		if ((channel_obj != NULL) &&
   21eac:	2800      	cmp	r0, #0
   21eae:	d04f      	beq.n	21f50 <cloud_decode_command+0x15c>
			    channel_type_str[group->children[j].channel]))) {
   21eb0:	68ab      	ldr	r3, [r5, #8]
		    (json_value_string_compare(
   21eb2:	4a8f      	ldr	r2, [pc, #572]	; (220f0 <cloud_decode_command+0x2fc>)
			    channel_type_str[group->children[j].channel]))) {
   21eb4:	4423      	add	r3, r4
   21eb6:	791b      	ldrb	r3, [r3, #4]
		    (json_value_string_compare(
   21eb8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   21ebc:	f01a f89d 	bl	3bffa <json_value_string_compare>
		if ((channel_obj != NULL) &&
   21ec0:	2800      	cmp	r0, #0
   21ec2:	d045      	beq.n	21f50 <cloud_decode_command+0x15c>
			chan = &group->children[j];
   21ec4:	68ab      	ldr	r3, [r5, #8]
	if (chan == NULL) {
   21ec6:	191c      	adds	r4, r3, r4
   21ec8:	d0ca      	beq.n	21e60 <cloud_decode_command+0x6c>
	for (size_t k = 0; k < chan->num_children; ++k) {
   21eca:	2600      	movs	r6, #0
	cmd_parsed.channel = chan->channel;
   21ecc:	7923      	ldrb	r3, [r4, #4]
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   21ece:	4a7f      	ldr	r2, [pc, #508]	; (220cc <cloud_decode_command+0x2d8>)
	cmd_parsed.channel = chan->channel;
   21ed0:	f889 3001 	strb.w	r3, [r9, #1]
   21ed4:	4b7e      	ldr	r3, [pc, #504]	; (220d0 <cloud_decode_command+0x2dc>)
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   21ed6:	1a9b      	subs	r3, r3, r2
   21ed8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   21edc:	9305      	str	r3, [sp, #20]
	for (size_t k = 0; k < chan->num_children; ++k) {
   21ede:	68e3      	ldr	r3, [r4, #12]
   21ee0:	429e      	cmp	r6, r3
   21ee2:	d2bd      	bcs.n	21e60 <cloud_decode_command+0x6c>
		type = &chan->children[k];
   21ee4:	68a1      	ldr	r1, [r4, #8]
   21ee6:	0132      	lsls	r2, r6, #4
   21ee8:	188b      	adds	r3, r1, r2
		type_obj = json_object_decode(root_obj, type->key);
   21eea:	9804      	ldr	r0, [sp, #16]
   21eec:	5889      	ldr	r1, [r1, r2]
		type = &chan->children[k];
   21eee:	9306      	str	r3, [sp, #24]
		type_obj = json_object_decode(root_obj, type->key);
   21ef0:	f01a f892 	bl	3c018 <json_object_decode>
		ret = cloud_cmd_parse_type(type, type_obj, &cmd_parsed);
   21ef4:	9b06      	ldr	r3, [sp, #24]
   21ef6:	4601      	mov	r1, r0
   21ef8:	4a7c      	ldr	r2, [pc, #496]	; (220ec <cloud_decode_command+0x2f8>)
   21efa:	4618      	mov	r0, r3
   21efc:	f7ff fdba 	bl	21a74 <cloud_cmd_parse_type>
		if (ret != 0) {
   21f00:	b340      	cbz	r0, 21f54 <cloud_decode_command+0x160>
			if (ret != -ENOENT) {
   21f02:	1c81      	adds	r1, r0, #2
   21f04:	9007      	str	r0, [sp, #28]
   21f06:	d021      	beq.n	21f4c <cloud_decode_command+0x158>
				LOG_ERR("[%s:%d] Unhandled cmd format for %s, %s, error %d",
   21f08:	f027 023f 	bic.w	r2, r7, #63	; 0x3f
   21f0c:	9b05      	ldr	r3, [sp, #20]
   21f0e:	f042 0201 	orr.w	r2, r2, #1
   21f12:	f362 0707 	bfi	r7, r2, #0, #8
   21f16:	f363 178f 	bfi	r7, r3, #6, #10
   21f1a:	792a      	ldrb	r2, [r5, #4]
   21f1c:	4b70      	ldr	r3, [pc, #448]	; (220e0 <cloud_decode_command+0x2ec>)
   21f1e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   21f22:	f01a fbc0 	bl	3c6a6 <log_strdup>
   21f26:	7921      	ldrb	r1, [r4, #4]
   21f28:	4b71      	ldr	r3, [pc, #452]	; (220f0 <cloud_decode_command+0x2fc>)
   21f2a:	9006      	str	r0, [sp, #24]
   21f2c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   21f30:	f01a fbb9 	bl	3c6a6 <log_strdup>
   21f34:	9b07      	ldr	r3, [sp, #28]
   21f36:	9a06      	ldr	r2, [sp, #24]
   21f38:	e9cd 0301 	strd	r0, r3, [sp, #4]
   21f3c:	9200      	str	r2, [sp, #0]
   21f3e:	f240 235d 	movw	r3, #605	; 0x25d
   21f42:	4a6c      	ldr	r2, [pc, #432]	; (220f4 <cloud_decode_command+0x300>)
   21f44:	496c      	ldr	r1, [pc, #432]	; (220f8 <cloud_decode_command+0x304>)
   21f46:	4638      	mov	r0, r7
   21f48:	f01a fb9b 	bl	3c682 <log_string_sync>
	for (size_t k = 0; k < chan->num_children; ++k) {
   21f4c:	3601      	adds	r6, #1
   21f4e:	e7c6      	b.n	21ede <cloud_decode_command+0xea>
	for (size_t j = 0; j < group->num_children; ++j) {
   21f50:	3601      	adds	r6, #1
   21f52:	e7a2      	b.n	21e9a <cloud_decode_command+0xa6>
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   21f54:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   21f58:	f043 0303 	orr.w	r3, r3, #3
   21f5c:	f363 0807 	bfi	r8, r3, #0, #8
   21f60:	9b05      	ldr	r3, [sp, #20]
   21f62:	4a5f      	ldr	r2, [pc, #380]	; (220e0 <cloud_decode_command+0x2ec>)
   21f64:	f363 188f 	bfi	r8, r3, #6, #10
   21f68:	f899 3000 	ldrb.w	r3, [r9]
   21f6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   21f70:	f01a fb99 	bl	3c6a6 <log_strdup>
   21f74:	f899 2001 	ldrb.w	r2, [r9, #1]
   21f78:	4b5d      	ldr	r3, [pc, #372]	; (220f0 <cloud_decode_command+0x2fc>)
   21f7a:	9007      	str	r0, [sp, #28]
   21f7c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   21f80:	f01a fb91 	bl	3c6a6 <log_strdup>
   21f84:	f899 1002 	ldrb.w	r1, [r9, #2]
   21f88:	4b5c      	ldr	r3, [pc, #368]	; (220fc <cloud_decode_command+0x308>)
   21f8a:	9006      	str	r0, [sp, #24]
   21f8c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   21f90:	f01a fb89 	bl	3c6a6 <log_strdup>
   21f94:	9a06      	ldr	r2, [sp, #24]
   21f96:	9b07      	ldr	r3, [sp, #28]
   21f98:	9002      	str	r0, [sp, #8]
   21f9a:	9201      	str	r2, [sp, #4]
   21f9c:	9300      	str	r3, [sp, #0]
   21f9e:	4a55      	ldr	r2, [pc, #340]	; (220f4 <cloud_decode_command+0x300>)
   21fa0:	f240 2365 	movw	r3, #613	; 0x265
   21fa4:	4956      	ldr	r1, [pc, #344]	; (22100 <cloud_decode_command+0x30c>)
   21fa6:	4640      	mov	r0, r8
   21fa8:	f01a fb6b 	bl	3c682 <log_string_sync>
		(void)cloud_cmd_handle_sensor_set_chan_cfg(&cmd_parsed);
   21fac:	484f      	ldr	r0, [pc, #316]	; (220ec <cloud_decode_command+0x2f8>)
   21fae:	f7ff fd0b 	bl	219c8 <cloud_cmd_handle_sensor_set_chan_cfg>
		if (cloud_command_cb) {
   21fb2:	4b54      	ldr	r3, [pc, #336]	; (22104 <cloud_decode_command+0x310>)
   21fb4:	681b      	ldr	r3, [r3, #0]
   21fb6:	2b00      	cmp	r3, #0
   21fb8:	d0c8      	beq.n	21f4c <cloud_decode_command+0x158>
			cloud_command_cb(&cmd_parsed);
   21fba:	484c      	ldr	r0, [pc, #304]	; (220ec <cloud_decode_command+0x2f8>)
   21fbc:	4798      	blx	r3
   21fbe:	e7c5      	b.n	21f4c <cloud_decode_command+0x158>
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   21fc0:	2500      	movs	r5, #0
   21fc2:	4b43      	ldr	r3, [pc, #268]	; (220d0 <cloud_decode_command+0x2dc>)
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   21fc4:	4a41      	ldr	r2, [pc, #260]	; (220cc <cloud_decode_command+0x2d8>)
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   21fc6:	f8df 814c 	ldr.w	r8, [pc, #332]	; 22114 <cloud_decode_command+0x320>
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   21fca:	1a9b      	subs	r3, r3, r2
   21fcc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
		cJSON *channel_obj = json_object_decode(
   21fd0:	f8df 911c 	ldr.w	r9, [pc, #284]	; 220f0 <cloud_decode_command+0x2fc>
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   21fd4:	9306      	str	r3, [sp, #24]
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   21fd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   21fda:	429d      	cmp	r5, r3
   21fdc:	d303      	bcc.n	21fe6 <cloud_decode_command+0x1f2>
	cJSON_Delete(config_obj);
   21fde:	4638      	mov	r0, r7
   21fe0:	f004 fbfc 	bl	267dc <cJSON_Delete>
	return 0;
   21fe4:	e74b      	b.n	21e7e <cloud_decode_command+0x8a>
		struct cloud_command found_config_item = {
   21fe6:	2218      	movs	r2, #24
   21fe8:	2100      	movs	r1, #0
   21fea:	a808      	add	r0, sp, #32
   21fec:	f01c fe8d 	bl	3ed0a <memset>
   21ff0:	2308      	movs	r3, #8
   21ff2:	f88d 3020 	strb.w	r3, [sp, #32]
			channel_type_str[group->children[ch].channel]);
   21ff6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21ffa:	012c      	lsls	r4, r5, #4
   21ffc:	4423      	add	r3, r4
   21ffe:	791b      	ldrb	r3, [r3, #4]
		cJSON *channel_obj = json_object_decode(
   22000:	4638      	mov	r0, r7
   22002:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
   22006:	f01a f807 	bl	3c018 <json_object_decode>
		if (channel_obj == NULL) {
   2200a:	9005      	str	r0, [sp, #20]
   2200c:	b908      	cbnz	r0, 22012 <cloud_decode_command+0x21e>
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   2200e:	3501      	adds	r5, #1
   22010:	e7e1      	b.n	21fd6 <cloud_decode_command+0x1e2>
		for (size_t type = 0; type < chan->num_children; ++type) {
   22012:	2600      	movs	r6, #0
		struct cmd *chan = &group->children[ch];
   22014:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22018:	441c      	add	r4, r3
		found_config_item.channel = chan->channel;
   2201a:	7923      	ldrb	r3, [r4, #4]
   2201c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		for (size_t type = 0; type < chan->num_children; ++type) {
   22020:	68e3      	ldr	r3, [r4, #12]
   22022:	429e      	cmp	r6, r3
   22024:	d2f3      	bcs.n	2200e <cloud_decode_command+0x21a>
			int ret = cloud_cmd_parse_type(&chan->children[type],
   22026:	68a0      	ldr	r0, [r4, #8]
   22028:	aa08      	add	r2, sp, #32
   2202a:	9905      	ldr	r1, [sp, #20]
   2202c:	eb00 1006 	add.w	r0, r0, r6, lsl #4
   22030:	f7ff fd20 	bl	21a74 <cloud_cmd_parse_type>
			if (ret != 0) {
   22034:	b1e0      	cbz	r0, 22070 <cloud_decode_command+0x27c>
				if (ret != -ENOENT) {
   22036:	1c82      	adds	r2, r0, #2
   22038:	9007      	str	r0, [sp, #28]
   2203a:	d017      	beq.n	2206c <cloud_decode_command+0x278>
					LOG_ERR("[%s:%d] Unhandled cfg format for %s, error %d",
   2203c:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
   22040:	f042 0201 	orr.w	r2, r2, #1
   22044:	f362 0b07 	bfi	fp, r2, #0, #8
   22048:	7922      	ldrb	r2, [r4, #4]
   2204a:	9b06      	ldr	r3, [sp, #24]
   2204c:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
   22050:	f363 1b8f 	bfi	fp, r3, #6, #10
   22054:	f01a fb27 	bl	3c6a6 <log_strdup>
   22058:	9b07      	ldr	r3, [sp, #28]
   2205a:	4a2b      	ldr	r2, [pc, #172]	; (22108 <cloud_decode_command+0x314>)
   2205c:	e9cd 0300 	strd	r0, r3, [sp]
   22060:	492a      	ldr	r1, [pc, #168]	; (2210c <cloud_decode_command+0x318>)
   22062:	f240 23a1 	movw	r3, #673	; 0x2a1
   22066:	4658      	mov	r0, fp
   22068:	f01a fb0b 	bl	3c682 <log_string_sync>
		for (size_t type = 0; type < chan->num_children; ++type) {
   2206c:	3601      	adds	r6, #1
   2206e:	e7d7      	b.n	22020 <cloud_decode_command+0x22c>
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   22070:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   22074:	f043 0303 	orr.w	r3, r3, #3
   22078:	f363 0a07 	bfi	sl, r3, #0, #8
   2207c:	9b06      	ldr	r3, [sp, #24]
   2207e:	f363 1a8f 	bfi	sl, r3, #6, #10
   22082:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   22086:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
   2208a:	f01a fb0c 	bl	3c6a6 <log_strdup>
   2208e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   22092:	4b1a      	ldr	r3, [pc, #104]	; (220fc <cloud_decode_command+0x308>)
   22094:	9007      	str	r0, [sp, #28]
   22096:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2209a:	f01a fb04 	bl	3c6a6 <log_strdup>
   2209e:	9b07      	ldr	r3, [sp, #28]
   220a0:	9001      	str	r0, [sp, #4]
   220a2:	9300      	str	r3, [sp, #0]
   220a4:	4a18      	ldr	r2, [pc, #96]	; (22108 <cloud_decode_command+0x314>)
   220a6:	f240 23a9 	movw	r3, #681	; 0x2a9
   220aa:	4919      	ldr	r1, [pc, #100]	; (22110 <cloud_decode_command+0x31c>)
   220ac:	4650      	mov	r0, sl
   220ae:	f01a fae8 	bl	3c682 <log_string_sync>
			(void)cloud_cmd_handle_sensor_set_chan_cfg(
   220b2:	a808      	add	r0, sp, #32
   220b4:	f7ff fc88 	bl	219c8 <cloud_cmd_handle_sensor_set_chan_cfg>
			if (cloud_command_cb) {
   220b8:	4b12      	ldr	r3, [pc, #72]	; (22104 <cloud_decode_command+0x310>)
   220ba:	681b      	ldr	r3, [r3, #0]
   220bc:	2b00      	cmp	r3, #0
   220be:	d0d5      	beq.n	2206c <cloud_decode_command+0x278>
				cloud_command_cb(&found_config_item);
   220c0:	a808      	add	r0, sp, #32
   220c2:	4798      	blx	r3
   220c4:	e7d2      	b.n	2206c <cloud_decode_command+0x278>
		return -EINVAL;
   220c6:	f06f 0015 	mvn.w	r0, #21
   220ca:	e6b0      	b.n	21e2e <cloud_decode_command+0x3a>
   220cc:	000402cc 	.word	0x000402cc
   220d0:	0004030c 	.word	0x0004030c
   220d4:	00041d3e 	.word	0x00041d3e
   220d8:	00041d1b 	.word	0x00041d1b
   220dc:	200314b0 	.word	0x200314b0
   220e0:	000405f4 	.word	0x000405f4
   220e4:	00041ea1 	.word	0x00041ea1
   220e8:	00041dac 	.word	0x00041dac
   220ec:	20020938 	.word	0x20020938
   220f0:	000405a0 	.word	0x000405a0
   220f4:	00041cf6 	.word	0x00041cf6
   220f8:	00041d5c 	.word	0x00041d5c
   220fc:	00040620 	.word	0x00040620
   22100:	00041d8e 	.word	0x00041d8e
   22104:	200239c8 	.word	0x200239c8
   22108:	00041d07 	.word	0x00041d07
   2210c:	00041db3 	.word	0x00041db3
   22110:	00041de1 	.word	0x00041de1
   22114:	200314c0 	.word	0x200314c0

00022118 <cloud_decode_init>:
	cloud_command_cb = cb;
   22118:	4b01      	ldr	r3, [pc, #4]	; (22120 <cloud_decode_init+0x8>)
   2211a:	6018      	str	r0, [r3, #0]
}
   2211c:	2000      	movs	r0, #0
   2211e:	4770      	bx	lr
   22120:	200239c8 	.word	0x200239c8

00022124 <cloud_encode_env_sensors_data>:
{
   22124:	b570      	push	{r4, r5, r6, lr}
   22126:	460d      	mov	r5, r1
   22128:	b088      	sub	sp, #32
	__ASSERT_NO_MSG(sensor_data != NULL);
   2212a:	4604      	mov	r4, r0
   2212c:	b958      	cbnz	r0, 22146 <cloud_encode_env_sensors_data+0x22>
   2212e:	4920      	ldr	r1, [pc, #128]	; (221b0 <cloud_encode_env_sensors_data+0x8c>)
   22130:	4820      	ldr	r0, [pc, #128]	; (221b4 <cloud_encode_env_sensors_data+0x90>)
   22132:	f44f 7337 	mov.w	r3, #732	; 0x2dc
   22136:	4a20      	ldr	r2, [pc, #128]	; (221b8 <cloud_encode_env_sensors_data+0x94>)
   22138:	f01a fa4c 	bl	3c5d4 <printk>
   2213c:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   22140:	481d      	ldr	r0, [pc, #116]	; (221b8 <cloud_encode_env_sensors_data+0x94>)
   22142:	f01a fa8d 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   22146:	b95d      	cbnz	r5, 22160 <cloud_encode_env_sensors_data+0x3c>
   22148:	491c      	ldr	r1, [pc, #112]	; (221bc <cloud_encode_env_sensors_data+0x98>)
   2214a:	481a      	ldr	r0, [pc, #104]	; (221b4 <cloud_encode_env_sensors_data+0x90>)
   2214c:	f240 23dd 	movw	r3, #733	; 0x2dd
   22150:	4a19      	ldr	r2, [pc, #100]	; (221b8 <cloud_encode_env_sensors_data+0x94>)
   22152:	f01a fa3f 	bl	3c5d4 <printk>
   22156:	f240 21dd 	movw	r1, #733	; 0x2dd
   2215a:	4817      	ldr	r0, [pc, #92]	; (221b8 <cloud_encode_env_sensors_data+0x94>)
   2215c:	f01a fa80 	bl	3c660 <assert_post_action>
	switch (sensor_data->type) {
   22160:	7823      	ldrb	r3, [r4, #0]
   22162:	2b03      	cmp	r3, #3
   22164:	d820      	bhi.n	221a8 <cloud_encode_env_sensors_data+0x84>
   22166:	e8df f003 	tbb	[pc, r3]
   2216a:	1902      	.short	0x1902
   2216c:	1d1b      	.short	0x1d1b
		cloud_sensor.type = CLOUD_CHANNEL_TEMP;
   2216e:	2308      	movs	r3, #8
	len = snprintf(buf, sizeof(buf), "%.1f",
   22170:	ae02      	add	r6, sp, #8
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   22172:	f88d 3010 	strb.w	r3, [sp, #16]
	len = snprintf(buf, sizeof(buf), "%.1f",
   22176:	2106      	movs	r1, #6
   22178:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2217c:	4630      	mov	r0, r6
   2217e:	e9cd 2300 	strd	r2, r3, [sp]
   22182:	4a0f      	ldr	r2, [pc, #60]	; (221c0 <cloud_encode_env_sensors_data+0x9c>)
   22184:	f018 fbd0 	bl	3a928 <sniprintf>
	cloud_sensor.data.len = len;
   22188:	b2c0      	uxtb	r0, r0
   2218a:	9006      	str	r0, [sp, #24]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   2218c:	462a      	mov	r2, r5
   2218e:	2106      	movs	r1, #6
   22190:	a804      	add	r0, sp, #16
	cloud_sensor.data.buf = buf;
   22192:	9605      	str	r6, [sp, #20]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22194:	f7ff fd18 	bl	21bc8 <cloud_encode_data>
}
   22198:	b008      	add	sp, #32
   2219a:	bd70      	pop	{r4, r5, r6, pc}
		cloud_sensor.type = CLOUD_CHANNEL_HUMID;
   2219c:	2309      	movs	r3, #9
   2219e:	e7e7      	b.n	22170 <cloud_encode_env_sensors_data+0x4c>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_PRESS;
   221a0:	230a      	movs	r3, #10
   221a2:	e7e5      	b.n	22170 <cloud_encode_env_sensors_data+0x4c>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   221a4:	230b      	movs	r3, #11
   221a6:	e7e3      	b.n	22170 <cloud_encode_env_sensors_data+0x4c>
		return -1;
   221a8:	f04f 30ff 	mov.w	r0, #4294967295
   221ac:	e7f4      	b.n	22198 <cloud_encode_env_sensors_data+0x74>
   221ae:	bf00      	nop
   221b0:	00041eae 	.word	0x00041eae
   221b4:	00041757 	.word	0x00041757
   221b8:	00041e12 	.word	0x00041e12
   221bc:	00041e82 	.word	0x00041e82
   221c0:	00041ec9 	.word	0x00041ec9

000221c4 <cloud_encode_motion_data>:
{
   221c4:	b530      	push	{r4, r5, lr}
   221c6:	460c      	mov	r4, r1
   221c8:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(motion_data != NULL);
   221ca:	4605      	mov	r5, r0
   221cc:	b958      	cbnz	r0, 221e6 <cloud_encode_motion_data+0x22>
   221ce:	4918      	ldr	r1, [pc, #96]	; (22230 <cloud_encode_motion_data+0x6c>)
   221d0:	4818      	ldr	r0, [pc, #96]	; (22234 <cloud_encode_motion_data+0x70>)
   221d2:	f240 3303 	movw	r3, #771	; 0x303
   221d6:	4a18      	ldr	r2, [pc, #96]	; (22238 <cloud_encode_motion_data+0x74>)
   221d8:	f01a f9fc 	bl	3c5d4 <printk>
   221dc:	f240 3103 	movw	r1, #771	; 0x303
   221e0:	4815      	ldr	r0, [pc, #84]	; (22238 <cloud_encode_motion_data+0x74>)
   221e2:	f01a fa3d 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   221e6:	b95c      	cbnz	r4, 22200 <cloud_encode_motion_data+0x3c>
   221e8:	4914      	ldr	r1, [pc, #80]	; (2223c <cloud_encode_motion_data+0x78>)
   221ea:	4812      	ldr	r0, [pc, #72]	; (22234 <cloud_encode_motion_data+0x70>)
   221ec:	f44f 7341 	mov.w	r3, #772	; 0x304
   221f0:	4a11      	ldr	r2, [pc, #68]	; (22238 <cloud_encode_motion_data+0x74>)
   221f2:	f01a f9ef 	bl	3c5d4 <printk>
   221f6:	f44f 7141 	mov.w	r1, #772	; 0x304
   221fa:	480f      	ldr	r0, [pc, #60]	; (22238 <cloud_encode_motion_data+0x74>)
   221fc:	f01a fa30 	bl	3c660 <assert_post_action>
	cloud_sensor.type = CLOUD_CHANNEL_FLIP;
   22200:	2301      	movs	r3, #1
   22202:	f88d 3000 	strb.w	r3, [sp]
	switch (motion_data->orientation) {
   22206:	782b      	ldrb	r3, [r5, #0]
   22208:	2b01      	cmp	r3, #1
   2220a:	d005      	beq.n	22218 <cloud_encode_motion_data+0x54>
   2220c:	2b02      	cmp	r3, #2
   2220e:	d00d      	beq.n	2222c <cloud_encode_motion_data+0x68>
		return -1;
   22210:	f04f 30ff 	mov.w	r0, #4294967295
}
   22214:	b005      	add	sp, #20
   22216:	bd30      	pop	{r4, r5, pc}
		cloud_sensor.data.buf = "NORMAL";
   22218:	4b09      	ldr	r3, [pc, #36]	; (22240 <cloud_encode_motion_data+0x7c>)
		cloud_sensor.data.buf = "UPSIDE_DOWN";
   2221a:	9301      	str	r3, [sp, #4]
	cloud_sensor.data.len = sizeof(cloud_sensor.data.buf) - 1;
   2221c:	2303      	movs	r3, #3
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   2221e:	4622      	mov	r2, r4
   22220:	2106      	movs	r1, #6
   22222:	4668      	mov	r0, sp
	cloud_sensor.data.len = sizeof(cloud_sensor.data.buf) - 1;
   22224:	9302      	str	r3, [sp, #8]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22226:	f7ff fccf 	bl	21bc8 <cloud_encode_data>
   2222a:	e7f3      	b.n	22214 <cloud_encode_motion_data+0x50>
		cloud_sensor.data.buf = "UPSIDE_DOWN";
   2222c:	4b05      	ldr	r3, [pc, #20]	; (22244 <cloud_encode_motion_data+0x80>)
   2222e:	e7f4      	b.n	2221a <cloud_encode_motion_data+0x56>
   22230:	00041ece 	.word	0x00041ece
   22234:	00041757 	.word	0x00041757
   22238:	00041e12 	.word	0x00041e12
   2223c:	00041e82 	.word	0x00041e82
   22240:	00041ee9 	.word	0x00041ee9
   22244:	00041ef0 	.word	0x00041ef0

00022248 <cloud_is_send_allowed>:
{
   22248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (sensor_cfg[i].chan == channel) {
   2224c:	4c23      	ldr	r4, [pc, #140]	; (222dc <cloud_is_send_allowed+0x94>)
{
   2224e:	ec57 6b10 	vmov	r6, r7, d0
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   22252:	2500      	movs	r5, #0
		if (sensor_cfg[i].chan == channel) {
   22254:	2230      	movs	r2, #48	; 0x30
   22256:	46a2      	mov	sl, r4
   22258:	fb02 f305 	mul.w	r3, r2, r5
   2225c:	5d19      	ldrb	r1, [r3, r4]
   2225e:	4281      	cmp	r1, r0
   22260:	d12a      	bne.n	222b8 <cloud_is_send_allowed+0x70>
	    (!cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE])) {
   22262:	441c      	add	r4, r3
	if ((cfg == NULL) ||
   22264:	2200      	movs	r2, #0
   22266:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   2226a:	2300      	movs	r3, #0
   2226c:	f7fa fd0c 	bl	1cc88 <__aeabi_dcmpeq>
   22270:	bb28      	cbnz	r0, 222be <cloud_is_send_allowed+0x76>
	if (((cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE]) &&
   22272:	e9d4 8906 	ldrd	r8, r9, [r4, #24]
   22276:	2200      	movs	r2, #0
   22278:	2300      	movs	r3, #0
   2227a:	4640      	mov	r0, r8
   2227c:	4649      	mov	r1, r9
   2227e:	f7fa fd03 	bl	1cc88 <__aeabi_dcmpeq>
   22282:	b930      	cbnz	r0, 22292 <cloud_is_send_allowed+0x4a>
   22284:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   22288:	4630      	mov	r0, r6
   2228a:	4639      	mov	r1, r7
   2228c:	f7fa fd06 	bl	1cc9c <__aeabi_dcmplt>
   22290:	b9b8      	cbnz	r0, 222c2 <cloud_is_send_allowed+0x7a>
	if (((cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_HIGH_ENABLE]) &&
   22292:	2330      	movs	r3, #48	; 0x30
   22294:	fb03 a505 	mla	r5, r3, r5, sl
   22298:	2200      	movs	r2, #0
   2229a:	e9d5 010a 	ldrd	r0, r1, [r5, #40]	; 0x28
   2229e:	2300      	movs	r3, #0
   222a0:	f7fa fcf2 	bl	1cc88 <__aeabi_dcmpeq>
   222a4:	b978      	cbnz	r0, 222c6 <cloud_is_send_allowed+0x7e>
   222a6:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
   222aa:	4630      	mov	r0, r6
   222ac:	4639      	mov	r1, r7
   222ae:	f7fa fd13 	bl	1ccd8 <__aeabi_dcmpgt>
   222b2:	b930      	cbnz	r0, 222c2 <cloud_is_send_allowed+0x7a>
}
   222b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   222b8:	3501      	adds	r5, #1
   222ba:	2d08      	cmp	r5, #8
   222bc:	d1cc      	bne.n	22258 <cloud_is_send_allowed+0x10>
		return false;
   222be:	2000      	movs	r0, #0
   222c0:	e7f8      	b.n	222b4 <cloud_is_send_allowed+0x6c>
		return true;
   222c2:	2001      	movs	r0, #1
   222c4:	e7f6      	b.n	222b4 <cloud_is_send_allowed+0x6c>
	return (!cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE] &&
   222c6:	2200      	movs	r2, #0
   222c8:	2300      	movs	r3, #0
   222ca:	4640      	mov	r0, r8
   222cc:	4649      	mov	r1, r9
   222ce:	f7fa fcdb 	bl	1cc88 <__aeabi_dcmpeq>
   222d2:	3000      	adds	r0, #0
   222d4:	bf18      	it	ne
   222d6:	2001      	movne	r0, #1
   222d8:	e7ec      	b.n	222b4 <cloud_is_send_allowed+0x6c>
   222da:	bf00      	nop
   222dc:	20030fa0 	.word	0x20030fa0

000222e0 <service_info_json_object_encode>:
}

int service_info_json_object_encode(
	const char * const ui[], const u32_t ui_count, const char * const fota[],
	const u32_t fota_count, const u16_t fota_version, cJSON * const obj_out)
{
   222e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   222e4:	b087      	sub	sp, #28
   222e6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   222e8:	4604      	mov	r4, r0
   222ea:	4689      	mov	r9, r1
   222ec:	4617      	mov	r7, r2
   222ee:	4698      	mov	r8, r3
	int err = 0;
	cJSON *service_info_obj = NULL;
	char fota_name[FOTAS_JSON_NAME_SIZE];

	if ((obj_out == NULL) || ((ui == NULL) && ui_count) ||
   222f0:	b386      	cbz	r6, 22354 <service_info_json_object_encode+0x74>
   222f2:	b900      	cbnz	r0, 222f6 <service_info_json_object_encode+0x16>
   222f4:	bb71      	cbnz	r1, 22354 <service_info_json_object_encode+0x74>
   222f6:	b917      	cbnz	r7, 222fe <service_info_json_object_encode+0x1e>
	    ((fota == NULL) && fota_count)) {
   222f8:	f1b8 0f00 	cmp.w	r8, #0
   222fc:	d12a      	bne.n	22354 <service_info_json_object_encode+0x74>
		return -EINVAL;
	}

	service_info_obj = cJSON_CreateObject();
   222fe:	f004 fb31 	bl	26964 <cJSON_CreateObject>
	if (service_info_obj == NULL) {
   22302:	4605      	mov	r5, r0
   22304:	b348      	cbz	r0, 2235a <service_info_json_object_encode+0x7a>
		return -ENOMEM;
	}

	if (!err) {
		err = add_array_obj(ui, ui_count, UI_JSON_NAME,
   22306:	4603      	mov	r3, r0
   22308:	4a15      	ldr	r2, [pc, #84]	; (22360 <service_info_json_object_encode+0x80>)
   2230a:	4620      	mov	r0, r4
   2230c:	4649      	mov	r1, r9
   2230e:	f019 fe87 	bl	3c020 <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   22312:	4604      	mov	r4, r0
   22314:	b9d0      	cbnz	r0, 2234c <service_info_json_object_encode+0x6c>
		snprintf(fota_name, sizeof(fota_name), "%s%hu", FOTAS_JSON_NAME,
   22316:	210c      	movs	r1, #12
   22318:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   2231c:	4a11      	ldr	r2, [pc, #68]	; (22364 <service_info_json_object_encode+0x84>)
   2231e:	9300      	str	r3, [sp, #0]
   22320:	eb0d 0001 	add.w	r0, sp, r1
   22324:	4b10      	ldr	r3, [pc, #64]	; (22368 <service_info_json_object_encode+0x88>)
   22326:	f018 faff 	bl	3a928 <sniprintf>
			 fota_version);
		err = add_array_obj(fota, fota_count, fota_name,
   2232a:	462b      	mov	r3, r5
   2232c:	aa03      	add	r2, sp, #12
   2232e:	4641      	mov	r1, r8
   22330:	4638      	mov	r0, r7
   22332:	f019 fe75 	bl	3c020 <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   22336:	4604      	mov	r4, r0
   22338:	b940      	cbnz	r0, 2234c <service_info_json_object_encode+0x6c>
		cJSON_AddItemToObject(obj_out, SERVICE_INFO_JSON_NAME,
   2233a:	462a      	mov	r2, r5
   2233c:	490b      	ldr	r1, [pc, #44]	; (2236c <service_info_json_object_encode+0x8c>)
   2233e:	4630      	mov	r0, r6
   22340:	f01b fb55 	bl	3d9ee <cJSON_AddItemToObject>
	} else {
		cJSON_Delete(service_info_obj);
	}

	return err;
}
   22344:	4620      	mov	r0, r4
   22346:	b007      	add	sp, #28
   22348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cJSON_Delete(service_info_obj);
   2234c:	4628      	mov	r0, r5
   2234e:	f004 fa45 	bl	267dc <cJSON_Delete>
   22352:	e7f7      	b.n	22344 <service_info_json_object_encode+0x64>
		return -EINVAL;
   22354:	f06f 0415 	mvn.w	r4, #21
   22358:	e7f4      	b.n	22344 <service_info_json_object_encode+0x64>
		return -ENOMEM;
   2235a:	f06f 040b 	mvn.w	r4, #11
   2235e:	e7f1      	b.n	22344 <service_info_json_object_encode+0x64>
   22360:	00041c76 	.word	0x00041c76
   22364:	00041fc8 	.word	0x00041fc8
   22368:	00041fc1 	.word	0x00041fc1
   2236c:	00041fce 	.word	0x00041fce

00022370 <gps_work_handler>:

	return 0;
}

static void gps_work_handler(struct k_work *work)
{
   22370:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (gps_work.type == GPS_WORK_START) {
   22372:	4e70      	ldr	r6, [pc, #448]	; (22534 <gps_work_handler+0x1c4>)
   22374:	7833      	ldrb	r3, [r6, #0]
   22376:	4635      	mov	r5, r6
   22378:	2b00      	cmp	r3, #0
   2237a:	f040 809b 	bne.w	224b4 <gps_work_handler+0x144>
		LOG_INF("Enabling PSM");
   2237e:	2303      	movs	r3, #3
   22380:	f04f 0000 	mov.w	r0, #0
   22384:	4c6c      	ldr	r4, [pc, #432]	; (22538 <gps_work_handler+0x1c8>)
   22386:	f363 0007 	bfi	r0, r3, #0, #8
   2238a:	4b6c      	ldr	r3, [pc, #432]	; (2253c <gps_work_handler+0x1cc>)
   2238c:	496c      	ldr	r1, [pc, #432]	; (22540 <gps_work_handler+0x1d0>)
   2238e:	1ae4      	subs	r4, r4, r3
   22390:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   22394:	f364 108f 	bfi	r0, r4, #6, #10
   22398:	f01a f973 	bl	3c682 <log_string_sync>
		err = lte_lc_psm_req(true);
   2239c:	2001      	movs	r0, #1
   2239e:	f006 fad9 	bl	28954 <lte_lc_psm_req>
		if (err) {
   223a2:	b380      	cbz	r0, 22406 <gps_work_handler+0x96>
			LOG_ERR("PSM mode could not be enabled");
   223a4:	2301      	movs	r3, #1
   223a6:	f04f 0000 	mov.w	r0, #0
   223aa:	f363 0007 	bfi	r0, r3, #0, #8
   223ae:	f364 108f 	bfi	r0, r4, #6, #10
   223b2:	4964      	ldr	r1, [pc, #400]	; (22544 <gps_work_handler+0x1d4>)
   223b4:	f01a f965 	bl	3c682 <log_string_sync>
			LOG_ERR(" or was already enabled.");
   223b8:	f04f 0000 	mov.w	r0, #0
   223bc:	2301      	movs	r3, #1
   223be:	4962      	ldr	r1, [pc, #392]	; (22548 <gps_work_handler+0x1d8>)
   223c0:	f363 0007 	bfi	r0, r3, #0, #8
   223c4:	f364 108f 	bfi	r0, r4, #6, #10
			LOG_INF("PSM enabled");
   223c8:	f01a f95b 	bl	3c682 <log_string_sync>
	err = gps_start(gps_work.dev);
   223cc:	6a68      	ldr	r0, [r5, #36]	; 0x24
static inline int gps_start(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->start(dev);
   223ce:	6843      	ldr	r3, [r0, #4]
   223d0:	68db      	ldr	r3, [r3, #12]
   223d2:	4798      	blx	r3
	if (err) {
   223d4:	4606      	mov	r6, r0
   223d6:	b1f8      	cbz	r0, 22418 <gps_work_handler+0xa8>
		LOG_ERR("Failed starting GPS!");
   223d8:	2301      	movs	r3, #1
   223da:	f04f 0000 	mov.w	r0, #0
   223de:	f363 0007 	bfi	r0, r3, #0, #8
   223e2:	f364 108f 	bfi	r0, r4, #6, #10
   223e6:	4959      	ldr	r1, [pc, #356]	; (2254c <gps_work_handler+0x1dc>)
   223e8:	f01a f94b 	bl	3c682 <log_string_sync>
		err = start();
		if (err) {
			LOG_ERR("GPS could not be started, error: %d", err);
   223ec:	f04f 0000 	mov.w	r0, #0
   223f0:	2301      	movs	r3, #1
   223f2:	4632      	mov	r2, r6
   223f4:	f363 0007 	bfi	r0, r3, #0, #8
   223f8:	4955      	ldr	r1, [pc, #340]	; (22550 <gps_work_handler+0x1e0>)
   223fa:	f364 108f 	bfi	r0, r4, #6, #10
			gps_reporting_interval_seconds);

		k_delayed_work_submit_to_queue(gps_work_q, &gps_work.work,
			K_SECONDS(gps_reporting_interval_seconds));
	}
}
   223fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_ERR("GPS could not be stopped, error: %d", err);
   22402:	f01a b93e 	b.w	3c682 <log_string_sync>
			LOG_INF("PSM enabled");
   22406:	f04f 0000 	mov.w	r0, #0
   2240a:	2303      	movs	r3, #3
   2240c:	f363 0007 	bfi	r0, r3, #0, #8
   22410:	f364 108f 	bfi	r0, r4, #6, #10
   22414:	494f      	ldr	r1, [pc, #316]	; (22554 <gps_work_handler+0x1e4>)
   22416:	e7d7      	b.n	223c8 <gps_work_handler+0x58>
	atomic_set(&gps_is_active, 1);
   22418:	2101      	movs	r1, #1
   2241a:	484f      	ldr	r0, [pc, #316]	; (22558 <gps_work_handler+0x1e8>)
   2241c:	f019 fe30 	bl	3c080 <atomic_set>
	LOG_INF("GPS started successfully. Searching for satellites ");
   22420:	2303      	movs	r3, #3
   22422:	f04f 0000 	mov.w	r0, #0
   22426:	f363 0007 	bfi	r0, r3, #0, #8
   2242a:	f364 108f 	bfi	r0, r4, #6, #10
   2242e:	494b      	ldr	r1, [pc, #300]	; (2255c <gps_work_handler+0x1ec>)
   22430:	f01a f927 	bl	3c682 <log_string_sync>
	LOG_INF("to get position fix. This may take several minutes.");
   22434:	2303      	movs	r3, #3
   22436:	f04f 0000 	mov.w	r0, #0
   2243a:	f363 0007 	bfi	r0, r3, #0, #8
   2243e:	f364 108f 	bfi	r0, r4, #6, #10
   22442:	4947      	ldr	r1, [pc, #284]	; (22560 <gps_work_handler+0x1f0>)
   22444:	f01a f91d 	bl	3c682 <log_string_sync>
	LOG_INF("The device will attempt to get a fix for %d seconds, ",
   22448:	2303      	movs	r3, #3
   2244a:	f04f 0000 	mov.w	r0, #0
   2244e:	f363 0007 	bfi	r0, r3, #0, #8
   22452:	f44f 72b4 	mov.w	r2, #360	; 0x168
   22456:	f364 108f 	bfi	r0, r4, #6, #10
   2245a:	4942      	ldr	r1, [pc, #264]	; (22564 <gps_work_handler+0x1f4>)
   2245c:	f01a f911 	bl	3c682 <log_string_sync>
	LOG_INF("before the GPS is stopped.");
   22460:	2303      	movs	r3, #3
   22462:	f04f 0000 	mov.w	r0, #0
   22466:	f363 0007 	bfi	r0, r3, #0, #8
   2246a:	f364 108f 	bfi	r0, r4, #6, #10
   2246e:	493e      	ldr	r1, [pc, #248]	; (22568 <gps_work_handler+0x1f8>)
   22470:	f01a f907 	bl	3c682 <log_string_sync>
		LOG_INF("GPS operation started");
   22474:	2303      	movs	r3, #3
   22476:	f04f 0000 	mov.w	r0, #0
   2247a:	f363 0007 	bfi	r0, r3, #0, #8
   2247e:	f364 108f 	bfi	r0, r4, #6, #10
   22482:	493a      	ldr	r1, [pc, #232]	; (2256c <gps_work_handler+0x1fc>)
   22484:	f01a f8fd 	bl	3c682 <log_string_sync>
	return z_impl_k_uptime_get();
   22488:	f01c fb99 	bl	3ebbe <z_impl_k_uptime_get>
		gps_last_active_time = k_uptime_get();
   2248c:	4b38      	ldr	r3, [pc, #224]	; (22570 <gps_work_handler+0x200>)
   2248e:	e9c3 0100 	strd	r0, r1, [r3]
		atomic_set(&gps_is_active, 1);
   22492:	2101      	movs	r1, #1
   22494:	4830      	ldr	r0, [pc, #192]	; (22558 <gps_work_handler+0x1e8>)
   22496:	f019 fdf3 	bl	3c080 <atomic_set>
		ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   2249a:	2008      	movs	r0, #8
   2249c:	f7ff fa12 	bl	218c4 <ui_led_set_pattern>
		gps_work.type = GPS_WORK_STOP;
   224a0:	2301      	movs	r3, #1
		k_delayed_work_submit_to_queue(gps_work_q, &gps_work.work,
   224a2:	4a34      	ldr	r2, [pc, #208]	; (22574 <gps_work_handler+0x204>)
   224a4:	4934      	ldr	r1, [pc, #208]	; (22578 <gps_work_handler+0x208>)
		gps_work.type = GPS_WORK_STOP;
   224a6:	702b      	strb	r3, [r5, #0]
		k_delayed_work_submit_to_queue(gps_work_q, &gps_work.work,
   224a8:	4b34      	ldr	r3, [pc, #208]	; (2257c <gps_work_handler+0x20c>)
}
   224aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_delayed_work_submit_to_queue(gps_work_q, &gps_work.work,
   224ae:	6818      	ldr	r0, [r3, #0]
   224b0:	f016 bd28 	b.w	38f04 <k_delayed_work_submit_to_queue>
	} else if (gps_work.type == GPS_WORK_STOP) {
   224b4:	2b01      	cmp	r3, #1
   224b6:	d13c      	bne.n	22532 <gps_work_handler+0x1c2>
	err = gps_stop(gps_work.dev);
   224b8:	6a70      	ldr	r0, [r6, #36]	; 0x24
static inline int gps_stop(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->stop(dev);
   224ba:	4c1f      	ldr	r4, [pc, #124]	; (22538 <gps_work_handler+0x1c8>)
   224bc:	6843      	ldr	r3, [r0, #4]
   224be:	691b      	ldr	r3, [r3, #16]
   224c0:	4798      	blx	r3
	if (err) {
   224c2:	4605      	mov	r5, r0
   224c4:	4b1d      	ldr	r3, [pc, #116]	; (2253c <gps_work_handler+0x1cc>)
			LOG_ERR("GPS could not be stopped, error: %d", err);
   224c6:	f04f 0000 	mov.w	r0, #0
   224ca:	1ae4      	subs	r4, r4, r3
   224cc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (err) {
   224d0:	b13d      	cbz	r5, 224e2 <gps_work_handler+0x172>
			LOG_ERR("GPS could not be stopped, error: %d", err);
   224d2:	2301      	movs	r3, #1
   224d4:	f363 0007 	bfi	r0, r3, #0, #8
   224d8:	f364 108f 	bfi	r0, r4, #6, #10
   224dc:	462a      	mov	r2, r5
   224de:	4928      	ldr	r1, [pc, #160]	; (22580 <gps_work_handler+0x210>)
   224e0:	e78d      	b.n	223fe <gps_work_handler+0x8e>
		LOG_INF("GPS operation was stopped");
   224e2:	2303      	movs	r3, #3
   224e4:	f363 0007 	bfi	r0, r3, #0, #8
   224e8:	f364 108f 	bfi	r0, r4, #6, #10
   224ec:	4925      	ldr	r1, [pc, #148]	; (22584 <gps_work_handler+0x214>)
   224ee:	f01a f8c8 	bl	3c682 <log_string_sync>
   224f2:	f01c fb64 	bl	3ebbe <z_impl_k_uptime_get>
		gps_last_active_time = k_uptime_get();
   224f6:	4b1e      	ldr	r3, [pc, #120]	; (22570 <gps_work_handler+0x200>)
   224f8:	e9c3 0100 	strd	r0, r1, [r3]
		atomic_set(&gps_is_active, 0);
   224fc:	4629      	mov	r1, r5
   224fe:	4816      	ldr	r0, [pc, #88]	; (22558 <gps_work_handler+0x1e8>)
   22500:	f019 fdbe 	bl	3c080 <atomic_set>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22504:	4b20      	ldr	r3, [pc, #128]	; (22588 <gps_work_handler+0x218>)
   22506:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&gps_is_enabled) == 0) {
   2250a:	b193      	cbz	r3, 22532 <gps_work_handler+0x1c2>
		LOG_INF("The device will try to get fix again in %d seconds",
   2250c:	2303      	movs	r3, #3
   2250e:	f04f 0000 	mov.w	r0, #0
   22512:	f363 0007 	bfi	r0, r3, #0, #8
   22516:	f364 108f 	bfi	r0, r4, #6, #10
   2251a:	4c1c      	ldr	r4, [pc, #112]	; (2258c <gps_work_handler+0x21c>)
   2251c:	491c      	ldr	r1, [pc, #112]	; (22590 <gps_work_handler+0x220>)
   2251e:	6822      	ldr	r2, [r4, #0]
		gps_work.type = GPS_WORK_START;
   22520:	7035      	strb	r5, [r6, #0]
		LOG_INF("The device will try to get fix again in %d seconds",
   22522:	f01a f8ae 	bl	3c682 <log_string_sync>
		k_delayed_work_submit_to_queue(gps_work_q, &gps_work.work,
   22526:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			K_SECONDS(gps_reporting_interval_seconds));
   2252a:	6823      	ldr	r3, [r4, #0]
		k_delayed_work_submit_to_queue(gps_work_q, &gps_work.work,
   2252c:	1d31      	adds	r1, r6, #4
   2252e:	435a      	muls	r2, r3
   22530:	e7ba      	b.n	224a8 <gps_work_handler+0x138>
}
   22532:	bd70      	pop	{r4, r5, r6, pc}
   22534:	200239d8 	.word	0x200239d8
   22538:	00040354 	.word	0x00040354
   2253c:	000402cc 	.word	0x000402cc
   22540:	0004201c 	.word	0x0004201c
   22544:	00042029 	.word	0x00042029
   22548:	00042047 	.word	0x00042047
   2254c:	0004206c 	.word	0x0004206c
   22550:	00042081 	.word	0x00042081
   22554:	00042060 	.word	0x00042060
   22558:	200239cc 	.word	0x200239cc
   2255c:	000420a5 	.word	0x000420a5
   22560:	000420d9 	.word	0x000420d9
   22564:	0004210d 	.word	0x0004210d
   22568:	00042143 	.word	0x00042143
   2256c:	0004215e 	.word	0x0004215e
   22570:	20020950 	.word	0x20020950
   22574:	00057e40 	.word	0x00057e40
   22578:	200239dc 	.word	0x200239dc
   2257c:	20023a00 	.word	0x20023a00
   22580:	00042174 	.word	0x00042174
   22584:	00042198 	.word	0x00042198
   22588:	200239d0 	.word	0x200239d0
   2258c:	200239d4 	.word	0x200239d4
   22590:	000421b2 	.word	0x000421b2

00022594 <gps_control_is_active>:
   22594:	4b03      	ldr	r3, [pc, #12]	; (225a4 <gps_control_is_active+0x10>)
   22596:	e8d3 0faf 	lda	r0, [r3]
#if !defined(CONFIG_GPS_SIM)
	return atomic_get(&gps_is_active);
#else
	return false;
#endif
}
   2259a:	3000      	adds	r0, #0
   2259c:	bf18      	it	ne
   2259e:	2001      	movne	r0, #1
   225a0:	4770      	bx	lr
   225a2:	bf00      	nop
   225a4:	200239cc 	.word	0x200239cc

000225a8 <gps_control_is_enabled>:
   225a8:	4b03      	ldr	r3, [pc, #12]	; (225b8 <gps_control_is_enabled+0x10>)
   225aa:	e8d3 0faf 	lda	r0, [r3]
#if !defined(CONFIG_GPS_SIM)
	return atomic_get(&gps_is_enabled);
#else
	return false;
#endif
}
   225ae:	3000      	adds	r0, #0
   225b0:	bf18      	it	ne
   225b2:	2001      	movne	r0, #1
   225b4:	4770      	bx	lr
   225b6:	bf00      	nop
   225b8:	200239d0 	.word	0x200239d0

000225bc <gps_control_stop>:
	ui_led_set_pattern(UI_CLOUD_CONNECTED);
#endif
}

void gps_control_stop(u32_t delay_ms)
{
   225bc:	b570      	push	{r4, r5, r6, lr}
#if !defined(CONFIG_GPS_SIM)
	k_delayed_work_cancel(&gps_work.work);
   225be:	4d08      	ldr	r5, [pc, #32]	; (225e0 <gps_control_stop+0x24>)
{
   225c0:	4606      	mov	r6, r0
	k_delayed_work_cancel(&gps_work.work);
   225c2:	1d2c      	adds	r4, r5, #4
   225c4:	4620      	mov	r0, r4
   225c6:	f016 fd29 	bl	3901c <k_delayed_work_cancel>
	gps_work.type = GPS_WORK_STOP;
   225ca:	2301      	movs	r3, #1
   225cc:	702b      	strb	r3, [r5, #0]
	k_delayed_work_submit_to_queue(gps_work_q, &gps_work.work, delay_ms);
   225ce:	4b05      	ldr	r3, [pc, #20]	; (225e4 <gps_control_stop+0x28>)
   225d0:	4632      	mov	r2, r6
   225d2:	4621      	mov	r1, r4
#endif
}
   225d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit_to_queue(gps_work_q, &gps_work.work, delay_ms);
   225d8:	6818      	ldr	r0, [r3, #0]
   225da:	f016 bc93 	b.w	38f04 <k_delayed_work_submit_to_queue>
   225de:	bf00      	nop
   225e0:	200239d8 	.word	0x200239d8
   225e4:	20023a00 	.word	0x20023a00

000225e8 <gps_control_disable>:
{
   225e8:	b508      	push	{r3, lr}
	atomic_set(&gps_is_enabled, 0);
   225ea:	2100      	movs	r1, #0
   225ec:	4805      	ldr	r0, [pc, #20]	; (22604 <gps_control_disable+0x1c>)
   225ee:	f019 fd47 	bl	3c080 <atomic_set>
	gps_control_stop(K_NO_WAIT);
   225f2:	2000      	movs	r0, #0
   225f4:	f7ff ffe2 	bl	225bc <gps_control_stop>
}
   225f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ui_led_set_pattern(UI_CLOUD_CONNECTED);
   225fc:	2008      	movs	r0, #8
   225fe:	f7ff b961 	b.w	218c4 <ui_led_set_pattern>
   22602:	bf00      	nop
   22604:	200239d0 	.word	0x200239d0

00022608 <gps_control_start>:

void gps_control_start(u32_t delay_ms)
{
   22608:	b570      	push	{r4, r5, r6, lr}
#if !defined(CONFIG_GPS_SIM)
	k_delayed_work_cancel(&gps_work.work);
   2260a:	4d08      	ldr	r5, [pc, #32]	; (2262c <gps_control_start+0x24>)
{
   2260c:	4606      	mov	r6, r0
	k_delayed_work_cancel(&gps_work.work);
   2260e:	1d2c      	adds	r4, r5, #4
   22610:	4620      	mov	r0, r4
   22612:	f016 fd03 	bl	3901c <k_delayed_work_cancel>
	gps_work.type = GPS_WORK_START;
   22616:	2300      	movs	r3, #0
   22618:	702b      	strb	r3, [r5, #0]
	k_delayed_work_submit_to_queue(gps_work_q, &gps_work.work, delay_ms);
   2261a:	4b05      	ldr	r3, [pc, #20]	; (22630 <gps_control_start+0x28>)
   2261c:	4632      	mov	r2, r6
   2261e:	4621      	mov	r1, r4
#endif
}
   22620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit_to_queue(gps_work_q, &gps_work.work, delay_ms);
   22624:	6818      	ldr	r0, [r3, #0]
   22626:	f016 bc6d 	b.w	38f04 <k_delayed_work_submit_to_queue>
   2262a:	bf00      	nop
   2262c:	200239d8 	.word	0x200239d8
   22630:	20023a00 	.word	0x20023a00

00022634 <gps_control_enable>:
{
   22634:	b508      	push	{r3, lr}
	atomic_set(&gps_is_enabled, 1);
   22636:	2101      	movs	r1, #1
   22638:	4804      	ldr	r0, [pc, #16]	; (2264c <gps_control_enable+0x18>)
   2263a:	f019 fd21 	bl	3c080 <atomic_set>
}
   2263e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gps_control_start(K_SECONDS(1));
   22642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   22646:	f7ff bfdf 	b.w	22608 <gps_control_start>
   2264a:	bf00      	nop
   2264c:	200239d0 	.word	0x200239d0

00022650 <gps_control_init>:
#endif
}

/** @brief Configures and starts the GPS device. */
int gps_control_init(struct k_work_q *work_q, gps_trigger_handler_t handler)
{
   22650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22652:	460d      	mov	r5, r1
	if ((work_q == NULL) || (handler == NULL)) {
   22654:	2800      	cmp	r0, #0
   22656:	d04b      	beq.n	226f0 <gps_control_init+0xa0>
   22658:	2900      	cmp	r1, #0
   2265a:	d049      	beq.n	226f0 <gps_control_init+0xa0>
		return -EINVAL;
	}

	int err;
	struct device *gps_dev;
	gps_work_q = work_q;
   2265c:	4b26      	ldr	r3, [pc, #152]	; (226f8 <gps_control_init+0xa8>)
   2265e:	6018      	str	r0, [r3, #0]
#ifdef CONFIG_GPS_SIM
	struct gps_trigger gps_trig = {
		.type = GPS_TRIG_DATA_READY
	};
#else
	struct gps_trigger gps_trig = {
   22660:	2302      	movs	r3, #2
   22662:	f8ad 3004 	strh.w	r3, [sp, #4]
   22666:	4825      	ldr	r0, [pc, #148]	; (226fc <gps_control_init+0xac>)
   22668:	f014 f846 	bl	366f8 <z_impl_device_get_binding>
		.chan = GPS_CHAN_NMEA
	};
#endif /* CONFIG_GPS_SIM */

	gps_dev = device_get_binding(CONFIG_GPS_DEV_NAME);
	if (gps_dev == NULL) {
   2266c:	4c24      	ldr	r4, [pc, #144]	; (22700 <gps_control_init+0xb0>)
   2266e:	4b25      	ldr	r3, [pc, #148]	; (22704 <gps_control_init+0xb4>)
   22670:	4607      	mov	r7, r0
   22672:	1ae4      	subs	r4, r4, r3
   22674:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   22678:	b998      	cbnz	r0, 226a2 <gps_control_init+0x52>
		LOG_ERR("Could not get %s device",
   2267a:	2301      	movs	r3, #1
   2267c:	f04f 0500 	mov.w	r5, #0
   22680:	481e      	ldr	r0, [pc, #120]	; (226fc <gps_control_init+0xac>)
   22682:	f363 0507 	bfi	r5, r3, #0, #8
   22686:	f01a f80e 	bl	3c6a6 <log_strdup>
   2268a:	f364 158f 	bfi	r5, r4, #6, #10
   2268e:	4602      	mov	r2, r0
   22690:	491d      	ldr	r1, [pc, #116]	; (22708 <gps_control_init+0xb8>)
   22692:	4628      	mov	r0, r5
   22694:	f019 fff5 	bl	3c682 <log_string_sync>
			log_strdup(CONFIG_GPS_DEV_NAME));
		return -ENODEV;
   22698:	f06f 0512 	mvn.w	r5, #18
	gps_work.dev = gps_dev;
#endif
	LOG_INF("GPS initialized");

	return 0;
}
   2269c:	4628      	mov	r0, r5
   2269e:	b003      	add	sp, #12
   226a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->trigger_set(dev, trigger, handler);
   226a2:	6843      	ldr	r3, [r0, #4]
   226a4:	462a      	mov	r2, r5
   226a6:	681b      	ldr	r3, [r3, #0]
   226a8:	a901      	add	r1, sp, #4
   226aa:	4798      	blx	r3
	if (err) {
   226ac:	4605      	mov	r5, r0
   226ae:	b158      	cbz	r0, 226c8 <gps_control_init+0x78>
		LOG_ERR("Could not set trigger, error code: %d", err);
   226b0:	2301      	movs	r3, #1
   226b2:	f04f 0000 	mov.w	r0, #0
   226b6:	f363 0007 	bfi	r0, r3, #0, #8
   226ba:	f364 108f 	bfi	r0, r4, #6, #10
   226be:	462a      	mov	r2, r5
   226c0:	4912      	ldr	r1, [pc, #72]	; (2270c <gps_control_init+0xbc>)
   226c2:	f019 ffde 	bl	3c682 <log_string_sync>
		return err;
   226c6:	e7e9      	b.n	2269c <gps_control_init+0x4c>
	gps_reporting_interval_seconds =
   226c8:	221e      	movs	r2, #30
	k_delayed_work_init(&gps_work.work, gps_work_handler);
   226ca:	4e11      	ldr	r6, [pc, #68]	; (22710 <gps_control_init+0xc0>)
	gps_reporting_interval_seconds =
   226cc:	4b11      	ldr	r3, [pc, #68]	; (22714 <gps_control_init+0xc4>)
	k_delayed_work_init(&gps_work.work, gps_work_handler);
   226ce:	1d30      	adds	r0, r6, #4
   226d0:	4911      	ldr	r1, [pc, #68]	; (22718 <gps_control_init+0xc8>)
	gps_reporting_interval_seconds =
   226d2:	601a      	str	r2, [r3, #0]
	k_delayed_work_init(&gps_work.work, gps_work_handler);
   226d4:	f01c fa67 	bl	3eba6 <k_delayed_work_init>
	LOG_INF("GPS initialized");
   226d8:	2303      	movs	r3, #3
   226da:	f04f 0000 	mov.w	r0, #0
   226de:	f363 0007 	bfi	r0, r3, #0, #8
   226e2:	f364 108f 	bfi	r0, r4, #6, #10
   226e6:	490d      	ldr	r1, [pc, #52]	; (2271c <gps_control_init+0xcc>)
	gps_work.dev = gps_dev;
   226e8:	6277      	str	r7, [r6, #36]	; 0x24
	LOG_INF("GPS initialized");
   226ea:	f019 ffca 	bl	3c682 <log_string_sync>
	return 0;
   226ee:	e7d5      	b.n	2269c <gps_control_init+0x4c>
		return -EINVAL;
   226f0:	f06f 0515 	mvn.w	r5, #21
   226f4:	e7d2      	b.n	2269c <gps_control_init+0x4c>
   226f6:	bf00      	nop
   226f8:	20023a00 	.word	0x20023a00
   226fc:	00041fda 	.word	0x00041fda
   22700:	00040354 	.word	0x00040354
   22704:	000402cc 	.word	0x000402cc
   22708:	00041c22 	.word	0x00041c22
   2270c:	00041fe6 	.word	0x00041fe6
   22710:	200239d8 	.word	0x200239d8
   22714:	200239d4 	.word	0x200239d4
   22718:	00022371 	.word	0x00022371
   2271c:	0004200c 	.word	0x0004200c

00022720 <submit_poll_work>:
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   22720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22724:	4b02      	ldr	r3, [pc, #8]	; (22730 <submit_poll_work+0x10>)
   22726:	4342      	muls	r2, r0
   22728:	4902      	ldr	r1, [pc, #8]	; (22734 <submit_poll_work+0x14>)
   2272a:	6818      	ldr	r0, [r3, #0]
   2272c:	f016 bbea 	b.w	38f04 <k_delayed_work_submit_to_queue>
   22730:	20023a28 	.word	0x20023a28
   22734:	20023a08 	.word	0x20023a08

00022738 <env_sensors_poll>:
	return initialized ? submit_poll_work(K_NO_WAIT) : -ENXIO;
   22738:	4b04      	ldr	r3, [pc, #16]	; (2274c <env_sensors_poll+0x14>)
   2273a:	781b      	ldrb	r3, [r3, #0]
   2273c:	b113      	cbz	r3, 22744 <env_sensors_poll+0xc>
   2273e:	2000      	movs	r0, #0
   22740:	f7ff bfee 	b.w	22720 <submit_poll_work>
}
   22744:	f06f 0005 	mvn.w	r0, #5
   22748:	4770      	bx	lr
   2274a:	bf00      	nop
   2274c:	20029f2d 	.word	0x20029f2d

00022750 <env_sensors_init_and_start>:

/**@brief Initialize environment sensors. */
int env_sensors_init_and_start(struct k_work_q *work_q,
			       const env_sensors_data_ready_cb cb)
{
   22750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22754:	460e      	mov	r6, r1
	if ((work_q == NULL) || (cb == NULL)) {
   22756:	4607      	mov	r7, r0
   22758:	2800      	cmp	r0, #0
   2275a:	d03a      	beq.n	227d2 <env_sensors_init_and_start+0x82>
   2275c:	2900      	cmp	r1, #0
   2275e:	d038      	beq.n	227d2 <env_sensors_init_and_start+0x82>
   22760:	2403      	movs	r4, #3
   22762:	4d1f      	ldr	r5, [pc, #124]	; (227e0 <env_sensors_init_and_start+0x90>)
	}

	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
		env_sensors[i]->dev =
			device_get_binding(env_sensors[i]->dev_name);
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   22764:	f8df 8098 	ldr.w	r8, [pc, #152]	; 22800 <env_sensors_init_and_start+0xb0>
   22768:	f8df a098 	ldr.w	sl, [pc, #152]	; 22804 <env_sensors_init_and_start+0xb4>
   2276c:	f8df b098 	ldr.w	fp, [pc, #152]	; 22808 <env_sensors_init_and_start+0xb8>
			device_get_binding(env_sensors[i]->dev_name);
   22770:	f8d5 9000 	ldr.w	r9, [r5]
   22774:	f8d9 0014 	ldr.w	r0, [r9, #20]
   22778:	f013 ffbe 	bl	366f8 <z_impl_device_get_binding>
		env_sensors[i]->dev =
   2277c:	f8c9 0018 	str.w	r0, [r9, #24]
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   22780:	f855 9b04 	ldr.w	r9, [r5], #4
   22784:	f8d9 3018 	ldr.w	r3, [r9, #24]
   22788:	b973      	cbnz	r3, 227a8 <env_sensors_init_and_start+0x58>
   2278a:	238f      	movs	r3, #143	; 0x8f
   2278c:	4642      	mov	r2, r8
   2278e:	4651      	mov	r1, sl
   22790:	4658      	mov	r0, fp
   22792:	f019 ff1f 	bl	3c5d4 <printk>
   22796:	f8d9 1014 	ldr.w	r1, [r9, #20]
   2279a:	4812      	ldr	r0, [pc, #72]	; (227e4 <env_sensors_init_and_start+0x94>)
   2279c:	f019 ff1a 	bl	3c5d4 <printk>
   227a0:	218f      	movs	r1, #143	; 0x8f
   227a2:	4640      	mov	r0, r8
   227a4:	f019 ff5c 	bl	3c660 <assert_post_action>
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   227a8:	3c01      	subs	r4, #1
   227aa:	d1e1      	bne.n	22770 <env_sensors_init_and_start+0x20>
			env_sensors[i]->dev_name);
	}

	env_sensors_work_q = work_q;
   227ac:	4b0e      	ldr	r3, [pc, #56]	; (227e8 <env_sensors_init_and_start+0x98>)

	data_ready_cb = cb;

	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   227ae:	490f      	ldr	r1, [pc, #60]	; (227ec <env_sensors_init_and_start+0x9c>)
	env_sensors_work_q = work_q;
   227b0:	601f      	str	r7, [r3, #0]
	data_ready_cb = cb;
   227b2:	4b0f      	ldr	r3, [pc, #60]	; (227f0 <env_sensors_init_and_start+0xa0>)
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   227b4:	480f      	ldr	r0, [pc, #60]	; (227f4 <env_sensors_init_and_start+0xa4>)
	data_ready_cb = cb;
   227b6:	601e      	str	r6, [r3, #0]
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   227b8:	f01c f9f5 	bl	3eba6 <k_delayed_work_init>

	initialized = true;
   227bc:	2201      	movs	r2, #1
   227be:	4b0e      	ldr	r3, [pc, #56]	; (227f8 <env_sensors_init_and_start+0xa8>)
   227c0:	701a      	strb	r2, [r3, #0]

	return (data_send_interval_s > 0) ?
   227c2:	4b0e      	ldr	r3, [pc, #56]	; (227fc <env_sensors_init_and_start+0xac>)
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   227c4:	681b      	ldr	r3, [r3, #0]
   227c6:	b143      	cbz	r3, 227da <env_sensors_init_and_start+0x8a>
}
   227c8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   227cc:	2005      	movs	r0, #5
   227ce:	f7ff bfa7 	b.w	22720 <submit_poll_work>
		return -EINVAL;
   227d2:	f06f 0015 	mvn.w	r0, #21
}
   227d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   227da:	4620      	mov	r0, r4
   227dc:	e7fb      	b.n	227d6 <env_sensors_init_and_start+0x86>
   227de:	bf00      	nop
   227e0:	00040640 	.word	0x00040640
   227e4:	00042226 	.word	0x00042226
   227e8:	20023a28 	.word	0x20023a28
   227ec:	0001d299 	.word	0x0001d299
   227f0:	20023a04 	.word	0x20023a04
   227f4:	20023a08 	.word	0x20023a08
   227f8:	20029f2d 	.word	0x20029f2d
   227fc:	20031500 	.word	0x20031500
   22800:	000421f1 	.word	0x000421f1
   22804:	00042212 	.word	0x00042212
   22808:	00041757 	.word	0x00041757

0002280c <env_sensors_get_temperature>:

int env_sensors_get_temperature(env_sensor_data_t *sensor_data)
{
   2280c:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   2280e:	4604      	mov	r4, r0
   22810:	2800      	cmp	r0, #0
   22812:	d041      	beq.n	22898 <env_sensors_get_temperature+0x8c>
	__asm__ volatile(
   22814:	f04f 0320 	mov.w	r3, #32
   22818:	f3ef 8611 	mrs	r6, BASEPRI
   2281c:	f383 8811 	msr	BASEPRI, r3
   22820:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22824:	481e      	ldr	r0, [pc, #120]	; (228a0 <env_sensors_get_temperature+0x94>)
   22826:	f016 f967 	bl	38af8 <z_spin_lock_valid>
   2282a:	b968      	cbnz	r0, 22848 <env_sensors_get_temperature+0x3c>
   2282c:	234a      	movs	r3, #74	; 0x4a
   2282e:	4a1d      	ldr	r2, [pc, #116]	; (228a4 <env_sensors_get_temperature+0x98>)
   22830:	491d      	ldr	r1, [pc, #116]	; (228a8 <env_sensors_get_temperature+0x9c>)
   22832:	481e      	ldr	r0, [pc, #120]	; (228ac <env_sensors_get_temperature+0xa0>)
   22834:	f019 fece 	bl	3c5d4 <printk>
   22838:	4919      	ldr	r1, [pc, #100]	; (228a0 <env_sensors_get_temperature+0x94>)
   2283a:	481d      	ldr	r0, [pc, #116]	; (228b0 <env_sensors_get_temperature+0xa4>)
   2283c:	f019 feca 	bl	3c5d4 <printk>
   22840:	214a      	movs	r1, #74	; 0x4a
   22842:	4818      	ldr	r0, [pc, #96]	; (228a4 <env_sensors_get_temperature+0x98>)
   22844:	f019 ff0c 	bl	3c660 <assert_post_action>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22848:	4d1a      	ldr	r5, [pc, #104]	; (228b4 <env_sensors_get_temperature+0xa8>)
	z_spin_lock_set_owner(l);
   2284a:	4815      	ldr	r0, [pc, #84]	; (228a0 <env_sensors_get_temperature+0x94>)
   2284c:	f016 f972 	bl	38b34 <z_spin_lock_set_owner>
   22850:	4623      	mov	r3, r4
   22852:	f105 0410 	add.w	r4, r5, #16
   22856:	462a      	mov	r2, r5
   22858:	ca03      	ldmia	r2!, {r0, r1}
   2285a:	42a2      	cmp	r2, r4
   2285c:	6018      	str	r0, [r3, #0]
   2285e:	6059      	str	r1, [r3, #4]
   22860:	4615      	mov	r5, r2
   22862:	f103 0308 	add.w	r3, r3, #8
   22866:	d1f6      	bne.n	22856 <env_sensors_get_temperature+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22868:	480d      	ldr	r0, [pc, #52]	; (228a0 <env_sensors_get_temperature+0x94>)
   2286a:	f016 f953 	bl	38b14 <z_spin_unlock_valid>
   2286e:	b968      	cbnz	r0, 2288c <env_sensors_get_temperature+0x80>
   22870:	235d      	movs	r3, #93	; 0x5d
   22872:	4a0c      	ldr	r2, [pc, #48]	; (228a4 <env_sensors_get_temperature+0x98>)
   22874:	4910      	ldr	r1, [pc, #64]	; (228b8 <env_sensors_get_temperature+0xac>)
   22876:	480d      	ldr	r0, [pc, #52]	; (228ac <env_sensors_get_temperature+0xa0>)
   22878:	f019 feac 	bl	3c5d4 <printk>
   2287c:	4908      	ldr	r1, [pc, #32]	; (228a0 <env_sensors_get_temperature+0x94>)
   2287e:	480f      	ldr	r0, [pc, #60]	; (228bc <env_sensors_get_temperature+0xb0>)
   22880:	f019 fea8 	bl	3c5d4 <printk>
   22884:	215d      	movs	r1, #93	; 0x5d
   22886:	4807      	ldr	r0, [pc, #28]	; (228a4 <env_sensors_get_temperature+0x98>)
   22888:	f019 feea 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   2288c:	f386 8811 	msr	BASEPRI, r6
   22890:	f3bf 8f6f 	isb	sy
	}
	k_spinlock_key_t key = k_spin_lock(&temp_sensor.lock);

	memcpy(sensor_data, &(temp_sensor.sensor), sizeof(temp_sensor.sensor));
	k_spin_unlock(&temp_sensor.lock, key);
	return 0;
   22894:	2000      	movs	r0, #0
}
   22896:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   22898:	f04f 30ff 	mov.w	r0, #4294967295
   2289c:	e7fb      	b.n	22896 <env_sensors_get_temperature+0x8a>
   2289e:	bf00      	nop
   228a0:	2003117c 	.word	0x2003117c
   228a4:	00042269 	.word	0x00042269
   228a8:	00042288 	.word	0x00042288
   228ac:	00041757 	.word	0x00041757
   228b0:	0004229d 	.word	0x0004229d
   228b4:	20031160 	.word	0x20031160
   228b8:	000422b5 	.word	0x000422b5
   228bc:	000422cc 	.word	0x000422cc

000228c0 <env_sensors_get_humidity>:

int env_sensors_get_humidity(env_sensor_data_t *sensor_data)
{
   228c0:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   228c2:	4604      	mov	r4, r0
   228c4:	2800      	cmp	r0, #0
   228c6:	d041      	beq.n	2294c <env_sensors_get_humidity+0x8c>
	__asm__ volatile(
   228c8:	f04f 0320 	mov.w	r3, #32
   228cc:	f3ef 8611 	mrs	r6, BASEPRI
   228d0:	f383 8811 	msr	BASEPRI, r3
   228d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228d8:	481e      	ldr	r0, [pc, #120]	; (22954 <env_sensors_get_humidity+0x94>)
   228da:	f016 f90d 	bl	38af8 <z_spin_lock_valid>
   228de:	b968      	cbnz	r0, 228fc <env_sensors_get_humidity+0x3c>
   228e0:	234a      	movs	r3, #74	; 0x4a
   228e2:	4a1d      	ldr	r2, [pc, #116]	; (22958 <env_sensors_get_humidity+0x98>)
   228e4:	491d      	ldr	r1, [pc, #116]	; (2295c <env_sensors_get_humidity+0x9c>)
   228e6:	481e      	ldr	r0, [pc, #120]	; (22960 <env_sensors_get_humidity+0xa0>)
   228e8:	f019 fe74 	bl	3c5d4 <printk>
   228ec:	4919      	ldr	r1, [pc, #100]	; (22954 <env_sensors_get_humidity+0x94>)
   228ee:	481d      	ldr	r0, [pc, #116]	; (22964 <env_sensors_get_humidity+0xa4>)
   228f0:	f019 fe70 	bl	3c5d4 <printk>
   228f4:	214a      	movs	r1, #74	; 0x4a
   228f6:	4818      	ldr	r0, [pc, #96]	; (22958 <env_sensors_get_humidity+0x98>)
   228f8:	f019 feb2 	bl	3c660 <assert_post_action>
   228fc:	4d1a      	ldr	r5, [pc, #104]	; (22968 <env_sensors_get_humidity+0xa8>)
	z_spin_lock_set_owner(l);
   228fe:	4815      	ldr	r0, [pc, #84]	; (22954 <env_sensors_get_humidity+0x94>)
   22900:	f016 f918 	bl	38b34 <z_spin_lock_set_owner>
   22904:	4623      	mov	r3, r4
   22906:	f105 0410 	add.w	r4, r5, #16
   2290a:	462a      	mov	r2, r5
   2290c:	ca03      	ldmia	r2!, {r0, r1}
   2290e:	42a2      	cmp	r2, r4
   22910:	6018      	str	r0, [r3, #0]
   22912:	6059      	str	r1, [r3, #4]
   22914:	4615      	mov	r5, r2
   22916:	f103 0308 	add.w	r3, r3, #8
   2291a:	d1f6      	bne.n	2290a <env_sensors_get_humidity+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2291c:	480d      	ldr	r0, [pc, #52]	; (22954 <env_sensors_get_humidity+0x94>)
   2291e:	f016 f8f9 	bl	38b14 <z_spin_unlock_valid>
   22922:	b968      	cbnz	r0, 22940 <env_sensors_get_humidity+0x80>
   22924:	235d      	movs	r3, #93	; 0x5d
   22926:	4a0c      	ldr	r2, [pc, #48]	; (22958 <env_sensors_get_humidity+0x98>)
   22928:	4910      	ldr	r1, [pc, #64]	; (2296c <env_sensors_get_humidity+0xac>)
   2292a:	480d      	ldr	r0, [pc, #52]	; (22960 <env_sensors_get_humidity+0xa0>)
   2292c:	f019 fe52 	bl	3c5d4 <printk>
   22930:	4908      	ldr	r1, [pc, #32]	; (22954 <env_sensors_get_humidity+0x94>)
   22932:	480f      	ldr	r0, [pc, #60]	; (22970 <env_sensors_get_humidity+0xb0>)
   22934:	f019 fe4e 	bl	3c5d4 <printk>
   22938:	215d      	movs	r1, #93	; 0x5d
   2293a:	4807      	ldr	r0, [pc, #28]	; (22958 <env_sensors_get_humidity+0x98>)
   2293c:	f019 fe90 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   22940:	f386 8811 	msr	BASEPRI, r6
   22944:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&humid_sensor.lock);

	memcpy(sensor_data, &(humid_sensor.sensor),
		sizeof(humid_sensor.sensor));
	k_spin_unlock(&humid_sensor.lock, key);
	return 0;
   22948:	2000      	movs	r0, #0
}
   2294a:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   2294c:	f04f 30ff 	mov.w	r0, #4294967295
   22950:	e7fb      	b.n	2294a <env_sensors_get_humidity+0x8a>
   22952:	bf00      	nop
   22954:	2003113c 	.word	0x2003113c
   22958:	00042269 	.word	0x00042269
   2295c:	00042288 	.word	0x00042288
   22960:	00041757 	.word	0x00041757
   22964:	0004229d 	.word	0x0004229d
   22968:	20031120 	.word	0x20031120
   2296c:	000422b5 	.word	0x000422b5
   22970:	000422cc 	.word	0x000422cc

00022974 <env_sensors_get_pressure>:

int env_sensors_get_pressure(env_sensor_data_t *sensor_data)
{
   22974:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   22976:	4604      	mov	r4, r0
   22978:	2800      	cmp	r0, #0
   2297a:	d041      	beq.n	22a00 <env_sensors_get_pressure+0x8c>
	__asm__ volatile(
   2297c:	f04f 0320 	mov.w	r3, #32
   22980:	f3ef 8611 	mrs	r6, BASEPRI
   22984:	f383 8811 	msr	BASEPRI, r3
   22988:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2298c:	481e      	ldr	r0, [pc, #120]	; (22a08 <env_sensors_get_pressure+0x94>)
   2298e:	f016 f8b3 	bl	38af8 <z_spin_lock_valid>
   22992:	b968      	cbnz	r0, 229b0 <env_sensors_get_pressure+0x3c>
   22994:	234a      	movs	r3, #74	; 0x4a
   22996:	4a1d      	ldr	r2, [pc, #116]	; (22a0c <env_sensors_get_pressure+0x98>)
   22998:	491d      	ldr	r1, [pc, #116]	; (22a10 <env_sensors_get_pressure+0x9c>)
   2299a:	481e      	ldr	r0, [pc, #120]	; (22a14 <env_sensors_get_pressure+0xa0>)
   2299c:	f019 fe1a 	bl	3c5d4 <printk>
   229a0:	4919      	ldr	r1, [pc, #100]	; (22a08 <env_sensors_get_pressure+0x94>)
   229a2:	481d      	ldr	r0, [pc, #116]	; (22a18 <env_sensors_get_pressure+0xa4>)
   229a4:	f019 fe16 	bl	3c5d4 <printk>
   229a8:	214a      	movs	r1, #74	; 0x4a
   229aa:	4818      	ldr	r0, [pc, #96]	; (22a0c <env_sensors_get_pressure+0x98>)
   229ac:	f019 fe58 	bl	3c660 <assert_post_action>
   229b0:	4d1a      	ldr	r5, [pc, #104]	; (22a1c <env_sensors_get_pressure+0xa8>)
	z_spin_lock_set_owner(l);
   229b2:	4815      	ldr	r0, [pc, #84]	; (22a08 <env_sensors_get_pressure+0x94>)
   229b4:	f016 f8be 	bl	38b34 <z_spin_lock_set_owner>
   229b8:	4623      	mov	r3, r4
   229ba:	f105 0410 	add.w	r4, r5, #16
   229be:	462a      	mov	r2, r5
   229c0:	ca03      	ldmia	r2!, {r0, r1}
   229c2:	42a2      	cmp	r2, r4
   229c4:	6018      	str	r0, [r3, #0]
   229c6:	6059      	str	r1, [r3, #4]
   229c8:	4615      	mov	r5, r2
   229ca:	f103 0308 	add.w	r3, r3, #8
   229ce:	d1f6      	bne.n	229be <env_sensors_get_pressure+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   229d0:	480d      	ldr	r0, [pc, #52]	; (22a08 <env_sensors_get_pressure+0x94>)
   229d2:	f016 f89f 	bl	38b14 <z_spin_unlock_valid>
   229d6:	b968      	cbnz	r0, 229f4 <env_sensors_get_pressure+0x80>
   229d8:	235d      	movs	r3, #93	; 0x5d
   229da:	4a0c      	ldr	r2, [pc, #48]	; (22a0c <env_sensors_get_pressure+0x98>)
   229dc:	4910      	ldr	r1, [pc, #64]	; (22a20 <env_sensors_get_pressure+0xac>)
   229de:	480d      	ldr	r0, [pc, #52]	; (22a14 <env_sensors_get_pressure+0xa0>)
   229e0:	f019 fdf8 	bl	3c5d4 <printk>
   229e4:	4908      	ldr	r1, [pc, #32]	; (22a08 <env_sensors_get_pressure+0x94>)
   229e6:	480f      	ldr	r0, [pc, #60]	; (22a24 <env_sensors_get_pressure+0xb0>)
   229e8:	f019 fdf4 	bl	3c5d4 <printk>
   229ec:	215d      	movs	r1, #93	; 0x5d
   229ee:	4807      	ldr	r0, [pc, #28]	; (22a0c <env_sensors_get_pressure+0x98>)
   229f0:	f019 fe36 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   229f4:	f386 8811 	msr	BASEPRI, r6
   229f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&pressure_sensor.lock);

	memcpy(sensor_data, &(pressure_sensor.sensor),
		sizeof(pressure_sensor.sensor));
	k_spin_unlock(&pressure_sensor.lock, key);
	return 0;
   229fc:	2000      	movs	r0, #0
}
   229fe:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   22a00:	f04f 30ff 	mov.w	r0, #4294967295
   22a04:	e7fb      	b.n	229fe <env_sensors_get_pressure+0x8a>
   22a06:	bf00      	nop
   22a08:	2003115c 	.word	0x2003115c
   22a0c:	00042269 	.word	0x00042269
   22a10:	00042288 	.word	0x00042288
   22a14:	00041757 	.word	0x00041757
   22a18:	0004229d 	.word	0x0004229d
   22a1c:	20031140 	.word	0x20031140
   22a20:	000422b5 	.word	0x000422b5
   22a24:	000422cc 	.word	0x000422cc

00022a28 <env_sensors_set_send_interval>:
{
	return -1;
}

void env_sensors_set_send_interval(const u32_t interval_s)
{
   22a28:	b508      	push	{r3, lr}
	if (interval_s == data_send_interval_s) {
   22a2a:	4b11      	ldr	r3, [pc, #68]	; (22a70 <env_sensors_set_send_interval+0x48>)
   22a2c:	681a      	ldr	r2, [r3, #0]
   22a2e:	4282      	cmp	r2, r0
   22a30:	d01d      	beq.n	22a6e <env_sensors_set_send_interval+0x46>
		return;
	}

	data_send_interval_s = MIN(interval_s, MAX_INTERVAL_S);
   22a32:	4a10      	ldr	r2, [pc, #64]	; (22a74 <env_sensors_set_send_interval+0x4c>)
   22a34:	4290      	cmp	r0, r2
   22a36:	bf94      	ite	ls
   22a38:	6018      	strls	r0, [r3, #0]
   22a3a:	601a      	strhi	r2, [r3, #0]

	if (!initialized) {
   22a3c:	4b0e      	ldr	r3, [pc, #56]	; (22a78 <env_sensors_set_send_interval+0x50>)
   22a3e:	781b      	ldrb	r3, [r3, #0]
   22a40:	b1ab      	cbz	r3, 22a6e <env_sensors_set_send_interval+0x46>
		return;
	}

	if (data_send_interval_s) {
   22a42:	b118      	cbz	r0, 22a4c <env_sensors_set_send_interval+0x24>
		/* restart work for new interval to take effect */
		env_sensors_poll();
	} else if (k_delayed_work_remaining_get(&env_sensors_poller) > 0) {
		k_delayed_work_cancel(&env_sensors_poller);
	}
}
   22a44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		env_sensors_poll();
   22a48:	f7ff be76 	b.w	22738 <env_sensors_poll>
	return k_ticks_to_ms_floor64(z_timeout_remaining(&work->timeout));
   22a4c:	480b      	ldr	r0, [pc, #44]	; (22a7c <env_sensors_set_send_interval+0x54>)
   22a4e:	f016 fc63 	bl	39318 <z_timeout_remaining>
   22a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22a56:	fb80 0103 	smull	r0, r1, r0, r3
   22a5a:	0bc3      	lsrs	r3, r0, #15
   22a5c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	} else if (k_delayed_work_remaining_get(&env_sensors_poller) > 0) {
   22a60:	2b00      	cmp	r3, #0
   22a62:	dd04      	ble.n	22a6e <env_sensors_set_send_interval+0x46>
}
   22a64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&env_sensors_poller);
   22a68:	4805      	ldr	r0, [pc, #20]	; (22a80 <env_sensors_set_send_interval+0x58>)
   22a6a:	f016 bad7 	b.w	3901c <k_delayed_work_cancel>
}
   22a6e:	bd08      	pop	{r3, pc}
   22a70:	20031500 	.word	0x20031500
   22a74:	0020c49b 	.word	0x0020c49b
   22a78:	20029f2d 	.word	0x20029f2d
   22a7c:	20023a14 	.word	0x20023a14
   22a80:	20023a08 	.word	0x20023a08

00022a84 <env_sensors_set_backoff_enable>:
	return data_send_interval_s;
}

void env_sensors_set_backoff_enable(const bool enable)
{
	backoff_enabled = enable;
   22a84:	4b01      	ldr	r3, [pc, #4]	; (22a8c <env_sensors_set_backoff_enable+0x8>)
   22a86:	7018      	strb	r0, [r3, #0]
}
   22a88:	4770      	bx	lr
   22a8a:	bf00      	nop
   22a8c:	20029f2c 	.word	0x20029f2c

00022a90 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   22a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a94:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   22a96:	7a83      	ldrb	r3, [r0, #10]
{
   22a98:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   22a9a:	009b      	lsls	r3, r3, #2
   22a9c:	3307      	adds	r3, #7
   22a9e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   22aa2:	ebad 0d03 	sub.w	sp, sp, r3
   22aa6:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   22aa8:	6843      	ldr	r3, [r0, #4]
{
   22aaa:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   22aac:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   22aae:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   22ab0:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   22ab4:	4281      	cmp	r1, r0
   22ab6:	d222      	bcs.n	22afe <z_sys_mem_pool_block_free+0x6e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22ab8:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   22aba:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22abc:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   22ac0:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22ac2:	d001      	beq.n	22ac8 <z_sys_mem_pool_block_free+0x38>
   22ac4:	f019 fafe 	bl	3c0c4 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   22ac8:	4604      	mov	r4, r0
	while (level >= 0) {
   22aca:	f1b8 0f00 	cmp.w	r8, #0
   22ace:	da1e      	bge.n	22b0e <z_sys_mem_pool_block_free+0x7e>
	__ASSERT(0, "out of levels");
   22ad0:	23bc      	movs	r3, #188	; 0xbc
   22ad2:	4a50      	ldr	r2, [pc, #320]	; (22c14 <z_sys_mem_pool_block_free+0x184>)
   22ad4:	4950      	ldr	r1, [pc, #320]	; (22c18 <z_sys_mem_pool_block_free+0x188>)
   22ad6:	4851      	ldr	r0, [pc, #324]	; (22c1c <z_sys_mem_pool_block_free+0x18c>)
   22ad8:	f019 fd7c 	bl	3c5d4 <printk>
   22adc:	4850      	ldr	r0, [pc, #320]	; (22c20 <z_sys_mem_pool_block_free+0x190>)
   22ade:	f019 fd79 	bl	3c5d4 <printk>
   22ae2:	21bc      	movs	r1, #188	; 0xbc
   22ae4:	484b      	ldr	r0, [pc, #300]	; (22c14 <z_sys_mem_pool_block_free+0x184>)
   22ae6:	f019 fdbb 	bl	3c660 <assert_post_action>
	return -1;
   22aea:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
   22aee:	4621      	mov	r1, r4
   22af0:	7c30      	ldrb	r0, [r6, #16]
   22af2:	f019 faf0 	bl	3c0d6 <pool_irq_unlock.isra.4>
}
   22af6:	3714      	adds	r7, #20
   22af8:	46bd      	mov	sp, r7
   22afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   22afe:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   22b00:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   22b02:	089b      	lsrs	r3, r3, #2
   22b04:	f023 0303 	bic.w	r3, r3, #3
   22b08:	f844 3f04 	str.w	r3, [r4, #4]!
   22b0c:	e7d2      	b.n	22ab4 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   22b0e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   22b12:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   22b14:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   22b18:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   22b1a:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   22b1c:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   22b1e:	603b      	str	r3, [r7, #0]
   22b20:	eb03 090a 	add.w	r9, r3, sl
	int bit = get_bit_ptr(p, level, bn, &word);
   22b24:	4630      	mov	r0, r6
   22b26:	f107 030c 	add.w	r3, r7, #12
   22b2a:	f019 fab4 	bl	3c096 <get_bit_ptr>
	return (*word >> bit) & 1;
   22b2e:	68fb      	ldr	r3, [r7, #12]
   22b30:	681b      	ldr	r3, [r3, #0]
   22b32:	fa23 f000 	lsr.w	r0, r3, r0
		__ASSERT(alloc_bit_is_set(p, level, bn),
   22b36:	07c3      	lsls	r3, r0, #31
   22b38:	d40d      	bmi.n	22b56 <z_sys_mem_pool_block_free+0xc6>
   22b3a:	23a3      	movs	r3, #163	; 0xa3
   22b3c:	4a35      	ldr	r2, [pc, #212]	; (22c14 <z_sys_mem_pool_block_free+0x184>)
   22b3e:	4939      	ldr	r1, [pc, #228]	; (22c24 <z_sys_mem_pool_block_free+0x194>)
   22b40:	4836      	ldr	r0, [pc, #216]	; (22c1c <z_sys_mem_pool_block_free+0x18c>)
   22b42:	f019 fd47 	bl	3c5d4 <printk>
   22b46:	4649      	mov	r1, r9
   22b48:	4837      	ldr	r0, [pc, #220]	; (22c28 <z_sys_mem_pool_block_free+0x198>)
   22b4a:	f019 fd43 	bl	3c5d4 <printk>
   22b4e:	21a3      	movs	r1, #163	; 0xa3
   22b50:	4830      	ldr	r0, [pc, #192]	; (22c14 <z_sys_mem_pool_block_free+0x184>)
   22b52:	f019 fd85 	bl	3c660 <assert_post_action>
	int bit = get_bit_ptr(p, level, bn, &word);
   22b56:	f107 030c 	add.w	r3, r7, #12
   22b5a:	462a      	mov	r2, r5
   22b5c:	4641      	mov	r1, r8
   22b5e:	4630      	mov	r0, r6
   22b60:	f019 fa99 	bl	3c096 <get_bit_ptr>
	*word &= ~(1<<bit);
   22b64:	2301      	movs	r3, #1
   22b66:	68fa      	ldr	r2, [r7, #12]
   22b68:	fa03 f000 	lsl.w	r0, r3, r0
   22b6c:	6813      	ldr	r3, [r2, #0]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   22b6e:	6839      	ldr	r1, [r7, #0]
   22b70:	ea23 0300 	bic.w	r3, r3, r0
   22b74:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   22b76:	230c      	movs	r3, #12
   22b78:	68f2      	ldr	r2, [r6, #12]
   22b7a:	fb03 2308 	mla	r3, r3, r8, r2
   22b7e:	1d1a      	adds	r2, r3, #4
   22b80:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   22b84:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   22b86:	4621      	mov	r1, r4
   22b88:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
   22b8c:	689a      	ldr	r2, [r3, #8]
   22b8e:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   22b92:	f8c3 9008 	str.w	r9, [r3, #8]
   22b96:	7c30      	ldrb	r0, [r6, #16]
   22b98:	f019 fa9d 	bl	3c0d6 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   22b9c:	7c30      	ldrb	r0, [r6, #16]
   22b9e:	f010 0001 	ands.w	r0, r0, #1
   22ba2:	d001      	beq.n	22ba8 <z_sys_mem_pool_block_free+0x118>
   22ba4:	f019 fa8e 	bl	3c0c4 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   22ba8:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   22baa:	f1b8 0f00 	cmp.w	r8, #0
   22bae:	d09e      	beq.n	22aee <z_sys_mem_pool_block_free+0x5e>
	int bit = get_bit_ptr(p, level, bn, &word);
   22bb0:	f107 030c 	add.w	r3, r7, #12
   22bb4:	462a      	mov	r2, r5
   22bb6:	4641      	mov	r1, r8
   22bb8:	4630      	mov	r0, r6
   22bba:	f019 fa6c 	bl	3c096 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   22bbe:	68fb      	ldr	r3, [r7, #12]
   22bc0:	2800      	cmp	r0, #0
   22bc2:	bfb8      	it	lt
   22bc4:	3003      	addlt	r0, #3
   22bc6:	681b      	ldr	r3, [r3, #0]
   22bc8:	f020 0003 	bic.w	r0, r0, #3
   22bcc:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   22bd0:	f010 000f 	ands.w	r0, r0, #15
   22bd4:	d18b      	bne.n	22aee <z_sys_mem_pool_block_free+0x5e>
	node->next = NULL;
   22bd6:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   22bd8:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   22bdc:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   22bde:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   22be2:	4353      	muls	r3, r2
   22be4:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   22be6:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   22be8:	18d1      	adds	r1, r2, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   22bea:	f8d1 9004 	ldr.w	r9, [r1, #4]
   22bee:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   22bf2:	2804      	cmp	r0, #4
   22bf4:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   22bf8:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   22bfc:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   22c00:	f8c1 c004 	str.w	ip, [r1, #4]
   22c04:	d1ea      	bne.n	22bdc <z_sys_mem_pool_block_free+0x14c>
		bn = bn / 4;
   22c06:	2d00      	cmp	r5, #0
   22c08:	bfb8      	it	lt
   22c0a:	3503      	addlt	r5, #3
		level = level - 1;
   22c0c:	f108 38ff 	add.w	r8, r8, #4294967295
		bn = bn / 4;
   22c10:	10ad      	asrs	r5, r5, #2
   22c12:	e75a      	b.n	22aca <z_sys_mem_pool_block_free+0x3a>
   22c14:	000422ed 	.word	0x000422ed
   22c18:	00046834 	.word	0x00046834
   22c1c:	00041757 	.word	0x00041757
   22c20:	0004234e 	.word	0x0004234e
   22c24:	0004230a 	.word	0x0004230a
   22c28:	00042329 	.word	0x00042329

00022c2c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   22c2c:	680b      	ldr	r3, [r1, #0]
   22c2e:	3301      	adds	r3, #1
   22c30:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   22c32:	4b01      	ldr	r3, [pc, #4]	; (22c38 <char_out+0xc>)
   22c34:	681b      	ldr	r3, [r3, #0]
   22c36:	4718      	bx	r3
   22c38:	20031504 	.word	0x20031504

00022c3c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   22c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c40:	b085      	sub	sp, #20
   22c42:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   22c44:	469b      	mov	fp, r3
   22c46:	2c01      	cmp	r4, #1
   22c48:	bfb8      	it	lt
   22c4a:	2401      	movlt	r4, #1
   22c4c:	2b01      	cmp	r3, #1
   22c4e:	bf0c      	ite	eq
   22c50:	2330      	moveq	r3, #48	; 0x30
   22c52:	2320      	movne	r3, #32
   22c54:	4616      	mov	r6, r2
   22c56:	4682      	mov	sl, r0
   22c58:	4688      	mov	r8, r1
   22c5a:	2501      	movs	r5, #1
   22c5c:	270a      	movs	r7, #10
   22c5e:	2200      	movs	r2, #0
   22c60:	f8df 906c 	ldr.w	r9, [pc, #108]	; 22cd0 <_printk_dec_ulong+0x94>
   22c64:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   22c66:	fbb6 f3f9 	udiv	r3, r6, r9
   22c6a:	9301      	str	r3, [sp, #4]
   22c6c:	b90a      	cbnz	r2, 22c72 <_printk_dec_ulong+0x36>
   22c6e:	45b1      	cmp	r9, r6
   22c70:	d81c      	bhi.n	22cac <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   22c72:	9b01      	ldr	r3, [sp, #4]
   22c74:	4641      	mov	r1, r8
   22c76:	f103 0030 	add.w	r0, r3, #48	; 0x30
   22c7a:	47d0      	blx	sl
			found_largest_digit = 1;
   22c7c:	2201      	movs	r2, #1
			digits++;
   22c7e:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
   22c80:	9b01      	ldr	r3, [sp, #4]
		remaining--;
   22c82:	3f01      	subs	r7, #1
		remainder %= pos;
   22c84:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
   22c88:	230a      	movs	r3, #10
	while (pos >= 10) {
   22c8a:	2f01      	cmp	r7, #1
		pos /= 10;
   22c8c:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
   22c90:	d1e9      	bne.n	22c66 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
   22c92:	4641      	mov	r1, r8
   22c94:	f106 0030 	add.w	r0, r6, #48	; 0x30
   22c98:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
   22c9a:	f1bb 0f03 	cmp.w	fp, #3
   22c9e:	d102      	bne.n	22ca6 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
   22ca0:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
   22ca2:	2c00      	cmp	r4, #0
   22ca4:	dc0e      	bgt.n	22cc4 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
   22ca6:	b005      	add	sp, #20
   22ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   22cac:	42bc      	cmp	r4, r7
   22cae:	dbe7      	blt.n	22c80 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
   22cb0:	f1bb 0f02 	cmp.w	fp, #2
   22cb4:	d8e4      	bhi.n	22c80 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   22cb6:	4641      	mov	r1, r8
   22cb8:	9802      	ldr	r0, [sp, #8]
   22cba:	9203      	str	r2, [sp, #12]
			digits++;
   22cbc:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   22cbe:	47d0      	blx	sl
			digits++;
   22cc0:	9a03      	ldr	r2, [sp, #12]
   22cc2:	e7dd      	b.n	22c80 <_printk_dec_ulong+0x44>
			out(' ', ctx);
   22cc4:	4641      	mov	r1, r8
   22cc6:	2020      	movs	r0, #32
   22cc8:	47d0      	blx	sl
   22cca:	3c01      	subs	r4, #1
   22ccc:	e7e9      	b.n	22ca2 <_printk_dec_ulong+0x66>
   22cce:	bf00      	nop
   22cd0:	3b9aca00 	.word	0x3b9aca00

00022cd4 <__printk_hook_install>:
	_char_out = fn;
   22cd4:	4b01      	ldr	r3, [pc, #4]	; (22cdc <__printk_hook_install+0x8>)
   22cd6:	6018      	str	r0, [r3, #0]
}
   22cd8:	4770      	bx	lr
   22cda:	bf00      	nop
   22cdc:	20031504 	.word	0x20031504

00022ce0 <vprintk>:
	struct out_context ctx = { 0 };
   22ce0:	2300      	movs	r3, #0
{
   22ce2:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
   22ce4:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   22ce6:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   22ce8:	4803      	ldr	r0, [pc, #12]	; (22cf8 <vprintk+0x18>)
   22cea:	460b      	mov	r3, r1
   22cec:	a901      	add	r1, sp, #4
   22cee:	f019 fb01 	bl	3c2f4 <z_vprintk>
}
   22cf2:	b003      	add	sp, #12
   22cf4:	f85d fb04 	ldr.w	pc, [sp], #4
   22cf8:	00022c2d 	.word	0x00022c2d

00022cfc <nordicsemi_nrf91_init>:
	__asm__ volatile(
   22cfc:	f04f 0220 	mov.w	r2, #32
   22d00:	f3ef 8311 	mrs	r3, BASEPRI
   22d04:	f382 8811 	msr	BASEPRI, r2
   22d08:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   22d0c:	2101      	movs	r1, #1
   22d0e:	4a04      	ldr	r2, [pc, #16]	; (22d20 <nordicsemi_nrf91_init+0x24>)
   22d10:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   22d14:	f383 8811 	msr	BASEPRI, r3
   22d18:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   22d1c:	2000      	movs	r0, #0
   22d1e:	4770      	bx	lr
   22d20:	40039000 	.word	0x40039000

00022d24 <log_generic>:
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else  if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		u32_t timestamp = timestamp_func();
   22d24:	4b13      	ldr	r3, [pc, #76]	; (22d74 <log_generic+0x50>)
{
   22d26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		u32_t timestamp = timestamp_func();
   22d2a:	681b      	ldr	r3, [r3, #0]
{
   22d2c:	4680      	mov	r8, r0
   22d2e:	4689      	mov	r9, r1
   22d30:	4692      	mov	sl, r2
		u32_t timestamp = timestamp_func();
   22d32:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   22d34:	2600      	movs	r6, #0
		u32_t timestamp = timestamp_func();
   22d36:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   22d38:	4c0f      	ldr	r4, [pc, #60]	; (22d78 <log_generic+0x54>)
   22d3a:	4d10      	ldr	r5, [pc, #64]	; (22d7c <log_generic+0x58>)
   22d3c:	1b2d      	subs	r5, r5, r4
   22d3e:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   22d40:	42ae      	cmp	r6, r5
   22d42:	db02      	blt.n	22d4a <log_generic+0x26>
			args[i] = va_arg(ap, log_arg_t);
		}

		log_n(fmt, args, nargs, src_level);
	}
}
   22d44:	b003      	add	sp, #12
   22d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend)) {
   22d4a:	4620      	mov	r0, r4
   22d4c:	f019 fc92 	bl	3c674 <log_backend_is_active>
   22d50:	b160      	cbz	r0, 22d6c <log_generic+0x48>
	if (backend->api->put_sync_string) {
   22d52:	6823      	ldr	r3, [r4, #0]
   22d54:	f8d3 b004 	ldr.w	fp, [r3, #4]
   22d58:	f1bb 0f00 	cmp.w	fp, #0
   22d5c:	d006      	beq.n	22d6c <log_generic+0x48>
		backend->api->put_sync_string(backend, src_level,
   22d5e:	f8cd a000 	str.w	sl, [sp]
   22d62:	464b      	mov	r3, r9
   22d64:	463a      	mov	r2, r7
   22d66:	4641      	mov	r1, r8
   22d68:	4620      	mov	r0, r4
   22d6a:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   22d6c:	3601      	adds	r6, #1
   22d6e:	3410      	adds	r4, #16
   22d70:	e7e6      	b.n	22d40 <log_generic+0x1c>
   22d72:	bf00      	nop
   22d74:	20031508 	.word	0x20031508
   22d78:	000403f4 	.word	0x000403f4
   22d7c:	00040404 	.word	0x00040404

00022d80 <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
   22d80:	4b03      	ldr	r3, [pc, #12]	; (22d90 <log_core_init+0x10>)
   22d82:	4a04      	ldr	r2, [pc, #16]	; (22d94 <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
   22d84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   22d88:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   22d8a:	f000 ba35 	b.w	231f8 <log_output_timestamp_freq_set>
   22d8e:	bf00      	nop
   22d90:	20031508 	.word	0x20031508
   22d94:	0003c67b 	.word	0x0003c67b

00022d98 <log_source_name_get>:
   22d98:	4a04      	ldr	r2, [pc, #16]	; (22dac <log_source_name_get+0x14>)
   22d9a:	4b05      	ldr	r3, [pc, #20]	; (22db0 <log_source_name_get+0x18>)
   22d9c:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(u32_t domain_id, u32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   22d9e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   22da2:	bf34      	ite	cc
   22da4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   22da8:	2000      	movcs	r0, #0
}
   22daa:	4770      	bx	lr
   22dac:	000402cc 	.word	0x000402cc
   22db0:	000403f4 	.word	0x000403f4

00022db4 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			u32_t level)
{
   22db4:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	u32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   22db6:	4c10      	ldr	r4, [pc, #64]	; (22df8 <log_backend_enable+0x44>)
{
   22db8:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   22dba:	1b04      	subs	r4, r0, r4
   22dbc:	1124      	asrs	r4, r4, #4
   22dbe:	3401      	adds	r4, #1
{
   22dc0:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   22dc2:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   22dc4:	b948      	cbnz	r0, 22dda <log_backend_enable+0x26>
   22dc6:	490d      	ldr	r1, [pc, #52]	; (22dfc <log_backend_enable+0x48>)
   22dc8:	480d      	ldr	r0, [pc, #52]	; (22e00 <log_backend_enable+0x4c>)
   22dca:	23c0      	movs	r3, #192	; 0xc0
   22dcc:	4a0d      	ldr	r2, [pc, #52]	; (22e04 <log_backend_enable+0x50>)
   22dce:	f019 fc01 	bl	3c5d4 <printk>
   22dd2:	21c0      	movs	r1, #192	; 0xc0
   22dd4:	480b      	ldr	r0, [pc, #44]	; (22e04 <log_backend_enable+0x50>)
   22dd6:	f019 fc43 	bl	3c660 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   22dda:	2201      	movs	r2, #1
	backend->cb->id = id;
   22ddc:	686b      	ldr	r3, [r5, #4]
   22dde:	711c      	strb	r4, [r3, #4]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
   22de0:	4c09      	ldr	r4, [pc, #36]	; (22e08 <log_backend_enable+0x54>)
	backend->cb->active = true;
   22de2:	715a      	strb	r2, [r3, #5]
   22de4:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   22de6:	601e      	str	r6, [r3, #0]
   22de8:	b912      	cbnz	r2, 22df0 <log_backend_enable+0x3c>
	z_impl_k_sem_give(sem);
   22dea:	4808      	ldr	r0, [pc, #32]	; (22e0c <log_backend_enable+0x58>)
   22dec:	f015 fd86 	bl	388fc <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   22df0:	2301      	movs	r3, #1
   22df2:	7023      	strb	r3, [r4, #0]
}
   22df4:	bd70      	pop	{r4, r5, r6, pc}
   22df6:	bf00      	nop
   22df8:	000403f4 	.word	0x000403f4
   22dfc:	00041740 	.word	0x00041740
   22e00:	00041757 	.word	0x00041757
   22e04:	0004236b 	.word	0x0004236b
   22e08:	20029f2e 	.word	0x20029f2e
   22e0c:	200318b0 	.word	0x200318b0

00022e10 <log_init>:
{
   22e10:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   22e12:	4b13      	ldr	r3, [pc, #76]	; (22e60 <log_init+0x50>)
   22e14:	4c13      	ldr	r4, [pc, #76]	; (22e64 <log_init+0x54>)
   22e16:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   22e18:	2b90      	cmp	r3, #144	; 0x90
   22e1a:	dd06      	ble.n	22e2a <log_init+0x1a>
   22e1c:	4b12      	ldr	r3, [pc, #72]	; (22e68 <log_init+0x58>)
   22e1e:	4a13      	ldr	r2, [pc, #76]	; (22e6c <log_init+0x5c>)
   22e20:	f240 11ed 	movw	r1, #493	; 0x1ed
   22e24:	4812      	ldr	r0, [pc, #72]	; (22e70 <log_init+0x60>)
   22e26:	f016 ffc1 	bl	39dac <__assert_func>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22e2a:	4a12      	ldr	r2, [pc, #72]	; (22e74 <log_init+0x64>)
   22e2c:	e8d2 6fef 	ldaex	r6, [r2]
   22e30:	1c71      	adds	r1, r6, #1
   22e32:	e8c2 1fe0 	stlex	r0, r1, [r2]
   22e36:	2800      	cmp	r0, #0
   22e38:	d1f8      	bne.n	22e2c <log_init+0x1c>
	if (atomic_inc(&initialized) != 0) {
   22e3a:	b916      	cbnz	r6, 22e42 <log_init+0x32>
   22e3c:	111d      	asrs	r5, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   22e3e:	42ae      	cmp	r6, r5
   22e40:	db00      	blt.n	22e44 <log_init+0x34>
}
   22e42:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   22e44:	7b23      	ldrb	r3, [r4, #12]
   22e46:	b143      	cbz	r3, 22e5a <log_init+0x4a>
			if (backend->api->init != NULL) {
   22e48:	6823      	ldr	r3, [r4, #0]
   22e4a:	695b      	ldr	r3, [r3, #20]
   22e4c:	b103      	cbz	r3, 22e50 <log_init+0x40>
				backend->api->init();
   22e4e:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   22e50:	2204      	movs	r2, #4
   22e52:	2100      	movs	r1, #0
   22e54:	4620      	mov	r0, r4
   22e56:	f7ff ffad 	bl	22db4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   22e5a:	3601      	adds	r6, #1
   22e5c:	3410      	adds	r4, #16
   22e5e:	e7ee      	b.n	22e3e <log_init+0x2e>
   22e60:	00040404 	.word	0x00040404
   22e64:	000403f4 	.word	0x000403f4
   22e68:	00042395 	.word	0x00042395
   22e6c:	00042362 	.word	0x00042362
   22e70:	000423cc 	.word	0x000423cc
   22e74:	20023a2c 	.word	0x20023a2c

00022e78 <z_impl_log_panic>:
{
   22e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   22e7a:	4f0c      	ldr	r7, [pc, #48]	; (22eac <z_impl_log_panic+0x34>)
   22e7c:	783d      	ldrb	r5, [r7, #0]
   22e7e:	b94d      	cbnz	r5, 22e94 <z_impl_log_panic+0x1c>
	log_init();
   22e80:	f7ff ffc6 	bl	22e10 <log_init>
   22e84:	4c0a      	ldr	r4, [pc, #40]	; (22eb0 <z_impl_log_panic+0x38>)
   22e86:	4e0b      	ldr	r6, [pc, #44]	; (22eb4 <z_impl_log_panic+0x3c>)
   22e88:	1b36      	subs	r6, r6, r4
   22e8a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   22e8c:	42b5      	cmp	r5, r6
   22e8e:	db02      	blt.n	22e96 <z_impl_log_panic+0x1e>
	panic_mode = true;
   22e90:	2301      	movs	r3, #1
   22e92:	703b      	strb	r3, [r7, #0]
}
   22e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   22e96:	4620      	mov	r0, r4
   22e98:	f019 fbec 	bl	3c674 <log_backend_is_active>
   22e9c:	b118      	cbz	r0, 22ea6 <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
   22e9e:	6823      	ldr	r3, [r4, #0]
   22ea0:	4620      	mov	r0, r4
   22ea2:	691b      	ldr	r3, [r3, #16]
   22ea4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   22ea6:	3501      	adds	r5, #1
   22ea8:	3410      	adds	r4, #16
   22eaa:	e7ef      	b.n	22e8c <z_impl_log_panic+0x14>
   22eac:	20029f2f 	.word	0x20029f2f
   22eb0:	000403f4 	.word	0x000403f4
   22eb4:	00040404 	.word	0x00040404

00022eb8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   22eb8:	b40e      	push	{r1, r2, r3}
   22eba:	b503      	push	{r0, r1, lr}
   22ebc:	ab03      	add	r3, sp, #12
   22ebe:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   22ec2:	4601      	mov	r1, r0
   22ec4:	4804      	ldr	r0, [pc, #16]	; (22ed8 <print_formatted+0x20>)
	va_start(args, fmt);
   22ec6:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   22ec8:	f019 fa14 	bl	3c2f4 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   22ecc:	2000      	movs	r0, #0
   22ece:	b002      	add	sp, #8
   22ed0:	f85d eb04 	ldr.w	lr, [sp], #4
   22ed4:	b003      	add	sp, #12
   22ed6:	4770      	bx	lr
   22ed8:	0003c6a9 	.word	0x0003c6a9

00022edc <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
   22edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   22ee0:	f011 0402 	ands.w	r4, r1, #2
{
   22ee4:	b085      	sub	sp, #20
   22ee6:	4606      	mov	r6, r0
   22ee8:	4690      	mov	r8, r2
   22eea:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   22eee:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   22ef2:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   22ef6:	d007      	beq.n	22f08 <prefix_print+0x2c>
	if (!format) {
   22ef8:	f011 0f44 	tst.w	r1, #68	; 0x44
   22efc:	d137      	bne.n	22f6e <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   22efe:	461a      	mov	r2, r3
   22f00:	4932      	ldr	r1, [pc, #200]	; (22fcc <prefix_print+0xf0>)
   22f02:	f7ff ffd9 	bl	22eb8 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   22f06:	4604      	mov	r4, r0
	if (color) {
   22f08:	f1b9 0f00 	cmp.w	r9, #0
   22f0c:	d00a      	beq.n	22f24 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
   22f0e:	4b30      	ldr	r3, [pc, #192]	; (22fd0 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
   22f10:	4930      	ldr	r1, [pc, #192]	; (22fd4 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
   22f12:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
   22f16:	4b30      	ldr	r3, [pc, #192]	; (22fd8 <prefix_print+0xfc>)
   22f18:	4630      	mov	r0, r6
   22f1a:	2a00      	cmp	r2, #0
   22f1c:	bf08      	it	eq
   22f1e:	461a      	moveq	r2, r3
   22f20:	f7ff ffca 	bl	22eb8 <print_formatted>
	if (level_on) {
   22f24:	b13d      	cbz	r5, 22f36 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   22f26:	4b2d      	ldr	r3, [pc, #180]	; (22fdc <prefix_print+0x100>)
   22f28:	492d      	ldr	r1, [pc, #180]	; (22fe0 <prefix_print+0x104>)
   22f2a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   22f2e:	4630      	mov	r0, r6
   22f30:	f7ff ffc2 	bl	22eb8 <print_formatted>
   22f34:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   22f36:	f1b8 0f00 	cmp.w	r8, #0
   22f3a:	d044      	beq.n	22fc6 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   22f3c:	2301      	movs	r3, #1
   22f3e:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   22f42:	4b28      	ldr	r3, [pc, #160]	; (22fe4 <prefix_print+0x108>)
   22f44:	f017 0f10 	tst.w	r7, #16
   22f48:	4f27      	ldr	r7, [pc, #156]	; (22fe8 <prefix_print+0x10c>)
   22f4a:	bf18      	it	ne
   22f4c:	461f      	movne	r7, r3
   22f4e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   22f52:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   22f56:	f7ff ff1f 	bl	22d98 <log_source_name_get>
   22f5a:	4639      	mov	r1, r7
   22f5c:	4602      	mov	r2, r0
   22f5e:	4630      	mov	r0, r6
   22f60:	f7ff ffaa 	bl	22eb8 <print_formatted>
   22f64:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
   22f66:	4420      	add	r0, r4
   22f68:	b005      	add	sp, #20
   22f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   22f6e:	4a1f      	ldr	r2, [pc, #124]	; (22fec <prefix_print+0x110>)
   22f70:	6811      	ldr	r1, [r2, #0]
   22f72:	b331      	cbz	r1, 22fc2 <prefix_print+0xe6>
		timestamp /= timestamp_div;
   22f74:	4a1e      	ldr	r2, [pc, #120]	; (22ff0 <prefix_print+0x114>)
   22f76:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   22f7a:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   22f7c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   22f80:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
   22f84:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   22f88:	fbb4 f2fe 	udiv	r2, r4, lr
   22f8c:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   22f90:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   22f94:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   22f98:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   22f9c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   22fa0:	fb01 441b 	mls	r4, r1, fp, r4
   22fa4:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   22fa8:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   22fac:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   22fb0:	e9cd b101 	strd	fp, r1, [sp, #4]
   22fb4:	fb0a e113 	mls	r1, sl, r3, lr
   22fb8:	9100      	str	r1, [sp, #0]
   22fba:	490e      	ldr	r1, [pc, #56]	; (22ff4 <prefix_print+0x118>)
   22fbc:	f7ff ff7c 	bl	22eb8 <print_formatted>
   22fc0:	e7a1      	b.n	22f06 <prefix_print+0x2a>
		length = 0;
   22fc2:	4608      	mov	r0, r1
   22fc4:	e79f      	b.n	22f06 <prefix_print+0x2a>
	total += print_formatted(log_output,
   22fc6:	4f08      	ldr	r7, [pc, #32]	; (22fe8 <prefix_print+0x10c>)
   22fc8:	e7c1      	b.n	22f4e <prefix_print+0x72>
   22fca:	bf00      	nop
   22fcc:	00042462 	.word	0x00042462
   22fd0:	0004064c 	.word	0x0004064c
   22fd4:	00045f68 	.word	0x00045f68
   22fd8:	00042454 	.word	0x00042454
   22fdc:	00040660 	.word	0x00040660
   22fe0:	00042487 	.word	0x00042487
   22fe4:	0004245e 	.word	0x0004245e
   22fe8:	00042459 	.word	0x00042459
   22fec:	20023a30 	.word	0x20023a30
   22ff0:	20023a34 	.word	0x20023a34
   22ff4:	0004246b 	.word	0x0004246b

00022ff8 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
   22ff8:	b538      	push	{r3, r4, r5, lr}
   22ffa:	460c      	mov	r4, r1
	if (color) {
   22ffc:	07e1      	lsls	r1, r4, #31
{
   22ffe:	4605      	mov	r5, r0
	if (color) {
   23000:	d503      	bpl.n	2300a <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
   23002:	4a08      	ldr	r2, [pc, #32]	; (23024 <postfix_print+0x2c>)
   23004:	4908      	ldr	r1, [pc, #32]	; (23028 <postfix_print+0x30>)
   23006:	f7ff ff57 	bl	22eb8 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   2300a:	06e2      	lsls	r2, r4, #27
   2300c:	d408      	bmi.n	23020 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   2300e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   23010:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   23012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   23016:	bf4c      	ite	mi
   23018:	4904      	ldrmi	r1, [pc, #16]	; (2302c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   2301a:	4905      	ldrpl	r1, [pc, #20]	; (23030 <postfix_print+0x38>)
   2301c:	f7ff bf4c 	b.w	22eb8 <print_formatted>
}
   23020:	bd38      	pop	{r3, r4, r5, pc}
   23022:	bf00      	nop
   23024:	00042454 	.word	0x00042454
   23028:	00045f68 	.word	0x00045f68
   2302c:	00043120 	.word	0x00043120
   23030:	00045160 	.word	0x00045160

00023034 <hexdump_line_print>:
{
   23034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23038:	4698      	mov	r8, r3
   2303a:	9b08      	ldr	r3, [sp, #32]
   2303c:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   2303e:	06dd      	lsls	r5, r3, #27
{
   23040:	460e      	mov	r6, r1
   23042:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   23044:	d405      	bmi.n	23052 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   23046:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   23048:	bf4c      	ite	mi
   2304a:	492a      	ldrmi	r1, [pc, #168]	; (230f4 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   2304c:	492a      	ldrpl	r1, [pc, #168]	; (230f8 <hexdump_line_print+0xc4>)
   2304e:	f7ff ff33 	bl	22eb8 <print_formatted>
{
   23052:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
   23054:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 23100 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   23058:	4545      	cmp	r5, r8
   2305a:	db2d      	blt.n	230b8 <hexdump_line_print+0x84>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2305c:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   2305e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 23104 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
   23062:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23108 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
   23066:	f8df a098 	ldr.w	sl, [pc, #152]	; 23100 <hexdump_line_print+0xcc>
		if (i < length) {
   2306a:	42bd      	cmp	r5, r7
   2306c:	d231      	bcs.n	230d2 <hexdump_line_print+0x9e>
			print_formatted(log_output, "%02x ", data[i]);
   2306e:	5d72      	ldrb	r2, [r6, r5]
   23070:	4649      	mov	r1, r9
   23072:	4620      	mov	r0, r4
   23074:	f7ff ff20 	bl	22eb8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   23078:	3501      	adds	r5, #1
   2307a:	2d10      	cmp	r5, #16
   2307c:	d122      	bne.n	230c4 <hexdump_line_print+0x90>
	print_formatted(log_output, "|");
   2307e:	491f      	ldr	r1, [pc, #124]	; (230fc <hexdump_line_print+0xc8>)
   23080:	4620      	mov	r0, r4
   23082:	f7ff ff19 	bl	22eb8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   23086:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   23088:	f8df 8074 	ldr.w	r8, [pc, #116]	; 23100 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
   2308c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 2310c <hexdump_line_print+0xd8>
			print_formatted(log_output, "%c",
   23090:	f8df a07c 	ldr.w	sl, [pc, #124]	; 23110 <hexdump_line_print+0xdc>
		if (i < length) {
   23094:	42af      	cmp	r7, r5
   23096:	d928      	bls.n	230ea <hexdump_line_print+0xb6>
			char c = (char)data[i];
   23098:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   2309a:	4651      	mov	r1, sl
   2309c:	f812 3009 	ldrb.w	r3, [r2, r9]
   230a0:	4620      	mov	r0, r4
   230a2:	f013 0f97 	tst.w	r3, #151	; 0x97
   230a6:	bf08      	it	eq
   230a8:	222e      	moveq	r2, #46	; 0x2e
   230aa:	f7ff ff05 	bl	22eb8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   230ae:	3501      	adds	r5, #1
   230b0:	2d10      	cmp	r5, #16
   230b2:	d113      	bne.n	230dc <hexdump_line_print+0xa8>
}
   230b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   230b8:	4649      	mov	r1, r9
   230ba:	4620      	mov	r0, r4
   230bc:	f7ff fefc 	bl	22eb8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   230c0:	3501      	adds	r5, #1
   230c2:	e7c9      	b.n	23058 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
   230c4:	076a      	lsls	r2, r5, #29
   230c6:	d1d0      	bne.n	2306a <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
   230c8:	4651      	mov	r1, sl
   230ca:	4620      	mov	r0, r4
   230cc:	f7ff fef4 	bl	22eb8 <print_formatted>
   230d0:	e7cb      	b.n	2306a <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
   230d2:	4641      	mov	r1, r8
   230d4:	4620      	mov	r0, r4
   230d6:	f7ff feef 	bl	22eb8 <print_formatted>
   230da:	e7cd      	b.n	23078 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
   230dc:	076b      	lsls	r3, r5, #29
   230de:	d1d9      	bne.n	23094 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   230e0:	4641      	mov	r1, r8
   230e2:	4620      	mov	r0, r4
   230e4:	f7ff fee8 	bl	22eb8 <print_formatted>
   230e8:	e7d4      	b.n	23094 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   230ea:	4641      	mov	r1, r8
   230ec:	4620      	mov	r0, r4
   230ee:	f7ff fee3 	bl	22eb8 <print_formatted>
   230f2:	e7dc      	b.n	230ae <hexdump_line_print+0x7a>
   230f4:	00043120 	.word	0x00043120
   230f8:	00045160 	.word	0x00045160
   230fc:	00042414 	.word	0x00042414
   23100:	00042412 	.word	0x00042412
   23104:	00042410 	.word	0x00042410
   23108:	0004240a 	.word	0x0004240a
   2310c:	00046c56 	.word	0x00046c56
   23110:	00042416 	.word	0x00042416

00023114 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, u32_t timestamp,
		       const char *fmt, va_list ap, u32_t flags)
{
   23114:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   23118:	f011 0407 	ands.w	r4, r1, #7
{
   2311c:	4606      	mov	r6, r0
   2311e:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   23122:	461d      	mov	r5, r3
	if (!raw_string) {
   23124:	d00b      	beq.n	2313e <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
   23126:	f3c1 1389 	ubfx	r3, r1, #6, #10
   2312a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   2312e:	9302      	str	r3, [sp, #8]
   23130:	e9cd 4100 	strd	r4, r1, [sp]
   23134:	4613      	mov	r3, r2
   23136:	4639      	mov	r1, r7
   23138:	2201      	movs	r2, #1
   2313a:	f7ff fecf 	bl	22edc <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
   2313e:	4643      	mov	r3, r8
   23140:	462a      	mov	r2, r5
   23142:	4631      	mov	r1, r6
   23144:	480d      	ldr	r0, [pc, #52]	; (2317c <log_output_string+0x68>)
   23146:	f019 f8d5 	bl	3c2f4 <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
   2314a:	b98c      	cbnz	r4, 23170 <log_output_string+0x5c>
   2314c:	3d01      	subs	r5, #1
	while (*fmt != '\0') {
   2314e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   23152:	b95b      	cbnz	r3, 2316c <log_output_string+0x58>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   23154:	2c0a      	cmp	r4, #10
   23156:	d103      	bne.n	23160 <log_output_string+0x4c>
			print_formatted(log_output, "\r");
   23158:	4909      	ldr	r1, [pc, #36]	; (23180 <log_output_string+0x6c>)
   2315a:	4630      	mov	r0, r6
   2315c:	f7ff feac 	bl	22eb8 <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
   23160:	4630      	mov	r0, r6
}
   23162:	b004      	add	sp, #16
   23164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
   23168:	f019 bab7 	b.w	3c6da <log_output_flush>
	while (*fmt != '\0') {
   2316c:	461c      	mov	r4, r3
   2316e:	e7ee      	b.n	2314e <log_output_string+0x3a>
		postfix_print(log_output, flags, level);
   23170:	4622      	mov	r2, r4
   23172:	4639      	mov	r1, r7
   23174:	4630      	mov	r0, r6
   23176:	f7ff ff3f 	bl	22ff8 <postfix_print>
   2317a:	e7f1      	b.n	23160 <log_output_string+0x4c>
   2317c:	0003c6a9 	.word	0x0003c6a9
   23180:	00042452 	.word	0x00042452

00023184 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, u32_t timestamp,
			     const char *metadata, const u8_t *data,
			     u32_t length, u32_t flags)
{
   23184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   23188:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2318a:	4698      	mov	r8, r3
   2318c:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   23190:	f3c1 1389 	ubfx	r3, r1, #6, #10
	u8_t level = (u8_t)src_level.level;
   23194:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   23198:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   2319c:	9302      	str	r3, [sp, #8]
   2319e:	e9cd 9100 	strd	r9, r1, [sp]
   231a2:	4613      	mov	r3, r2
   231a4:	4631      	mov	r1, r6
   231a6:	2201      	movs	r2, #1
{
   231a8:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   231aa:	f7ff fe97 	bl	22edc <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
   231ae:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   231b0:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
   231b2:	4910      	ldr	r1, [pc, #64]	; (231f4 <log_output_hexdump+0x70>)
   231b4:	4620      	mov	r0, r4
   231b6:	f7ff fe7f 	bl	22eb8 <print_formatted>

	while (length) {
   231ba:	b955      	cbnz	r5, 231d2 <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
   231bc:	4620      	mov	r0, r4
   231be:	464a      	mov	r2, r9
   231c0:	4631      	mov	r1, r6
   231c2:	f7ff ff19 	bl	22ff8 <postfix_print>
	log_output_flush(log_output);
   231c6:	4620      	mov	r0, r4
}
   231c8:	b004      	add	sp, #16
   231ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
   231ce:	f019 ba84 	b.w	3c6da <log_output_flush>
		u32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   231d2:	2d10      	cmp	r5, #16
   231d4:	46a8      	mov	r8, r5
   231d6:	bf28      	it	cs
   231d8:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
   231dc:	4639      	mov	r1, r7
   231de:	9600      	str	r6, [sp, #0]
   231e0:	4653      	mov	r3, sl
   231e2:	4642      	mov	r2, r8
   231e4:	4620      	mov	r0, r4
   231e6:	f7ff ff25 	bl	23034 <hexdump_line_print>
		data += part_len;
   231ea:	4447      	add	r7, r8
		length -= part_len;
   231ec:	eba5 0508 	sub.w	r5, r5, r8
   231f0:	e7e3      	b.n	231ba <log_output_hexdump+0x36>
   231f2:	bf00      	nop
   231f4:	00045f68 	.word	0x00045f68

000231f8 <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
   231f8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   231fa:	2100      	movs	r1, #0
	timestamp_div = 1U;
   231fc:	4a07      	ldr	r2, [pc, #28]	; (2321c <log_output_timestamp_freq_set+0x24>)
{
   231fe:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   23200:	4c07      	ldr	r4, [pc, #28]	; (23220 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   23202:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   23204:	42a0      	cmp	r0, r4
   23206:	d804      	bhi.n	23212 <log_output_timestamp_freq_set+0x1a>
   23208:	b101      	cbz	r1, 2320c <log_output_timestamp_freq_set+0x14>
   2320a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   2320c:	4b05      	ldr	r3, [pc, #20]	; (23224 <log_output_timestamp_freq_set+0x2c>)
   2320e:	6018      	str	r0, [r3, #0]
}
   23210:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   23212:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   23214:	005b      	lsls	r3, r3, #1
   23216:	2101      	movs	r1, #1
   23218:	e7f4      	b.n	23204 <log_output_timestamp_freq_set+0xc>
   2321a:	bf00      	nop
   2321c:	20023a34 	.word	0x20023a34
   23220:	000f4240 	.word	0x000f4240
   23224:	20023a30 	.word	0x20023a30

00023228 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   23228:	4801      	ldr	r0, [pc, #4]	; (23230 <panic+0x8>)
   2322a:	f019 ba56 	b.w	3c6da <log_output_flush>
   2322e:	bf00      	nop
   23230:	0004068c 	.word	0x0004068c

00023234 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
   23234:	b508      	push	{r3, lr}
   23236:	4806      	ldr	r0, [pc, #24]	; (23250 <log_backend_uart_init+0x1c>)
   23238:	f013 fa5e 	bl	366f8 <z_impl_device_get_binding>
	struct device *dev;

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);
   2323c:	b928      	cbnz	r0, 2324a <log_backend_uart_init+0x16>
   2323e:	4b05      	ldr	r3, [pc, #20]	; (23254 <log_backend_uart_init+0x20>)
   23240:	4a05      	ldr	r2, [pc, #20]	; (23258 <log_backend_uart_init+0x24>)
   23242:	212d      	movs	r1, #45	; 0x2d
   23244:	4805      	ldr	r0, [pc, #20]	; (2325c <log_backend_uart_init+0x28>)
   23246:	f016 fdb1 	bl	39dac <__assert_func>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
   2324a:	4b05      	ldr	r3, [pc, #20]	; (23260 <log_backend_uart_init+0x2c>)
   2324c:	6058      	str	r0, [r3, #4]

	log_output_ctx_set(&log_output, dev);
}
   2324e:	bd08      	pop	{r3, pc}
   23250:	000424c3 	.word	0x000424c3
   23254:	00042222 	.word	0x00042222
   23258:	000424ad 	.word	0x000424ad
   2325c:	000424ca 	.word	0x000424ca
   23260:	20023a40 	.word	0x20023a40

00023264 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
   23264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
   23266:	200f      	movs	r0, #15
   23268:	9002      	str	r0, [sp, #8]
   2326a:	9807      	ldr	r0, [sp, #28]
   2326c:	9001      	str	r0, [sp, #4]
   2326e:	9806      	ldr	r0, [sp, #24]
   23270:	9000      	str	r0, [sp, #0]
   23272:	4803      	ldr	r0, [pc, #12]	; (23280 <sync_hexdump+0x1c>)
   23274:	f7ff ff86 	bl	23184 <log_output_hexdump>
	u32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output, flag, src_level,
				     timestamp, metadata, data, length);
}
   23278:	b005      	add	sp, #20
   2327a:	f85d fb04 	ldr.w	pc, [sp], #4
   2327e:	bf00      	nop
   23280:	0004068c 	.word	0x0004068c

00023284 <sync_string>:
{
   23284:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   23286:	200f      	movs	r0, #15
   23288:	9001      	str	r0, [sp, #4]
   2328a:	9804      	ldr	r0, [sp, #16]
   2328c:	9000      	str	r0, [sp, #0]
   2328e:	4803      	ldr	r0, [pc, #12]	; (2329c <sync_string+0x18>)
   23290:	f7ff ff40 	bl	23114 <log_output_string>
}
   23294:	b003      	add	sp, #12
   23296:	f85d fb04 	ldr.w	pc, [sp], #4
   2329a:	bf00      	nop
   2329c:	0004068c 	.word	0x0004068c

000232a0 <boot_write_trailer_byte>:
	}
}

static int boot_write_trailer_byte(const struct flash_area *fa, u32_t off,
				   u8_t val)
{
   232a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   232a2:	4604      	mov	r4, r0
   232a4:	460d      	mov	r5, r1
   232a6:	4616      	mov	r6, r2
	u8_t buf[BOOT_MAX_ALIGN];
	u8_t align;
	u8_t erased_val;
	int rc;

	align = flash_area_align(fa);
   232a8:	f019 fb3f 	bl	3c92a <flash_area_align>
	assert(align <= BOOT_MAX_ALIGN);
   232ac:	2808      	cmp	r0, #8
	align = flash_area_align(fa);
   232ae:	4603      	mov	r3, r0
	assert(align <= BOOT_MAX_ALIGN);
   232b0:	d906      	bls.n	232c0 <boot_write_trailer_byte+0x20>
   232b2:	4b0c      	ldr	r3, [pc, #48]	; (232e4 <boot_write_trailer_byte+0x44>)
   232b4:	4a0c      	ldr	r2, [pc, #48]	; (232e8 <boot_write_trailer_byte+0x48>)
   232b6:	f44f 719d 	mov.w	r1, #314	; 0x13a
   232ba:	480c      	ldr	r0, [pc, #48]	; (232ec <boot_write_trailer_byte+0x4c>)
   232bc:	f016 fd76 	bl	39dac <__assert_func>
	erased_val = flash_area_erased_val(fa);
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   232c0:	f04f 30ff 	mov.w	r0, #4294967295
	buf[0] = val;

	rc = flash_area_write(fa, off, buf, align);
   232c4:	466a      	mov	r2, sp
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   232c6:	e9cd 0000 	strd	r0, r0, [sp]
	rc = flash_area_write(fa, off, buf, align);
   232ca:	4629      	mov	r1, r5
   232cc:	4620      	mov	r0, r4
	buf[0] = val;
   232ce:	f88d 6000 	strb.w	r6, [sp]
	rc = flash_area_write(fa, off, buf, align);
   232d2:	f019 fadb 	bl	3c88c <flash_area_write>
	if (rc != 0) {
   232d6:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   232d8:	bf18      	it	ne
   232da:	f06f 0004 	mvnne.w	r0, #4
   232de:	b002      	add	sp, #8
   232e0:	bd70      	pop	{r4, r5, r6, pc}
   232e2:	bf00      	nop
   232e4:	00042521 	.word	0x00042521
   232e8:	00042509 	.word	0x00042509
   232ec:	00042539 	.word	0x00042539

000232f0 <boot_request_upgrade>:

	return BOOT_SWAP_TYPE_NONE;
}

int boot_request_upgrade(int permanent)
{
   232f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   232f2:	4605      	mov	r5, r0
	rc = flash_area_open(bank_id, &fa);
   232f4:	a901      	add	r1, sp, #4
   232f6:	2007      	movs	r0, #7
   232f8:	f000 f964 	bl	235c4 <flash_area_open>
	if (rc) {
   232fc:	4604      	mov	r4, r0
   232fe:	bb10      	cbnz	r0, 23346 <boot_request_upgrade+0x56>
	offs = MAGIC_OFFS(fa);
   23300:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   23302:	2310      	movs	r3, #16
	offs = MAGIC_OFFS(fa);
   23304:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   23306:	4a12      	ldr	r2, [pc, #72]	; (23350 <boot_request_upgrade+0x60>)
   23308:	3910      	subs	r1, #16
   2330a:	f019 fabf 	bl	3c88c <flash_area_write>
   2330e:	4604      	mov	r4, r0
	flash_area_close(fa);
   23310:	9801      	ldr	r0, [sp, #4]
   23312:	f019 fa9d 	bl	3c850 <flash_area_close>
	u8_t swap_type;
#endif
	int rc;

	rc = boot_magic_write(FLASH_AREA_IMAGE_SECONDARY);
	if (rc) {
   23316:	b9b4      	cbnz	r4, 23346 <boot_request_upgrade+0x56>
		goto op_end;
	}

	if (permanent) {
   23318:	b1c5      	cbz	r5, 2334c <boot_request_upgrade+0x5c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   2331a:	2007      	movs	r0, #7
   2331c:	f019 fa0e 	bl	3c73c <boot_flag_write.constprop.7>
		rc = boot_image_ok_write(FLASH_AREA_IMAGE_SECONDARY);

#ifdef CONFIG_MCUBOOT_TRAILER_SWAP_TYPE
		if (rc) {
   23320:	4604      	mov	r4, r0
   23322:	b980      	cbnz	r0, 23346 <boot_request_upgrade+0x56>
			goto op_end;
		}

		swap_type = BOOT_SWAP_TYPE_PERM;
   23324:	2503      	movs	r5, #3
	rc = flash_area_open(bank_id, &fa);
   23326:	a901      	add	r1, sp, #4
   23328:	2007      	movs	r0, #7
   2332a:	f000 f94b 	bl	235c4 <flash_area_open>
	if (rc) {
   2332e:	4604      	mov	r4, r0
   23330:	b948      	cbnz	r0, 23346 <boot_request_upgrade+0x56>
	offs = SWAP_TYPE_OFFS(fa);
   23332:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   23334:	462a      	mov	r2, r5
	offs = SWAP_TYPE_OFFS(fa);
   23336:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   23338:	3928      	subs	r1, #40	; 0x28
   2333a:	f7ff ffb1 	bl	232a0 <boot_write_trailer_byte>
   2333e:	4604      	mov	r4, r0
	flash_area_close(fa);
   23340:	9801      	ldr	r0, [sp, #4]
   23342:	f019 fa85 	bl	3c850 <flash_area_close>
#else
	}
#endif
op_end:
	return rc;
}
   23346:	4620      	mov	r0, r4
   23348:	b003      	add	sp, #12
   2334a:	bd30      	pop	{r4, r5, pc}
		swap_type = BOOT_SWAP_TYPE_TEST;
   2334c:	2502      	movs	r5, #2
   2334e:	e7ea      	b.n	23326 <boot_request_upgrade+0x36>
   23350:	0004069c 	.word	0x0004069c

00023354 <flash_progressive_erase>:
 * @param[in] off offset from the beginning of the image flash area beginning
 *
 * @return  0 on success, negative errno code on fail.
 */
static int flash_progressive_erase(struct flash_img_context *ctx, off_t off)
{
   23354:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct flash_sector sector;
	int rc;

	rc = flash_sector_from_off(ctx->flash_area, off, &sector);
   23358:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
{
   2335c:	4607      	mov	r7, r0
	flash_dev = flash_area_get_device(fap);
   2335e:	4628      	mov	r0, r5
{
   23360:	460c      	mov	r4, r1
	flash_dev = flash_area_get_device(fap);
   23362:	f019 fae9 	bl	3c938 <flash_area_get_device>
	off += fap->fa_off; /* flash driver uses offset from memory beginning */
   23366:	6869      	ldr	r1, [r5, #4]
   23368:	4421      	add	r1, r4
	if (flash_dev) {
   2336a:	b998      	cbnz	r0, 23394 <flash_progressive_erase+0x40>
	int rc = -ENODEV;
   2336c:	f06f 0412 	mvn.w	r4, #18
	if (rc) {
		LOG_ERR("Unable to determine flash sector size");
   23370:	2301      	movs	r3, #1
   23372:	f04f 0000 	mov.w	r0, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   23376:	4a21      	ldr	r2, [pc, #132]	; (233fc <flash_progressive_erase+0xa8>)
   23378:	f363 0007 	bfi	r0, r3, #0, #8
   2337c:	4b20      	ldr	r3, [pc, #128]	; (23400 <flash_progressive_erase+0xac>)
   2337e:	4921      	ldr	r1, [pc, #132]	; (23404 <flash_progressive_erase+0xb0>)
   23380:	1a9b      	subs	r3, r3, r2
   23382:	08db      	lsrs	r3, r3, #3
   23384:	f363 108f 	bfi	r0, r3, #6, #10
   23388:	f019 f97b 	bl	3c682 <log_string_sync>
			}
		}
	}

	return rc;
}
   2338c:	4620      	mov	r0, r4
   2338e:	b004      	add	sp, #16
   23390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   23394:	aa01      	add	r2, sp, #4
   23396:	f01a f976 	bl	3d686 <z_impl_flash_get_page_info_by_offs>
		if (rc == 0) {
   2339a:	4604      	mov	r4, r0
   2339c:	2800      	cmp	r0, #0
   2339e:	d1e7      	bne.n	23370 <flash_progressive_erase+0x1c>
			sector->fs_size = page.size;
   233a0:	e9dd 6801 	ldrd	r6, r8, [sp, #4]
		if (ctx->off_last != sector.fs_off) {
   233a4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
   233a8:	42b3      	cmp	r3, r6
   233aa:	d0ef      	beq.n	2338c <flash_progressive_erase+0x38>
			LOG_INF("Erasing sector at offset 0x%08lx",
   233ac:	2303      	movs	r3, #3
   233ae:	f04f 0000 	mov.w	r0, #0
   233b2:	4d13      	ldr	r5, [pc, #76]	; (23400 <flash_progressive_erase+0xac>)
   233b4:	f363 0007 	bfi	r0, r3, #0, #8
   233b8:	4b10      	ldr	r3, [pc, #64]	; (233fc <flash_progressive_erase+0xa8>)
   233ba:	4632      	mov	r2, r6
   233bc:	1aed      	subs	r5, r5, r3
   233be:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   233c2:	f365 108f 	bfi	r0, r5, #6, #10
   233c6:	4910      	ldr	r1, [pc, #64]	; (23408 <flash_progressive_erase+0xb4>)
			ctx->off_last = sector.fs_off;
   233c8:	f8c7 620c 	str.w	r6, [r7, #524]	; 0x20c
			LOG_INF("Erasing sector at offset 0x%08lx",
   233cc:	f019 f959 	bl	3c682 <log_string_sync>
			rc = flash_area_erase(ctx->flash_area,
   233d0:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
   233d4:	4642      	mov	r2, r8
   233d6:	6841      	ldr	r1, [r0, #4]
   233d8:	1a71      	subs	r1, r6, r1
   233da:	f019 fa80 	bl	3c8de <flash_area_erase>
			if (rc) {
   233de:	4604      	mov	r4, r0
   233e0:	2800      	cmp	r0, #0
   233e2:	d0d3      	beq.n	2338c <flash_progressive_erase+0x38>
				LOG_ERR("Error %d while erasing sector", rc);
   233e4:	2301      	movs	r3, #1
   233e6:	f04f 0000 	mov.w	r0, #0
   233ea:	f363 0007 	bfi	r0, r3, #0, #8
   233ee:	f365 108f 	bfi	r0, r5, #6, #10
   233f2:	4622      	mov	r2, r4
   233f4:	4905      	ldr	r1, [pc, #20]	; (2340c <flash_progressive_erase+0xb8>)
   233f6:	f019 f944 	bl	3c682 <log_string_sync>
	return rc;
   233fa:	e7c7      	b.n	2338c <flash_progressive_erase+0x38>
   233fc:	000402cc 	.word	0x000402cc
   23400:	0004034c 	.word	0x0004034c
   23404:	0004255f 	.word	0x0004255f
   23408:	00042585 	.word	0x00042585
   2340c:	000425a6 	.word	0x000425a6

00023410 <flash_sync>:

#endif /* CONFIG_IMG_ERASE_PROGRESSIVELY */

static int flash_sync(struct flash_img_context *ctx)
{
   23410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   23414:	4604      	mov	r4, r0
	int rc = 0;

	if (ctx->buf_bytes < CONFIG_IMG_BLOCK_BUF_SIZE) {
   23416:	f8b0 0208 	ldrh.w	r0, [r0, #520]	; 0x208
   2341a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   2341e:	d205      	bcs.n	2342c <flash_sync+0x1c>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   23420:	f5c0 7200 	rsb	r2, r0, #512	; 0x200
   23424:	21ff      	movs	r1, #255	; 0xff
   23426:	4420      	add	r0, r4
   23428:	f01b fc6f 	bl	3ed0a <memset>
		(void)memset(ctx->buf + ctx->buf_bytes, 0xFF,
			     CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes);
	}

#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	rc = flash_progressive_erase(ctx, ctx->bytes_written +
   2342c:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   23430:	4620      	mov	r0, r4
   23432:	f501 7100 	add.w	r1, r1, #512	; 0x200
   23436:	f7ff ff8d 	bl	23354 <flash_progressive_erase>
				     CONFIG_IMG_BLOCK_BUF_SIZE);
	if (rc) {
   2343a:	4605      	mov	r5, r0
   2343c:	b1a0      	cbz	r0, 23468 <flash_sync+0x58>
		LOG_ERR("flash_progressive_erase error %d offset=0x%08zx", rc,
   2343e:	2301      	movs	r3, #1
   23440:	f04f 0000 	mov.w	r0, #0
   23444:	4a3b      	ldr	r2, [pc, #236]	; (23534 <flash_sync+0x124>)
   23446:	f363 0007 	bfi	r0, r3, #0, #8
   2344a:	4b3b      	ldr	r3, [pc, #236]	; (23538 <flash_sync+0x128>)
   2344c:	493b      	ldr	r1, [pc, #236]	; (2353c <flash_sync+0x12c>)
   2344e:	1a9b      	subs	r3, r3, r2
   23450:	462a      	mov	r2, r5
   23452:	08db      	lsrs	r3, r3, #3
   23454:	f363 108f 	bfi	r0, r3, #6, #10
   23458:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
#endif

	rc = flash_area_write(ctx->flash_area, ctx->bytes_written, ctx->buf,
			      CONFIG_IMG_BLOCK_BUF_SIZE);
	if (rc) {
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   2345c:	f019 f911 	bl	3c682 <log_string_sync>

	ctx->bytes_written += ctx->buf_bytes;
	ctx->buf_bytes = 0U;

	return rc;
}
   23460:	4628      	mov	r0, r5
   23462:	b004      	add	sp, #16
   23464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rc = flash_area_write(ctx->flash_area, ctx->bytes_written, ctx->buf,
   23468:	f44f 7300 	mov.w	r3, #512	; 0x200
   2346c:	e9d4 0180 	ldrd	r0, r1, [r4, #512]	; 0x200
   23470:	4622      	mov	r2, r4
   23472:	f019 fa0b 	bl	3c88c <flash_area_write>
   23476:	46a1      	mov	r9, r4
	if (rc) {
   23478:	4605      	mov	r5, r0
   2347a:	b178      	cbz	r0, 2349c <flash_sync+0x8c>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   2347c:	2301      	movs	r3, #1
   2347e:	f04f 0000 	mov.w	r0, #0
   23482:	4a2c      	ldr	r2, [pc, #176]	; (23534 <flash_sync+0x124>)
   23484:	f363 0007 	bfi	r0, r3, #0, #8
   23488:	4b2b      	ldr	r3, [pc, #172]	; (23538 <flash_sync+0x128>)
   2348a:	492d      	ldr	r1, [pc, #180]	; (23540 <flash_sync+0x130>)
   2348c:	1a9b      	subs	r3, r3, r2
   2348e:	08db      	lsrs	r3, r3, #3
   23490:	f363 108f 	bfi	r0, r3, #6, #10
   23494:	462a      	mov	r2, r5
   23496:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   2349a:	e7df      	b.n	2345c <flash_sync+0x4c>
	if (!flash_verify(ctx->flash_area, ctx->bytes_written, ctx->buf,
   2349c:	f44f 7700 	mov.w	r7, #512	; 0x200
   234a0:	e9d4 a880 	ldrd	sl, r8, [r4, #512]	; 0x200
		size = (len >= sizeof(temp)) ? sizeof(temp) : len;
   234a4:	2f04      	cmp	r7, #4
   234a6:	463e      	mov	r6, r7
   234a8:	bf28      	it	cs
   234aa:	2604      	movcs	r6, #4
		rc = flash_area_read(fa, offset, &temp, size);
   234ac:	aa03      	add	r2, sp, #12
   234ae:	4633      	mov	r3, r6
   234b0:	4641      	mov	r1, r8
   234b2:	4650      	mov	r0, sl
   234b4:	f019 f9cd 	bl	3c852 <flash_area_read>
		if (rc) {
   234b8:	4602      	mov	r2, r0
   234ba:	b190      	cbz	r0, 234e2 <flash_sync+0xd2>
			LOG_ERR("flash_read error %d offset=0x%08lx",
   234bc:	2301      	movs	r3, #1
   234be:	f04f 0000 	mov.w	r0, #0
   234c2:	491c      	ldr	r1, [pc, #112]	; (23534 <flash_sync+0x124>)
   234c4:	f363 0007 	bfi	r0, r3, #0, #8
   234c8:	4b1b      	ldr	r3, [pc, #108]	; (23538 <flash_sync+0x128>)
   234ca:	1a5b      	subs	r3, r3, r1
   234cc:	08db      	lsrs	r3, r3, #3
   234ce:	f363 108f 	bfi	r0, r3, #6, #10
   234d2:	491c      	ldr	r1, [pc, #112]	; (23544 <flash_sync+0x134>)
   234d4:	4643      	mov	r3, r8
   234d6:	f019 f8d4 	bl	3c682 <log_string_sync>
	if (!flash_verify(ctx->flash_area, ctx->bytes_written, ctx->buf,
   234da:	b307      	cbz	r7, 2351e <flash_sync+0x10e>
		return -EIO;
   234dc:	f06f 0504 	mvn.w	r5, #4
   234e0:	e7be      	b.n	23460 <flash_sync+0x50>
		if (memcmp(data, &temp, size)) {
   234e2:	4632      	mov	r2, r6
   234e4:	a903      	add	r1, sp, #12
   234e6:	4648      	mov	r0, r9
   234e8:	f01b fbe1 	bl	3ecae <memcmp>
   234ec:	b198      	cbz	r0, 23516 <flash_sync+0x106>
			LOG_ERR("offset=0x%08lx VERIFY FAIL. "
   234ee:	2301      	movs	r3, #1
   234f0:	f04f 0000 	mov.w	r0, #0
   234f4:	4a0f      	ldr	r2, [pc, #60]	; (23534 <flash_sync+0x124>)
   234f6:	f363 0007 	bfi	r0, r3, #0, #8
   234fa:	4b0f      	ldr	r3, [pc, #60]	; (23538 <flash_sync+0x128>)
   234fc:	4912      	ldr	r1, [pc, #72]	; (23548 <flash_sync+0x138>)
   234fe:	1a9b      	subs	r3, r3, r2
   23500:	08db      	lsrs	r3, r3, #3
   23502:	f363 108f 	bfi	r0, r3, #6, #10
   23506:	f899 3000 	ldrb.w	r3, [r9]
   2350a:	4642      	mov	r2, r8
   2350c:	9300      	str	r3, [sp, #0]
   2350e:	9b03      	ldr	r3, [sp, #12]
   23510:	f019 f8b7 	bl	3c682 <log_string_sync>
   23514:	e7e1      	b.n	234da <flash_sync+0xca>
	while (len) {
   23516:	1bbf      	subs	r7, r7, r6
		offset += size;
   23518:	44b0      	add	r8, r6
		data += size;
   2351a:	44b1      	add	r9, r6
	while (len) {
   2351c:	d1c2      	bne.n	234a4 <flash_sync+0x94>
	ctx->bytes_written += ctx->buf_bytes;
   2351e:	f8b4 2208 	ldrh.w	r2, [r4, #520]	; 0x208
   23522:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   23526:	4413      	add	r3, r2
   23528:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
	ctx->buf_bytes = 0U;
   2352c:	2300      	movs	r3, #0
   2352e:	f8a4 3208 	strh.w	r3, [r4, #520]	; 0x208
	return rc;
   23532:	e795      	b.n	23460 <flash_sync+0x50>
   23534:	000402cc 	.word	0x000402cc
   23538:	0004034c 	.word	0x0004034c
   2353c:	000425c4 	.word	0x000425c4
   23540:	000425f4 	.word	0x000425f4
   23544:	00042618 	.word	0x00042618
   23548:	0004263b 	.word	0x0004263b

0002354c <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
   2354c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   2354e:	4605      	mov	r5, r0
   23550:	b948      	cbnz	r0, 23566 <socket_offload_register+0x1a>
   23552:	490c      	ldr	r1, [pc, #48]	; (23584 <socket_offload_register+0x38>)
   23554:	480c      	ldr	r0, [pc, #48]	; (23588 <socket_offload_register+0x3c>)
   23556:	2311      	movs	r3, #17
   23558:	4a0c      	ldr	r2, [pc, #48]	; (2358c <socket_offload_register+0x40>)
   2355a:	f019 f83b 	bl	3c5d4 <printk>
   2355e:	2111      	movs	r1, #17
   23560:	480a      	ldr	r0, [pc, #40]	; (2358c <socket_offload_register+0x40>)
   23562:	f019 f87d 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
   23566:	4c0a      	ldr	r4, [pc, #40]	; (23590 <socket_offload_register+0x44>)
   23568:	6822      	ldr	r2, [r4, #0]
   2356a:	b14a      	cbz	r2, 23580 <socket_offload_register+0x34>
   2356c:	4909      	ldr	r1, [pc, #36]	; (23594 <socket_offload_register+0x48>)
   2356e:	4806      	ldr	r0, [pc, #24]	; (23588 <socket_offload_register+0x3c>)
   23570:	2312      	movs	r3, #18
   23572:	4a06      	ldr	r2, [pc, #24]	; (2358c <socket_offload_register+0x40>)
   23574:	f019 f82e 	bl	3c5d4 <printk>
   23578:	2112      	movs	r1, #18
   2357a:	4804      	ldr	r0, [pc, #16]	; (2358c <socket_offload_register+0x40>)
   2357c:	f019 f870 	bl	3c660 <assert_post_action>

	socket_ops = ops;
   23580:	6025      	str	r5, [r4, #0]
}
   23582:	bd38      	pop	{r3, r4, r5, pc}
   23584:	000418d8 	.word	0x000418d8
   23588:	00041757 	.word	0x00041757
   2358c:	00042689 	.word	0x00042689
   23590:	20023a4c 	.word	0x20023a4c
   23594:	000426bd 	.word	0x000426bd

00023598 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   23598:	4b08      	ldr	r3, [pc, #32]	; (235bc <get_flash_area_from_id+0x24>)
{
   2359a:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   2359c:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   2359e:	4b08      	ldr	r3, [pc, #32]	; (235c0 <get_flash_area_from_id+0x28>)
   235a0:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   235a2:	2300      	movs	r3, #0
   235a4:	429d      	cmp	r5, r3
   235a6:	dc02      	bgt.n	235ae <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   235a8:	2200      	movs	r2, #0
}
   235aa:	4610      	mov	r0, r2
   235ac:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   235ae:	011c      	lsls	r4, r3, #4
   235b0:	190a      	adds	r2, r1, r4
   235b2:	5d0c      	ldrb	r4, [r1, r4]
   235b4:	4284      	cmp	r4, r0
   235b6:	d0f8      	beq.n	235aa <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   235b8:	3301      	adds	r3, #1
   235ba:	e7f3      	b.n	235a4 <get_flash_area_from_id+0xc>
   235bc:	0004072c 	.word	0x0004072c
   235c0:	2003150c 	.word	0x2003150c

000235c4 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   235c4:	4b08      	ldr	r3, [pc, #32]	; (235e8 <flash_area_open+0x24>)
{
   235c6:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   235c8:	681b      	ldr	r3, [r3, #0]
{
   235ca:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   235cc:	b12b      	cbz	r3, 235da <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   235ce:	f7ff ffe3 	bl	23598 <get_flash_area_from_id>
	if (area == NULL) {
   235d2:	b128      	cbz	r0, 235e0 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   235d4:	6020      	str	r0, [r4, #0]
	return 0;
   235d6:	2000      	movs	r0, #0
}
   235d8:	bd10      	pop	{r4, pc}
		return -EACCES;
   235da:	f06f 000c 	mvn.w	r0, #12
   235de:	e7fb      	b.n	235d8 <flash_area_open+0x14>
		return -ENOENT;
   235e0:	f06f 0001 	mvn.w	r0, #1
   235e4:	e7f8      	b.n	235d8 <flash_area_open+0x14>
   235e6:	bf00      	nop
   235e8:	2003150c 	.word	0x2003150c

000235ec <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   235ec:	b508      	push	{r3, lr}
   235ee:	4604      	mov	r4, r0
	__asm__ volatile(
   235f0:	f04f 0220 	mov.w	r2, #32
   235f4:	f3ef 8311 	mrs	r3, BASEPRI
   235f8:	f382 8811 	msr	BASEPRI, r2
   235fc:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   23600:	f019 f9c9 	bl	3c996 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   23604:	4620      	mov	r0, r4
   23606:	f001 f8cd 	bl	247a4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   2360a:	4803      	ldr	r0, [pc, #12]	; (23618 <sys_reboot+0x2c>)
   2360c:	f018 ffe2 	bl	3c5d4 <printk>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   23610:	f000 fbf8 	bl	23e04 <arch_cpu_idle>
   23614:	e7fc      	b.n	23610 <sys_reboot+0x24>
   23616:	bf00      	nop
   23618:	000426f0 	.word	0x000426f0

0002361c <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   2361c:	4b0a      	ldr	r3, [pc, #40]	; (23648 <console_out+0x2c>)
{
   2361e:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   23620:	b2c6      	uxtb	r6, r0
{
   23622:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   23624:	681b      	ldr	r3, [r3, #0]
   23626:	4630      	mov	r0, r6
   23628:	4798      	blx	r3

	if (handled_by_debug_server) {
   2362a:	2801      	cmp	r0, #1
   2362c:	d00a      	beq.n	23644 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   2362e:	2c0a      	cmp	r4, #10
   23630:	4d06      	ldr	r5, [pc, #24]	; (2364c <console_out+0x30>)
   23632:	d103      	bne.n	2363c <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
   23634:	210d      	movs	r1, #13
   23636:	6828      	ldr	r0, [r5, #0]
   23638:	f019 f981 	bl	3c93e <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
   2363c:	4631      	mov	r1, r6
   2363e:	6828      	ldr	r0, [r5, #0]
   23640:	f019 f97d 	bl	3c93e <uart_poll_out>

	return c;
}
   23644:	4620      	mov	r0, r4
   23646:	bd70      	pop	{r4, r5, r6, pc}
   23648:	20031510 	.word	0x20031510
   2364c:	20023a50 	.word	0x20023a50

00023650 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
   23650:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   23652:	4c04      	ldr	r4, [pc, #16]	; (23664 <uart_console_hook_install+0x14>)
   23654:	4620      	mov	r0, r4
   23656:	f001 fb5d 	bl	24d14 <__stdout_hook_install>
	__printk_hook_install(console_out);
   2365a:	4620      	mov	r0, r4
}
   2365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
   23660:	f7ff bb38 	b.w	22cd4 <__printk_hook_install>
   23664:	0002361d 	.word	0x0002361d

00023668 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   23668:	b508      	push	{r3, lr}
   2366a:	4804      	ldr	r0, [pc, #16]	; (2367c <uart_console_init+0x14>)
   2366c:	f013 f844 	bl	366f8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   23670:	4b03      	ldr	r3, [pc, #12]	; (23680 <uart_console_init+0x18>)
   23672:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
   23674:	f7ff ffec 	bl	23650 <uart_console_hook_install>

	return 0;
}
   23678:	2000      	movs	r0, #0
   2367a:	bd08      	pop	{r3, pc}
   2367c:	000424c3 	.word	0x000424c3
   23680:	20023a50 	.word	0x20023a50

00023684 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
   23684:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   23686:	2200      	movs	r2, #0
{
   23688:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   2368a:	2101      	movs	r1, #1
   2368c:	2005      	movs	r0, #5
   2368e:	f000 fc17 	bl	23ec0 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   23692:	2005      	movs	r0, #5
   23694:	f000 fc04 	bl	23ea0 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   23698:	2202      	movs	r2, #2
   2369a:	4b07      	ldr	r3, [pc, #28]	; (236b8 <clk_init+0x34>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   2369c:	2000      	movs	r0, #0
   2369e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   236a2:	2203      	movs	r2, #3
   236a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
   236a8:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
   236aa:	e9c3 0000 	strd	r0, r0, [r3]
   236ae:	68a3      	ldr	r3, [r4, #8]
   236b0:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
   236b4:	bd10      	pop	{r4, pc}
   236b6:	bf00      	nop
   236b8:	40005000 	.word	0x40005000

000236bc <get_status>:
{
   236bc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   236be:	b2cc      	uxtb	r4, r1
   236c0:	2c01      	cmp	r4, #1
{
   236c2:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   236c4:	d909      	bls.n	236da <get_status+0x1e>
   236c6:	490b      	ldr	r1, [pc, #44]	; (236f4 <get_status+0x38>)
   236c8:	480b      	ldr	r0, [pc, #44]	; (236f8 <get_status+0x3c>)
   236ca:	2384      	movs	r3, #132	; 0x84
   236cc:	4a0b      	ldr	r2, [pc, #44]	; (236fc <get_status+0x40>)
   236ce:	f018 ff81 	bl	3c5d4 <printk>
   236d2:	2184      	movs	r1, #132	; 0x84
   236d4:	4809      	ldr	r0, [pc, #36]	; (236fc <get_status+0x40>)
   236d6:	f018 ffc3 	bl	3c660 <assert_post_action>
	if (data->started) {
   236da:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
   236dc:	68ab      	ldr	r3, [r5, #8]
	if (data->started) {
   236de:	fb04 3101 	mla	r1, r4, r1, r3
   236e2:	7a4b      	ldrb	r3, [r1, #9]
   236e4:	b923      	cbnz	r3, 236f0 <get_status+0x34>
	if (data->ref > 0) {
   236e6:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   236e8:	fab0 f080 	clz	r0, r0
   236ec:	0940      	lsrs	r0, r0, #5
}
   236ee:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
   236f0:	2002      	movs	r0, #2
   236f2:	e7fc      	b.n	236ee <get_status+0x32>
   236f4:	000427ad 	.word	0x000427ad
   236f8:	00041757 	.word	0x00041757
   236fc:	00042779 	.word	0x00042779

00023700 <clock_async_start>:
{
   23700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   23704:	b2ce      	uxtb	r6, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   23706:	2e01      	cmp	r6, #1
{
   23708:	4607      	mov	r7, r0
   2370a:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2370c:	d909      	bls.n	23722 <clock_async_start+0x22>
   2370e:	4949      	ldr	r1, [pc, #292]	; (23834 <clock_async_start+0x134>)
   23710:	4849      	ldr	r0, [pc, #292]	; (23838 <clock_async_start+0x138>)
   23712:	23fd      	movs	r3, #253	; 0xfd
   23714:	4a49      	ldr	r2, [pc, #292]	; (2383c <clock_async_start+0x13c>)
   23716:	f018 ff5d 	bl	3c5d4 <printk>
   2371a:	21fd      	movs	r1, #253	; 0xfd
   2371c:	4847      	ldr	r0, [pc, #284]	; (2383c <clock_async_start+0x13c>)
   2371e:	f018 ff9f 	bl	3c660 <assert_post_action>
	const struct nrf_clock_control_config *config =
   23722:	683b      	ldr	r3, [r7, #0]
	clk_data = get_sub_data(dev, type);
   23724:	f8d7 8008 	ldr.w	r8, [r7, #8]
	const struct nrf_clock_control_config *config =
   23728:	f8d3 9008 	ldr.w	r9, [r3, #8]
	__ASSERT_NO_MSG((data == NULL) ||
   2372c:	2c00      	cmp	r4, #0
   2372e:	d157      	bne.n	237e0 <clock_async_start+0xe0>
   23730:	f04f 0320 	mov.w	r3, #32
   23734:	f3ef 8a11 	mrs	sl, BASEPRI
   23738:	f383 8811 	msr	BASEPRI, r3
   2373c:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   23740:	230c      	movs	r3, #12
   23742:	fb03 8306 	mla	r3, r3, r6, r8
   23746:	7a1d      	ldrb	r5, [r3, #8]
   23748:	3501      	adds	r5, #1
   2374a:	b2ed      	uxtb	r5, r5
   2374c:	721d      	strb	r5, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
   2374e:	b95d      	cbnz	r5, 23768 <clock_async_start+0x68>
   23750:	493b      	ldr	r1, [pc, #236]	; (23840 <clock_async_start+0x140>)
   23752:	4839      	ldr	r0, [pc, #228]	; (23838 <clock_async_start+0x138>)
   23754:	f44f 7387 	mov.w	r3, #270	; 0x10e
   23758:	4a38      	ldr	r2, [pc, #224]	; (2383c <clock_async_start+0x13c>)
   2375a:	f018 ff3b 	bl	3c5d4 <printk>
   2375e:	f44f 7187 	mov.w	r1, #270	; 0x10e
   23762:	4836      	ldr	r0, [pc, #216]	; (2383c <clock_async_start+0x13c>)
   23764:	f018 ff7c 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   23768:	f38a 8811 	msr	BASEPRI, sl
   2376c:	f3bf 8f6f 	isb	sy
	if (data) {
   23770:	b32c      	cbz	r4, 237be <clock_async_start+0xbe>
    p_reg->INTENCLR = mask;
   23772:	2203      	movs	r2, #3
   23774:	4b33      	ldr	r3, [pc, #204]	; (23844 <clock_async_start+0x144>)
   23776:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		already_started = clk_data->started;
   2377a:	220c      	movs	r2, #12
   2377c:	4372      	muls	r2, r6
   2377e:	eb08 0302 	add.w	r3, r8, r2
   23782:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
   23784:	b991      	cbnz	r1, 237ac <clock_async_start+0xac>
	__asm__ volatile(
   23786:	f04f 0020 	mov.w	r0, #32
   2378a:	f3ef 8c11 	mrs	ip, BASEPRI
   2378e:	f380 8811 	msr	BASEPRI, r0
   23792:	f3bf 8f6f 	isb	sy
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
   23796:	6021      	str	r1, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   23798:	6858      	ldr	r0, [r3, #4]
   2379a:	2800      	cmp	r0, #0
   2379c:	d13a      	bne.n	23814 <clock_async_start+0x114>
	list->tail = node;
   2379e:	605c      	str	r4, [r3, #4]
	list->head = node;
   237a0:	f848 4002 	str.w	r4, [r8, r2]
	__asm__ volatile(
   237a4:	f38c 8811 	msr	BASEPRI, ip
   237a8:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   237ac:	2203      	movs	r2, #3
   237ae:	4b25      	ldr	r3, [pc, #148]	; (23844 <clock_async_start+0x144>)
   237b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		if (already_started) {
   237b4:	b119      	cbz	r1, 237be <clock_async_start+0xbe>
			data->cb(dev, data->user_data);
   237b6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   237ba:	4638      	mov	r0, r7
   237bc:	4798      	blx	r3
	if (ref == 1) {
   237be:	2d01      	cmp	r5, #1
   237c0:	d10c      	bne.n	237dc <clock_async_start+0xdc>
		do_start =  (config->start_handler) ?
   237c2:	0135      	lsls	r5, r6, #4
   237c4:	f859 3005 	ldr.w	r3, [r9, r5]
				config->start_handler(dev) : true;
   237c8:	bb3b      	cbnz	r3, 2381a <clock_async_start+0x11a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   237ca:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK,
   237cc:	44a9      	add	r9, r5
   237ce:	f899 300a 	ldrb.w	r3, [r9, #10]
   237d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   237d6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   237da:	601a      	str	r2, [r3, #0]
	return 0;
   237dc:	2000      	movs	r0, #0
   237de:	e027      	b.n	23830 <clock_async_start+0x130>
	__ASSERT_NO_MSG((data == NULL) ||
   237e0:	6863      	ldr	r3, [r4, #4]
   237e2:	b95b      	cbnz	r3, 237fc <clock_async_start+0xfc>
   237e4:	4918      	ldr	r1, [pc, #96]	; (23848 <clock_async_start+0x148>)
   237e6:	4814      	ldr	r0, [pc, #80]	; (23838 <clock_async_start+0x138>)
   237e8:	f44f 7381 	mov.w	r3, #258	; 0x102
   237ec:	4a13      	ldr	r2, [pc, #76]	; (2383c <clock_async_start+0x13c>)
   237ee:	f018 fef1 	bl	3c5d4 <printk>
   237f2:	f44f 7181 	mov.w	r1, #258	; 0x102
   237f6:	4811      	ldr	r0, [pc, #68]	; (2383c <clock_async_start+0x13c>)
   237f8:	f018 ff32 	bl	3c660 <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
   237fc:	230c      	movs	r3, #12
   237fe:	4373      	muls	r3, r6
   23800:	f858 3003 	ldr.w	r3, [r8, r3]
		if (item == node) {
   23804:	429c      	cmp	r4, r3
   23806:	d011      	beq.n	2382c <clock_async_start+0x12c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23808:	2b00      	cmp	r3, #0
   2380a:	d091      	beq.n	23730 <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2380c:	681b      	ldr	r3, [r3, #0]
	} while (item);
   2380e:	2b00      	cmp	r3, #0
   23810:	d1f8      	bne.n	23804 <clock_async_start+0x104>
   23812:	e78d      	b.n	23730 <clock_async_start+0x30>
	parent->next = child;
   23814:	6004      	str	r4, [r0, #0]
	list->tail = node;
   23816:	605c      	str	r4, [r3, #4]
   23818:	e7c4      	b.n	237a4 <clock_async_start+0xa4>
				config->start_handler(dev) : true;
   2381a:	4638      	mov	r0, r7
   2381c:	4798      	blx	r3
   2381e:	2800      	cmp	r0, #0
   23820:	d1d3      	bne.n	237ca <clock_async_start+0xca>
			clkstarted_handle(dev, type);
   23822:	4631      	mov	r1, r6
   23824:	4638      	mov	r0, r7
   23826:	f019 f88f 	bl	3c948 <clkstarted_handle>
   2382a:	e7d7      	b.n	237dc <clock_async_start+0xdc>
		return -EBUSY;
   2382c:	f06f 000f 	mvn.w	r0, #15
}
   23830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23834:	000427ad 	.word	0x000427ad
   23838:	00041757 	.word	0x00041757
   2383c:	00042779 	.word	0x00042779
   23840:	00042767 	.word	0x00042767
   23844:	40005000 	.word	0x40005000
   23848:	00042719 	.word	0x00042719

0002384c <clock_stop>:
{
   2384c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   23850:	b2cd      	uxtb	r5, r1
   23852:	2d01      	cmp	r5, #1
{
   23854:	4680      	mov	r8, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   23856:	d909      	bls.n	2386c <clock_stop+0x20>
   23858:	4925      	ldr	r1, [pc, #148]	; (238f0 <clock_stop+0xa4>)
   2385a:	4826      	ldr	r0, [pc, #152]	; (238f4 <clock_stop+0xa8>)
   2385c:	2399      	movs	r3, #153	; 0x99
   2385e:	4a26      	ldr	r2, [pc, #152]	; (238f8 <clock_stop+0xac>)
   23860:	f018 feb8 	bl	3c5d4 <printk>
   23864:	2199      	movs	r1, #153	; 0x99
   23866:	4824      	ldr	r0, [pc, #144]	; (238f8 <clock_stop+0xac>)
   23868:	f018 fefa 	bl	3c660 <assert_post_action>
	const struct nrf_clock_control_config *config =
   2386c:	f8d8 3000 	ldr.w	r3, [r8]
	data = get_sub_data(dev, type);
   23870:	f8d8 7008 	ldr.w	r7, [r8, #8]
	const struct nrf_clock_control_config *config =
   23874:	f8d3 9008 	ldr.w	r9, [r3, #8]
	__asm__ volatile(
   23878:	f04f 0320 	mov.w	r3, #32
   2387c:	f3ef 8611 	mrs	r6, BASEPRI
   23880:	f383 8811 	msr	BASEPRI, r3
   23884:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   23888:	220c      	movs	r2, #12
   2388a:	436a      	muls	r2, r5
   2388c:	18b9      	adds	r1, r7, r2
   2388e:	7a0b      	ldrb	r3, [r1, #8]
   23890:	b34b      	cbz	r3, 238e6 <clock_stop+0x9a>
	data->ref--;
   23892:	3b01      	subs	r3, #1
   23894:	b2db      	uxtb	r3, r3
   23896:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
   23898:	bb43      	cbnz	r3, 238ec <clock_stop+0xa0>
		do_stop =  (config->stop_handler) ?
   2389a:	012c      	lsls	r4, r5, #4
	list->head = NULL;
   2389c:	50bb      	str	r3, [r7, r2]
	list->tail = NULL;
   2389e:	604b      	str	r3, [r1, #4]
   238a0:	eb09 0304 	add.w	r3, r9, r4
   238a4:	685b      	ldr	r3, [r3, #4]
				config->stop_handler(dev) : true;
   238a6:	b9cb      	cbnz	r3, 238dc <clock_stop+0x90>
   238a8:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   238aa:	444c      	add	r4, r9
   238ac:	7ae3      	ldrb	r3, [r4, #11]
   238ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   238b2:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   238b6:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   238b8:	2200      	movs	r2, #0
   238ba:	8923      	ldrh	r3, [r4, #8]
   238bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   238c0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   238c4:	601a      	str	r2, [r3, #0]
		data->started = false;
   238c6:	230c      	movs	r3, #12
   238c8:	2000      	movs	r0, #0
   238ca:	fb05 7503 	mla	r5, r5, r3, r7
   238ce:	7268      	strb	r0, [r5, #9]
	__asm__ volatile(
   238d0:	f386 8811 	msr	BASEPRI, r6
   238d4:	f3bf 8f6f 	isb	sy
}
   238d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config->stop_handler(dev) : true;
   238dc:	4640      	mov	r0, r8
   238de:	4798      	blx	r3
   238e0:	2800      	cmp	r0, #0
   238e2:	d1e1      	bne.n	238a8 <clock_stop+0x5c>
   238e4:	e7ef      	b.n	238c6 <clock_stop+0x7a>
		err = -EALREADY;
   238e6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   238ea:	e7f1      	b.n	238d0 <clock_stop+0x84>
	int err = 0;
   238ec:	2000      	movs	r0, #0
   238ee:	e7ef      	b.n	238d0 <clock_stop+0x84>
   238f0:	000427ad 	.word	0x000427ad
   238f4:	00041757 	.word	0x00041757
   238f8:	00042779 	.word	0x00042779

000238fc <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   238fc:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   238fe:	4b10      	ldr	r3, [pc, #64]	; (23940 <nrf_power_clock_isr+0x44>)
   23900:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   23902:	b162      	cbz	r2, 2391e <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
   23904:	4a0f      	ldr	r2, [pc, #60]	; (23944 <nrf_power_clock_isr+0x48>)
   23906:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   2390a:	07d1      	lsls	r1, r2, #31
   2390c:	d507      	bpl.n	2391e <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2390e:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   23910:	480d      	ldr	r0, [pc, #52]	; (23948 <nrf_power_clock_isr+0x4c>)
   23912:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   23914:	6883      	ldr	r3, [r0, #8]
   23916:	7a59      	ldrb	r1, [r3, #9]
   23918:	b909      	cbnz	r1, 2391e <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   2391a:	f019 f815 	bl	3c948 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2391e:	4b0b      	ldr	r3, [pc, #44]	; (2394c <nrf_power_clock_isr+0x50>)
   23920:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   23922:	b162      	cbz	r2, 2393e <nrf_power_clock_isr+0x42>
    return p_reg->INTENSET & mask;
   23924:	4a07      	ldr	r2, [pc, #28]	; (23944 <nrf_power_clock_isr+0x48>)
   23926:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   2392a:	0792      	lsls	r2, r2, #30
   2392c:	d507      	bpl.n	2393e <nrf_power_clock_isr+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2392e:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   23930:	2101      	movs	r1, #1
   23932:	601a      	str	r2, [r3, #0]
   23934:	4804      	ldr	r0, [pc, #16]	; (23948 <nrf_power_clock_isr+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   23936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2393a:	f019 b805 	b.w	3c948 <clkstarted_handle>
}
   2393e:	bd08      	pop	{r3, pc}
   23940:	40005100 	.word	0x40005100
   23944:	40005000 	.word	0x40005000
   23948:	20031788 	.word	0x20031788
   2394c:	40005104 	.word	0x40005104

00023950 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   23950:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   23952:	4c06      	ldr	r4, [pc, #24]	; (2396c <z_clock_isr+0x1c>)
   23954:	4906      	ldr	r1, [pc, #24]	; (23970 <z_clock_isr+0x20>)
   23956:	4622      	mov	r2, r4
   23958:	4806      	ldr	r0, [pc, #24]	; (23974 <z_clock_isr+0x24>)
   2395a:	2317      	movs	r3, #23
   2395c:	f018 fe3a 	bl	3c5d4 <printk>
   23960:	4620      	mov	r0, r4
}
   23962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   23966:	2117      	movs	r1, #23
   23968:	f018 be7a 	b.w	3c660 <assert_post_action>
   2396c:	000427fb 	.word	0x000427fb
   23970:	00046834 	.word	0x00046834
   23974:	00041757 	.word	0x00041757

00023978 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   23978:	2200      	movs	r2, #0
{
   2397a:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
   2397c:	4b22      	ldr	r3, [pc, #136]	; (23a08 <rtc1_nrf_isr+0x90>)
   2397e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
   23982:	f04f 0320 	mov.w	r3, #32
   23986:	f3ef 8511 	mrs	r5, BASEPRI
   2398a:	f383 8811 	msr	BASEPRI, r3
   2398e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23992:	481e      	ldr	r0, [pc, #120]	; (23a0c <rtc1_nrf_isr+0x94>)
   23994:	f015 f8b0 	bl	38af8 <z_spin_lock_valid>
   23998:	b968      	cbnz	r0, 239b6 <rtc1_nrf_isr+0x3e>
   2399a:	234a      	movs	r3, #74	; 0x4a
   2399c:	4a1c      	ldr	r2, [pc, #112]	; (23a10 <rtc1_nrf_isr+0x98>)
   2399e:	491d      	ldr	r1, [pc, #116]	; (23a14 <rtc1_nrf_isr+0x9c>)
   239a0:	481d      	ldr	r0, [pc, #116]	; (23a18 <rtc1_nrf_isr+0xa0>)
   239a2:	f018 fe17 	bl	3c5d4 <printk>
   239a6:	4919      	ldr	r1, [pc, #100]	; (23a0c <rtc1_nrf_isr+0x94>)
   239a8:	481c      	ldr	r0, [pc, #112]	; (23a1c <rtc1_nrf_isr+0xa4>)
   239aa:	f018 fe13 	bl	3c5d4 <printk>
   239ae:	214a      	movs	r1, #74	; 0x4a
   239b0:	4817      	ldr	r0, [pc, #92]	; (23a10 <rtc1_nrf_isr+0x98>)
   239b2:	f018 fe55 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   239b6:	4815      	ldr	r0, [pc, #84]	; (23a0c <rtc1_nrf_isr+0x94>)
   239b8:	f015 f8bc 	bl	38b34 <z_spin_lock_set_owner>
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   239bc:	4b12      	ldr	r3, [pc, #72]	; (23a08 <rtc1_nrf_isr+0x90>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   239be:	4a18      	ldr	r2, [pc, #96]	; (23a20 <rtc1_nrf_isr+0xa8>)
   239c0:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
   239c4:	6813      	ldr	r3, [r2, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   239c6:	4811      	ldr	r0, [pc, #68]	; (23a0c <rtc1_nrf_isr+0x94>)
	return (a - b) & COUNTER_MAX;
   239c8:	1ae4      	subs	r4, r4, r3
   239ca:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   239ce:	4423      	add	r3, r4
   239d0:	6013      	str	r3, [r2, #0]
   239d2:	f015 f89f 	bl	38b14 <z_spin_unlock_valid>
   239d6:	b968      	cbnz	r0, 239f4 <rtc1_nrf_isr+0x7c>
   239d8:	235d      	movs	r3, #93	; 0x5d
   239da:	4a0d      	ldr	r2, [pc, #52]	; (23a10 <rtc1_nrf_isr+0x98>)
   239dc:	4911      	ldr	r1, [pc, #68]	; (23a24 <rtc1_nrf_isr+0xac>)
   239de:	480e      	ldr	r0, [pc, #56]	; (23a18 <rtc1_nrf_isr+0xa0>)
   239e0:	f018 fdf8 	bl	3c5d4 <printk>
   239e4:	4909      	ldr	r1, [pc, #36]	; (23a0c <rtc1_nrf_isr+0x94>)
   239e6:	4810      	ldr	r0, [pc, #64]	; (23a28 <rtc1_nrf_isr+0xb0>)
   239e8:	f018 fdf4 	bl	3c5d4 <printk>
   239ec:	215d      	movs	r1, #93	; 0x5d
   239ee:	4808      	ldr	r0, [pc, #32]	; (23a10 <rtc1_nrf_isr+0x98>)
   239f0:	f018 fe36 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   239f4:	f385 8811 	msr	BASEPRI, r5
   239f8:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   239fc:	4620      	mov	r0, r4
}
   239fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   23a02:	f015 bd81 	b.w	39508 <z_clock_announce>
   23a06:	bf00      	nop
   23a08:	40015000 	.word	0x40015000
   23a0c:	20023a70 	.word	0x20023a70
   23a10:	00042269 	.word	0x00042269
   23a14:	00042288 	.word	0x00042288
   23a18:	00041757 	.word	0x00041757
   23a1c:	0004229d 	.word	0x0004229d
   23a20:	20023a6c 	.word	0x20023a6c
   23a24:	000422b5 	.word	0x000422b5
   23a28:	000422cc 	.word	0x000422cc

00023a2c <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
   23a2c:	b570      	push	{r4, r5, r6, lr}
   23a2e:	4815      	ldr	r0, [pc, #84]	; (23a84 <z_clock_driver_init+0x58>)
   23a30:	f012 fe62 	bl	366f8 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
   23a34:	b310      	cbz	r0, 23a7c <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   23a36:	6843      	ldr	r3, [r0, #4]
   23a38:	2101      	movs	r1, #1
   23a3a:	681b      	ldr	r3, [r3, #0]
   23a3c:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   23a3e:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
   23a40:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
   23a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23a46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   23a4a:	4d0f      	ldr	r5, [pc, #60]	; (23a88 <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   23a4c:	4631      	mov	r1, r6
   23a4e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   23a52:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
   23a56:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   23a5a:	4b0c      	ldr	r3, [pc, #48]	; (23a8c <z_clock_driver_init+0x60>)
   23a5c:	2015      	movs	r0, #21
   23a5e:	601c      	str	r4, [r3, #0]
   23a60:	4b0b      	ldr	r3, [pc, #44]	; (23a90 <z_clock_driver_init+0x64>)
   23a62:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   23a66:	4622      	mov	r2, r4
   23a68:	f000 fa2a 	bl	23ec0 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   23a6c:	2015      	movs	r0, #21
   23a6e:	f000 fa17 	bl	23ea0 <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   23a72:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   23a74:	4b07      	ldr	r3, [pc, #28]	; (23a94 <z_clock_driver_init+0x68>)
   23a76:	601e      	str	r6, [r3, #0]
   23a78:	602e      	str	r6, [r5, #0]
}
   23a7a:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   23a7c:	f04f 30ff 	mov.w	r0, #4294967295
   23a80:	e7fb      	b.n	23a7a <z_clock_driver_init+0x4e>
   23a82:	bf00      	nop
   23a84:	000427d1 	.word	0x000427d1
   23a88:	40015000 	.word	0x40015000
   23a8c:	40015140 	.word	0x40015140
   23a90:	e000e100 	.word	0xe000e100
   23a94:	40015008 	.word	0x40015008

00023a98 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   23a98:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   23a9a:	4c3a      	ldr	r4, [pc, #232]	; (23b84 <z_clock_set_timeout+0xec>)
   23a9c:	f1b0 3fff 	cmp.w	r0, #4294967295
   23aa0:	bf18      	it	ne
   23aa2:	4604      	movne	r4, r0
	__asm__ volatile(
   23aa4:	f04f 0320 	mov.w	r3, #32
   23aa8:	f3ef 8511 	mrs	r5, BASEPRI
   23aac:	f383 8811 	msr	BASEPRI, r3
   23ab0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ab4:	4834      	ldr	r0, [pc, #208]	; (23b88 <z_clock_set_timeout+0xf0>)
   23ab6:	f015 f81f 	bl	38af8 <z_spin_lock_valid>
   23aba:	b968      	cbnz	r0, 23ad8 <z_clock_set_timeout+0x40>
   23abc:	234a      	movs	r3, #74	; 0x4a
   23abe:	4a33      	ldr	r2, [pc, #204]	; (23b8c <z_clock_set_timeout+0xf4>)
   23ac0:	4933      	ldr	r1, [pc, #204]	; (23b90 <z_clock_set_timeout+0xf8>)
   23ac2:	4834      	ldr	r0, [pc, #208]	; (23b94 <z_clock_set_timeout+0xfc>)
   23ac4:	f018 fd86 	bl	3c5d4 <printk>
   23ac8:	492f      	ldr	r1, [pc, #188]	; (23b88 <z_clock_set_timeout+0xf0>)
   23aca:	4833      	ldr	r0, [pc, #204]	; (23b98 <z_clock_set_timeout+0x100>)
   23acc:	f018 fd82 	bl	3c5d4 <printk>
   23ad0:	214a      	movs	r1, #74	; 0x4a
   23ad2:	482e      	ldr	r0, [pc, #184]	; (23b8c <z_clock_set_timeout+0xf4>)
   23ad4:	f018 fdc4 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   23ad8:	482b      	ldr	r0, [pc, #172]	; (23b88 <z_clock_set_timeout+0xf0>)
   23ada:	f015 f82b 	bl	38b34 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   23ade:	4b2f      	ldr	r3, [pc, #188]	; (23b9c <z_clock_set_timeout+0x104>)
   23ae0:	4e28      	ldr	r6, [pc, #160]	; (23b84 <z_clock_set_timeout+0xec>)
   23ae2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
   23ae6:	4b2e      	ldr	r3, [pc, #184]	; (23ba0 <z_clock_set_timeout+0x108>)
   23ae8:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   23aea:	1ad0      	subs	r0, r2, r3
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   23aec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   23af0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
	if (unannounced >= COUNTER_HALF_SPAN) {
   23af4:	d12c      	bne.n	23b50 <z_clock_set_timeout+0xb8>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   23af6:	1e60      	subs	r0, r4, #1
   23af8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   23afc:	42b0      	cmp	r0, r6
   23afe:	bfa8      	it	ge
   23b00:	4630      	movge	r0, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   23b02:	3101      	adds	r1, #1
   23b04:	4408      	add	r0, r1
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   23b06:	42b0      	cmp	r0, r6
   23b08:	bf94      	ite	ls
   23b0a:	181b      	addls	r3, r3, r0
   23b0c:	199b      	addhi	r3, r3, r6
	return (a - b) & COUNTER_MAX;
   23b0e:	1a9a      	subs	r2, r3, r2
   23b10:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   23b14:	4921      	ldr	r1, [pc, #132]	; (23b9c <z_clock_set_timeout+0x104>)
   23b16:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
   23b1a:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
   23b1c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   23b20:	d918      	bls.n	23b54 <z_clock_set_timeout+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b22:	4819      	ldr	r0, [pc, #100]	; (23b88 <z_clock_set_timeout+0xf0>)
   23b24:	f014 fff6 	bl	38b14 <z_spin_unlock_valid>
   23b28:	b968      	cbnz	r0, 23b46 <z_clock_set_timeout+0xae>
   23b2a:	235d      	movs	r3, #93	; 0x5d
   23b2c:	4a17      	ldr	r2, [pc, #92]	; (23b8c <z_clock_set_timeout+0xf4>)
   23b2e:	491d      	ldr	r1, [pc, #116]	; (23ba4 <z_clock_set_timeout+0x10c>)
   23b30:	4818      	ldr	r0, [pc, #96]	; (23b94 <z_clock_set_timeout+0xfc>)
   23b32:	f018 fd4f 	bl	3c5d4 <printk>
   23b36:	4914      	ldr	r1, [pc, #80]	; (23b88 <z_clock_set_timeout+0xf0>)
   23b38:	481b      	ldr	r0, [pc, #108]	; (23ba8 <z_clock_set_timeout+0x110>)
   23b3a:	f018 fd4b 	bl	3c5d4 <printk>
   23b3e:	215d      	movs	r1, #93	; 0x5d
   23b40:	4812      	ldr	r0, [pc, #72]	; (23b8c <z_clock_set_timeout+0xf4>)
   23b42:	f018 fd8d 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   23b46:	f385 8811 	msr	BASEPRI, r5
   23b4a:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
   23b4e:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
   23b50:	2000      	movs	r0, #0
   23b52:	e7d6      	b.n	23b02 <z_clock_set_timeout+0x6a>
     return p_reg->COUNTER;
   23b54:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
   23b58:	4814      	ldr	r0, [pc, #80]	; (23bac <z_clock_set_timeout+0x114>)
	return (a - b) & COUNTER_MAX;
   23b5a:	1a9a      	subs	r2, r3, r2
   23b5c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
   23b60:	1e54      	subs	r4, r2, #1
   23b62:	4284      	cmp	r4, r0
   23b64:	d905      	bls.n	23b72 <z_clock_set_timeout+0xda>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23b66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   23b6a:	4b11      	ldr	r3, [pc, #68]	; (23bb0 <z_clock_set_timeout+0x118>)
   23b6c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   23b70:	e7d7      	b.n	23b22 <z_clock_set_timeout+0x8a>
		} else if (dt == 1) {
   23b72:	2a01      	cmp	r2, #1
			set_comparator(cyc + 2);
   23b74:	bf02      	ittt	eq
   23b76:	3302      	addeq	r3, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   23b78:	f023 437f 	biceq.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   23b7c:	f8c1 3540 	streq.w	r3, [r1, #1344]	; 0x540
   23b80:	e7cf      	b.n	23b22 <z_clock_set_timeout+0x8a>
   23b82:	bf00      	nop
   23b84:	00fffffe 	.word	0x00fffffe
   23b88:	20023a70 	.word	0x20023a70
   23b8c:	00042269 	.word	0x00042269
   23b90:	00042288 	.word	0x00042288
   23b94:	00041757 	.word	0x00041757
   23b98:	0004229d 	.word	0x0004229d
   23b9c:	40015000 	.word	0x40015000
   23ba0:	20023a6c 	.word	0x20023a6c
   23ba4:	000422b5 	.word	0x000422b5
   23ba8:	000422cc 	.word	0x000422cc
   23bac:	007ffffe 	.word	0x007ffffe
   23bb0:	e000e100 	.word	0xe000e100

00023bb4 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   23bb4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23bb6:	f04f 0320 	mov.w	r3, #32
   23bba:	f3ef 8511 	mrs	r5, BASEPRI
   23bbe:	f383 8811 	msr	BASEPRI, r3
   23bc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23bc6:	481a      	ldr	r0, [pc, #104]	; (23c30 <z_clock_elapsed+0x7c>)
   23bc8:	f014 ff96 	bl	38af8 <z_spin_lock_valid>
   23bcc:	b968      	cbnz	r0, 23bea <z_clock_elapsed+0x36>
   23bce:	234a      	movs	r3, #74	; 0x4a
   23bd0:	4a18      	ldr	r2, [pc, #96]	; (23c34 <z_clock_elapsed+0x80>)
   23bd2:	4919      	ldr	r1, [pc, #100]	; (23c38 <z_clock_elapsed+0x84>)
   23bd4:	4819      	ldr	r0, [pc, #100]	; (23c3c <z_clock_elapsed+0x88>)
   23bd6:	f018 fcfd 	bl	3c5d4 <printk>
   23bda:	4915      	ldr	r1, [pc, #84]	; (23c30 <z_clock_elapsed+0x7c>)
   23bdc:	4818      	ldr	r0, [pc, #96]	; (23c40 <z_clock_elapsed+0x8c>)
   23bde:	f018 fcf9 	bl	3c5d4 <printk>
   23be2:	214a      	movs	r1, #74	; 0x4a
   23be4:	4813      	ldr	r0, [pc, #76]	; (23c34 <z_clock_elapsed+0x80>)
   23be6:	f018 fd3b 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   23bea:	4811      	ldr	r0, [pc, #68]	; (23c30 <z_clock_elapsed+0x7c>)
   23bec:	f014 ffa2 	bl	38b34 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   23bf0:	4b14      	ldr	r3, [pc, #80]	; (23c44 <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23bf2:	480f      	ldr	r0, [pc, #60]	; (23c30 <z_clock_elapsed+0x7c>)
   23bf4:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   23bf8:	4b13      	ldr	r3, [pc, #76]	; (23c48 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   23bfa:	681b      	ldr	r3, [r3, #0]
   23bfc:	1ae4      	subs	r4, r4, r3
   23bfe:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   23c02:	f014 ff87 	bl	38b14 <z_spin_unlock_valid>
   23c06:	b968      	cbnz	r0, 23c24 <z_clock_elapsed+0x70>
   23c08:	235d      	movs	r3, #93	; 0x5d
   23c0a:	4a0a      	ldr	r2, [pc, #40]	; (23c34 <z_clock_elapsed+0x80>)
   23c0c:	490f      	ldr	r1, [pc, #60]	; (23c4c <z_clock_elapsed+0x98>)
   23c0e:	480b      	ldr	r0, [pc, #44]	; (23c3c <z_clock_elapsed+0x88>)
   23c10:	f018 fce0 	bl	3c5d4 <printk>
   23c14:	4906      	ldr	r1, [pc, #24]	; (23c30 <z_clock_elapsed+0x7c>)
   23c16:	480e      	ldr	r0, [pc, #56]	; (23c50 <z_clock_elapsed+0x9c>)
   23c18:	f018 fcdc 	bl	3c5d4 <printk>
   23c1c:	215d      	movs	r1, #93	; 0x5d
   23c1e:	4805      	ldr	r0, [pc, #20]	; (23c34 <z_clock_elapsed+0x80>)
   23c20:	f018 fd1e 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   23c24:	f385 8811 	msr	BASEPRI, r5
   23c28:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   23c2c:	4620      	mov	r0, r4
   23c2e:	bd38      	pop	{r3, r4, r5, pc}
   23c30:	20023a70 	.word	0x20023a70
   23c34:	00042269 	.word	0x00042269
   23c38:	00042288 	.word	0x00042288
   23c3c:	00041757 	.word	0x00041757
   23c40:	0004229d 	.word	0x0004229d
   23c44:	40015000 	.word	0x40015000
   23c48:	20023a6c 	.word	0x20023a6c
   23c4c:	000422b5 	.word	0x000422b5
   23c50:	000422cc 	.word	0x000422cc

00023c54 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   23c54:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23c56:	f04f 0320 	mov.w	r3, #32
   23c5a:	f3ef 8511 	mrs	r5, BASEPRI
   23c5e:	f383 8811 	msr	BASEPRI, r3
   23c62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c66:	481b      	ldr	r0, [pc, #108]	; (23cd4 <z_timer_cycle_get_32+0x80>)
   23c68:	f014 ff46 	bl	38af8 <z_spin_lock_valid>
   23c6c:	b968      	cbnz	r0, 23c8a <z_timer_cycle_get_32+0x36>
   23c6e:	234a      	movs	r3, #74	; 0x4a
   23c70:	4a19      	ldr	r2, [pc, #100]	; (23cd8 <z_timer_cycle_get_32+0x84>)
   23c72:	491a      	ldr	r1, [pc, #104]	; (23cdc <z_timer_cycle_get_32+0x88>)
   23c74:	481a      	ldr	r0, [pc, #104]	; (23ce0 <z_timer_cycle_get_32+0x8c>)
   23c76:	f018 fcad 	bl	3c5d4 <printk>
   23c7a:	4916      	ldr	r1, [pc, #88]	; (23cd4 <z_timer_cycle_get_32+0x80>)
   23c7c:	4819      	ldr	r0, [pc, #100]	; (23ce4 <z_timer_cycle_get_32+0x90>)
   23c7e:	f018 fca9 	bl	3c5d4 <printk>
   23c82:	214a      	movs	r1, #74	; 0x4a
   23c84:	4814      	ldr	r0, [pc, #80]	; (23cd8 <z_timer_cycle_get_32+0x84>)
   23c86:	f018 fceb 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   23c8a:	4812      	ldr	r0, [pc, #72]	; (23cd4 <z_timer_cycle_get_32+0x80>)
   23c8c:	f014 ff52 	bl	38b34 <z_spin_lock_set_owner>
   23c90:	4b15      	ldr	r3, [pc, #84]	; (23ce8 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c92:	4810      	ldr	r0, [pc, #64]	; (23cd4 <z_timer_cycle_get_32+0x80>)
   23c94:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   23c98:	4b14      	ldr	r3, [pc, #80]	; (23cec <z_timer_cycle_get_32+0x98>)
   23c9a:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   23c9c:	1ae4      	subs	r4, r4, r3
   23c9e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   23ca2:	441c      	add	r4, r3
   23ca4:	f014 ff36 	bl	38b14 <z_spin_unlock_valid>
   23ca8:	b968      	cbnz	r0, 23cc6 <z_timer_cycle_get_32+0x72>
   23caa:	235d      	movs	r3, #93	; 0x5d
   23cac:	4a0a      	ldr	r2, [pc, #40]	; (23cd8 <z_timer_cycle_get_32+0x84>)
   23cae:	4910      	ldr	r1, [pc, #64]	; (23cf0 <z_timer_cycle_get_32+0x9c>)
   23cb0:	480b      	ldr	r0, [pc, #44]	; (23ce0 <z_timer_cycle_get_32+0x8c>)
   23cb2:	f018 fc8f 	bl	3c5d4 <printk>
   23cb6:	4907      	ldr	r1, [pc, #28]	; (23cd4 <z_timer_cycle_get_32+0x80>)
   23cb8:	480e      	ldr	r0, [pc, #56]	; (23cf4 <z_timer_cycle_get_32+0xa0>)
   23cba:	f018 fc8b 	bl	3c5d4 <printk>
   23cbe:	215d      	movs	r1, #93	; 0x5d
   23cc0:	4805      	ldr	r0, [pc, #20]	; (23cd8 <z_timer_cycle_get_32+0x84>)
   23cc2:	f018 fccd 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   23cc6:	f385 8811 	msr	BASEPRI, r5
   23cca:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   23cce:	4620      	mov	r0, r4
   23cd0:	bd38      	pop	{r3, r4, r5, pc}
   23cd2:	bf00      	nop
   23cd4:	20023a70 	.word	0x20023a70
   23cd8:	00042269 	.word	0x00042269
   23cdc:	00042288 	.word	0x00042288
   23ce0:	00041757 	.word	0x00041757
   23ce4:	0004229d 	.word	0x0004229d
   23ce8:	40015000 	.word	0x40015000
   23cec:	20023a6c 	.word	0x20023a6c
   23cf0:	000422b5 	.word	0x000422b5
   23cf4:	000422cc 	.word	0x000422cc

00023cf8 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   23cf8:	4804      	ldr	r0, [pc, #16]	; (23d0c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   23cfa:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   23cfc:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   23cfe:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   23d00:	d003      	beq.n	23d0a <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   23d02:	4903      	ldr	r1, [pc, #12]	; (23d10 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   23d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   23d08:	600a      	str	r2, [r1, #0]

00023d0a <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
   23d0a:	4770      	bx	lr
    ldr r0, =_kernel
   23d0c:	20029368 	.word	0x20029368
    ldr r1, =_SCS_ICSR
   23d10:	e000ed04 	.word	0xe000ed04

00023d14 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   23d14:	492e      	ldr	r1, [pc, #184]	; (23dd0 <in_fp_endif+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   23d16:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   23d18:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   23d1c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   23d1e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   23d22:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   23d26:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   23d2a:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   23d2e:	d004      	beq.n	23d3a <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   23d30:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   23d34:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   23d38:	e007      	b.n	23d4a <out_fp_endif>

00023d3a <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   23d3a:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
   23d3e:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   23d42:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   23d46:	f050 0004 	orrs.w	r0, r0, #4

00023d4a <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   23d4a:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   23d4e:	2020      	movs	r0, #32
    msr BASEPRI, r0
   23d50:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   23d54:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   23d58:	4f1e      	ldr	r7, [pc, #120]	; (23dd4 <in_fp_endif+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   23d5a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   23d5e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   23d60:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   23d62:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   23d64:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
   23d66:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   23d68:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   23d6a:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   23d6e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   23d72:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   23d76:	d105      	bne.n	23d84 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   23d78:	2300      	movs	r3, #0
    vmsr fpscr, r3
   23d7a:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   23d7e:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   23d82:	e005      	b.n	23d90 <in_fp_endif>

00023d84 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   23d84:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   23d88:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
   23d8c:	ec90 8a10 	vldmia	r0, {s16-s31}

00023d90 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   23d90:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   23d94:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   23d98:	f383 8814 	msr	CONTROL, r3
    isb
   23d9c:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   23da0:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   23da2:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   23da4:	f018 fe09 	bl	3c9ba <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   23da8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   23dac:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   23db0:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
   23db4:	f04f 0000 	mov.w	r0, #0
    msr PSPLIM, r0
   23db8:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   23dbc:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   23dc0:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   23dc4:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   23dc6:	f018 fde9 	bl	3c99c <configure_builtin_stack_guard>
    pop {r2, lr}
   23dca:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   23dce:	4770      	bx	lr
    ldr r1, =_kernel
   23dd0:	20029368 	.word	0x20029368
    ldr v4, =_SCS_ICSR
   23dd4:	e000ed04 	.word	0xe000ed04

00023dd8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   23dd8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   23ddc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   23dde:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   23de2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   23de6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   23de8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   23dec:	2902      	cmp	r1, #2
    beq _oops
   23dee:	d0ff      	beq.n	23df0 <_oops>

00023df0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   23df0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   23df2:	f018 fdd7 	bl	3c9a4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   23df6:	bd01      	pop	{r0, pc}

00023df8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   23df8:	4901      	ldr	r1, [pc, #4]	; (23e00 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   23dfa:	2210      	movs	r2, #16
	str r2, [r1]
   23dfc:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   23dfe:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   23e00:	e000ed10 	.word	0xe000ed10

00023e04 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   23e04:	4040      	eors	r0, r0
	msr BASEPRI, r0
   23e06:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   23e0a:	bf30      	wfi

	bx lr
   23e0c:	4770      	bx	lr
   23e0e:	bf00      	nop

00023e10 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
   23e10:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   23e14:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   23e18:	4672      	mov	r2, lr

	push {r0, lr}
   23e1a:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
   23e1c:	f000 fbae 	bl	2457c <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   23e20:	bd01      	pop	{r0, pc}
   23e22:	bf00      	nop

00023e24 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   23e24:	bf30      	wfi
    b z_SysNmiOnReset
   23e26:	f7ff bffd 	b.w	23e24 <z_SysNmiOnReset>
   23e2a:	bf00      	nop

00023e2c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   23e2c:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
   23e2e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   23e30:	4a0b      	ldr	r2, [pc, #44]	; (23e60 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   23e32:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   23e34:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   23e36:	bf1e      	ittt	ne
	movne	r1, #0
   23e38:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   23e3a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   23e3c:	f01a fd8f 	blne	3e95e <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   23e40:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   23e42:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   23e46:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   23e4a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   23e4e:	4905      	ldr	r1, [pc, #20]	; (23e64 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   23e50:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   23e52:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   23e54:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   23e56:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   23e5a:	4903      	ldr	r1, [pc, #12]	; (23e68 <_isr_wrapper+0x3c>)
	bx r1
   23e5c:	4708      	bx	r1
   23e5e:	0000      	.short	0x0000
	ldr r2, =_kernel
   23e60:	20029368 	.word	0x20029368
	ldr r1, =_sw_isr_table
   23e64:	0003ffbc 	.word	0x0003ffbc
	ldr r1, =z_arm_int_exit
   23e68:	00023cf9 	.word	0x00023cf9

00023e6c <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   23e6c:	4a09      	ldr	r2, [pc, #36]	; (23e94 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   23e6e:	490a      	ldr	r1, [pc, #40]	; (23e98 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   23e70:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   23e72:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   23e74:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   23e76:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   23e78:	4908      	ldr	r1, [pc, #32]	; (23e9c <arch_swap+0x30>)
   23e7a:	684b      	ldr	r3, [r1, #4]
   23e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   23e80:	604b      	str	r3, [r1, #4]
   23e82:	2300      	movs	r3, #0
   23e84:	f383 8811 	msr	BASEPRI, r3
   23e88:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   23e8c:	6893      	ldr	r3, [r2, #8]
}
   23e8e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   23e90:	4770      	bx	lr
   23e92:	bf00      	nop
   23e94:	20029368 	.word	0x20029368
   23e98:	0004101c 	.word	0x0004101c
   23e9c:	e000ed00 	.word	0xe000ed00

00023ea0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   23ea0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   23ea2:	2b00      	cmp	r3, #0
   23ea4:	db08      	blt.n	23eb8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23ea6:	2201      	movs	r2, #1
   23ea8:	f000 001f 	and.w	r0, r0, #31
   23eac:	fa02 f000 	lsl.w	r0, r2, r0
   23eb0:	4a02      	ldr	r2, [pc, #8]	; (23ebc <arch_irq_enable+0x1c>)
   23eb2:	095b      	lsrs	r3, r3, #5
   23eb4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   23eb8:	4770      	bx	lr
   23eba:	bf00      	nop
   23ebc:	e000e100 	.word	0xe000e100

00023ec0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   23ec0:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   23ec2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   23ec4:	2c07      	cmp	r4, #7
{
   23ec6:	4605      	mov	r5, r0
   23ec8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   23eca:	d90e      	bls.n	23eea <z_arm_irq_priority_set+0x2a>
   23ecc:	235f      	movs	r3, #95	; 0x5f
   23ece:	4a10      	ldr	r2, [pc, #64]	; (23f10 <z_arm_irq_priority_set+0x50>)
   23ed0:	4910      	ldr	r1, [pc, #64]	; (23f14 <z_arm_irq_priority_set+0x54>)
   23ed2:	4811      	ldr	r0, [pc, #68]	; (23f18 <z_arm_irq_priority_set+0x58>)
   23ed4:	f018 fb7e 	bl	3c5d4 <printk>
   23ed8:	4631      	mov	r1, r6
   23eda:	4810      	ldr	r0, [pc, #64]	; (23f1c <z_arm_irq_priority_set+0x5c>)
   23edc:	2207      	movs	r2, #7
   23ede:	f018 fb79 	bl	3c5d4 <printk>
   23ee2:	215f      	movs	r1, #95	; 0x5f
   23ee4:	480a      	ldr	r0, [pc, #40]	; (23f10 <z_arm_irq_priority_set+0x50>)
   23ee6:	f018 fbbb 	bl	3c660 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   23eea:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   23eec:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23eee:	bfa8      	it	ge
   23ef0:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   23ef4:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23ef8:	bfb8      	it	lt
   23efa:	4b09      	ldrlt	r3, [pc, #36]	; (23f20 <z_arm_irq_priority_set+0x60>)
   23efc:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23efe:	bfab      	itete	ge
   23f00:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23f04:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23f08:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23f0c:	555c      	strblt	r4, [r3, r5]
}
   23f0e:	bd70      	pop	{r4, r5, r6, pc}
   23f10:	00042826 	.word	0x00042826
   23f14:	00042855 	.word	0x00042855
   23f18:	00041757 	.word	0x00041757
   23f1c:	00042870 	.word	0x00042870
   23f20:	e000ed14 	.word	0xe000ed14

00023f24 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   23f24:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   23f26:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   23f28:	4b04      	ldr	r3, [pc, #16]	; (23f3c <_arch_isr_direct_pm+0x18>)
   23f2a:	6a18      	ldr	r0, [r3, #32]
   23f2c:	b118      	cbz	r0, 23f36 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   23f2e:	2200      	movs	r2, #0
   23f30:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   23f32:	f01a fd14 	bl	3e95e <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   23f36:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   23f38:	bd08      	pop	{r3, pc}
   23f3a:	bf00      	nop
   23f3c:	20029368 	.word	0x20029368

00023f40 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
   23f40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23f44:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   23f46:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
   23f48:	2e0f      	cmp	r6, #15
{
   23f4a:	4688      	mov	r8, r1
   23f4c:	4691      	mov	r9, r2
   23f4e:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   23f50:	d126      	bne.n	23fa0 <arch_new_thread+0x60>
   23f52:	4b1e      	ldr	r3, [pc, #120]	; (23fcc <arch_new_thread+0x8c>)
   23f54:	429f      	cmp	r7, r3
   23f56:	d127      	bne.n	23fa8 <arch_new_thread+0x68>
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
   23f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23f5a:	464a      	mov	r2, r9
   23f5c:	9300      	str	r3, [sp, #0]
   23f5e:	4641      	mov	r1, r8
   23f60:	4633      	mov	r3, r6
   23f62:	4628      	mov	r0, r5
   23f64:	f01a fdaa 	bl	3eabc <z_new_thread_init>
	stackEnd = pStackMem + stackSize;
   23f68:	eb08 0409 	add.w	r4, r8, r9
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   23f6c:	4a18      	ldr	r2, [pc, #96]	; (23fd0 <arch_new_thread+0x90>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   23f6e:	f1a4 0320 	sub.w	r3, r4, #32
   23f72:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   23f76:	f022 0201 	bic.w	r2, r2, #1
   23f7a:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   23f7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	pInitCtx->basic.a1 = (u32_t)pEntry;
   23f7e:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   23f80:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   23f82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   23f84:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   23f86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   23f88:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
   23f8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   23f8e:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
   23f90:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
   23f92:	2300      	movs	r3, #0
   23f94:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
   23f96:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   23f9a:	b003      	add	sp, #12
   23f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   23fa0:	f106 0310 	add.w	r3, r6, #16
   23fa4:	2b1e      	cmp	r3, #30
   23fa6:	d9d7      	bls.n	23f58 <arch_new_thread+0x18>
   23fa8:	232d      	movs	r3, #45	; 0x2d
   23faa:	4a0a      	ldr	r2, [pc, #40]	; (23fd4 <arch_new_thread+0x94>)
   23fac:	490a      	ldr	r1, [pc, #40]	; (23fd8 <arch_new_thread+0x98>)
   23fae:	480b      	ldr	r0, [pc, #44]	; (23fdc <arch_new_thread+0x9c>)
   23fb0:	f018 fb10 	bl	3c5d4 <printk>
   23fb4:	4631      	mov	r1, r6
   23fb6:	f06f 030f 	mvn.w	r3, #15
   23fba:	220e      	movs	r2, #14
   23fbc:	4808      	ldr	r0, [pc, #32]	; (23fe0 <arch_new_thread+0xa0>)
   23fbe:	f018 fb09 	bl	3c5d4 <printk>
   23fc2:	212d      	movs	r1, #45	; 0x2d
   23fc4:	4803      	ldr	r0, [pc, #12]	; (23fd4 <arch_new_thread+0x94>)
   23fc6:	f018 fb4b 	bl	3c660 <assert_post_action>
   23fca:	e7c5      	b.n	23f58 <arch_new_thread+0x18>
   23fcc:	00036849 	.word	0x00036849
   23fd0:	0003c617 	.word	0x0003c617
   23fd4:	000428a5 	.word	0x000428a5
   23fd8:	000428d0 	.word	0x000428d0
   23fdc:	00041757 	.word	0x00041757
   23fe0:	0004295d 	.word	0x0004295d

00023fe4 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   23fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23fe6:	461f      	mov	r7, r3
   23fe8:	4606      	mov	r6, r0
   23fea:	460d      	mov	r5, r1
   23fec:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   23fee:	2300      	movs	r3, #0
   23ff0:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   23ff4:	f3ef 8214 	mrs	r2, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   23ff8:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   23ffc:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   24000:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   24004:	f000 fc2a 	bl	2485c <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   24008:	4b0b      	ldr	r3, [pc, #44]	; (24038 <arch_switch_to_main_thread+0x54>)
	start_of_main_stack =
   2400a:	442c      	add	r4, r5
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   2400c:	4630      	mov	r0, r6
	_current = main_thread;
   2400e:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   24010:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
   24014:	f018 fcd1 	bl	3c9ba <z_arm_configure_dynamic_mpu_regions>
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   24018:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   2401c:	4638      	mov	r0, r7
   2401e:	f384 8809 	msr	PSP, r4
   24022:	2100      	movs	r1, #0
   24024:	b663      	cpsie	if
   24026:	f381 8811 	msr	BASEPRI, r1
   2402a:	f3bf 8f6f 	isb	sy
   2402e:	2200      	movs	r2, #0
   24030:	2300      	movs	r3, #0
   24032:	f018 faf0 	bl	3c616 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   24036:	bf00      	nop
   24038:	20029368 	.word	0x20029368

0002403c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2403c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24040:	4681      	mov	r9, r0
   24042:	b086      	sub	sp, #24

	if (esf != NULL) {
   24044:	460c      	mov	r4, r1
   24046:	2900      	cmp	r1, #0
   24048:	d075      	beq.n	24136 <z_arm_fatal_error+0xfa>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   2404a:	2301      	movs	r3, #1
   2404c:	f04f 0000 	mov.w	r0, #0
   24050:	4d3c      	ldr	r5, [pc, #240]	; (24144 <z_arm_fatal_error+0x108>)
   24052:	f363 0007 	bfi	r0, r3, #0, #8
   24056:	4b3c      	ldr	r3, [pc, #240]	; (24148 <z_arm_fatal_error+0x10c>)
   24058:	4627      	mov	r7, r4
   2405a:	1aed      	subs	r5, r5, r3
   2405c:	688b      	ldr	r3, [r1, #8]
   2405e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   24062:	9300      	str	r3, [sp, #0]
   24064:	e9d1 2300 	ldrd	r2, r3, [r1]
   24068:	f365 108f 	bfi	r0, r5, #6, #10
   2406c:	4937      	ldr	r1, [pc, #220]	; (2414c <z_arm_fatal_error+0x110>)
   2406e:	f018 fb08 	bl	3c682 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   24072:	2301      	movs	r3, #1
   24074:	f04f 0000 	mov.w	r0, #0
   24078:	f363 0007 	bfi	r0, r3, #0, #8
   2407c:	6963      	ldr	r3, [r4, #20]
   2407e:	f365 108f 	bfi	r0, r5, #6, #10
   24082:	9300      	str	r3, [sp, #0]
   24084:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   24088:	4931      	ldr	r1, [pc, #196]	; (24150 <z_arm_fatal_error+0x114>)
   2408a:	f018 fafa 	bl	3c682 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   2408e:	2301      	movs	r3, #1
   24090:	f04f 0000 	mov.w	r0, #0
   24094:	f363 0007 	bfi	r0, r3, #0, #8
   24098:	f365 108f 	bfi	r0, r5, #6, #10
   2409c:	69e2      	ldr	r2, [r4, #28]
   2409e:	492d      	ldr	r1, [pc, #180]	; (24154 <z_arm_fatal_error+0x118>)
   240a0:	f018 faef 	bl	3c682 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   240a4:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   240a6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 24160 <z_arm_fatal_error+0x124>
   240aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   240ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   240b2:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   240b6:	f043 0301 	orr.w	r3, r3, #1
   240ba:	f363 0807 	bfi	r8, r3, #0, #8
   240be:	1cf3      	adds	r3, r6, #3
   240c0:	ed97 7a08 	vldr	s14, [r7, #32]
   240c4:	9304      	str	r3, [sp, #16]
   240c6:	edcd 7a05 	vstr	s15, [sp, #20]
   240ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   240ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   240d2:	1cb3      	adds	r3, r6, #2
   240d4:	9302      	str	r3, [sp, #8]
   240d6:	edcd 7a03 	vstr	s15, [sp, #12]
   240da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   240de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   240e2:	edcd 7a01 	vstr	s15, [sp, #4]
   240e6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   240ea:	1c73      	adds	r3, r6, #1
   240ec:	f365 188f 	bfi	r8, r5, #6, #10
   240f0:	9300      	str	r3, [sp, #0]
   240f2:	4632      	mov	r2, r6
   240f4:	ee17 3a90 	vmov	r3, s15
   240f8:	4651      	mov	r1, sl
   240fa:	4640      	mov	r0, r8
	for (int i = 0; i < 16; i += 4) {
   240fc:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   240fe:	f018 fac0 	bl	3c682 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   24102:	2e10      	cmp	r6, #16
   24104:	f107 0710 	add.w	r7, r7, #16
   24108:	d1cf      	bne.n	240aa <z_arm_fatal_error+0x6e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   2410a:	2301      	movs	r3, #1
   2410c:	f04f 0000 	mov.w	r0, #0
   24110:	f363 0007 	bfi	r0, r3, #0, #8
   24114:	f365 108f 	bfi	r0, r5, #6, #10
   24118:	6e22      	ldr	r2, [r4, #96]	; 0x60
   2411a:	490f      	ldr	r1, [pc, #60]	; (24158 <z_arm_fatal_error+0x11c>)
   2411c:	f018 fab1 	bl	3c682 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   24120:	f04f 0000 	mov.w	r0, #0
   24124:	2301      	movs	r3, #1
   24126:	f363 0007 	bfi	r0, r3, #0, #8
   2412a:	f365 108f 	bfi	r0, r5, #6, #10
   2412e:	69a2      	ldr	r2, [r4, #24]
   24130:	490a      	ldr	r1, [pc, #40]	; (2415c <z_arm_fatal_error+0x120>)
   24132:	f018 faa6 	bl	3c682 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   24136:	4621      	mov	r1, r4
   24138:	4648      	mov	r0, r9
}
   2413a:	b006      	add	sp, #24
   2413c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
   24140:	f012 bb06 	b.w	36750 <z_fatal_error>
   24144:	000403c4 	.word	0x000403c4
   24148:	000402cc 	.word	0x000402cc
   2414c:	0004298e 	.word	0x0004298e
   24150:	000429bd 	.word	0x000429bd
   24154:	000429ec 	.word	0x000429ec
   24158:	00042a3e 	.word	0x00042a3e
   2415c:	00042a4d 	.word	0x00042a4d
   24160:	000429fb 	.word	0x000429fb

00024164 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   24164:	4a11      	ldr	r2, [pc, #68]	; (241ac <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   24166:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   24168:	4b11      	ldr	r3, [pc, #68]	; (241b0 <z_arm_prep_c+0x4c>)
   2416a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2416e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   24170:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   24174:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   24178:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2417c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   24180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   24184:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   24188:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   2418c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   24190:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   24194:	2300      	movs	r3, #0
   24196:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   2419a:	f012 fb6f 	bl	3687c <z_bss_zero>
	z_data_copy();
   2419e:	f012 fb77 	bl	36890 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   241a2:	f000 fb11 	bl	247c8 <z_arm_int_lib_init>
	z_cstart();
   241a6:	f012 fbb1 	bl	3690c <z_cstart>
   241aa:	bf00      	nop
   241ac:	0001c200 	.word	0x0001c200
   241b0:	e000ed00 	.word	0xe000ed00

000241b4 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   241b4:	f018 fa5c 	bl	3c670 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   241b8:	2020      	movs	r0, #32
    msr BASEPRI, r0
   241ba:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   241be:	4808      	ldr	r0, [pc, #32]	; (241e0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   241c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   241c4:	1840      	adds	r0, r0, r1
    msr PSP, r0
   241c6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   241ca:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   241ce:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   241d0:	4308      	orrs	r0, r1
    msr CONTROL, r0
   241d2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   241d6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   241da:	f7ff ffc3 	bl	24164 <z_arm_prep_c>
   241de:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   241e0:	2002ea60 	.word	0x2002ea60

000241e4 <mem_manage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   241e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   241e6:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   241e8:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   241ea:	f04f 0000 	mov.w	r0, #0
   241ee:	4c40      	ldr	r4, [pc, #256]	; (242f0 <mem_manage_fault.isra.2+0x10c>)
   241f0:	f363 0007 	bfi	r0, r3, #0, #8
   241f4:	4b3f      	ldr	r3, [pc, #252]	; (242f4 <mem_manage_fault.isra.2+0x110>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   241f6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   241f8:	1ae4      	subs	r4, r4, r3
   241fa:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   241fe:	493e      	ldr	r1, [pc, #248]	; (242f8 <mem_manage_fault.isra.2+0x114>)
   24200:	f364 108f 	bfi	r0, r4, #6, #10
   24204:	f018 fa3d 	bl	3c682 <log_string_sync>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   24208:	4b3c      	ldr	r3, [pc, #240]	; (242fc <mem_manage_fault.isra.2+0x118>)
   2420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2420c:	06d9      	lsls	r1, r3, #27
   2420e:	d509      	bpl.n	24224 <mem_manage_fault.isra.2+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   24210:	f04f 0000 	mov.w	r0, #0
   24214:	2301      	movs	r3, #1
   24216:	f363 0007 	bfi	r0, r3, #0, #8
   2421a:	f364 108f 	bfi	r0, r4, #6, #10
   2421e:	4938      	ldr	r1, [pc, #224]	; (24300 <mem_manage_fault.isra.2+0x11c>)
   24220:	f018 fa2f 	bl	3c682 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   24224:	4b35      	ldr	r3, [pc, #212]	; (242fc <mem_manage_fault.isra.2+0x118>)
   24226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24228:	071a      	lsls	r2, r3, #28
   2422a:	d509      	bpl.n	24240 <mem_manage_fault.isra.2+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   2422c:	f04f 0000 	mov.w	r0, #0
   24230:	2301      	movs	r3, #1
   24232:	f363 0007 	bfi	r0, r3, #0, #8
   24236:	f364 108f 	bfi	r0, r4, #6, #10
   2423a:	4932      	ldr	r1, [pc, #200]	; (24304 <mem_manage_fault.isra.2+0x120>)
   2423c:	f018 fa21 	bl	3c682 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   24240:	4d2e      	ldr	r5, [pc, #184]	; (242fc <mem_manage_fault.isra.2+0x118>)
   24242:	6aab      	ldr	r3, [r5, #40]	; 0x28
   24244:	079b      	lsls	r3, r3, #30
   24246:	d51c      	bpl.n	24282 <mem_manage_fault.isra.2+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
   24248:	2301      	movs	r3, #1
   2424a:	f04f 0000 	mov.w	r0, #0
   2424e:	f363 0007 	bfi	r0, r3, #0, #8
   24252:	f364 108f 	bfi	r0, r4, #6, #10
   24256:	492c      	ldr	r1, [pc, #176]	; (24308 <mem_manage_fault.isra.2+0x124>)
   24258:	f018 fa13 	bl	3c682 <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   2425c:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   2425e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   24260:	0618      	lsls	r0, r3, #24
   24262:	d50e      	bpl.n	24282 <mem_manage_fault.isra.2+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   24264:	f04f 0000 	mov.w	r0, #0
   24268:	2301      	movs	r3, #1
   2426a:	f363 0007 	bfi	r0, r3, #0, #8
   2426e:	f364 108f 	bfi	r0, r4, #6, #10
   24272:	4926      	ldr	r1, [pc, #152]	; (2430c <mem_manage_fault.isra.2+0x128>)
   24274:	f018 fa05 	bl	3c682 <log_string_sync>
			if (from_hard_fault) {
   24278:	b11f      	cbz	r7, 24282 <mem_manage_fault.isra.2+0x9e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2427a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2427c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   24280:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   24282:	4b1e      	ldr	r3, [pc, #120]	; (242fc <mem_manage_fault.isra.2+0x118>)
   24284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24286:	07d9      	lsls	r1, r3, #31
   24288:	d509      	bpl.n	2429e <mem_manage_fault.isra.2+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
   2428a:	f04f 0000 	mov.w	r0, #0
   2428e:	2301      	movs	r3, #1
   24290:	f363 0007 	bfi	r0, r3, #0, #8
   24294:	f364 108f 	bfi	r0, r4, #6, #10
   24298:	491d      	ldr	r1, [pc, #116]	; (24310 <mem_manage_fault.isra.2+0x12c>)
   2429a:	f018 f9f2 	bl	3c682 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2429e:	4b17      	ldr	r3, [pc, #92]	; (242fc <mem_manage_fault.isra.2+0x118>)
   242a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   242a2:	069a      	lsls	r2, r3, #26
   242a4:	d509      	bpl.n	242ba <mem_manage_fault.isra.2+0xd6>
		PR_FAULT_INFO(
   242a6:	f04f 0000 	mov.w	r0, #0
   242aa:	2301      	movs	r3, #1
   242ac:	f363 0007 	bfi	r0, r3, #0, #8
   242b0:	f364 108f 	bfi	r0, r4, #6, #10
   242b4:	4917      	ldr	r1, [pc, #92]	; (24314 <mem_manage_fault.isra.2+0x130>)
   242b6:	f018 f9e4 	bl	3c682 <log_string_sync>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   242ba:	4b10      	ldr	r3, [pc, #64]	; (242fc <mem_manage_fault.isra.2+0x118>)
   242bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   242be:	06db      	lsls	r3, r3, #27
   242c0:	d50e      	bpl.n	242e0 <mem_manage_fault.isra.2+0xfc>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(0,
   242c2:	4915      	ldr	r1, [pc, #84]	; (24318 <mem_manage_fault.isra.2+0x134>)
   242c4:	f44f 739b 	mov.w	r3, #310	; 0x136
   242c8:	4a14      	ldr	r2, [pc, #80]	; (2431c <mem_manage_fault.isra.2+0x138>)
   242ca:	4815      	ldr	r0, [pc, #84]	; (24320 <mem_manage_fault.isra.2+0x13c>)
   242cc:	f018 f982 	bl	3c5d4 <printk>
   242d0:	4814      	ldr	r0, [pc, #80]	; (24324 <mem_manage_fault.isra.2+0x140>)
   242d2:	f018 f97f 	bl	3c5d4 <printk>
   242d6:	f44f 719b 	mov.w	r1, #310	; 0x136
   242da:	4810      	ldr	r0, [pc, #64]	; (2431c <mem_manage_fault.isra.2+0x138>)
   242dc:	f018 f9c0 	bl	3c660 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   242e0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   242e2:	4a06      	ldr	r2, [pc, #24]	; (242fc <mem_manage_fault.isra.2+0x118>)
   242e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   242e6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   242ea:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   242ec:	7030      	strb	r0, [r6, #0]

	return reason;
}
   242ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   242f0:	000403c4 	.word	0x000403c4
   242f4:	000402cc 	.word	0x000402cc
   242f8:	00042b03 	.word	0x00042b03
   242fc:	e000ed00 	.word	0xe000ed00
   24300:	00042b19 	.word	0x00042b19
   24304:	00042b4c 	.word	0x00042b4c
   24308:	00042b5f 	.word	0x00042b5f
   2430c:	00042b77 	.word	0x00042b77
   24310:	00042b8d 	.word	0x00042b8d
   24314:	00042bac 	.word	0x00042bac
   24318:	00046834 	.word	0x00046834
   2431c:	00042bdb 	.word	0x00042bdb
   24320:	00041757 	.word	0x00041757
   24324:	00042c0e 	.word	0x00042c0e

00024328 <bus_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   24328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   2432a:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   2432c:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   2432e:	f04f 0000 	mov.w	r0, #0
   24332:	4c3d      	ldr	r4, [pc, #244]	; (24428 <bus_fault.isra.3+0x100>)
   24334:	f363 0007 	bfi	r0, r3, #0, #8
   24338:	4b3c      	ldr	r3, [pc, #240]	; (2442c <bus_fault.isra.3+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   2433a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   2433c:	1ae4      	subs	r4, r4, r3
   2433e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   24342:	493b      	ldr	r1, [pc, #236]	; (24430 <bus_fault.isra.3+0x108>)
   24344:	f364 108f 	bfi	r0, r4, #6, #10
   24348:	f018 f99b 	bl	3c682 <log_string_sync>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2434c:	4b39      	ldr	r3, [pc, #228]	; (24434 <bus_fault.isra.3+0x10c>)
   2434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24350:	04d9      	lsls	r1, r3, #19
   24352:	d509      	bpl.n	24368 <bus_fault.isra.3+0x40>
		PR_FAULT_INFO("  Stacking error");
   24354:	f04f 0000 	mov.w	r0, #0
   24358:	2301      	movs	r3, #1
   2435a:	f363 0007 	bfi	r0, r3, #0, #8
   2435e:	f364 108f 	bfi	r0, r4, #6, #10
   24362:	4935      	ldr	r1, [pc, #212]	; (24438 <bus_fault.isra.3+0x110>)
   24364:	f018 f98d 	bl	3c682 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   24368:	4b32      	ldr	r3, [pc, #200]	; (24434 <bus_fault.isra.3+0x10c>)
   2436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2436c:	051a      	lsls	r2, r3, #20
   2436e:	d509      	bpl.n	24384 <bus_fault.isra.3+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   24370:	f04f 0000 	mov.w	r0, #0
   24374:	2301      	movs	r3, #1
   24376:	f363 0007 	bfi	r0, r3, #0, #8
   2437a:	f364 108f 	bfi	r0, r4, #6, #10
   2437e:	492f      	ldr	r1, [pc, #188]	; (2443c <bus_fault.isra.3+0x114>)
   24380:	f018 f97f 	bl	3c682 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   24384:	4d2b      	ldr	r5, [pc, #172]	; (24434 <bus_fault.isra.3+0x10c>)
   24386:	6aab      	ldr	r3, [r5, #40]	; 0x28
   24388:	059b      	lsls	r3, r3, #22
   2438a:	d51c      	bpl.n	243c6 <bus_fault.isra.3+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
   2438c:	2301      	movs	r3, #1
   2438e:	f04f 0000 	mov.w	r0, #0
   24392:	f363 0007 	bfi	r0, r3, #0, #8
   24396:	f364 108f 	bfi	r0, r4, #6, #10
   2439a:	4929      	ldr	r1, [pc, #164]	; (24440 <bus_fault.isra.3+0x118>)
   2439c:	f018 f971 	bl	3c682 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   243a0:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   243a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   243a4:	0418      	lsls	r0, r3, #16
   243a6:	d50e      	bpl.n	243c6 <bus_fault.isra.3+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   243a8:	f04f 0000 	mov.w	r0, #0
   243ac:	2301      	movs	r3, #1
   243ae:	f363 0007 	bfi	r0, r3, #0, #8
   243b2:	f364 108f 	bfi	r0, r4, #6, #10
   243b6:	4923      	ldr	r1, [pc, #140]	; (24444 <bus_fault.isra.3+0x11c>)
   243b8:	f018 f963 	bl	3c682 <log_string_sync>
			if (from_hard_fault) {
   243bc:	b11f      	cbz	r7, 243c6 <bus_fault.isra.3+0x9e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   243be:	6aab      	ldr	r3, [r5, #40]	; 0x28
   243c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   243c4:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   243c6:	4b1b      	ldr	r3, [pc, #108]	; (24434 <bus_fault.isra.3+0x10c>)
   243c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   243ca:	0559      	lsls	r1, r3, #21
   243cc:	d509      	bpl.n	243e2 <bus_fault.isra.3+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
   243ce:	f04f 0000 	mov.w	r0, #0
   243d2:	2301      	movs	r3, #1
   243d4:	f363 0007 	bfi	r0, r3, #0, #8
   243d8:	f364 108f 	bfi	r0, r4, #6, #10
   243dc:	491a      	ldr	r1, [pc, #104]	; (24448 <bus_fault.isra.3+0x120>)
   243de:	f018 f950 	bl	3c682 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   243e2:	4b14      	ldr	r3, [pc, #80]	; (24434 <bus_fault.isra.3+0x10c>)
   243e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   243e6:	05d2      	lsls	r2, r2, #23
   243e8:	d511      	bpl.n	2440e <bus_fault.isra.3+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
   243ea:	f04f 0000 	mov.w	r0, #0
   243ee:	2301      	movs	r3, #1
   243f0:	4916      	ldr	r1, [pc, #88]	; (2444c <bus_fault.isra.3+0x124>)
   243f2:	f363 0007 	bfi	r0, r3, #0, #8
   243f6:	f364 108f 	bfi	r0, r4, #6, #10
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   243fa:	f018 f942 	bl	3c682 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   243fe:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   24400:	4a0c      	ldr	r2, [pc, #48]	; (24434 <bus_fault.isra.3+0x10c>)
   24402:	6a93      	ldr	r3, [r2, #40]	; 0x28
   24404:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   24408:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   2440a:	7030      	strb	r0, [r6, #0]

	return reason;
}
   2440c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24410:	049b      	lsls	r3, r3, #18
   24412:	d5f4      	bpl.n	243fe <bus_fault.isra.3+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   24414:	f04f 0000 	mov.w	r0, #0
   24418:	2301      	movs	r3, #1
   2441a:	f363 0007 	bfi	r0, r3, #0, #8
   2441e:	f364 108f 	bfi	r0, r4, #6, #10
   24422:	490b      	ldr	r1, [pc, #44]	; (24450 <bus_fault.isra.3+0x128>)
   24424:	e7e9      	b.n	243fa <bus_fault.isra.3+0xd2>
   24426:	bf00      	nop
   24428:	000403c4 	.word	0x000403c4
   2442c:	000402cc 	.word	0x000402cc
   24430:	00042a7b 	.word	0x00042a7b
   24434:	e000ed00 	.word	0xe000ed00
   24438:	00042a91 	.word	0x00042a91
   2443c:	00042b4c 	.word	0x00042b4c
   24440:	00042aa2 	.word	0x00042aa2
   24444:	00042abb 	.word	0x00042abb
   24448:	00042ad0 	.word	0x00042ad0
   2444c:	00042aeb 	.word	0x00042aeb
   24450:	00042bac 	.word	0x00042bac

00024454 <usage_fault.isra.4>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   24454:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   24456:	f04f 0000 	mov.w	r0, #0
   2445a:	2301      	movs	r3, #1
   2445c:	4c3c      	ldr	r4, [pc, #240]	; (24550 <usage_fault.isra.4+0xfc>)
   2445e:	f363 0007 	bfi	r0, r3, #0, #8
   24462:	4b3c      	ldr	r3, [pc, #240]	; (24554 <usage_fault.isra.4+0x100>)
   24464:	493c      	ldr	r1, [pc, #240]	; (24558 <usage_fault.isra.4+0x104>)
   24466:	1ae4      	subs	r4, r4, r3
   24468:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2446c:	f364 108f 	bfi	r0, r4, #6, #10
   24470:	f018 f907 	bl	3c682 <log_string_sync>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   24474:	4b39      	ldr	r3, [pc, #228]	; (2455c <usage_fault.isra.4+0x108>)
   24476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24478:	019b      	lsls	r3, r3, #6
   2447a:	d509      	bpl.n	24490 <usage_fault.isra.4+0x3c>
		PR_FAULT_INFO("  Division by zero");
   2447c:	f04f 0000 	mov.w	r0, #0
   24480:	2301      	movs	r3, #1
   24482:	f363 0007 	bfi	r0, r3, #0, #8
   24486:	f364 108f 	bfi	r0, r4, #6, #10
   2448a:	4935      	ldr	r1, [pc, #212]	; (24560 <usage_fault.isra.4+0x10c>)
   2448c:	f018 f8f9 	bl	3c682 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   24490:	4b32      	ldr	r3, [pc, #200]	; (2455c <usage_fault.isra.4+0x108>)
   24492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24494:	01dd      	lsls	r5, r3, #7
   24496:	d509      	bpl.n	244ac <usage_fault.isra.4+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   24498:	f04f 0000 	mov.w	r0, #0
   2449c:	2301      	movs	r3, #1
   2449e:	f363 0007 	bfi	r0, r3, #0, #8
   244a2:	f364 108f 	bfi	r0, r4, #6, #10
   244a6:	492f      	ldr	r1, [pc, #188]	; (24564 <usage_fault.isra.4+0x110>)
   244a8:	f018 f8eb 	bl	3c682 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   244ac:	4b2b      	ldr	r3, [pc, #172]	; (2455c <usage_fault.isra.4+0x108>)
   244ae:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   244b0:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   244b4:	d00a      	beq.n	244cc <usage_fault.isra.4+0x78>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   244b6:	2301      	movs	r3, #1
   244b8:	f04f 0000 	mov.w	r0, #0
   244bc:	f363 0007 	bfi	r0, r3, #0, #8
   244c0:	f364 108f 	bfi	r0, r4, #6, #10
   244c4:	4928      	ldr	r1, [pc, #160]	; (24568 <usage_fault.isra.4+0x114>)
   244c6:	f018 f8dc 	bl	3c682 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   244ca:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   244cc:	4b23      	ldr	r3, [pc, #140]	; (2455c <usage_fault.isra.4+0x108>)
   244ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   244d0:	0318      	lsls	r0, r3, #12
   244d2:	d509      	bpl.n	244e8 <usage_fault.isra.4+0x94>
		PR_FAULT_INFO("  No coprocessor instructions");
   244d4:	f04f 0000 	mov.w	r0, #0
   244d8:	2301      	movs	r3, #1
   244da:	f363 0007 	bfi	r0, r3, #0, #8
   244de:	f364 108f 	bfi	r0, r4, #6, #10
   244e2:	4922      	ldr	r1, [pc, #136]	; (2456c <usage_fault.isra.4+0x118>)
   244e4:	f018 f8cd 	bl	3c682 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   244e8:	4b1c      	ldr	r3, [pc, #112]	; (2455c <usage_fault.isra.4+0x108>)
   244ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   244ec:	0359      	lsls	r1, r3, #13
   244ee:	d509      	bpl.n	24504 <usage_fault.isra.4+0xb0>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   244f0:	f04f 0000 	mov.w	r0, #0
   244f4:	2301      	movs	r3, #1
   244f6:	f363 0007 	bfi	r0, r3, #0, #8
   244fa:	f364 108f 	bfi	r0, r4, #6, #10
   244fe:	491c      	ldr	r1, [pc, #112]	; (24570 <usage_fault.isra.4+0x11c>)
   24500:	f018 f8bf 	bl	3c682 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   24504:	4b15      	ldr	r3, [pc, #84]	; (2455c <usage_fault.isra.4+0x108>)
   24506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24508:	039a      	lsls	r2, r3, #14
   2450a:	d509      	bpl.n	24520 <usage_fault.isra.4+0xcc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   2450c:	f04f 0000 	mov.w	r0, #0
   24510:	2301      	movs	r3, #1
   24512:	f363 0007 	bfi	r0, r3, #0, #8
   24516:	f364 108f 	bfi	r0, r4, #6, #10
   2451a:	4916      	ldr	r1, [pc, #88]	; (24574 <usage_fault.isra.4+0x120>)
   2451c:	f018 f8b1 	bl	3c682 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   24520:	4b0e      	ldr	r3, [pc, #56]	; (2455c <usage_fault.isra.4+0x108>)
   24522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24524:	03db      	lsls	r3, r3, #15
   24526:	d509      	bpl.n	2453c <usage_fault.isra.4+0xe8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   24528:	f04f 0000 	mov.w	r0, #0
   2452c:	2301      	movs	r3, #1
   2452e:	f363 0007 	bfi	r0, r3, #0, #8
   24532:	f364 108f 	bfi	r0, r4, #6, #10
   24536:	4910      	ldr	r1, [pc, #64]	; (24578 <usage_fault.isra.4+0x124>)
   24538:	f018 f8a3 	bl	3c682 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2453c:	4a07      	ldr	r2, [pc, #28]	; (2455c <usage_fault.isra.4+0x108>)

	return reason;
}
   2453e:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   24540:	6a93      	ldr	r3, [r2, #40]	; 0x28
   24542:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   24546:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   2454a:	6293      	str	r3, [r2, #40]	; 0x28
}
   2454c:	bd38      	pop	{r3, r4, r5, pc}
   2454e:	bf00      	nop
   24550:	000403c4 	.word	0x000403c4
   24554:	000402cc 	.word	0x000402cc
   24558:	00042c48 	.word	0x00042c48
   2455c:	e000ed00 	.word	0xe000ed00
   24560:	00042c60 	.word	0x00042c60
   24564:	00042c73 	.word	0x00042c73
   24568:	00042c8d 	.word	0x00042c8d
   2456c:	00042cb7 	.word	0x00042cb7
   24570:	00042cd5 	.word	0x00042cd5
   24574:	00042cfa 	.word	0x00042cfa
   24578:	00042d14 	.word	0x00042d14

0002457c <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   2457c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   24580:	4b70      	ldr	r3, [pc, #448]	; (24744 <z_arm_fault+0x1c8>)
{
   24582:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   24584:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   24588:	4606      	mov	r6, r0
   2458a:	4689      	mov	r9, r1
   2458c:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2458e:	f3c8 0708 	ubfx	r7, r8, #0, #9
   24592:	2500      	movs	r5, #0
   24594:	f385 8811 	msr	BASEPRI, r5
   24598:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   2459c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   245a0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   245a4:	d11b      	bne.n	245de <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   245a6:	07d0      	lsls	r0, r2, #31
   245a8:	d419      	bmi.n	245de <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   245aa:	0651      	lsls	r1, r2, #25
   245ac:	d403      	bmi.n	245b6 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   245ae:	0722      	lsls	r2, r4, #28
   245b0:	d412      	bmi.n	245d8 <z_arm_fault+0x5c>
			*nested_exc = true;
   245b2:	2501      	movs	r5, #1
   245b4:	e012      	b.n	245dc <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
   245b6:	2301      	movs	r3, #1
   245b8:	f04f 0000 	mov.w	r0, #0
   245bc:	4a62      	ldr	r2, [pc, #392]	; (24748 <z_arm_fault+0x1cc>)
   245be:	f363 0007 	bfi	r0, r3, #0, #8
   245c2:	4b62      	ldr	r3, [pc, #392]	; (2474c <z_arm_fault+0x1d0>)
   245c4:	4962      	ldr	r1, [pc, #392]	; (24750 <z_arm_fault+0x1d4>)
   245c6:	1a9b      	subs	r3, r3, r2
   245c8:	08db      	lsrs	r3, r3, #3
   245ca:	f363 108f 	bfi	r0, r3, #6, #10
   245ce:	f018 f858 	bl	3c682 <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   245d2:	f014 0504 	ands.w	r5, r4, #4
   245d6:	d001      	beq.n	245dc <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
   245d8:	464e      	mov	r6, r9
	*nested_exc = false;
   245da:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   245dc:	b97e      	cbnz	r6, 245fe <z_arm_fault+0x82>
   245de:	f240 33b1 	movw	r3, #945	; 0x3b1
   245e2:	4a5c      	ldr	r2, [pc, #368]	; (24754 <z_arm_fault+0x1d8>)
   245e4:	495c      	ldr	r1, [pc, #368]	; (24758 <z_arm_fault+0x1dc>)
   245e6:	485d      	ldr	r0, [pc, #372]	; (2475c <z_arm_fault+0x1e0>)
   245e8:	f017 fff4 	bl	3c5d4 <printk>
   245ec:	485c      	ldr	r0, [pc, #368]	; (24760 <z_arm_fault+0x1e4>)
   245ee:	f017 fff1 	bl	3c5d4 <printk>
   245f2:	f240 31b1 	movw	r1, #945	; 0x3b1
   245f6:	4857      	ldr	r0, [pc, #348]	; (24754 <z_arm_fault+0x1d8>)
   245f8:	f018 f832 	bl	3c660 <assert_post_action>
   245fc:	2600      	movs	r6, #0
	*recoverable = false;
   245fe:	2300      	movs	r3, #0
   24600:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   24604:	1efb      	subs	r3, r7, #3
   24606:	2b09      	cmp	r3, #9
   24608:	d87f      	bhi.n	2470a <z_arm_fault+0x18e>
   2460a:	e8df f003 	tbb	[pc, r3]
   2460e:	6905      	.short	0x6905
   24610:	7e7e4c6d 	.word	0x7e7e4c6d
   24614:	717e7e7e 	.word	0x717e7e7e
	PR_FAULT_INFO("***** HARD FAULT *****");
   24618:	2301      	movs	r3, #1
   2461a:	f04f 0000 	mov.w	r0, #0
	*recoverable = false;
   2461e:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
   24622:	f363 0007 	bfi	r0, r3, #0, #8
   24626:	4f49      	ldr	r7, [pc, #292]	; (2474c <z_arm_fault+0x1d0>)
   24628:	4b47      	ldr	r3, [pc, #284]	; (24748 <z_arm_fault+0x1cc>)
   2462a:	494e      	ldr	r1, [pc, #312]	; (24764 <z_arm_fault+0x1e8>)
   2462c:	1aff      	subs	r7, r7, r3
   2462e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
   24632:	f367 108f 	bfi	r0, r7, #6, #10
   24636:	f018 f824 	bl	3c682 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2463a:	4b42      	ldr	r3, [pc, #264]	; (24744 <z_arm_fault+0x1c8>)
	*recoverable = false;
   2463c:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   24640:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   24642:	f014 0402 	ands.w	r4, r4, #2
   24646:	d00b      	beq.n	24660 <z_arm_fault+0xe4>
		PR_EXC("  Bus fault on vector table read");
   24648:	f04f 0000 	mov.w	r0, #0
   2464c:	2301      	movs	r3, #1
   2464e:	4946      	ldr	r1, [pc, #280]	; (24768 <z_arm_fault+0x1ec>)
   24650:	f363 0007 	bfi	r0, r3, #0, #8
   24654:	f367 108f 	bfi	r0, r7, #6, #10
	PR_FAULT_INFO(
   24658:	f018 f813 	bl	3c682 <log_string_sync>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   2465c:	2400      	movs	r4, #0
   2465e:	e025      	b.n	246ac <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   24660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24662:	005b      	lsls	r3, r3, #1
   24664:	d522      	bpl.n	246ac <z_arm_fault+0x130>
		PR_EXC("  Fault escalation (see below)");
   24666:	2301      	movs	r3, #1
   24668:	f04f 0000 	mov.w	r0, #0
   2466c:	f363 0007 	bfi	r0, r3, #0, #8
   24670:	f367 108f 	bfi	r0, r7, #6, #10
   24674:	493d      	ldr	r1, [pc, #244]	; (2476c <z_arm_fault+0x1f0>)
   24676:	f018 f804 	bl	3c682 <log_string_sync>
		if (SCB_MMFSR != 0) {
   2467a:	4b3d      	ldr	r3, [pc, #244]	; (24770 <z_arm_fault+0x1f4>)
   2467c:	781b      	ldrb	r3, [r3, #0]
   2467e:	b12b      	cbz	r3, 2468c <z_arm_fault+0x110>
			reason = mem_manage_fault(esf, 1, recoverable);
   24680:	2001      	movs	r0, #1
   24682:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   24686:	f7ff fdad 	bl	241e4 <mem_manage_fault.isra.2>
   2468a:	e00e      	b.n	246aa <z_arm_fault+0x12e>
		} else if (SCB_BFSR != 0) {
   2468c:	4b39      	ldr	r3, [pc, #228]	; (24774 <z_arm_fault+0x1f8>)
   2468e:	781b      	ldrb	r3, [r3, #0]
   24690:	b12b      	cbz	r3, 2469e <z_arm_fault+0x122>
			reason = bus_fault(esf, 1, recoverable);
   24692:	2001      	movs	r0, #1
   24694:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   24698:	f7ff fe46 	bl	24328 <bus_fault.isra.3>
   2469c:	e005      	b.n	246aa <z_arm_fault+0x12e>
		} else if (SCB_UFSR != 0) {
   2469e:	4b36      	ldr	r3, [pc, #216]	; (24778 <z_arm_fault+0x1fc>)
   246a0:	881b      	ldrh	r3, [r3, #0]
   246a2:	b29b      	uxth	r3, r3
   246a4:	b113      	cbz	r3, 246ac <z_arm_fault+0x130>
			reason = usage_fault(esf);
   246a6:	f7ff fed5 	bl	24454 <usage_fault.isra.4>
   246aa:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   246ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   246b0:	b99b      	cbnz	r3, 246da <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   246b2:	2268      	movs	r2, #104	; 0x68
   246b4:	4631      	mov	r1, r6
   246b6:	a802      	add	r0, sp, #8
   246b8:	f01a fb07 	bl	3ecca <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   246bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   246be:	2d00      	cmp	r5, #0
   246c0:	d03a      	beq.n	24738 <z_arm_fault+0x1bc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   246c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
   246c6:	b922      	cbnz	r2, 246d2 <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   246c8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   246cc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   246d0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   246d2:	a902      	add	r1, sp, #8
   246d4:	4620      	mov	r0, r4
   246d6:	f7ff fcb1 	bl	2403c <z_arm_fatal_error>
}
   246da:	b01d      	add	sp, #116	; 0x74
   246dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   246e0:	f10d 0107 	add.w	r1, sp, #7
   246e4:	2000      	movs	r0, #0
   246e6:	e7ce      	b.n	24686 <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   246e8:	f10d 0107 	add.w	r1, sp, #7
   246ec:	2000      	movs	r0, #0
   246ee:	e7d3      	b.n	24698 <z_arm_fault+0x11c>
	PR_FAULT_INFO(
   246f0:	2301      	movs	r3, #1
   246f2:	f04f 0000 	mov.w	r0, #0
   246f6:	4a14      	ldr	r2, [pc, #80]	; (24748 <z_arm_fault+0x1cc>)
   246f8:	f363 0007 	bfi	r0, r3, #0, #8
   246fc:	4b13      	ldr	r3, [pc, #76]	; (2474c <z_arm_fault+0x1d0>)
   246fe:	491f      	ldr	r1, [pc, #124]	; (2477c <z_arm_fault+0x200>)
   24700:	1a9b      	subs	r3, r3, r2
   24702:	08db      	lsrs	r3, r3, #3
   24704:	f363 108f 	bfi	r0, r3, #6, #10
   24708:	e7a6      	b.n	24658 <z_arm_fault+0xdc>
	PR_FAULT_INFO("***** %s %d) *****",
   2470a:	2301      	movs	r3, #1
   2470c:	f04f 0000 	mov.w	r0, #0
   24710:	4a0d      	ldr	r2, [pc, #52]	; (24748 <z_arm_fault+0x1cc>)
   24712:	f363 0007 	bfi	r0, r3, #0, #8
   24716:	4b0d      	ldr	r3, [pc, #52]	; (2474c <z_arm_fault+0x1d0>)
   24718:	4919      	ldr	r1, [pc, #100]	; (24780 <z_arm_fault+0x204>)
   2471a:	1a9b      	subs	r3, r3, r2
   2471c:	08db      	lsrs	r3, r3, #3
   2471e:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   24722:	f363 108f 	bfi	r0, r3, #6, #10
   24726:	4a17      	ldr	r2, [pc, #92]	; (24784 <z_arm_fault+0x208>)
   24728:	f1a7 0310 	sub.w	r3, r7, #16
   2472c:	bf08      	it	eq
   2472e:	460a      	moveq	r2, r1
   24730:	4915      	ldr	r1, [pc, #84]	; (24788 <z_arm_fault+0x20c>)
   24732:	f017 ffa6 	bl	3c682 <log_string_sync>
   24736:	e791      	b.n	2465c <z_arm_fault+0xe0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   24738:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2473c:	f023 0301 	bic.w	r3, r3, #1
   24740:	e7c6      	b.n	246d0 <z_arm_fault+0x154>
   24742:	bf00      	nop
   24744:	e000ed00 	.word	0xe000ed00
   24748:	000402cc 	.word	0x000402cc
   2474c:	000403c4 	.word	0x000403c4
   24750:	00042d6d 	.word	0x00042d6d
   24754:	00042bdb 	.word	0x00042bdb
   24758:	00042d90 	.word	0x00042d90
   2475c:	00041757 	.word	0x00041757
   24760:	00042da3 	.word	0x00042da3
   24764:	00042de1 	.word	0x00042de1
   24768:	00042df8 	.word	0x00042df8
   2476c:	00042e19 	.word	0x00042e19
   24770:	e000ed28 	.word	0xe000ed28
   24774:	e000ed29 	.word	0xe000ed29
   24778:	e000ed2a 	.word	0xe000ed2a
   2477c:	00042e38 	.word	0x00042e38
   24780:	00042d3f 	.word	0x00042d3f
   24784:	00042d54 	.word	0x00042d54
   24788:	00042e6e 	.word	0x00042e6e

0002478c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2478c:	4b04      	ldr	r3, [pc, #16]	; (247a0 <z_arm_fault_init+0x14>)
   2478e:	695a      	ldr	r2, [r3, #20]
   24790:	f042 0210 	orr.w	r2, r2, #16
   24794:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   24796:	695a      	ldr	r2, [r3, #20]
   24798:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   2479c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   2479e:	4770      	bx	lr
   247a0:	e000ed00 	.word	0xe000ed00

000247a4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   247a4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   247a8:	4905      	ldr	r1, [pc, #20]	; (247c0 <sys_arch_reboot+0x1c>)
   247aa:	4b06      	ldr	r3, [pc, #24]	; (247c4 <sys_arch_reboot+0x20>)
   247ac:	68ca      	ldr	r2, [r1, #12]
   247ae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   247b2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   247b4:	60cb      	str	r3, [r1, #12]
   247b6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   247ba:	bf00      	nop
   247bc:	e7fd      	b.n	247ba <sys_arch_reboot+0x16>
   247be:	bf00      	nop
   247c0:	e000ed00 	.word	0xe000ed00
   247c4:	05fa0004 	.word	0x05fa0004

000247c8 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   247c8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   247ca:	2120      	movs	r1, #32
   247cc:	4803      	ldr	r0, [pc, #12]	; (247dc <z_arm_int_lib_init+0x14>)
   247ce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   247d0:	3301      	adds	r3, #1
   247d2:	2b41      	cmp	r3, #65	; 0x41
   247d4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   247d8:	d1f9      	bne.n	247ce <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   247da:	4770      	bx	lr
   247dc:	e000e100 	.word	0xe000e100

000247e0 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   247e0:	b538      	push	{r3, r4, r5, lr}
   247e2:	4604      	mov	r4, r0
	__asm__ volatile(
   247e4:	f04f 0320 	mov.w	r3, #32
   247e8:	f3ef 8511 	mrs	r5, BASEPRI
   247ec:	f383 8811 	msr	BASEPRI, r3
   247f0:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   247f4:	7b03      	ldrb	r3, [r0, #12]
   247f6:	07db      	lsls	r3, r3, #31
   247f8:	d50c      	bpl.n	24814 <z_impl_k_thread_abort+0x34>
   247fa:	4912      	ldr	r1, [pc, #72]	; (24844 <z_impl_k_thread_abort+0x64>)
   247fc:	2324      	movs	r3, #36	; 0x24
   247fe:	4a12      	ldr	r2, [pc, #72]	; (24848 <z_impl_k_thread_abort+0x68>)
   24800:	4812      	ldr	r0, [pc, #72]	; (2484c <z_impl_k_thread_abort+0x6c>)
   24802:	f017 fee7 	bl	3c5d4 <printk>
   24806:	4812      	ldr	r0, [pc, #72]	; (24850 <z_impl_k_thread_abort+0x70>)
   24808:	f017 fee4 	bl	3c5d4 <printk>
   2480c:	2124      	movs	r1, #36	; 0x24
   2480e:	480e      	ldr	r0, [pc, #56]	; (24848 <z_impl_k_thread_abort+0x68>)
   24810:	f017 ff26 	bl	3c660 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   24814:	4620      	mov	r0, r4
   24816:	f013 fbf3 	bl	38000 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   2481a:	4b0e      	ldr	r3, [pc, #56]	; (24854 <z_impl_k_thread_abort+0x74>)
   2481c:	689b      	ldr	r3, [r3, #8]
   2481e:	42a3      	cmp	r3, r4
   24820:	d10b      	bne.n	2483a <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   24822:	4b0d      	ldr	r3, [pc, #52]	; (24858 <z_impl_k_thread_abort+0x78>)
   24824:	685a      	ldr	r2, [r3, #4]
   24826:	f3c2 0208 	ubfx	r2, r2, #0, #9
   2482a:	b912      	cbnz	r2, 24832 <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   2482c:	4628      	mov	r0, r5
   2482e:	f7ff fb1d 	bl	23e6c <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   24832:	685a      	ldr	r2, [r3, #4]
   24834:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   24838:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   2483a:	4628      	mov	r0, r5
}
   2483c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   24840:	f01a b8ef 	b.w	3ea22 <z_reschedule_irqlock>
   24844:	00042ebb 	.word	0x00042ebb
   24848:	00042e81 	.word	0x00042e81
   2484c:	00041757 	.word	0x00041757
   24850:	00042ee9 	.word	0x00042ee9
   24854:	20029368 	.word	0x20029368
   24858:	e000ed00 	.word	0xe000ed00

0002485c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   2485c:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   2485e:	4b0e      	ldr	r3, [pc, #56]	; (24898 <z_arm_configure_static_mpu_regions+0x3c>)
{
   24860:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   24862:	9302      	str	r3, [sp, #8]
   24864:	4b0d      	ldr	r3, [pc, #52]	; (2489c <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   24866:	4c0e      	ldr	r4, [pc, #56]	; (248a0 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   24868:	9303      	str	r3, [sp, #12]
   2486a:	4b0e      	ldr	r3, [pc, #56]	; (248a4 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2486c:	4a0e      	ldr	r2, [pc, #56]	; (248a8 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   2486e:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   24870:	ab02      	add	r3, sp, #8
   24872:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   24874:	a801      	add	r0, sp, #4
   24876:	4623      	mov	r3, r4
   24878:	2101      	movs	r1, #1
   2487a:	f000 f97d 	bl	24b78 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   2487e:	2300      	movs	r3, #0
   24880:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   24882:	4b0a      	ldr	r3, [pc, #40]	; (248ac <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   24884:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   24886:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   24888:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   2488a:	9305      	str	r3, [sp, #20]
   2488c:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2488e:	f000 f997 	bl	24bc0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   24892:	b008      	add	sp, #32
   24894:	bd10      	pop	{r4, pc}
   24896:	bf00      	nop
   24898:	20020000 	.word	0x20020000
   2489c:	00000000 	.word	0x00000000
   248a0:	20040000 	.word	0x20040000
   248a4:	00010006 	.word	0x00010006
   248a8:	20020000 	.word	0x20020000
   248ac:	20020000 	.word	0x20020000

000248b0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   248b0:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   248b2:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   248b4:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   248b6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   248ba:	f004 031f 	and.w	r3, r4, #31
   248be:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   248c0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   248c2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   248c4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   248c8:	4904      	ldr	r1, [pc, #16]	; (248dc <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   248ca:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   248ce:	f043 0301 	orr.w	r3, r3, #1
   248d2:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   248d4:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   248d6:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   248d8:	bd10      	pop	{r4, pc}
   248da:	bf00      	nop
   248dc:	e000ed90 	.word	0xe000ed90

000248e0 <region_allocate_and_init>:

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   248e0:	280f      	cmp	r0, #15
{
   248e2:	b510      	push	{r4, lr}
   248e4:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
   248e6:	d912      	bls.n	2490e <region_allocate_and_init+0x2e>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   248e8:	2301      	movs	r3, #1
   248ea:	f04f 0000 	mov.w	r0, #0
   248ee:	4a09      	ldr	r2, [pc, #36]	; (24914 <region_allocate_and_init+0x34>)
   248f0:	f363 0007 	bfi	r0, r3, #0, #8
   248f4:	4b08      	ldr	r3, [pc, #32]	; (24918 <region_allocate_and_init+0x38>)
   248f6:	4909      	ldr	r1, [pc, #36]	; (2491c <region_allocate_and_init+0x3c>)
   248f8:	1a9b      	subs	r3, r3, r2
   248fa:	08db      	lsrs	r3, r3, #3
   248fc:	4622      	mov	r2, r4
   248fe:	f363 108f 	bfi	r0, r3, #6, #10
   24902:	f017 febe 	bl	3c682 <log_string_sync>
		return -EINVAL;
   24906:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   2490a:	4620      	mov	r0, r4
   2490c:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   2490e:	f7ff ffcf 	bl	248b0 <region_init>
	return index;
   24912:	e7fa      	b.n	2490a <region_allocate_and_init+0x2a>
   24914:	000402cc 	.word	0x000402cc
   24918:	0004038c 	.word	0x0004038c
   2491c:	000430b5 	.word	0x000430b5

00024920 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   24920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24924:	4607      	mov	r7, r0
   24926:	4688      	mov	r8, r1
   24928:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   2492a:	2600      	movs	r6, #0
	MPU->RNR = index;
   2492c:	4d58      	ldr	r5, [pc, #352]	; (24a90 <mpu_configure_regions_and_partition.constprop.2+0x170>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   2492e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   24930:	4546      	cmp	r6, r8
   24932:	da3d      	bge.n	249b0 <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
   24934:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   24938:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2493c:	f1b9 0f00 	cmp.w	r9, #0
   24940:	d059      	beq.n	249f6 <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
   24942:	f1b9 0f1f 	cmp.w	r9, #31
   24946:	d922      	bls.n	2498e <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
   24948:	f019 0f1f 	tst.w	r9, #31
   2494c:	d11f      	bne.n	2498e <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
   2494e:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   24952:	f01a 0f1f 	tst.w	sl, #31
   24956:	d11a      	bne.n	2498e <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   24958:	4650      	mov	r0, sl
   2495a:	f018 f851 	bl	3ca00 <arm_cmse_mpu_region_get>
   2495e:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   24960:	eb09 000a 	add.w	r0, r9, sl
   24964:	3801      	subs	r0, #1
   24966:	f018 f84b 	bl	3ca00 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   2496a:	4583      	cmp	fp, r0
   2496c:	d024      	beq.n	249b8 <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
   2496e:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   24972:	2301      	movs	r3, #1
   24974:	f04f 0000 	mov.w	r0, #0
   24978:	4a46      	ldr	r2, [pc, #280]	; (24a94 <mpu_configure_regions_and_partition.constprop.2+0x174>)
   2497a:	f363 0007 	bfi	r0, r3, #0, #8
   2497e:	4b46      	ldr	r3, [pc, #280]	; (24a98 <mpu_configure_regions_and_partition.constprop.2+0x178>)
   24980:	4946      	ldr	r1, [pc, #280]	; (24a9c <mpu_configure_regions_and_partition.constprop.2+0x17c>)
   24982:	1a9b      	subs	r3, r3, r2
   24984:	08db      	lsrs	r3, r3, #3
   24986:	f363 108f 	bfi	r0, r3, #6, #10
   2498a:	465a      	mov	r2, fp
   2498c:	e00c      	b.n	249a8 <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
   2498e:	2301      	movs	r3, #1
   24990:	f04f 0000 	mov.w	r0, #0
   24994:	4a3f      	ldr	r2, [pc, #252]	; (24a94 <mpu_configure_regions_and_partition.constprop.2+0x174>)
   24996:	f363 0007 	bfi	r0, r3, #0, #8
   2499a:	4b3f      	ldr	r3, [pc, #252]	; (24a98 <mpu_configure_regions_and_partition.constprop.2+0x178>)
   2499c:	4940      	ldr	r1, [pc, #256]	; (24aa0 <mpu_configure_regions_and_partition.constprop.2+0x180>)
   2499e:	1a9b      	subs	r3, r3, r2
   249a0:	4632      	mov	r2, r6
   249a2:	08db      	lsrs	r3, r3, #3
   249a4:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   249a8:	f017 fe6b 	bl	3c682 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   249ac:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   249b0:	4620      	mov	r0, r4
   249b2:	b005      	add	sp, #20
   249b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   249b8:	f11b 0f16 	cmn.w	fp, #22
   249bc:	d0d9      	beq.n	24972 <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   249be:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   249c0:	455b      	cmp	r3, fp
   249c2:	dbd6      	blt.n	24972 <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
   249c4:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   249c8:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   249ca:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   249ce:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   249d0:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   249d4:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   249d8:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   249dc:	e9d1 3200 	ldrd	r3, r2, [r1]
   249e0:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   249e2:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   249e4:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   249e8:	d118      	bne.n	24a1c <mpu_configure_regions_and_partition.constprop.2+0xfc>
   249ea:	45ca      	cmp	sl, r9
   249ec:	d105      	bne.n	249fa <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
   249ee:	fa5f f08b 	uxtb.w	r0, fp
   249f2:	f017 ffea 	bl	3c9ca <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   249f6:	3601      	adds	r6, #1
   249f8:	e79a      	b.n	24930 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
   249fa:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   249fe:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   24a00:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   24a04:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   24a08:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   24a0a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   24a0c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   24a0e:	f017 ffdc 	bl	3c9ca <mpu_configure_region>
			if (reg_index == -EINVAL) {
   24a12:	f110 0f16 	cmn.w	r0, #22
   24a16:	d0c9      	beq.n	249ac <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
   24a18:	1c44      	adds	r4, r0, #1
   24a1a:	e7ec      	b.n	249f6 <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
   24a1c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   24a20:	692a      	ldr	r2, [r5, #16]
   24a22:	3b01      	subs	r3, #1
   24a24:	f023 031f 	bic.w	r3, r3, #31
   24a28:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   24a2c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   24a2e:	45ca      	cmp	sl, r9
   24a30:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   24a32:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   24a34:	d0eb      	beq.n	24a0e <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
   24a36:	f017 ffc8 	bl	3c9ca <mpu_configure_region>
			if (reg_index == -EINVAL) {
   24a3a:	f110 0f16 	cmn.w	r0, #22
   24a3e:	d0b5      	beq.n	249ac <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
   24a40:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   24a44:	68ea      	ldr	r2, [r5, #12]
   24a46:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   24a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   24a4e:	f362 0304 	bfi	r3, r2, #0, #5
   24a52:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   24a56:	692b      	ldr	r3, [r5, #16]
   24a58:	f89d 2008 	ldrb.w	r2, [sp, #8]
   24a5c:	085b      	lsrs	r3, r3, #1
   24a5e:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   24a62:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   24a66:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   24a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   24a6e:	4413      	add	r3, r2
   24a70:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   24a72:	f023 031f 	bic.w	r3, r3, #31
   24a76:	4453      	add	r3, sl
   24a78:	eba3 0309 	sub.w	r3, r3, r9
			reg_index++;
   24a7c:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   24a7e:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   24a82:	4669      	mov	r1, sp
   24a84:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   24a86:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   24a88:	f7ff ff2a 	bl	248e0 <region_allocate_and_init>
   24a8c:	e7c1      	b.n	24a12 <mpu_configure_regions_and_partition.constprop.2+0xf2>
   24a8e:	bf00      	nop
   24a90:	e000ed90 	.word	0xe000ed90
   24a94:	000402cc 	.word	0x000402cc
   24a98:	0004038c 	.word	0x0004038c
   24a9c:	00043092 	.word	0x00043092
   24aa0:	0004306f 	.word	0x0004306f

00024aa4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   24aa4:	2205      	movs	r2, #5
   24aa6:	4b03      	ldr	r3, [pc, #12]	; (24ab4 <arm_core_mpu_enable+0x10>)
   24aa8:	605a      	str	r2, [r3, #4]
   24aaa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   24aae:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   24ab2:	4770      	bx	lr
   24ab4:	e000ed90 	.word	0xe000ed90

00024ab8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   24ab8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   24abc:	2200      	movs	r2, #0
   24abe:	4b01      	ldr	r3, [pc, #4]	; (24ac4 <arm_core_mpu_disable+0xc>)
   24ac0:	605a      	str	r2, [r3, #4]
}
   24ac2:	4770      	bx	lr
   24ac4:	e000ed90 	.word	0xe000ed90

00024ac8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   24ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   24aca:	4f21      	ldr	r7, [pc, #132]	; (24b50 <arm_mpu_init+0x88>)
   24acc:	683e      	ldr	r6, [r7, #0]
   24ace:	2e10      	cmp	r6, #16
   24ad0:	d913      	bls.n	24afa <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   24ad2:	f240 132d 	movw	r3, #301	; 0x12d
   24ad6:	4a1f      	ldr	r2, [pc, #124]	; (24b54 <arm_mpu_init+0x8c>)
   24ad8:	491f      	ldr	r1, [pc, #124]	; (24b58 <arm_mpu_init+0x90>)
   24ada:	4820      	ldr	r0, [pc, #128]	; (24b5c <arm_mpu_init+0x94>)
   24adc:	f017 fd7a 	bl	3c5d4 <printk>
   24ae0:	2210      	movs	r2, #16
   24ae2:	4631      	mov	r1, r6
   24ae4:	481e      	ldr	r0, [pc, #120]	; (24b60 <arm_mpu_init+0x98>)
   24ae6:	f017 fd75 	bl	3c5d4 <printk>
   24aea:	481a      	ldr	r0, [pc, #104]	; (24b54 <arm_mpu_init+0x8c>)
   24aec:	f240 112d 	movw	r1, #301	; 0x12d
   24af0:	f017 fdb6 	bl	3c660 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   24af4:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   24af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   24afa:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   24afc:	f7ff ffdc 	bl	24ab8 <arm_core_mpu_disable>
	MPU->MAIR0 =
   24b00:	4d18      	ldr	r5, [pc, #96]	; (24b64 <arm_mpu_init+0x9c>)
   24b02:	4a19      	ldr	r2, [pc, #100]	; (24b68 <arm_mpu_init+0xa0>)
   24b04:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   24b06:	42a6      	cmp	r6, r4
   24b08:	d119      	bne.n	24b3e <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   24b0a:	4b18      	ldr	r3, [pc, #96]	; (24b6c <arm_mpu_init+0xa4>)
   24b0c:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   24b0e:	f7ff ffc9 	bl	24aa4 <arm_core_mpu_enable>
	__ASSERT(
   24b12:	682b      	ldr	r3, [r5, #0]
   24b14:	f3c3 2307 	ubfx	r3, r3, #8, #8
   24b18:	2b10      	cmp	r3, #16
   24b1a:	d00e      	beq.n	24b3a <arm_mpu_init+0x72>
   24b1c:	4914      	ldr	r1, [pc, #80]	; (24b70 <arm_mpu_init+0xa8>)
   24b1e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   24b22:	4a0c      	ldr	r2, [pc, #48]	; (24b54 <arm_mpu_init+0x8c>)
   24b24:	480d      	ldr	r0, [pc, #52]	; (24b5c <arm_mpu_init+0x94>)
   24b26:	f017 fd55 	bl	3c5d4 <printk>
   24b2a:	4812      	ldr	r0, [pc, #72]	; (24b74 <arm_mpu_init+0xac>)
   24b2c:	f017 fd52 	bl	3c5d4 <printk>
   24b30:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   24b34:	4807      	ldr	r0, [pc, #28]	; (24b54 <arm_mpu_init+0x8c>)
   24b36:	f017 fd93 	bl	3c660 <assert_post_action>
	return 0;
   24b3a:	2000      	movs	r0, #0
   24b3c:	e7dc      	b.n	24af8 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   24b3e:	6879      	ldr	r1, [r7, #4]
   24b40:	4620      	mov	r0, r4
   24b42:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   24b46:	f7ff feb3 	bl	248b0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   24b4a:	3401      	adds	r4, #1
   24b4c:	e7db      	b.n	24b06 <arm_mpu_init+0x3e>
   24b4e:	bf00      	nop
   24b50:	00040764 	.word	0x00040764
   24b54:	00042f90 	.word	0x00042f90
   24b58:	00046834 	.word	0x00046834
   24b5c:	00041757 	.word	0x00041757
   24b60:	00042fc9 	.word	0x00042fc9
   24b64:	e000ed90 	.word	0xe000ed90
   24b68:	0044ffaa 	.word	0x0044ffaa
   24b6c:	20029f31 	.word	0x20029f31
   24b70:	00042ffd 	.word	0x00042ffd
   24b74:	0004304e 	.word	0x0004304e

00024b78 <arm_core_mpu_configure_static_mpu_regions>:
{
   24b78:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   24b7a:	4c0c      	ldr	r4, [pc, #48]	; (24bac <arm_core_mpu_configure_static_mpu_regions+0x34>)
   24b7c:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   24b7e:	7822      	ldrb	r2, [r4, #0]
   24b80:	f7ff fece 	bl	24920 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   24b84:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   24b86:	3016      	adds	r0, #22
   24b88:	d10f      	bne.n	24baa <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   24b8a:	23f3      	movs	r3, #243	; 0xf3
   24b8c:	4a08      	ldr	r2, [pc, #32]	; (24bb0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   24b8e:	4909      	ldr	r1, [pc, #36]	; (24bb4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   24b90:	4809      	ldr	r0, [pc, #36]	; (24bb8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   24b92:	f017 fd1f 	bl	3c5d4 <printk>
   24b96:	4629      	mov	r1, r5
   24b98:	4808      	ldr	r0, [pc, #32]	; (24bbc <arm_core_mpu_configure_static_mpu_regions+0x44>)
   24b9a:	f017 fd1b 	bl	3c5d4 <printk>
}
   24b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   24ba2:	21f3      	movs	r1, #243	; 0xf3
   24ba4:	4802      	ldr	r0, [pc, #8]	; (24bb0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   24ba6:	f017 bd5b 	b.w	3c660 <assert_post_action>
}
   24baa:	bd38      	pop	{r3, r4, r5, pc}
   24bac:	20029f31 	.word	0x20029f31
   24bb0:	00042f90 	.word	0x00042f90
   24bb4:	00046834 	.word	0x00046834
   24bb8:	00041757 	.word	0x00041757
   24bbc:	00042f35 	.word	0x00042f35

00024bc0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   24bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bc4:	4c2e      	ldr	r4, [pc, #184]	; (24c80 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   24bc6:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   24bc8:	4680      	mov	r8, r0
   24bca:	2700      	movs	r7, #0
   24bcc:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
   24bce:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   24bd2:	4d2c      	ldr	r5, [pc, #176]	; (24c84 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   24bd4:	454f      	cmp	r7, r9
   24bd6:	db02      	blt.n	24bde <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   24bd8:	b003      	add	sp, #12
   24bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   24bde:	f8d8 3004 	ldr.w	r3, [r8, #4]
   24be2:	9301      	str	r3, [sp, #4]
   24be4:	2b00      	cmp	r3, #0
   24be6:	d046      	beq.n	24c76 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   24be8:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   24bec:	4608      	mov	r0, r1
   24bee:	9100      	str	r1, [sp, #0]
   24bf0:	f017 ff06 	bl	3ca00 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   24bf4:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   24bf8:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   24bfa:	1858      	adds	r0, r3, r1
   24bfc:	3801      	subs	r0, #1
   24bfe:	f017 feff 	bl	3ca00 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   24c02:	4286      	cmp	r6, r0
   24c04:	4a20      	ldr	r2, [pc, #128]	; (24c88 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   24c06:	d018      	beq.n	24c3a <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   24c08:	2314      	movs	r3, #20
   24c0a:	435f      	muls	r7, r3
   24c0c:	f06f 0315 	mvn.w	r3, #21
   24c10:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   24c14:	f240 1303 	movw	r3, #259	; 0x103
   24c18:	4a1c      	ldr	r2, [pc, #112]	; (24c8c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   24c1a:	491d      	ldr	r1, [pc, #116]	; (24c90 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   24c1c:	481d      	ldr	r0, [pc, #116]	; (24c94 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   24c1e:	f017 fcd9 	bl	3c5d4 <printk>
   24c22:	4649      	mov	r1, r9
   24c24:	481c      	ldr	r0, [pc, #112]	; (24c98 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   24c26:	f017 fcd5 	bl	3c5d4 <printk>
   24c2a:	f240 1103 	movw	r1, #259	; 0x103
   24c2e:	4817      	ldr	r0, [pc, #92]	; (24c8c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
}
   24c30:	b003      	add	sp, #12
   24c32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   24c36:	f017 bd13 	b.w	3c660 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   24c3a:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   24c3e:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   24c40:	d0e8      	beq.n	24c14 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   24c42:	7813      	ldrb	r3, [r2, #0]
   24c44:	42b3      	cmp	r3, r6
   24c46:	dde5      	ble.n	24c14 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   24c48:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
   24c4c:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   24c4e:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   24c50:	68e8      	ldr	r0, [r5, #12]
   24c52:	7b19      	ldrb	r1, [r3, #12]
   24c54:	f360 0104 	bfi	r1, r0, #0, #5
   24c58:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   24c5a:	6929      	ldr	r1, [r5, #16]
   24c5c:	7b18      	ldrb	r0, [r3, #12]
   24c5e:	0849      	lsrs	r1, r1, #1
   24c60:	f361 1047 	bfi	r0, r1, #5, #3
   24c64:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   24c66:	68eb      	ldr	r3, [r5, #12]
   24c68:	f023 031f 	bic.w	r3, r3, #31
   24c6c:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   24c6e:	692b      	ldr	r3, [r5, #16]
   24c70:	f023 031f 	bic.w	r3, r3, #31
   24c74:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   24c76:	3701      	adds	r7, #1
   24c78:	3414      	adds	r4, #20
   24c7a:	f108 080c 	add.w	r8, r8, #12
   24c7e:	e7a9      	b.n	24bd4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   24c80:	20023a74 	.word	0x20023a74
   24c84:	e000ed90 	.word	0xe000ed90
   24c88:	20029f31 	.word	0x20029f31
   24c8c:	00042f90 	.word	0x00042f90
   24c90:	00046834 	.word	0x00046834
   24c94:	00041757 	.word	0x00041757
   24c98:	00042f61 	.word	0x00042f61

00024c9c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   24c9c:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   24c9e:	4b16      	ldr	r3, [pc, #88]	; (24cf8 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   24ca0:	460c      	mov	r4, r1
   24ca2:	781d      	ldrb	r5, [r3, #0]
   24ca4:	4606      	mov	r6, r0
   24ca6:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
   24ca8:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   24caa:	4a14      	ldr	r2, [pc, #80]	; (24cfc <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   24cac:	2b0f      	cmp	r3, #15
   24cae:	dd1d      	ble.n	24cec <arm_core_mpu_configure_dynamic_mpu_regions+0x50>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   24cb0:	4913      	ldr	r1, [pc, #76]	; (24d00 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   24cb2:	f851 0b04 	ldr.w	r0, [r1], #4
   24cb6:	f7ff fdfb 	bl	248b0 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
   24cba:	462a      	mov	r2, r5
   24cbc:	4621      	mov	r1, r4
   24cbe:	4630      	mov	r0, r6
   24cc0:	f7ff fe2e 	bl	24920 <mpu_configure_regions_and_partition.constprop.2>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   24cc4:	3016      	adds	r0, #22
   24cc6:	d115      	bne.n	24cf4 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   24cc8:	f44f 7389 	mov.w	r3, #274	; 0x112
   24ccc:	4a0d      	ldr	r2, [pc, #52]	; (24d04 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   24cce:	490e      	ldr	r1, [pc, #56]	; (24d08 <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
   24cd0:	480e      	ldr	r0, [pc, #56]	; (24d0c <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
   24cd2:	f017 fc7f 	bl	3c5d4 <printk>
   24cd6:	4621      	mov	r1, r4
   24cd8:	480d      	ldr	r0, [pc, #52]	; (24d10 <arm_core_mpu_configure_dynamic_mpu_regions+0x74>)
   24cda:	f017 fc7b 	bl	3c5d4 <printk>
}
   24cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   24ce2:	f44f 7189 	mov.w	r1, #274	; 0x112
   24ce6:	4807      	ldr	r0, [pc, #28]	; (24d04 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   24ce8:	f017 bcba 	b.w	3c660 <assert_post_action>
   24cec:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   24cee:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   24cf0:	3301      	adds	r3, #1
   24cf2:	e7db      	b.n	24cac <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
   24cf4:	bd70      	pop	{r4, r5, r6, pc}
   24cf6:	bf00      	nop
   24cf8:	20029f31 	.word	0x20029f31
   24cfc:	e000ed90 	.word	0xe000ed90
   24d00:	20023a74 	.word	0x20023a74
   24d04:	00042f90 	.word	0x00042f90
   24d08:	00046834 	.word	0x00046834
   24d0c:	00041757 	.word	0x00041757
   24d10:	00042f08 	.word	0x00042f08

00024d14 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   24d14:	4b01      	ldr	r3, [pc, #4]	; (24d1c <__stdout_hook_install+0x8>)
   24d16:	6018      	str	r0, [r3, #0]
}
   24d18:	4770      	bx	lr
   24d1a:	bf00      	nop
   24d1c:	20031518 	.word	0x20031518

00024d20 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   24d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24d22:	4606      	mov	r6, r0
   24d24:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   24d26:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   24d28:	4f06      	ldr	r7, [pc, #24]	; (24d44 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   24d2a:	42ac      	cmp	r4, r5
   24d2c:	da08      	bge.n	24d40 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   24d2e:	683b      	ldr	r3, [r7, #0]
   24d30:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   24d32:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   24d34:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   24d36:	f104 0401 	add.w	r4, r4, #1
   24d3a:	d001      	beq.n	24d40 <z_impl_zephyr_read_stdin+0x20>
   24d3c:	280d      	cmp	r0, #13
   24d3e:	d1f4      	bne.n	24d2a <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   24d40:	4620      	mov	r0, r4
   24d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24d44:	20031514 	.word	0x20031514

00024d48 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   24d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24d4a:	460e      	mov	r6, r1
   24d4c:	4f09      	ldr	r7, [pc, #36]	; (24d74 <z_impl_zephyr_write_stdout+0x2c>)
   24d4e:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   24d50:	f1c0 0501 	rsb	r5, r0, #1
   24d54:	192b      	adds	r3, r5, r4
   24d56:	429e      	cmp	r6, r3
   24d58:	dc01      	bgt.n	24d5e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   24d5a:	4630      	mov	r0, r6
   24d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   24d5e:	7863      	ldrb	r3, [r4, #1]
   24d60:	2b0a      	cmp	r3, #10
   24d62:	d102      	bne.n	24d6a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   24d64:	683b      	ldr	r3, [r7, #0]
   24d66:	200d      	movs	r0, #13
   24d68:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   24d6a:	683b      	ldr	r3, [r7, #0]
   24d6c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   24d70:	4798      	blx	r3
   24d72:	e7ef      	b.n	24d54 <z_impl_zephyr_write_stdout+0xc>
   24d74:	20031518 	.word	0x20031518

00024d78 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   24d78:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   24d7a:	2105      	movs	r1, #5
   24d7c:	4801      	ldr	r0, [pc, #4]	; (24d84 <_exit+0xc>)
   24d7e:	f7ff ffe3 	bl	24d48 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
   24d82:	e7fe      	b.n	24d82 <_exit+0xa>
   24d84:	000430db 	.word	0x000430db

00024d88 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   24d88:	b538      	push	{r3, r4, r5, lr}
   24d8a:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   24d8c:	f04f 31ff 	mov.w	r1, #4294967295
   24d90:	480b      	ldr	r0, [pc, #44]	; (24dc0 <_sbrk+0x38>)
   24d92:	f017 fc31 	bl	3c5f8 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   24d96:	4a0b      	ldr	r2, [pc, #44]	; (24dc4 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   24d98:	490b      	ldr	r1, [pc, #44]	; (24dc8 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   24d9a:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   24d9c:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   24da0:	4425      	add	r5, r4
   24da2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   24da6:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   24da8:	bf2c      	ite	cs
   24daa:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   24dae:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
   24db0:	4803      	ldr	r0, [pc, #12]	; (24dc0 <_sbrk+0x38>)
		heap_sz += count;
   24db2:	bf38      	it	cc
   24db4:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   24db6:	f017 fc1a 	bl	3c5ee <sys_sem_give>

	return ret;
}
   24dba:	4620      	mov	r0, r4
   24dbc:	bd38      	pop	{r3, r4, r5, pc}
   24dbe:	bf00      	nop
   24dc0:	200318e0 	.word	0x200318e0
   24dc4:	20023a88 	.word	0x20023a88
   24dc8:	2003199c 	.word	0x2003199c

00024dcc <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   24dcc:	b538      	push	{r3, r4, r5, lr}
   24dce:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   24dd0:	4604      	mov	r4, r0
   24dd2:	b970      	cbnz	r0, 24df2 <net_if_flag_is_set+0x26>
   24dd4:	490b      	ldr	r1, [pc, #44]	; (24e04 <net_if_flag_is_set+0x38>)
   24dd6:	f240 2311 	movw	r3, #529	; 0x211
   24dda:	4a0b      	ldr	r2, [pc, #44]	; (24e08 <net_if_flag_is_set+0x3c>)
   24ddc:	480b      	ldr	r0, [pc, #44]	; (24e0c <net_if_flag_is_set+0x40>)
   24dde:	f017 fbf9 	bl	3c5d4 <printk>
   24de2:	480b      	ldr	r0, [pc, #44]	; (24e10 <net_if_flag_is_set+0x44>)
   24de4:	f017 fbf6 	bl	3c5d4 <printk>
   24de8:	f240 2111 	movw	r1, #529	; 0x211
   24dec:	4806      	ldr	r0, [pc, #24]	; (24e08 <net_if_flag_is_set+0x3c>)
   24dee:	f017 fc37 	bl	3c660 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24df2:	6823      	ldr	r3, [r4, #0]
   24df4:	330c      	adds	r3, #12
   24df6:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   24dfa:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   24dfc:	f000 0001 	and.w	r0, r0, #1
   24e00:	bd38      	pop	{r3, r4, r5, pc}
   24e02:	bf00      	nop
   24e04:	00043119 	.word	0x00043119
   24e08:	000430f8 	.word	0x000430f8
   24e0c:	00041757 	.word	0x00041757
   24e10:	0004311f 	.word	0x0004311f

00024e14 <net_if_flag_set.constprop.24>:
static inline void net_if_flag_set(struct net_if *iface,
   24e14:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   24e16:	4604      	mov	r4, r0
   24e18:	b970      	cbnz	r0, 24e38 <net_if_flag_set.constprop.24+0x24>
   24e1a:	490d      	ldr	r1, [pc, #52]	; (24e50 <net_if_flag_set.constprop.24+0x3c>)
   24e1c:	f240 13e3 	movw	r3, #483	; 0x1e3
   24e20:	4a0c      	ldr	r2, [pc, #48]	; (24e54 <net_if_flag_set.constprop.24+0x40>)
   24e22:	480d      	ldr	r0, [pc, #52]	; (24e58 <net_if_flag_set.constprop.24+0x44>)
   24e24:	f017 fbd6 	bl	3c5d4 <printk>
   24e28:	480c      	ldr	r0, [pc, #48]	; (24e5c <net_if_flag_set.constprop.24+0x48>)
   24e2a:	f017 fbd3 	bl	3c5d4 <printk>
   24e2e:	f240 11e3 	movw	r1, #483	; 0x1e3
   24e32:	4808      	ldr	r0, [pc, #32]	; (24e54 <net_if_flag_set.constprop.24+0x40>)
   24e34:	f017 fc14 	bl	3c660 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24e38:	6823      	ldr	r3, [r4, #0]
   24e3a:	330c      	adds	r3, #12
   24e3c:	e8d3 2fef 	ldaex	r2, [r3]
   24e40:	f042 0201 	orr.w	r2, r2, #1
   24e44:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24e48:	2900      	cmp	r1, #0
   24e4a:	d1f7      	bne.n	24e3c <net_if_flag_set.constprop.24+0x28>
}
   24e4c:	bd10      	pop	{r4, pc}
   24e4e:	bf00      	nop
   24e50:	00043119 	.word	0x00043119
   24e54:	000430f8 	.word	0x000430f8
   24e58:	00041757 	.word	0x00041757
   24e5c:	0004311f 	.word	0x0004311f

00024e60 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   24e60:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   24e62:	2100      	movs	r1, #0
{
   24e64:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   24e66:	f7ff ffb1 	bl	24dcc <net_if_flag_is_set>
   24e6a:	b928      	cbnz	r0, 24e78 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   24e6c:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   24e6e:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   24e70:	7e9b      	ldrb	r3, [r3, #26]
   24e72:	b11b      	cbz	r3, 24e7c <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   24e74:	f7ff ffce 	bl	24e14 <net_if_flag_set.constprop.24>
		return 0;
   24e78:	2000      	movs	r0, #0
   24e7a:	e023      	b.n	24ec4 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   24e7c:	f017 fdef 	bl	3ca5e <net_if_l2>
   24e80:	b9c0      	cbnz	r0, 24eb4 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   24e82:	682b      	ldr	r3, [r5, #0]
   24e84:	691b      	ldr	r3, [r3, #16]
   24e86:	b973      	cbnz	r3, 24ea6 <net_if_up+0x46>
   24e88:	490f      	ldr	r1, [pc, #60]	; (24ec8 <net_if_up+0x68>)
   24e8a:	f640 538f 	movw	r3, #3471	; 0xd8f
   24e8e:	4a0f      	ldr	r2, [pc, #60]	; (24ecc <net_if_up+0x6c>)
   24e90:	480f      	ldr	r0, [pc, #60]	; (24ed0 <net_if_up+0x70>)
   24e92:	f017 fb9f 	bl	3c5d4 <printk>
   24e96:	480f      	ldr	r0, [pc, #60]	; (24ed4 <net_if_up+0x74>)
   24e98:	f017 fb9c 	bl	3c5d4 <printk>
   24e9c:	f640 518f 	movw	r1, #3471	; 0xd8f
   24ea0:	480a      	ldr	r0, [pc, #40]	; (24ecc <net_if_up+0x6c>)
   24ea2:	f017 fbdd 	bl	3c660 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   24ea6:	4628      	mov	r0, r5
   24ea8:	f7ff ffb4 	bl	24e14 <net_if_flag_set.constprop.24>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   24eac:	4628      	mov	r0, r5
   24eae:	f017 fddb 	bl	3ca68 <l2_flags_get>
   24eb2:	e7e1      	b.n	24e78 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   24eb4:	6883      	ldr	r3, [r0, #8]
   24eb6:	2b00      	cmp	r3, #0
   24eb8:	d0e3      	beq.n	24e82 <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   24eba:	2101      	movs	r1, #1
   24ebc:	4628      	mov	r0, r5
   24ebe:	4798      	blx	r3
	if (status < 0) {
   24ec0:	2800      	cmp	r0, #0
   24ec2:	dade      	bge.n	24e82 <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   24ec4:	bd38      	pop	{r3, r4, r5, pc}
   24ec6:	bf00      	nop
   24ec8:	00043122 	.word	0x00043122
   24ecc:	00043153 	.word	0x00043153
   24ed0:	00041757 	.word	0x00041757
   24ed4:	0004311f 	.word	0x0004311f

00024ed8 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   24ed8:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   24eda:	4c07      	ldr	r4, [pc, #28]	; (24ef8 <net_if_init+0x20>)
   24edc:	4d07      	ldr	r5, [pc, #28]	; (24efc <net_if_init+0x24>)
   24ede:	42ac      	cmp	r4, r5
   24ee0:	d100      	bne.n	24ee4 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   24ee2:	bd38      	pop	{r3, r4, r5, pc}
	return iface->if_dev->dev;
   24ee4:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   24ee6:	681b      	ldr	r3, [r3, #0]
   24ee8:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   24eea:	b11b      	cbz	r3, 24ef4 <net_if_init+0x1c>
   24eec:	681b      	ldr	r3, [r3, #0]
   24eee:	b10b      	cbz	r3, 24ef4 <net_if_init+0x1c>
	api->init(iface);
   24ef0:	4620      	mov	r0, r4
   24ef2:	4798      	blx	r3
	     iface++, if_count++) {
   24ef4:	3420      	adds	r4, #32
   24ef6:	e7f2      	b.n	24ede <net_if_init+0x6>
   24ef8:	20031960 	.word	0x20031960
   24efc:	20031980 	.word	0x20031980

00024f00 <net_if_post_init>:

void net_if_post_init(void)
{
   24f00:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   24f02:	4c07      	ldr	r4, [pc, #28]	; (24f20 <net_if_post_init+0x20>)
   24f04:	4d07      	ldr	r5, [pc, #28]	; (24f24 <net_if_post_init+0x24>)
   24f06:	42ac      	cmp	r4, r5
   24f08:	d100      	bne.n	24f0c <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   24f0a:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   24f0c:	2103      	movs	r1, #3
   24f0e:	4620      	mov	r0, r4
   24f10:	f7ff ff5c 	bl	24dcc <net_if_flag_is_set>
   24f14:	b910      	cbnz	r0, 24f1c <net_if_post_init+0x1c>
			net_if_up(iface);
   24f16:	4620      	mov	r0, r4
   24f18:	f7ff ffa2 	bl	24e60 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   24f1c:	3420      	adds	r4, #32
   24f1e:	e7f2      	b.n	24f06 <net_if_post_init+0x6>
   24f20:	20031960 	.word	0x20031960
   24f24:	20031980 	.word	0x20031980

00024f28 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   24f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   24f2c:	680f      	ldr	r7, [r1, #0]
	u8_t connect_flags = client->clean_session << 1;
   24f2e:	f890 5078 	ldrb.w	r5, [r0, #120]	; 0x78
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   24f32:	4b3b      	ldr	r3, [pc, #236]	; (25020 <connect_request_encode+0xf8>)
   24f34:	4a3b      	ldr	r2, [pc, #236]	; (25024 <connect_request_encode+0xfc>)
{
   24f36:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   24f38:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   24f3c:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   24f3e:	2804      	cmp	r0, #4
   24f40:	bf0c      	ite	eq
   24f42:	4610      	moveq	r0, r2
   24f44:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   24f46:	600f      	str	r7, [r1, #0]
{
   24f48:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   24f4a:	f017 fe64 	bl	3cc16 <pack_utf8_str>
	u8_t connect_flags = client->clean_session << 1;
   24f4e:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   24f52:	4603      	mov	r3, r0
   24f54:	b938      	cbnz	r0, 24f66 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   24f56:	e9d4 2000 	ldrd	r2, r0, [r4]
   24f5a:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   24f5c:	f896 1076 	ldrb.w	r1, [r6, #118]	; 0x76
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   24f60:	d104      	bne.n	24f6c <connect_request_encode+0x44>
		return -ENOMEM;
   24f62:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   24f66:	4618      	mov	r0, r3
   24f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   24f6c:	1c50      	adds	r0, r2, #1
   24f6e:	6020      	str	r0, [r4, #0]
   24f70:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   24f72:	e9d4 8200 	ldrd	r8, r2, [r4]
   24f76:	4590      	cmp	r8, r2
   24f78:	d0f3      	beq.n	24f62 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   24f7a:	f108 0201 	add.w	r2, r8, #1
   24f7e:	6022      	str	r2, [r4, #0]
   24f80:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   24f84:	4621      	mov	r1, r4
   24f86:	f8b6 0074 	ldrh.w	r0, [r6, #116]	; 0x74
   24f8a:	f017 fe32 	bl	3cbf2 <pack_uint16>
	if (err_code != 0) {
   24f8e:	4603      	mov	r3, r0
   24f90:	2800      	cmp	r0, #0
   24f92:	d1e8      	bne.n	24f66 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   24f94:	f106 0044 	add.w	r0, r6, #68	; 0x44
   24f98:	f017 fe3d 	bl	3cc16 <pack_utf8_str>
	if (err_code != 0) {
   24f9c:	4603      	mov	r3, r0
   24f9e:	2800      	cmp	r0, #0
   24fa0:	d1e1      	bne.n	24f66 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   24fa2:	6db0      	ldr	r0, [r6, #88]	; 0x58
	u8_t connect_flags = client->clean_session << 1;
   24fa4:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   24fa6:	b1d8      	cbz	r0, 24fe0 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   24fa8:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   24fac:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   24fb0:	f003 0301 	and.w	r3, r3, #1
   24fb4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   24fb8:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   24fba:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   24fbc:	00db      	lsls	r3, r3, #3
   24fbe:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   24fc2:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   24fc4:	f017 fe27 	bl	3cc16 <pack_utf8_str>
		if (err_code != 0) {
   24fc8:	4603      	mov	r3, r0
   24fca:	2800      	cmp	r0, #0
   24fcc:	d1cb      	bne.n	24f66 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   24fce:	6df3      	ldr	r3, [r6, #92]	; 0x5c
			err_code = pack_utf8_str(client->will_message, buf);
   24fd0:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   24fd2:	b313      	cbz	r3, 2501a <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   24fd4:	4618      	mov	r0, r3
   24fd6:	f017 fe1e 	bl	3cc16 <pack_utf8_str>
			if (err_code != 0) {
   24fda:	4603      	mov	r3, r0
   24fdc:	2800      	cmp	r0, #0
   24fde:	d1c2      	bne.n	24f66 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   24fe0:	6d30      	ldr	r0, [r6, #80]	; 0x50
   24fe2:	b138      	cbz	r0, 24ff4 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   24fe4:	4621      	mov	r1, r4
   24fe6:	f017 fe16 	bl	3cc16 <pack_utf8_str>
		if (err_code != 0) {
   24fea:	4603      	mov	r3, r0
   24fec:	2800      	cmp	r0, #0
   24fee:	d1ba      	bne.n	24f66 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   24ff0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   24ff4:	6d70      	ldr	r0, [r6, #84]	; 0x54
   24ff6:	b138      	cbz	r0, 25008 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   24ff8:	4621      	mov	r1, r4
   24ffa:	f017 fe0c 	bl	3cc16 <pack_utf8_str>
		if (err_code != 0) {
   24ffe:	4603      	mov	r3, r0
   25000:	2800      	cmp	r0, #0
   25002:	d1b0      	bne.n	24f66 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   25004:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   25008:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   2500c:	4622      	mov	r2, r4
   2500e:	4639      	mov	r1, r7
}
   25010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   25014:	2010      	movs	r0, #16
   25016:	f017 be19 	b.w	3cc4c <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   2501a:	f017 fdea 	bl	3cbf2 <pack_uint16>
   2501e:	e7dc      	b.n	24fda <connect_request_encode+0xb2>
   25020:	0004078c 	.word	0x0004078c
   25024:	00040794 	.word	0x00040794

00025028 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   25028:	e9d0 2300 	ldrd	r2, r3, [r0]
   2502c:	1a9b      	subs	r3, r3, r2
   2502e:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25030:	bf81      	itttt	hi
   25032:	4b05      	ldrhi	r3, [pc, #20]	; (25048 <disconnect_encode+0x20>)
   25034:	881b      	ldrhhi	r3, [r3, #0]
   25036:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   25038:	6803      	ldrhi	r3, [r0, #0]
   2503a:	bf83      	ittte	hi
   2503c:	3302      	addhi	r3, #2
   2503e:	6043      	strhi	r3, [r0, #4]

	return 0;
   25040:	2000      	movhi	r0, #0
		return -ENOMEM;
   25042:	f06f 000b 	mvnls.w	r0, #11
}
   25046:	4770      	bx	lr
   25048:	00043176 	.word	0x00043176

0002504c <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   2504c:	e9d0 2300 	ldrd	r2, r3, [r0]
   25050:	1a9b      	subs	r3, r3, r2
   25052:	2b01      	cmp	r3, #1
   25054:	bf81      	itttt	hi
   25056:	4b05      	ldrhi	r3, [pc, #20]	; (2506c <ping_request_encode+0x20>)
   25058:	881b      	ldrhhi	r3, [r3, #0]
   2505a:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   2505c:	6803      	ldrhi	r3, [r0, #0]
   2505e:	bf83      	ittte	hi
   25060:	3302      	addhi	r3, #2
   25062:	6043      	strhi	r3, [r0, #4]

	return 0;
   25064:	2000      	movhi	r0, #0
		return -ENOMEM;
   25066:	f06f 000b 	mvnls.w	r0, #11
}
   2506a:	4770      	bx	lr
   2506c:	00043182 	.word	0x00043182

00025070 <close>:
{
   25070:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   25072:	4c10      	ldr	r4, [pc, #64]	; (250b4 <close+0x44>)
{
   25074:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   25076:	6823      	ldr	r3, [r4, #0]
   25078:	b94b      	cbnz	r3, 2508e <close+0x1e>
   2507a:	490f      	ldr	r1, [pc, #60]	; (250b8 <close+0x48>)
   2507c:	480f      	ldr	r0, [pc, #60]	; (250bc <close+0x4c>)
   2507e:	2321      	movs	r3, #33	; 0x21
   25080:	4a0f      	ldr	r2, [pc, #60]	; (250c0 <close+0x50>)
   25082:	f017 faa7 	bl	3c5d4 <printk>
   25086:	2121      	movs	r1, #33	; 0x21
   25088:	480d      	ldr	r0, [pc, #52]	; (250c0 <close+0x50>)
   2508a:	f017 fae9 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2508e:	6823      	ldr	r3, [r4, #0]
   25090:	685b      	ldr	r3, [r3, #4]
   25092:	b94b      	cbnz	r3, 250a8 <close+0x38>
   25094:	490b      	ldr	r1, [pc, #44]	; (250c4 <close+0x54>)
   25096:	4809      	ldr	r0, [pc, #36]	; (250bc <close+0x4c>)
   25098:	2322      	movs	r3, #34	; 0x22
   2509a:	4a09      	ldr	r2, [pc, #36]	; (250c0 <close+0x50>)
   2509c:	f017 fa9a 	bl	3c5d4 <printk>
   250a0:	2122      	movs	r1, #34	; 0x22
   250a2:	4807      	ldr	r0, [pc, #28]	; (250c0 <close+0x50>)
   250a4:	f017 fadc 	bl	3c660 <assert_post_action>
	return socket_ops->close(sock);
   250a8:	6823      	ldr	r3, [r4, #0]
   250aa:	4628      	mov	r0, r5
}
   250ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   250b0:	685b      	ldr	r3, [r3, #4]
   250b2:	4718      	bx	r3
   250b4:	20023a4c 	.word	0x20023a4c
   250b8:	000418d1 	.word	0x000418d1
   250bc:	00041757 	.word	0x00041757
   250c0:	000418a8 	.word	0x000418a8
   250c4:	00043184 	.word	0x00043184

000250c8 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   250c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   250cc:	4c2d      	ldr	r4, [pc, #180]	; (25184 <mqtt_client_tcp_connect+0xbc>)
	const struct sockaddr *broker = client->broker;
   250ce:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
   250d0:	6823      	ldr	r3, [r4, #0]
{
   250d2:	4606      	mov	r6, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   250d4:	882f      	ldrh	r7, [r5, #0]
   250d6:	b94b      	cbnz	r3, 250ec <mqtt_client_tcp_connect+0x24>
   250d8:	492b      	ldr	r1, [pc, #172]	; (25188 <mqtt_client_tcp_connect+0xc0>)
   250da:	482c      	ldr	r0, [pc, #176]	; (2518c <mqtt_client_tcp_connect+0xc4>)
   250dc:	2319      	movs	r3, #25
   250de:	4a2c      	ldr	r2, [pc, #176]	; (25190 <mqtt_client_tcp_connect+0xc8>)
   250e0:	f017 fa78 	bl	3c5d4 <printk>
   250e4:	2119      	movs	r1, #25
   250e6:	482a      	ldr	r0, [pc, #168]	; (25190 <mqtt_client_tcp_connect+0xc8>)
   250e8:	f017 faba 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   250ec:	6823      	ldr	r3, [r4, #0]
   250ee:	681b      	ldr	r3, [r3, #0]
   250f0:	b94b      	cbnz	r3, 25106 <mqtt_client_tcp_connect+0x3e>
   250f2:	4928      	ldr	r1, [pc, #160]	; (25194 <mqtt_client_tcp_connect+0xcc>)
   250f4:	4825      	ldr	r0, [pc, #148]	; (2518c <mqtt_client_tcp_connect+0xc4>)
   250f6:	231a      	movs	r3, #26
   250f8:	4a25      	ldr	r2, [pc, #148]	; (25190 <mqtt_client_tcp_connect+0xc8>)
   250fa:	f017 fa6b 	bl	3c5d4 <printk>
   250fe:	211a      	movs	r1, #26
   25100:	4823      	ldr	r0, [pc, #140]	; (25190 <mqtt_client_tcp_connect+0xc8>)
   25102:	f017 faad 	bl	3c660 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   25106:	6823      	ldr	r3, [r4, #0]
   25108:	4638      	mov	r0, r7
   2510a:	681b      	ldr	r3, [r3, #0]
   2510c:	2206      	movs	r2, #6
   2510e:	2101      	movs	r1, #1
   25110:	4798      	blx	r3
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   25112:	2800      	cmp	r0, #0
   25114:	4607      	mov	r7, r0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   25116:	62b0      	str	r0, [r6, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   25118:	da05      	bge.n	25126 <mqtt_client_tcp_connect+0x5e>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   2511a:	f017 fc97 	bl	3ca4c <__errno>
   2511e:	6800      	ldr	r0, [r0, #0]
   25120:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   25122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (broker->sa_family == AF_INET) {
   25126:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   25128:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
		peer_addr_size = sizeof(struct sockaddr_in);
   2512a:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   2512c:	6823      	ldr	r3, [r4, #0]
   2512e:	bf14      	ite	ne
   25130:	f04f 0818 	movne.w	r8, #24
   25134:	f04f 0808 	moveq.w	r8, #8
   25138:	b94b      	cbnz	r3, 2514e <mqtt_client_tcp_connect+0x86>
   2513a:	4913      	ldr	r1, [pc, #76]	; (25188 <mqtt_client_tcp_connect+0xc0>)
   2513c:	4813      	ldr	r0, [pc, #76]	; (2518c <mqtt_client_tcp_connect+0xc4>)
   2513e:	2345      	movs	r3, #69	; 0x45
   25140:	4a13      	ldr	r2, [pc, #76]	; (25190 <mqtt_client_tcp_connect+0xc8>)
   25142:	f017 fa47 	bl	3c5d4 <printk>
   25146:	2145      	movs	r1, #69	; 0x45
   25148:	4811      	ldr	r0, [pc, #68]	; (25190 <mqtt_client_tcp_connect+0xc8>)
   2514a:	f017 fa89 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   2514e:	6823      	ldr	r3, [r4, #0]
   25150:	695b      	ldr	r3, [r3, #20]
   25152:	b94b      	cbnz	r3, 25168 <mqtt_client_tcp_connect+0xa0>
   25154:	4910      	ldr	r1, [pc, #64]	; (25198 <mqtt_client_tcp_connect+0xd0>)
   25156:	480d      	ldr	r0, [pc, #52]	; (2518c <mqtt_client_tcp_connect+0xc4>)
   25158:	2346      	movs	r3, #70	; 0x46
   2515a:	4a0d      	ldr	r2, [pc, #52]	; (25190 <mqtt_client_tcp_connect+0xc8>)
   2515c:	f017 fa3a 	bl	3c5d4 <printk>
   25160:	2146      	movs	r1, #70	; 0x46
   25162:	480b      	ldr	r0, [pc, #44]	; (25190 <mqtt_client_tcp_connect+0xc8>)
   25164:	f017 fa7c 	bl	3c660 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   25168:	6823      	ldr	r3, [r4, #0]
   2516a:	4642      	mov	r2, r8
   2516c:	695b      	ldr	r3, [r3, #20]
   2516e:	4629      	mov	r1, r5
   25170:	4638      	mov	r0, r7
   25172:	4798      	blx	r3
	if (ret < 0) {
   25174:	2800      	cmp	r0, #0
   25176:	da03      	bge.n	25180 <mqtt_client_tcp_connect+0xb8>
		(void)close(client->transport.tcp.sock);
   25178:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   2517a:	f7ff ff79 	bl	25070 <close>
   2517e:	e7cc      	b.n	2511a <mqtt_client_tcp_connect+0x52>
	return 0;
   25180:	2000      	movs	r0, #0
   25182:	e7ce      	b.n	25122 <mqtt_client_tcp_connect+0x5a>
   25184:	20023a4c 	.word	0x20023a4c
   25188:	000418d1 	.word	0x000418d1
   2518c:	00041757 	.word	0x00041757
   25190:	000418a8 	.word	0x000418a8
   25194:	00043196 	.word	0x00043196
   25198:	000431a9 	.word	0x000431a9

0002519c <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   2519c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   251a0:	4680      	mov	r8, r0
   251a2:	4689      	mov	r9, r1
   251a4:	4617      	mov	r7, r2
	u32_t offset = 0U;
   251a6:	2400      	movs	r4, #0
}

static inline ssize_t send(int sock, const void *buf, size_t len,
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
   251a8:	4d1d      	ldr	r5, [pc, #116]	; (25220 <mqtt_client_tcp_write+0x84>)
	int ret;

	while (offset < datalen) {
   251aa:	42bc      	cmp	r4, r7
   251ac:	d301      	bcc.n	251b2 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   251ae:	2000      	movs	r0, #0
   251b0:	e031      	b.n	25216 <mqtt_client_tcp_write+0x7a>
		ret = send(client->transport.tcp.sock, data + offset,
   251b2:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   251b6:	eb09 0a04 	add.w	sl, r9, r4
   251ba:	461e      	mov	r6, r3
   251bc:	4b19      	ldr	r3, [pc, #100]	; (25224 <mqtt_client_tcp_write+0x88>)
   251be:	eba7 0b04 	sub.w	fp, r7, r4
   251c2:	681b      	ldr	r3, [r3, #0]
   251c4:	b94b      	cbnz	r3, 251da <mqtt_client_tcp_write+0x3e>
   251c6:	4918      	ldr	r1, [pc, #96]	; (25228 <mqtt_client_tcp_write+0x8c>)
   251c8:	4818      	ldr	r0, [pc, #96]	; (2522c <mqtt_client_tcp_write+0x90>)
   251ca:	237e      	movs	r3, #126	; 0x7e
   251cc:	462a      	mov	r2, r5
   251ce:	f017 fa01 	bl	3c5d4 <printk>
   251d2:	217e      	movs	r1, #126	; 0x7e
   251d4:	4628      	mov	r0, r5
   251d6:	f017 fa43 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   251da:	4b12      	ldr	r3, [pc, #72]	; (25224 <mqtt_client_tcp_write+0x88>)
   251dc:	681b      	ldr	r3, [r3, #0]
   251de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   251e0:	b94b      	cbnz	r3, 251f6 <mqtt_client_tcp_write+0x5a>
   251e2:	4913      	ldr	r1, [pc, #76]	; (25230 <mqtt_client_tcp_write+0x94>)
   251e4:	4811      	ldr	r0, [pc, #68]	; (2522c <mqtt_client_tcp_write+0x90>)
   251e6:	237f      	movs	r3, #127	; 0x7f
   251e8:	462a      	mov	r2, r5
   251ea:	f017 f9f3 	bl	3c5d4 <printk>
   251ee:	217f      	movs	r1, #127	; 0x7f
   251f0:	4628      	mov	r0, r5
   251f2:	f017 fa35 	bl	3c660 <assert_post_action>

	return socket_ops->send(sock, buf, len, flags);
   251f6:	4b0b      	ldr	r3, [pc, #44]	; (25224 <mqtt_client_tcp_write+0x88>)
   251f8:	4630      	mov	r0, r6
   251fa:	681b      	ldr	r3, [r3, #0]
   251fc:	465a      	mov	r2, fp
   251fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25200:	4651      	mov	r1, sl
   25202:	469c      	mov	ip, r3
   25204:	2300      	movs	r3, #0
   25206:	4666      	mov	r6, ip
   25208:	47b0      	blx	r6
		if (ret < 0) {
   2520a:	2800      	cmp	r0, #0
   2520c:	da05      	bge.n	2521a <mqtt_client_tcp_write+0x7e>
			return -errno;
   2520e:	f017 fc1d 	bl	3ca4c <__errno>
   25212:	6800      	ldr	r0, [r0, #0]
   25214:	4240      	negs	r0, r0
}
   25216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   2521a:	4404      	add	r4, r0
   2521c:	e7c5      	b.n	251aa <mqtt_client_tcp_write+0xe>
   2521e:	bf00      	nop
   25220:	000418a8 	.word	0x000418a8
   25224:	20023a4c 	.word	0x20023a4c
   25228:	000418d1 	.word	0x000418d1
   2522c:	00041757 	.word	0x00041757
   25230:	000431ce 	.word	0x000431ce

00025234 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   25234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   25238:	4c18      	ldr	r4, [pc, #96]	; (2529c <mqtt_client_tcp_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   2523a:	2b00      	cmp	r3, #0
   2523c:	6823      	ldr	r3, [r4, #0]
{
   2523e:	460e      	mov	r6, r1
   25240:	4617      	mov	r7, r2
		flags |= MSG_DONTWAIT;
   25242:	bf14      	ite	ne
   25244:	f04f 0800 	movne.w	r8, #0
   25248:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   2524c:	6a85      	ldr	r5, [r0, #40]	; 0x28
   2524e:	b94b      	cbnz	r3, 25264 <mqtt_client_tcp_read+0x30>
   25250:	4913      	ldr	r1, [pc, #76]	; (252a0 <mqtt_client_tcp_read+0x6c>)
   25252:	4814      	ldr	r0, [pc, #80]	; (252a4 <mqtt_client_tcp_read+0x70>)
   25254:	2369      	movs	r3, #105	; 0x69
   25256:	4a14      	ldr	r2, [pc, #80]	; (252a8 <mqtt_client_tcp_read+0x74>)
   25258:	f017 f9bc 	bl	3c5d4 <printk>
   2525c:	2169      	movs	r1, #105	; 0x69
   2525e:	4812      	ldr	r0, [pc, #72]	; (252a8 <mqtt_client_tcp_read+0x74>)
   25260:	f017 f9fe 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   25264:	6823      	ldr	r3, [r4, #0]
   25266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25268:	b94b      	cbnz	r3, 2527e <mqtt_client_tcp_read+0x4a>
   2526a:	4910      	ldr	r1, [pc, #64]	; (252ac <mqtt_client_tcp_read+0x78>)
   2526c:	480d      	ldr	r0, [pc, #52]	; (252a4 <mqtt_client_tcp_read+0x70>)
   2526e:	236a      	movs	r3, #106	; 0x6a
   25270:	4a0d      	ldr	r2, [pc, #52]	; (252a8 <mqtt_client_tcp_read+0x74>)
   25272:	f017 f9af 	bl	3c5d4 <printk>
   25276:	216a      	movs	r1, #106	; 0x6a
   25278:	480b      	ldr	r0, [pc, #44]	; (252a8 <mqtt_client_tcp_read+0x74>)
   2527a:	f017 f9f1 	bl	3c660 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   2527e:	6823      	ldr	r3, [r4, #0]
   25280:	463a      	mov	r2, r7
   25282:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   25284:	4631      	mov	r1, r6
   25286:	4643      	mov	r3, r8
   25288:	4628      	mov	r0, r5
   2528a:	47a0      	blx	r4
	if (ret < 0) {
   2528c:	2800      	cmp	r0, #0
   2528e:	da03      	bge.n	25298 <mqtt_client_tcp_read+0x64>
		return -errno;
   25290:	f017 fbdc 	bl	3ca4c <__errno>
   25294:	6800      	ldr	r0, [r0, #0]
   25296:	4240      	negs	r0, r0
	}

	return ret;
}
   25298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2529c:	20023a4c 	.word	0x20023a4c
   252a0:	000418d1 	.word	0x000418d1
   252a4:	00041757 	.word	0x00041757
   252a8:	000418a8 	.word	0x000418a8
   252ac:	000431bd 	.word	0x000431bd

000252b0 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   252b0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   252b4:	4a01      	ldr	r2, [pc, #4]	; (252bc <mqtt_transport_connect+0xc>)
   252b6:	011b      	lsls	r3, r3, #4
   252b8:	58d3      	ldr	r3, [r2, r3]
   252ba:	4718      	bx	r3
   252bc:	0004079c 	.word	0x0004079c

000252c0 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
   252c0:	b410      	push	{r4}
	return transport_fn[client->transport.type].write(client, data,
   252c2:	4b04      	ldr	r3, [pc, #16]	; (252d4 <mqtt_transport_write+0x14>)
   252c4:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   252c8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   252cc:	685b      	ldr	r3, [r3, #4]
							  datalen);
}
   252ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write(client, data,
   252d2:	4718      	bx	r3
   252d4:	0004079c 	.word	0x0004079c

000252d8 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			bool shall_block)
{
   252d8:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   252da:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   252de:	4c03      	ldr	r4, [pc, #12]	; (252ec <mqtt_transport_read+0x14>)
   252e0:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   252e4:	68a4      	ldr	r4, [r4, #8]
   252e6:	46a4      	mov	ip, r4
							 shall_block);
}
   252e8:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   252ea:	4760      	bx	ip
   252ec:	0004079c 	.word	0x0004079c

000252f0 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   252f0:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   252f4:	4b02      	ldr	r3, [pc, #8]	; (25300 <mqtt_transport_disconnect+0x10>)
   252f6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   252fa:	68db      	ldr	r3, [r3, #12]
   252fc:	4718      	bx	r3
   252fe:	bf00      	nop
   25300:	0004079c 	.word	0x0004079c

00025304 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   25304:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   25306:	b510      	push	{r4, lr}
   25308:	b142      	cbz	r2, 2531c <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   2530a:	4b0f      	ldr	r3, [pc, #60]	; (25348 <mqtt_mutex_unlock+0x44>)
   2530c:	6882      	ldr	r2, [r0, #8]
   2530e:	689b      	ldr	r3, [r3, #8]
   25310:	429a      	cmp	r2, r3
   25312:	d115      	bne.n	25340 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   25314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   25318:	f011 bfbc 	b.w	37294 <z_impl_k_mutex_unlock>
		return -EINVAL;
   2531c:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   25320:	2343      	movs	r3, #67	; 0x43
   25322:	4a0a      	ldr	r2, [pc, #40]	; (2534c <mqtt_mutex_unlock+0x48>)
   25324:	490a      	ldr	r1, [pc, #40]	; (25350 <mqtt_mutex_unlock+0x4c>)
   25326:	480b      	ldr	r0, [pc, #44]	; (25354 <mqtt_mutex_unlock+0x50>)
   25328:	f017 f954 	bl	3c5d4 <printk>
   2532c:	4621      	mov	r1, r4
   2532e:	480a      	ldr	r0, [pc, #40]	; (25358 <mqtt_mutex_unlock+0x54>)
   25330:	f017 f950 	bl	3c5d4 <printk>
}
   25334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   25338:	2143      	movs	r1, #67	; 0x43
   2533a:	4804      	ldr	r0, [pc, #16]	; (2534c <mqtt_mutex_unlock+0x48>)
   2533c:	f017 b990 	b.w	3c660 <assert_post_action>
		return -EPERM;
   25340:	f04f 34ff 	mov.w	r4, #4294967295
   25344:	e7ec      	b.n	25320 <mqtt_mutex_unlock+0x1c>
   25346:	bf00      	nop
   25348:	20029368 	.word	0x20029368
   2534c:	000431ff 	.word	0x000431ff
   25350:	00043229 	.word	0x00043229
   25354:	00041757 	.word	0x00041757
   25358:	00043232 	.word	0x00043232

0002535c <mqtt_mutex_lock>:
{
   2535c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2535e:	f04f 31ff 	mov.w	r1, #4294967295
   25362:	f011 feb9 	bl	370d8 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   25366:	4604      	mov	r4, r0
   25368:	b178      	cbz	r0, 2538a <mqtt_mutex_lock+0x2e>
   2536a:	2339      	movs	r3, #57	; 0x39
   2536c:	4a07      	ldr	r2, [pc, #28]	; (2538c <mqtt_mutex_lock+0x30>)
   2536e:	4908      	ldr	r1, [pc, #32]	; (25390 <mqtt_mutex_lock+0x34>)
   25370:	4808      	ldr	r0, [pc, #32]	; (25394 <mqtt_mutex_lock+0x38>)
   25372:	f017 f92f 	bl	3c5d4 <printk>
   25376:	4621      	mov	r1, r4
   25378:	4807      	ldr	r0, [pc, #28]	; (25398 <mqtt_mutex_lock+0x3c>)
   2537a:	f017 f92b 	bl	3c5d4 <printk>
}
   2537e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   25382:	2139      	movs	r1, #57	; 0x39
   25384:	4801      	ldr	r0, [pc, #4]	; (2538c <mqtt_mutex_lock+0x30>)
   25386:	f017 b96b 	b.w	3c660 <assert_post_action>
}
   2538a:	bd10      	pop	{r4, pc}
   2538c:	000431ff 	.word	0x000431ff
   25390:	00043229 	.word	0x00043229
   25394:	00041757 	.word	0x00041757
   25398:	000431df 	.word	0x000431df

0002539c <close>:
{
   2539c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   2539e:	4c10      	ldr	r4, [pc, #64]	; (253e0 <close+0x44>)
{
   253a0:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   253a2:	6823      	ldr	r3, [r4, #0]
   253a4:	b94b      	cbnz	r3, 253ba <close+0x1e>
   253a6:	490f      	ldr	r1, [pc, #60]	; (253e4 <close+0x48>)
   253a8:	480f      	ldr	r0, [pc, #60]	; (253e8 <close+0x4c>)
   253aa:	2321      	movs	r3, #33	; 0x21
   253ac:	4a0f      	ldr	r2, [pc, #60]	; (253ec <close+0x50>)
   253ae:	f017 f911 	bl	3c5d4 <printk>
   253b2:	2121      	movs	r1, #33	; 0x21
   253b4:	480d      	ldr	r0, [pc, #52]	; (253ec <close+0x50>)
   253b6:	f017 f953 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   253ba:	6823      	ldr	r3, [r4, #0]
   253bc:	685b      	ldr	r3, [r3, #4]
   253be:	b94b      	cbnz	r3, 253d4 <close+0x38>
   253c0:	490b      	ldr	r1, [pc, #44]	; (253f0 <close+0x54>)
   253c2:	4809      	ldr	r0, [pc, #36]	; (253e8 <close+0x4c>)
   253c4:	2322      	movs	r3, #34	; 0x22
   253c6:	4a09      	ldr	r2, [pc, #36]	; (253ec <close+0x50>)
   253c8:	f017 f904 	bl	3c5d4 <printk>
   253cc:	2122      	movs	r1, #34	; 0x22
   253ce:	4807      	ldr	r0, [pc, #28]	; (253ec <close+0x50>)
   253d0:	f017 f946 	bl	3c660 <assert_post_action>
	return socket_ops->close(sock);
   253d4:	6823      	ldr	r3, [r4, #0]
   253d6:	4628      	mov	r0, r5
}
   253d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   253dc:	685b      	ldr	r3, [r3, #4]
   253de:	4718      	bx	r3
   253e0:	20023a4c 	.word	0x20023a4c
   253e4:	000418d1 	.word	0x000418d1
   253e8:	00041757 	.word	0x00041757
   253ec:	000418a8 	.word	0x000418a8
   253f0:	00043184 	.word	0x00043184

000253f4 <setsockopt.constprop.1>:
static inline int setsockopt(int sock, int level, int optname,
   253f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   253f8:	4c15      	ldr	r4, [pc, #84]	; (25450 <setsockopt.constprop.1+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   253fa:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   253fc:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   253fe:	4605      	mov	r5, r0
   25400:	460e      	mov	r6, r1
   25402:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   25404:	b94b      	cbnz	r3, 2541a <setsockopt.constprop.1+0x26>
   25406:	4913      	ldr	r1, [pc, #76]	; (25454 <setsockopt.constprop.1+0x60>)
   25408:	4813      	ldr	r0, [pc, #76]	; (25458 <setsockopt.constprop.1+0x64>)
   2540a:	2357      	movs	r3, #87	; 0x57
   2540c:	4a13      	ldr	r2, [pc, #76]	; (2545c <setsockopt.constprop.1+0x68>)
   2540e:	f017 f8e1 	bl	3c5d4 <printk>
   25412:	2157      	movs	r1, #87	; 0x57
   25414:	4811      	ldr	r0, [pc, #68]	; (2545c <setsockopt.constprop.1+0x68>)
   25416:	f017 f923 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   2541a:	6823      	ldr	r3, [r4, #0]
   2541c:	69db      	ldr	r3, [r3, #28]
   2541e:	b94b      	cbnz	r3, 25434 <setsockopt.constprop.1+0x40>
   25420:	490f      	ldr	r1, [pc, #60]	; (25460 <setsockopt.constprop.1+0x6c>)
   25422:	480d      	ldr	r0, [pc, #52]	; (25458 <setsockopt.constprop.1+0x64>)
   25424:	2358      	movs	r3, #88	; 0x58
   25426:	4a0d      	ldr	r2, [pc, #52]	; (2545c <setsockopt.constprop.1+0x68>)
   25428:	f017 f8d4 	bl	3c5d4 <printk>
   2542c:	2158      	movs	r1, #88	; 0x58
   2542e:	480b      	ldr	r0, [pc, #44]	; (2545c <setsockopt.constprop.1+0x68>)
   25430:	f017 f916 	bl	3c660 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   25434:	6823      	ldr	r3, [r4, #0]
   25436:	f8cd 8000 	str.w	r8, [sp]
   2543a:	69dc      	ldr	r4, [r3, #28]
   2543c:	4632      	mov	r2, r6
   2543e:	463b      	mov	r3, r7
   25440:	f44f 718d 	mov.w	r1, #282	; 0x11a
   25444:	4628      	mov	r0, r5
   25446:	47a0      	blx	r4
}
   25448:	b002      	add	sp, #8
   2544a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2544e:	bf00      	nop
   25450:	20023a4c 	.word	0x20023a4c
   25454:	000418d1 	.word	0x000418d1
   25458:	00041757 	.word	0x00041757
   2545c:	000418a8 	.word	0x000418a8
   25460:	00043254 	.word	0x00043254

00025464 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   25464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   25468:	4d48      	ldr	r5, [pc, #288]	; (2558c <mqtt_client_tls_connect+0x128>)
	const struct sockaddr *broker = client->broker;
   2546a:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
   2546c:	682b      	ldr	r3, [r5, #0]
{
   2546e:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   25470:	883e      	ldrh	r6, [r7, #0]
   25472:	b94b      	cbnz	r3, 25488 <mqtt_client_tls_connect+0x24>
   25474:	4946      	ldr	r1, [pc, #280]	; (25590 <mqtt_client_tls_connect+0x12c>)
   25476:	4847      	ldr	r0, [pc, #284]	; (25594 <mqtt_client_tls_connect+0x130>)
   25478:	2319      	movs	r3, #25
   2547a:	4a47      	ldr	r2, [pc, #284]	; (25598 <mqtt_client_tls_connect+0x134>)
   2547c:	f017 f8aa 	bl	3c5d4 <printk>
   25480:	2119      	movs	r1, #25
   25482:	4845      	ldr	r0, [pc, #276]	; (25598 <mqtt_client_tls_connect+0x134>)
   25484:	f017 f8ec 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   25488:	682b      	ldr	r3, [r5, #0]
   2548a:	681b      	ldr	r3, [r3, #0]
   2548c:	b94b      	cbnz	r3, 254a2 <mqtt_client_tls_connect+0x3e>
   2548e:	4943      	ldr	r1, [pc, #268]	; (2559c <mqtt_client_tls_connect+0x138>)
   25490:	4840      	ldr	r0, [pc, #256]	; (25594 <mqtt_client_tls_connect+0x130>)
   25492:	231a      	movs	r3, #26
   25494:	4a40      	ldr	r2, [pc, #256]	; (25598 <mqtt_client_tls_connect+0x134>)
   25496:	f017 f89d 	bl	3c5d4 <printk>
   2549a:	211a      	movs	r1, #26
   2549c:	483e      	ldr	r0, [pc, #248]	; (25598 <mqtt_client_tls_connect+0x134>)
   2549e:	f017 f8df 	bl	3c660 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   254a2:	682b      	ldr	r3, [r5, #0]
   254a4:	f44f 7281 	mov.w	r2, #258	; 0x102
   254a8:	681b      	ldr	r3, [r3, #0]
   254aa:	2101      	movs	r1, #1
   254ac:	4630      	mov	r0, r6
   254ae:	4798      	blx	r3
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   254b0:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   254b2:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   254b4:	da05      	bge.n	254c2 <mqtt_client_tls_connect+0x5e>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   254b6:	f017 fac9 	bl	3ca4c <__errno>
   254ba:	6800      	ldr	r0, [r0, #0]
   254bc:	4240      	negs	r0, r0
}
   254be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = setsockopt(client->transport.tls.sock, SOL_TLS, TLS_PEER_VERIFY,
   254c2:	2304      	movs	r3, #4
   254c4:	f104 022c 	add.w	r2, r4, #44	; 0x2c
   254c8:	2105      	movs	r1, #5
   254ca:	f7ff ff93 	bl	253f4 <setsockopt.constprop.1>
	if (ret < 0) {
   254ce:	2800      	cmp	r0, #0
   254d0:	da03      	bge.n	254da <mqtt_client_tls_connect+0x76>
	(void)close(client->transport.tls.sock);
   254d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   254d4:	f7ff ff62 	bl	2539c <close>
   254d8:	e7ed      	b.n	254b6 <mqtt_client_tls_connect+0x52>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   254da:	6b62      	ldr	r2, [r4, #52]	; 0x34
   254dc:	2a00      	cmp	r2, #0
   254de:	d131      	bne.n	25544 <mqtt_client_tls_connect+0xe0>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   254e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   254e2:	2a00      	cmp	r2, #0
   254e4:	d139      	bne.n	2555a <mqtt_client_tls_connect+0xf6>
	if (tls_config->hostname) {
   254e6:	6c26      	ldr	r6, [r4, #64]	; 0x40
   254e8:	2e00      	cmp	r6, #0
   254ea:	d141      	bne.n	25570 <mqtt_client_tls_connect+0x10c>
	if (broker->sa_family == AF_INET) {
   254ec:	883b      	ldrh	r3, [r7, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   254ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   254f0:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   254f2:	682b      	ldr	r3, [r5, #0]
   254f4:	bf0c      	ite	eq
   254f6:	f04f 0808 	moveq.w	r8, #8
   254fa:	f04f 0818 	movne.w	r8, #24
	ret = connect(client->transport.tls.sock, client->broker,
   254fe:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
   25500:	b94b      	cbnz	r3, 25516 <mqtt_client_tls_connect+0xb2>
   25502:	4923      	ldr	r1, [pc, #140]	; (25590 <mqtt_client_tls_connect+0x12c>)
   25504:	4823      	ldr	r0, [pc, #140]	; (25594 <mqtt_client_tls_connect+0x130>)
   25506:	2345      	movs	r3, #69	; 0x45
   25508:	4a23      	ldr	r2, [pc, #140]	; (25598 <mqtt_client_tls_connect+0x134>)
   2550a:	f017 f863 	bl	3c5d4 <printk>
   2550e:	2145      	movs	r1, #69	; 0x45
   25510:	4821      	ldr	r0, [pc, #132]	; (25598 <mqtt_client_tls_connect+0x134>)
   25512:	f017 f8a5 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   25516:	682b      	ldr	r3, [r5, #0]
   25518:	695b      	ldr	r3, [r3, #20]
   2551a:	b94b      	cbnz	r3, 25530 <mqtt_client_tls_connect+0xcc>
   2551c:	4920      	ldr	r1, [pc, #128]	; (255a0 <mqtt_client_tls_connect+0x13c>)
   2551e:	481d      	ldr	r0, [pc, #116]	; (25594 <mqtt_client_tls_connect+0x130>)
   25520:	2346      	movs	r3, #70	; 0x46
   25522:	4a1d      	ldr	r2, [pc, #116]	; (25598 <mqtt_client_tls_connect+0x134>)
   25524:	f017 f856 	bl	3c5d4 <printk>
   25528:	2146      	movs	r1, #70	; 0x46
   2552a:	481b      	ldr	r0, [pc, #108]	; (25598 <mqtt_client_tls_connect+0x134>)
   2552c:	f017 f898 	bl	3c660 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   25530:	682b      	ldr	r3, [r5, #0]
   25532:	4642      	mov	r2, r8
   25534:	695b      	ldr	r3, [r3, #20]
   25536:	4639      	mov	r1, r7
   25538:	4630      	mov	r0, r6
   2553a:	4798      	blx	r3
	if (ret < 0) {
   2553c:	2800      	cmp	r0, #0
   2553e:	dbc8      	blt.n	254d2 <mqtt_client_tls_connect+0x6e>
	return 0;
   25540:	2000      	movs	r0, #0
   25542:	e7bc      	b.n	254be <mqtt_client_tls_connect+0x5a>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   25544:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25546:	2b00      	cmp	r3, #0
   25548:	d0ca      	beq.n	254e0 <mqtt_client_tls_connect+0x7c>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   2554a:	009b      	lsls	r3, r3, #2
   2554c:	2103      	movs	r1, #3
   2554e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   25550:	f7ff ff50 	bl	253f4 <setsockopt.constprop.1>
		if (ret < 0) {
   25554:	2800      	cmp	r0, #0
   25556:	dac3      	bge.n	254e0 <mqtt_client_tls_connect+0x7c>
   25558:	e7bb      	b.n	254d2 <mqtt_client_tls_connect+0x6e>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   2555a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2555c:	2b00      	cmp	r3, #0
   2555e:	d0c2      	beq.n	254e6 <mqtt_client_tls_connect+0x82>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   25560:	009b      	lsls	r3, r3, #2
   25562:	2101      	movs	r1, #1
   25564:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   25566:	f7ff ff45 	bl	253f4 <setsockopt.constprop.1>
		if (ret < 0) {
   2556a:	2800      	cmp	r0, #0
   2556c:	dabb      	bge.n	254e6 <mqtt_client_tls_connect+0x82>
   2556e:	e7b0      	b.n	254d2 <mqtt_client_tls_connect+0x6e>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   25570:	4630      	mov	r0, r6
   25572:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
   25576:	f7f7 fdd5 	bl	1d124 <strlen>
   2557a:	4632      	mov	r2, r6
   2557c:	4603      	mov	r3, r0
   2557e:	2102      	movs	r1, #2
   25580:	4640      	mov	r0, r8
   25582:	f7ff ff37 	bl	253f4 <setsockopt.constprop.1>
		if (ret < 0) {
   25586:	2800      	cmp	r0, #0
   25588:	dab0      	bge.n	254ec <mqtt_client_tls_connect+0x88>
   2558a:	e7a2      	b.n	254d2 <mqtt_client_tls_connect+0x6e>
   2558c:	20023a4c 	.word	0x20023a4c
   25590:	000418d1 	.word	0x000418d1
   25594:	00041757 	.word	0x00041757
   25598:	000418a8 	.word	0x000418a8
   2559c:	00043196 	.word	0x00043196
   255a0:	000431a9 	.word	0x000431a9

000255a4 <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   255a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255a8:	4680      	mov	r8, r0
   255aa:	4689      	mov	r9, r1
   255ac:	4617      	mov	r7, r2
	u32_t offset = 0U;
   255ae:	2400      	movs	r4, #0
	__ASSERT_NO_MSG(socket_ops);
   255b0:	4d1d      	ldr	r5, [pc, #116]	; (25628 <mqtt_client_tls_write+0x84>)
	int ret;

	while (offset < datalen) {
   255b2:	42bc      	cmp	r4, r7
   255b4:	d301      	bcc.n	255ba <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   255b6:	2000      	movs	r0, #0
   255b8:	e031      	b.n	2561e <mqtt_client_tls_write+0x7a>
		ret = send(client->transport.tls.sock, data + offset,
   255ba:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   255be:	eb09 0a04 	add.w	sl, r9, r4
   255c2:	461e      	mov	r6, r3
   255c4:	4b19      	ldr	r3, [pc, #100]	; (2562c <mqtt_client_tls_write+0x88>)
   255c6:	eba7 0b04 	sub.w	fp, r7, r4
   255ca:	681b      	ldr	r3, [r3, #0]
   255cc:	b94b      	cbnz	r3, 255e2 <mqtt_client_tls_write+0x3e>
   255ce:	4918      	ldr	r1, [pc, #96]	; (25630 <mqtt_client_tls_write+0x8c>)
   255d0:	4818      	ldr	r0, [pc, #96]	; (25634 <mqtt_client_tls_write+0x90>)
   255d2:	237e      	movs	r3, #126	; 0x7e
   255d4:	462a      	mov	r2, r5
   255d6:	f016 fffd 	bl	3c5d4 <printk>
   255da:	217e      	movs	r1, #126	; 0x7e
   255dc:	4628      	mov	r0, r5
   255de:	f017 f83f 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   255e2:	4b12      	ldr	r3, [pc, #72]	; (2562c <mqtt_client_tls_write+0x88>)
   255e4:	681b      	ldr	r3, [r3, #0]
   255e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   255e8:	b94b      	cbnz	r3, 255fe <mqtt_client_tls_write+0x5a>
   255ea:	4913      	ldr	r1, [pc, #76]	; (25638 <mqtt_client_tls_write+0x94>)
   255ec:	4811      	ldr	r0, [pc, #68]	; (25634 <mqtt_client_tls_write+0x90>)
   255ee:	237f      	movs	r3, #127	; 0x7f
   255f0:	462a      	mov	r2, r5
   255f2:	f016 ffef 	bl	3c5d4 <printk>
   255f6:	217f      	movs	r1, #127	; 0x7f
   255f8:	4628      	mov	r0, r5
   255fa:	f017 f831 	bl	3c660 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   255fe:	4b0b      	ldr	r3, [pc, #44]	; (2562c <mqtt_client_tls_write+0x88>)
   25600:	4630      	mov	r0, r6
   25602:	681b      	ldr	r3, [r3, #0]
   25604:	465a      	mov	r2, fp
   25606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25608:	4651      	mov	r1, sl
   2560a:	469c      	mov	ip, r3
   2560c:	2300      	movs	r3, #0
   2560e:	4666      	mov	r6, ip
   25610:	47b0      	blx	r6
		if (ret < 0) {
   25612:	2800      	cmp	r0, #0
   25614:	da05      	bge.n	25622 <mqtt_client_tls_write+0x7e>
			return -errno;
   25616:	f017 fa19 	bl	3ca4c <__errno>
   2561a:	6800      	ldr	r0, [r0, #0]
   2561c:	4240      	negs	r0, r0
}
   2561e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   25622:	4404      	add	r4, r0
   25624:	e7c5      	b.n	255b2 <mqtt_client_tls_write+0xe>
   25626:	bf00      	nop
   25628:	000418a8 	.word	0x000418a8
   2562c:	20023a4c 	.word	0x20023a4c
   25630:	000418d1 	.word	0x000418d1
   25634:	00041757 	.word	0x00041757
   25638:	000431ce 	.word	0x000431ce

0002563c <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   2563c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   25640:	4c18      	ldr	r4, [pc, #96]	; (256a4 <mqtt_client_tls_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   25642:	2b00      	cmp	r3, #0
   25644:	6823      	ldr	r3, [r4, #0]
{
   25646:	460e      	mov	r6, r1
   25648:	4617      	mov	r7, r2
		flags |= MSG_DONTWAIT;
   2564a:	bf14      	ite	ne
   2564c:	f04f 0800 	movne.w	r8, #0
   25650:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tls.sock, data, buflen, flags);
   25654:	6a85      	ldr	r5, [r0, #40]	; 0x28
   25656:	b94b      	cbnz	r3, 2566c <mqtt_client_tls_read+0x30>
   25658:	4913      	ldr	r1, [pc, #76]	; (256a8 <mqtt_client_tls_read+0x6c>)
   2565a:	4814      	ldr	r0, [pc, #80]	; (256ac <mqtt_client_tls_read+0x70>)
   2565c:	2369      	movs	r3, #105	; 0x69
   2565e:	4a14      	ldr	r2, [pc, #80]	; (256b0 <mqtt_client_tls_read+0x74>)
   25660:	f016 ffb8 	bl	3c5d4 <printk>
   25664:	2169      	movs	r1, #105	; 0x69
   25666:	4812      	ldr	r0, [pc, #72]	; (256b0 <mqtt_client_tls_read+0x74>)
   25668:	f016 fffa 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   2566c:	6823      	ldr	r3, [r4, #0]
   2566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25670:	b94b      	cbnz	r3, 25686 <mqtt_client_tls_read+0x4a>
   25672:	4910      	ldr	r1, [pc, #64]	; (256b4 <mqtt_client_tls_read+0x78>)
   25674:	480d      	ldr	r0, [pc, #52]	; (256ac <mqtt_client_tls_read+0x70>)
   25676:	236a      	movs	r3, #106	; 0x6a
   25678:	4a0d      	ldr	r2, [pc, #52]	; (256b0 <mqtt_client_tls_read+0x74>)
   2567a:	f016 ffab 	bl	3c5d4 <printk>
   2567e:	216a      	movs	r1, #106	; 0x6a
   25680:	480b      	ldr	r0, [pc, #44]	; (256b0 <mqtt_client_tls_read+0x74>)
   25682:	f016 ffed 	bl	3c660 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   25686:	6823      	ldr	r3, [r4, #0]
   25688:	463a      	mov	r2, r7
   2568a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   2568c:	4631      	mov	r1, r6
   2568e:	4643      	mov	r3, r8
   25690:	4628      	mov	r0, r5
   25692:	47a0      	blx	r4
	if (ret < 0) {
   25694:	2800      	cmp	r0, #0
   25696:	da03      	bge.n	256a0 <mqtt_client_tls_read+0x64>
		return -errno;
   25698:	f017 f9d8 	bl	3ca4c <__errno>
   2569c:	6800      	ldr	r0, [r0, #0]
   2569e:	4240      	negs	r0, r0
	}

	return ret;
}
   256a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   256a4:	20023a4c 	.word	0x20023a4c
   256a8:	000418d1 	.word	0x000418d1
   256ac:	00041757 	.word	0x00041757
   256b0:	000418a8 	.word	0x000418a8
   256b4:	000431bd 	.word	0x000431bd

000256b8 <z_impl_entropy_get_entropy>:
				  u16_t length);

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
   256b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct entropy_driver_api *api =
   256bc:	6845      	ldr	r5, [r0, #4]
{
   256be:	4604      	mov	r4, r0
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
   256c0:	682b      	ldr	r3, [r5, #0]
{
   256c2:	460e      	mov	r6, r1
   256c4:	4617      	mov	r7, r2
	__ASSERT(api->get_entropy != NULL,
   256c6:	b963      	cbnz	r3, 256e2 <z_impl_entropy_get_entropy+0x2a>
   256c8:	4909      	ldr	r1, [pc, #36]	; (256f0 <z_impl_entropy_get_entropy+0x38>)
   256ca:	234c      	movs	r3, #76	; 0x4c
   256cc:	4a09      	ldr	r2, [pc, #36]	; (256f4 <z_impl_entropy_get_entropy+0x3c>)
   256ce:	480a      	ldr	r0, [pc, #40]	; (256f8 <z_impl_entropy_get_entropy+0x40>)
   256d0:	f016 ff80 	bl	3c5d4 <printk>
   256d4:	4809      	ldr	r0, [pc, #36]	; (256fc <z_impl_entropy_get_entropy+0x44>)
   256d6:	f016 ff7d 	bl	3c5d4 <printk>
   256da:	214c      	movs	r1, #76	; 0x4c
   256dc:	4805      	ldr	r0, [pc, #20]	; (256f4 <z_impl_entropy_get_entropy+0x3c>)
   256de:	f016 ffbf 	bl	3c660 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   256e2:	682b      	ldr	r3, [r5, #0]
   256e4:	463a      	mov	r2, r7
   256e6:	4631      	mov	r1, r6
   256e8:	4620      	mov	r0, r4
}
   256ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->get_entropy(dev, buffer, length);
   256ee:	4718      	bx	r3
   256f0:	0004333a 	.word	0x0004333a
   256f4:	00043314 	.word	0x00043314
   256f8:	00041757 	.word	0x00041757
   256fc:	0004335a 	.word	0x0004335a

00025700 <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
   25700:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *dev = entropy_driver;
   25702:	4d12      	ldr	r5, [pc, #72]	; (2574c <sys_rand32_get+0x4c>)
   25704:	682c      	ldr	r4, [r5, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   25706:	b99c      	cbnz	r4, 25730 <sys_rand32_get+0x30>
   25708:	4811      	ldr	r0, [pc, #68]	; (25750 <sys_rand32_get+0x50>)
   2570a:	f010 fff5 	bl	366f8 <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
   2570e:	4604      	mov	r4, r0
   25710:	b968      	cbnz	r0, 2572e <sys_rand32_get+0x2e>
   25712:	231d      	movs	r3, #29
   25714:	4a0f      	ldr	r2, [pc, #60]	; (25754 <sys_rand32_get+0x54>)
   25716:	4910      	ldr	r1, [pc, #64]	; (25758 <sys_rand32_get+0x58>)
   25718:	4810      	ldr	r0, [pc, #64]	; (2575c <sys_rand32_get+0x5c>)
   2571a:	f016 ff5b 	bl	3c5d4 <printk>
   2571e:	490c      	ldr	r1, [pc, #48]	; (25750 <sys_rand32_get+0x50>)
   25720:	480f      	ldr	r0, [pc, #60]	; (25760 <sys_rand32_get+0x60>)
   25722:	f016 ff57 	bl	3c5d4 <printk>
   25726:	211d      	movs	r1, #29
   25728:	480a      	ldr	r0, [pc, #40]	; (25754 <sys_rand32_get+0x54>)
   2572a:	f016 ff99 	bl	3c660 <assert_post_action>
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
   2572e:	602c      	str	r4, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_ENTROPY_GET_ENTROPY);
	}
#endif
	compiler_barrier();
	return z_impl_entropy_get_entropy(dev, buffer, length);
   25730:	2204      	movs	r2, #4
   25732:	4620      	mov	r0, r4
   25734:	eb0d 0102 	add.w	r1, sp, r2
   25738:	f7ff ffbe 	bl	256b8 <z_impl_entropy_get_entropy>
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   2573c:	2800      	cmp	r0, #0
   2573e:	da02      	bge.n	25746 <sys_rand32_get+0x46>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   25740:	f7fe fa88 	bl	23c54 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   25744:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   25746:	9801      	ldr	r0, [sp, #4]
   25748:	b003      	add	sp, #12
   2574a:	bd30      	pop	{r4, r5, pc}
   2574c:	20023a8c 	.word	0x20023a8c
   25750:	0004326b 	.word	0x0004326b
   25754:	00043275 	.word	0x00043275
   25758:	000432a7 	.word	0x000432a7
   2575c:	00041757 	.word	0x00041757
   25760:	000432bc 	.word	0x000432bc

00025764 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   25764:	b570      	push	{r4, r5, r6, lr}
   25766:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25768:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   2576a:	460d      	mov	r5, r1
   2576c:	b961      	cbnz	r1, 25788 <gpio_nrfx_manage_callback+0x24>
   2576e:	4922      	ldr	r1, [pc, #136]	; (257f8 <gpio_nrfx_manage_callback+0x94>)
   25770:	231c      	movs	r3, #28
   25772:	4a22      	ldr	r2, [pc, #136]	; (257fc <gpio_nrfx_manage_callback+0x98>)
   25774:	4822      	ldr	r0, [pc, #136]	; (25800 <gpio_nrfx_manage_callback+0x9c>)
   25776:	f016 ff2d 	bl	3c5d4 <printk>
   2577a:	4822      	ldr	r0, [pc, #136]	; (25804 <gpio_nrfx_manage_callback+0xa0>)
   2577c:	f016 ff2a 	bl	3c5d4 <printk>
   25780:	211c      	movs	r1, #28
   25782:	481e      	ldr	r0, [pc, #120]	; (257fc <gpio_nrfx_manage_callback+0x98>)
   25784:	f016 ff6c 	bl	3c660 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   25788:	686b      	ldr	r3, [r5, #4]
   2578a:	b963      	cbnz	r3, 257a6 <gpio_nrfx_manage_callback+0x42>
   2578c:	491e      	ldr	r1, [pc, #120]	; (25808 <gpio_nrfx_manage_callback+0xa4>)
   2578e:	231d      	movs	r3, #29
   25790:	4a1a      	ldr	r2, [pc, #104]	; (257fc <gpio_nrfx_manage_callback+0x98>)
   25792:	481b      	ldr	r0, [pc, #108]	; (25800 <gpio_nrfx_manage_callback+0x9c>)
   25794:	f016 ff1e 	bl	3c5d4 <printk>
   25798:	481c      	ldr	r0, [pc, #112]	; (2580c <gpio_nrfx_manage_callback+0xa8>)
   2579a:	f016 ff1b 	bl	3c5d4 <printk>
   2579e:	211d      	movs	r1, #29
   257a0:	4816      	ldr	r0, [pc, #88]	; (257fc <gpio_nrfx_manage_callback+0x98>)
   257a2:	f016 ff5d 	bl	3c660 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   257a6:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
   257a8:	b15b      	cbz	r3, 257c2 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   257aa:	2200      	movs	r2, #0
   257ac:	429d      	cmp	r5, r3
   257ae:	d113      	bne.n	257d8 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   257b0:	682b      	ldr	r3, [r5, #0]
   257b2:	b95a      	cbnz	r2, 257cc <gpio_nrfx_manage_callback+0x68>
   257b4:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   257b6:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   257b8:	4295      	cmp	r5, r2
   257ba:	d100      	bne.n	257be <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   257bc:	6063      	str	r3, [r4, #4]
	parent->next = child;
   257be:	2300      	movs	r3, #0
   257c0:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   257c2:	b976      	cbnz	r6, 257e2 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   257c4:	2000      	movs	r0, #0
				     callback, set);
}
   257c6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   257c8:	460b      	mov	r3, r1
   257ca:	e7ef      	b.n	257ac <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   257cc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   257ce:	6863      	ldr	r3, [r4, #4]
   257d0:	429d      	cmp	r5, r3
	list->tail = node;
   257d2:	bf08      	it	eq
   257d4:	6062      	streq	r2, [r4, #4]
   257d6:	e7f2      	b.n	257be <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   257d8:	6819      	ldr	r1, [r3, #0]
	return node->next;
   257da:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   257dc:	2900      	cmp	r1, #0
   257de:	d1f3      	bne.n	257c8 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   257e0:	b13e      	cbz	r6, 257f2 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   257e2:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   257e4:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   257e6:	6860      	ldr	r0, [r4, #4]
	list->head = node;
   257e8:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   257ea:	2800      	cmp	r0, #0
   257ec:	d1ea      	bne.n	257c4 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   257ee:	6065      	str	r5, [r4, #4]
   257f0:	e7e9      	b.n	257c6 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   257f2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   257f6:	e7e6      	b.n	257c6 <gpio_nrfx_manage_callback+0x62>
   257f8:	000436aa 	.word	0x000436aa
   257fc:	00043399 	.word	0x00043399
   25800:	00041757 	.word	0x00041757
   25804:	000433bf 	.word	0x000433bf
   25808:	000433ce 	.word	0x000433ce
   2580c:	000433e0 	.word	0x000433e0

00025810 <nrf_gpio_pin_port_decode.isra.8.part.9>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   25810:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   25812:	4a03      	ldr	r2, [pc, #12]	; (25820 <nrf_gpio_pin_port_decode.isra.8.part.9+0x10>)
   25814:	4b03      	ldr	r3, [pc, #12]	; (25824 <nrf_gpio_pin_port_decode.isra.8.part.9+0x14>)
   25816:	f240 11ff 	movw	r1, #511	; 0x1ff
   2581a:	4803      	ldr	r0, [pc, #12]	; (25828 <nrf_gpio_pin_port_decode.isra.8.part.9+0x18>)
   2581c:	f014 fac6 	bl	39dac <__assert_func>
   25820:	00043380 	.word	0x00043380
   25824:	00043428 	.word	0x00043428
   25828:	00043436 	.word	0x00043436

0002582c <nrf_gpio_cfg_sense_set>:
   2582c:	281f      	cmp	r0, #31
}


NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
   2582e:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   25830:	d901      	bls.n	25836 <nrf_gpio_cfg_sense_set+0xa>
   25832:	f7ff ffed 	bl	25810 <nrf_gpio_pin_port_decode.isra.8.part.9>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   25836:	4a06      	ldr	r2, [pc, #24]	; (25850 <nrf_gpio_cfg_sense_set+0x24>)
   25838:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   2583c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   25840:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   25844:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   25848:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   2584c:	bd08      	pop	{r3, pc}
   2584e:	bf00      	nop
   25850:	40842500 	.word	0x40842500

00025854 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   25854:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   25856:	4b09      	ldr	r3, [pc, #36]	; (2587c <gpio_nrfx_init+0x28>)
   25858:	781a      	ldrb	r2, [r3, #0]
   2585a:	b96a      	cbnz	r2, 25878 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   2585c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   2585e:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   25860:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   25862:	2105      	movs	r1, #5
   25864:	f7fe fb2c 	bl	23ec0 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   25868:	2031      	movs	r0, #49	; 0x31
   2586a:	f7fe fb19 	bl	23ea0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   2586e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   25872:	4b03      	ldr	r3, [pc, #12]	; (25880 <gpio_nrfx_init+0x2c>)
   25874:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   25878:	2000      	movs	r0, #0
   2587a:	bd08      	pop	{r3, pc}
   2587c:	20029f32 	.word	0x20029f32
   25880:	40031000 	.word	0x40031000

00025884 <gpiote_pin_int_cfg>:
{
   25884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   25888:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2588a:	f001 041f 	and.w	r4, r1, #31
   2588e:	689b      	ldr	r3, [r3, #8]
{
   25890:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   25892:	791b      	ldrb	r3, [r3, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   25894:	4e4b      	ldr	r6, [pc, #300]	; (259c4 <gpiote_pin_int_cfg+0x140>)
   25896:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2589a:	2300      	movs	r3, #0
   2589c:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
   258a0:	6887      	ldr	r7, [r0, #8]
   258a2:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   258a4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   258a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   258ac:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   258b0:	428c      	cmp	r4, r1
   258b2:	d16c      	bne.n	2598e <gpiote_pin_int_cfg+0x10a>
		    && (intenset & BIT(i))) {
   258b4:	fa22 f103 	lsr.w	r1, r2, r3
   258b8:	07c9      	lsls	r1, r1, #31
   258ba:	d568      	bpl.n	2598e <gpiote_pin_int_cfg+0x10a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   258bc:	009a      	lsls	r2, r3, #2
   258be:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   258c2:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   258c6:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   258ca:	f021 0101 	bic.w	r1, r1, #1
   258ce:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   258d2:	2201      	movs	r2, #1
   258d4:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
   258d8:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   258dc:	4620      	mov	r0, r4
   258de:	2100      	movs	r1, #0
   258e0:	f7ff ffa4 	bl	2582c <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   258e4:	68b8      	ldr	r0, [r7, #8]
   258e6:	40e8      	lsrs	r0, r5
   258e8:	f010 0001 	ands.w	r0, r0, #1
   258ec:	d04d      	beq.n	2598a <gpiote_pin_int_cfg+0x106>
   258ee:	68f8      	ldr	r0, [r7, #12]
   258f0:	40e8      	lsrs	r0, r5
   258f2:	f010 0001 	ands.w	r0, r0, #1
   258f6:	d048      	beq.n	2598a <gpiote_pin_int_cfg+0x106>
		if (data->trig_edge & BIT(pin)) {
   258f8:	6978      	ldr	r0, [r7, #20]
   258fa:	40e8      	lsrs	r0, r5
   258fc:	f010 0801 	ands.w	r8, r0, #1
   25900:	d051      	beq.n	259a6 <gpiote_pin_int_cfg+0x122>
			if (data->double_edge & BIT(pin)) {
   25902:	69bb      	ldr	r3, [r7, #24]
   25904:	40eb      	lsrs	r3, r5
   25906:	07db      	lsls	r3, r3, #31
   25908:	d445      	bmi.n	25996 <gpiote_pin_int_cfg+0x112>
			} else if (((data->active_level & BIT(pin)) != 0U)
   2590a:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   2590c:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   2590e:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   25910:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   25914:	f003 0301 	and.w	r3, r3, #1
   25918:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   2591c:	42ab      	cmp	r3, r5
   2591e:	bf14      	ite	ne
   25920:	2501      	movne	r5, #1
   25922:	2502      	moveq	r5, #2
   25924:	2100      	movs	r1, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   25926:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   2592a:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   2592e:	f010 0003 	ands.w	r0, r0, #3
   25932:	d132      	bne.n	2599a <gpiote_pin_int_cfg+0x116>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   25934:	008b      	lsls	r3, r1, #2
   25936:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2593a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   2593e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   25942:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   25944:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   25948:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   2594c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   25950:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   25954:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   25958:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   2595c:	4315      	orrs	r5, r2
			nrf_gpiote_event_t evt =
   2595e:	f101 0240 	add.w	r2, r1, #64	; 0x40
   25962:	0092      	lsls	r2, r2, #2
    return ((uint32_t)p_reg + event);
   25964:	b292      	uxth	r2, r2
   25966:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2596a:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2596e:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   25972:	6010      	str	r0, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   25974:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   25978:	f042 0201 	orr.w	r2, r2, #1
   2597c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   25980:	2301      	movs	r3, #1
   25982:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->INTENSET = mask;
   25986:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
   2598a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2598e:	3301      	adds	r3, #1
   25990:	2b08      	cmp	r3, #8
   25992:	d187      	bne.n	258a4 <gpiote_pin_int_cfg+0x20>
   25994:	e7a2      	b.n	258dc <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   25996:	2503      	movs	r5, #3
   25998:	e7c4      	b.n	25924 <gpiote_pin_int_cfg+0xa0>
   2599a:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   2599c:	2908      	cmp	r1, #8
   2599e:	d1c2      	bne.n	25926 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   259a0:	f06f 0012 	mvn.w	r0, #18
   259a4:	e7f1      	b.n	2598a <gpiote_pin_int_cfg+0x106>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   259a6:	693b      	ldr	r3, [r7, #16]
   259a8:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   259aa:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   259ac:	4053      	eors	r3, r2
   259ae:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   259b2:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   259b6:	bf0c      	ite	eq
   259b8:	2103      	moveq	r1, #3
   259ba:	2102      	movne	r1, #2
   259bc:	f7ff ff36 	bl	2582c <nrf_gpio_cfg_sense_set>
	int res = 0;
   259c0:	4640      	mov	r0, r8
   259c2:	e7e2      	b.n	2598a <gpiote_pin_int_cfg+0x106>
   259c4:	40031000 	.word	0x40031000

000259c8 <gpio_nrfx_config>:
{
   259c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   259cc:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   259ce:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   259d0:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   259d4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   259d8:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   259da:	d040      	beq.n	25a5e <gpio_nrfx_config+0x96>
   259dc:	dc09      	bgt.n	259f2 <gpio_nrfx_config+0x2a>
   259de:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   259e2:	d03e      	beq.n	25a62 <gpio_nrfx_config+0x9a>
   259e4:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   259e8:	d03d      	beq.n	25a66 <gpio_nrfx_config+0x9e>
   259ea:	b190      	cbz	r0, 25a12 <gpio_nrfx_config+0x4a>
		return -EINVAL;
   259ec:	f06f 0015 	mvn.w	r0, #21
   259f0:	e032      	b.n	25a58 <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   259f2:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   259f6:	d038      	beq.n	25a6a <gpio_nrfx_config+0xa2>
   259f8:	dc04      	bgt.n	25a04 <gpio_nrfx_config+0x3c>
   259fa:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   259fe:	d1f5      	bne.n	259ec <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   25a00:	2003      	movs	r0, #3
   25a02:	e006      	b.n	25a12 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   25a04:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   25a08:	d031      	beq.n	25a6e <gpio_nrfx_config+0xa6>
   25a0a:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   25a0e:	d1ed      	bne.n	259ec <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   25a10:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   25a12:	f406 7740 	and.w	r7, r6, #768	; 0x300
   25a16:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   25a1a:	d02a      	beq.n	25a72 <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
   25a1c:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   25a20:	4263      	negs	r3, r4
   25a22:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   25a24:	2901      	cmp	r1, #1
		from_pin = pin;
   25a26:	bf19      	ittee	ne
   25a28:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   25a2a:	46a1      	movne	r9, r4
		to_pin   = 31U;
   25a2c:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   25a30:	2400      	moveq	r4, #0
   25a32:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   25a36:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   25a3a:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   25a3e:	ea47 070c 	orr.w	r7, r7, ip
   25a42:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   25a46:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 25af0 <gpio_nrfx_config+0x128>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   25a4a:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   25a4e:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   25a52:	45a1      	cmp	r9, r4
   25a54:	d20f      	bcs.n	25a76 <gpio_nrfx_config+0xae>
	return 0;
   25a56:	2000      	movs	r0, #0
}
   25a58:	b003      	add	sp, #12
   25a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   25a5e:	2002      	movs	r0, #2
   25a60:	e7d7      	b.n	25a12 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   25a62:	2001      	movs	r0, #1
   25a64:	e7d5      	b.n	25a12 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   25a66:	2004      	movs	r0, #4
   25a68:	e7d3      	b.n	25a12 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   25a6a:	2005      	movs	r0, #5
   25a6c:	e7d1      	b.n	25a12 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   25a6e:	2006      	movs	r0, #6
   25a70:	e7cf      	b.n	25a12 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   25a72:	2303      	movs	r3, #3
   25a74:	e7d6      	b.n	25a24 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   25a76:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   25a7a:	6892      	ldr	r2, [r2, #8]
   25a7c:	7911      	ldrb	r1, [r2, #4]
   25a7e:	f004 021f 	and.w	r2, r4, #31
   25a82:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   25a86:	2a1f      	cmp	r2, #31
   25a88:	dd01      	ble.n	25a8e <gpio_nrfx_config+0xc6>
   25a8a:	f7ff fec1 	bl	25810 <nrf_gpio_pin_port_decode.isra.8.part.9>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   25a8e:	3280      	adds	r2, #128	; 0x80
   25a90:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   25a94:	68a9      	ldr	r1, [r5, #8]
   25a96:	fa0b f204 	lsl.w	r2, fp, r4
   25a9a:	2b00      	cmp	r3, #0
   25a9c:	d025      	beq.n	25aea <gpio_nrfx_config+0x122>
   25a9e:	4311      	orrs	r1, r2
   25aa0:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   25aa2:	6969      	ldr	r1, [r5, #20]
   25aa4:	06b0      	lsls	r0, r6, #26
   25aa6:	bf4c      	ite	mi
   25aa8:	4311      	orrmi	r1, r2
   25aaa:	4391      	bicpl	r1, r2
   25aac:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   25aae:	69a9      	ldr	r1, [r5, #24]
   25ab0:	0670      	lsls	r0, r6, #25
   25ab2:	bf4c      	ite	mi
   25ab4:	4311      	orrmi	r1, r2
   25ab6:	4391      	bicpl	r1, r2
   25ab8:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   25aba:	6929      	ldr	r1, [r5, #16]
   25abc:	0770      	lsls	r0, r6, #29
   25abe:	bf4c      	ite	mi
   25ac0:	4311      	orrmi	r1, r2
   25ac2:	4391      	bicpl	r1, r2
   25ac4:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   25ac6:	69e9      	ldr	r1, [r5, #28]
   25ac8:	0630      	lsls	r0, r6, #24
   25aca:	bf4c      	ite	mi
   25acc:	430a      	orrmi	r2, r1
   25ace:	ea21 0202 	bicpl.w	r2, r1, r2
   25ad2:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   25ad4:	4621      	mov	r1, r4
   25ad6:	4640      	mov	r0, r8
   25ad8:	9301      	str	r3, [sp, #4]
   25ada:	f7ff fed3 	bl	25884 <gpiote_pin_int_cfg>
		if (res != 0) {
   25ade:	2800      	cmp	r0, #0
   25ae0:	d1ba      	bne.n	25a58 <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   25ae2:	3401      	adds	r4, #1
   25ae4:	b2e4      	uxtb	r4, r4
   25ae6:	9b01      	ldr	r3, [sp, #4]
   25ae8:	e7b3      	b.n	25a52 <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   25aea:	ea21 0102 	bic.w	r1, r1, r2
   25aee:	e7d7      	b.n	25aa0 <gpio_nrfx_config+0xd8>
   25af0:	40842500 	.word	0x40842500

00025af4 <gpiote_event_handler>:
{
   25af4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25af8:	4b56      	ldr	r3, [pc, #344]	; (25c54 <gpiote_event_handler+0x160>)
   25afa:	681e      	ldr	r6, [r3, #0]
	if (port_event) {
   25afc:	4698      	mov	r8, r3
   25afe:	2e00      	cmp	r6, #0
   25b00:	d05e      	beq.n	25bc0 <gpiote_event_handler+0xcc>
	u32_t bit = 1U << pin;
   25b02:	2701      	movs	r7, #1
	u32_t pin = 0U;
   25b04:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   25b08:	4a53      	ldr	r2, [pc, #332]	; (25c58 <gpiote_event_handler+0x164>)
   25b0a:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   25b0c:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   25b0e:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   25b10:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   25b14:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
   25b18:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   25b1a:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   25b1e:	430a      	orrs	r2, r1
   25b20:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   25b24:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   25b28:	691b      	ldr	r3, [r3, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   25b2a:	6912      	ldr	r2, [r2, #16]
   25b2c:	405c      	eors	r4, r3
   25b2e:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   25b30:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   25b34:	bb9d      	cbnz	r5, 25b9e <gpiote_event_handler+0xaa>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   25b36:	f8c8 5000 	str.w	r5, [r8]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   25b3a:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   25b3c:	2001      	movs	r0, #1
   25b3e:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   25b40:	4946      	ldr	r1, [pc, #280]	; (25c5c <gpiote_event_handler+0x168>)
   25b42:	4d47      	ldr	r5, [pc, #284]	; (25c60 <gpiote_event_handler+0x16c>)
   25b44:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   25b48:	fa00 fc03 	lsl.w	ip, r0, r3
   25b4c:	ea1c 0f02 	tst.w	ip, r2
   25b50:	d00d      	beq.n	25b6e <gpiote_event_handler+0x7a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25b52:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   25b56:	b152      	cbz	r2, 25b6e <gpiote_event_handler+0x7a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   25b58:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   25b5c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   25b60:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   25b64:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   25b68:	fa00 f202 	lsl.w	r2, r0, r2
   25b6c:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   25b6e:	3301      	adds	r3, #1
   25b70:	2b08      	cmp	r3, #8
   25b72:	d1e7      	bne.n	25b44 <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
   25b74:	bb34      	cbnz	r4, 25bc4 <gpiote_event_handler+0xd0>
	if (port_event) {
   25b76:	b186      	cbz	r6, 25b9a <gpiote_event_handler+0xa6>
	u32_t bit = 1U << pin;
   25b78:	2701      	movs	r7, #1
	u32_t pin = 0U;
   25b7a:	f04f 0800 	mov.w	r8, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   25b7e:	4b36      	ldr	r3, [pc, #216]	; (25c58 <gpiote_event_handler+0x164>)
   25b80:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   25b82:	681b      	ldr	r3, [r3, #0]
   25b84:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   25b86:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   25b8a:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   25b8c:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   25b90:	4313      	orrs	r3, r2
   25b92:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   25b96:	2c00      	cmp	r4, #0
   25b98:	d142      	bne.n	25c20 <gpiote_event_handler+0x12c>
}
   25b9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   25b9e:	423d      	tst	r5, r7
   25ba0:	d00a      	beq.n	25bb8 <gpiote_event_handler+0xc4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   25ba2:	f899 3004 	ldrb.w	r3, [r9, #4]
   25ba6:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   25baa:	2100      	movs	r1, #0
   25bac:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   25bb0:	f7ff fe3c 	bl	2582c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   25bb4:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
   25bb8:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   25bbc:	007f      	lsls	r7, r7, #1
   25bbe:	e7b9      	b.n	25b34 <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   25bc0:	4634      	mov	r4, r6
   25bc2:	e7ba      	b.n	25b3a <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
   25bc4:	4b24      	ldr	r3, [pc, #144]	; (25c58 <gpiote_event_handler+0x164>)
   25bc6:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   25bca:	f8d9 5000 	ldr.w	r5, [r9]
   25bce:	2d00      	cmp	r5, #0
   25bd0:	d0d1      	beq.n	25b76 <gpiote_event_handler+0x82>
			cb->handler(port, cb, pins);
   25bd2:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25bd4:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   25bd6:	f8df a094 	ldr.w	sl, [pc, #148]	; 25c6c <gpiote_event_handler+0x178>
   25bda:	f8df b094 	ldr.w	fp, [pc, #148]	; 25c70 <gpiote_event_handler+0x17c>
		if ((cb->pin_mask & pins) & data->int_en) {
   25bde:	f8d9 300c 	ldr.w	r3, [r9, #12]
   25be2:	68aa      	ldr	r2, [r5, #8]
   25be4:	4023      	ands	r3, r4
   25be6:	4213      	tst	r3, r2
   25be8:	d015      	beq.n	25c16 <gpiote_event_handler+0x122>
			__ASSERT(cb->handler, "No callback handler!");
   25bea:	686b      	ldr	r3, [r5, #4]
   25bec:	b973      	cbnz	r3, 25c0c <gpiote_event_handler+0x118>
   25bee:	4659      	mov	r1, fp
   25bf0:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   25bf4:	4652      	mov	r2, sl
   25bf6:	481b      	ldr	r0, [pc, #108]	; (25c64 <gpiote_event_handler+0x170>)
   25bf8:	f016 fcec 	bl	3c5d4 <printk>
   25bfc:	481a      	ldr	r0, [pc, #104]	; (25c68 <gpiote_event_handler+0x174>)
   25bfe:	f016 fce9 	bl	3c5d4 <printk>
   25c02:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   25c06:	4650      	mov	r0, sl
   25c08:	f016 fd2a 	bl	3c660 <assert_post_action>
			cb->handler(port, cb, pins);
   25c0c:	686b      	ldr	r3, [r5, #4]
   25c0e:	4622      	mov	r2, r4
   25c10:	4629      	mov	r1, r5
   25c12:	4640      	mov	r0, r8
   25c14:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   25c16:	2f00      	cmp	r7, #0
   25c18:	d0ad      	beq.n	25b76 <gpiote_event_handler+0x82>
   25c1a:	463d      	mov	r5, r7
   25c1c:	683f      	ldr	r7, [r7, #0]
   25c1e:	e7de      	b.n	25bde <gpiote_event_handler+0xea>
		if (level_pins & bit) {
   25c20:	4227      	tst	r7, r4
   25c22:	d013      	beq.n	25c4c <gpiote_event_handler+0x158>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   25c24:	692b      	ldr	r3, [r5, #16]
   25c26:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   25c28:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   25c2c:	4053      	eors	r3, r2
   25c2e:	fa23 f308 	lsr.w	r3, r3, r8
		return NRF_GPIO_PIN_SENSE_HIGH;
   25c32:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   25c36:	f008 001f 	and.w	r0, r8, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   25c3a:	bf0c      	ite	eq
   25c3c:	2103      	moveq	r1, #3
   25c3e:	2102      	movne	r1, #2
   25c40:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   25c44:	f7ff fdf2 	bl	2582c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   25c48:	ea24 0407 	bic.w	r4, r4, r7
		++pin;
   25c4c:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   25c50:	007f      	lsls	r7, r7, #1
   25c52:	e7a0      	b.n	25b96 <gpiote_event_handler+0xa2>
   25c54:	4003117c 	.word	0x4003117c
   25c58:	200317dc 	.word	0x200317dc
   25c5c:	40031000 	.word	0x40031000
   25c60:	40031100 	.word	0x40031100
   25c64:	00041757 	.word	0x00041757
   25c68:	000433e0 	.word	0x000433e0
   25c6c:	000433f7 	.word	0x000433f7
   25c70:	0004341c 	.word	0x0004341c

00025c74 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   25c74:	4b02      	ldr	r3, [pc, #8]	; (25c80 <flash_nrf_pages_layout+0xc>)
   25c76:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   25c78:	2301      	movs	r3, #1
   25c7a:	6013      	str	r3, [r2, #0]
}
   25c7c:	4770      	bx	lr
   25c7e:	bf00      	nop
   25c80:	20023ab0 	.word	0x20023ab0

00025c84 <flash_nrf_erase>:
{
   25c84:	b570      	push	{r4, r5, r6, lr}
   25c86:	460d      	mov	r5, r1
   25c88:	4614      	mov	r4, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   25c8a:	f018 fe62 	bl	3e952 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   25c8e:	4621      	mov	r1, r4
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   25c90:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   25c92:	4628      	mov	r0, r5
   25c94:	f017 fc86 	bl	3d5a4 <is_regular_addr_valid>
   25c98:	b1f0      	cbz	r0, 25cd8 <flash_nrf_erase+0x54>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   25c9a:	fbb5 f3f6 	udiv	r3, r5, r6
   25c9e:	fb06 5313 	mls	r3, r6, r3, r5
   25ca2:	b9cb      	cbnz	r3, 25cd8 <flash_nrf_erase+0x54>
   25ca4:	fbb4 f0f6 	udiv	r0, r4, r6
   25ca8:	fb06 4010 	mls	r0, r6, r0, r4
   25cac:	b9a0      	cbnz	r0, 25cd8 <flash_nrf_erase+0x54>
		if (!n_pages) {
   25cae:	42a6      	cmp	r6, r4
   25cb0:	d811      	bhi.n	25cd6 <flash_nrf_erase+0x52>
	return z_impl_k_sem_take(sem, timeout);
   25cb2:	f04f 31ff 	mov.w	r1, #4294967295
   25cb6:	480a      	ldr	r0, [pc, #40]	; (25ce0 <flash_nrf_erase+0x5c>)
   25cb8:	f012 fe6a 	bl	38990 <z_impl_k_sem_take>

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   25cbc:	f018 fe49 	bl	3e952 <nrfx_nvmc_flash_page_size_get>
   25cc0:	4606      	mov	r6, r0
		return FLASH_OP_DONE;
	}
#endif

	do {
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   25cc2:	4628      	mov	r0, r5
   25cc4:	f010 fcb0 	bl	36628 <nrfx_nvmc_page_erase>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
   25cc8:	1ba4      	subs	r4, r4, r6
   25cca:	4435      	add	r5, r6
   25ccc:	d1f9      	bne.n	25cc2 <flash_nrf_erase+0x3e>
	z_impl_k_sem_give(sem);
   25cce:	4804      	ldr	r0, [pc, #16]	; (25ce0 <flash_nrf_erase+0x5c>)
   25cd0:	f012 fe14 	bl	388fc <z_impl_k_sem_give>
	return ret;
   25cd4:	4620      	mov	r0, r4
}
   25cd6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   25cd8:	f06f 0015 	mvn.w	r0, #21
   25cdc:	e7fb      	b.n	25cd6 <flash_nrf_erase+0x52>
   25cde:	bf00      	nop
   25ce0:	20023ab8 	.word	0x20023ab8

00025ce4 <nrf_flash_init>:
{
   25ce4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   25ce6:	2201      	movs	r2, #1
   25ce8:	4806      	ldr	r0, [pc, #24]	; (25d04 <nrf_flash_init+0x20>)
   25cea:	4611      	mov	r1, r2
   25cec:	f018 fecb 	bl	3ea86 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   25cf0:	f018 fe32 	bl	3e958 <nrfx_nvmc_flash_page_count_get>
   25cf4:	4c04      	ldr	r4, [pc, #16]	; (25d08 <nrf_flash_init+0x24>)
   25cf6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   25cf8:	f018 fe2b 	bl	3e952 <nrfx_nvmc_flash_page_size_get>
   25cfc:	6060      	str	r0, [r4, #4]
}
   25cfe:	2000      	movs	r0, #0
   25d00:	bd10      	pop	{r4, pc}
   25d02:	bf00      	nop
   25d04:	20023ab8 	.word	0x20023ab8
   25d08:	20023ab0 	.word	0x20023ab0

00025d0c <flash_nrf_write>:
{
   25d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25d0e:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   25d10:	4619      	mov	r1, r3
   25d12:	4630      	mov	r0, r6
{
   25d14:	4617      	mov	r7, r2
   25d16:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   25d18:	f017 fc44 	bl	3d5a4 <is_regular_addr_valid>
   25d1c:	b1f8      	cbz	r0, 25d5e <flash_nrf_write+0x52>
	return (data & 0x3) ? false : true;
   25d1e:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(u32_t))) {
   25d22:	f015 0503 	ands.w	r5, r5, #3
   25d26:	d11a      	bne.n	25d5e <flash_nrf_write+0x52>
	if (!len) {
   25d28:	b1e4      	cbz	r4, 25d64 <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
   25d2a:	f04f 31ff 	mov.w	r1, #4294967295
   25d2e:	480e      	ldr	r0, [pc, #56]	; (25d68 <flash_nrf_write+0x5c>)
   25d30:	f012 fe2e 	bl	38990 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   25d34:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(u32_t)) {
   25d38:	42a5      	cmp	r5, r4
   25d3a:	eb06 0005 	add.w	r0, r6, r5
   25d3e:	d109      	bne.n	25d54 <flash_nrf_write+0x48>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   25d40:	4a0a      	ldr	r2, [pc, #40]	; (25d6c <flash_nrf_write+0x60>)
   25d42:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   25d46:	07db      	lsls	r3, r3, #31
   25d48:	d5fb      	bpl.n	25d42 <flash_nrf_write+0x36>
	z_impl_k_sem_give(sem);
   25d4a:	4807      	ldr	r0, [pc, #28]	; (25d68 <flash_nrf_write+0x5c>)
   25d4c:	f012 fdd6 	bl	388fc <z_impl_k_sem_give>
   25d50:	2000      	movs	r0, #0
}
   25d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   25d54:	5979      	ldr	r1, [r7, r5]
   25d56:	f010 fc93 	bl	36680 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   25d5a:	3504      	adds	r5, #4
   25d5c:	e7ec      	b.n	25d38 <flash_nrf_write+0x2c>
		return -EINVAL;
   25d5e:	f06f 0015 	mvn.w	r0, #21
   25d62:	e7f6      	b.n	25d52 <flash_nrf_write+0x46>
		return 0;
   25d64:	4620      	mov	r0, r4
   25d66:	e7f4      	b.n	25d52 <flash_nrf_write+0x46>
   25d68:	20023ab8 	.word	0x20023ab8
   25d6c:	40039000 	.word	0x40039000

00025d70 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   25d70:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   25d72:	794b      	ldrb	r3, [r1, #5]
   25d74:	2b01      	cmp	r3, #1
   25d76:	d029      	beq.n	25dcc <uarte_nrfx_configure+0x5c>
   25d78:	2b03      	cmp	r3, #3
   25d7a:	d124      	bne.n	25dc6 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   25d7c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   25d7e:	798b      	ldrb	r3, [r1, #6]
   25d80:	2b03      	cmp	r3, #3
   25d82:	d120      	bne.n	25dc6 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   25d84:	79cc      	ldrb	r4, [r1, #7]
   25d86:	b12c      	cbz	r4, 25d94 <uarte_nrfx_configure+0x24>
   25d88:	2c01      	cmp	r4, #1
   25d8a:	d11c      	bne.n	25dc6 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   25d8c:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   25d8e:	689b      	ldr	r3, [r3, #8]
   25d90:	791b      	ldrb	r3, [r3, #4]
   25d92:	b1c3      	cbz	r3, 25dc6 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   25d94:	790a      	ldrb	r2, [r1, #4]
   25d96:	b112      	cbz	r2, 25d9e <uarte_nrfx_configure+0x2e>
   25d98:	2a02      	cmp	r2, #2
   25d9a:	d114      	bne.n	25dc6 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   25d9c:	220e      	movs	r2, #14
	switch (baudrate) {
   25d9e:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   25da2:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   25da4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   25da6:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   25da8:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   25daa:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   25dac:	d062      	beq.n	25e74 <uarte_nrfx_configure+0x104>
   25dae:	d829      	bhi.n	25e04 <uarte_nrfx_configure+0x94>
   25db0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   25db4:	d061      	beq.n	25e7a <uarte_nrfx_configure+0x10a>
   25db6:	d814      	bhi.n	25de2 <uarte_nrfx_configure+0x72>
   25db8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   25dbc:	d05f      	beq.n	25e7e <uarte_nrfx_configure+0x10e>
   25dbe:	d807      	bhi.n	25dd0 <uarte_nrfx_configure+0x60>
   25dc0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   25dc4:	d05e      	beq.n	25e84 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
   25dc6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25dca:	e052      	b.n	25e72 <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   25dcc:	2600      	movs	r6, #0
   25dce:	e7d6      	b.n	25d7e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   25dd0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   25dd4:	d059      	beq.n	25e8a <uarte_nrfx_configure+0x11a>
   25dd6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   25dda:	d1f4      	bne.n	25dc6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   25ddc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   25de0:	e03c      	b.n	25e5c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   25de2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   25de6:	d053      	beq.n	25e90 <uarte_nrfx_configure+0x120>
   25de8:	d804      	bhi.n	25df4 <uarte_nrfx_configure+0x84>
   25dea:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   25dee:	d1ea      	bne.n	25dc6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   25df0:	4b32      	ldr	r3, [pc, #200]	; (25ebc <uarte_nrfx_configure+0x14c>)
   25df2:	e033      	b.n	25e5c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   25df4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   25df8:	d04c      	beq.n	25e94 <uarte_nrfx_configure+0x124>
   25dfa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   25dfe:	d1e2      	bne.n	25dc6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   25e00:	4b2f      	ldr	r3, [pc, #188]	; (25ec0 <uarte_nrfx_configure+0x150>)
   25e02:	e02b      	b.n	25e5c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   25e04:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   25e08:	d046      	beq.n	25e98 <uarte_nrfx_configure+0x128>
   25e0a:	d812      	bhi.n	25e32 <uarte_nrfx_configure+0xc2>
   25e0c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   25e10:	42bb      	cmp	r3, r7
   25e12:	d044      	beq.n	25e9e <uarte_nrfx_configure+0x12e>
   25e14:	d805      	bhi.n	25e22 <uarte_nrfx_configure+0xb2>
   25e16:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   25e1a:	d1d4      	bne.n	25dc6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   25e1c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   25e20:	e01c      	b.n	25e5c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   25e22:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   25e26:	d03d      	beq.n	25ea4 <uarte_nrfx_configure+0x134>
   25e28:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   25e2c:	d1cb      	bne.n	25dc6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   25e2e:	4b25      	ldr	r3, [pc, #148]	; (25ec4 <uarte_nrfx_configure+0x154>)
   25e30:	e014      	b.n	25e5c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   25e32:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   25e36:	d038      	beq.n	25eaa <uarte_nrfx_configure+0x13a>
   25e38:	d808      	bhi.n	25e4c <uarte_nrfx_configure+0xdc>
   25e3a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   25e3e:	d037      	beq.n	25eb0 <uarte_nrfx_configure+0x140>
   25e40:	4f21      	ldr	r7, [pc, #132]	; (25ec8 <uarte_nrfx_configure+0x158>)
   25e42:	42bb      	cmp	r3, r7
   25e44:	d1bf      	bne.n	25dc6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   25e46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   25e4a:	e007      	b.n	25e5c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   25e4c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   25e50:	d031      	beq.n	25eb6 <uarte_nrfx_configure+0x146>
   25e52:	4f1e      	ldr	r7, [pc, #120]	; (25ecc <uarte_nrfx_configure+0x15c>)
   25e54:	42bb      	cmp	r3, r7
   25e56:	d1b6      	bne.n	25dc6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   25e58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   25e5c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   25e60:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   25e62:	6883      	ldr	r3, [r0, #8]
   25e64:	4322      	orrs	r2, r4
   25e66:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   25e68:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   25e6c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   25e70:	2000      	movs	r0, #0
}
   25e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   25e74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   25e78:	e7f0      	b.n	25e5c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   25e7a:	4b15      	ldr	r3, [pc, #84]	; (25ed0 <uarte_nrfx_configure+0x160>)
   25e7c:	e7ee      	b.n	25e5c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
   25e7e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   25e82:	e7eb      	b.n	25e5c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   25e84:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   25e88:	e7e8      	b.n	25e5c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   25e8a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   25e8e:	e7e5      	b.n	25e5c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   25e90:	4b10      	ldr	r3, [pc, #64]	; (25ed4 <uarte_nrfx_configure+0x164>)
   25e92:	e7e3      	b.n	25e5c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   25e94:	4b10      	ldr	r3, [pc, #64]	; (25ed8 <uarte_nrfx_configure+0x168>)
   25e96:	e7e1      	b.n	25e5c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   25e98:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   25e9c:	e7de      	b.n	25e5c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   25e9e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   25ea2:	e7db      	b.n	25e5c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   25ea4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   25ea8:	e7d8      	b.n	25e5c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   25eaa:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   25eae:	e7d5      	b.n	25e5c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   25eb0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   25eb4:	e7d2      	b.n	25e5c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   25eb6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   25eba:	e7cf      	b.n	25e5c <uarte_nrfx_configure+0xec>
   25ebc:	00275000 	.word	0x00275000
   25ec0:	0075c000 	.word	0x0075c000
   25ec4:	013a9000 	.word	0x013a9000
   25ec8:	0003d090 	.word	0x0003d090
   25ecc:	000f4240 	.word	0x000f4240
   25ed0:	0013b000 	.word	0x0013b000
   25ed4:	003af000 	.word	0x003af000
   25ed8:	004ea000 	.word	0x004ea000

00025edc <uarte_0_init>:
	#endif
	#if !defined(DT_NORDIC_NRF_UARTE_UART_0_RX_PIN)
	#define DT_NORDIC_NRF_UARTE_UART_0_RX_PIN NRF_UARTE_PSEL_DISCONNECTED
	#endif

	UART_NRF_UARTE_DEVICE(0);
   25edc:	b570      	push	{r4, r5, r6, lr}
   25ede:	4606      	mov	r6, r0
   25ee0:	2200      	movs	r2, #0
   25ee2:	2101      	movs	r1, #1
   25ee4:	2008      	movs	r0, #8
   25ee6:	f7fd ffeb 	bl	23ec0 <z_arm_irq_priority_set>
   25eea:	2008      	movs	r0, #8
   25eec:	f7fd ffd8 	bl	23ea0 <arch_irq_enable>
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   25ef0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	return dev->config->config_info;
   25ef4:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   25ef6:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
   25ef8:	689b      	ldr	r3, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   25efa:	2103      	movs	r1, #3
   25efc:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   25efe:	4b1a      	ldr	r3, [pc, #104]	; (25f68 <uarte_0_init+0x8c>)
    p_reg->PSEL.TXD = pseltxd;
   25f00:	201d      	movs	r0, #29
   25f02:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   25f04:	2200      	movs	r2, #0
   25f06:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
   25f0a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
   25f0e:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   25f12:	201c      	movs	r0, #28
   25f14:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
   25f18:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   25f1c:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   25f1e:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
   25f22:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
   25f26:	231b      	movs	r3, #27
   25f28:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   25f2c:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   25f2e:	4629      	mov	r1, r5
   25f30:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   25f34:	4630      	mov	r0, r6
   25f36:	f7ff ff1b 	bl	25d70 <uarte_nrfx_configure>
	if (err) {
   25f3a:	b9a0      	cbnz	r0, 25f66 <uarte_0_init+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   25f3c:	2308      	movs	r3, #8
   25f3e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   25f42:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25f46:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   25f4a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   25f4e:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   25f50:	68aa      	ldr	r2, [r5, #8]
   25f52:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   25f56:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25f58:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   25f5a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   25f5e:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25f62:	60a3      	str	r3, [r4, #8]
   25f64:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
   25f66:	bd70      	pop	{r4, r5, r6, pc}
   25f68:	40842500 	.word	0x40842500

00025f6c <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
   25f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25f6e:	460d      	mov	r5, r1
   25f70:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   25f72:	b948      	cbnz	r0, 25f88 <entropy_cc310_rng_get_entropy+0x1c>
   25f74:	4910      	ldr	r1, [pc, #64]	; (25fb8 <entropy_cc310_rng_get_entropy+0x4c>)
   25f76:	4811      	ldr	r0, [pc, #68]	; (25fbc <entropy_cc310_rng_get_entropy+0x50>)
   25f78:	231e      	movs	r3, #30
   25f7a:	4a11      	ldr	r2, [pc, #68]	; (25fc0 <entropy_cc310_rng_get_entropy+0x54>)
   25f7c:	f016 fb2a 	bl	3c5d4 <printk>
   25f80:	211e      	movs	r1, #30
   25f82:	480f      	ldr	r0, [pc, #60]	; (25fc0 <entropy_cc310_rng_get_entropy+0x54>)
   25f84:	f016 fb6c 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   25f88:	b94d      	cbnz	r5, 25f9e <entropy_cc310_rng_get_entropy+0x32>
   25f8a:	490e      	ldr	r1, [pc, #56]	; (25fc4 <entropy_cc310_rng_get_entropy+0x58>)
   25f8c:	480b      	ldr	r0, [pc, #44]	; (25fbc <entropy_cc310_rng_get_entropy+0x50>)
   25f8e:	231f      	movs	r3, #31
   25f90:	4a0b      	ldr	r2, [pc, #44]	; (25fc0 <entropy_cc310_rng_get_entropy+0x54>)
   25f92:	f016 fb1f 	bl	3c5d4 <printk>
   25f96:	211f      	movs	r1, #31
   25f98:	4809      	ldr	r0, [pc, #36]	; (25fc0 <entropy_cc310_rng_get_entropy+0x54>)
   25f9a:	f016 fb61 	bl	3c660 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
   25f9e:	aa01      	add	r2, sp, #4
   25fa0:	4621      	mov	r1, r4
   25fa2:	4628      	mov	r0, r5
   25fa4:	f7f2 f824 	bl	17ff0 <spm_request_random_number>
	if (olen != length) {
   25fa8:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   25faa:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
   25fac:	bf18      	it	ne
   25fae:	f06f 0015 	mvnne.w	r0, #21
   25fb2:	b003      	add	sp, #12
   25fb4:	bd30      	pop	{r4, r5, pc}
   25fb6:	bf00      	nop
   25fb8:	000434c0 	.word	0x000434c0
   25fbc:	00041757 	.word	0x00041757
   25fc0:	00043488 	.word	0x00043488
   25fc4:	000434d3 	.word	0x000434d3

00025fc8 <parse_string>:
{
   25fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   25fcc:	680a      	ldr	r2, [r1, #0]
   25fce:	688b      	ldr	r3, [r1, #8]
{
   25fd0:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   25fd2:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   25fd4:	18d0      	adds	r0, r2, r3
   25fd6:	5cd3      	ldrb	r3, [r2, r3]
{
   25fd8:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   25fda:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   25fdc:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   25fde:	f040 80d6 	bne.w	2618e <parse_string+0x1c6>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   25fe2:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   25fe4:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   25fe6:	684c      	ldr	r4, [r1, #4]
   25fe8:	1ab9      	subs	r1, r7, r2
   25fea:	42a1      	cmp	r1, r4
   25fec:	f080 80cf 	bcs.w	2618e <parse_string+0x1c6>
   25ff0:	7839      	ldrb	r1, [r7, #0]
   25ff2:	2922      	cmp	r1, #34	; 0x22
   25ff4:	d10e      	bne.n	26014 <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   25ff6:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   25ffa:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   25ffc:	f8da 2010 	ldr.w	r2, [sl, #16]
   26000:	4418      	add	r0, r3
   26002:	4790      	blx	r2
        if (output == NULL)
   26004:	4683      	mov	fp, r0
   26006:	2800      	cmp	r0, #0
   26008:	f000 80c1 	beq.w	2618e <parse_string+0x1c6>
   2600c:	4604      	mov	r4, r0
                    *output_pointer++ = '\f';
   2600e:	f04f 090c 	mov.w	r9, #12
   26012:	e00f      	b.n	26034 <parse_string+0x6c>
            if (input_end[0] == '\\')
   26014:	295c      	cmp	r1, #92	; 0x5c
   26016:	d105      	bne.n	26024 <parse_string+0x5c>
   26018:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   2601a:	1ab9      	subs	r1, r7, r2
   2601c:	428c      	cmp	r4, r1
   2601e:	f240 80b6 	bls.w	2618e <parse_string+0x1c6>
                skipped_bytes++;
   26022:	3301      	adds	r3, #1
            input_end++;
   26024:	3701      	adds	r7, #1
   26026:	e7df      	b.n	25fe8 <parse_string+0x20>
        if (*input_pointer != '\\')
   26028:	782b      	ldrb	r3, [r5, #0]
   2602a:	2b5c      	cmp	r3, #92	; 0x5c
   2602c:	d012      	beq.n	26054 <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   2602e:	3501      	adds	r5, #1
   26030:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   26034:	42bd      	cmp	r5, r7
   26036:	d3f7      	bcc.n	26028 <parse_string+0x60>
    *output_pointer = '\0';
   26038:	2300      	movs	r3, #0
   2603a:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   2603c:	2310      	movs	r3, #16
    return true;
   2603e:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   26040:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   26044:	f8da 3000 	ldr.w	r3, [sl]
   26048:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
   2604a:	3701      	adds	r7, #1
   2604c:	f8ca 7008 	str.w	r7, [sl, #8]
}
   26050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   26054:	1b7a      	subs	r2, r7, r5
   26056:	2a00      	cmp	r2, #0
   26058:	dd08      	ble.n	2606c <parse_string+0xa4>
            switch (input_pointer[1])
   2605a:	786b      	ldrb	r3, [r5, #1]
   2605c:	2b66      	cmp	r3, #102	; 0x66
   2605e:	d063      	beq.n	26128 <parse_string+0x160>
   26060:	d816      	bhi.n	26090 <parse_string+0xc8>
   26062:	2b2f      	cmp	r3, #47	; 0x2f
   26064:	d011      	beq.n	2608a <parse_string+0xc2>
   26066:	d80b      	bhi.n	26080 <parse_string+0xb8>
   26068:	2b22      	cmp	r3, #34	; 0x22
   2606a:	d00e      	beq.n	2608a <parse_string+0xc2>
        input_buffer->hooks.deallocate(output);
   2606c:	f8da 3014 	ldr.w	r3, [sl, #20]
   26070:	4658      	mov	r0, fp
   26072:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   26074:	f8da 0000 	ldr.w	r0, [sl]
   26078:	1a28      	subs	r0, r5, r0
   2607a:	f8ca 0008 	str.w	r0, [sl, #8]
   2607e:	e089      	b.n	26194 <parse_string+0x1cc>
            switch (input_pointer[1])
   26080:	2b5c      	cmp	r3, #92	; 0x5c
   26082:	d002      	beq.n	2608a <parse_string+0xc2>
   26084:	2b62      	cmp	r3, #98	; 0x62
   26086:	d1f1      	bne.n	2606c <parse_string+0xa4>
                    *output_pointer++ = '\b';
   26088:	2308      	movs	r3, #8
                    *output_pointer++ = input_pointer[1];
   2608a:	f804 3b01 	strb.w	r3, [r4], #1
                    break;
   2608e:	e04d      	b.n	2612c <parse_string+0x164>
            switch (input_pointer[1])
   26090:	2b72      	cmp	r3, #114	; 0x72
   26092:	d04e      	beq.n	26132 <parse_string+0x16a>
   26094:	d803      	bhi.n	2609e <parse_string+0xd6>
   26096:	2b6e      	cmp	r3, #110	; 0x6e
   26098:	d1e8      	bne.n	2606c <parse_string+0xa4>
                    *output_pointer++ = '\n';
   2609a:	230a      	movs	r3, #10
   2609c:	e7f5      	b.n	2608a <parse_string+0xc2>
            switch (input_pointer[1])
   2609e:	2b74      	cmp	r3, #116	; 0x74
   260a0:	d04a      	beq.n	26138 <parse_string+0x170>
   260a2:	2b75      	cmp	r3, #117	; 0x75
   260a4:	d1e2      	bne.n	2606c <parse_string+0xa4>
    if ((input_end - first_sequence) < 6)
   260a6:	2a05      	cmp	r2, #5
   260a8:	dde0      	ble.n	2606c <parse_string+0xa4>
    first_code = parse_hex4(first_sequence + 2);
   260aa:	1ca8      	adds	r0, r5, #2
   260ac:	f017 fbe1 	bl	3d872 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   260b0:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   260b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   260b8:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   260ba:	d3d7      	bcc.n	2606c <parse_string+0xa4>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   260bc:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   260c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   260c4:	d23b      	bcs.n	2613e <parse_string+0x176>
        const unsigned char *second_sequence = first_sequence + 6;
   260c6:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   260c8:	1afb      	subs	r3, r7, r3
   260ca:	2b05      	cmp	r3, #5
   260cc:	ddce      	ble.n	2606c <parse_string+0xa4>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   260ce:	79ab      	ldrb	r3, [r5, #6]
   260d0:	2b5c      	cmp	r3, #92	; 0x5c
   260d2:	d1cb      	bne.n	2606c <parse_string+0xa4>
   260d4:	79eb      	ldrb	r3, [r5, #7]
   260d6:	2b75      	cmp	r3, #117	; 0x75
   260d8:	d1c8      	bne.n	2606c <parse_string+0xa4>
        second_code = parse_hex4(second_sequence + 2);
   260da:	f105 0008 	add.w	r0, r5, #8
   260de:	f017 fbc8 	bl	3d872 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   260e2:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   260e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   260ea:	d2bf      	bcs.n	2606c <parse_string+0xa4>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   260ec:	4b2a      	ldr	r3, [pc, #168]	; (26198 <parse_string+0x1d0>)
   260ee:	f3c0 0009 	ubfx	r0, r0, #0, #10
   260f2:	ea03 2686 	and.w	r6, r3, r6, lsl #10
        sequence_length = 12; /* \uXXXX\uXXXX */
   260f6:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   260f8:	4306      	orrs	r6, r0
   260fa:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   260fe:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   26102:	2104      	movs	r1, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   26104:	1e48      	subs	r0, r1, #1
   26106:	b240      	sxtb	r0, r0
   26108:	fa5f fe80 	uxtb.w	lr, r0
   2610c:	4420      	add	r0, r4
   2610e:	b2f2      	uxtb	r2, r6
   26110:	f1be 0f00 	cmp.w	lr, #0
   26114:	d12f      	bne.n	26176 <parse_string+0x1ae>
    if (utf8_length > 1)
   26116:	2901      	cmp	r1, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   26118:	bf14      	ite	ne
   2611a:	ea4c 0202 	orrne.w	r2, ip, r2
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   2611e:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   26122:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   26124:	440c      	add	r4, r1
                    if (sequence_length == 0)
   26126:	e002      	b.n	2612e <parse_string+0x166>
                    *output_pointer++ = '\f';
   26128:	f804 9b01 	strb.w	r9, [r4], #1
            unsigned char sequence_length = 2;
   2612c:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   2612e:	441d      	add	r5, r3
   26130:	e780      	b.n	26034 <parse_string+0x6c>
                    *output_pointer++ = '\r';
   26132:	f04f 030d 	mov.w	r3, #13
   26136:	e7a8      	b.n	2608a <parse_string+0xc2>
                    *output_pointer++ = '\t';
   26138:	f04f 0309 	mov.w	r3, #9
   2613c:	e7a5      	b.n	2608a <parse_string+0xc2>
    if (codepoint < 0x80)
   2613e:	287f      	cmp	r0, #127	; 0x7f
   26140:	d90a      	bls.n	26158 <parse_string+0x190>
    else if (codepoint < 0x800)
   26142:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   26146:	d30c      	bcc.n	26162 <parse_string+0x19a>
    else if (codepoint < 0x10000)
   26148:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   2614c:	d30e      	bcc.n	2616c <parse_string+0x1a4>
    else if (codepoint <= 0x10FFFF)
   2614e:	4b13      	ldr	r3, [pc, #76]	; (2619c <parse_string+0x1d4>)
   26150:	4298      	cmp	r0, r3
   26152:	d88b      	bhi.n	2606c <parse_string+0xa4>
        sequence_length = 6; /* \uXXXX */
   26154:	2306      	movs	r3, #6
   26156:	e7d2      	b.n	260fe <parse_string+0x136>
   26158:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   2615a:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   2615e:	2101      	movs	r1, #1
   26160:	e7d0      	b.n	26104 <parse_string+0x13c>
        sequence_length = 6; /* \uXXXX */
   26162:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   26164:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   26168:	2102      	movs	r1, #2
   2616a:	e7cb      	b.n	26104 <parse_string+0x13c>
        sequence_length = 6; /* \uXXXX */
   2616c:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   2616e:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   26172:	2103      	movs	r1, #3
   26174:	e7c6      	b.n	26104 <parse_string+0x13c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   26176:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2617a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   2617e:	f10e 3eff 	add.w	lr, lr, #4294967295
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   26182:	f800 2901 	strb.w	r2, [r0], #-1
        codepoint >>= 6;
   26186:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   26188:	fa5f fe8e 	uxtb.w	lr, lr
   2618c:	e7bf      	b.n	2610e <parse_string+0x146>
    if (input_pointer != NULL)
   2618e:	2d00      	cmp	r5, #0
   26190:	f47f af70 	bne.w	26074 <parse_string+0xac>
    return false;
   26194:	2000      	movs	r0, #0
   26196:	e75b      	b.n	26050 <parse_string+0x88>
   26198:	000ffc00 	.word	0x000ffc00
   2619c:	0010ffff 	.word	0x0010ffff

000261a0 <get_object_item>:
{
   261a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   261a2:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   261a4:	b360      	cbz	r0, 26200 <get_object_item+0x60>
   261a6:	b359      	cbz	r1, 26200 <get_object_item+0x60>
    current_element = object->child;
   261a8:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   261aa:	b9fa      	cbnz	r2, 261ec <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   261ac:	4e17      	ldr	r6, [pc, #92]	; (2620c <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   261ae:	b33c      	cbz	r4, 26200 <get_object_item+0x60>
   261b0:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   261b2:	b1c3      	cbz	r3, 261e6 <get_object_item+0x46>
    if (string1 == string2)
   261b4:	42ab      	cmp	r3, r5
   261b6:	d021      	beq.n	261fc <get_object_item+0x5c>
   261b8:	f105 3cff 	add.w	ip, r5, #4294967295
   261bc:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   261be:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   261c2:	460f      	mov	r7, r1
   261c4:	5d8a      	ldrb	r2, [r1, r6]
   261c6:	f002 0203 	and.w	r2, r2, #3
   261ca:	2a01      	cmp	r2, #1
   261cc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   261d0:	bf08      	it	eq
   261d2:	f101 0720 	addeq.w	r7, r1, #32
   261d6:	5cb0      	ldrb	r0, [r6, r2]
   261d8:	f000 0003 	and.w	r0, r0, #3
   261dc:	2801      	cmp	r0, #1
   261de:	bf08      	it	eq
   261e0:	3220      	addeq	r2, #32
   261e2:	4297      	cmp	r7, r2
   261e4:	d00f      	beq.n	26206 <get_object_item+0x66>
            current_element = current_element->next;
   261e6:	6824      	ldr	r4, [r4, #0]
   261e8:	e7e1      	b.n	261ae <get_object_item+0xe>
            current_element = current_element->next;
   261ea:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   261ec:	b144      	cbz	r4, 26200 <get_object_item+0x60>
   261ee:	6a21      	ldr	r1, [r4, #32]
   261f0:	b121      	cbz	r1, 261fc <get_object_item+0x5c>
   261f2:	4628      	mov	r0, r5
   261f4:	f7f6 ff8c 	bl	1d110 <strcmp>
   261f8:	2800      	cmp	r0, #0
   261fa:	d1f6      	bne.n	261ea <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   261fc:	6a23      	ldr	r3, [r4, #32]
   261fe:	b903      	cbnz	r3, 26202 <get_object_item+0x62>
        return NULL;
   26200:	2400      	movs	r4, #0
}
   26202:	4620      	mov	r0, r4
   26204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   26206:	2900      	cmp	r1, #0
   26208:	d1d9      	bne.n	261be <get_object_item+0x1e>
   2620a:	e7f7      	b.n	261fc <get_object_item+0x5c>
   2620c:	00046c56 	.word	0x00046c56

00026210 <print_string_ptr>:
{
   26210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26214:	4683      	mov	fp, r0
   26216:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   26218:	460f      	mov	r7, r1
   2621a:	b919      	cbnz	r1, 26224 <print_string_ptr+0x14>
        return false;
   2621c:	2000      	movs	r0, #0
}
   2621e:	b005      	add	sp, #20
   26220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   26224:	4b48      	ldr	r3, [pc, #288]	; (26348 <print_string_ptr+0x138>)
   26226:	881a      	ldrh	r2, [r3, #0]
   26228:	789b      	ldrb	r3, [r3, #2]
   2622a:	f8ad 200c 	strh.w	r2, [sp, #12]
   2622e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   26232:	b318      	cbz	r0, 2627c <print_string_ptr+0x6c>
   26234:	4602      	mov	r2, r0
    size_t escape_characters = 0;
   26236:	2500      	movs	r5, #0
   26238:	4692      	mov	sl, r2
    for (input_pointer = input; *input_pointer; input_pointer++)
   2623a:	f812 3b01 	ldrb.w	r3, [r2], #1
   2623e:	bb5b      	cbnz	r3, 26298 <print_string_ptr+0x88>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   26240:	ebaa 0a0b 	sub.w	sl, sl, fp
   26244:	44aa      	add	sl, r5
    output = ensure(output_buffer, output_length + sizeof(quotes));
   26246:	f10a 0103 	add.w	r1, sl, #3
   2624a:	4638      	mov	r0, r7
   2624c:	f017 fb70 	bl	3d930 <ensure>
    if (output == NULL)
   26250:	4606      	mov	r6, r0
   26252:	2800      	cmp	r0, #0
   26254:	d0e2      	beq.n	2621c <print_string_ptr+0xc>
    if (escape_characters == 0)
   26256:	2322      	movs	r3, #34	; 0x22
   26258:	1c44      	adds	r4, r0, #1
   2625a:	f10a 0901 	add.w	r9, sl, #1
   2625e:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   26262:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   26264:	bb55      	cbnz	r5, 262bc <print_string_ptr+0xac>
   26266:	4652      	mov	r2, sl
   26268:	4659      	mov	r1, fp
   2626a:	4620      	mov	r0, r4
   2626c:	f018 fd2d 	bl	3ecca <memcpy>
        output[output_length + 1] = '\"';
   26270:	2322      	movs	r3, #34	; 0x22
   26272:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   26276:	f806 5008 	strb.w	r5, [r6, r8]
        return true;
   2627a:	e00b      	b.n	26294 <print_string_ptr+0x84>
        output = ensure(output_buffer, sizeof(quotes));
   2627c:	2103      	movs	r1, #3
   2627e:	4638      	mov	r0, r7
   26280:	f017 fb56 	bl	3d930 <ensure>
        if (output == NULL)
   26284:	2800      	cmp	r0, #0
   26286:	d0c9      	beq.n	2621c <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   26288:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2628c:	a903      	add	r1, sp, #12
   2628e:	1ad2      	subs	r2, r2, r3
   26290:	f018 ff26 	bl	3f0e0 <strncpy>
    return true;
   26294:	2001      	movs	r0, #1
   26296:	e7c2      	b.n	2621e <print_string_ptr+0xe>
        switch (*input_pointer)
   26298:	2b0d      	cmp	r3, #13
   2629a:	d807      	bhi.n	262ac <print_string_ptr+0x9c>
   2629c:	2b0c      	cmp	r3, #12
   2629e:	d203      	bcs.n	262a8 <print_string_ptr+0x98>
   262a0:	f1a3 0108 	sub.w	r1, r3, #8
   262a4:	2902      	cmp	r1, #2
   262a6:	d805      	bhi.n	262b4 <print_string_ptr+0xa4>
                escape_characters++;
   262a8:	3501      	adds	r5, #1
                break;
   262aa:	e7c5      	b.n	26238 <print_string_ptr+0x28>
        switch (*input_pointer)
   262ac:	2b22      	cmp	r3, #34	; 0x22
   262ae:	d0fb      	beq.n	262a8 <print_string_ptr+0x98>
   262b0:	2b5c      	cmp	r3, #92	; 0x5c
   262b2:	d0f9      	beq.n	262a8 <print_string_ptr+0x98>
                if (*input_pointer < 32)
   262b4:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   262b6:	bf98      	it	ls
   262b8:	3505      	addls	r5, #5
   262ba:	e7bd      	b.n	26238 <print_string_ptr+0x28>
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   262bc:	f10b 33ff 	add.w	r3, fp, #4294967295
                    *output_pointer = 'f';
   262c0:	f04f 0a66 	mov.w	sl, #102	; 0x66
            *output_pointer++ = '\\';
   262c4:	f04f 0b5c 	mov.w	fp, #92	; 0x5c
   262c8:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   262ca:	9a01      	ldr	r2, [sp, #4]
   262cc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   262d0:	9201      	str	r2, [sp, #4]
   262d2:	b92b      	cbnz	r3, 262e0 <print_string_ptr+0xd0>
    output[output_length + 1] = '\"';
   262d4:	2222      	movs	r2, #34	; 0x22
   262d6:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   262da:	f806 3008 	strb.w	r3, [r6, r8]
   262de:	e7d9      	b.n	26294 <print_string_ptr+0x84>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   262e0:	2b1f      	cmp	r3, #31
   262e2:	d907      	bls.n	262f4 <print_string_ptr+0xe4>
   262e4:	2b22      	cmp	r3, #34	; 0x22
   262e6:	d005      	beq.n	262f4 <print_string_ptr+0xe4>
   262e8:	2b5c      	cmp	r3, #92	; 0x5c
   262ea:	d003      	beq.n	262f4 <print_string_ptr+0xe4>
            *output_pointer = *input_pointer;
   262ec:	4620      	mov	r0, r4
   262ee:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   262f0:	1c44      	adds	r4, r0, #1
   262f2:	e7ea      	b.n	262ca <print_string_ptr+0xba>
            *output_pointer++ = '\\';
   262f4:	4620      	mov	r0, r4
            switch (*input_pointer)
   262f6:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   262f8:	f800 bb01 	strb.w	fp, [r0], #1
            switch (*input_pointer)
   262fc:	781b      	ldrb	r3, [r3, #0]
   262fe:	2b0c      	cmp	r3, #12
   26300:	d011      	beq.n	26326 <print_string_ptr+0x116>
   26302:	d808      	bhi.n	26316 <print_string_ptr+0x106>
   26304:	2b09      	cmp	r3, #9
   26306:	d013      	beq.n	26330 <print_string_ptr+0x120>
   26308:	2b0a      	cmp	r3, #10
   2630a:	d00f      	beq.n	2632c <print_string_ptr+0x11c>
   2630c:	2b08      	cmp	r3, #8
   2630e:	d111      	bne.n	26334 <print_string_ptr+0x124>
                    *output_pointer = 'b';
   26310:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 't';
   26312:	7063      	strb	r3, [r4, #1]
                    break;
   26314:	e7ec      	b.n	262f0 <print_string_ptr+0xe0>
            switch (*input_pointer)
   26316:	2b22      	cmp	r3, #34	; 0x22
   26318:	d0fb      	beq.n	26312 <print_string_ptr+0x102>
   2631a:	2b5c      	cmp	r3, #92	; 0x5c
   2631c:	d0f9      	beq.n	26312 <print_string_ptr+0x102>
   2631e:	2b0d      	cmp	r3, #13
   26320:	d108      	bne.n	26334 <print_string_ptr+0x124>
                    *output_pointer = 'r';
   26322:	2372      	movs	r3, #114	; 0x72
   26324:	e7f5      	b.n	26312 <print_string_ptr+0x102>
                    *output_pointer = 'f';
   26326:	f884 a001 	strb.w	sl, [r4, #1]
                    break;
   2632a:	e7e1      	b.n	262f0 <print_string_ptr+0xe0>
                    *output_pointer = 'n';
   2632c:	236e      	movs	r3, #110	; 0x6e
   2632e:	e7f0      	b.n	26312 <print_string_ptr+0x102>
                    *output_pointer = 't';
   26330:	2374      	movs	r3, #116	; 0x74
   26332:	e7ee      	b.n	26312 <print_string_ptr+0x102>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   26334:	6839      	ldr	r1, [r7, #0]
   26336:	687d      	ldr	r5, [r7, #4]
   26338:	1a41      	subs	r1, r0, r1
   2633a:	4a04      	ldr	r2, [pc, #16]	; (2634c <print_string_ptr+0x13c>)
   2633c:	1a69      	subs	r1, r5, r1
   2633e:	f014 faf3 	bl	3a928 <sniprintf>
                    output_pointer += 4;
   26342:	1d60      	adds	r0, r4, #5
                    break;
   26344:	e7d4      	b.n	262f0 <print_string_ptr+0xe0>
   26346:	bf00      	nop
   26348:	000434f3 	.word	0x000434f3
   2634c:	000434ed 	.word	0x000434ed

00026350 <print_value>:
{
   26350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26354:	460c      	mov	r4, r1
   26356:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL))
   26358:	4606      	mov	r6, r0
   2635a:	b908      	cbnz	r0, 26360 <print_value+0x10>
        return false;
   2635c:	2500      	movs	r5, #0
   2635e:	e01d      	b.n	2639c <print_value+0x4c>
    if ((item == NULL) || (output_buffer == NULL))
   26360:	2900      	cmp	r1, #0
   26362:	d0fb      	beq.n	2635c <print_value+0xc>
    switch ((item->type) & 0xFF)
   26364:	7b05      	ldrb	r5, [r0, #12]
   26366:	2d08      	cmp	r5, #8
   26368:	d053      	beq.n	26412 <print_value+0xc2>
   2636a:	dc1b      	bgt.n	263a4 <print_value+0x54>
   2636c:	2d02      	cmp	r5, #2
   2636e:	d04e      	beq.n	2640e <print_value+0xbe>
   26370:	2d04      	cmp	r5, #4
   26372:	d037      	beq.n	263e4 <print_value+0x94>
   26374:	2d01      	cmp	r5, #1
   26376:	d1f1      	bne.n	2635c <print_value+0xc>
            const char buff[] = "false";
   26378:	4b87      	ldr	r3, [pc, #540]	; (26598 <print_value+0x248>)
            output = ensure(output_buffer, sizeof(buff));
   2637a:	2106      	movs	r1, #6
            const char buff[] = "false";
   2637c:	6818      	ldr	r0, [r3, #0]
   2637e:	889b      	ldrh	r3, [r3, #4]
   26380:	9005      	str	r0, [sp, #20]
            output = ensure(output_buffer, sizeof(buff));
   26382:	4620      	mov	r0, r4
            const char buff[] = "false";
   26384:	f8ad 3018 	strh.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   26388:	f017 fad2 	bl	3d930 <ensure>
            if (output == NULL)
   2638c:	2800      	cmp	r0, #0
   2638e:	d0e5      	beq.n	2635c <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   26390:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   26394:	a905      	add	r1, sp, #20
   26396:	1ad2      	subs	r2, r2, r3
   26398:	f018 fea2 	bl	3f0e0 <strncpy>
}
   2639c:	4628      	mov	r0, r5
   2639e:	b00d      	add	sp, #52	; 0x34
   263a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch ((item->type) & 0xFF)
   263a4:	2d20      	cmp	r5, #32
   263a6:	d07b      	beq.n	264a0 <print_value+0x150>
   263a8:	dc06      	bgt.n	263b8 <print_value+0x68>
   263aa:	2d10      	cmp	r5, #16
   263ac:	d1d6      	bne.n	2635c <print_value+0xc>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   263ae:	6900      	ldr	r0, [r0, #16]
   263b0:	f7ff ff2e 	bl	26210 <print_string_ptr>
   263b4:	4605      	mov	r5, r0
   263b6:	e7f1      	b.n	2639c <print_value+0x4c>
    switch ((item->type) & 0xFF)
   263b8:	2d40      	cmp	r5, #64	; 0x40
   263ba:	f000 80bc 	beq.w	26536 <print_value+0x1e6>
   263be:	2d80      	cmp	r5, #128	; 0x80
   263c0:	d1cc      	bne.n	2635c <print_value+0xc>
            if (item->valuestring == NULL)
   263c2:	6900      	ldr	r0, [r0, #16]
   263c4:	2800      	cmp	r0, #0
   263c6:	d0c9      	beq.n	2635c <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   263c8:	f7f6 feac 	bl	1d124 <strlen>
   263cc:	1c45      	adds	r5, r0, #1
            output = ensure(output_buffer, raw_length);
   263ce:	4629      	mov	r1, r5
   263d0:	4620      	mov	r0, r4
   263d2:	f017 faad 	bl	3d930 <ensure>
            if (output == NULL)
   263d6:	2800      	cmp	r0, #0
   263d8:	d0c0      	beq.n	2635c <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   263da:	462a      	mov	r2, r5
   263dc:	6931      	ldr	r1, [r6, #16]
   263de:	f018 fc74 	bl	3ecca <memcpy>
   263e2:	e012      	b.n	2640a <print_value+0xba>
            const char buff[] = "null";
   263e4:	4b6d      	ldr	r3, [pc, #436]	; (2659c <print_value+0x24c>)
            const char buff[] = "true";
   263e6:	6818      	ldr	r0, [r3, #0]
   263e8:	791b      	ldrb	r3, [r3, #4]
   263ea:	9005      	str	r0, [sp, #20]
            output = ensure(output_buffer, sizeof(buff));
   263ec:	2105      	movs	r1, #5
   263ee:	4620      	mov	r0, r4
            const char buff[] = "true";
   263f0:	f88d 3018 	strb.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   263f4:	f017 fa9c 	bl	3d930 <ensure>
            if (output == NULL)
   263f8:	4605      	mov	r5, r0
   263fa:	2800      	cmp	r0, #0
   263fc:	d0ce      	beq.n	2639c <print_value+0x4c>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   263fe:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   26402:	a905      	add	r1, sp, #20
   26404:	1ad2      	subs	r2, r2, r3
   26406:	f018 fe6b 	bl	3f0e0 <strncpy>
    return true;
   2640a:	2501      	movs	r5, #1
   2640c:	e7c6      	b.n	2639c <print_value+0x4c>
            const char buff[] = "true";
   2640e:	4b64      	ldr	r3, [pc, #400]	; (265a0 <print_value+0x250>)
   26410:	e7e9      	b.n	263e6 <print_value+0x96>
    double d = item->valuedouble;
   26412:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   26416:	2200      	movs	r2, #0
   26418:	2300      	movs	r3, #0
   2641a:	4640      	mov	r0, r8
   2641c:	4649      	mov	r1, r9
   2641e:	f7f6 f9cb 	bl	1c7b8 <__aeabi_dmul>
   26422:	2200      	movs	r2, #0
   26424:	2300      	movs	r3, #0
   26426:	f7f6 fc2f 	bl	1cc88 <__aeabi_dcmpeq>
   2642a:	ae05      	add	r6, sp, #20
   2642c:	b9b0      	cbnz	r0, 2645c <print_value+0x10c>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   2642e:	495b      	ldr	r1, [pc, #364]	; (2659c <print_value+0x24c>)
   26430:	4630      	mov	r0, r6
   26432:	f018 fe1f 	bl	3f074 <strcpy>
   26436:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   26438:	1c69      	adds	r1, r5, #1
   2643a:	4620      	mov	r0, r4
   2643c:	f017 fa78 	bl	3d930 <ensure>
    if (output_pointer == NULL)
   26440:	2800      	cmp	r0, #0
   26442:	d08b      	beq.n	2635c <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   26444:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   26446:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   26448:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   2644a:	3301      	adds	r3, #1
   2644c:	429d      	cmp	r5, r3
   2644e:	d1fa      	bne.n	26446 <print_value+0xf6>
    output_pointer[i] = '\0';
   26450:	2300      	movs	r3, #0
   26452:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   26454:	68a3      	ldr	r3, [r4, #8]
   26456:	441d      	add	r5, r3
   26458:	60a5      	str	r5, [r4, #8]
    return true;
   2645a:	e7d6      	b.n	2640a <print_value+0xba>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   2645c:	4a51      	ldr	r2, [pc, #324]	; (265a4 <print_value+0x254>)
   2645e:	211a      	movs	r1, #26
   26460:	e9cd 8900 	strd	r8, r9, [sp]
   26464:	4630      	mov	r0, r6
   26466:	f014 fa5f 	bl	3a928 <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   2646a:	aa02      	add	r2, sp, #8
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   2646c:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   2646e:	494e      	ldr	r1, [pc, #312]	; (265a8 <print_value+0x258>)
   26470:	4630      	mov	r0, r6
   26472:	f014 fa8d 	bl	3a990 <siscanf>
   26476:	2801      	cmp	r0, #1
   26478:	d106      	bne.n	26488 <print_value+0x138>
   2647a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2647e:	4640      	mov	r0, r8
   26480:	4649      	mov	r1, r9
   26482:	f7f6 fc01 	bl	1cc88 <__aeabi_dcmpeq>
   26486:	b938      	cbnz	r0, 26498 <print_value+0x148>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   26488:	e9cd 8900 	strd	r8, r9, [sp]
   2648c:	4a47      	ldr	r2, [pc, #284]	; (265ac <print_value+0x25c>)
   2648e:	211a      	movs	r1, #26
   26490:	4630      	mov	r0, r6
   26492:	f014 fa49 	bl	3a928 <sniprintf>
   26496:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   26498:	2d19      	cmp	r5, #25
   2649a:	f73f af5f 	bgt.w	2635c <print_value+0xc>
   2649e:	e7cb      	b.n	26438 <print_value+0xe8>
            return print_array(item, output_buffer);
   264a0:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   264a2:	2101      	movs	r1, #1
   264a4:	4620      	mov	r0, r4
   264a6:	f017 fa43 	bl	3d930 <ensure>
    if (output_pointer == NULL)
   264aa:	2800      	cmp	r0, #0
   264ac:	f43f af56 	beq.w	2635c <print_value+0xc>
    *output_pointer = '[';
   264b0:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   264b2:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   264b4:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   264b8:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   264ba:	68a3      	ldr	r3, [r4, #8]
   264bc:	3301      	adds	r3, #1
   264be:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   264c0:	68e3      	ldr	r3, [r4, #12]
   264c2:	3301      	adds	r3, #1
   264c4:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   264c6:	b96e      	cbnz	r6, 264e4 <print_value+0x194>
    output_pointer = ensure(output_buffer, 2);
   264c8:	2102      	movs	r1, #2
   264ca:	4620      	mov	r0, r4
   264cc:	f017 fa30 	bl	3d930 <ensure>
    if (output_pointer == NULL)
   264d0:	2800      	cmp	r0, #0
   264d2:	f43f af43 	beq.w	2635c <print_value+0xc>
    *output_pointer++ = ']';
   264d6:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   264d8:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   264da:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   264dc:	68e3      	ldr	r3, [r4, #12]
   264de:	3b01      	subs	r3, #1
   264e0:	60e3      	str	r3, [r4, #12]
   264e2:	e792      	b.n	2640a <print_value+0xba>
        if (!print_value(current_element, output_buffer))
   264e4:	4621      	mov	r1, r4
   264e6:	4630      	mov	r0, r6
   264e8:	f7ff ff32 	bl	26350 <print_value>
   264ec:	2800      	cmp	r0, #0
   264ee:	f43f af35 	beq.w	2635c <print_value+0xc>
        update_offset(output_buffer);
   264f2:	4620      	mov	r0, r4
   264f4:	f017 f9f3 	bl	3d8de <update_offset>
        if (current_element->next)
   264f8:	6833      	ldr	r3, [r6, #0]
   264fa:	b1bb      	cbz	r3, 2652c <print_value+0x1dc>
            length = (size_t) (output_buffer->format ? 2 : 1);
   264fc:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   264fe:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   26500:	2b00      	cmp	r3, #0
   26502:	bf14      	ite	ne
   26504:	f04f 0902 	movne.w	r9, #2
   26508:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   2650c:	f109 0101 	add.w	r1, r9, #1
   26510:	f017 fa0e 	bl	3d930 <ensure>
            if (output_pointer == NULL)
   26514:	2800      	cmp	r0, #0
   26516:	f43f af21 	beq.w	2635c <print_value+0xc>
            *output_pointer++ = ',';
   2651a:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   2651c:	6963      	ldr	r3, [r4, #20]
   2651e:	b93b      	cbnz	r3, 26530 <print_value+0x1e0>
            *output_pointer++ = ',';
   26520:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   26522:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   26526:	68a3      	ldr	r3, [r4, #8]
   26528:	444b      	add	r3, r9
   2652a:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   2652c:	6836      	ldr	r6, [r6, #0]
   2652e:	e7ca      	b.n	264c6 <print_value+0x176>
                *output_pointer++ = ' ';
   26530:	1c83      	adds	r3, r0, #2
   26532:	7045      	strb	r5, [r0, #1]
   26534:	e7f5      	b.n	26522 <print_value+0x1d2>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   26536:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   26538:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   2653a:	2b00      	cmp	r3, #0
   2653c:	bf14      	ite	ne
   2653e:	2702      	movne	r7, #2
   26540:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   26542:	4620      	mov	r0, r4
   26544:	1c79      	adds	r1, r7, #1
   26546:	f017 f9f3 	bl	3d930 <ensure>
    if (output_pointer == NULL)
   2654a:	2800      	cmp	r0, #0
   2654c:	f43f af06 	beq.w	2635c <print_value+0xc>
    *output_pointer++ = '{';
   26550:	237b      	movs	r3, #123	; 0x7b
   26552:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   26554:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   26556:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   26558:	3201      	adds	r2, #1
   2655a:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   2655c:	b10b      	cbz	r3, 26562 <print_value+0x212>
        *output_pointer++ = '\n';
   2655e:	230a      	movs	r3, #10
   26560:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   26562:	68a3      	ldr	r3, [r4, #8]
        *output_pointer++ = ':';
   26564:	f04f 083a 	mov.w	r8, #58	; 0x3a
    output_buffer->offset += length;
   26568:	443b      	add	r3, r7
                *output_pointer++ = '\t';
   2656a:	2709      	movs	r7, #9
    output_buffer->offset += length;
   2656c:	60a3      	str	r3, [r4, #8]
    while (current_item)
   2656e:	6963      	ldr	r3, [r4, #20]
   26570:	b9f5      	cbnz	r5, 265b0 <print_value+0x260>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   26572:	2b00      	cmp	r3, #0
   26574:	d077      	beq.n	26666 <print_value+0x316>
   26576:	68e1      	ldr	r1, [r4, #12]
   26578:	3101      	adds	r1, #1
   2657a:	4620      	mov	r0, r4
   2657c:	f017 f9d8 	bl	3d930 <ensure>
    if (output_pointer == NULL)
   26580:	2800      	cmp	r0, #0
   26582:	f43f aeeb 	beq.w	2635c <print_value+0xc>
    if (output_buffer->format)
   26586:	6963      	ldr	r3, [r4, #20]
   26588:	2b00      	cmp	r3, #0
   2658a:	d176      	bne.n	2667a <print_value+0x32a>
   2658c:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   2658e:	227d      	movs	r2, #125	; 0x7d
   26590:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   26592:	2200      	movs	r2, #0
   26594:	705a      	strb	r2, [r3, #1]
   26596:	e7a1      	b.n	264dc <print_value+0x18c>
   26598:	0004350d 	.word	0x0004350d
   2659c:	000434f6 	.word	0x000434f6
   265a0:	00043513 	.word	0x00043513
   265a4:	000434fb 	.word	0x000434fb
   265a8:	00043502 	.word	0x00043502
   265ac:	00043506 	.word	0x00043506
        if (output_buffer->format)
   265b0:	b173      	cbz	r3, 265d0 <print_value+0x280>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   265b2:	68e1      	ldr	r1, [r4, #12]
   265b4:	4620      	mov	r0, r4
   265b6:	f017 f9bb 	bl	3d930 <ensure>
            if (output_pointer == NULL)
   265ba:	2800      	cmp	r0, #0
   265bc:	f43f aece 	beq.w	2635c <print_value+0xc>
   265c0:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   265c2:	68e1      	ldr	r1, [r4, #12]
   265c4:	1a13      	subs	r3, r2, r0
   265c6:	428b      	cmp	r3, r1
   265c8:	d34a      	bcc.n	26660 <print_value+0x310>
            output_buffer->offset += output_buffer->depth;
   265ca:	68a3      	ldr	r3, [r4, #8]
   265cc:	440b      	add	r3, r1
   265ce:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   265d0:	4621      	mov	r1, r4
   265d2:	6a28      	ldr	r0, [r5, #32]
   265d4:	f7ff fe1c 	bl	26210 <print_string_ptr>
   265d8:	2800      	cmp	r0, #0
   265da:	f43f aebf 	beq.w	2635c <print_value+0xc>
        update_offset(output_buffer);
   265de:	4620      	mov	r0, r4
   265e0:	f017 f97d 	bl	3d8de <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   265e4:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   265e6:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   265e8:	2b00      	cmp	r3, #0
   265ea:	bf14      	ite	ne
   265ec:	2602      	movne	r6, #2
   265ee:	2601      	moveq	r6, #1
        output_pointer = ensure(output_buffer, length);
   265f0:	4631      	mov	r1, r6
   265f2:	f017 f99d 	bl	3d930 <ensure>
        if (output_pointer == NULL)
   265f6:	2800      	cmp	r0, #0
   265f8:	f43f aeb0 	beq.w	2635c <print_value+0xc>
        *output_pointer++ = ':';
   265fc:	f880 8000 	strb.w	r8, [r0]
        if (output_buffer->format)
   26600:	6963      	ldr	r3, [r4, #20]
   26602:	b103      	cbz	r3, 26606 <print_value+0x2b6>
            *output_pointer++ = '\t';
   26604:	7047      	strb	r7, [r0, #1]
        output_buffer->offset += length;
   26606:	68a1      	ldr	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   26608:	4628      	mov	r0, r5
        output_buffer->offset += length;
   2660a:	4431      	add	r1, r6
   2660c:	60a1      	str	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   2660e:	4621      	mov	r1, r4
   26610:	f7ff fe9e 	bl	26350 <print_value>
   26614:	2800      	cmp	r0, #0
   26616:	f43f aea1 	beq.w	2635c <print_value+0xc>
        update_offset(output_buffer);
   2661a:	4620      	mov	r0, r4
   2661c:	f017 f95f 	bl	3d8de <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   26620:	682e      	ldr	r6, [r5, #0]
   26622:	6963      	ldr	r3, [r4, #20]
   26624:	3600      	adds	r6, #0
   26626:	bf18      	it	ne
   26628:	2601      	movne	r6, #1
   2662a:	2b00      	cmp	r3, #0
   2662c:	bf18      	it	ne
   2662e:	3601      	addne	r6, #1
        output_pointer = ensure(output_buffer, length + 1);
   26630:	4620      	mov	r0, r4
   26632:	1c71      	adds	r1, r6, #1
   26634:	f017 f97c 	bl	3d930 <ensure>
        if (output_pointer == NULL)
   26638:	2800      	cmp	r0, #0
   2663a:	f43f ae8f 	beq.w	2635c <print_value+0xc>
        if (current_item->next)
   2663e:	682b      	ldr	r3, [r5, #0]
   26640:	b113      	cbz	r3, 26648 <print_value+0x2f8>
            *output_pointer++ = ',';
   26642:	232c      	movs	r3, #44	; 0x2c
   26644:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   26648:	6963      	ldr	r3, [r4, #20]
   2664a:	b113      	cbz	r3, 26652 <print_value+0x302>
            *output_pointer++ = '\n';
   2664c:	230a      	movs	r3, #10
   2664e:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   26652:	2300      	movs	r3, #0
   26654:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   26656:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   26658:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   2665a:	441e      	add	r6, r3
   2665c:	60a6      	str	r6, [r4, #8]
        current_item = current_item->next;
   2665e:	e786      	b.n	2656e <print_value+0x21e>
                *output_pointer++ = '\t';
   26660:	f802 7b01 	strb.w	r7, [r2], #1
   26664:	e7ad      	b.n	265c2 <print_value+0x272>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   26666:	2102      	movs	r1, #2
   26668:	e787      	b.n	2657a <print_value+0x22a>
            *output_pointer++ = '\t';
   2666a:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   2666e:	68e2      	ldr	r2, [r4, #12]
   26670:	1a19      	subs	r1, r3, r0
   26672:	3a01      	subs	r2, #1
   26674:	4291      	cmp	r1, r2
   26676:	d3f8      	bcc.n	2666a <print_value+0x31a>
   26678:	e789      	b.n	2658e <print_value+0x23e>
    if (output_buffer->format)
   2667a:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   2667c:	2509      	movs	r5, #9
   2667e:	e7f6      	b.n	2666e <print_value+0x31e>

00026680 <print.constprop.14>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   26680:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   26682:	4d24      	ldr	r5, [pc, #144]	; (26714 <print.constprop.14+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   26684:	b08b      	sub	sp, #44	; 0x2c
   26686:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   26688:	2224      	movs	r2, #36	; 0x24
   2668a:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   2668c:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   2668e:	a801      	add	r0, sp, #4
   26690:	f018 fb3b 	bl	3ed0a <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   26694:	682b      	ldr	r3, [r5, #0]
   26696:	f44f 7080 	mov.w	r0, #256	; 0x100
   2669a:	4798      	blx	r3
    buffer->length = default_buffer_size;
   2669c:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   266a0:	4603      	mov	r3, r0
    buffer->format = format;
   266a2:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   266a4:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   266a6:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   266a8:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   266aa:	462f      	mov	r7, r5
   266ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   266b0:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   266b4:	b17b      	cbz	r3, 266d6 <print.constprop.14+0x56>
    if (!print_value(item, buffer))
   266b6:	a901      	add	r1, sp, #4
   266b8:	4620      	mov	r0, r4
   266ba:	f7ff fe49 	bl	26350 <print_value>
   266be:	b150      	cbz	r0, 266d6 <print.constprop.14+0x56>
    update_offset(buffer);
   266c0:	a801      	add	r0, sp, #4
   266c2:	f017 f90c 	bl	3d8de <update_offset>
    if (hooks->reallocate != NULL)
   266c6:	68ae      	ldr	r6, [r5, #8]
   266c8:	9903      	ldr	r1, [sp, #12]
   266ca:	b15e      	cbz	r6, 266e4 <print.constprop.14+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   266cc:	3101      	adds	r1, #1
   266ce:	9801      	ldr	r0, [sp, #4]
   266d0:	47b0      	blx	r6
        if (printed == NULL) {
   266d2:	4604      	mov	r4, r0
   266d4:	b9d0      	cbnz	r0, 2670c <print.constprop.14+0x8c>
    if (buffer->buffer != NULL)
   266d6:	9c01      	ldr	r4, [sp, #4]
   266d8:	b1c4      	cbz	r4, 2670c <print.constprop.14+0x8c>
        hooks->deallocate(buffer->buffer);
   266da:	4620      	mov	r0, r4
   266dc:	687b      	ldr	r3, [r7, #4]
   266de:	4798      	blx	r3
    return NULL;
   266e0:	2400      	movs	r4, #0
   266e2:	e013      	b.n	2670c <print.constprop.14+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   266e4:	682b      	ldr	r3, [r5, #0]
   266e6:	1c48      	adds	r0, r1, #1
   266e8:	4798      	blx	r3
        if (printed == NULL)
   266ea:	4604      	mov	r4, r0
   266ec:	2800      	cmp	r0, #0
   266ee:	d0f2      	beq.n	266d6 <print.constprop.14+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   266f0:	9a03      	ldr	r2, [sp, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   266f2:	9b02      	ldr	r3, [sp, #8]
   266f4:	3201      	adds	r2, #1
   266f6:	429a      	cmp	r2, r3
   266f8:	bf28      	it	cs
   266fa:	461a      	movcs	r2, r3
   266fc:	9901      	ldr	r1, [sp, #4]
   266fe:	f018 fae4 	bl	3ecca <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   26702:	9b03      	ldr	r3, [sp, #12]
   26704:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   26706:	686b      	ldr	r3, [r5, #4]
   26708:	9801      	ldr	r0, [sp, #4]
   2670a:	4798      	blx	r3
}
   2670c:	4620      	mov	r0, r4
   2670e:	b00b      	add	sp, #44	; 0x2c
   26710:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26712:	bf00      	nop
   26714:	2003153c 	.word	0x2003153c

00026718 <cJSON_strdup.isra.2.constprop.16>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   26718:	b570      	push	{r4, r5, r6, lr}
    if (string == NULL)
   2671a:	4605      	mov	r5, r0
   2671c:	b170      	cbz	r0, 2673c <cJSON_strdup.isra.2.constprop.16+0x24>
    length = strlen((const char*)string) + sizeof("");
   2671e:	f7f6 fd01 	bl	1d124 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   26722:	4b07      	ldr	r3, [pc, #28]	; (26740 <cJSON_strdup.isra.2.constprop.16+0x28>)
    length = strlen((const char*)string) + sizeof("");
   26724:	1c46      	adds	r6, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   26726:	681b      	ldr	r3, [r3, #0]
   26728:	4630      	mov	r0, r6
   2672a:	4798      	blx	r3
    if (copy == NULL)
   2672c:	4604      	mov	r4, r0
   2672e:	b118      	cbz	r0, 26738 <cJSON_strdup.isra.2.constprop.16+0x20>
   26730:	4632      	mov	r2, r6
   26732:	4629      	mov	r1, r5
   26734:	f018 fac9 	bl	3ecca <memcpy>
}
   26738:	4620      	mov	r0, r4
   2673a:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   2673c:	4604      	mov	r4, r0
   2673e:	e7fb      	b.n	26738 <cJSON_strdup.isra.2.constprop.16+0x20>
   26740:	2003153c 	.word	0x2003153c

00026744 <add_item_to_object.constprop.12>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   26744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26746:	460e      	mov	r6, r1
   26748:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL))
   2674a:	4607      	mov	r7, r0
   2674c:	b1f0      	cbz	r0, 2678c <add_item_to_object.constprop.12+0x48>
   2674e:	b1e9      	cbz	r1, 2678c <add_item_to_object.constprop.12+0x48>
   26750:	b1e2      	cbz	r2, 2678c <add_item_to_object.constprop.12+0x48>
    if (constant_key)
   26752:	b193      	cbz	r3, 2677a <add_item_to_object.constprop.12+0x36>
        new_type = item->type | cJSON_StringIsConst;
   26754:	68d5      	ldr	r5, [r2, #12]
   26756:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   2675a:	68e3      	ldr	r3, [r4, #12]
   2675c:	059b      	lsls	r3, r3, #22
   2675e:	d404      	bmi.n	2676a <add_item_to_object.constprop.12+0x26>
   26760:	6a20      	ldr	r0, [r4, #32]
   26762:	b110      	cbz	r0, 2676a <add_item_to_object.constprop.12+0x26>
        hooks->deallocate(item->string);
   26764:	4b0a      	ldr	r3, [pc, #40]	; (26790 <add_item_to_object.constprop.12+0x4c>)
   26766:	685b      	ldr	r3, [r3, #4]
   26768:	4798      	blx	r3
    item->string = new_key;
   2676a:	6226      	str	r6, [r4, #32]
    item->type = new_type;
   2676c:	60e5      	str	r5, [r4, #12]
    return add_item_to_array(object, item);
   2676e:	4621      	mov	r1, r4
   26770:	4638      	mov	r0, r7
}
   26772:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   26776:	f017 b8bf 	b.w	3d8f8 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   2677a:	4608      	mov	r0, r1
   2677c:	f7ff ffcc 	bl	26718 <cJSON_strdup.isra.2.constprop.16>
        if (new_key == NULL)
   26780:	4606      	mov	r6, r0
   26782:	b118      	cbz	r0, 2678c <add_item_to_object.constprop.12+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   26784:	68e5      	ldr	r5, [r4, #12]
   26786:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   2678a:	e7e6      	b.n	2675a <add_item_to_object.constprop.12+0x16>
}
   2678c:	2000      	movs	r0, #0
   2678e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26790:	2003153c 	.word	0x2003153c

00026794 <cJSON_InitHooks>:
{
   26794:	b530      	push	{r4, r5, lr}
   26796:	4b0d      	ldr	r3, [pc, #52]	; (267cc <cJSON_InitHooks+0x38>)
   26798:	4d0d      	ldr	r5, [pc, #52]	; (267d0 <cJSON_InitHooks+0x3c>)
   2679a:	4c0e      	ldr	r4, [pc, #56]	; (267d4 <cJSON_InitHooks+0x40>)
    if (hooks == NULL)
   2679c:	b920      	cbnz	r0, 267a8 <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   2679e:	e9c3 5400 	strd	r5, r4, [r3]
        global_hooks.reallocate = realloc;
   267a2:	4a0d      	ldr	r2, [pc, #52]	; (267d8 <cJSON_InitHooks+0x44>)
   267a4:	609a      	str	r2, [r3, #8]
   267a6:	e00f      	b.n	267c8 <cJSON_InitHooks+0x34>
    if (hooks->malloc_fn != NULL)
   267a8:	6801      	ldr	r1, [r0, #0]
    if (hooks->free_fn != NULL)
   267aa:	6842      	ldr	r2, [r0, #4]
        global_hooks.allocate = hooks->malloc_fn;
   267ac:	2900      	cmp	r1, #0
   267ae:	bf08      	it	eq
   267b0:	4629      	moveq	r1, r5
        global_hooks.deallocate = hooks->free_fn;
   267b2:	2a00      	cmp	r2, #0
   267b4:	bf08      	it	eq
   267b6:	4622      	moveq	r2, r4
    global_hooks.reallocate = NULL;
   267b8:	2000      	movs	r0, #0
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   267ba:	42a9      	cmp	r1, r5
        global_hooks.allocate = hooks->malloc_fn;
   267bc:	6019      	str	r1, [r3, #0]
        global_hooks.deallocate = hooks->free_fn;
   267be:	605a      	str	r2, [r3, #4]
    global_hooks.reallocate = NULL;
   267c0:	6098      	str	r0, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   267c2:	d101      	bne.n	267c8 <cJSON_InitHooks+0x34>
   267c4:	42a2      	cmp	r2, r4
   267c6:	d0ec      	beq.n	267a2 <cJSON_InitHooks+0xe>
}
   267c8:	bd30      	pop	{r4, r5, pc}
   267ca:	bf00      	nop
   267cc:	2003153c 	.word	0x2003153c
   267d0:	00039e0d 	.word	0x00039e0d
   267d4:	00039e1d 	.word	0x00039e1d
   267d8:	0003a8f9 	.word	0x0003a8f9

000267dc <cJSON_Delete>:
{
   267dc:	b570      	push	{r4, r5, r6, lr}
   267de:	4604      	mov	r4, r0
   267e0:	4d0f      	ldr	r5, [pc, #60]	; (26820 <cJSON_Delete+0x44>)
    while (item != NULL)
   267e2:	b904      	cbnz	r4, 267e6 <cJSON_Delete+0xa>
}
   267e4:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   267e6:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   267e8:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   267ea:	05d9      	lsls	r1, r3, #23
   267ec:	d403      	bmi.n	267f6 <cJSON_Delete+0x1a>
   267ee:	68a0      	ldr	r0, [r4, #8]
   267f0:	b968      	cbnz	r0, 2680e <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   267f2:	6920      	ldr	r0, [r4, #16]
   267f4:	b988      	cbnz	r0, 2681a <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   267f6:	68e3      	ldr	r3, [r4, #12]
   267f8:	059b      	lsls	r3, r3, #22
   267fa:	d403      	bmi.n	26804 <cJSON_Delete+0x28>
   267fc:	6a20      	ldr	r0, [r4, #32]
   267fe:	b108      	cbz	r0, 26804 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   26800:	686b      	ldr	r3, [r5, #4]
   26802:	4798      	blx	r3
        global_hooks.deallocate(item);
   26804:	4620      	mov	r0, r4
   26806:	686b      	ldr	r3, [r5, #4]
   26808:	4798      	blx	r3
        item = next;
   2680a:	4634      	mov	r4, r6
   2680c:	e7e9      	b.n	267e2 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   2680e:	f7ff ffe5 	bl	267dc <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   26812:	68e3      	ldr	r3, [r4, #12]
   26814:	05da      	lsls	r2, r3, #23
   26816:	d5ec      	bpl.n	267f2 <cJSON_Delete+0x16>
   26818:	e7ed      	b.n	267f6 <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   2681a:	686b      	ldr	r3, [r5, #4]
   2681c:	4798      	blx	r3
   2681e:	e7ea      	b.n	267f6 <cJSON_Delete+0x1a>
   26820:	2003153c 	.word	0x2003153c

00026824 <cJSON_ParseWithOpts>:
{
   26824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26828:	4605      	mov	r5, r0
    global_error.json = NULL;
   2682a:	f04f 0800 	mov.w	r8, #0
{
   2682e:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   26830:	4e31      	ldr	r6, [pc, #196]	; (268f8 <cJSON_ParseWithOpts+0xd4>)
{
   26832:	460f      	mov	r7, r1
   26834:	4691      	mov	r9, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   26836:	2100      	movs	r1, #0
   26838:	221c      	movs	r2, #28
   2683a:	a801      	add	r0, sp, #4
   2683c:	f018 fa65 	bl	3ed0a <memset>
    global_error.position = 0;
   26840:	e9c6 8800 	strd	r8, r8, [r6]
    if (value == NULL)
   26844:	2d00      	cmp	r5, #0
   26846:	d04d      	beq.n	268e4 <cJSON_ParseWithOpts+0xc0>
    buffer.length = strlen((const char*)value) + sizeof("");
   26848:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
   2684a:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   2684c:	f7f6 fc6a 	bl	1d124 <strlen>
    buffer.hooks = global_hooks;
   26850:	4b2a      	ldr	r3, [pc, #168]	; (268fc <cJSON_ParseWithOpts+0xd8>)
    buffer.length = strlen((const char*)value) + sizeof("");
   26852:	3001      	adds	r0, #1
    buffer.offset = 0;
   26854:	e9cd 0802 	strd	r0, r8, [sp, #8]
    buffer.hooks = global_hooks;
   26858:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2685c:	ab08      	add	r3, sp, #32
   2685e:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   26862:	f017 f859 	bl	3d918 <cJSON_New_Item.isra.1>
    if (item == NULL) /* memory fail */
   26866:	4604      	mov	r4, r0
   26868:	2800      	cmp	r0, #0
   2686a:	d030      	beq.n	268ce <cJSON_ParseWithOpts+0xaa>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   2686c:	9801      	ldr	r0, [sp, #4]
   2686e:	b128      	cbz	r0, 2687c <cJSON_ParseWithOpts+0x58>
   26870:	9b03      	ldr	r3, [sp, #12]
   26872:	b9e3      	cbnz	r3, 268ae <cJSON_ParseWithOpts+0x8a>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   26874:	9b02      	ldr	r3, [sp, #8]
   26876:	2b04      	cmp	r3, #4
   26878:	d80f      	bhi.n	2689a <cJSON_ParseWithOpts+0x76>
    return buffer;
   2687a:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   2687c:	f017 f81a 	bl	3d8b4 <buffer_skip_whitespace>
   26880:	4601      	mov	r1, r0
   26882:	4620      	mov	r0, r4
   26884:	f7f6 fde0 	bl	1d448 <parse_value>
   26888:	b1f0      	cbz	r0, 268c8 <cJSON_ParseWithOpts+0xa4>
    if (require_null_terminated)
   2688a:	f1b9 0f00 	cmp.w	r9, #0
   2688e:	d110      	bne.n	268b2 <cJSON_ParseWithOpts+0x8e>
    if (return_parse_end)
   26890:	bb57      	cbnz	r7, 268e8 <cJSON_ParseWithOpts+0xc4>
}
   26892:	4620      	mov	r0, r4
   26894:	b009      	add	sp, #36	; 0x24
   26896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   2689a:	2203      	movs	r2, #3
   2689c:	4918      	ldr	r1, [pc, #96]	; (26900 <cJSON_ParseWithOpts+0xdc>)
   2689e:	f018 fc0d 	bl	3f0bc <strncmp>
   268a2:	2800      	cmp	r0, #0
   268a4:	d1e9      	bne.n	2687a <cJSON_ParseWithOpts+0x56>
        buffer->offset += 3;
   268a6:	9b03      	ldr	r3, [sp, #12]
   268a8:	3303      	adds	r3, #3
   268aa:	9303      	str	r3, [sp, #12]
   268ac:	e7e5      	b.n	2687a <cJSON_ParseWithOpts+0x56>
        return NULL;
   268ae:	4640      	mov	r0, r8
   268b0:	e7e4      	b.n	2687c <cJSON_ParseWithOpts+0x58>
        buffer_skip_whitespace(&buffer);
   268b2:	a801      	add	r0, sp, #4
   268b4:	f016 fffe 	bl	3d8b4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   268b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   268bc:	4293      	cmp	r3, r2
   268be:	d203      	bcs.n	268c8 <cJSON_ParseWithOpts+0xa4>
   268c0:	9a01      	ldr	r2, [sp, #4]
   268c2:	5cd3      	ldrb	r3, [r2, r3]
   268c4:	2b00      	cmp	r3, #0
   268c6:	d0e3      	beq.n	26890 <cJSON_ParseWithOpts+0x6c>
        cJSON_Delete(item);
   268c8:	4620      	mov	r0, r4
   268ca:	f7ff ff87 	bl	267dc <cJSON_Delete>
        if (buffer.offset < buffer.length)
   268ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   268d2:	429a      	cmp	r2, r3
   268d4:	d30d      	bcc.n	268f2 <cJSON_ParseWithOpts+0xce>
        else if (buffer.length > 0)
   268d6:	b103      	cbz	r3, 268da <cJSON_ParseWithOpts+0xb6>
            local_error.position = buffer.length - 1;
   268d8:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   268da:	b10f      	cbz	r7, 268e0 <cJSON_ParseWithOpts+0xbc>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   268dc:	18ea      	adds	r2, r5, r3
   268de:	603a      	str	r2, [r7, #0]
        global_error = local_error;
   268e0:	e9c6 5300 	strd	r5, r3, [r6]
    return NULL;
   268e4:	2400      	movs	r4, #0
   268e6:	e7d4      	b.n	26892 <cJSON_ParseWithOpts+0x6e>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   268e8:	9b01      	ldr	r3, [sp, #4]
   268ea:	9a03      	ldr	r2, [sp, #12]
   268ec:	4413      	add	r3, r2
   268ee:	603b      	str	r3, [r7, #0]
   268f0:	e7cf      	b.n	26892 <cJSON_ParseWithOpts+0x6e>
   268f2:	4613      	mov	r3, r2
   268f4:	e7f1      	b.n	268da <cJSON_ParseWithOpts+0xb6>
   268f6:	bf00      	nop
   268f8:	20023ad0 	.word	0x20023ad0
   268fc:	2003153c 	.word	0x2003153c
   26900:	000434e9 	.word	0x000434e9

00026904 <cJSON_CreateNull>:
{
   26904:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   26906:	4b04      	ldr	r3, [pc, #16]	; (26918 <cJSON_CreateNull+0x14>)
   26908:	6818      	ldr	r0, [r3, #0]
   2690a:	f017 f805 	bl	3d918 <cJSON_New_Item.isra.1>
    if(item)
   2690e:	b108      	cbz	r0, 26914 <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   26910:	2304      	movs	r3, #4
   26912:	60c3      	str	r3, [r0, #12]
}
   26914:	bd08      	pop	{r3, pc}
   26916:	bf00      	nop
   26918:	2003153c 	.word	0x2003153c

0002691c <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   2691c:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2691e:	4b0a      	ldr	r3, [pc, #40]	; (26948 <cJSON_CreateString+0x2c>)
{
   26920:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   26922:	6818      	ldr	r0, [r3, #0]
   26924:	f016 fff8 	bl	3d918 <cJSON_New_Item.isra.1>
    if(item)
   26928:	4604      	mov	r4, r0
   2692a:	b158      	cbz	r0, 26944 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   2692c:	2310      	movs	r3, #16
   2692e:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   26930:	4628      	mov	r0, r5
   26932:	f7ff fef1 	bl	26718 <cJSON_strdup.isra.2.constprop.16>
   26936:	4605      	mov	r5, r0
   26938:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   2693a:	b918      	cbnz	r0, 26944 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   2693c:	4620      	mov	r0, r4
   2693e:	f7ff ff4d 	bl	267dc <cJSON_Delete>
            return NULL;
   26942:	462c      	mov	r4, r5
        }
    }

    return item;
}
   26944:	4620      	mov	r0, r4
   26946:	bd38      	pop	{r3, r4, r5, pc}
   26948:	2003153c 	.word	0x2003153c

0002694c <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   2694c:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2694e:	4b04      	ldr	r3, [pc, #16]	; (26960 <cJSON_CreateArray+0x14>)
   26950:	6818      	ldr	r0, [r3, #0]
   26952:	f016 ffe1 	bl	3d918 <cJSON_New_Item.isra.1>
    if(item)
   26956:	b108      	cbz	r0, 2695c <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   26958:	2320      	movs	r3, #32
   2695a:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   2695c:	bd08      	pop	{r3, pc}
   2695e:	bf00      	nop
   26960:	2003153c 	.word	0x2003153c

00026964 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   26964:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   26966:	4b04      	ldr	r3, [pc, #16]	; (26978 <cJSON_CreateObject+0x14>)
   26968:	6818      	ldr	r0, [r3, #0]
   2696a:	f016 ffd5 	bl	3d918 <cJSON_New_Item.isra.1>
    if (item)
   2696e:	b108      	cbz	r0, 26974 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   26970:	2340      	movs	r3, #64	; 0x40
   26972:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   26974:	bd08      	pop	{r3, pc}
   26976:	bf00      	nop
   26978:	2003153c 	.word	0x2003153c

0002697c <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   2697c:	4803      	ldr	r0, [pc, #12]	; (2698c <cJSON_Init+0x10>)
   2697e:	4b04      	ldr	r3, [pc, #16]	; (26990 <cJSON_Init+0x14>)
   26980:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   26982:	4b04      	ldr	r3, [pc, #16]	; (26994 <cJSON_Init+0x18>)
   26984:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   26986:	f7ff bf05 	b.w	26794 <cJSON_InitHooks>
   2698a:	bf00      	nop
   2698c:	20023ad8 	.word	0x20023ad8
   26990:	0003da93 	.word	0x0003da93
   26994:	0003da8f 	.word	0x0003da8f

00026998 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   26998:	2200      	movs	r2, #0
{
   2699a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   2699c:	4611      	mov	r1, r2
   2699e:	202a      	movs	r0, #42	; 0x2a
   269a0:	f7fd fa8e 	bl	23ec0 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   269a4:	f009 fc40 	bl	30228 <bsd_init>
   269a8:	4b01      	ldr	r3, [pc, #4]	; (269b0 <_bsdlib_init+0x18>)
   269aa:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   269ac:	2000      	movs	r0, #0
   269ae:	bd08      	pop	{r3, pc}
   269b0:	20023ae0 	.word	0x20023ae0

000269b4 <bsdlib_get_init_ret>:
}

int bsdlib_get_init_ret(void)
{
	return init_ret;
}
   269b4:	4b01      	ldr	r3, [pc, #4]	; (269bc <bsdlib_get_init_ret+0x8>)
   269b6:	6818      	ldr	r0, [r3, #0]
   269b8:	4770      	bx	lr
   269ba:	bf00      	nop
   269bc:	20023ae0 	.word	0x20023ae0

000269c0 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   269c0:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   269c2:	4b0d      	ldr	r3, [pc, #52]	; (269f8 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   269c4:	4c0d      	ldr	r4, [pc, #52]	; (269fc <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   269c6:	681a      	ldr	r2, [r3, #0]
   269c8:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   269ca:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   269cc:	4623      	mov	r3, r4
		if (entry->id == id) {
   269ce:	6819      	ldr	r1, [r3, #0]
   269d0:	4281      	cmp	r1, r0
   269d2:	d00e      	beq.n	269f2 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   269d4:	b151      	cbz	r1, 269ec <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   269d6:	6859      	ldr	r1, [r3, #4]
   269d8:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   269da:	42b1      	cmp	r1, r6
   269dc:	bfc4      	itt	gt
   269de:	461c      	movgt	r4, r3
   269e0:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   269e2:	3d01      	subs	r5, #1
   269e4:	f103 0308 	add.w	r3, r3, #8
   269e8:	d1f1      	bne.n	269ce <thread_monitor_entry_get+0xe>
   269ea:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   269ec:	3a01      	subs	r2, #1
	new_entry->id = id;
   269ee:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   269f0:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   269f2:	4618      	mov	r0, r3
   269f4:	bd70      	pop	{r4, r5, r6, pc}
   269f6:	bf00      	nop
   269f8:	20023ae4 	.word	0x20023ae4
   269fc:	20023af0 	.word	0x20023af0

00026a00 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   26a00:	4668      	mov	r0, sp
   26a02:	f020 0107 	bic.w	r1, r0, #7
   26a06:	468d      	mov	sp, r1
   26a08:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26a0a:	4b0d      	ldr	r3, [pc, #52]	; (26a40 <rpc_proxy_irq_handler+0x40>)
   26a0c:	e8d3 2fef 	ldaex	r2, [r3]
   26a10:	3201      	adds	r2, #1
   26a12:	e8c3 2fe1 	stlex	r1, r2, [r3]
   26a16:	2900      	cmp	r1, #0
   26a18:	d1f8      	bne.n	26a0c <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   26a1a:	f00d fe89 	bl	34730 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   26a1e:	4b09      	ldr	r3, [pc, #36]	; (26a44 <rpc_proxy_irq_handler+0x44>)
   26a20:	681c      	ldr	r4, [r3, #0]
   26a22:	b93c      	cbnz	r4, 26a34 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   26a24:	f7fd fa7e 	bl	23f24 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   26a28:	f7fd f966 	bl	23cf8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   26a2c:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   26a30:	4685      	mov	sp, r0
   26a32:	4770      	bx	lr
   26a34:	1d20      	adds	r0, r4, #4
   26a36:	f011 ff61 	bl	388fc <z_impl_k_sem_give>
   26a3a:	6824      	ldr	r4, [r4, #0]
	return node->next;
   26a3c:	e7f1      	b.n	26a22 <rpc_proxy_irq_handler+0x22>
   26a3e:	bf00      	nop
   26a40:	20023ae4 	.word	0x20023ae4
   26a44:	20023ae8 	.word	0x20023ae8

00026a48 <bsd_os_timedwait>:
{
   26a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26a4c:	4688      	mov	r8, r1
   26a4e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   26a50:	f018 f8b5 	bl	3ebbe <z_impl_k_uptime_get>
	if (*timeout == 0) {
   26a54:	f8d8 3000 	ldr.w	r3, [r8]
   26a58:	4606      	mov	r6, r0
   26a5a:	2b00      	cmp	r3, #0
   26a5c:	460f      	mov	r7, r1
   26a5e:	d103      	bne.n	26a68 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   26a60:	f011 fdc8 	bl	385f4 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   26a64:	203c      	movs	r0, #60	; 0x3c
   26a66:	e06e      	b.n	26b46 <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   26a68:	bfbc      	itt	lt
   26a6a:	f04f 33ff 	movlt.w	r3, #4294967295
   26a6e:	f8c8 3000 	strlt.w	r3, [r8]
	return z_impl_k_sem_init(sem, initial_count, limit);
   26a72:	2201      	movs	r2, #1
   26a74:	2100      	movs	r1, #0
   26a76:	a802      	add	r0, sp, #8
   26a78:	f018 f805 	bl	3ea86 <z_impl_k_sem_init>
   26a7c:	f10d 0a04 	add.w	sl, sp, #4
   26a80:	f04f 0320 	mov.w	r3, #32
   26a84:	f3ef 8b11 	mrs	fp, BASEPRI
   26a88:	f383 8811 	msr	BASEPRI, r3
   26a8c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   26a90:	f011 ff2e 	bl	388f0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   26a94:	f7ff ff94 	bl	269c0 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   26a98:	4933      	ldr	r1, [pc, #204]	; (26b68 <bsd_os_timedwait+0x120>)
   26a9a:	6843      	ldr	r3, [r0, #4]
   26a9c:	680a      	ldr	r2, [r1, #0]
   26a9e:	4689      	mov	r9, r1
   26aa0:	4293      	cmp	r3, r2
   26aa2:	f04f 0300 	mov.w	r3, #0
   26aa6:	d108      	bne.n	26aba <bsd_os_timedwait+0x72>
	parent->next = child;
   26aa8:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   26aaa:	4b30      	ldr	r3, [pc, #192]	; (26b6c <bsd_os_timedwait+0x124>)
   26aac:	685a      	ldr	r2, [r3, #4]
   26aae:	2a00      	cmp	r2, #0
   26ab0:	d14c      	bne.n	26b4c <bsd_os_timedwait+0x104>
	list->head = node;
   26ab2:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   26ab6:	2301      	movs	r3, #1
   26ab8:	e000      	b.n	26abc <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   26aba:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   26abc:	f38b 8811 	msr	BASEPRI, fp
   26ac0:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   26ac4:	2b00      	cmp	r3, #0
   26ac6:	d03d      	beq.n	26b44 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   26ac8:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   26acc:	a802      	add	r0, sp, #8
   26ace:	f011 ff5f 	bl	38990 <z_impl_k_sem_take>
	__asm__ volatile(
   26ad2:	f04f 0320 	mov.w	r3, #32
   26ad6:	f3ef 8b11 	mrs	fp, BASEPRI
   26ada:	f383 8811 	msr	BASEPRI, r3
   26ade:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26ae2:	2000      	movs	r0, #0
   26ae4:	4b21      	ldr	r3, [pc, #132]	; (26b6c <bsd_os_timedwait+0x124>)
   26ae6:	681a      	ldr	r2, [r3, #0]
   26ae8:	b152      	cbz	r2, 26b00 <bsd_os_timedwait+0xb8>
   26aea:	4552      	cmp	r2, sl
   26aec:	d139      	bne.n	26b62 <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   26aee:	9901      	ldr	r1, [sp, #4]
   26af0:	bb88      	cbnz	r0, 26b56 <bsd_os_timedwait+0x10e>
   26af2:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   26af4:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   26af6:	4290      	cmp	r0, r2
   26af8:	d100      	bne.n	26afc <bsd_os_timedwait+0xb4>
	list->tail = node;
   26afa:	6059      	str	r1, [r3, #4]
	parent->next = child;
   26afc:	2300      	movs	r3, #0
   26afe:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   26b00:	f011 fef6 	bl	388f0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   26b04:	f7ff ff5c 	bl	269c0 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   26b08:	f8d9 3000 	ldr.w	r3, [r9]
   26b0c:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   26b0e:	f38b 8811 	msr	BASEPRI, fp
   26b12:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   26b16:	f8d8 9000 	ldr.w	r9, [r8]
   26b1a:	f1b9 3fff 	cmp.w	r9, #4294967295
   26b1e:	d011      	beq.n	26b44 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   26b20:	f018 f84d 	bl	3ebbe <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   26b24:	eb16 0209 	adds.w	r2, r6, r9
   26b28:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
   26b2c:	1a14      	subs	r4, r2, r0
   26b2e:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
   26b32:	2c00      	cmp	r4, #0
   26b34:	f175 0300 	sbcs.w	r3, r5, #0
   26b38:	bfb8      	it	lt
   26b3a:	2400      	movlt	r4, #0
   26b3c:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   26b40:	2c00      	cmp	r4, #0
   26b42:	d08f      	beq.n	26a64 <bsd_os_timedwait+0x1c>
	return 0;
   26b44:	2000      	movs	r0, #0
}
   26b46:	b009      	add	sp, #36	; 0x24
   26b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b4c:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   26b50:	f8c3 a004 	str.w	sl, [r3, #4]
   26b54:	e7af      	b.n	26ab6 <bsd_os_timedwait+0x6e>
	parent->next = child;
   26b56:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   26b58:	6859      	ldr	r1, [r3, #4]
   26b5a:	4291      	cmp	r1, r2
	list->tail = node;
   26b5c:	bf08      	it	eq
   26b5e:	6058      	streq	r0, [r3, #4]
   26b60:	e7cc      	b.n	26afc <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26b62:	4610      	mov	r0, r2
   26b64:	6812      	ldr	r2, [r2, #0]
   26b66:	e7bf      	b.n	26ae8 <bsd_os_timedwait+0xa0>
   26b68:	20023ae4 	.word	0x20023ae4
   26b6c:	20023ae8 	.word	0x20023ae8

00026b70 <bsd_os_errno_set>:
	switch (err_code) {
   26b70:	282d      	cmp	r0, #45	; 0x2d
{
   26b72:	b510      	push	{r4, lr}
   26b74:	4604      	mov	r4, r0
	switch (err_code) {
   26b76:	f000 80a1 	beq.w	26cbc <bsd_os_errno_set+0x14c>
   26b7a:	dc50      	bgt.n	26c1e <bsd_os_errno_set+0xae>
   26b7c:	2816      	cmp	r0, #22
   26b7e:	d009      	beq.n	26b94 <bsd_os_errno_set+0x24>
   26b80:	dc38      	bgt.n	26bf4 <bsd_os_errno_set+0x84>
   26b82:	2808      	cmp	r0, #8
   26b84:	d006      	beq.n	26b94 <bsd_os_errno_set+0x24>
   26b86:	dc09      	bgt.n	26b9c <bsd_os_errno_set+0x2c>
   26b88:	2802      	cmp	r0, #2
   26b8a:	d003      	beq.n	26b94 <bsd_os_errno_set+0x24>
   26b8c:	2805      	cmp	r0, #5
   26b8e:	d001      	beq.n	26b94 <bsd_os_errno_set+0x24>
   26b90:	2801      	cmp	r0, #1
   26b92:	d10c      	bne.n	26bae <bsd_os_errno_set+0x3e>
		errno = ENOBUFS;
   26b94:	f015 ff5a 	bl	3ca4c <__errno>
   26b98:	6004      	str	r4, [r0, #0]
}
   26b9a:	bd10      	pop	{r4, pc}
	switch (err_code) {
   26b9c:	280c      	cmp	r0, #12
   26b9e:	d0f9      	beq.n	26b94 <bsd_os_errno_set+0x24>
   26ba0:	dc01      	bgt.n	26ba6 <bsd_os_errno_set+0x36>
   26ba2:	2809      	cmp	r0, #9
   26ba4:	e7f5      	b.n	26b92 <bsd_os_errno_set+0x22>
   26ba6:	280d      	cmp	r0, #13
   26ba8:	d0f4      	beq.n	26b94 <bsd_os_errno_set+0x24>
   26baa:	280e      	cmp	r0, #14
   26bac:	d06d      	beq.n	26c8a <bsd_os_errno_set+0x11a>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   26bae:	f240 1347 	movw	r3, #327	; 0x147
   26bb2:	4a60      	ldr	r2, [pc, #384]	; (26d34 <bsd_os_errno_set+0x1c4>)
   26bb4:	4960      	ldr	r1, [pc, #384]	; (26d38 <bsd_os_errno_set+0x1c8>)
   26bb6:	4861      	ldr	r0, [pc, #388]	; (26d3c <bsd_os_errno_set+0x1cc>)
   26bb8:	f015 fd0c 	bl	3c5d4 <printk>
   26bbc:	4621      	mov	r1, r4
   26bbe:	4860      	ldr	r0, [pc, #384]	; (26d40 <bsd_os_errno_set+0x1d0>)
   26bc0:	f015 fd08 	bl	3c5d4 <printk>
   26bc4:	f240 1147 	movw	r1, #327	; 0x147
   26bc8:	485a      	ldr	r0, [pc, #360]	; (26d34 <bsd_os_errno_set+0x1c4>)
   26bca:	f015 fd49 	bl	3c660 <assert_post_action>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   26bce:	2301      	movs	r3, #1
   26bd0:	f04f 0000 	mov.w	r0, #0
   26bd4:	4a5b      	ldr	r2, [pc, #364]	; (26d44 <bsd_os_errno_set+0x1d4>)
   26bd6:	f363 0007 	bfi	r0, r3, #0, #8
   26bda:	4b5b      	ldr	r3, [pc, #364]	; (26d48 <bsd_os_errno_set+0x1d8>)
   26bdc:	495b      	ldr	r1, [pc, #364]	; (26d4c <bsd_os_errno_set+0x1dc>)
   26bde:	1a9b      	subs	r3, r3, r2
   26be0:	08db      	lsrs	r3, r3, #3
   26be2:	f363 108f 	bfi	r0, r3, #6, #10
   26be6:	4622      	mov	r2, r4
   26be8:	f015 fd4b 	bl	3c682 <log_string_sync>
		errno = 0xBAADBAAD;
   26bec:	f015 ff2e 	bl	3ca4c <__errno>
   26bf0:	4b57      	ldr	r3, [pc, #348]	; (26d50 <bsd_os_errno_set+0x1e0>)
   26bf2:	e04d      	b.n	26c90 <bsd_os_errno_set+0x120>
	switch (err_code) {
   26bf4:	2828      	cmp	r0, #40	; 0x28
   26bf6:	f000 8098 	beq.w	26d2a <bsd_os_errno_set+0x1ba>
   26bfa:	dc05      	bgt.n	26c08 <bsd_os_errno_set+0x98>
   26bfc:	2823      	cmp	r0, #35	; 0x23
   26bfe:	d049      	beq.n	26c94 <bsd_os_errno_set+0x124>
   26c00:	2825      	cmp	r0, #37	; 0x25
   26c02:	d04b      	beq.n	26c9c <bsd_os_errno_set+0x12c>
   26c04:	2818      	cmp	r0, #24
   26c06:	e7c4      	b.n	26b92 <bsd_os_errno_set+0x22>
   26c08:	282a      	cmp	r0, #42	; 0x2a
   26c0a:	d04f      	beq.n	26cac <bsd_os_errno_set+0x13c>
   26c0c:	db4a      	blt.n	26ca4 <bsd_os_errno_set+0x134>
   26c0e:	282b      	cmp	r0, #43	; 0x2b
   26c10:	d050      	beq.n	26cb4 <bsd_os_errno_set+0x144>
   26c12:	282c      	cmp	r0, #44	; 0x2c
   26c14:	d1cb      	bne.n	26bae <bsd_os_errno_set+0x3e>
		errno = ESOCKTNOSUPPORT;
   26c16:	f015 ff19 	bl	3ca4c <__errno>
   26c1a:	237c      	movs	r3, #124	; 0x7c
   26c1c:	e038      	b.n	26c90 <bsd_os_errno_set+0x120>
	switch (err_code) {
   26c1e:	283c      	cmp	r0, #60	; 0x3c
   26c20:	d064      	beq.n	26cec <bsd_os_errno_set+0x17c>
   26c22:	dc1d      	bgt.n	26c60 <bsd_os_errno_set+0xf0>
   26c24:	2833      	cmp	r0, #51	; 0x33
   26c26:	d055      	beq.n	26cd4 <bsd_os_errno_set+0x164>
   26c28:	dc09      	bgt.n	26c3e <bsd_os_errno_set+0xce>
   26c2a:	2830      	cmp	r0, #48	; 0x30
   26c2c:	d04a      	beq.n	26cc4 <bsd_os_errno_set+0x154>
   26c2e:	2832      	cmp	r0, #50	; 0x32
   26c30:	d04c      	beq.n	26ccc <bsd_os_errno_set+0x15c>
   26c32:	282f      	cmp	r0, #47	; 0x2f
   26c34:	d1bb      	bne.n	26bae <bsd_os_errno_set+0x3e>
		errno = EAFNOSUPPORT;
   26c36:	f015 ff09 	bl	3ca4c <__errno>
   26c3a:	236a      	movs	r3, #106	; 0x6a
   26c3c:	e028      	b.n	26c90 <bsd_os_errno_set+0x120>
	switch (err_code) {
   26c3e:	2836      	cmp	r0, #54	; 0x36
   26c40:	d04c      	beq.n	26cdc <bsd_os_errno_set+0x16c>
   26c42:	dc05      	bgt.n	26c50 <bsd_os_errno_set+0xe0>
   26c44:	2834      	cmp	r0, #52	; 0x34
   26c46:	d1b2      	bne.n	26bae <bsd_os_errno_set+0x3e>
		errno = ENETRESET;
   26c48:	f015 ff00 	bl	3ca4c <__errno>
   26c4c:	237e      	movs	r3, #126	; 0x7e
   26c4e:	e01f      	b.n	26c90 <bsd_os_errno_set+0x120>
	switch (err_code) {
   26c50:	2838      	cmp	r0, #56	; 0x38
   26c52:	d047      	beq.n	26ce4 <bsd_os_errno_set+0x174>
   26c54:	2839      	cmp	r0, #57	; 0x39
   26c56:	d1aa      	bne.n	26bae <bsd_os_errno_set+0x3e>
		errno = ENOTCONN;
   26c58:	f015 fef8 	bl	3ca4c <__errno>
   26c5c:	2380      	movs	r3, #128	; 0x80
   26c5e:	e017      	b.n	26c90 <bsd_os_errno_set+0x120>
	switch (err_code) {
   26c60:	287d      	cmp	r0, #125	; 0x7d
   26c62:	d04f      	beq.n	26d04 <bsd_os_errno_set+0x194>
   26c64:	dc05      	bgt.n	26c72 <bsd_os_errno_set+0x102>
   26c66:	2870      	cmp	r0, #112	; 0x70
   26c68:	d044      	beq.n	26cf4 <bsd_os_errno_set+0x184>
   26c6a:	2873      	cmp	r0, #115	; 0x73
   26c6c:	d046      	beq.n	26cfc <bsd_os_errno_set+0x18c>
   26c6e:	2869      	cmp	r0, #105	; 0x69
   26c70:	e78f      	b.n	26b92 <bsd_os_errno_set+0x22>
   26c72:	287f      	cmp	r0, #127	; 0x7f
   26c74:	d04f      	beq.n	26d16 <bsd_os_errno_set+0x1a6>
   26c76:	db49      	blt.n	26d0c <bsd_os_errno_set+0x19c>
   26c78:	2880      	cmp	r0, #128	; 0x80
   26c7a:	d051      	beq.n	26d20 <bsd_os_errno_set+0x1b0>
   26c7c:	2881      	cmp	r0, #129	; 0x81
   26c7e:	d196      	bne.n	26bae <bsd_os_errno_set+0x3e>
		errno = EKEYREJECTED;
   26c80:	f015 fee4 	bl	3ca4c <__errno>
   26c84:	f240 73d4 	movw	r3, #2004	; 0x7d4
   26c88:	e002      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = EFAULT;
   26c8a:	f015 fedf 	bl	3ca4c <__errno>
   26c8e:	230e      	movs	r3, #14
		errno = 0xBAADBAAD;
   26c90:	6003      	str	r3, [r0, #0]
}
   26c92:	e782      	b.n	26b9a <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   26c94:	f015 feda 	bl	3ca4c <__errno>
   26c98:	230b      	movs	r3, #11
   26c9a:	e7f9      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = EDOM;
   26c9c:	f015 fed6 	bl	3ca4c <__errno>
   26ca0:	2321      	movs	r3, #33	; 0x21
   26ca2:	e7f5      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = EPROTOTYPE;
   26ca4:	f015 fed2 	bl	3ca4c <__errno>
   26ca8:	236b      	movs	r3, #107	; 0x6b
   26caa:	e7f1      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = ENOPROTOOPT;
   26cac:	f015 fece 	bl	3ca4c <__errno>
   26cb0:	236d      	movs	r3, #109	; 0x6d
   26cb2:	e7ed      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = EPROTONOSUPPORT;
   26cb4:	f015 feca 	bl	3ca4c <__errno>
   26cb8:	237b      	movs	r3, #123	; 0x7b
   26cba:	e7e9      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = EOPNOTSUPP;
   26cbc:	f015 fec6 	bl	3ca4c <__errno>
   26cc0:	235f      	movs	r3, #95	; 0x5f
   26cc2:	e7e5      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = EADDRINUSE;
   26cc4:	f015 fec2 	bl	3ca4c <__errno>
   26cc8:	2370      	movs	r3, #112	; 0x70
   26cca:	e7e1      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = ENETDOWN;
   26ccc:	f015 febe 	bl	3ca4c <__errno>
   26cd0:	2373      	movs	r3, #115	; 0x73
   26cd2:	e7dd      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = ENETUNREACH;
   26cd4:	f015 feba 	bl	3ca4c <__errno>
   26cd8:	2372      	movs	r3, #114	; 0x72
   26cda:	e7d9      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = ECONNRESET;
   26cdc:	f015 feb6 	bl	3ca4c <__errno>
   26ce0:	2368      	movs	r3, #104	; 0x68
   26ce2:	e7d5      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = EISCONN;
   26ce4:	f015 feb2 	bl	3ca4c <__errno>
   26ce8:	237f      	movs	r3, #127	; 0x7f
   26cea:	e7d1      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = ETIMEDOUT;
   26cec:	f015 feae 	bl	3ca4c <__errno>
   26cf0:	2374      	movs	r3, #116	; 0x74
   26cf2:	e7cd      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = EHOSTDOWN;
   26cf4:	f015 feaa 	bl	3ca4c <__errno>
   26cf8:	2375      	movs	r3, #117	; 0x75
   26cfa:	e7c9      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = EINPROGRESS;
   26cfc:	f015 fea6 	bl	3ca4c <__errno>
   26d00:	2377      	movs	r3, #119	; 0x77
   26d02:	e7c5      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = ECANCELED;
   26d04:	f015 fea2 	bl	3ca4c <__errno>
   26d08:	238c      	movs	r3, #140	; 0x8c
   26d0a:	e7c1      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = ENOKEY;
   26d0c:	f015 fe9e 	bl	3ca4c <__errno>
   26d10:	f240 73d1 	movw	r3, #2001	; 0x7d1
   26d14:	e7bc      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = EKEYEXPIRED;
   26d16:	f015 fe99 	bl	3ca4c <__errno>
   26d1a:	f240 73d2 	movw	r3, #2002	; 0x7d2
   26d1e:	e7b7      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = EKEYREVOKED;
   26d20:	f015 fe94 	bl	3ca4c <__errno>
   26d24:	f240 73d3 	movw	r3, #2003	; 0x7d3
   26d28:	e7b2      	b.n	26c90 <bsd_os_errno_set+0x120>
		errno = EMSGSIZE;
   26d2a:	f015 fe8f 	bl	3ca4c <__errno>
   26d2e:	237a      	movs	r3, #122	; 0x7a
   26d30:	e7ae      	b.n	26c90 <bsd_os_errno_set+0x120>
   26d32:	bf00      	nop
   26d34:	00043518 	.word	0x00043518
   26d38:	00046834 	.word	0x00046834
   26d3c:	00041757 	.word	0x00041757
   26d40:	00043544 	.word	0x00043544
   26d44:	000402cc 	.word	0x000402cc
   26d48:	000402fc 	.word	0x000402fc
   26d4c:	0004356b 	.word	0x0004356b
   26d50:	baadbaad 	.word	0xbaadbaad

00026d54 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   26d58:	4b01      	ldr	r3, [pc, #4]	; (26d60 <bsd_os_application_irq_set+0xc>)
   26d5a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   26d5e:	4770      	bx	lr
   26d60:	e000e100 	.word	0xe000e100

00026d64 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   26d68:	4b01      	ldr	r3, [pc, #4]	; (26d70 <bsd_os_application_irq_clear+0xc>)
   26d6a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   26d6e:	4770      	bx	lr
   26d70:	e000e100 	.word	0xe000e100

00026d74 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26d74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   26d78:	4b01      	ldr	r3, [pc, #4]	; (26d80 <bsd_os_trace_irq_set+0xc>)
   26d7a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   26d7e:	4770      	bx	lr
   26d80:	e000e100 	.word	0xe000e100

00026d84 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26d84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   26d88:	4b01      	ldr	r3, [pc, #4]	; (26d90 <bsd_os_trace_irq_clear+0xc>)
   26d8a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   26d8e:	4770      	bx	lr
   26d90:	e000e100 	.word	0xe000e100

00026d94 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   26d94:	b508      	push	{r3, lr}
	list->head = NULL;
   26d96:	2300      	movs	r3, #0
   26d98:	4a07      	ldr	r2, [pc, #28]	; (26db8 <bsd_os_init+0x24>)
	list->tail = NULL;
   26d9a:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26d9e:	4a07      	ldr	r2, [pc, #28]	; (26dbc <bsd_os_init+0x28>)
   26da0:	e8d2 1fef 	ldaex	r1, [r2]
   26da4:	e8c2 3fe0 	stlex	r0, r3, [r2]
   26da8:	2800      	cmp	r0, #0
   26daa:	d1f9      	bne.n	26da0 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   26dac:	f016 fea1 	bl	3daf2 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   26db0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   26db4:	f016 be92 	b.w	3dadc <trace_task_create>
   26db8:	20023ae8 	.word	0x20023ae8
   26dbc:	20023ae4 	.word	0x20023ae4

00026dc0 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   26dc0:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   26dc4:	d03c      	beq.n	26e40 <z_to_nrf_optname+0x80>
   26dc6:	dc04      	bgt.n	26dd2 <z_to_nrf_optname+0x12>
   26dc8:	2801      	cmp	r0, #1
   26dca:	d044      	beq.n	26e56 <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
   26dcc:	f04f 30ff 	mov.w	r0, #4294967295
		break;
	}

	return retval;
}
   26dd0:	4770      	bx	lr
	switch (z_in_level) {
   26dd2:	f240 2302 	movw	r3, #514	; 0x202
   26dd6:	4298      	cmp	r0, r3
   26dd8:	d052      	beq.n	26e80 <z_to_nrf_optname+0xc0>
   26dda:	f240 2303 	movw	r3, #515	; 0x203
   26dde:	4298      	cmp	r0, r3
   26de0:	d1f4      	bne.n	26dcc <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   26de2:	3901      	subs	r1, #1
   26de4:	2913      	cmp	r1, #19
   26de6:	d8f1      	bhi.n	26dcc <z_to_nrf_optname+0xc>
   26de8:	a301      	add	r3, pc, #4	; (adr r3, 26df0 <z_to_nrf_optname+0x30>)
   26dea:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   26dee:	bf00      	nop
   26df0:	00026e8d 	.word	0x00026e8d
   26df4:	00026e51 	.word	0x00026e51
   26df8:	00026e71 	.word	0x00026e71
   26dfc:	00026e63 	.word	0x00026e63
   26e00:	00026e75 	.word	0x00026e75
   26e04:	00026e79 	.word	0x00026e79
   26e08:	00026e7d 	.word	0x00026e7d
   26e0c:	00026dcd 	.word	0x00026dcd
   26e10:	00026dcd 	.word	0x00026dcd
   26e14:	00026dcd 	.word	0x00026dcd
   26e18:	00026dcd 	.word	0x00026dcd
   26e1c:	00026dcd 	.word	0x00026dcd
   26e20:	00026dcd 	.word	0x00026dcd
   26e24:	00026dcd 	.word	0x00026dcd
   26e28:	00026dcd 	.word	0x00026dcd
   26e2c:	00026dcd 	.word	0x00026dcd
   26e30:	00026dcd 	.word	0x00026dcd
   26e34:	00026dcd 	.word	0x00026dcd
   26e38:	00026dcd 	.word	0x00026dcd
   26e3c:	00026e67 	.word	0x00026e67
		switch (z_in_optname) {
   26e40:	3901      	subs	r1, #1
   26e42:	2905      	cmp	r1, #5
   26e44:	d8c2      	bhi.n	26dcc <z_to_nrf_optname+0xc>
   26e46:	e8df f001 	tbb	[pc, r1]
   26e4a:	1503      	.short	0x1503
   26e4c:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   26e50:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   26e52:	6013      	str	r3, [r2, #0]
   26e54:	e00a      	b.n	26e6c <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   26e56:	2914      	cmp	r1, #20
   26e58:	d005      	beq.n	26e66 <z_to_nrf_optname+0xa6>
   26e5a:	2919      	cmp	r1, #25
   26e5c:	d005      	beq.n	26e6a <z_to_nrf_optname+0xaa>
   26e5e:	2904      	cmp	r1, #4
   26e60:	d1b4      	bne.n	26dcc <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   26e62:	2304      	movs	r3, #4
   26e64:	e7f5      	b.n	26e52 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   26e66:	2314      	movs	r3, #20
   26e68:	e7f3      	b.n	26e52 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   26e6a:	6011      	str	r1, [r2, #0]
	int retval = 0;
   26e6c:	2000      	movs	r0, #0
			break;
   26e6e:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   26e70:	2303      	movs	r3, #3
   26e72:	e7ee      	b.n	26e52 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   26e74:	2305      	movs	r3, #5
   26e76:	e7ec      	b.n	26e52 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   26e78:	2306      	movs	r3, #6
   26e7a:	e7ea      	b.n	26e52 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   26e7c:	2307      	movs	r3, #7
   26e7e:	e7e8      	b.n	26e52 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   26e80:	2902      	cmp	r1, #2
   26e82:	d0e5      	beq.n	26e50 <z_to_nrf_optname+0x90>
   26e84:	2903      	cmp	r1, #3
   26e86:	d0f3      	beq.n	26e70 <z_to_nrf_optname+0xb0>
   26e88:	2901      	cmp	r1, #1
   26e8a:	d19f      	bne.n	26dcc <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   26e8c:	2301      	movs	r3, #1
   26e8e:	e7e0      	b.n	26e52 <z_to_nrf_optname+0x92>

00026e90 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   26e90:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   26e92:	4b03      	ldr	r3, [pc, #12]	; (26ea0 <nrf91_socket_iface_init+0x10>)
   26e94:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   26e96:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   26e98:	4802      	ldr	r0, [pc, #8]	; (26ea4 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   26e9a:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   26e9c:	f7fc bb56 	b.w	2354c <socket_offload_register>
   26ea0:	20023b40 	.word	0x20023b40
   26ea4:	00040854 	.word	0x00040854

00026ea8 <dk_set_leds_state.part.7>:
int dk_set_leds(u32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(u32_t leds_on_mask, u32_t leds_off_mask)
   26ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26eac:	4606      	mov	r6, r0
   26eae:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   26eb0:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_write(led_devs[i],
   26eb2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 26f1c <dk_set_leds_state.part.7+0x74>
						 led_pins[i].number, val);
   26eb6:	f8df 9068 	ldr.w	r9, [pc, #104]	; 26f20 <dk_set_leds_state.part.7+0x78>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   26eba:	fa26 f304 	lsr.w	r3, r6, r4
   26ebe:	fa27 f204 	lsr.w	r2, r7, r4
   26ec2:	431a      	orrs	r2, r3
   26ec4:	07d2      	lsls	r2, r2, #31
   26ec6:	d51d      	bpl.n	26f04 <dk_set_leds_state.part.7+0x5c>
						 led_pins[i].number, val);
   26ec8:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
			int err = gpio_pin_write(led_devs[i],
   26ecc:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
   26ed0:	7912      	ldrb	r2, [r2, #4]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
   26ed2:	6841      	ldr	r1, [r0, #4]
   26ed4:	f003 0301 	and.w	r3, r3, #1
   26ed8:	684d      	ldr	r5, [r1, #4]
   26eda:	2100      	movs	r1, #0
   26edc:	47a8      	blx	r5
			if (err) {
   26ede:	4605      	mov	r5, r0
   26ee0:	b180      	cbz	r0, 26f04 <dk_set_leds_state.part.7+0x5c>
				LOG_ERR("Cannot write LED gpio");
   26ee2:	2301      	movs	r3, #1
   26ee4:	f04f 0000 	mov.w	r0, #0
   26ee8:	4a09      	ldr	r2, [pc, #36]	; (26f10 <dk_set_leds_state.part.7+0x68>)
   26eea:	f363 0007 	bfi	r0, r3, #0, #8
   26eee:	4b09      	ldr	r3, [pc, #36]	; (26f14 <dk_set_leds_state.part.7+0x6c>)
   26ef0:	4909      	ldr	r1, [pc, #36]	; (26f18 <dk_set_leds_state.part.7+0x70>)
   26ef2:	1a9b      	subs	r3, r3, r2
   26ef4:	08db      	lsrs	r3, r3, #3
   26ef6:	f363 108f 	bfi	r0, r3, #6, #10
   26efa:	f015 fbc2 	bl	3c682 <log_string_sync>
			}
		}
	}

	return 0;
}
   26efe:	4628      	mov	r0, r5
   26f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   26f04:	3401      	adds	r4, #1
   26f06:	2c04      	cmp	r4, #4
   26f08:	d1d7      	bne.n	26eba <dk_set_leds_state.part.7+0x12>
	return 0;
   26f0a:	2500      	movs	r5, #0
   26f0c:	e7f7      	b.n	26efe <dk_set_leds_state.part.7+0x56>
   26f0e:	bf00      	nop
   26f10:	000402cc 	.word	0x000402cc
   26f14:	0004032c 	.word	0x0004032c
   26f18:	000436e5 	.word	0x000436e5
   26f1c:	20023ba8 	.word	0x20023ba8
   26f20:	000408b4 	.word	0x000408b4

00026f24 <button_pressed>:
{
   26f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   26f26:	f04f 0320 	mov.w	r3, #32
   26f2a:	f3ef 8511 	mrs	r5, BASEPRI
   26f2e:	f383 8811 	msr	BASEPRI, r3
   26f32:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26f36:	4833      	ldr	r0, [pc, #204]	; (27004 <button_pressed+0xe0>)
   26f38:	f011 fdde 	bl	38af8 <z_spin_lock_valid>
   26f3c:	b968      	cbnz	r0, 26f5a <button_pressed+0x36>
   26f3e:	234a      	movs	r3, #74	; 0x4a
   26f40:	4a31      	ldr	r2, [pc, #196]	; (27008 <button_pressed+0xe4>)
   26f42:	4932      	ldr	r1, [pc, #200]	; (2700c <button_pressed+0xe8>)
   26f44:	4832      	ldr	r0, [pc, #200]	; (27010 <button_pressed+0xec>)
   26f46:	f015 fb45 	bl	3c5d4 <printk>
   26f4a:	492e      	ldr	r1, [pc, #184]	; (27004 <button_pressed+0xe0>)
   26f4c:	4831      	ldr	r0, [pc, #196]	; (27014 <button_pressed+0xf0>)
   26f4e:	f015 fb41 	bl	3c5d4 <printk>
   26f52:	214a      	movs	r1, #74	; 0x4a
   26f54:	482c      	ldr	r0, [pc, #176]	; (27008 <button_pressed+0xe4>)
   26f56:	f015 fb83 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   26f5a:	482a      	ldr	r0, [pc, #168]	; (27004 <button_pressed+0xe0>)
   26f5c:	f011 fdea 	bl	38b34 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   26f60:	2400      	movs	r4, #0
   26f62:	4e2d      	ldr	r6, [pc, #180]	; (27018 <button_pressed+0xf4>)
			  button_pins[i].number);
   26f64:	4f2d      	ldr	r7, [pc, #180]	; (2701c <button_pressed+0xf8>)
   26f66:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
			err = gpio_pin_disable_callback(button_devs[i],
   26f6a:	f856 0b04 	ldr.w	r0, [r6], #4
   26f6e:	791a      	ldrb	r2, [r3, #4]
					      int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->disable_callback == NULL) {
   26f70:	6843      	ldr	r3, [r0, #4]
   26f72:	695b      	ldr	r3, [r3, #20]
   26f74:	b1ab      	cbz	r3, 26fa2 <button_pressed+0x7e>
		return -ENOTSUP;
	}

	return api->disable_callback(port, access_op, pin);
   26f76:	2100      	movs	r1, #0
   26f78:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   26f7a:	3401      	adds	r4, #1
   26f7c:	2c04      	cmp	r4, #4
   26f7e:	d013      	beq.n	26fa8 <button_pressed+0x84>
   26f80:	2800      	cmp	r0, #0
   26f82:	d0f0      	beq.n	26f66 <button_pressed+0x42>
		LOG_ERR("Cannot disable callbacks");
   26f84:	2301      	movs	r3, #1
   26f86:	f04f 0000 	mov.w	r0, #0
   26f8a:	4a25      	ldr	r2, [pc, #148]	; (27020 <button_pressed+0xfc>)
   26f8c:	f363 0007 	bfi	r0, r3, #0, #8
   26f90:	4b24      	ldr	r3, [pc, #144]	; (27024 <button_pressed+0x100>)
   26f92:	4925      	ldr	r1, [pc, #148]	; (27028 <button_pressed+0x104>)
   26f94:	1a9b      	subs	r3, r3, r2
   26f96:	08db      	lsrs	r3, r3, #3
   26f98:	f363 108f 	bfi	r0, r3, #6, #10
   26f9c:	f015 fb71 	bl	3c682 <log_string_sync>
   26fa0:	e004      	b.n	26fac <button_pressed+0x88>
		return -ENOTSUP;
   26fa2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26fa6:	e7e8      	b.n	26f7a <button_pressed+0x56>
	if (err) {
   26fa8:	2800      	cmp	r0, #0
   26faa:	d1eb      	bne.n	26f84 <button_pressed+0x60>
	switch (state) {
   26fac:	4b1f      	ldr	r3, [pc, #124]	; (2702c <button_pressed+0x108>)
   26fae:	781a      	ldrb	r2, [r3, #0]
   26fb0:	b9e2      	cbnz	r2, 26fec <button_pressed+0xc8>
		state = STATE_SCANNING;
   26fb2:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   26fb4:	491e      	ldr	r1, [pc, #120]	; (27030 <button_pressed+0x10c>)
   26fb6:	481f      	ldr	r0, [pc, #124]	; (27034 <button_pressed+0x110>)
   26fb8:	701a      	strb	r2, [r3, #0]
   26fba:	f011 ffa3 	bl	38f04 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26fbe:	4811      	ldr	r0, [pc, #68]	; (27004 <button_pressed+0xe0>)
   26fc0:	f011 fda8 	bl	38b14 <z_spin_unlock_valid>
   26fc4:	b968      	cbnz	r0, 26fe2 <button_pressed+0xbe>
   26fc6:	235d      	movs	r3, #93	; 0x5d
   26fc8:	4a0f      	ldr	r2, [pc, #60]	; (27008 <button_pressed+0xe4>)
   26fca:	491b      	ldr	r1, [pc, #108]	; (27038 <button_pressed+0x114>)
   26fcc:	4810      	ldr	r0, [pc, #64]	; (27010 <button_pressed+0xec>)
   26fce:	f015 fb01 	bl	3c5d4 <printk>
   26fd2:	490c      	ldr	r1, [pc, #48]	; (27004 <button_pressed+0xe0>)
   26fd4:	4819      	ldr	r0, [pc, #100]	; (2703c <button_pressed+0x118>)
   26fd6:	f015 fafd 	bl	3c5d4 <printk>
   26fda:	215d      	movs	r1, #93	; 0x5d
   26fdc:	480a      	ldr	r0, [pc, #40]	; (27008 <button_pressed+0xe4>)
   26fde:	f015 fb3f 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   26fe2:	f385 8811 	msr	BASEPRI, r5
   26fe6:	f3bf 8f6f 	isb	sy
}
   26fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   26fec:	23f2      	movs	r3, #242	; 0xf2
   26fee:	4a14      	ldr	r2, [pc, #80]	; (27040 <button_pressed+0x11c>)
   26ff0:	4914      	ldr	r1, [pc, #80]	; (27044 <button_pressed+0x120>)
   26ff2:	4807      	ldr	r0, [pc, #28]	; (27010 <button_pressed+0xec>)
   26ff4:	f015 faee 	bl	3c5d4 <printk>
   26ff8:	21f2      	movs	r1, #242	; 0xf2
   26ffa:	4811      	ldr	r0, [pc, #68]	; (27040 <button_pressed+0x11c>)
   26ffc:	f015 fb30 	bl	3c660 <assert_post_action>
		break;
   27000:	e7dd      	b.n	26fbe <button_pressed+0x9a>
   27002:	bf00      	nop
   27004:	20023bb8 	.word	0x20023bb8
   27008:	00042269 	.word	0x00042269
   2700c:	00042288 	.word	0x00042288
   27010:	00041757 	.word	0x00041757
   27014:	0004229d 	.word	0x0004229d
   27018:	20023b44 	.word	0x20023b44
   2701c:	00040894 	.word	0x00040894
   27020:	000402cc 	.word	0x000402cc
   27024:	0004032c 	.word	0x0004032c
   27028:	000435a4 	.word	0x000435a4
   2702c:	20029f53 	.word	0x20029f53
   27030:	20023b74 	.word	0x20023b74
   27034:	200293b0 	.word	0x200293b0
   27038:	000422b5 	.word	0x000422b5
   2703c:	000422cc 	.word	0x000422cc
   27040:	000435bd 	.word	0x000435bd
   27044:	00046834 	.word	0x00046834

00027048 <buttons_scan_fn>:
{
   27048:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t ret = 0;
   2704c:	2400      	movs	r4, #0
   2704e:	4f6d      	ldr	r7, [pc, #436]	; (27204 <buttons_scan_fn+0x1bc>)
			button_devs[i], button_pins[i].number, &val)) {
   27050:	f8df 920c 	ldr.w	r9, [pc, #524]	; 27260 <buttons_scan_fn+0x218>
{
   27054:	463e      	mov	r6, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   27056:	4625      	mov	r5, r4
   27058:	46c8      	mov	r8, r9
			button_devs[i], button_pins[i].number, &val)) {
   2705a:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		if (gpio_pin_read(
   2705e:	f856 0b04 	ldr.w	r0, [r6], #4
   27062:	791a      	ldrb	r2, [r3, #4]
	return api->read(port, access_op, pin, value);
   27064:	6843      	ldr	r3, [r0, #4]
   27066:	2100      	movs	r1, #0
   27068:	f8d3 a008 	ldr.w	sl, [r3, #8]
   2706c:	ab01      	add	r3, sp, #4
   2706e:	47d0      	blx	sl
   27070:	2800      	cmp	r0, #0
   27072:	d04b      	beq.n	2710c <buttons_scan_fn+0xc4>
			LOG_ERR("Cannot read gpio pin");
   27074:	2301      	movs	r3, #1
   27076:	f04f 0000 	mov.w	r0, #0
   2707a:	4a63      	ldr	r2, [pc, #396]	; (27208 <buttons_scan_fn+0x1c0>)
   2707c:	f363 0007 	bfi	r0, r3, #0, #8
   27080:	4b62      	ldr	r3, [pc, #392]	; (2720c <buttons_scan_fn+0x1c4>)
   27082:	4963      	ldr	r1, [pc, #396]	; (27210 <buttons_scan_fn+0x1c8>)
   27084:	1a9b      	subs	r3, r3, r2
   27086:	08db      	lsrs	r3, r3, #3
   27088:	f363 108f 	bfi	r0, r3, #6, #10
   2708c:	f015 faf9 	bl	3c682 <log_string_sync>
			return 0;
   27090:	2400      	movs	r4, #0
   27092:	4b60      	ldr	r3, [pc, #384]	; (27214 <buttons_scan_fn+0x1cc>)
   27094:	e8d3 2fef 	ldaex	r2, [r3]
   27098:	e8c3 4fe1 	stlex	r1, r4, [r3]
   2709c:	2900      	cmp	r1, #0
   2709e:	d1f9      	bne.n	27094 <buttons_scan_fn+0x4c>
	if (!initial_run) {
   270a0:	4b5d      	ldr	r3, [pc, #372]	; (27218 <buttons_scan_fn+0x1d0>)
   270a2:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 27264 <buttons_scan_fn+0x21c>
   270a6:	781a      	ldrb	r2, [r3, #0]
   270a8:	2a00      	cmp	r2, #0
   270aa:	d141      	bne.n	27130 <buttons_scan_fn+0xe8>
		if (button_scan != last_button_scan) {
   270ac:	f8d9 6000 	ldr.w	r6, [r9]
   270b0:	42a6      	cmp	r6, r4
   270b2:	d011      	beq.n	270d8 <buttons_scan_fn+0x90>
	if (button_handler_cb != NULL) {
   270b4:	4b59      	ldr	r3, [pc, #356]	; (2721c <buttons_scan_fn+0x1d4>)
			u32_t has_changed = (button_scan ^ last_button_scan);
   270b6:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   270b8:	681b      	ldr	r3, [r3, #0]
   270ba:	b113      	cbz	r3, 270c2 <buttons_scan_fn+0x7a>
		button_handler_cb(button_state, has_changed);
   270bc:	4631      	mov	r1, r6
   270be:	4620      	mov	r0, r4
   270c0:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   270c2:	f04f 31ff 	mov.w	r1, #4294967295
   270c6:	4856      	ldr	r0, [pc, #344]	; (27220 <buttons_scan_fn+0x1d8>)
   270c8:	f010 f806 	bl	370d8 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   270cc:	4b55      	ldr	r3, [pc, #340]	; (27224 <buttons_scan_fn+0x1dc>)
   270ce:	681d      	ldr	r5, [r3, #0]
   270d0:	bb2d      	cbnz	r5, 2711e <buttons_scan_fn+0xd6>
	return z_impl_k_mutex_unlock(mutex);
   270d2:	4853      	ldr	r0, [pc, #332]	; (27220 <buttons_scan_fn+0x1d8>)
   270d4:	f010 f8de 	bl	37294 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   270d8:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   270dc:	b35c      	cbz	r4, 27136 <buttons_scan_fn+0xee>
   270de:	220a      	movs	r2, #10
   270e0:	4951      	ldr	r1, [pc, #324]	; (27228 <buttons_scan_fn+0x1e0>)
   270e2:	4852      	ldr	r0, [pc, #328]	; (2722c <buttons_scan_fn+0x1e4>)
   270e4:	f011 ff0e 	bl	38f04 <k_delayed_work_submit_to_queue>
		if (err) {
   270e8:	b168      	cbz	r0, 27106 <buttons_scan_fn+0xbe>
			LOG_ERR("Cannot add work to workqueue");
   270ea:	2301      	movs	r3, #1
   270ec:	f04f 0000 	mov.w	r0, #0
   270f0:	4a45      	ldr	r2, [pc, #276]	; (27208 <buttons_scan_fn+0x1c0>)
   270f2:	f363 0007 	bfi	r0, r3, #0, #8
   270f6:	4b45      	ldr	r3, [pc, #276]	; (2720c <buttons_scan_fn+0x1c4>)
   270f8:	494d      	ldr	r1, [pc, #308]	; (27230 <buttons_scan_fn+0x1e8>)
   270fa:	1a9b      	subs	r3, r3, r2
   270fc:	08db      	lsrs	r3, r3, #3
   270fe:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Cannot enable callbacks");
   27102:	f015 fabe 	bl	3c682 <log_string_sync>
}
   27106:	b002      	add	sp, #8
   27108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   2710c:	9b01      	ldr	r3, [sp, #4]
   2710e:	b913      	cbnz	r3, 27116 <buttons_scan_fn+0xce>
			ret |= 1U << i;
   27110:	2301      	movs	r3, #1
   27112:	40ab      	lsls	r3, r5
   27114:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   27116:	3501      	adds	r5, #1
   27118:	2d04      	cmp	r5, #4
   2711a:	d19e      	bne.n	2705a <buttons_scan_fn+0x12>
   2711c:	e7b9      	b.n	27092 <buttons_scan_fn+0x4a>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   2711e:	3d04      	subs	r5, #4
   27120:	2d00      	cmp	r5, #0
   27122:	d0d6      	beq.n	270d2 <buttons_scan_fn+0x8a>
			handler->cb(button_state, has_changed);
   27124:	682b      	ldr	r3, [r5, #0]
   27126:	4631      	mov	r1, r6
   27128:	4620      	mov	r0, r4
   2712a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2712c:	686d      	ldr	r5, [r5, #4]
	return node->next;
   2712e:	e7cf      	b.n	270d0 <buttons_scan_fn+0x88>
		initial_run = false;
   27130:	2200      	movs	r2, #0
   27132:	701a      	strb	r2, [r3, #0]
   27134:	e7d0      	b.n	270d8 <buttons_scan_fn+0x90>
	__asm__ volatile(
   27136:	f04f 0320 	mov.w	r3, #32
   2713a:	f3ef 8611 	mrs	r6, BASEPRI
   2713e:	f383 8811 	msr	BASEPRI, r3
   27142:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27146:	483b      	ldr	r0, [pc, #236]	; (27234 <buttons_scan_fn+0x1ec>)
   27148:	f011 fcd6 	bl	38af8 <z_spin_lock_valid>
   2714c:	b968      	cbnz	r0, 2716a <buttons_scan_fn+0x122>
   2714e:	234a      	movs	r3, #74	; 0x4a
   27150:	4a39      	ldr	r2, [pc, #228]	; (27238 <buttons_scan_fn+0x1f0>)
   27152:	493a      	ldr	r1, [pc, #232]	; (2723c <buttons_scan_fn+0x1f4>)
   27154:	483a      	ldr	r0, [pc, #232]	; (27240 <buttons_scan_fn+0x1f8>)
   27156:	f015 fa3d 	bl	3c5d4 <printk>
   2715a:	4936      	ldr	r1, [pc, #216]	; (27234 <buttons_scan_fn+0x1ec>)
   2715c:	4839      	ldr	r0, [pc, #228]	; (27244 <buttons_scan_fn+0x1fc>)
   2715e:	f015 fa39 	bl	3c5d4 <printk>
   27162:	214a      	movs	r1, #74	; 0x4a
   27164:	4834      	ldr	r0, [pc, #208]	; (27238 <buttons_scan_fn+0x1f0>)
   27166:	f015 fa7b 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   2716a:	4832      	ldr	r0, [pc, #200]	; (27234 <buttons_scan_fn+0x1ec>)
   2716c:	f011 fce2 	bl	38b34 <z_spin_lock_set_owner>
		switch (state) {
   27170:	4b35      	ldr	r3, [pc, #212]	; (27248 <buttons_scan_fn+0x200>)
   27172:	781a      	ldrb	r2, [r3, #0]
   27174:	2a01      	cmp	r2, #1
   27176:	d139      	bne.n	271ec <buttons_scan_fn+0x1a4>
			state = STATE_WAITING;
   27178:	2200      	movs	r2, #0
   2717a:	701a      	strb	r2, [r3, #0]
			  button_pins[i].number);
   2717c:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
			err = gpio_pin_enable_callback(button_devs[i],
   27180:	f857 0b04 	ldr.w	r0, [r7], #4
   27184:	791a      	ldrb	r2, [r3, #4]
	if (api->enable_callback == NULL) {
   27186:	6843      	ldr	r3, [r0, #4]
   27188:	691b      	ldr	r3, [r3, #16]
   2718a:	b363      	cbz	r3, 271e6 <buttons_scan_fn+0x19e>
	return api->enable_callback(port, access_op, pin);
   2718c:	2100      	movs	r1, #0
   2718e:	4798      	blx	r3
   27190:	4605      	mov	r5, r0
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   27192:	3401      	adds	r4, #1
   27194:	2c04      	cmp	r4, #4
   27196:	d001      	beq.n	2719c <buttons_scan_fn+0x154>
   27198:	2d00      	cmp	r5, #0
   2719a:	d0ef      	beq.n	2717c <buttons_scan_fn+0x134>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2719c:	4825      	ldr	r0, [pc, #148]	; (27234 <buttons_scan_fn+0x1ec>)
   2719e:	f011 fcb9 	bl	38b14 <z_spin_unlock_valid>
   271a2:	b968      	cbnz	r0, 271c0 <buttons_scan_fn+0x178>
   271a4:	235d      	movs	r3, #93	; 0x5d
   271a6:	4a24      	ldr	r2, [pc, #144]	; (27238 <buttons_scan_fn+0x1f0>)
   271a8:	4928      	ldr	r1, [pc, #160]	; (2724c <buttons_scan_fn+0x204>)
   271aa:	4825      	ldr	r0, [pc, #148]	; (27240 <buttons_scan_fn+0x1f8>)
   271ac:	f015 fa12 	bl	3c5d4 <printk>
   271b0:	4920      	ldr	r1, [pc, #128]	; (27234 <buttons_scan_fn+0x1ec>)
   271b2:	4827      	ldr	r0, [pc, #156]	; (27250 <buttons_scan_fn+0x208>)
   271b4:	f015 fa0e 	bl	3c5d4 <printk>
   271b8:	215d      	movs	r1, #93	; 0x5d
   271ba:	481f      	ldr	r0, [pc, #124]	; (27238 <buttons_scan_fn+0x1f0>)
   271bc:	f015 fa50 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   271c0:	f386 8811 	msr	BASEPRI, r6
   271c4:	f3bf 8f6f 	isb	sy
		if (err) {
   271c8:	2d00      	cmp	r5, #0
   271ca:	d09c      	beq.n	27106 <buttons_scan_fn+0xbe>
			LOG_ERR("Cannot enable callbacks");
   271cc:	2301      	movs	r3, #1
   271ce:	f04f 0000 	mov.w	r0, #0
   271d2:	4a0d      	ldr	r2, [pc, #52]	; (27208 <buttons_scan_fn+0x1c0>)
   271d4:	f363 0007 	bfi	r0, r3, #0, #8
   271d8:	4b0c      	ldr	r3, [pc, #48]	; (2720c <buttons_scan_fn+0x1c4>)
   271da:	491e      	ldr	r1, [pc, #120]	; (27254 <buttons_scan_fn+0x20c>)
   271dc:	1a9b      	subs	r3, r3, r2
   271de:	08db      	lsrs	r3, r3, #3
   271e0:	f363 108f 	bfi	r0, r3, #6, #10
   271e4:	e78d      	b.n	27102 <buttons_scan_fn+0xba>
		return -ENOTSUP;
   271e6:	f06f 0585 	mvn.w	r5, #133	; 0x85
   271ea:	e7d2      	b.n	27192 <buttons_scan_fn+0x14a>
			__ASSERT_NO_MSG(false);
   271ec:	23a8      	movs	r3, #168	; 0xa8
   271ee:	4a1a      	ldr	r2, [pc, #104]	; (27258 <buttons_scan_fn+0x210>)
   271f0:	491a      	ldr	r1, [pc, #104]	; (2725c <buttons_scan_fn+0x214>)
   271f2:	4813      	ldr	r0, [pc, #76]	; (27240 <buttons_scan_fn+0x1f8>)
   271f4:	f015 f9ee 	bl	3c5d4 <printk>
   271f8:	21a8      	movs	r1, #168	; 0xa8
   271fa:	4817      	ldr	r0, [pc, #92]	; (27258 <buttons_scan_fn+0x210>)
   271fc:	f015 fa30 	bl	3c660 <assert_post_action>
		int err = 0;
   27200:	2500      	movs	r5, #0
   27202:	e7cb      	b.n	2719c <buttons_scan_fn+0x154>
   27204:	20023b44 	.word	0x20023b44
   27208:	000402cc 	.word	0x000402cc
   2720c:	0004032c 	.word	0x0004032c
   27210:	00043603 	.word	0x00043603
   27214:	20023bbc 	.word	0x20023bbc
   27218:	20031750 	.word	0x20031750
   2721c:	20023b54 	.word	0x20023b54
   27220:	20023b58 	.word	0x20023b58
   27224:	20023b6c 	.word	0x20023b6c
   27228:	20023b74 	.word	0x20023b74
   2722c:	200293b0 	.word	0x200293b0
   27230:	00043618 	.word	0x00043618
   27234:	20023bb8 	.word	0x20023bb8
   27238:	00042269 	.word	0x00042269
   2723c:	00042288 	.word	0x00042288
   27240:	00041757 	.word	0x00041757
   27244:	0004229d 	.word	0x0004229d
   27248:	20029f53 	.word	0x20029f53
   2724c:	000422b5 	.word	0x000422b5
   27250:	000422cc 	.word	0x000422cc
   27254:	00043635 	.word	0x00043635
   27258:	000435bd 	.word	0x000435bd
   2725c:	00046834 	.word	0x00046834
   27260:	00040894 	.word	0x00040894
   27264:	20023ba0 	.word	0x20023ba0

00027268 <dk_leds_init>:
{
   27268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2726a:	2500      	movs	r5, #0
   2726c:	4c1d      	ldr	r4, [pc, #116]	; (272e4 <dk_leds_init+0x7c>)
   2726e:	4f1e      	ldr	r7, [pc, #120]	; (272e8 <dk_leds_init+0x80>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   27270:	6820      	ldr	r0, [r4, #0]
   27272:	f00f fa41 	bl	366f8 <z_impl_device_get_binding>
   27276:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   2727a:	b988      	cbnz	r0, 272a0 <dk_leds_init+0x38>
			LOG_ERR("Cannot bind gpio device");
   2727c:	2301      	movs	r3, #1
   2727e:	f04f 0000 	mov.w	r0, #0
   27282:	4a1a      	ldr	r2, [pc, #104]	; (272ec <dk_leds_init+0x84>)
   27284:	f363 0007 	bfi	r0, r3, #0, #8
   27288:	4b19      	ldr	r3, [pc, #100]	; (272f0 <dk_leds_init+0x88>)
   2728a:	491a      	ldr	r1, [pc, #104]	; (272f4 <dk_leds_init+0x8c>)
   2728c:	1a9b      	subs	r3, r3, r2
   2728e:	08db      	lsrs	r3, r3, #3
   27290:	f363 108f 	bfi	r0, r3, #6, #10
   27294:	f015 f9f5 	bl	3c682 <log_string_sync>
			return -ENODEV;
   27298:	f06f 0612 	mvn.w	r6, #18
}
   2729c:	4630      	mov	r0, r6
   2729e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   272a0:	7922      	ldrb	r2, [r4, #4]
	return api->config(port, access_op, pin, flags);
   272a2:	6843      	ldr	r3, [r0, #4]
   272a4:	2100      	movs	r1, #0
   272a6:	681e      	ldr	r6, [r3, #0]
   272a8:	2301      	movs	r3, #1
   272aa:	47b0      	blx	r6
		if (err) {
   272ac:	4606      	mov	r6, r0
   272ae:	b170      	cbz	r0, 272ce <dk_leds_init+0x66>
			LOG_ERR("Cannot configure LED gpio");
   272b0:	2301      	movs	r3, #1
   272b2:	f04f 0000 	mov.w	r0, #0
   272b6:	4a0d      	ldr	r2, [pc, #52]	; (272ec <dk_leds_init+0x84>)
   272b8:	f363 0007 	bfi	r0, r3, #0, #8
   272bc:	4b0c      	ldr	r3, [pc, #48]	; (272f0 <dk_leds_init+0x88>)
   272be:	490e      	ldr	r1, [pc, #56]	; (272f8 <dk_leds_init+0x90>)
   272c0:	1a9b      	subs	r3, r3, r2
   272c2:	08db      	lsrs	r3, r3, #3
   272c4:	f363 108f 	bfi	r0, r3, #6, #10
   272c8:	f015 f9db 	bl	3c682 <log_string_sync>
			return err;
   272cc:	e7e6      	b.n	2729c <dk_leds_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   272ce:	3501      	adds	r5, #1
   272d0:	2d04      	cmp	r5, #4
   272d2:	f104 0408 	add.w	r4, r4, #8
   272d6:	d1cb      	bne.n	27270 <dk_leds_init+0x8>
}
   272d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   272dc:	210f      	movs	r1, #15
   272de:	f7ff bde3 	b.w	26ea8 <dk_set_leds_state.part.7>
   272e2:	bf00      	nop
   272e4:	000408b4 	.word	0x000408b4
   272e8:	20023ba8 	.word	0x20023ba8
   272ec:	000402cc 	.word	0x000402cc
   272f0:	0004032c 	.word	0x0004032c
   272f4:	000436b3 	.word	0x000436b3
   272f8:	000436cb 	.word	0x000436cb

000272fc <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   272fc:	4b05      	ldr	r3, [pc, #20]	; (27314 <dk_read_buttons+0x18>)
   272fe:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   27302:	b100      	cbz	r0, 27306 <dk_read_buttons+0xa>
		*button_state = current_state;
   27304:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   27306:	4804      	ldr	r0, [pc, #16]	; (27318 <dk_read_buttons+0x1c>)
   27308:	b111      	cbz	r1, 27310 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   2730a:	6802      	ldr	r2, [r0, #0]
   2730c:	405a      	eors	r2, r3
   2730e:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   27310:	6003      	str	r3, [r0, #0]
}
   27312:	4770      	bx	lr
   27314:	20023bbc 	.word	0x20023bbc
   27318:	20023ba4 	.word	0x20023ba4

0002731c <dk_buttons_init>:
{
   2731c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   27320:	4b66      	ldr	r3, [pc, #408]	; (274bc <dk_buttons_init+0x1a0>)
   27322:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   27324:	4d66      	ldr	r5, [pc, #408]	; (274c0 <dk_buttons_init+0x1a4>)
   27326:	4f67      	ldr	r7, [pc, #412]	; (274c4 <dk_buttons_init+0x1a8>)
   27328:	4867      	ldr	r0, [pc, #412]	; (274c8 <dk_buttons_init+0x1ac>)
   2732a:	f017 fb47 	bl	3e9bc <z_impl_k_mutex_init>
   2732e:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   27330:	2600      	movs	r6, #0
   27332:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   27334:	6828      	ldr	r0, [r5, #0]
   27336:	f00f f9df 	bl	366f8 <z_impl_device_get_binding>
   2733a:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   2733e:	b990      	cbnz	r0, 27366 <dk_buttons_init+0x4a>
			LOG_ERR("Cannot bind gpio device");
   27340:	2301      	movs	r3, #1
   27342:	f04f 0000 	mov.w	r0, #0
   27346:	4a61      	ldr	r2, [pc, #388]	; (274cc <dk_buttons_init+0x1b0>)
   27348:	f363 0007 	bfi	r0, r3, #0, #8
   2734c:	4b60      	ldr	r3, [pc, #384]	; (274d0 <dk_buttons_init+0x1b4>)
   2734e:	4961      	ldr	r1, [pc, #388]	; (274d4 <dk_buttons_init+0x1b8>)
   27350:	1a9b      	subs	r3, r3, r2
   27352:	08db      	lsrs	r3, r3, #3
   27354:	f363 108f 	bfi	r0, r3, #6, #10
   27358:	f015 f993 	bl	3c682 <log_string_sync>
			return -ENODEV;
   2735c:	f06f 0412 	mvn.w	r4, #18
}
   27360:	4620      	mov	r0, r4
   27362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   27366:	792a      	ldrb	r2, [r5, #4]
   27368:	6843      	ldr	r3, [r0, #4]
   2736a:	2100      	movs	r1, #0
   2736c:	681c      	ldr	r4, [r3, #0]
   2736e:	f44f 7380 	mov.w	r3, #256	; 0x100
   27372:	47a0      	blx	r4
		if (err) {
   27374:	4604      	mov	r4, r0
   27376:	b170      	cbz	r0, 27396 <dk_buttons_init+0x7a>
			LOG_ERR("Cannot configure button gpio");
   27378:	2301      	movs	r3, #1
   2737a:	f04f 0000 	mov.w	r0, #0
   2737e:	4a53      	ldr	r2, [pc, #332]	; (274cc <dk_buttons_init+0x1b0>)
   27380:	f363 0007 	bfi	r0, r3, #0, #8
   27384:	4b52      	ldr	r3, [pc, #328]	; (274d0 <dk_buttons_init+0x1b4>)
   27386:	4954      	ldr	r1, [pc, #336]	; (274d8 <dk_buttons_init+0x1bc>)
   27388:	1a9b      	subs	r3, r3, r2
   2738a:	08db      	lsrs	r3, r3, #3
   2738c:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Cannot add work to workqueue");
   27390:	f015 f977 	bl	3c682 <log_string_sync>
		return err;
   27394:	e7e4      	b.n	27360 <dk_buttons_init+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   27396:	3601      	adds	r6, #1
   27398:	2e04      	cmp	r6, #4
   2739a:	f105 0508 	add.w	r5, r5, #8
   2739e:	d1c9      	bne.n	27334 <dk_buttons_init+0x18>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   273a0:	4605      	mov	r5, r0
   273a2:	4e48      	ldr	r6, [pc, #288]	; (274c4 <dk_buttons_init+0x1a8>)
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   273a4:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   273a8:	f856 0b04 	ldr.w	r0, [r6], #4
   273ac:	791a      	ldrb	r2, [r3, #4]
   273ae:	6843      	ldr	r3, [r0, #4]
   273b0:	2100      	movs	r1, #0
   273b2:	681c      	ldr	r4, [r3, #0]
   273b4:	f44f 7381 	mov.w	r3, #258	; 0x102
   273b8:	47a0      	blx	r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   273ba:	3501      	adds	r5, #1
   273bc:	2d04      	cmp	r5, #4
   273be:	4604      	mov	r4, r0
   273c0:	d00e      	beq.n	273e0 <dk_buttons_init+0xc4>
   273c2:	2800      	cmp	r0, #0
   273c4:	d0ee      	beq.n	273a4 <dk_buttons_init+0x88>
		LOG_ERR("Cannot set interrupt mode");
   273c6:	2301      	movs	r3, #1
   273c8:	f04f 0000 	mov.w	r0, #0
   273cc:	4a3f      	ldr	r2, [pc, #252]	; (274cc <dk_buttons_init+0x1b0>)
   273ce:	f363 0007 	bfi	r0, r3, #0, #8
   273d2:	4b3f      	ldr	r3, [pc, #252]	; (274d0 <dk_buttons_init+0x1b4>)
   273d4:	4941      	ldr	r1, [pc, #260]	; (274dc <dk_buttons_init+0x1c0>)
   273d6:	1a9b      	subs	r3, r3, r2
   273d8:	08db      	lsrs	r3, r3, #3
   273da:	f363 108f 	bfi	r0, r3, #6, #10
   273de:	e7d7      	b.n	27390 <dk_buttons_init+0x74>
	if (err) {
   273e0:	2800      	cmp	r0, #0
   273e2:	d1f0      	bne.n	273c6 <dk_buttons_init+0xaa>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   273e4:	4605      	mov	r5, r0
	u32_t pin_mask = 0;
   273e6:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   273e8:	f04f 0b01 	mov.w	fp, #1
   273ec:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 274c4 <dk_buttons_init+0x1a8>
			button_pins[i].number);
   273f0:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
		err = gpio_pin_disable_callback(button_devs[i],
   273f4:	f85a 0b04 	ldr.w	r0, [sl], #4
			button_pins[i].number);
   273f8:	791e      	ldrb	r6, [r3, #4]
	if (api->disable_callback == NULL) {
   273fa:	6843      	ldr	r3, [r0, #4]
   273fc:	695b      	ldr	r3, [r3, #20]
   273fe:	b18b      	cbz	r3, 27424 <dk_buttons_init+0x108>
	return api->disable_callback(port, access_op, pin);
   27400:	4632      	mov	r2, r6
   27402:	2100      	movs	r1, #0
   27404:	4798      	blx	r3
		if (err) {
   27406:	4604      	mov	r4, r0
   27408:	b178      	cbz	r0, 2742a <dk_buttons_init+0x10e>
			LOG_ERR("Cannot disable callbacks()");
   2740a:	2301      	movs	r3, #1
   2740c:	f04f 0000 	mov.w	r0, #0
   27410:	4a2e      	ldr	r2, [pc, #184]	; (274cc <dk_buttons_init+0x1b0>)
   27412:	f363 0007 	bfi	r0, r3, #0, #8
   27416:	4b2e      	ldr	r3, [pc, #184]	; (274d0 <dk_buttons_init+0x1b4>)
   27418:	4931      	ldr	r1, [pc, #196]	; (274e0 <dk_buttons_init+0x1c4>)
   2741a:	1a9b      	subs	r3, r3, r2
   2741c:	08db      	lsrs	r3, r3, #3
   2741e:	f363 108f 	bfi	r0, r3, #6, #10
   27422:	e7b5      	b.n	27390 <dk_buttons_init+0x74>
		return -ENOTSUP;
   27424:	f06f 0485 	mvn.w	r4, #133	; 0x85
   27428:	e7ef      	b.n	2740a <dk_buttons_init+0xee>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2742a:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   2742c:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   27430:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   27432:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   27436:	d1db      	bne.n	273f0 <dk_buttons_init+0xd4>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   27438:	4606      	mov	r6, r0
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   2743a:	4d2a      	ldr	r5, [pc, #168]	; (274e4 <dk_buttons_init+0x1c8>)
   2743c:	4b2a      	ldr	r3, [pc, #168]	; (274e8 <dk_buttons_init+0x1cc>)
	callback->pin_mask = pin_mask;
   2743e:	e9c5 3901 	strd	r3, r9, [r5, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   27442:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
   27446:	6843      	ldr	r3, [r0, #4]
   27448:	68db      	ldr	r3, [r3, #12]
   2744a:	b18b      	cbz	r3, 27470 <dk_buttons_init+0x154>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2744c:	2201      	movs	r2, #1
   2744e:	4629      	mov	r1, r5
   27450:	4798      	blx	r3
		if (err) {
   27452:	4604      	mov	r4, r0
   27454:	b178      	cbz	r0, 27476 <dk_buttons_init+0x15a>
			LOG_ERR("Cannot add callback");
   27456:	2301      	movs	r3, #1
   27458:	f04f 0000 	mov.w	r0, #0
   2745c:	4a1b      	ldr	r2, [pc, #108]	; (274cc <dk_buttons_init+0x1b0>)
   2745e:	f363 0007 	bfi	r0, r3, #0, #8
   27462:	4b1b      	ldr	r3, [pc, #108]	; (274d0 <dk_buttons_init+0x1b4>)
   27464:	4921      	ldr	r1, [pc, #132]	; (274ec <dk_buttons_init+0x1d0>)
   27466:	1a9b      	subs	r3, r3, r2
   27468:	08db      	lsrs	r3, r3, #3
   2746a:	f363 108f 	bfi	r0, r3, #6, #10
   2746e:	e78f      	b.n	27390 <dk_buttons_init+0x74>
		return -ENOTSUP;
   27470:	f06f 0485 	mvn.w	r4, #133	; 0x85
   27474:	e7ef      	b.n	27456 <dk_buttons_init+0x13a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   27476:	3601      	adds	r6, #1
   27478:	2e04      	cmp	r6, #4
   2747a:	d1e2      	bne.n	27442 <dk_buttons_init+0x126>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   2747c:	491c      	ldr	r1, [pc, #112]	; (274f0 <dk_buttons_init+0x1d4>)
   2747e:	481d      	ldr	r0, [pc, #116]	; (274f4 <dk_buttons_init+0x1d8>)
   27480:	f017 fb91 	bl	3eba6 <k_delayed_work_init>
	state = STATE_SCANNING;
   27484:	2201      	movs	r2, #1
   27486:	4b1c      	ldr	r3, [pc, #112]	; (274f8 <dk_buttons_init+0x1dc>)
   27488:	491a      	ldr	r1, [pc, #104]	; (274f4 <dk_buttons_init+0x1d8>)
   2748a:	701a      	strb	r2, [r3, #0]
   2748c:	481b      	ldr	r0, [pc, #108]	; (274fc <dk_buttons_init+0x1e0>)
   2748e:	4622      	mov	r2, r4
   27490:	f011 fd38 	bl	38f04 <k_delayed_work_submit_to_queue>
	if (err) {
   27494:	4604      	mov	r4, r0
   27496:	b160      	cbz	r0, 274b2 <dk_buttons_init+0x196>
		LOG_ERR("Cannot add work to workqueue");
   27498:	2301      	movs	r3, #1
   2749a:	f04f 0000 	mov.w	r0, #0
   2749e:	4a0b      	ldr	r2, [pc, #44]	; (274cc <dk_buttons_init+0x1b0>)
   274a0:	f363 0007 	bfi	r0, r3, #0, #8
   274a4:	4b0a      	ldr	r3, [pc, #40]	; (274d0 <dk_buttons_init+0x1b4>)
   274a6:	4916      	ldr	r1, [pc, #88]	; (27500 <dk_buttons_init+0x1e4>)
   274a8:	1a9b      	subs	r3, r3, r2
   274aa:	08db      	lsrs	r3, r3, #3
   274ac:	f363 108f 	bfi	r0, r3, #6, #10
   274b0:	e76e      	b.n	27390 <dk_buttons_init+0x74>
	dk_read_buttons(NULL, NULL);
   274b2:	4601      	mov	r1, r0
   274b4:	f7ff ff22 	bl	272fc <dk_read_buttons>
	return 0;
   274b8:	e752      	b.n	27360 <dk_buttons_init+0x44>
   274ba:	bf00      	nop
   274bc:	20023b54 	.word	0x20023b54
   274c0:	00040894 	.word	0x00040894
   274c4:	20023b44 	.word	0x20023b44
   274c8:	20023b58 	.word	0x20023b58
   274cc:	000402cc 	.word	0x000402cc
   274d0:	0004032c 	.word	0x0004032c
   274d4:	000436b3 	.word	0x000436b3
   274d8:	0004364d 	.word	0x0004364d
   274dc:	0004366a 	.word	0x0004366a
   274e0:	00043684 	.word	0x00043684
   274e4:	20023b94 	.word	0x20023b94
   274e8:	00026f25 	.word	0x00026f25
   274ec:	0004369f 	.word	0x0004369f
   274f0:	00027049 	.word	0x00027049
   274f4:	20023b74 	.word	0x20023b74
   274f8:	20029f53 	.word	0x20029f53
   274fc:	200293b0 	.word	0x200293b0
   27500:	00043618 	.word	0x00043618

00027504 <close>:
{
   27504:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   27506:	4c10      	ldr	r4, [pc, #64]	; (27548 <close+0x44>)
{
   27508:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   2750a:	6823      	ldr	r3, [r4, #0]
   2750c:	b94b      	cbnz	r3, 27522 <close+0x1e>
   2750e:	490f      	ldr	r1, [pc, #60]	; (2754c <close+0x48>)
   27510:	480f      	ldr	r0, [pc, #60]	; (27550 <close+0x4c>)
   27512:	2321      	movs	r3, #33	; 0x21
   27514:	4a0f      	ldr	r2, [pc, #60]	; (27554 <close+0x50>)
   27516:	f015 f85d 	bl	3c5d4 <printk>
   2751a:	2121      	movs	r1, #33	; 0x21
   2751c:	480d      	ldr	r0, [pc, #52]	; (27554 <close+0x50>)
   2751e:	f015 f89f 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   27522:	6823      	ldr	r3, [r4, #0]
   27524:	685b      	ldr	r3, [r3, #4]
   27526:	b94b      	cbnz	r3, 2753c <close+0x38>
   27528:	490b      	ldr	r1, [pc, #44]	; (27558 <close+0x54>)
   2752a:	4809      	ldr	r0, [pc, #36]	; (27550 <close+0x4c>)
   2752c:	2322      	movs	r3, #34	; 0x22
   2752e:	4a09      	ldr	r2, [pc, #36]	; (27554 <close+0x50>)
   27530:	f015 f850 	bl	3c5d4 <printk>
   27534:	2122      	movs	r1, #34	; 0x22
   27536:	4807      	ldr	r0, [pc, #28]	; (27554 <close+0x50>)
   27538:	f015 f892 	bl	3c660 <assert_post_action>
	return socket_ops->close(sock);
   2753c:	6823      	ldr	r3, [r4, #0]
   2753e:	4628      	mov	r0, r5
}
   27540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   27544:	685b      	ldr	r3, [r3, #4]
   27546:	4718      	bx	r3
   27548:	20023a4c 	.word	0x20023a4c
   2754c:	000418d1 	.word	0x000418d1
   27550:	00041757 	.word	0x00041757
   27554:	000418a8 	.word	0x000418a8
   27558:	00043184 	.word	0x00043184

0002755c <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   2755c:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   2755e:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   27560:	b118      	cbz	r0, 2756a <callback_worker+0xe>
		data->callback(data->data);
   27562:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   27566:	300c      	adds	r0, #12
   27568:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   2756a:	a901      	add	r1, sp, #4
   2756c:	4802      	ldr	r0, [pc, #8]	; (27578 <callback_worker+0x1c>)
   2756e:	f00f faf5 	bl	36b5c <k_mem_slab_free>
}
   27572:	b003      	add	sp, #12
   27574:	f85d fb04 	ldr.w	pc, [sp], #4
   27578:	20031860 	.word	0x20031860

0002757c <open_socket>:
{
   2757c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
   2757e:	4c16      	ldr	r4, [pc, #88]	; (275d8 <open_socket+0x5c>)
   27580:	6823      	ldr	r3, [r4, #0]
   27582:	b94b      	cbnz	r3, 27598 <open_socket+0x1c>
   27584:	4915      	ldr	r1, [pc, #84]	; (275dc <open_socket+0x60>)
   27586:	4816      	ldr	r0, [pc, #88]	; (275e0 <open_socket+0x64>)
   27588:	2319      	movs	r3, #25
   2758a:	4a16      	ldr	r2, [pc, #88]	; (275e4 <open_socket+0x68>)
   2758c:	f015 f822 	bl	3c5d4 <printk>
   27590:	2119      	movs	r1, #25
   27592:	4814      	ldr	r0, [pc, #80]	; (275e4 <open_socket+0x68>)
   27594:	f015 f864 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   27598:	6823      	ldr	r3, [r4, #0]
   2759a:	681b      	ldr	r3, [r3, #0]
   2759c:	b94b      	cbnz	r3, 275b2 <open_socket+0x36>
   2759e:	4912      	ldr	r1, [pc, #72]	; (275e8 <open_socket+0x6c>)
   275a0:	480f      	ldr	r0, [pc, #60]	; (275e0 <open_socket+0x64>)
   275a2:	231a      	movs	r3, #26
   275a4:	4a0f      	ldr	r2, [pc, #60]	; (275e4 <open_socket+0x68>)
   275a6:	f015 f815 	bl	3c5d4 <printk>
   275aa:	211a      	movs	r1, #26
   275ac:	480d      	ldr	r0, [pc, #52]	; (275e4 <open_socket+0x68>)
   275ae:	f015 f857 	bl	3c660 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   275b2:	6823      	ldr	r3, [r4, #0]
   275b4:	f240 2201 	movw	r2, #513	; 0x201
   275b8:	681b      	ldr	r3, [r3, #0]
   275ba:	2102      	movs	r1, #2
   275bc:	2066      	movs	r0, #102	; 0x66
   275be:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   275c0:	4b0a      	ldr	r3, [pc, #40]	; (275ec <open_socket+0x70>)
   275c2:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   275c4:	3001      	adds	r0, #1
   275c6:	d104      	bne.n	275d2 <open_socket+0x56>
		return -errno;
   275c8:	f015 fa40 	bl	3ca4c <__errno>
   275cc:	6800      	ldr	r0, [r0, #0]
   275ce:	4240      	negs	r0, r0
}
   275d0:	bd10      	pop	{r4, pc}
	return 0;
   275d2:	2000      	movs	r0, #0
   275d4:	e7fc      	b.n	275d0 <open_socket+0x54>
   275d6:	bf00      	nop
   275d8:	20023a4c 	.word	0x20023a4c
   275dc:	000418d1 	.word	0x000418d1
   275e0:	00041757 	.word	0x00041757
   275e4:	000418a8 	.word	0x000418a8
   275e8:	00043196 	.word	0x00043196
   275ec:	20023bc0 	.word	0x20023bc0

000275f0 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   275f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   275f4:	4680      	mov	r8, r0
   275f6:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   275f8:	f7f5 fd94 	bl	1d124 <strlen>
	__ASSERT_NO_MSG(socket_ops);
   275fc:	4c30      	ldr	r4, [pc, #192]	; (276c0 <at_write+0xd0>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   275fe:	4b31      	ldr	r3, [pc, #196]	; (276c4 <at_write+0xd4>)
	int bytes_to_send = strlen(cmd);
   27600:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   27602:	681f      	ldr	r7, [r3, #0]
   27604:	6823      	ldr	r3, [r4, #0]
   27606:	b94b      	cbnz	r3, 2761c <at_write+0x2c>
   27608:	492f      	ldr	r1, [pc, #188]	; (276c8 <at_write+0xd8>)
   2760a:	4830      	ldr	r0, [pc, #192]	; (276cc <at_write+0xdc>)
   2760c:	237e      	movs	r3, #126	; 0x7e
   2760e:	4a30      	ldr	r2, [pc, #192]	; (276d0 <at_write+0xe0>)
   27610:	f014 ffe0 	bl	3c5d4 <printk>
   27614:	217e      	movs	r1, #126	; 0x7e
   27616:	482e      	ldr	r0, [pc, #184]	; (276d0 <at_write+0xe0>)
   27618:	f015 f822 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   2761c:	6823      	ldr	r3, [r4, #0]
   2761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27620:	b94b      	cbnz	r3, 27636 <at_write+0x46>
   27622:	492c      	ldr	r1, [pc, #176]	; (276d4 <at_write+0xe4>)
   27624:	4829      	ldr	r0, [pc, #164]	; (276cc <at_write+0xdc>)
   27626:	237f      	movs	r3, #127	; 0x7f
   27628:	4a29      	ldr	r2, [pc, #164]	; (276d0 <at_write+0xe0>)
   2762a:	f014 ffd3 	bl	3c5d4 <printk>
   2762e:	217f      	movs	r1, #127	; 0x7f
   27630:	4827      	ldr	r0, [pc, #156]	; (276d0 <at_write+0xe0>)
   27632:	f015 f815 	bl	3c660 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   27636:	6823      	ldr	r3, [r4, #0]
   27638:	4632      	mov	r2, r6
   2763a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2763c:	4641      	mov	r1, r8
   2763e:	2300      	movs	r3, #0
   27640:	4638      	mov	r0, r7
   27642:	47a0      	blx	r4

	if (bytes_sent == -1) {
   27644:	1c43      	adds	r3, r0, #1
   27646:	4604      	mov	r4, r0
   27648:	d121      	bne.n	2768e <at_write+0x9e>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   2764a:	2301      	movs	r3, #1
   2764c:	f04f 0400 	mov.w	r4, #0
   27650:	4a21      	ldr	r2, [pc, #132]	; (276d8 <at_write+0xe8>)
   27652:	f363 0407 	bfi	r4, r3, #0, #8
   27656:	4b21      	ldr	r3, [pc, #132]	; (276dc <at_write+0xec>)
   27658:	1a9b      	subs	r3, r3, r2
   2765a:	08db      	lsrs	r3, r3, #3
   2765c:	f363 148f 	bfi	r4, r3, #6, #10
   27660:	f015 f9f4 	bl	3ca4c <__errno>
   27664:	491e      	ldr	r1, [pc, #120]	; (276e0 <at_write+0xf0>)
   27666:	6802      	ldr	r2, [r0, #0]
   27668:	4620      	mov	r0, r4
   2766a:	f015 f80a 	bl	3c682 <log_string_sync>
		ret.code  = -errno;
   2766e:	f015 f9ed 	bl	3ca4c <__errno>
   27672:	6803      	ldr	r3, [r0, #0]
   27674:	425b      	negs	r3, r3
   27676:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   27678:	2301      	movs	r3, #1
   2767a:	f88d 3004 	strb.w	r3, [sp, #4]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   2767e:	b115      	cbz	r5, 27686 <at_write+0x96>
		*state = ret.state;
   27680:	f89d 3004 	ldrb.w	r3, [sp, #4]
   27684:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   27686:	9800      	ldr	r0, [sp, #0]
   27688:	b002      	add	sp, #8
   2768a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   2768e:	f04f 32ff 	mov.w	r2, #4294967295
   27692:	4669      	mov	r1, sp
   27694:	4813      	ldr	r0, [pc, #76]	; (276e4 <at_write+0xf4>)
   27696:	f00f fc73 	bl	36f80 <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   2769a:	42a6      	cmp	r6, r4
   2769c:	d0ef      	beq.n	2767e <at_write+0x8e>
			LOG_ERR("Bytes sent (%d) was not the "
   2769e:	2301      	movs	r3, #1
   276a0:	f04f 0000 	mov.w	r0, #0
   276a4:	4a0c      	ldr	r2, [pc, #48]	; (276d8 <at_write+0xe8>)
   276a6:	f363 0007 	bfi	r0, r3, #0, #8
   276aa:	4b0c      	ldr	r3, [pc, #48]	; (276dc <at_write+0xec>)
   276ac:	490e      	ldr	r1, [pc, #56]	; (276e8 <at_write+0xf8>)
   276ae:	1a9b      	subs	r3, r3, r2
   276b0:	08db      	lsrs	r3, r3, #3
   276b2:	f363 108f 	bfi	r0, r3, #6, #10
   276b6:	4622      	mov	r2, r4
   276b8:	4633      	mov	r3, r6
   276ba:	f014 ffe2 	bl	3c682 <log_string_sync>
   276be:	e7de      	b.n	2767e <at_write+0x8e>
   276c0:	20023a4c 	.word	0x20023a4c
   276c4:	20023bc0 	.word	0x20023bc0
   276c8:	000418d1 	.word	0x000418d1
   276cc:	00041757 	.word	0x00041757
   276d0:	000418a8 	.word	0x000418a8
   276d4:	000431ce 	.word	0x000431ce
   276d8:	000402cc 	.word	0x000402cc
   276dc:	000402d4 	.word	0x000402d4
   276e0:	0004375a 	.word	0x0004375a
   276e4:	20031920 	.word	0x20031920
   276e8:	0004377d 	.word	0x0004377d

000276ec <socket_thread_fn>:
{
   276ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					LOG_ERR("Response buffer not large "
   276f0:	4b9e      	ldr	r3, [pc, #632]	; (2796c <socket_thread_fn+0x280>)
   276f2:	4c9f      	ldr	r4, [pc, #636]	; (27970 <socket_thread_fn+0x284>)
{
   276f4:	b087      	sub	sp, #28
					LOG_ERR("Response buffer not large "
   276f6:	1ae4      	subs	r4, r4, r3
   276f8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   276fc:	f04f 32ff 	mov.w	r2, #4294967295
   27700:	a903      	add	r1, sp, #12
   27702:	489c      	ldr	r0, [pc, #624]	; (27974 <socket_thread_fn+0x288>)
   27704:	f00f f9c6 	bl	36a94 <k_mem_slab_alloc>
		ret.code  = 0;
   27708:	2300      	movs	r3, #0
		item->callback = NULL;
   2770a:	9d03      	ldr	r5, [sp, #12]
		ret.code  = 0;
   2770c:	9304      	str	r3, [sp, #16]
		item->callback = NULL;
   2770e:	f8c5 3a98 	str.w	r3, [r5, #2712]	; 0xa98
		ret.state = AT_CMD_OK;
   27712:	f88d 3014 	strb.w	r3, [sp, #20]
	__ASSERT_NO_MSG(socket_ops);
   27716:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 279cc <socket_thread_fn+0x2e0>
		bytes_read = recv(common_socket_fd, item->data,
   2771a:	4b97      	ldr	r3, [pc, #604]	; (27978 <socket_thread_fn+0x28c>)
   2771c:	350c      	adds	r5, #12
   2771e:	f8d3 b000 	ldr.w	fp, [r3]
   27722:	f8da 3000 	ldr.w	r3, [sl]
   27726:	b94b      	cbnz	r3, 2773c <socket_thread_fn+0x50>
   27728:	4994      	ldr	r1, [pc, #592]	; (2797c <socket_thread_fn+0x290>)
   2772a:	4895      	ldr	r0, [pc, #596]	; (27980 <socket_thread_fn+0x294>)
   2772c:	2369      	movs	r3, #105	; 0x69
   2772e:	4a95      	ldr	r2, [pc, #596]	; (27984 <socket_thread_fn+0x298>)
   27730:	f014 ff50 	bl	3c5d4 <printk>
   27734:	2169      	movs	r1, #105	; 0x69
   27736:	4893      	ldr	r0, [pc, #588]	; (27984 <socket_thread_fn+0x298>)
   27738:	f014 ff92 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   2773c:	f8da 3000 	ldr.w	r3, [sl]
   27740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27742:	b94b      	cbnz	r3, 27758 <socket_thread_fn+0x6c>
   27744:	4990      	ldr	r1, [pc, #576]	; (27988 <socket_thread_fn+0x29c>)
   27746:	488e      	ldr	r0, [pc, #568]	; (27980 <socket_thread_fn+0x294>)
   27748:	236a      	movs	r3, #106	; 0x6a
   2774a:	4a8e      	ldr	r2, [pc, #568]	; (27984 <socket_thread_fn+0x298>)
   2774c:	f014 ff42 	bl	3c5d4 <printk>
   27750:	216a      	movs	r1, #106	; 0x6a
   27752:	488c      	ldr	r0, [pc, #560]	; (27984 <socket_thread_fn+0x298>)
   27754:	f014 ff84 	bl	3c660 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   27758:	f8da 3000 	ldr.w	r3, [sl]
   2775c:	f640 228c 	movw	r2, #2700	; 0xa8c
   27760:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   27764:	4629      	mov	r1, r5
   27766:	2300      	movs	r3, #0
   27768:	4658      	mov	r0, fp
   2776a:	47d0      	blx	sl
		if (bytes_read < 0) {
   2776c:	1e02      	subs	r2, r0, #0
   2776e:	da58      	bge.n	27822 <socket_thread_fn+0x136>
			LOG_ERR("AT socket recv failed with err %d",
   27770:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   27774:	f043 0301 	orr.w	r3, r3, #1
   27778:	f363 0607 	bfi	r6, r3, #0, #8
   2777c:	f364 168f 	bfi	r6, r4, #6, #10
   27780:	4630      	mov	r0, r6
   27782:	4982      	ldr	r1, [pc, #520]	; (2798c <socket_thread_fn+0x2a0>)
   27784:	f014 ff7d 	bl	3c682 <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   27788:	4b7b      	ldr	r3, [pc, #492]	; (27978 <socket_thread_fn+0x28c>)
   2778a:	6818      	ldr	r0, [r3, #0]
   2778c:	f7ff feba 	bl	27504 <close>
   27790:	2800      	cmp	r0, #0
   27792:	d131      	bne.n	277f8 <socket_thread_fn+0x10c>
			    (open_socket() == 0)) {
   27794:	f7ff fef2 	bl	2757c <open_socket>
			if ((close(common_socket_fd) == 0) &&
   27798:	bb70      	cbnz	r0, 277f8 <socket_thread_fn+0x10c>
				LOG_INF("AT socket recovered");
   2779a:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2779e:	f043 0303 	orr.w	r3, r3, #3
   277a2:	f363 0707 	bfi	r7, r3, #0, #8
   277a6:	f364 178f 	bfi	r7, r4, #6, #10
   277aa:	4979      	ldr	r1, [pc, #484]	; (27990 <socket_thread_fn+0x2a4>)
   277ac:	4638      	mov	r0, r7
   277ae:	f014 ff68 	bl	3c682 <log_string_sync>
				ret.state = AT_CMD_ERROR;
   277b2:	2301      	movs	r3, #1
   277b4:	f88d 3014 	strb.w	r3, [sp, #20]
				ret.code  = -errno;
   277b8:	f015 f948 	bl	3ca4c <__errno>
   277bc:	6803      	ldr	r3, [r0, #0]
   277be:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   277c0:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   277c2:	9903      	ldr	r1, [sp, #12]
   277c4:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   277c8:	2b00      	cmp	r3, #0
   277ca:	f040 80a5 	bne.w	27918 <socket_thread_fn+0x22c>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   277ce:	a903      	add	r1, sp, #12
   277d0:	4868      	ldr	r0, [pc, #416]	; (27974 <socket_thread_fn+0x288>)
   277d2:	f00f f9c3 	bl	36b5c <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   277d6:	4b6f      	ldr	r3, [pc, #444]	; (27994 <socket_thread_fn+0x2a8>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   277d8:	689b      	ldr	r3, [r3, #8]
   277da:	2b00      	cmp	r3, #0
   277dc:	d18e      	bne.n	276fc <socket_thread_fn+0x10>
   277de:	f89d 2014 	ldrb.w	r2, [sp, #20]
   277e2:	2a04      	cmp	r2, #4
   277e4:	d08a      	beq.n	276fc <socket_thread_fn+0x10>
			current_cmd_handler = NULL;
   277e6:	4a6c      	ldr	r2, [pc, #432]	; (27998 <socket_thread_fn+0x2ac>)
   277e8:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
   277ea:	f04f 32ff 	mov.w	r2, #4294967295
   277ee:	a904      	add	r1, sp, #16
   277f0:	486a      	ldr	r0, [pc, #424]	; (2799c <socket_thread_fn+0x2b0>)
   277f2:	f00f fb25 	bl	36e40 <z_impl_k_msgq_put>
   277f6:	e781      	b.n	276fc <socket_thread_fn+0x10>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   277f8:	2301      	movs	r3, #1
   277fa:	f04f 0500 	mov.w	r5, #0
   277fe:	f363 0507 	bfi	r5, r3, #0, #8
   27802:	f015 f923 	bl	3ca4c <__errno>
   27806:	f364 158f 	bfi	r5, r4, #6, #10
   2780a:	6802      	ldr	r2, [r0, #0]
   2780c:	4964      	ldr	r1, [pc, #400]	; (279a0 <socket_thread_fn+0x2b4>)
   2780e:	4628      	mov	r0, r5
   27810:	f014 ff37 	bl	3c682 <log_string_sync>
			close(common_socket_fd);
   27814:	4b58      	ldr	r3, [pc, #352]	; (27978 <socket_thread_fn+0x28c>)
   27816:	6818      	ldr	r0, [r3, #0]
   27818:	f7ff fe74 	bl	27504 <close>
}
   2781c:	b007      	add	sp, #28
   2781e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   27822:	f640 238c 	movw	r3, #2700	; 0xa8c
   27826:	429a      	cmp	r2, r3
   27828:	d004      	beq.n	27834 <socket_thread_fn+0x148>
			   item->data[bytes_read - 1] != '\0') {
   2782a:	f8dd a00c 	ldr.w	sl, [sp, #12]
   2782e:	4452      	add	r2, sl
		} else if (bytes_read == sizeof(item->data) ||
   27830:	7ad3      	ldrb	r3, [r2, #11]
   27832:	b173      	cbz	r3, 27852 <socket_thread_fn+0x166>
			LOG_ERR("AT message to large for reception buffer or "
   27834:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   27838:	f043 0301 	orr.w	r3, r3, #1
   2783c:	f363 0807 	bfi	r8, r3, #0, #8
   27840:	f364 188f 	bfi	r8, r4, #6, #10
   27844:	4957      	ldr	r1, [pc, #348]	; (279a4 <socket_thread_fn+0x2b8>)
   27846:	4640      	mov	r0, r8
   27848:	f014 ff1b 	bl	3c682 <log_string_sync>
			ret.code  = -ENOBUFS;
   2784c:	f06f 0368 	mvn.w	r3, #104	; 0x68
   27850:	e7b6      	b.n	277c0 <socket_thread_fn+0xd4>
	ret->state = AT_CMD_NOTIFICATION;
   27852:	2204      	movs	r2, #4
		payload_len = get_return_code(item->data, &ret);
   27854:	f10a 050c 	add.w	r5, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   27858:	4953      	ldr	r1, [pc, #332]	; (279a8 <socket_thread_fn+0x2bc>)
   2785a:	4628      	mov	r0, r5
   2785c:	9301      	str	r3, [sp, #4]
	ret->state = AT_CMD_NOTIFICATION;
   2785e:	f88d 2014 	strb.w	r2, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   27862:	f017 fc5c 	bl	3f11e <strstr>
		if (tmpstr) {
   27866:	4683      	mov	fp, r0
   27868:	b120      	cbz	r0, 27874 <socket_thread_fn+0x188>
			ret->state = AT_CMD_OK;
   2786a:	9b01      	ldr	r3, [sp, #4]
   2786c:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   27870:	9304      	str	r3, [sp, #16]
			break;
   27872:	e00d      	b.n	27890 <socket_thread_fn+0x1a4>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   27874:	494d      	ldr	r1, [pc, #308]	; (279ac <socket_thread_fn+0x2c0>)
   27876:	4628      	mov	r0, r5
   27878:	f017 fc51 	bl	3f11e <strstr>
		if (tmpstr) {
   2787c:	4683      	mov	fp, r0
   2787e:	b330      	cbz	r0, 278ce <socket_thread_fn+0x1e2>
			ret->state = AT_CMD_ERROR_CMS;
   27880:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   27882:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   27886:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2788a:	f017 f9fe 	bl	3ec8a <atoi>
   2788e:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   27890:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   27892:	ebab 0205 	sub.w	r2, fp, r5
		buf[new_len++] = '\0';
   27896:	3201      	adds	r2, #1
   27898:	f88b 3000 	strb.w	r3, [fp]
		if (ret.state != AT_CMD_NOTIFICATION) {
   2789c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   278a0:	2b04      	cmp	r3, #4
   278a2:	d04f      	beq.n	27944 <socket_thread_fn+0x258>
			if ((response_buf_len > 0) &&
   278a4:	f8df a128 	ldr.w	sl, [pc, #296]	; 279d0 <socket_thread_fn+0x2e4>
   278a8:	f8da 3000 	ldr.w	r3, [sl]
   278ac:	2b00      	cmp	r3, #0
   278ae:	d052      	beq.n	27956 <socket_thread_fn+0x26a>
			    (response_buf != NULL)) {
   278b0:	4d3f      	ldr	r5, [pc, #252]	; (279b0 <socket_thread_fn+0x2c4>)
   278b2:	6828      	ldr	r0, [r5, #0]
			if ((response_buf_len > 0) &&
   278b4:	2800      	cmp	r0, #0
   278b6:	d04e      	beq.n	27956 <socket_thread_fn+0x26a>
				if (response_buf_len > payload_len) {
   278b8:	4293      	cmp	r3, r2
   278ba:	d91d      	bls.n	278f8 <socket_thread_fn+0x20c>
   278bc:	9903      	ldr	r1, [sp, #12]
   278be:	310c      	adds	r1, #12
   278c0:	f017 fa03 	bl	3ecca <memcpy>
				response_buf_len = 0;
   278c4:	2300      	movs	r3, #0
   278c6:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   278ca:	602b      	str	r3, [r5, #0]
				goto next;
   278cc:	e779      	b.n	277c2 <socket_thread_fn+0xd6>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   278ce:	4939      	ldr	r1, [pc, #228]	; (279b4 <socket_thread_fn+0x2c8>)
   278d0:	4628      	mov	r0, r5
   278d2:	f017 fc24 	bl	3f11e <strstr>
		if (tmpstr) {
   278d6:	4683      	mov	fp, r0
   278d8:	b108      	cbz	r0, 278de <socket_thread_fn+0x1f2>
			ret->state = AT_CMD_ERROR_CME;
   278da:	2303      	movs	r3, #3
   278dc:	e7d1      	b.n	27882 <socket_thread_fn+0x196>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   278de:	4936      	ldr	r1, [pc, #216]	; (279b8 <socket_thread_fn+0x2cc>)
   278e0:	4628      	mov	r0, r5
   278e2:	f017 fc1c 	bl	3f11e <strstr>
		if (tmpstr) {
   278e6:	4683      	mov	fp, r0
   278e8:	2800      	cmp	r0, #0
   278ea:	d039      	beq.n	27960 <socket_thread_fn+0x274>
			ret->state = AT_CMD_ERROR;
   278ec:	2301      	movs	r3, #1
   278ee:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   278f2:	f06f 0307 	mvn.w	r3, #7
   278f6:	e7bb      	b.n	27870 <socket_thread_fn+0x184>
					LOG_ERR("Response buffer not large "
   278f8:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   278fc:	f043 0301 	orr.w	r3, r3, #1
   27900:	f363 0907 	bfi	r9, r3, #0, #8
   27904:	f364 198f 	bfi	r9, r4, #6, #10
   27908:	492c      	ldr	r1, [pc, #176]	; (279bc <socket_thread_fn+0x2d0>)
   2790a:	4648      	mov	r0, r9
   2790c:	f014 feb9 	bl	3c682 <log_string_sync>
					ret.code  = -EMSGSIZE;
   27910:	f06f 0379 	mvn.w	r3, #121	; 0x79
   27914:	9304      	str	r3, [sp, #16]
   27916:	e7d5      	b.n	278c4 <socket_thread_fn+0x1d8>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   27918:	4b29      	ldr	r3, [pc, #164]	; (279c0 <socket_thread_fn+0x2d4>)
   2791a:	2200      	movs	r2, #0
   2791c:	604b      	str	r3, [r1, #4]
   2791e:	460b      	mov	r3, r1
   27920:	600a      	str	r2, [r1, #0]
   27922:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27926:	e8d3 2fef 	ldaex	r2, [r3]
   2792a:	f042 0001 	orr.w	r0, r2, #1
   2792e:	e8c3 0fe5 	stlex	r5, r0, [r3]
   27932:	2d00      	cmp	r5, #0
   27934:	d1f7      	bne.n	27926 <socket_thread_fn+0x23a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   27936:	07d3      	lsls	r3, r2, #31
   27938:	f53f af4d 	bmi.w	277d6 <socket_thread_fn+0xea>
		k_queue_append(&work_q->queue, work);
   2793c:	4821      	ldr	r0, [pc, #132]	; (279c4 <socket_thread_fn+0x2d8>)
   2793e:	f017 f859 	bl	3e9f4 <k_queue_append>
   27942:	e748      	b.n	277d6 <socket_thread_fn+0xea>
		if (payload_len == 0) {
   27944:	2a00      	cmp	r2, #0
   27946:	f43f af3c 	beq.w	277c2 <socket_thread_fn+0xd6>
			item->callback = notification_handler;
   2794a:	4b1f      	ldr	r3, [pc, #124]	; (279c8 <socket_thread_fn+0x2dc>)
			item->callback = current_cmd_handler;
   2794c:	681a      	ldr	r2, [r3, #0]
   2794e:	9b03      	ldr	r3, [sp, #12]
   27950:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   27954:	e735      	b.n	277c2 <socket_thread_fn+0xd6>
		if (payload_len == 0) {
   27956:	2a00      	cmp	r2, #0
   27958:	f43f af33 	beq.w	277c2 <socket_thread_fn+0xd6>
			item->callback = current_cmd_handler;
   2795c:	4b0e      	ldr	r3, [pc, #56]	; (27998 <socket_thread_fn+0x2ac>)
   2795e:	e7f5      	b.n	2794c <socket_thread_fn+0x260>
		new_len = strlen(buf) + 1;
   27960:	4628      	mov	r0, r5
   27962:	f7f5 fbdf 	bl	1d124 <strlen>
   27966:	1c42      	adds	r2, r0, #1
   27968:	e798      	b.n	2789c <socket_thread_fn+0x1b0>
   2796a:	bf00      	nop
   2796c:	000402cc 	.word	0x000402cc
   27970:	000402d4 	.word	0x000402d4
   27974:	20031860 	.word	0x20031860
   27978:	20023bc0 	.word	0x20023bc0
   2797c:	000418d1 	.word	0x000418d1
   27980:	00041757 	.word	0x00041757
   27984:	000418a8 	.word	0x000418a8
   27988:	000431bd 	.word	0x000431bd
   2798c:	000437af 	.word	0x000437af
   27990:	000437d1 	.word	0x000437d1
   27994:	200318c8 	.word	0x200318c8
   27998:	20023bc4 	.word	0x20023bc4
   2799c:	20031920 	.word	0x20031920
   279a0:	000437e5 	.word	0x000437e5
   279a4:	0004381c 	.word	0x0004381c
   279a8:	00041f61 	.word	0x00041f61
   279ac:	00043866 	.word	0x00043866
   279b0:	20023bcc 	.word	0x20023bcc
   279b4:	00043872 	.word	0x00043872
   279b8:	00044871 	.word	0x00044871
   279bc:	0004387e 	.word	0x0004387e
   279c0:	0002755d 	.word	0x0002755d
   279c4:	200293b0 	.word	0x200293b0
   279c8:	20023bc8 	.word	0x20023bc8
   279cc:	20023a4c 	.word	0x20023a4c
   279d0:	20023bd0 	.word	0x20023bd0

000279d4 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   279d4:	b510      	push	{r4, lr}
	static bool initialized;

	if (initialized) {
   279d6:	4b16      	ldr	r3, [pc, #88]	; (27a30 <at_cmd_driver_init+0x5c>)
{
   279d8:	b086      	sub	sp, #24
	if (initialized) {
   279da:	781a      	ldrb	r2, [r3, #0]
   279dc:	bb32      	cbnz	r2, 27a2c <at_cmd_driver_init+0x58>
		return 0;
	}

	initialized = true;
   279de:	2201      	movs	r2, #1
   279e0:	701a      	strb	r2, [r3, #0]

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   279e2:	f7ff fdcb 	bl	2757c <open_socket>
	if (err) {
   279e6:	4604      	mov	r4, r0
   279e8:	b188      	cbz	r0, 27a0e <at_cmd_driver_init+0x3a>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   279ea:	2301      	movs	r3, #1
   279ec:	f04f 0000 	mov.w	r0, #0
   279f0:	4a10      	ldr	r2, [pc, #64]	; (27a34 <at_cmd_driver_init+0x60>)
   279f2:	f363 0007 	bfi	r0, r3, #0, #8
   279f6:	4b10      	ldr	r3, [pc, #64]	; (27a38 <at_cmd_driver_init+0x64>)
   279f8:	4910      	ldr	r1, [pc, #64]	; (27a3c <at_cmd_driver_init+0x68>)
   279fa:	1a9b      	subs	r3, r3, r2
   279fc:	08db      	lsrs	r3, r3, #3
   279fe:	f363 108f 	bfi	r0, r3, #6, #10
   27a02:	4622      	mov	r2, r4
   27a04:	f014 fe3d 	bl	3c682 <log_string_sync>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   27a08:	4620      	mov	r0, r4
   27a0a:	b006      	add	sp, #24
   27a0c:	bd10      	pop	{r4, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   27a0e:	230a      	movs	r3, #10
   27a10:	e9cd 0004 	strd	r0, r0, [sp, #16]
   27a14:	e9cd 0302 	strd	r0, r3, [sp, #8]
   27a18:	e9cd 0000 	strd	r0, r0, [sp]
   27a1c:	4b08      	ldr	r3, [pc, #32]	; (27a40 <at_cmd_driver_init+0x6c>)
   27a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   27a22:	4908      	ldr	r1, [pc, #32]	; (27a44 <at_cmd_driver_init+0x70>)
   27a24:	4808      	ldr	r0, [pc, #32]	; (27a48 <at_cmd_driver_init+0x74>)
   27a26:	f011 f8e5 	bl	38bf4 <z_impl_k_thread_create>
	return 0;
   27a2a:	e7ed      	b.n	27a08 <at_cmd_driver_init+0x34>
		return 0;
   27a2c:	2400      	movs	r4, #0
   27a2e:	e7eb      	b.n	27a08 <at_cmd_driver_init+0x34>
   27a30:	20029f54 	.word	0x20029f54
   27a34:	000402cc 	.word	0x000402cc
   27a38:	000402d4 	.word	0x000402d4
   27a3c:	0004370f 	.word	0x0004370f
   27a40:	000276ed 	.word	0x000276ed
   27a44:	2002c320 	.word	0x2002c320
   27a48:	20023bd4 	.word	0x20023bd4

00027a4c <at_cmd_write>:
{
   27a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27a50:	4605      	mov	r5, r0
   27a52:	4688      	mov	r8, r1
   27a54:	4617      	mov	r7, r2
   27a56:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   27a58:	4c0a      	ldr	r4, [pc, #40]	; (27a84 <at_cmd_write+0x38>)
   27a5a:	f04f 31ff 	mov.w	r1, #4294967295
   27a5e:	4620      	mov	r0, r4
   27a60:	f010 ff96 	bl	38990 <z_impl_k_sem_take>
	response_buf     = buf;
   27a64:	4b08      	ldr	r3, [pc, #32]	; (27a88 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   27a66:	4631      	mov	r1, r6
	response_buf     = buf;
   27a68:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   27a6c:	4b07      	ldr	r3, [pc, #28]	; (27a8c <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   27a6e:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   27a70:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   27a72:	f7ff fdbd 	bl	275f0 <at_write>
   27a76:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   27a78:	4620      	mov	r0, r4
   27a7a:	f010 ff3f 	bl	388fc <z_impl_k_sem_give>
}
   27a7e:	4628      	mov	r0, r5
   27a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27a84:	200318c8 	.word	0x200318c8
   27a88:	20023bcc 	.word	0x20023bcc
   27a8c:	20023bd0 	.word	0x20023bd0

00027a90 <at_cmd_set_notification_handler>:
{
   27a90:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   27a92:	4c0f      	ldr	r4, [pc, #60]	; (27ad0 <at_cmd_set_notification_handler+0x40>)
{
   27a94:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   27a96:	6822      	ldr	r2, [r4, #0]
   27a98:	b17a      	cbz	r2, 27aba <at_cmd_set_notification_handler+0x2a>
   27a9a:	4282      	cmp	r2, r0
   27a9c:	d00d      	beq.n	27aba <at_cmd_set_notification_handler+0x2a>
		LOG_WRN("Forgetting prior notification handler %p",
   27a9e:	2302      	movs	r3, #2
   27aa0:	f04f 0000 	mov.w	r0, #0
   27aa4:	490b      	ldr	r1, [pc, #44]	; (27ad4 <at_cmd_set_notification_handler+0x44>)
   27aa6:	f363 0007 	bfi	r0, r3, #0, #8
   27aaa:	4b0b      	ldr	r3, [pc, #44]	; (27ad8 <at_cmd_set_notification_handler+0x48>)
   27aac:	1a5b      	subs	r3, r3, r1
   27aae:	08db      	lsrs	r3, r3, #3
   27ab0:	f363 108f 	bfi	r0, r3, #6, #10
   27ab4:	4909      	ldr	r1, [pc, #36]	; (27adc <at_cmd_set_notification_handler+0x4c>)
   27ab6:	f014 fde4 	bl	3c682 <log_string_sync>
	return z_impl_k_sem_take(sem, timeout);
   27aba:	f04f 31ff 	mov.w	r1, #4294967295
   27abe:	4808      	ldr	r0, [pc, #32]	; (27ae0 <at_cmd_set_notification_handler+0x50>)
   27ac0:	f010 ff66 	bl	38990 <z_impl_k_sem_take>
	notification_handler = handler;
   27ac4:	6025      	str	r5, [r4, #0]
	z_impl_k_sem_give(sem);
   27ac6:	4806      	ldr	r0, [pc, #24]	; (27ae0 <at_cmd_set_notification_handler+0x50>)
}
   27ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27acc:	f010 bf16 	b.w	388fc <z_impl_k_sem_give>
   27ad0:	20023bc8 	.word	0x20023bc8
   27ad4:	000402cc 	.word	0x000402cc
   27ad8:	000402d4 	.word	0x000402d4
   27adc:	00043731 	.word	0x00043731
   27ae0:	200318c8 	.word	0x200318c8

00027ae4 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27ae4:	4b0b      	ldr	r3, [pc, #44]	; (27b14 <find_node+0x30>)
{
   27ae6:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27ae8:	681b      	ldr	r3, [r3, #0]
   27aea:	b153      	cbz	r3, 27b02 <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27aec:	2500      	movs	r5, #0
   27aee:	461c      	mov	r4, r3
   27af0:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   27af2:	6866      	ldr	r6, [r4, #4]
   27af4:	428e      	cmp	r6, r1
   27af6:	d106      	bne.n	27b06 <find_node+0x22>
   27af8:	68a6      	ldr	r6, [r4, #8]
   27afa:	4296      	cmp	r6, r2
   27afc:	d103      	bne.n	27b06 <find_node+0x22>
			*prev_out = prev;
			return curr;
   27afe:	4623      	mov	r3, r4
			*prev_out = prev;
   27b00:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   27b02:	4618      	mov	r0, r3
   27b04:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27b06:	2b00      	cmp	r3, #0
   27b08:	d0fb      	beq.n	27b02 <find_node+0x1e>
   27b0a:	4625      	mov	r5, r4
   27b0c:	461c      	mov	r4, r3
   27b0e:	681b      	ldr	r3, [r3, #0]
   27b10:	e7ef      	b.n	27af2 <find_node+0xe>
   27b12:	bf00      	nop
   27b14:	20023c84 	.word	0x20023c84

00027b18 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   27b18:	4a0e      	ldr	r2, [pc, #56]	; (27b54 <module_init+0x3c>)
{
   27b1a:	b508      	push	{r3, lr}
	if (initialized) {
   27b1c:	7813      	ldrb	r3, [r2, #0]
   27b1e:	b17b      	cbz	r3, 27b40 <module_init+0x28>
		LOG_WRN("Already initialized. Nothing to do");
   27b20:	2302      	movs	r3, #2
   27b22:	f04f 0000 	mov.w	r0, #0
   27b26:	4a0c      	ldr	r2, [pc, #48]	; (27b58 <module_init+0x40>)
   27b28:	f363 0007 	bfi	r0, r3, #0, #8
   27b2c:	4b0b      	ldr	r3, [pc, #44]	; (27b5c <module_init+0x44>)
   27b2e:	490c      	ldr	r1, [pc, #48]	; (27b60 <module_init+0x48>)
   27b30:	1a9b      	subs	r3, r3, r2
   27b32:	08db      	lsrs	r3, r3, #3
   27b34:	f363 108f 	bfi	r0, r3, #6, #10
   27b38:	f014 fda3 	bl	3c682 <log_string_sync>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   27b3c:	2000      	movs	r0, #0
   27b3e:	bd08      	pop	{r3, pc}
	initialized = true;
   27b40:	2101      	movs	r1, #1
   27b42:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   27b44:	4a07      	ldr	r2, [pc, #28]	; (27b64 <module_init+0x4c>)
	at_cmd_set_notification_handler(notif_dispatch);
   27b46:	4808      	ldr	r0, [pc, #32]	; (27b68 <module_init+0x50>)
	list->tail = NULL;
   27b48:	e9c2 3300 	strd	r3, r3, [r2]
   27b4c:	f7ff ffa0 	bl	27a90 <at_cmd_set_notification_handler>
	return 0;
   27b50:	e7f4      	b.n	27b3c <module_init+0x24>
   27b52:	bf00      	nop
   27b54:	20029f55 	.word	0x20029f55
   27b58:	000402cc 	.word	0x000402cc
   27b5c:	000402e4 	.word	0x000402e4
   27b60:	000438fd 	.word	0x000438fd
   27b64:	20023c84 	.word	0x20023c84
   27b68:	00027b79 	.word	0x00027b79

00027b6c <k_mutex_unlock.constprop.7>:
	return z_impl_k_mutex_unlock(mutex);
   27b6c:	4801      	ldr	r0, [pc, #4]	; (27b74 <k_mutex_unlock.constprop.7+0x8>)
   27b6e:	f00f bb91 	b.w	37294 <z_impl_k_mutex_unlock>
   27b72:	bf00      	nop
   27b74:	2003190c 	.word	0x2003190c

00027b78 <notif_dispatch>:
{
   27b78:	b538      	push	{r3, r4, r5, lr}
   27b7a:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   27b7c:	f04f 31ff 	mov.w	r1, #4294967295
   27b80:	4809      	ldr	r0, [pc, #36]	; (27ba8 <notif_dispatch+0x30>)
   27b82:	f00f faa9 	bl	370d8 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27b86:	4b09      	ldr	r3, [pc, #36]	; (27bac <notif_dispatch+0x34>)
   27b88:	681b      	ldr	r3, [r3, #0]
   27b8a:	b91b      	cbnz	r3, 27b94 <notif_dispatch+0x1c>
}
   27b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   27b90:	f7ff bfec 	b.w	27b6c <k_mutex_unlock.constprop.7>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27b94:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   27b96:	689a      	ldr	r2, [r3, #8]
   27b98:	4629      	mov	r1, r5
   27b9a:	6858      	ldr	r0, [r3, #4]
   27b9c:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27b9e:	2c00      	cmp	r4, #0
   27ba0:	d0f4      	beq.n	27b8c <notif_dispatch+0x14>
   27ba2:	4623      	mov	r3, r4
   27ba4:	6824      	ldr	r4, [r4, #0]
   27ba6:	e7f6      	b.n	27b96 <notif_dispatch+0x1e>
   27ba8:	2003190c 	.word	0x2003190c
   27bac:	20023c84 	.word	0x20023c84

00027bb0 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   27bb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27bb2:	4606      	mov	r6, r0
	if (handler == NULL) {
   27bb4:	460d      	mov	r5, r1
   27bb6:	b999      	cbnz	r1, 27be0 <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   27bb8:	2301      	movs	r3, #1
   27bba:	f04f 0000 	mov.w	r0, #0
   27bbe:	4a1d      	ldr	r2, [pc, #116]	; (27c34 <at_notif_register_handler+0x84>)
   27bc0:	f363 0007 	bfi	r0, r3, #0, #8
   27bc4:	4b1c      	ldr	r3, [pc, #112]	; (27c38 <at_notif_register_handler+0x88>)
   27bc6:	1a9b      	subs	r3, r3, r2
   27bc8:	08db      	lsrs	r3, r3, #3
   27bca:	f363 108f 	bfi	r0, r3, #6, #10
   27bce:	4632      	mov	r2, r6
   27bd0:	460b      	mov	r3, r1
   27bd2:	491a      	ldr	r1, [pc, #104]	; (27c3c <at_notif_register_handler+0x8c>)
   27bd4:	f014 fd55 	bl	3c682 <log_string_sync>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   27bd8:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   27bdc:	b002      	add	sp, #8
   27bde:	bd70      	pop	{r4, r5, r6, pc}
   27be0:	f04f 31ff 	mov.w	r1, #4294967295
   27be4:	4816      	ldr	r0, [pc, #88]	; (27c40 <at_notif_register_handler+0x90>)
   27be6:	f00f fa77 	bl	370d8 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   27bea:	462a      	mov	r2, r5
   27bec:	4631      	mov	r1, r6
   27bee:	a801      	add	r0, sp, #4
   27bf0:	f7ff ff78 	bl	27ae4 <find_node>
   27bf4:	4604      	mov	r4, r0
   27bf6:	b118      	cbz	r0, 27c00 <at_notif_register_handler+0x50>
		k_mutex_unlock(&list_mtx);
   27bf8:	f7ff ffb8 	bl	27b6c <k_mutex_unlock.constprop.7>
		return 0;
   27bfc:	2000      	movs	r0, #0
   27bfe:	e7ed      	b.n	27bdc <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   27c00:	200c      	movs	r0, #12
   27c02:	f00f f901 	bl	36e08 <k_malloc>
   27c06:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   27c08:	b920      	cbnz	r0, 27c14 <at_notif_register_handler+0x64>
		k_mutex_unlock(&list_mtx);
   27c0a:	f7ff ffaf 	bl	27b6c <k_mutex_unlock.constprop.7>
		return -ENOBUFS;
   27c0e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27c12:	e7e3      	b.n	27bdc <at_notif_register_handler+0x2c>
__ssp_bos_icheck3(memset, void *, int)
   27c14:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   27c16:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   27c18:	4a0a      	ldr	r2, [pc, #40]	; (27c44 <at_notif_register_handler+0x94>)
   27c1a:	6044      	str	r4, [r0, #4]
   27c1c:	6084      	str	r4, [r0, #8]
	parent->next = child;
   27c1e:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   27c20:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   27c22:	e9c3 6501 	strd	r6, r5, [r3, #4]
   27c26:	b911      	cbnz	r1, 27c2e <at_notif_register_handler+0x7e>
	list->head = node;
   27c28:	e9c2 3300 	strd	r3, r3, [r2]
   27c2c:	e7e4      	b.n	27bf8 <at_notif_register_handler+0x48>
	parent->next = child;
   27c2e:	600b      	str	r3, [r1, #0]
	list->tail = node;
   27c30:	6053      	str	r3, [r2, #4]
   27c32:	e7e1      	b.n	27bf8 <at_notif_register_handler+0x48>
   27c34:	000402cc 	.word	0x000402cc
   27c38:	000402e4 	.word	0x000402e4
   27c3c:	000438cc 	.word	0x000438cc
   27c40:	2003190c 	.word	0x2003190c
   27c44:	20023c84 	.word	0x20023c84

00027c48 <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   27c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27c4a:	4605      	mov	r5, r0
	if (handler == NULL) {
   27c4c:	460c      	mov	r4, r1
   27c4e:	b999      	cbnz	r1, 27c78 <at_notif_deregister_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   27c50:	2301      	movs	r3, #1
   27c52:	f04f 0000 	mov.w	r0, #0
   27c56:	4921      	ldr	r1, [pc, #132]	; (27cdc <at_notif_deregister_handler+0x94>)
   27c58:	f363 0007 	bfi	r0, r3, #0, #8
   27c5c:	4b20      	ldr	r3, [pc, #128]	; (27ce0 <at_notif_deregister_handler+0x98>)
   27c5e:	462a      	mov	r2, r5
   27c60:	1ac9      	subs	r1, r1, r3
   27c62:	08c9      	lsrs	r1, r1, #3
   27c64:	f361 108f 	bfi	r0, r1, #6, #10
   27c68:	4623      	mov	r3, r4
   27c6a:	491e      	ldr	r1, [pc, #120]	; (27ce4 <at_notif_deregister_handler+0x9c>)
   27c6c:	f014 fd09 	bl	3c682 <log_string_sync>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   27c70:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   27c74:	b003      	add	sp, #12
   27c76:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   27c78:	2300      	movs	r3, #0
   27c7a:	9301      	str	r3, [sp, #4]
   27c7c:	f04f 31ff 	mov.w	r1, #4294967295
   27c80:	4819      	ldr	r0, [pc, #100]	; (27ce8 <at_notif_deregister_handler+0xa0>)
   27c82:	f00f fa29 	bl	370d8 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   27c86:	4622      	mov	r2, r4
   27c88:	4629      	mov	r1, r5
   27c8a:	a801      	add	r0, sp, #4
   27c8c:	f7ff ff2a 	bl	27ae4 <find_node>
	if (curr == NULL) {
   27c90:	b978      	cbnz	r0, 27cb2 <at_notif_deregister_handler+0x6a>
		LOG_WRN("Handler not registered. Nothing to do");
   27c92:	2302      	movs	r3, #2
   27c94:	4a12      	ldr	r2, [pc, #72]	; (27ce0 <at_notif_deregister_handler+0x98>)
   27c96:	f363 0007 	bfi	r0, r3, #0, #8
   27c9a:	4b10      	ldr	r3, [pc, #64]	; (27cdc <at_notif_deregister_handler+0x94>)
   27c9c:	4913      	ldr	r1, [pc, #76]	; (27cec <at_notif_deregister_handler+0xa4>)
   27c9e:	1a9b      	subs	r3, r3, r2
   27ca0:	08db      	lsrs	r3, r3, #3
   27ca2:	f363 108f 	bfi	r0, r3, #6, #10
   27ca6:	f014 fcec 	bl	3c682 <log_string_sync>
	k_mutex_unlock(&list_mtx);
   27caa:	f7ff ff5f 	bl	27b6c <k_mutex_unlock.constprop.7>
	return remove_notif_handler(context, handler);
   27cae:	2000      	movs	r0, #0
   27cb0:	e7e0      	b.n	27c74 <at_notif_deregister_handler+0x2c>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   27cb2:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   27cb4:	6801      	ldr	r1, [r0, #0]
   27cb6:	4b0e      	ldr	r3, [pc, #56]	; (27cf0 <at_notif_deregister_handler+0xa8>)
   27cb8:	b94a      	cbnz	r2, 27cce <at_notif_deregister_handler+0x86>
   27cba:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   27cbc:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   27cbe:	4290      	cmp	r0, r2
   27cc0:	d100      	bne.n	27cc4 <at_notif_deregister_handler+0x7c>
	list->tail = node;
   27cc2:	6059      	str	r1, [r3, #4]
	parent->next = child;
   27cc4:	2300      	movs	r3, #0
   27cc6:	6003      	str	r3, [r0, #0]
	k_free(curr);
   27cc8:	f016 fe5e 	bl	3e988 <k_free>
   27ccc:	e7ed      	b.n	27caa <at_notif_deregister_handler+0x62>
   27cce:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   27cd0:	6859      	ldr	r1, [r3, #4]
   27cd2:	4288      	cmp	r0, r1
	list->tail = node;
   27cd4:	bf08      	it	eq
   27cd6:	605a      	streq	r2, [r3, #4]
   27cd8:	e7f4      	b.n	27cc4 <at_notif_deregister_handler+0x7c>
   27cda:	bf00      	nop
   27cdc:	000402e4 	.word	0x000402e4
   27ce0:	000402cc 	.word	0x000402cc
   27ce4:	000438cc 	.word	0x000438cc
   27ce8:	2003190c 	.word	0x2003190c
   27cec:	000438a6 	.word	0x000438a6
   27cf0:	20023c84 	.word	0x20023c84

00027cf4 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   27cf4:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   27cf6:	4d05      	ldr	r5, [pc, #20]	; (27d0c <write_uart_string+0x18>)
   27cf8:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   27cfa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   27cfe:	b901      	cbnz	r1, 27d02 <write_uart_string+0xe>
	}
}
   27d00:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   27d02:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   27d04:	6843      	ldr	r3, [r0, #4]
   27d06:	685b      	ldr	r3, [r3, #4]
   27d08:	4798      	blx	r3
   27d0a:	e7f6      	b.n	27cfa <write_uart_string+0x6>
   27d0c:	20023d60 	.word	0x20023d60

00027d10 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   27d10:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   27d12:	4923      	ldr	r1, [pc, #140]	; (27da0 <cmd_send+0x90>)
{
   27d14:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   27d16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   27d1a:	f10d 030b 	add.w	r3, sp, #11
   27d1e:	4608      	mov	r0, r1
   27d20:	f7ff fe94 	bl	27a4c <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   27d24:	1e02      	subs	r2, r0, #0
   27d26:	da12      	bge.n	27d4e <cmd_send+0x3e>
		LOG_ERR("Error while processing AT command: %d", err);
   27d28:	2301      	movs	r3, #1
   27d2a:	f04f 0000 	mov.w	r0, #0
   27d2e:	491d      	ldr	r1, [pc, #116]	; (27da4 <cmd_send+0x94>)
   27d30:	f363 0007 	bfi	r0, r3, #0, #8
   27d34:	4b1c      	ldr	r3, [pc, #112]	; (27da8 <cmd_send+0x98>)
   27d36:	1a5b      	subs	r3, r3, r1
   27d38:	08db      	lsrs	r3, r3, #3
   27d3a:	f363 108f 	bfi	r0, r3, #6, #10
   27d3e:	491b      	ldr	r1, [pc, #108]	; (27dac <cmd_send+0x9c>)
   27d40:	f014 fc9f 	bl	3c682 <log_string_sync>
		state = AT_CMD_ERROR;
   27d44:	2301      	movs	r3, #1
   27d46:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   27d4a:	4819      	ldr	r0, [pc, #100]	; (27db0 <cmd_send+0xa0>)
   27d4c:	e012      	b.n	27d74 <cmd_send+0x64>
	switch (state) {
   27d4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   27d52:	2b03      	cmp	r3, #3
   27d54:	d810      	bhi.n	27d78 <cmd_send+0x68>
   27d56:	a101      	add	r1, pc, #4	; (adr r1, 27d5c <cmd_send+0x4c>)
   27d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   27d5c:	00027d6d 	.word	0x00027d6d
   27d60:	00027d4b 	.word	0x00027d4b
   27d64:	00027d87 	.word	0x00027d87
   27d68:	00027d99 	.word	0x00027d99
		write_uart_string(at_buf);
   27d6c:	480c      	ldr	r0, [pc, #48]	; (27da0 <cmd_send+0x90>)
   27d6e:	f7ff ffc1 	bl	27cf4 <write_uart_string>
		write_uart_string(OK_STR);
   27d72:	4810      	ldr	r0, [pc, #64]	; (27db4 <cmd_send+0xa4>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   27d74:	f7ff ffbe 	bl	27cf4 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   27d78:	4b0f      	ldr	r3, [pc, #60]	; (27db8 <cmd_send+0xa8>)
   27d7a:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   27d7c:	f016 fab3 	bl	3e2e6 <z_impl_uart_irq_rx_enable>
}
   27d80:	b00b      	add	sp, #44	; 0x2c
   27d82:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   27d86:	4b0d      	ldr	r3, [pc, #52]	; (27dbc <cmd_send+0xac>)
   27d88:	9200      	str	r2, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   27d8a:	2219      	movs	r2, #25
   27d8c:	2100      	movs	r1, #0
   27d8e:	a803      	add	r0, sp, #12
   27d90:	f017 f8f4 	bl	3ef7c <__sprintf_chk>
		write_uart_string(str);
   27d94:	a803      	add	r0, sp, #12
   27d96:	e7ed      	b.n	27d74 <cmd_send+0x64>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   27d98:	9200      	str	r2, [sp, #0]
   27d9a:	4b09      	ldr	r3, [pc, #36]	; (27dc0 <cmd_send+0xb0>)
   27d9c:	e7f5      	b.n	27d8a <cmd_send+0x7a>
   27d9e:	bf00      	nop
   27da0:	20029f56 	.word	0x20029f56
   27da4:	000402cc 	.word	0x000402cc
   27da8:	000402dc 	.word	0x000402dc
   27dac:	000439e4 	.word	0x000439e4
   27db0:	00043a0a 	.word	0x00043a0a
   27db4:	00041a6b 	.word	0x00041a6b
   27db8:	20023d60 	.word	0x20023d60
   27dbc:	00043a12 	.word	0x00043a12
   27dc0:	00043a23 	.word	0x00043a23

00027dc4 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(struct device *dev)
{
   27dc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   27dc8:	4606      	mov	r6, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
   27dca:	6843      	ldr	r3, [r0, #4]
   27dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   27dce:	b103      	cbz	r3, 27dd2 <isr+0xe>
		return api->irq_update(dev);
   27dd0:	4798      	blx	r3
	if (api->irq_rx_ready) {
   27dd2:	6873      	ldr	r3, [r6, #4]
   27dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   27dd6:	b1c3      	cbz	r3, 27e0a <isr+0x46>
		return api->irq_rx_ready(dev);
   27dd8:	4630      	mov	r0, r6
   27dda:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   27ddc:	b1a8      	cbz	r0, 27e0a <isr+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27dde:	f8df a14c 	ldr.w	sl, [pc, #332]	; 27f2c <isr+0x168>
   27de2:	4d47      	ldr	r5, [pc, #284]	; (27f00 <isr+0x13c>)
   27de4:	46d1      	mov	r9, sl
			LOG_WRN("Ignored null; would terminate string early.");
   27de6:	4b47      	ldr	r3, [pc, #284]	; (27f04 <isr+0x140>)
		if (at_cmd_len > 0) {
   27de8:	4c47      	ldr	r4, [pc, #284]	; (27f08 <isr+0x144>)
			LOG_WRN("Ignored null; would terminate string early.");
   27dea:	1aed      	subs	r5, r5, r3
   27dec:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   27df0:	e8da 3faf 	lda	r3, [sl]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   27df4:	07db      	lsls	r3, r3, #31
   27df6:	d408      	bmi.n	27e0a <isr+0x46>
	if (api->fifo_read) {
   27df8:	6873      	ldr	r3, [r6, #4]
   27dfa:	699b      	ldr	r3, [r3, #24]
   27dfc:	b12b      	cbz	r3, 27e0a <isr+0x46>
		return api->fifo_read(dev, rx_data, size);
   27dfe:	2201      	movs	r2, #1
   27e00:	f10d 0107 	add.w	r1, sp, #7
   27e04:	4630      	mov	r0, r6
   27e06:	4798      	blx	r3
   27e08:	b910      	cbnz	r0, 27e10 <isr+0x4c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   27e0a:	b002      	add	sp, #8
   27e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uart_rx_handler(character);
   27e10:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   27e14:	2a08      	cmp	r2, #8
   27e16:	d001      	beq.n	27e1c <isr+0x58>
   27e18:	2a7f      	cmp	r2, #127	; 0x7f
   27e1a:	d105      	bne.n	27e28 <isr+0x64>
		if (at_cmd_len > 0) {
   27e1c:	6823      	ldr	r3, [r4, #0]
   27e1e:	2b00      	cmp	r3, #0
   27e20:	d0e6      	beq.n	27df0 <isr+0x2c>
			at_cmd_len--;
   27e22:	3b01      	subs	r3, #1
   27e24:	6023      	str	r3, [r4, #0]
   27e26:	e7e3      	b.n	27df0 <isr+0x2c>
	if (!inside_quotes) {
   27e28:	4938      	ldr	r1, [pc, #224]	; (27f0c <isr+0x148>)
   27e2a:	780b      	ldrb	r3, [r1, #0]
   27e2c:	b9cb      	cbnz	r3, 27e62 <isr+0x9e>
		switch (character) {
   27e2e:	2a0a      	cmp	r2, #10
   27e30:	d02b      	beq.n	27e8a <isr+0xc6>
   27e32:	2a0d      	cmp	r2, #13
   27e34:	d011      	beq.n	27e5a <isr+0x96>
   27e36:	b9a2      	cbnz	r2, 27e62 <isr+0x9e>
			if (term_mode == MODE_NULL_TERM) {
   27e38:	4b35      	ldr	r3, [pc, #212]	; (27f10 <isr+0x14c>)
   27e3a:	781b      	ldrb	r3, [r3, #0]
   27e3c:	2b00      	cmp	r3, #0
   27e3e:	d040      	beq.n	27ec2 <isr+0xfe>
			LOG_WRN("Ignored null; would terminate string early.");
   27e40:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   27e44:	f043 0302 	orr.w	r3, r3, #2
   27e48:	f363 0707 	bfi	r7, r3, #0, #8
   27e4c:	f365 178f 	bfi	r7, r5, #6, #10
   27e50:	4930      	ldr	r1, [pc, #192]	; (27f14 <isr+0x150>)
   27e52:	4638      	mov	r0, r7
   27e54:	f014 fc15 	bl	3c682 <log_string_sync>
			return;
   27e58:	e7ca      	b.n	27df0 <isr+0x2c>
			if (term_mode == MODE_CR) {
   27e5a:	482d      	ldr	r0, [pc, #180]	; (27f10 <isr+0x14c>)
   27e5c:	7800      	ldrb	r0, [r0, #0]
   27e5e:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   27e60:	d02f      	beq.n	27ec2 <isr+0xfe>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   27e62:	f8d4 c000 	ldr.w	ip, [r4]
   27e66:	f10c 0001 	add.w	r0, ip, #1
   27e6a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   27e6e:	d31d      	bcc.n	27eac <isr+0xe8>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   27e70:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   27e74:	f043 0301 	orr.w	r3, r3, #1
   27e78:	f363 0807 	bfi	r8, r3, #0, #8
   27e7c:	f365 188f 	bfi	r8, r5, #6, #10
   27e80:	4925      	ldr	r1, [pc, #148]	; (27f18 <isr+0x154>)
   27e82:	4640      	mov	r0, r8
   27e84:	f014 fbfd 	bl	3c682 <log_string_sync>
		return;
   27e88:	e7b2      	b.n	27df0 <isr+0x2c>
			if (term_mode == MODE_LF) {
   27e8a:	4821      	ldr	r0, [pc, #132]	; (27f10 <isr+0x14c>)
   27e8c:	7800      	ldrb	r0, [r0, #0]
   27e8e:	2802      	cmp	r0, #2
   27e90:	d017      	beq.n	27ec2 <isr+0xfe>
			if (term_mode == MODE_CR_LF &&
   27e92:	2803      	cmp	r0, #3
   27e94:	d1e5      	bne.n	27e62 <isr+0x9e>
   27e96:	f8d4 c000 	ldr.w	ip, [r4]
   27e9a:	f1bc 0f00 	cmp.w	ip, #0
   27e9e:	d0e0      	beq.n	27e62 <isr+0x9e>
			    at_buf[at_cmd_len - 1] == '\r') {
   27ea0:	481e      	ldr	r0, [pc, #120]	; (27f1c <isr+0x158>)
   27ea2:	4460      	add	r0, ip
			    at_cmd_len > 0 &&
   27ea4:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   27ea8:	280d      	cmp	r0, #13
   27eaa:	e7d9      	b.n	27e60 <isr+0x9c>
	at_buf[at_cmd_len] = character;
   27eac:	f8df e06c 	ldr.w	lr, [pc, #108]	; 27f1c <isr+0x158>
	if (character == '"') {
   27eb0:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   27eb2:	f80e 200c 	strb.w	r2, [lr, ip]
	at_cmd_len++;
   27eb6:	6020      	str	r0, [r4, #0]
	if (character == '"') {
   27eb8:	d19a      	bne.n	27df0 <isr+0x2c>
	if (!inside_quotes) {
   27eba:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   27ebe:	700b      	strb	r3, [r1, #0]
   27ec0:	e796      	b.n	27df0 <isr+0x2c>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   27ec2:	2300      	movs	r3, #0
   27ec4:	4a15      	ldr	r2, [pc, #84]	; (27f1c <isr+0x158>)
   27ec6:	6820      	ldr	r0, [r4, #0]
	inside_quotes = false;
   27ec8:	700b      	strb	r3, [r1, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   27eca:	5413      	strb	r3, [r2, r0]
	at_cmd_len = 0;
   27ecc:	6023      	str	r3, [r4, #0]
	if (at_buf[0]) {
   27ece:	7813      	ldrb	r3, [r2, #0]
   27ed0:	2b00      	cmp	r3, #0
   27ed2:	d08d      	beq.n	27df0 <isr+0x2c>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   27ed4:	4b12      	ldr	r3, [pc, #72]	; (27f20 <isr+0x15c>)
   27ed6:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   27ed8:	6843      	ldr	r3, [r0, #4]
   27eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27edc:	b103      	cbz	r3, 27ee0 <isr+0x11c>
		api->irq_rx_disable(dev);
   27ede:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27ee0:	e8d9 3fef 	ldaex	r3, [r9]
   27ee4:	f043 0201 	orr.w	r2, r3, #1
   27ee8:	e8c9 2fe1 	stlex	r1, r2, [r9]
   27eec:	2900      	cmp	r1, #0
   27eee:	d1f7      	bne.n	27ee0 <isr+0x11c>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   27ef0:	07da      	lsls	r2, r3, #31
   27ef2:	f53f af7d 	bmi.w	27df0 <isr+0x2c>
		k_queue_append(&work_q->queue, work);
   27ef6:	490b      	ldr	r1, [pc, #44]	; (27f24 <isr+0x160>)
   27ef8:	480b      	ldr	r0, [pc, #44]	; (27f28 <isr+0x164>)
   27efa:	f016 fd7b 	bl	3e9f4 <k_queue_append>
   27efe:	e777      	b.n	27df0 <isr+0x2c>
   27f00:	000402dc 	.word	0x000402dc
   27f04:	000402cc 	.word	0x000402cc
   27f08:	20023c8c 	.word	0x20023c8c
   27f0c:	2002af56 	.word	0x2002af56
   27f10:	2002af57 	.word	0x2002af57
   27f14:	00043a34 	.word	0x00043a34
   27f18:	00043a60 	.word	0x00043a60
   27f1c:	20029f56 	.word	0x20029f56
   27f20:	20023d60 	.word	0x20023d60
   27f24:	20023d54 	.word	0x20023d54
   27f28:	20023c90 	.word	0x20023c90
   27f2c:	20023d5c 	.word	0x20023d5c

00027f30 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   27f30:	2202      	movs	r2, #2
   27f32:	4b49      	ldr	r3, [pc, #292]	; (28058 <at_host_init+0x128>)
{
   27f34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   27f38:	4948      	ldr	r1, [pc, #288]	; (2805c <at_host_init+0x12c>)
   27f3a:	2000      	movs	r0, #0
		term_mode = mode;
   27f3c:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   27f3e:	f7ff fe37 	bl	27bb0 <at_notif_register_handler>
	if (err != 0) {
   27f42:	4c47      	ldr	r4, [pc, #284]	; (28060 <at_host_init+0x130>)
   27f44:	4b47      	ldr	r3, [pc, #284]	; (28064 <at_host_init+0x134>)
   27f46:	4606      	mov	r6, r0
   27f48:	1ae4      	subs	r4, r4, r3
   27f4a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   27f4e:	b170      	cbz	r0, 27f6e <at_host_init+0x3e>
		LOG_ERR("Can't register handler err=%d", err);
   27f50:	f04f 0000 	mov.w	r0, #0
   27f54:	2301      	movs	r3, #1
   27f56:	f363 0007 	bfi	r0, r3, #0, #8
   27f5a:	f364 108f 	bfi	r0, r4, #6, #10
   27f5e:	4632      	mov	r2, r6
   27f60:	4941      	ldr	r1, [pc, #260]	; (28068 <at_host_init+0x138>)
   27f62:	f014 fb8e 	bl	3c682 <log_string_sync>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   27f66:	4630      	mov	r0, r6
   27f68:	b002      	add	sp, #8
   27f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27f6e:	483f      	ldr	r0, [pc, #252]	; (2806c <at_host_init+0x13c>)
   27f70:	f00e fbc2 	bl	366f8 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   27f74:	4d3e      	ldr	r5, [pc, #248]	; (28070 <at_host_init+0x140>)
   27f76:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   27f78:	b9b8      	cbnz	r0, 27faa <at_host_init+0x7a>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   27f7a:	2301      	movs	r3, #1
   27f7c:	f363 0007 	bfi	r0, r3, #0, #8
   27f80:	4a3a      	ldr	r2, [pc, #232]	; (2806c <at_host_init+0x13c>)
   27f82:	f364 108f 	bfi	r0, r4, #6, #10
   27f86:	493b      	ldr	r1, [pc, #236]	; (28074 <at_host_init+0x144>)
   27f88:	f014 fb7b 	bl	3c682 <log_string_sync>
		return -EINVAL;
   27f8c:	f06f 0215 	mvn.w	r2, #21
		LOG_ERR("UART could not be initialized: %d", err);
   27f90:	2301      	movs	r3, #1
   27f92:	f04f 0000 	mov.w	r0, #0
   27f96:	f363 0007 	bfi	r0, r3, #0, #8
   27f9a:	f364 108f 	bfi	r0, r4, #6, #10
   27f9e:	4936      	ldr	r1, [pc, #216]	; (28078 <at_host_init+0x148>)
   27fa0:	f014 fb6f 	bl	3c682 <log_string_sync>
		return -EFAULT;
   27fa4:	f06f 060d 	mvn.w	r6, #13
   27fa8:	e7dd      	b.n	27f66 <at_host_init+0x36>
	return z_impl_k_uptime_get();
   27faa:	f016 fe08 	bl	3ebbe <z_impl_k_uptime_get>
   27fae:	4681      	mov	r9, r0
			LOG_INF("UART check failed: %d. "
   27fb0:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 28094 <at_host_init+0x164>
		err = uart_err_check(uart_dev);
   27fb4:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   27fb6:	6843      	ldr	r3, [r0, #4]
   27fb8:	689b      	ldr	r3, [r3, #8]
   27fba:	b39b      	cbz	r3, 28024 <at_host_init+0xf4>
		return api->err_check(dev);
   27fbc:	4798      	blx	r3
		if (err) {
   27fbe:	4680      	mov	r8, r0
   27fc0:	b380      	cbz	r0, 28024 <at_host_init+0xf4>
   27fc2:	f016 fdfc 	bl	3ebbe <z_impl_k_uptime_get>
			if (k_uptime_get_32() - start_time >
   27fc6:	eba0 0009 	sub.w	r0, r0, r9
   27fca:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   27fce:	d90d      	bls.n	27fec <at_host_init+0xbc>
				LOG_ERR("UART check failed: %d. "
   27fd0:	2301      	movs	r3, #1
   27fd2:	f04f 0000 	mov.w	r0, #0
   27fd6:	f363 0007 	bfi	r0, r3, #0, #8
   27fda:	4642      	mov	r2, r8
   27fdc:	f364 108f 	bfi	r0, r4, #6, #10
   27fe0:	4926      	ldr	r1, [pc, #152]	; (2807c <at_host_init+0x14c>)
   27fe2:	f014 fb4e 	bl	3c682 <log_string_sync>
				return -EIO;
   27fe6:	f06f 0204 	mvn.w	r2, #4
   27fea:	e7d1      	b.n	27f90 <at_host_init+0x60>
			LOG_INF("UART check failed: %d. "
   27fec:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   27ff0:	f043 0303 	orr.w	r3, r3, #3
   27ff4:	f363 0707 	bfi	r7, r3, #0, #8
   27ff8:	f364 178f 	bfi	r7, r4, #6, #10
   27ffc:	4642      	mov	r2, r8
   27ffe:	4651      	mov	r1, sl
   28000:	4638      	mov	r0, r7
   28002:	f014 fb3e 	bl	3c682 <log_string_sync>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   28006:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   28008:	6843      	ldr	r3, [r0, #4]
   2800a:	699b      	ldr	r3, [r3, #24]
   2800c:	b91b      	cbnz	r3, 28016 <at_host_init+0xe6>
	return z_impl_k_sleep(ms);
   2800e:	200a      	movs	r0, #10
   28010:	f010 fc32 	bl	38878 <z_impl_k_sleep>
   28014:	e7ce      	b.n	27fb4 <at_host_init+0x84>
		return api->fifo_read(dev, rx_data, size);
   28016:	2201      	movs	r2, #1
   28018:	f10d 0107 	add.w	r1, sp, #7
   2801c:	4798      	blx	r3
   2801e:	2800      	cmp	r0, #0
   28020:	d1f1      	bne.n	28006 <at_host_init+0xd6>
   28022:	e7f4      	b.n	2800e <at_host_init+0xde>
	uart_irq_callback_set(uart_dev, isr);
   28024:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
   28026:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   28028:	b123      	cbz	r3, 28034 <at_host_init+0x104>
   2802a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2802c:	b113      	cbz	r3, 28034 <at_host_init+0x104>
		api->irq_callback_set(dev, cb, user_data);
   2802e:	4914      	ldr	r1, [pc, #80]	; (28080 <at_host_init+0x150>)
   28030:	4610      	mov	r0, r2
   28032:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   28034:	2200      	movs	r2, #0
   28036:	4b13      	ldr	r3, [pc, #76]	; (28084 <at_host_init+0x154>)
   28038:	4913      	ldr	r1, [pc, #76]	; (28088 <at_host_init+0x158>)
   2803a:	601a      	str	r2, [r3, #0]
   2803c:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   28040:	4812      	ldr	r0, [pc, #72]	; (2808c <at_host_init+0x15c>)
   28042:	230a      	movs	r3, #10
   28044:	f44f 7200 	mov.w	r2, #512	; 0x200
   28048:	4911      	ldr	r1, [pc, #68]	; (28090 <at_host_init+0x160>)
   2804a:	f010 ff37 	bl	38ebc <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   2804e:	6828      	ldr	r0, [r5, #0]
   28050:	f016 f949 	bl	3e2e6 <z_impl_uart_irq_rx_enable>
	return err;
   28054:	e787      	b.n	27f66 <at_host_init+0x36>
   28056:	bf00      	nop
   28058:	2002af57 	.word	0x2002af57
   2805c:	0003e2f1 	.word	0x0003e2f1
   28060:	000402dc 	.word	0x000402dc
   28064:	000402cc 	.word	0x000402cc
   28068:	00043929 	.word	0x00043929
   2806c:	000424c3 	.word	0x000424c3
   28070:	20023d60 	.word	0x20023d60
   28074:	00043947 	.word	0x00043947
   28078:	000439c2 	.word	0x000439c2
   2807c:	00043957 	.word	0x00043957
   28080:	00027dc5 	.word	0x00027dc5
   28084:	20023d54 	.word	0x20023d54
   28088:	00027d11 	.word	0x00027d11
   2808c:	20023c90 	.word	0x20023c90
   28090:	2002c720 	.word	0x2002c720
   28094:	0004398d 	.word	0x0004398d

00028098 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper(chr);
   28098:	4b06      	ldr	r3, [pc, #24]	; (280b4 <is_valid_notification_char+0x1c>)
   2809a:	5cc3      	ldrb	r3, [r0, r3]
   2809c:	f003 0303 	and.w	r3, r3, #3
   280a0:	2b02      	cmp	r3, #2
   280a2:	bf08      	it	eq
   280a4:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   280a6:	3841      	subs	r0, #65	; 0x41
   280a8:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   280aa:	2819      	cmp	r0, #25
   280ac:	bf8c      	ite	hi
   280ae:	2000      	movhi	r0, #0
   280b0:	2001      	movls	r0, #1
   280b2:	4770      	bx	lr
   280b4:	00046c56 	.word	0x00046c56

000280b8 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   280b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   280bc:	6805      	ldr	r5, [r0, #0]
{
   280be:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   280c0:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   280c2:	782b      	ldrb	r3, [r5, #0]
{
   280c4:	4680      	mov	r8, r0
   280c6:	460f      	mov	r7, r1
   280c8:	4616      	mov	r6, r2
   280ca:	2b00      	cmp	r3, #0
   280cc:	f000 80bd 	beq.w	2824a <at_parse_process_element+0x192>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   280d0:	4b5f      	ldr	r3, [pc, #380]	; (28250 <at_parse_process_element+0x198>)
   280d2:	781c      	ldrb	r4, [r3, #0]
   280d4:	2c05      	cmp	r4, #5
   280d6:	d110      	bne.n	280fa <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   280d8:	1c6b      	adds	r3, r5, #1
   280da:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   280dc:	9a00      	ldr	r2, [sp, #0]
   280de:	7810      	ldrb	r0, [r2, #0]
   280e0:	f7ff ffda 	bl	28098 <is_valid_notification_char>
   280e4:	b930      	cbnz	r0, 280f4 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   280e6:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   280e8:	462a      	mov	r2, r5
   280ea:	4639      	mov	r1, r7
   280ec:	4630      	mov	r0, r6
   280ee:	f016 f978 	bl	3e3e2 <at_params_string_put>
   280f2:	e01b      	b.n	2812c <at_parse_process_element+0x74>
			tmpstr++;
   280f4:	3201      	adds	r2, #1
   280f6:	9200      	str	r2, [sp, #0]
   280f8:	e7f0      	b.n	280dc <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   280fa:	2c06      	cmp	r4, #6
   280fc:	d124      	bne.n	28148 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   280fe:	4668      	mov	r0, sp
   28100:	f016 f902 	bl	3e308 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   28104:	9a00      	ldr	r2, [sp, #0]
   28106:	7810      	ldrb	r0, [r2, #0]
   28108:	f7ff ffc6 	bl	28098 <is_valid_notification_char>
   2810c:	b9a8      	cbnz	r0, 2813a <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   2810e:	1b53      	subs	r3, r2, r5
   28110:	4639      	mov	r1, r7
   28112:	462a      	mov	r2, r5
   28114:	4630      	mov	r0, r6
   28116:	f016 f964 	bl	3e3e2 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   2811a:	9b00      	ldr	r3, [sp, #0]
   2811c:	781a      	ldrb	r2, [r3, #0]
   2811e:	2a3d      	cmp	r2, #61	; 0x3d
   28120:	d10e      	bne.n	28140 <at_parse_process_element+0x88>
   28122:	785a      	ldrb	r2, [r3, #1]
   28124:	2a3f      	cmp	r2, #63	; 0x3f
   28126:	d101      	bne.n	2812c <at_parse_process_element+0x74>
			tmpstr += 2;
   28128:	3302      	adds	r3, #2
			tmpstr++;
   2812a:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   2812c:	2000      	movs	r0, #0
	*str = tmpstr;
   2812e:	9b00      	ldr	r3, [sp, #0]
   28130:	f8c8 3000 	str.w	r3, [r8]
}
   28134:	b023      	add	sp, #140	; 0x8c
   28136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   2813a:	3201      	adds	r2, #1
   2813c:	9200      	str	r2, [sp, #0]
   2813e:	e7e1      	b.n	28104 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   28140:	2a3f      	cmp	r2, #63	; 0x3f
   28142:	d1f3      	bne.n	2812c <at_parse_process_element+0x74>
			tmpstr++;
   28144:	3301      	adds	r3, #1
   28146:	e7f0      	b.n	2812a <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   28148:	2c07      	cmp	r4, #7
   2814a:	d103      	bne.n	28154 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   2814c:	4610      	mov	r0, r2
   2814e:	f016 f91f 	bl	3e390 <at_params_empty_put>
   28152:	e7eb      	b.n	2812c <at_parse_process_element+0x74>
	} else if (state == STRING) {
   28154:	2c02      	cmp	r4, #2
   28156:	d112      	bne.n	2817e <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   28158:	9a00      	ldr	r2, [sp, #0]
   2815a:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   2815c:	2822      	cmp	r0, #34	; 0x22
   2815e:	d003      	beq.n	28168 <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   28160:	b110      	cbz	r0, 28168 <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   28162:	f016 f8c8 	bl	3e2f6 <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   28166:	b138      	cbz	r0, 28178 <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   28168:	1b53      	subs	r3, r2, r5
   2816a:	4639      	mov	r1, r7
   2816c:	462a      	mov	r2, r5
   2816e:	4630      	mov	r0, r6
   28170:	f016 f937 	bl	3e3e2 <at_params_string_put>
		tmpstr++;
   28174:	9b00      	ldr	r3, [sp, #0]
   28176:	e7e5      	b.n	28144 <at_parse_process_element+0x8c>
			tmpstr++;
   28178:	3201      	adds	r2, #1
   2817a:	9200      	str	r2, [sp, #0]
   2817c:	e7ec      	b.n	28158 <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   2817e:	2c01      	cmp	r4, #1
   28180:	d13c      	bne.n	281fc <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   28182:	4628      	mov	r0, r5
   28184:	220a      	movs	r2, #10
   28186:	a901      	add	r1, sp, #4
   28188:	f012 fd2e 	bl	3abe8 <strtoul>
		tmpstr = next;
   2818c:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2818e:	4d31      	ldr	r5, [pc, #196]	; (28254 <at_parse_process_element+0x19c>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   28190:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   28192:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   28194:	9800      	ldr	r0, [sp, #0]
   28196:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   28198:	2b29      	cmp	r3, #41	; 0x29
   2819a:	d028      	beq.n	281ee <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2819c:	b33b      	cbz	r3, 281ee <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2819e:	3b2c      	subs	r3, #44	; 0x2c
   281a0:	b2db      	uxtb	r3, r3
   281a2:	3001      	adds	r0, #1
   281a4:	2b11      	cmp	r3, #17
				tmparray[i++] =
   281a6:	9000      	str	r0, [sp, #0]
   281a8:	d803      	bhi.n	281b2 <at_parse_process_element+0xfa>
   281aa:	fa25 f303 	lsr.w	r3, r5, r3
   281ae:	07db      	lsls	r3, r3, #31
   281b0:	d408      	bmi.n	281c4 <at_parse_process_element+0x10c>
				tmpstr++;
   281b2:	46a1      	mov	r9, r4
   281b4:	e004      	b.n	281c0 <at_parse_process_element+0x108>
					tmpstr = next;
   281b6:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   281b8:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   281bc:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   281be:	d015      	beq.n	281ec <at_parse_process_element+0x134>
				tmpstr++;
   281c0:	464c      	mov	r4, r9
   281c2:	e7e7      	b.n	28194 <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   281c4:	220a      	movs	r2, #10
   281c6:	a901      	add	r1, sp, #4
   281c8:	f012 fd0e 	bl	3abe8 <strtoul>
				tmparray[i++] =
   281cc:	ab22      	add	r3, sp, #136	; 0x88
   281ce:	f104 0901 	add.w	r9, r4, #1
   281d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   281d6:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   281da:	9800      	ldr	r0, [sp, #0]
   281dc:	f7f4 ffa2 	bl	1d124 <strlen>
   281e0:	4604      	mov	r4, r0
   281e2:	9801      	ldr	r0, [sp, #4]
   281e4:	f7f4 ff9e 	bl	1d124 <strlen>
   281e8:	4284      	cmp	r4, r0
   281ea:	d1e4      	bne.n	281b6 <at_parse_process_element+0xfe>
   281ec:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   281ee:	00a3      	lsls	r3, r4, #2
   281f0:	aa02      	add	r2, sp, #8
   281f2:	4639      	mov	r1, r7
   281f4:	4630      	mov	r0, r6
   281f6:	f016 f91a 	bl	3e42e <at_params_array_put>
   281fa:	e7bb      	b.n	28174 <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   281fc:	2c03      	cmp	r4, #3
   281fe:	d115      	bne.n	2822c <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   28200:	220a      	movs	r2, #10
   28202:	a902      	add	r1, sp, #8
   28204:	4628      	mov	r0, r5
   28206:	f012 fcef 	bl	3abe8 <strtoul>
		tmpstr = next;
   2820a:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   2820c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   28210:	4602      	mov	r2, r0
		tmpstr = next;
   28212:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   28214:	da05      	bge.n	28222 <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   28216:	b282      	uxth	r2, r0
   28218:	4639      	mov	r1, r7
   2821a:	4630      	mov	r0, r6
   2821c:	f016 f8a3 	bl	3e366 <at_params_short_put>
   28220:	e784      	b.n	2812c <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   28222:	4639      	mov	r1, r7
   28224:	4630      	mov	r0, r6
   28226:	f016 f8c7 	bl	3e3b8 <at_params_int_put>
   2822a:	e77f      	b.n	2812c <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   2822c:	2c04      	cmp	r4, #4
   2822e:	f47f af7d 	bne.w	2812c <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   28232:	4909      	ldr	r1, [pc, #36]	; (28258 <at_parse_process_element+0x1a0>)
   28234:	9b00      	ldr	r3, [sp, #0]
   28236:	781a      	ldrb	r2, [r3, #0]
   28238:	5c52      	ldrb	r2, [r2, r1]
   2823a:	f012 0f44 	tst.w	r2, #68	; 0x44
   2823e:	d101      	bne.n	28244 <at_parse_process_element+0x18c>
		at_params_string_put(list, index, start_ptr,
   28240:	1b5b      	subs	r3, r3, r5
   28242:	e751      	b.n	280e8 <at_parse_process_element+0x30>
			tmpstr++;
   28244:	3301      	adds	r3, #1
   28246:	9300      	str	r3, [sp, #0]
   28248:	e7f4      	b.n	28234 <at_parse_process_element+0x17c>
		return -1;
   2824a:	f04f 30ff 	mov.w	r0, #4294967295
   2824e:	e771      	b.n	28134 <at_parse_process_element+0x7c>
   28250:	2002af58 	.word	0x2002af58
   28254:	00024001 	.word	0x00024001
   28258:	00046c56 	.word	0x00046c56

0002825c <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   2825c:	b510      	push	{r4, lr}
   2825e:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   28260:	f7f4 ff60 	bl	1d124 <strlen>
   28264:	2801      	cmp	r0, #1
   28266:	d922      	bls.n	282ae <is_command+0x52>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   28268:	7821      	ldrb	r1, [r4, #0]
   2826a:	4b13      	ldr	r3, [pc, #76]	; (282b8 <is_command+0x5c>)
   2826c:	5cca      	ldrb	r2, [r1, r3]
   2826e:	f002 0203 	and.w	r2, r2, #3
   28272:	2a02      	cmp	r2, #2
   28274:	bf08      	it	eq
   28276:	3920      	subeq	r1, #32
   28278:	2941      	cmp	r1, #65	; 0x41
   2827a:	461a      	mov	r2, r3
   2827c:	d117      	bne.n	282ae <is_command+0x52>
   2827e:	7863      	ldrb	r3, [r4, #1]
   28280:	5cd2      	ldrb	r2, [r2, r3]
   28282:	f002 0203 	and.w	r2, r2, #3
   28286:	2a02      	cmp	r2, #2
   28288:	bf08      	it	eq
   2828a:	3b20      	subeq	r3, #32
   2828c:	2b54      	cmp	r3, #84	; 0x54
   2828e:	d10e      	bne.n	282ae <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   28290:	78a2      	ldrb	r2, [r4, #2]
   28292:	2a25      	cmp	r2, #37	; 0x25
   28294:	d00d      	beq.n	282b2 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   28296:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   2829a:	2b23      	cmp	r3, #35	; 0x23
   2829c:	d009      	beq.n	282b2 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   2829e:	4610      	mov	r0, r2
   282a0:	f016 f829 	bl	3e2f6 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   282a4:	b910      	cbnz	r0, 282ac <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   282a6:	fab2 f082 	clz	r0, r2
   282aa:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   282ac:	bd10      	pop	{r4, pc}
	return false;
   282ae:	2000      	movs	r0, #0
   282b0:	e7fc      	b.n	282ac <is_command+0x50>
		return true;
   282b2:	2001      	movs	r0, #1
   282b4:	e7fa      	b.n	282ac <is_command+0x50>
   282b6:	bf00      	nop
   282b8:	00046c56 	.word	0x00046c56

000282bc <at_parse_detect_type>:
{
   282bc:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   282be:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   282c0:	2900      	cmp	r1, #0
{
   282c2:	4606      	mov	r6, r0
   282c4:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   282c6:	d141      	bne.n	2834c <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   282c8:	2a2b      	cmp	r2, #43	; 0x2b
   282ca:	4d29      	ldr	r5, [pc, #164]	; (28370 <at_parse_detect_type+0xb4>)
   282cc:	d001      	beq.n	282d2 <at_parse_detect_type+0x16>
   282ce:	2a25      	cmp	r2, #37	; 0x25
   282d0:	d104      	bne.n	282dc <at_parse_detect_type+0x20>
	state = new_state;
   282d2:	2305      	movs	r3, #5
   282d4:	702b      	strb	r3, [r5, #0]
	return 0;
   282d6:	2000      	movs	r0, #0
	*str = tmpstr;
   282d8:	6034      	str	r4, [r6, #0]
}
   282da:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   282dc:	4620      	mov	r0, r4
   282de:	f7ff ffbd 	bl	2825c <is_command>
   282e2:	b388      	cbz	r0, 28348 <at_parse_detect_type+0x8c>
	state = new_state;
   282e4:	2306      	movs	r3, #6
   282e6:	e7f5      	b.n	282d4 <at_parse_detect_type+0x18>
	if (chr == '"') {
   282e8:	2a22      	cmp	r2, #34	; 0x22
   282ea:	d006      	beq.n	282fa <at_parse_detect_type+0x3e>
	if (chr == '(') {
   282ec:	2a28      	cmp	r2, #40	; 0x28
   282ee:	d109      	bne.n	28304 <at_parse_detect_type+0x48>
   282f0:	2201      	movs	r2, #1
   282f2:	4b1f      	ldr	r3, [pc, #124]	; (28370 <at_parse_detect_type+0xb4>)
		tmpstr++;
   282f4:	4414      	add	r4, r2
	state = new_state;
   282f6:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   282f8:	e7ed      	b.n	282d6 <at_parse_detect_type+0x1a>
	state = new_state;
   282fa:	2202      	movs	r2, #2
   282fc:	4b1c      	ldr	r3, [pc, #112]	; (28370 <at_parse_detect_type+0xb4>)
		tmpstr++;
   282fe:	3401      	adds	r4, #1
	state = new_state;
   28300:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   28302:	e7e8      	b.n	282d6 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   28304:	4610      	mov	r0, r2
   28306:	f015 fff6 	bl	3e2f6 <is_lfcr>
   2830a:	b170      	cbz	r0, 2832a <at_parse_detect_type+0x6e>
   2830c:	4918      	ldr	r1, [pc, #96]	; (28370 <at_parse_detect_type+0xb4>)
   2830e:	7808      	ldrb	r0, [r1, #0]
   28310:	2803      	cmp	r0, #3
   28312:	d108      	bne.n	28326 <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   28314:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   28318:	f015 ffed 	bl	3e2f6 <is_lfcr>
   2831c:	2800      	cmp	r0, #0
   2831e:	d1f9      	bne.n	28314 <at_parse_detect_type+0x58>
	state = new_state;
   28320:	2304      	movs	r3, #4
   28322:	700b      	strb	r3, [r1, #0]
   28324:	e7d7      	b.n	282d6 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   28326:	2807      	cmp	r0, #7
   28328:	d0d5      	beq.n	282d6 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2832a:	3a2c      	subs	r2, #44	; 0x2c
   2832c:	b2d2      	uxtb	r2, r2
   2832e:	2a11      	cmp	r2, #17
   28330:	d807      	bhi.n	28342 <at_parse_detect_type+0x86>
   28332:	4b10      	ldr	r3, [pc, #64]	; (28374 <at_parse_detect_type+0xb8>)
   28334:	fa23 f202 	lsr.w	r2, r3, r2
   28338:	07d3      	lsls	r3, r2, #31
   2833a:	d502      	bpl.n	28342 <at_parse_detect_type+0x86>
	state = new_state;
   2833c:	4b0c      	ldr	r3, [pc, #48]	; (28370 <at_parse_detect_type+0xb4>)
   2833e:	2207      	movs	r2, #7
   28340:	e013      	b.n	2836a <at_parse_detect_type+0xae>
		return -1;
   28342:	f04f 30ff 	mov.w	r0, #4294967295
   28346:	e7c8      	b.n	282da <at_parse_detect_type+0x1e>
	state = new_state;
   28348:	2302      	movs	r3, #2
   2834a:	e7c3      	b.n	282d4 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   2834c:	dd03      	ble.n	28356 <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2834e:	2a2b      	cmp	r2, #43	; 0x2b
   28350:	d0f7      	beq.n	28342 <at_parse_detect_type+0x86>
   28352:	2a25      	cmp	r2, #37	; 0x25
   28354:	d0f5      	beq.n	28342 <at_parse_detect_type+0x86>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   28356:	4b08      	ldr	r3, [pc, #32]	; (28378 <at_parse_detect_type+0xbc>)
   28358:	5cd3      	ldrb	r3, [r2, r3]
   2835a:	0759      	lsls	r1, r3, #29
   2835c:	d403      	bmi.n	28366 <at_parse_detect_type+0xaa>
   2835e:	2a2d      	cmp	r2, #45	; 0x2d
   28360:	d001      	beq.n	28366 <at_parse_detect_type+0xaa>
   28362:	2a2b      	cmp	r2, #43	; 0x2b
   28364:	d1c0      	bne.n	282e8 <at_parse_detect_type+0x2c>
	state = new_state;
   28366:	2203      	movs	r2, #3
   28368:	4b01      	ldr	r3, [pc, #4]	; (28370 <at_parse_detect_type+0xb4>)
   2836a:	701a      	strb	r2, [r3, #0]
   2836c:	e7b3      	b.n	282d6 <at_parse_detect_type+0x1a>
   2836e:	bf00      	nop
   28370:	2002af58 	.word	0x2002af58
   28374:	00024001 	.word	0x00024001
   28378:	00046c56 	.word	0x00046c56

0002837c <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   2837c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28380:	4688      	mov	r8, r1
   28382:	4616      	mov	r6, r2
   28384:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   28386:	4604      	mov	r4, r0
   28388:	2800      	cmp	r0, #0
   2838a:	d07e      	beq.n	2848a <at_parser_max_params_from_str+0x10e>
   2838c:	2a00      	cmp	r2, #0
   2838e:	d07c      	beq.n	2848a <at_parser_max_params_from_str+0x10e>
   28390:	6853      	ldr	r3, [r2, #4]
   28392:	2b00      	cmp	r3, #0
   28394:	d079      	beq.n	2848a <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   28396:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   28398:	4610      	mov	r0, r2
   2839a:	f000 f8eb 	bl	28574 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   2839e:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   283a0:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   283a2:	4297      	cmp	r7, r2
   283a4:	bf28      	it	cs
   283a6:	4617      	movcs	r7, r2
	int index = 0;
   283a8:	462c      	mov	r4, r5
	state = IDLE;
   283aa:	4b39      	ldr	r3, [pc, #228]	; (28490 <at_parser_max_params_from_str+0x114>)
		if (isspace((int)*str)) {
   283ac:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 28494 <at_parser_max_params_from_str+0x118>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   283b0:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 28498 <at_parser_max_params_from_str+0x11c>
	state = IDLE;
   283b4:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   283b6:	9b01      	ldr	r3, [sp, #4]
   283b8:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   283ba:	2a00      	cmp	r2, #0
   283bc:	d04b      	beq.n	28456 <at_parser_max_params_from_str+0xda>
   283be:	42a7      	cmp	r7, r4
   283c0:	d949      	bls.n	28456 <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   283c2:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   283c6:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   283c8:	0711      	lsls	r1, r2, #28
			str++;
   283ca:	bf48      	it	mi
   283cc:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   283ce:	4621      	mov	r1, r4
			str++;
   283d0:	bf48      	it	mi
   283d2:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   283d4:	f7ff ff72 	bl	282bc <at_parse_detect_type>
   283d8:	1c42      	adds	r2, r0, #1
   283da:	d03c      	beq.n	28456 <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   283dc:	4632      	mov	r2, r6
   283de:	4621      	mov	r1, r4
   283e0:	a801      	add	r0, sp, #4
   283e2:	f7ff fe69 	bl	280b8 <at_parse_process_element>
   283e6:	1c43      	adds	r3, r0, #1
   283e8:	d035      	beq.n	28456 <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   283ea:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   283ec:	781a      	ldrb	r2, [r3, #0]
   283ee:	3a2c      	subs	r2, #44	; 0x2c
   283f0:	b2d2      	uxtb	r2, r2
   283f2:	2a11      	cmp	r2, #17
   283f4:	d81a      	bhi.n	2842c <at_parser_max_params_from_str+0xb0>
   283f6:	fa2a f202 	lsr.w	r2, sl, r2
   283fa:	07d1      	lsls	r1, r2, #31
   283fc:	d516      	bpl.n	2842c <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   283fe:	7858      	ldrb	r0, [r3, #1]
   28400:	f015 ff79 	bl	3e2f6 <is_lfcr>
   28404:	b178      	cbz	r0, 28426 <at_parser_max_params_from_str+0xaa>
				index++;
   28406:	3401      	adds	r4, #1
				if (index == max_params) {
   28408:	42bc      	cmp	r4, r7
   2840a:	d039      	beq.n	28480 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   2840c:	4621      	mov	r1, r4
   2840e:	a801      	add	r0, sp, #4
   28410:	f7ff ff54 	bl	282bc <at_parse_detect_type>
   28414:	1c42      	adds	r2, r0, #1
   28416:	d01e      	beq.n	28456 <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   28418:	4632      	mov	r2, r6
   2841a:	4621      	mov	r1, r4
   2841c:	a801      	add	r0, sp, #4
   2841e:	f7ff fe4b 	bl	280b8 <at_parse_process_element>
   28422:	1c43      	adds	r3, r0, #1
   28424:	d017      	beq.n	28456 <at_parser_max_params_from_str+0xda>
			str++;
   28426:	9b01      	ldr	r3, [sp, #4]
   28428:	3301      	adds	r3, #1
   2842a:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   2842c:	9a01      	ldr	r2, [sp, #4]
   2842e:	7810      	ldrb	r0, [r2, #0]
   28430:	f015 ff61 	bl	3e2f6 <is_lfcr>
   28434:	b1f8      	cbz	r0, 28476 <at_parser_max_params_from_str+0xfa>
   28436:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   28438:	7811      	ldrb	r1, [r2, #0]
   2843a:	4693      	mov	fp, r2
   2843c:	4608      	mov	r0, r1
   2843e:	3201      	adds	r2, #1
   28440:	f015 ff59 	bl	3e2f6 <is_lfcr>
   28444:	2800      	cmp	r0, #0
   28446:	d1f7      	bne.n	28438 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   28448:	b119      	cbz	r1, 28452 <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2844a:	292b      	cmp	r1, #43	; 0x2b
   2844c:	d001      	beq.n	28452 <at_parser_max_params_from_str+0xd6>
   2844e:	2925      	cmp	r1, #37	; 0x25
   28450:	d111      	bne.n	28476 <at_parser_max_params_from_str+0xfa>
				str += i;
   28452:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   28456:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   28458:	b9a5      	cbnz	r5, 28484 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2845a:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   2845c:	2a00      	cmp	r2, #0
   2845e:	bf0c      	ite	eq
   28460:	2000      	moveq	r0, #0
   28462:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   28466:	f1b8 0f00 	cmp.w	r8, #0
   2846a:	d001      	beq.n	28470 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   2846c:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   28470:	b003      	add	sp, #12
   28472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   28476:	3401      	adds	r4, #1
			oversized = true;
   28478:	42bc      	cmp	r4, r7
   2847a:	bf08      	it	eq
   2847c:	2501      	moveq	r5, #1
   2847e:	e79a      	b.n	283b6 <at_parser_max_params_from_str+0x3a>
					oversized = true;
   28480:	4605      	mov	r5, r0
   28482:	e7e8      	b.n	28456 <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   28484:	f06f 0006 	mvn.w	r0, #6
   28488:	e7ed      	b.n	28466 <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   2848a:	f06f 0015 	mvn.w	r0, #21
   2848e:	e7ef      	b.n	28470 <at_parser_max_params_from_str+0xf4>
   28490:	2002af58 	.word	0x2002af58
   28494:	00046c56 	.word	0x00046c56
   28498:	00024001 	.word	0x00024001

0002849c <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   2849c:	b538      	push	{r3, r4, r5, lr}
   2849e:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   284a0:	4605      	mov	r5, r0
   284a2:	b960      	cbnz	r0, 284be <at_params_get+0x22>
   284a4:	490a      	ldr	r1, [pc, #40]	; (284d0 <at_params_get+0x34>)
   284a6:	232b      	movs	r3, #43	; 0x2b
   284a8:	4a0a      	ldr	r2, [pc, #40]	; (284d4 <at_params_get+0x38>)
   284aa:	480b      	ldr	r0, [pc, #44]	; (284d8 <at_params_get+0x3c>)
   284ac:	f014 f892 	bl	3c5d4 <printk>
   284b0:	480a      	ldr	r0, [pc, #40]	; (284dc <at_params_get+0x40>)
   284b2:	f014 f88f 	bl	3c5d4 <printk>
   284b6:	212b      	movs	r1, #43	; 0x2b
   284b8:	4806      	ldr	r0, [pc, #24]	; (284d4 <at_params_get+0x38>)
   284ba:	f014 f8d1 	bl	3c660 <assert_post_action>

	if (index >= list->param_count) {
   284be:	682b      	ldr	r3, [r5, #0]
   284c0:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   284c2:	bf85      	ittet	hi
   284c4:	230c      	movhi	r3, #12
   284c6:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   284c8:	2000      	movls	r0, #0
	return &param[index];
   284ca:	fb03 0004 	mlahi	r0, r3, r4, r0
}
   284ce:	bd38      	pop	{r3, r4, r5, pc}
   284d0:	00043aef 	.word	0x00043aef
   284d4:	00043ab9 	.word	0x00043ab9
   284d8:	00041757 	.word	0x00041757
   284dc:	00043b03 	.word	0x00043b03

000284e0 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   284e0:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   284e2:	4604      	mov	r4, r0
   284e4:	b960      	cbnz	r0, 28500 <at_param_size+0x20>
   284e6:	490e      	ldr	r1, [pc, #56]	; (28520 <at_param_size+0x40>)
   284e8:	2339      	movs	r3, #57	; 0x39
   284ea:	4a0e      	ldr	r2, [pc, #56]	; (28524 <at_param_size+0x44>)
   284ec:	480e      	ldr	r0, [pc, #56]	; (28528 <at_param_size+0x48>)
   284ee:	f014 f871 	bl	3c5d4 <printk>
   284f2:	480e      	ldr	r0, [pc, #56]	; (2852c <at_param_size+0x4c>)
   284f4:	f014 f86e 	bl	3c5d4 <printk>
   284f8:	2139      	movs	r1, #57	; 0x39
   284fa:	480a      	ldr	r0, [pc, #40]	; (28524 <at_param_size+0x44>)
   284fc:	f014 f8b0 	bl	3c660 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   28500:	7823      	ldrb	r3, [r4, #0]
   28502:	2b01      	cmp	r3, #1
   28504:	d006      	beq.n	28514 <at_param_size+0x34>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   28506:	2b02      	cmp	r3, #2
   28508:	d006      	beq.n	28518 <at_param_size+0x38>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   2850a:	3b03      	subs	r3, #3
   2850c:	2b01      	cmp	r3, #1
   2850e:	d805      	bhi.n	2851c <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   28510:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   28512:	bd10      	pop	{r4, pc}
		return sizeof(u16_t);
   28514:	2002      	movs	r0, #2
   28516:	e7fc      	b.n	28512 <at_param_size+0x32>
		return sizeof(u32_t);
   28518:	2004      	movs	r0, #4
   2851a:	e7fa      	b.n	28512 <at_param_size+0x32>
	return 0;
   2851c:	2000      	movs	r0, #0
   2851e:	e7f8      	b.n	28512 <at_param_size+0x32>
   28520:	00043a88 	.word	0x00043a88
   28524:	00043ab9 	.word	0x00043ab9
   28528:	00041757 	.word	0x00041757
   2852c:	00043a9d 	.word	0x00043a9d

00028530 <at_param_clear>:
{
   28530:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   28532:	4604      	mov	r4, r0
   28534:	b960      	cbnz	r0, 28550 <at_param_clear+0x20>
   28536:	490b      	ldr	r1, [pc, #44]	; (28564 <at_param_clear+0x34>)
   28538:	231d      	movs	r3, #29
   2853a:	4a0b      	ldr	r2, [pc, #44]	; (28568 <at_param_clear+0x38>)
   2853c:	480b      	ldr	r0, [pc, #44]	; (2856c <at_param_clear+0x3c>)
   2853e:	f014 f849 	bl	3c5d4 <printk>
   28542:	480b      	ldr	r0, [pc, #44]	; (28570 <at_param_clear+0x40>)
   28544:	f014 f846 	bl	3c5d4 <printk>
   28548:	211d      	movs	r1, #29
   2854a:	4807      	ldr	r0, [pc, #28]	; (28568 <at_param_clear+0x38>)
   2854c:	f014 f888 	bl	3c660 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   28550:	7823      	ldrb	r3, [r4, #0]
   28552:	3b03      	subs	r3, #3
   28554:	2b01      	cmp	r3, #1
   28556:	d802      	bhi.n	2855e <at_param_clear+0x2e>
		k_free(param->value.str_val);
   28558:	68a0      	ldr	r0, [r4, #8]
   2855a:	f016 fa15 	bl	3e988 <k_free>
	param->value.int_val = 0;
   2855e:	2300      	movs	r3, #0
   28560:	60a3      	str	r3, [r4, #8]
}
   28562:	bd10      	pop	{r4, pc}
   28564:	00043a88 	.word	0x00043a88
   28568:	00043ab9 	.word	0x00043ab9
   2856c:	00041757 	.word	0x00041757
   28570:	00043a9d 	.word	0x00043a9d

00028574 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   28574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   28578:	4605      	mov	r5, r0
   2857a:	b158      	cbz	r0, 28594 <at_params_list_clear+0x20>
   2857c:	6843      	ldr	r3, [r0, #4]
   2857e:	b14b      	cbz	r3, 28594 <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   28580:	2400      	movs	r4, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   28582:	f8df 8054 	ldr.w	r8, [pc, #84]	; 285d8 <at_params_list_clear+0x64>
   28586:	f8df a054 	ldr.w	sl, [pc, #84]	; 285dc <at_params_list_clear+0x68>
   2858a:	f8df b054 	ldr.w	fp, [pc, #84]	; 285e0 <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   2858e:	682b      	ldr	r3, [r5, #0]
   28590:	429c      	cmp	r4, r3
   28592:	d301      	bcc.n	28598 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   28594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   28598:	270c      	movs	r7, #12
   2859a:	4367      	muls	r7, r4
   2859c:	f8d5 9004 	ldr.w	r9, [r5, #4]
   285a0:	eb09 0607 	add.w	r6, r9, r7
   285a4:	4630      	mov	r0, r6
   285a6:	f7ff ffc3 	bl	28530 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   285aa:	b966      	cbnz	r6, 285c6 <at_params_list_clear+0x52>
   285ac:	4651      	mov	r1, sl
   285ae:	2314      	movs	r3, #20
   285b0:	4642      	mov	r2, r8
   285b2:	4658      	mov	r0, fp
   285b4:	f014 f80e 	bl	3c5d4 <printk>
   285b8:	4806      	ldr	r0, [pc, #24]	; (285d4 <at_params_list_clear+0x60>)
   285ba:	f014 f80b 	bl	3c5d4 <printk>
   285be:	2114      	movs	r1, #20
   285c0:	4640      	mov	r0, r8
   285c2:	f014 f84d 	bl	3c660 <assert_post_action>
   285c6:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   285c8:	3401      	adds	r4, #1
   285ca:	f849 3007 	str.w	r3, [r9, r7]
   285ce:	6073      	str	r3, [r6, #4]
   285d0:	60b3      	str	r3, [r6, #8]
   285d2:	e7dc      	b.n	2858e <at_params_list_clear+0x1a>
   285d4:	00043a9d 	.word	0x00043a9d
   285d8:	00043ab9 	.word	0x00043ab9
   285dc:	00043a88 	.word	0x00043a88
   285e0:	00041757 	.word	0x00041757

000285e4 <w_lte_lc_init>:
		k_sem_give(&link);
	}
}

static int w_lte_lc_init(void)
{
   285e4:	b508      	push	{r3, lr}
	if (at_cmd_write(nw_mode_preferred, NULL, 0, NULL) != 0) {
   285e6:	2300      	movs	r3, #0
   285e8:	4807      	ldr	r0, [pc, #28]	; (28608 <w_lte_lc_init+0x24>)
   285ea:	461a      	mov	r2, r3
   285ec:	4619      	mov	r1, r3
   285ee:	f7ff fa2d 	bl	27a4c <at_cmd_write>
   285f2:	4603      	mov	r3, r0
   285f4:	b928      	cbnz	r0, 28602 <w_lte_lc_init+0x1e>
#if defined(CONFIG_BSD_LIBRARY_TRACE_ENABLED)
	if (at_cmd_write(mdm_trace, NULL, 0, NULL) != 0) {
		return -EIO;
	}
#endif
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   285f6:	4602      	mov	r2, r0
   285f8:	4601      	mov	r1, r0
   285fa:	4804      	ldr	r0, [pc, #16]	; (2860c <w_lte_lc_init+0x28>)
   285fc:	f7ff fa26 	bl	27a4c <at_cmd_write>
   28600:	b108      	cbz	r0, 28606 <w_lte_lc_init+0x22>
		return -EIO;
   28602:	f06f 0004 	mvn.w	r0, #4
	}
	LOG_INF("PDN Auth: %s", log_strdup(cgauth));
#endif

	return 0;
}
   28606:	bd08      	pop	{r3, pc}
   28608:	00043bbf 	.word	0x00043bbf
   2860c:	00043b93 	.word	0x00043b93

00028610 <parse_nw_reg_status>:
static int parse_nw_reg_status(const char *at_response,
			       enum lte_lc_nw_reg_status *status,
			       size_t reg_status_index)
{
	int err, reg_status;
	struct at_param_list resp_list = {0};
   28610:	2300      	movs	r3, #0
{
   28612:	b5f0      	push	{r4, r5, r6, r7, lr}
   28614:	b087      	sub	sp, #28
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   28616:	9302      	str	r3, [sp, #8]
	struct at_param_list resp_list = {0};
   28618:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2861c:	f8cd 300b 	str.w	r3, [sp, #11]
	size_t response_prefix_len = sizeof(response_prefix);
   28620:	2307      	movs	r3, #7
{
   28622:	460d      	mov	r5, r1
   28624:	4617      	mov	r7, r2
	size_t response_prefix_len = sizeof(response_prefix);
   28626:	9301      	str	r3, [sp, #4]

	if ((at_response == NULL) || (status == NULL)) {
   28628:	4606      	mov	r6, r0
   2862a:	2800      	cmp	r0, #0
   2862c:	f000 808c 	beq.w	28748 <parse_nw_reg_status+0x138>
   28630:	2900      	cmp	r1, #0
   28632:	f000 8089 	beq.w	28748 <parse_nw_reg_status+0x138>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   28636:	210a      	movs	r1, #10
   28638:	a804      	add	r0, sp, #16
   2863a:	f015 fe73 	bl	3e324 <at_params_list_init>
	if (err) {
   2863e:	4604      	mov	r4, r0
   28640:	b188      	cbz	r0, 28666 <parse_nw_reg_status+0x56>
		LOG_ERR("Could not init AT params list, error: %d", err);
   28642:	2301      	movs	r3, #1
   28644:	f04f 0000 	mov.w	r0, #0
   28648:	4a41      	ldr	r2, [pc, #260]	; (28750 <parse_nw_reg_status+0x140>)
   2864a:	f363 0007 	bfi	r0, r3, #0, #8
   2864e:	4b41      	ldr	r3, [pc, #260]	; (28754 <parse_nw_reg_status+0x144>)
   28650:	4941      	ldr	r1, [pc, #260]	; (28758 <parse_nw_reg_status+0x148>)
   28652:	1a9b      	subs	r3, r3, r2
   28654:	08db      	lsrs	r3, r3, #3
   28656:	f363 108f 	bfi	r0, r3, #6, #10
   2865a:	4622      	mov	r2, r4
   2865c:	f014 f811 	bl	3c682 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   28660:	4620      	mov	r0, r4
   28662:	b007      	add	sp, #28
   28664:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_max_params_from_str(at_response,
   28666:	4601      	mov	r1, r0
   28668:	230a      	movs	r3, #10
   2866a:	aa04      	add	r2, sp, #16
   2866c:	4630      	mov	r0, r6
   2866e:	f7ff fe85 	bl	2837c <at_parser_max_params_from_str>
	if (err) {
   28672:	4604      	mov	r4, r0
   28674:	b190      	cbz	r0, 2869c <parse_nw_reg_status+0x8c>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   28676:	2301      	movs	r3, #1
   28678:	f04f 0000 	mov.w	r0, #0
   2867c:	4a34      	ldr	r2, [pc, #208]	; (28750 <parse_nw_reg_status+0x140>)
   2867e:	f363 0007 	bfi	r0, r3, #0, #8
   28682:	4b34      	ldr	r3, [pc, #208]	; (28754 <parse_nw_reg_status+0x144>)
   28684:	4935      	ldr	r1, [pc, #212]	; (2875c <parse_nw_reg_status+0x14c>)
   28686:	1a9b      	subs	r3, r3, r2
   28688:	4622      	mov	r2, r4
   2868a:	08db      	lsrs	r3, r3, #3
   2868c:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get response prefix, error: %d", err);
   28690:	f013 fff7 	bl	3c682 <log_string_sync>
	at_params_list_free(&resp_list);
   28694:	a804      	add	r0, sp, #16
   28696:	f015 fe58 	bl	3e34a <at_params_list_free>
	return err;
   2869a:	e7e1      	b.n	28660 <parse_nw_reg_status+0x50>
	err = at_params_string_get(&resp_list,
   2869c:	4601      	mov	r1, r0
   2869e:	ab01      	add	r3, sp, #4
   286a0:	aa02      	add	r2, sp, #8
   286a2:	a804      	add	r0, sp, #16
   286a4:	f015 ff16 	bl	3e4d4 <at_params_string_get>
	if (err) {
   286a8:	4604      	mov	r4, r0
   286aa:	b168      	cbz	r0, 286c8 <parse_nw_reg_status+0xb8>
		LOG_ERR("Could not get response prefix, error: %d", err);
   286ac:	2301      	movs	r3, #1
   286ae:	f04f 0000 	mov.w	r0, #0
   286b2:	4a27      	ldr	r2, [pc, #156]	; (28750 <parse_nw_reg_status+0x140>)
   286b4:	f363 0007 	bfi	r0, r3, #0, #8
   286b8:	4b26      	ldr	r3, [pc, #152]	; (28754 <parse_nw_reg_status+0x144>)
   286ba:	4929      	ldr	r1, [pc, #164]	; (28760 <parse_nw_reg_status+0x150>)
   286bc:	1a9b      	subs	r3, r3, r2
   286be:	08db      	lsrs	r3, r3, #3
   286c0:	f363 108f 	bfi	r0, r3, #6, #10
   286c4:	4622      	mov	r2, r4
   286c6:	e7e3      	b.n	28690 <parse_nw_reg_status+0x80>
	if (!response_is_valid(response_prefix, response_prefix_len,
   286c8:	4a26      	ldr	r2, [pc, #152]	; (28764 <parse_nw_reg_status+0x154>)
   286ca:	9901      	ldr	r1, [sp, #4]
   286cc:	a802      	add	r0, sp, #8
   286ce:	f015 ff3f 	bl	3e550 <response_is_valid>
   286d2:	2800      	cmp	r0, #0
   286d4:	d0de      	beq.n	28694 <parse_nw_reg_status+0x84>
	err = at_params_int_get(&resp_list, reg_status_index,
   286d6:	4639      	mov	r1, r7
   286d8:	466a      	mov	r2, sp
   286da:	a804      	add	r0, sp, #16
   286dc:	f015 fee3 	bl	3e4a6 <at_params_int_get>
	if (err) {
   286e0:	491c      	ldr	r1, [pc, #112]	; (28754 <parse_nw_reg_status+0x144>)
   286e2:	4b1b      	ldr	r3, [pc, #108]	; (28750 <parse_nw_reg_status+0x140>)
   286e4:	4604      	mov	r4, r0
   286e6:	1ac9      	subs	r1, r1, r3
   286e8:	f3c1 01c9 	ubfx	r1, r1, #3, #10
   286ec:	b148      	cbz	r0, 28702 <parse_nw_reg_status+0xf2>
		LOG_ERR("Could not get registration status, error: %d", err);
   286ee:	f04f 0000 	mov.w	r0, #0
   286f2:	2301      	movs	r3, #1
   286f4:	f363 0007 	bfi	r0, r3, #0, #8
   286f8:	f361 108f 	bfi	r0, r1, #6, #10
   286fc:	4622      	mov	r2, r4
   286fe:	491a      	ldr	r1, [pc, #104]	; (28768 <parse_nw_reg_status+0x158>)
   28700:	e7c6      	b.n	28690 <parse_nw_reg_status+0x80>
	switch (reg_status) {
   28702:	9b00      	ldr	r3, [sp, #0]
   28704:	2b08      	cmp	r3, #8
   28706:	d002      	beq.n	2870e <parse_nw_reg_status+0xfe>
   28708:	dc0e      	bgt.n	28728 <parse_nw_reg_status+0x118>
   2870a:	2b05      	cmp	r3, #5
   2870c:	d80e      	bhi.n	2872c <parse_nw_reg_status+0x11c>
		LOG_DBG("Network registration status: %d", reg_status);
   2870e:	2204      	movs	r2, #4
   28710:	f04f 0000 	mov.w	r0, #0
   28714:	f362 0007 	bfi	r0, r2, #0, #8
   28718:	f361 108f 	bfi	r0, r1, #6, #10
		*status = reg_status;
   2871c:	702b      	strb	r3, [r5, #0]
		LOG_DBG("Network registration status: %d", reg_status);
   2871e:	4a13      	ldr	r2, [pc, #76]	; (2876c <parse_nw_reg_status+0x15c>)
   28720:	4913      	ldr	r1, [pc, #76]	; (28770 <parse_nw_reg_status+0x160>)
   28722:	f013 ffae 	bl	3c682 <log_string_sync>
   28726:	e7b5      	b.n	28694 <parse_nw_reg_status+0x84>
	switch (reg_status) {
   28728:	2b5a      	cmp	r3, #90	; 0x5a
   2872a:	d0f0      	beq.n	2870e <parse_nw_reg_status+0xfe>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   2872c:	2201      	movs	r2, #1
   2872e:	f04f 0000 	mov.w	r0, #0
   28732:	f362 0007 	bfi	r0, r2, #0, #8
   28736:	f361 108f 	bfi	r0, r1, #6, #10
   2873a:	461a      	mov	r2, r3
   2873c:	490d      	ldr	r1, [pc, #52]	; (28774 <parse_nw_reg_status+0x164>)
   2873e:	f013 ffa0 	bl	3c682 <log_string_sync>
		err = -EIO;
   28742:	f06f 0404 	mvn.w	r4, #4
   28746:	e7a5      	b.n	28694 <parse_nw_reg_status+0x84>
		return -EINVAL;
   28748:	f06f 0415 	mvn.w	r4, #21
   2874c:	e788      	b.n	28660 <parse_nw_reg_status+0x50>
   2874e:	bf00      	nop
   28750:	000402cc 	.word	0x000402cc
   28754:	00040364 	.word	0x00040364
   28758:	00043be0 	.word	0x00043be0
   2875c:	00043c09 	.word	0x00043c09
   28760:	00043c36 	.word	0x00043c36
   28764:	00043c5f 	.word	0x00043c5f
   28768:	00043c66 	.word	0x00043c66
   2876c:	00043b35 	.word	0x00043b35
   28770:	00043c93 	.word	0x00043c93
   28774:	00043cb7 	.word	0x00043cb7

00028778 <at_handler>:
{
   28778:	b507      	push	{r0, r1, r2, lr}
	if (response == NULL) {
   2877a:	4608      	mov	r0, r1
   2877c:	b971      	cbnz	r1, 2879c <at_handler+0x24>
		LOG_ERR("Response buffer is NULL-pointer");
   2877e:	2301      	movs	r3, #1
   28780:	4a15      	ldr	r2, [pc, #84]	; (287d8 <at_handler+0x60>)
   28782:	f363 0007 	bfi	r0, r3, #0, #8
   28786:	4b15      	ldr	r3, [pc, #84]	; (287dc <at_handler+0x64>)
   28788:	4915      	ldr	r1, [pc, #84]	; (287e0 <at_handler+0x68>)
   2878a:	1a9b      	subs	r3, r3, r2
   2878c:	08db      	lsrs	r3, r3, #3
   2878e:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get network registration status");
   28792:	f013 ff76 	bl	3c682 <log_string_sync>
}
   28796:	b003      	add	sp, #12
   28798:	f85d fb04 	ldr.w	pc, [sp], #4
	err = parse_nw_reg_status(response, &status, AT_CEREG_REG_STATUS_INDEX);
   2879c:	2201      	movs	r2, #1
   2879e:	f10d 0107 	add.w	r1, sp, #7
   287a2:	f7ff ff35 	bl	28610 <parse_nw_reg_status>
	if (err) {
   287a6:	b160      	cbz	r0, 287c2 <at_handler+0x4a>
		LOG_ERR("Could not get network registration status");
   287a8:	2301      	movs	r3, #1
   287aa:	f04f 0000 	mov.w	r0, #0
   287ae:	4a0a      	ldr	r2, [pc, #40]	; (287d8 <at_handler+0x60>)
   287b0:	f363 0007 	bfi	r0, r3, #0, #8
   287b4:	4b09      	ldr	r3, [pc, #36]	; (287dc <at_handler+0x64>)
   287b6:	490b      	ldr	r1, [pc, #44]	; (287e4 <at_handler+0x6c>)
   287b8:	1a9b      	subs	r3, r3, r2
   287ba:	08db      	lsrs	r3, r3, #3
   287bc:	f363 108f 	bfi	r0, r3, #6, #10
   287c0:	e7e7      	b.n	28792 <at_handler+0x1a>
	if ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   287c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   287c6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   287ca:	2b01      	cmp	r3, #1
   287cc:	d1e3      	bne.n	28796 <at_handler+0x1e>
	z_impl_k_sem_give(sem);
   287ce:	4806      	ldr	r0, [pc, #24]	; (287e8 <at_handler+0x70>)
   287d0:	f010 f894 	bl	388fc <z_impl_k_sem_give>
   287d4:	e7df      	b.n	28796 <at_handler+0x1e>
   287d6:	bf00      	nop
   287d8:	000402cc 	.word	0x000402cc
   287dc:	00040364 	.word	0x00040364
   287e0:	00043b49 	.word	0x00043b49
   287e4:	00043b69 	.word	0x00043b69
   287e8:	20023d64 	.word	0x20023d64

000287ec <w_lte_lc_connect>:
{
   287ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   287f0:	2201      	movs	r2, #1
   287f2:	2100      	movs	r1, #0
   287f4:	4841      	ldr	r0, [pc, #260]	; (288fc <w_lte_lc_connect+0x110>)
   287f6:	f016 f946 	bl	3ea86 <z_impl_k_sem_init>
	rc = at_notif_register_handler(NULL, at_handler);
   287fa:	4941      	ldr	r1, [pc, #260]	; (28900 <w_lte_lc_connect+0x114>)
   287fc:	2000      	movs	r0, #0
   287fe:	f7ff f9d7 	bl	27bb0 <at_notif_register_handler>
	if (rc != 0) {
   28802:	4c40      	ldr	r4, [pc, #256]	; (28904 <w_lte_lc_connect+0x118>)
   28804:	4b40      	ldr	r3, [pc, #256]	; (28908 <w_lte_lc_connect+0x11c>)
   28806:	4682      	mov	sl, r0
   28808:	1ae4      	subs	r4, r4, r3
   2880a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2880e:	b168      	cbz	r0, 2882c <w_lte_lc_connect+0x40>
		LOG_ERR("Can't register handler rc=%d", rc);
   28810:	2201      	movs	r2, #1
   28812:	f04f 0000 	mov.w	r0, #0
   28816:	f362 0007 	bfi	r0, r2, #0, #8
   2881a:	4652      	mov	r2, sl
   2881c:	493b      	ldr	r1, [pc, #236]	; (2890c <w_lte_lc_connect+0x120>)
   2881e:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Can't de-register handler rc=%d", rc);
   28822:	f013 ff2e 	bl	3c682 <log_string_sync>
}
   28826:	4650      	mov	r0, sl
   28828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2882c:	f04f 0902 	mov.w	r9, #2
	const char *current_network_mode = nw_mode_preferred;
   28830:	4d37      	ldr	r5, [pc, #220]	; (28910 <w_lte_lc_connect+0x124>)
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   28832:	f8df b100 	ldr.w	fp, [pc, #256]	; 28934 <w_lte_lc_connect+0x148>
		LOG_DBG("Network mode: %s", log_strdup(current_network_mode));
   28836:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2883a:	f043 0304 	orr.w	r3, r3, #4
   2883e:	4628      	mov	r0, r5
   28840:	f363 0707 	bfi	r7, r3, #0, #8
   28844:	f013 ff2f 	bl	3c6a6 <log_strdup>
   28848:	f364 178f 	bfi	r7, r4, #6, #10
   2884c:	4603      	mov	r3, r0
   2884e:	4a31      	ldr	r2, [pc, #196]	; (28914 <w_lte_lc_connect+0x128>)
   28850:	4931      	ldr	r1, [pc, #196]	; (28918 <w_lte_lc_connect+0x12c>)
   28852:	4638      	mov	r0, r7
   28854:	f013 ff15 	bl	3c682 <log_string_sync>
		if (at_cmd_write(current_network_mode, NULL, 0, NULL) != 0) {
   28858:	2300      	movs	r3, #0
   2885a:	4628      	mov	r0, r5
   2885c:	461a      	mov	r2, r3
   2885e:	4619      	mov	r1, r3
   28860:	f7ff f8f4 	bl	27a4c <at_cmd_write>
   28864:	4603      	mov	r3, r0
   28866:	bba0      	cbnz	r0, 288d2 <w_lte_lc_connect+0xe6>
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   28868:	4602      	mov	r2, r0
   2886a:	4601      	mov	r1, r0
   2886c:	4658      	mov	r0, fp
   2886e:	f7ff f8ed 	bl	27a4c <at_cmd_write>
   28872:	4605      	mov	r5, r0
   28874:	bb68      	cbnz	r0, 288d2 <w_lte_lc_connect+0xe6>
	return z_impl_k_sem_take(sem, timeout);
   28876:	4929      	ldr	r1, [pc, #164]	; (2891c <w_lte_lc_connect+0x130>)
   28878:	4820      	ldr	r0, [pc, #128]	; (288fc <w_lte_lc_connect+0x110>)
   2887a:	f010 f889 	bl	38990 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   2887e:	f110 0f0b 	cmn.w	r0, #11
   28882:	4682      	mov	sl, r0
   28884:	d127      	bne.n	288d6 <w_lte_lc_connect+0xea>
			LOG_INF("Network connection attempt timed out");
   28886:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2888a:	f043 0303 	orr.w	r3, r3, #3
   2888e:	f363 0807 	bfi	r8, r3, #0, #8
   28892:	f364 188f 	bfi	r8, r4, #6, #10
   28896:	4922      	ldr	r1, [pc, #136]	; (28920 <w_lte_lc_connect+0x134>)
   28898:	4640      	mov	r0, r8
   2889a:	f013 fef2 	bl	3c682 <log_string_sync>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   2889e:	f1b9 0f01 	cmp.w	r9, #1
   288a2:	d028      	beq.n	288f6 <w_lte_lc_connect+0x10a>
				if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   288a4:	462b      	mov	r3, r5
   288a6:	462a      	mov	r2, r5
   288a8:	4629      	mov	r1, r5
   288aa:	481e      	ldr	r0, [pc, #120]	; (28924 <w_lte_lc_connect+0x138>)
   288ac:	f7ff f8ce 	bl	27a4c <at_cmd_write>
   288b0:	b978      	cbnz	r0, 288d2 <w_lte_lc_connect+0xe6>
				LOG_INF("Using fallback network mode");
   288b2:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   288b6:	f043 0303 	orr.w	r3, r3, #3
   288ba:	f363 0607 	bfi	r6, r3, #0, #8
   288be:	f364 168f 	bfi	r6, r4, #6, #10
   288c2:	4919      	ldr	r1, [pc, #100]	; (28928 <w_lte_lc_connect+0x13c>)
   288c4:	4630      	mov	r0, r6
   288c6:	f013 fedc 	bl	3c682 <log_string_sync>
				current_network_mode = nw_mode_fallback;
   288ca:	4d18      	ldr	r5, [pc, #96]	; (2892c <w_lte_lc_connect+0x140>)
   288cc:	f04f 0901 	mov.w	r9, #1
   288d0:	e7b1      	b.n	28836 <w_lte_lc_connect+0x4a>
			err = -EIO;
   288d2:	f06f 0a04 	mvn.w	sl, #4
	rc = at_notif_deregister_handler(NULL, at_handler);
   288d6:	490a      	ldr	r1, [pc, #40]	; (28900 <w_lte_lc_connect+0x114>)
   288d8:	2000      	movs	r0, #0
   288da:	f7ff f9b5 	bl	27c48 <at_notif_deregister_handler>
	if (rc != 0) {
   288de:	4602      	mov	r2, r0
   288e0:	2800      	cmp	r0, #0
   288e2:	d0a0      	beq.n	28826 <w_lte_lc_connect+0x3a>
		LOG_ERR("Can't de-register handler rc=%d", rc);
   288e4:	2101      	movs	r1, #1
   288e6:	f04f 0000 	mov.w	r0, #0
   288ea:	f361 0007 	bfi	r0, r1, #0, #8
   288ee:	f364 108f 	bfi	r0, r4, #6, #10
   288f2:	490f      	ldr	r1, [pc, #60]	; (28930 <w_lte_lc_connect+0x144>)
   288f4:	e795      	b.n	28822 <w_lte_lc_connect+0x36>
				err = -ETIMEDOUT;
   288f6:	f06f 0a73 	mvn.w	sl, #115	; 0x73
   288fa:	e7ec      	b.n	288d6 <w_lte_lc_connect+0xea>
   288fc:	20023d64 	.word	0x20023d64
   28900:	00028779 	.word	0x00028779
   28904:	00040364 	.word	0x00040364
   28908:	000402cc 	.word	0x000402cc
   2890c:	00043d1d 	.word	0x00043d1d
   28910:	00043bbf 	.word	0x00043bbf
   28914:	00043b24 	.word	0x00043b24
   28918:	00043d3a 	.word	0x00043d3a
   2891c:	000927c0 	.word	0x000927c0
   28920:	00043d4f 	.word	0x00043d4f
   28924:	00043bd6 	.word	0x00043bd6
   28928:	00043d74 	.word	0x00043d74
   2892c:	00043ba8 	.word	0x00043ba8
   28930:	00043d90 	.word	0x00043d90
   28934:	00043b9e 	.word	0x00043b9e

00028938 <lte_lc_power_off>:
{
   28938:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   2893a:	2300      	movs	r3, #0
   2893c:	4804      	ldr	r0, [pc, #16]	; (28950 <lte_lc_power_off+0x18>)
   2893e:	461a      	mov	r2, r3
   28940:	4619      	mov	r1, r3
   28942:	f7ff f883 	bl	27a4c <at_cmd_write>
   28946:	2800      	cmp	r0, #0
}
   28948:	bf18      	it	ne
   2894a:	f06f 0004 	mvnne.w	r0, #4
   2894e:	bd08      	pop	{r3, pc}
   28950:	00043cdf 	.word	0x00043cdf

00028954 <lte_lc_psm_req>:
{
   28954:	b538      	push	{r3, r4, r5, lr}
	if (at_cmd_write(enable ? psm_req : psm_disable,
   28956:	2300      	movs	r3, #0
   28958:	4d07      	ldr	r5, [pc, #28]	; (28978 <lte_lc_psm_req+0x24>)
   2895a:	4c08      	ldr	r4, [pc, #32]	; (2897c <lte_lc_psm_req+0x28>)
   2895c:	461a      	mov	r2, r3
   2895e:	4298      	cmp	r0, r3
   28960:	bf14      	ite	ne
   28962:	4628      	movne	r0, r5
   28964:	4620      	moveq	r0, r4
   28966:	4619      	mov	r1, r3
   28968:	f7ff f870 	bl	27a4c <at_cmd_write>
   2896c:	2800      	cmp	r0, #0
}
   2896e:	bf18      	it	ne
   28970:	f06f 0004 	mvnne.w	r0, #4
   28974:	bd38      	pop	{r3, r4, r5, pc}
   28976:	bf00      	nop
   28978:	00043cf3 	.word	0x00043cf3
   2897c:	00043ce9 	.word	0x00043ce9

00028980 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   28980:	b538      	push	{r3, r4, r5, lr}
   28982:	4605      	mov	r5, r0
			    const char *buf)
{
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   28984:	4a08      	ldr	r2, [pc, #32]	; (289a8 <modem_info_parse.isra.0+0x28>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   28986:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   28988:	782b      	ldrb	r3, [r5, #0]
   2898a:	2100      	movs	r1, #0
   2898c:	f7ff fcf6 	bl	2837c <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err != 0) {
   28990:	4604      	mov	r4, r0
   28992:	b938      	cbnz	r0, 289a4 <modem_info_parse.isra.0+0x24>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   28994:	4804      	ldr	r0, [pc, #16]	; (289a8 <modem_info_parse.isra.0+0x28>)
   28996:	f015 fdc4 	bl	3e522 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   2899a:	782b      	ldrb	r3, [r5, #0]
		return -EAGAIN;
   2899c:	4298      	cmp	r0, r3
   2899e:	bf88      	it	hi
   289a0:	f06f 040a 	mvnhi.w	r4, #10
	}

	return err;
}
   289a4:	4620      	mov	r0, r4
   289a6:	bd38      	pop	{r3, r4, r5, pc}
   289a8:	20023d7c 	.word	0x20023d7c

000289ac <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, const char *response)
{
   289ac:	b513      	push	{r0, r1, r4, lr}
   289ae:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	u16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   289b0:	4608      	mov	r0, r1
   289b2:	f7f4 fbb7 	bl	1d124 <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   289b6:	491b      	ldr	r1, [pc, #108]	; (28a24 <modem_info_rsrp_subscribe_handler+0x78>)
   289b8:	4620      	mov	r0, r4
   289ba:	f016 fbb0 	bl	3f11e <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   289be:	b198      	cbz	r0, 289e8 <modem_info_rsrp_subscribe_handler+0x3c>
		return;
	}

	err = modem_info_parse(modem_data[MODEM_INFO_RSRP],
   289c0:	4621      	mov	r1, r4
   289c2:	4819      	ldr	r0, [pc, #100]	; (28a28 <modem_info_rsrp_subscribe_handler+0x7c>)
   289c4:	f7ff ffdc 	bl	28980 <modem_info_parse.isra.0>
			       response);
	if (err != 0) {
   289c8:	4602      	mov	r2, r0
   289ca:	b178      	cbz	r0, 289ec <modem_info_rsrp_subscribe_handler+0x40>
		LOG_ERR("modem_info_parse failed to parse "
   289cc:	2301      	movs	r3, #1
   289ce:	f04f 0000 	mov.w	r0, #0
   289d2:	4916      	ldr	r1, [pc, #88]	; (28a2c <modem_info_rsrp_subscribe_handler+0x80>)
   289d4:	f363 0007 	bfi	r0, r3, #0, #8
   289d8:	4b15      	ldr	r3, [pc, #84]	; (28a30 <modem_info_rsrp_subscribe_handler+0x84>)
   289da:	1a5b      	subs	r3, r3, r1
   289dc:	08db      	lsrs	r3, r3, #3
   289de:	4915      	ldr	r1, [pc, #84]	; (28a34 <modem_info_rsrp_subscribe_handler+0x88>)
   289e0:	f363 108f 	bfi	r0, r3, #6, #10

	err = at_params_short_get(&m_param_list,
				  modem_data[MODEM_INFO_RSRP]->param_index,
				  &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   289e4:	f013 fe4d 	bl	3c682 <log_string_sync>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   289e8:	b002      	add	sp, #8
   289ea:	bd10      	pop	{r4, pc}
	err = at_params_short_get(&m_param_list,
   289ec:	f10d 0206 	add.w	r2, sp, #6
   289f0:	2101      	movs	r1, #1
   289f2:	4811      	ldr	r0, [pc, #68]	; (28a38 <modem_info_rsrp_subscribe_handler+0x8c>)
   289f4:	f015 fd41 	bl	3e47a <at_params_short_get>
	if (err != 0) {
   289f8:	4602      	mov	r2, r0
   289fa:	b160      	cbz	r0, 28a16 <modem_info_rsrp_subscribe_handler+0x6a>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   289fc:	2301      	movs	r3, #1
   289fe:	f04f 0000 	mov.w	r0, #0
   28a02:	490a      	ldr	r1, [pc, #40]	; (28a2c <modem_info_rsrp_subscribe_handler+0x80>)
   28a04:	f363 0007 	bfi	r0, r3, #0, #8
   28a08:	4b09      	ldr	r3, [pc, #36]	; (28a30 <modem_info_rsrp_subscribe_handler+0x84>)
   28a0a:	1a5b      	subs	r3, r3, r1
   28a0c:	08db      	lsrs	r3, r3, #3
   28a0e:	f363 108f 	bfi	r0, r3, #6, #10
   28a12:	490a      	ldr	r1, [pc, #40]	; (28a3c <modem_info_rsrp_subscribe_handler+0x90>)
   28a14:	e7e6      	b.n	289e4 <modem_info_rsrp_subscribe_handler+0x38>
	modem_info_rsrp_cb(param_value);
   28a16:	4b0a      	ldr	r3, [pc, #40]	; (28a40 <modem_info_rsrp_subscribe_handler+0x94>)
   28a18:	f89d 0006 	ldrb.w	r0, [sp, #6]
   28a1c:	681b      	ldr	r3, [r3, #0]
   28a1e:	4798      	blx	r3
   28a20:	e7e2      	b.n	289e8 <modem_info_rsrp_subscribe_handler+0x3c>
   28a22:	bf00      	nop
   28a24:	00043dba 	.word	0x00043dba
   28a28:	00040a09 	.word	0x00040a09
   28a2c:	000402cc 	.word	0x000402cc
   28a30:	0004036c 	.word	0x0004036c
   28a34:	00043dc0 	.word	0x00043dc0
   28a38:	20023d7c 	.word	0x20023d7c
   28a3c:	00043df7 	.word	0x00043df7
   28a40:	20023d84 	.word	0x20023d84

00028a44 <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   28a44:	2814      	cmp	r0, #20
	return modem_data[info_type]->data_type;
   28a46:	bf9d      	ittte	ls
   28a48:	4b02      	ldrls	r3, [pc, #8]	; (28a54 <modem_info_type_get+0x10>)
   28a4a:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   28a4e:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   28a50:	20ea      	movhi	r0, #234	; 0xea
}
   28a52:	4770      	bx	lr
   28a54:	00040994 	.word	0x00040994

00028a58 <modem_info_name_get>:
{
   28a58:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL) {
   28a5a:	460d      	mov	r5, r1
   28a5c:	b919      	cbnz	r1, 28a66 <modem_info_name_get+0xe>
		return -EINVAL;
   28a5e:	f06f 0415 	mvn.w	r4, #21
}
   28a62:	4620      	mov	r0, r4
   28a64:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data[info]->data_name);
   28a66:	4b07      	ldr	r3, [pc, #28]	; (28a84 <modem_info_name_get+0x2c>)
   28a68:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   28a6c:	6870      	ldr	r0, [r6, #4]
   28a6e:	f7f4 fb59 	bl	1d124 <strlen>
	if (len <= 0) {
   28a72:	1e04      	subs	r4, r0, #0
   28a74:	ddf3      	ble.n	28a5e <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28a76:	4622      	mov	r2, r4
   28a78:	6871      	ldr	r1, [r6, #4]
   28a7a:	4628      	mov	r0, r5
   28a7c:	f016 f925 	bl	3ecca <memcpy>
   28a80:	e7ef      	b.n	28a62 <modem_info_name_get+0xa>
   28a82:	bf00      	nop
   28a84:	00040994 	.word	0x00040994

00028a88 <modem_info_short_get>:
{
   28a88:	b530      	push	{r4, r5, lr}
   28a8a:	460d      	mov	r5, r1
   28a8c:	b0a1      	sub	sp, #132	; 0x84
   28a8e:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   28a90:	2280      	movs	r2, #128	; 0x80
   28a92:	2100      	movs	r1, #0
   28a94:	4668      	mov	r0, sp
   28a96:	f016 f938 	bl	3ed0a <memset>
	if (buf == NULL) {
   28a9a:	b1e5      	cbz	r5, 28ad6 <modem_info_short_get+0x4e>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   28a9c:	4b11      	ldr	r3, [pc, #68]	; (28ae4 <modem_info_short_get+0x5c>)
   28a9e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   28aa2:	7aa3      	ldrb	r3, [r4, #10]
   28aa4:	2b03      	cmp	r3, #3
   28aa6:	d016      	beq.n	28ad6 <modem_info_short_get+0x4e>
	err = at_cmd_write(modem_data[info]->cmd,
   28aa8:	2300      	movs	r3, #0
   28aaa:	2280      	movs	r2, #128	; 0x80
   28aac:	4669      	mov	r1, sp
   28aae:	6820      	ldr	r0, [r4, #0]
   28ab0:	f7fe ffcc 	bl	27a4c <at_cmd_write>
	if (err != 0) {
   28ab4:	b990      	cbnz	r0, 28adc <modem_info_short_get+0x54>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   28ab6:	4669      	mov	r1, sp
   28ab8:	f104 0009 	add.w	r0, r4, #9
   28abc:	f7ff ff60 	bl	28980 <modem_info_parse.isra.0>
	if (err) {
   28ac0:	b938      	cbnz	r0, 28ad2 <modem_info_short_get+0x4a>
	err = at_params_short_get(&m_param_list,
   28ac2:	462a      	mov	r2, r5
   28ac4:	7a21      	ldrb	r1, [r4, #8]
   28ac6:	4808      	ldr	r0, [pc, #32]	; (28ae8 <modem_info_short_get+0x60>)
   28ac8:	f015 fcd7 	bl	3e47a <at_params_short_get>
	return sizeof(u16_t);
   28acc:	2800      	cmp	r0, #0
   28ace:	bf08      	it	eq
   28ad0:	2002      	moveq	r0, #2
}
   28ad2:	b021      	add	sp, #132	; 0x84
   28ad4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   28ad6:	f06f 0015 	mvn.w	r0, #21
   28ada:	e7fa      	b.n	28ad2 <modem_info_short_get+0x4a>
		return -EIO;
   28adc:	f06f 0004 	mvn.w	r0, #4
   28ae0:	e7f7      	b.n	28ad2 <modem_info_short_get+0x4a>
   28ae2:	bf00      	nop
   28ae4:	00040994 	.word	0x00040994
   28ae8:	20023d7c 	.word	0x20023d7c

00028aec <modem_info_string_get>:
{
   28aec:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t len = 0;
   28aee:	2400      	movs	r4, #0
{
   28af0:	460d      	mov	r5, r1
   28af2:	b0a3      	sub	sp, #140	; 0x8c
   28af4:	4607      	mov	r7, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   28af6:	2280      	movs	r2, #128	; 0x80
   28af8:	4621      	mov	r1, r4
   28afa:	a802      	add	r0, sp, #8
	size_t len = 0;
   28afc:	9401      	str	r4, [sp, #4]
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   28afe:	f016 f904 	bl	3ed0a <memset>
	if (buf == NULL) {
   28b02:	2d00      	cmp	r5, #0
   28b04:	d074      	beq.n	28bf0 <modem_info_string_get+0x104>
	err = at_cmd_write(modem_data[info]->cmd,
   28b06:	4b3d      	ldr	r3, [pc, #244]	; (28bfc <modem_info_string_get+0x110>)
   28b08:	2280      	movs	r2, #128	; 0x80
   28b0a:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
   28b0e:	a902      	add	r1, sp, #8
   28b10:	4623      	mov	r3, r4
   28b12:	6830      	ldr	r0, [r6, #0]
   28b14:	f7fe ff9a 	bl	27a4c <at_cmd_write>
	if (info == MODEM_INFO_SUP_BAND) {
   28b18:	2f02      	cmp	r7, #2
   28b1a:	d10b      	bne.n	28b34 <modem_info_string_get+0x48>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   28b1c:	f10d 0111 	add.w	r1, sp, #17
   28b20:	4628      	mov	r0, r5
   28b22:	f016 faa7 	bl	3f074 <strcpy>
		return strlen(buf);
   28b26:	4628      	mov	r0, r5
   28b28:	f7f4 fafc 	bl	1d124 <strlen>
   28b2c:	4604      	mov	r4, r0
}
   28b2e:	4620      	mov	r0, r4
   28b30:	b023      	add	sp, #140	; 0x8c
   28b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (err != 0) {
   28b34:	2800      	cmp	r0, #0
   28b36:	d15e      	bne.n	28bf6 <modem_info_string_get+0x10a>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   28b38:	a902      	add	r1, sp, #8
   28b3a:	f106 0009 	add.w	r0, r6, #9
   28b3e:	f7ff ff1f 	bl	28980 <modem_info_parse.isra.0>
	if (err) {
   28b42:	4604      	mov	r4, r0
   28b44:	b178      	cbz	r0, 28b66 <modem_info_string_get+0x7a>
		LOG_ERR("Unable to parse data: %d", err);
   28b46:	2301      	movs	r3, #1
   28b48:	f04f 0000 	mov.w	r0, #0
   28b4c:	4a2c      	ldr	r2, [pc, #176]	; (28c00 <modem_info_string_get+0x114>)
   28b4e:	f363 0007 	bfi	r0, r3, #0, #8
   28b52:	4b2c      	ldr	r3, [pc, #176]	; (28c04 <modem_info_string_get+0x118>)
   28b54:	492c      	ldr	r1, [pc, #176]	; (28c08 <modem_info_string_get+0x11c>)
   28b56:	1a9b      	subs	r3, r3, r2
   28b58:	4622      	mov	r2, r4
   28b5a:	08db      	lsrs	r3, r3, #3
   28b5c:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Unable to obtain short: %d", err);
   28b60:	f013 fd8f 	bl	3c682 <log_string_sync>
			return err;
   28b64:	e7e3      	b.n	28b2e <modem_info_string_get+0x42>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   28b66:	7ab3      	ldrb	r3, [r6, #10]
   28b68:	2b01      	cmp	r3, #1
   28b6a:	d12c      	bne.n	28bc6 <modem_info_string_get+0xda>
		err = at_params_short_get(&m_param_list,
   28b6c:	f10d 0202 	add.w	r2, sp, #2
   28b70:	7a31      	ldrb	r1, [r6, #8]
   28b72:	4826      	ldr	r0, [pc, #152]	; (28c0c <modem_info_string_get+0x120>)
   28b74:	f015 fc81 	bl	3e47a <at_params_short_get>
		if (err) {
   28b78:	4604      	mov	r4, r0
   28b7a:	b168      	cbz	r0, 28b98 <modem_info_string_get+0xac>
			LOG_ERR("Unable to obtain short: %d", err);
   28b7c:	2301      	movs	r3, #1
   28b7e:	f04f 0000 	mov.w	r0, #0
   28b82:	4a1f      	ldr	r2, [pc, #124]	; (28c00 <modem_info_string_get+0x114>)
   28b84:	f363 0007 	bfi	r0, r3, #0, #8
   28b88:	4b1e      	ldr	r3, [pc, #120]	; (28c04 <modem_info_string_get+0x118>)
   28b8a:	4921      	ldr	r1, [pc, #132]	; (28c10 <modem_info_string_get+0x124>)
   28b8c:	1a9b      	subs	r3, r3, r2
   28b8e:	08db      	lsrs	r3, r3, #3
   28b90:	f363 108f 	bfi	r0, r3, #6, #10
   28b94:	4622      	mov	r2, r4
   28b96:	e7e3      	b.n	28b60 <modem_info_string_get+0x74>
		err = snprintf(buf, MODEM_INFO_MAX_RESPONSE_SIZE,
   28b98:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   28b9c:	4a1d      	ldr	r2, [pc, #116]	; (28c14 <modem_info_string_get+0x128>)
   28b9e:	2164      	movs	r1, #100	; 0x64
   28ba0:	4628      	mov	r0, r5
   28ba2:	f011 fec1 	bl	3a928 <sniprintf>
	if (info == MODEM_INFO_ICCID) {
   28ba6:	2f0e      	cmp	r7, #14
   28ba8:	d107      	bne.n	28bba <modem_info_string_get+0xce>
   28baa:	462c      	mov	r4, r5
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   28bac:	4628      	mov	r0, r5
   28bae:	f7f4 fab9 	bl	1d124 <strlen>
   28bb2:	1ca3      	adds	r3, r4, #2
   28bb4:	1b64      	subs	r4, r4, r5
   28bb6:	42a0      	cmp	r0, r4
   28bb8:	d810      	bhi.n	28bdc <modem_info_string_get+0xf0>
	return len <= 0 ? -ENOTSUP : len;
   28bba:	9c01      	ldr	r4, [sp, #4]
   28bbc:	2c00      	cmp	r4, #0
   28bbe:	bf08      	it	eq
   28bc0:	f06f 0485 	mvneq.w	r4, #133	; 0x85
   28bc4:	e7b3      	b.n	28b2e <modem_info_string_get+0x42>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   28bc6:	2b03      	cmp	r3, #3
   28bc8:	d1ed      	bne.n	28ba6 <modem_info_string_get+0xba>
		len = MODEM_INFO_MAX_RESPONSE_SIZE;
   28bca:	2364      	movs	r3, #100	; 0x64
		err = at_params_string_get(&m_param_list,
   28bcc:	462a      	mov	r2, r5
		len = MODEM_INFO_MAX_RESPONSE_SIZE;
   28bce:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&m_param_list,
   28bd0:	7a31      	ldrb	r1, [r6, #8]
   28bd2:	ab01      	add	r3, sp, #4
   28bd4:	480d      	ldr	r0, [pc, #52]	; (28c0c <modem_info_string_get+0x120>)
   28bd6:	f015 fc7d 	bl	3e4d4 <at_params_string_get>
   28bda:	e7e4      	b.n	28ba6 <modem_info_string_get+0xba>
		current_char = buf[i];
   28bdc:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   28be0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   28be4:	461c      	mov	r4, r3
		buf[i] = next_char;
   28be6:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   28bea:	f803 2c01 	strb.w	r2, [r3, #-1]
   28bee:	e7dd      	b.n	28bac <modem_info_string_get+0xc0>
		return -EINVAL;
   28bf0:	f06f 0415 	mvn.w	r4, #21
   28bf4:	e79b      	b.n	28b2e <modem_info_string_get+0x42>
		return -EIO;
   28bf6:	f06f 0404 	mvn.w	r4, #4
   28bfa:	e798      	b.n	28b2e <modem_info_string_get+0x42>
   28bfc:	00040994 	.word	0x00040994
   28c00:	000402cc 	.word	0x000402cc
   28c04:	0004036c 	.word	0x0004036c
   28c08:	00043e17 	.word	0x00043e17
   28c0c:	20023d7c 	.word	0x20023d7c
   28c10:	00043e30 	.word	0x00043e30
   28c14:	00044c3d 	.word	0x00044c3d

00028c18 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
	modem_info_rsrp_cb = cb;
   28c18:	4b12      	ldr	r3, [pc, #72]	; (28c64 <modem_info_rsrp_register+0x4c>)
{
   28c1a:	b510      	push	{r4, lr}

	int rc = at_notif_register_handler(NULL,
   28c1c:	4912      	ldr	r1, [pc, #72]	; (28c68 <modem_info_rsrp_register+0x50>)
	modem_info_rsrp_cb = cb;
   28c1e:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   28c20:	2000      	movs	r0, #0
   28c22:	f7fe ffc5 	bl	27bb0 <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   28c26:	4604      	mov	r4, r0
   28c28:	b180      	cbz	r0, 28c4c <modem_info_rsrp_register+0x34>
		LOG_ERR("Can't register handler rc=%d", rc);
   28c2a:	2301      	movs	r3, #1
   28c2c:	f04f 0000 	mov.w	r0, #0
   28c30:	4a0e      	ldr	r2, [pc, #56]	; (28c6c <modem_info_rsrp_register+0x54>)
   28c32:	f363 0007 	bfi	r0, r3, #0, #8
   28c36:	4b0e      	ldr	r3, [pc, #56]	; (28c70 <modem_info_rsrp_register+0x58>)
   28c38:	490e      	ldr	r1, [pc, #56]	; (28c74 <modem_info_rsrp_register+0x5c>)
   28c3a:	1a9b      	subs	r3, r3, r2
   28c3c:	08db      	lsrs	r3, r3, #3
   28c3e:	f363 108f 	bfi	r0, r3, #6, #10
   28c42:	4622      	mov	r2, r4
   28c44:	f013 fd1d 	bl	3c682 <log_string_sync>
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
		return -EIO;
	}

	return 0;
}
   28c48:	4620      	mov	r0, r4
   28c4a:	bd10      	pop	{r4, pc}
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   28c4c:	4603      	mov	r3, r0
   28c4e:	4602      	mov	r2, r0
   28c50:	4601      	mov	r1, r0
   28c52:	4809      	ldr	r0, [pc, #36]	; (28c78 <modem_info_rsrp_register+0x60>)
   28c54:	f7fe fefa 	bl	27a4c <at_cmd_write>
   28c58:	1e04      	subs	r4, r0, #0
		return -EIO;
   28c5a:	bf18      	it	ne
   28c5c:	f06f 0404 	mvnne.w	r4, #4
   28c60:	e7f2      	b.n	28c48 <modem_info_rsrp_register+0x30>
   28c62:	bf00      	nop
   28c64:	20023d84 	.word	0x20023d84
   28c68:	000289ad 	.word	0x000289ad
   28c6c:	000402cc 	.word	0x000402cc
   28c70:	0004036c 	.word	0x0004036c
   28c74:	00043d1d 	.word	0x00043d1d
   28c78:	00043db0 	.word	0x00043db0

00028c7c <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   28c7c:	210a      	movs	r1, #10
   28c7e:	4801      	ldr	r0, [pc, #4]	; (28c84 <modem_info_init+0x8>)
   28c80:	f015 bb50 	b.w	3e324 <at_params_list_init>
   28c84:	20023d7c 	.word	0x20023d7c

00028c88 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   28c88:	b538      	push	{r3, r4, r5, lr}
   28c8a:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   28c8c:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   28c90:	f7ff fed8 	bl	28a44 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   28c94:	2803      	cmp	r0, #3
   28c96:	d11b      	bne.n	28cd0 <modem_data_get+0x48>
		ret = modem_info_string_get(param->type, param->value_string);
   28c98:	1ca9      	adds	r1, r5, #2
   28c9a:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   28c9e:	f7ff ff25 	bl	28aec <modem_info_string_get>
		if (ret < 0) {
   28ca2:	1e04      	subs	r4, r0, #0
   28ca4:	db02      	blt.n	28cac <modem_data_get+0x24>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   28ca6:	2400      	movs	r4, #0
}
   28ca8:	4620      	mov	r0, r4
   28caa:	bd38      	pop	{r3, r4, r5, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   28cac:	2301      	movs	r3, #1
   28cae:	f04f 0000 	mov.w	r0, #0
   28cb2:	4a14      	ldr	r2, [pc, #80]	; (28d04 <modem_data_get+0x7c>)
   28cb4:	f363 0007 	bfi	r0, r3, #0, #8
   28cb8:	4b13      	ldr	r3, [pc, #76]	; (28d08 <modem_data_get+0x80>)
   28cba:	4914      	ldr	r1, [pc, #80]	; (28d0c <modem_data_get+0x84>)
   28cbc:	1a9b      	subs	r3, r3, r2
   28cbe:	08db      	lsrs	r3, r3, #3
   28cc0:	f363 108f 	bfi	r0, r3, #6, #10
   28cc4:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
   28cc8:	4623      	mov	r3, r4
   28cca:	f013 fcda 	bl	3c682 <log_string_sync>
			return ret;
   28cce:	e7eb      	b.n	28ca8 <modem_data_get+0x20>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   28cd0:	2801      	cmp	r0, #1
   28cd2:	d1e8      	bne.n	28ca6 <modem_data_get+0x1e>
		ret = modem_info_short_get(param->type, &param->value);
   28cd4:	4629      	mov	r1, r5
   28cd6:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   28cda:	f7ff fed5 	bl	28a88 <modem_info_short_get>
		if (ret < 0) {
   28cde:	1e04      	subs	r4, r0, #0
   28ce0:	dae1      	bge.n	28ca6 <modem_data_get+0x1e>
			LOG_ERR("Link data not obtained: %d", ret);
   28ce2:	2301      	movs	r3, #1
   28ce4:	f04f 0000 	mov.w	r0, #0
   28ce8:	4a06      	ldr	r2, [pc, #24]	; (28d04 <modem_data_get+0x7c>)
   28cea:	f363 0007 	bfi	r0, r3, #0, #8
   28cee:	4b06      	ldr	r3, [pc, #24]	; (28d08 <modem_data_get+0x80>)
   28cf0:	4907      	ldr	r1, [pc, #28]	; (28d10 <modem_data_get+0x88>)
   28cf2:	1a9b      	subs	r3, r3, r2
   28cf4:	08db      	lsrs	r3, r3, #3
   28cf6:	f363 108f 	bfi	r0, r3, #6, #10
   28cfa:	4622      	mov	r2, r4
   28cfc:	f013 fcc1 	bl	3c682 <log_string_sync>
			return ret;
   28d00:	e7d2      	b.n	28ca8 <modem_data_get+0x20>
   28d02:	bf00      	nop
   28d04:	000402cc 	.word	0x000402cc
   28d08:	0004037c 	.word	0x0004037c
   28d0c:	00043fb5 	.word	0x00043fb5
   28d10:	00043fd3 	.word	0x00043fd3

00028d14 <modem_info_params_init>:
	if (modem == NULL) {
   28d14:	2800      	cmp	r0, #0
   28d16:	d043      	beq.n	28da0 <modem_info_params_init+0x8c>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   28d18:	2301      	movs	r3, #1
   28d1a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   28d1e:	2302      	movs	r3, #2
   28d20:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   28d24:	2303      	movs	r3, #3
   28d26:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   28d2a:	2305      	movs	r3, #5
   28d2c:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   28d30:	2306      	movs	r3, #6
   28d32:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   28d36:	2307      	movs	r3, #7
   28d38:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   28d3c:	2308      	movs	r3, #8
   28d3e:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   28d42:	2309      	movs	r3, #9
   28d44:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   28d48:	2304      	movs	r3, #4
   28d4a:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   28d4e:	230f      	movs	r3, #15
   28d50:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   28d54:	2310      	movs	r3, #16
   28d56:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   28d5a:	2311      	movs	r3, #17
   28d5c:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   28d60:	2314      	movs	r3, #20
   28d62:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   28d66:	230a      	movs	r3, #10
   28d68:	f880 3634 	strb.w	r3, [r0, #1588]	; 0x634
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   28d6c:	230e      	movs	r3, #14
   28d6e:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   28d72:	2312      	movs	r3, #18
   28d74:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   28d78:	230d      	movs	r3, #13
   28d7a:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   28d7e:	230b      	movs	r3, #11
   28d80:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.imei.type			= MODEM_INFO_IMEI;
   28d84:	2313      	movs	r3, #19
   28d86:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.board			= CONFIG_BOARD;
   28d8a:	4b07      	ldr	r3, [pc, #28]	; (28da8 <modem_info_params_init+0x94>)
   28d8c:	f8c0 3868 	str.w	r3, [r0, #2152]	; 0x868
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   28d90:	4b06      	ldr	r3, [pc, #24]	; (28dac <modem_info_params_init+0x98>)
   28d92:	f8c0 386c 	str.w	r3, [r0, #2156]	; 0x86c
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   28d96:	4b06      	ldr	r3, [pc, #24]	; (28db0 <modem_info_params_init+0x9c>)
   28d98:	f8c0 3870 	str.w	r3, [r0, #2160]	; 0x870
	return 0;
   28d9c:	2000      	movs	r0, #0
   28d9e:	4770      	bx	lr
		return -EINVAL;
   28da0:	f06f 0015 	mvn.w	r0, #21
}
   28da4:	4770      	bx	lr
   28da6:	bf00      	nop
   28da8:	00044043 	.word	0x00044043
   28dac:	00044054 	.word	0x00044054
   28db0:	00041c09 	.word	0x00041c09

00028db4 <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   28db4:	b570      	push	{r4, r5, r6, lr}
	int ret;

	if (modem == NULL) {
   28db6:	4604      	mov	r4, r0
   28db8:	2800      	cmp	r0, #0
   28dba:	f000 80b9 	beq.w	28f30 <modem_info_params_get+0x17c>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   28dbe:	f7ff ff63 	bl	28c88 <modem_data_get>
   28dc2:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   28dc4:	f104 0070 	add.w	r0, r4, #112	; 0x70
   28dc8:	f7ff ff5e 	bl	28c88 <modem_data_get>
   28dcc:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   28dce:	f504 7044 	add.w	r0, r4, #784	; 0x310
   28dd2:	f7ff ff59 	bl	28c88 <modem_data_get>
   28dd6:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   28dd8:	f504 7060 	add.w	r0, r4, #896	; 0x380
   28ddc:	f7ff ff54 	bl	28c88 <modem_data_get>
   28de0:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   28de2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   28de6:	f7ff ff4f 	bl	28c88 <modem_data_get>
   28dea:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   28dec:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   28df0:	f7ff ff4a 	bl	28c88 <modem_data_get>
   28df4:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   28df6:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   28dfa:	f7ff ff45 	bl	28c88 <modem_data_get>
   28dfe:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   28e00:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   28e04:	f7ff ff40 	bl	28c88 <modem_data_get>
   28e08:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   28e0a:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   28e0e:	f7ff ff3b 	bl	28c88 <modem_data_get>
   28e12:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   28e14:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   28e18:	f7ff ff36 	bl	28c88 <modem_data_get>
   28e1c:	4405      	add	r5, r0

		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret += modem_data_get(&modem->network.date_time);
   28e1e:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   28e22:	f7ff ff31 	bl	28c88 <modem_data_get>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28e26:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
   28e2a:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   28e2e:	4405      	add	r5, r0
	memcpy(mcc->value_string, current_operator->value_string, 3);
   28e30:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   28e34:	f8a4 21c2 	strh.w	r2, [r4, #450]	; 0x1c2
   28e38:	7083      	strb	r3, [r0, #2]
   28e3a:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
   28e3e:	f8b4 2155 	ldrh.w	r2, [r4, #341]	; 0x155
   28e42:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
   28e46:	f8a4 2232 	strh.w	r2, [r4, #562]	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   28e4a:	2100      	movs	r1, #0
   28e4c:	220a      	movs	r2, #10
   28e4e:	f011 fe4d 	bl	3aaec <strtol>
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   28e52:	f204 2632 	addw	r6, r4, #562	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   28e56:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   28e5a:	220a      	movs	r2, #10
   28e5c:	2100      	movs	r1, #0
   28e5e:	4630      	mov	r0, r6
   28e60:	f011 fe44 	bl	3aaec <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   28e64:	2210      	movs	r2, #16
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   28e66:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   28e6a:	2100      	movs	r1, #0
   28e6c:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   28e70:	f011 fe3c 	bl	3aaec <strtol>
   28e74:	f7f3 fc36 	bl	1c6e4 <__aeabi_i2d>
   28e78:	f504 66b6 	add.w	r6, r4, #1456	; 0x5b0
   28e7c:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   28e80:	2100      	movs	r1, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   28e82:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   28e84:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   28e88:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   28e8c:	f011 fe2e 	bl	3aaec <strtol>
   28e90:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   28e94:	b195      	cbz	r5, 28ebc <modem_info_params_get+0x108>
			LOG_ERR("Network data not obtained: %d", ret);
   28e96:	2301      	movs	r3, #1
   28e98:	f04f 0000 	mov.w	r0, #0
   28e9c:	4a26      	ldr	r2, [pc, #152]	; (28f38 <modem_info_params_get+0x184>)
   28e9e:	f363 0007 	bfi	r0, r3, #0, #8
   28ea2:	4b26      	ldr	r3, [pc, #152]	; (28f3c <modem_info_params_get+0x188>)
   28ea4:	4926      	ldr	r1, [pc, #152]	; (28f40 <modem_info_params_get+0x18c>)
   28ea6:	1a9b      	subs	r3, r3, r2
   28ea8:	462a      	mov	r2, r5
   28eaa:	08db      	lsrs	r3, r3, #3
   28eac:	f363 108f 	bfi	r0, r3, #6, #10
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   28eb0:	f013 fbe7 	bl	3c682 <log_string_sync>
			return -EAGAIN;
   28eb4:	f06f 020a 	mvn.w	r2, #10
		}
	}

	return 0;
}
   28eb8:	4610      	mov	r0, r2
   28eba:	bd70      	pop	{r4, r5, r6, pc}
		ret = modem_data_get(&modem->sim.uicc);
   28ebc:	f504 60b9 	add.w	r0, r4, #1480	; 0x5c8
   28ec0:	f7ff fee2 	bl	28c88 <modem_data_get>
   28ec4:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   28ec6:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   28eca:	f7ff fedd 	bl	28c88 <modem_data_get>
   28ece:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   28ed0:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   28ed4:	f7ff fed8 	bl	28c88 <modem_data_get>
		if (ret) {
   28ed8:	182a      	adds	r2, r5, r0
   28eda:	d00c      	beq.n	28ef6 <modem_info_params_get+0x142>
			LOG_ERR("Sim data not obtained: %d", ret);
   28edc:	2301      	movs	r3, #1
   28ede:	f04f 0000 	mov.w	r0, #0
   28ee2:	4915      	ldr	r1, [pc, #84]	; (28f38 <modem_info_params_get+0x184>)
   28ee4:	f363 0007 	bfi	r0, r3, #0, #8
   28ee8:	4b14      	ldr	r3, [pc, #80]	; (28f3c <modem_info_params_get+0x188>)
   28eea:	1a5b      	subs	r3, r3, r1
   28eec:	08db      	lsrs	r3, r3, #3
   28eee:	f363 108f 	bfi	r0, r3, #6, #10
   28ef2:	4914      	ldr	r1, [pc, #80]	; (28f44 <modem_info_params_get+0x190>)
   28ef4:	e7dc      	b.n	28eb0 <modem_info_params_get+0xfc>
		ret = modem_data_get(&modem->device.modem_fw);
   28ef6:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   28efa:	f7ff fec5 	bl	28c88 <modem_data_get>
   28efe:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   28f00:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   28f04:	f7ff fec0 	bl	28c88 <modem_data_get>
   28f08:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   28f0a:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   28f0e:	f7ff febb 	bl	28c88 <modem_data_get>
		if (ret) {
   28f12:	182a      	adds	r2, r5, r0
   28f14:	d0d0      	beq.n	28eb8 <modem_info_params_get+0x104>
			LOG_ERR("Device data not obtained: %d", ret);
   28f16:	2301      	movs	r3, #1
   28f18:	f04f 0000 	mov.w	r0, #0
   28f1c:	4906      	ldr	r1, [pc, #24]	; (28f38 <modem_info_params_get+0x184>)
   28f1e:	f363 0007 	bfi	r0, r3, #0, #8
   28f22:	4b06      	ldr	r3, [pc, #24]	; (28f3c <modem_info_params_get+0x188>)
   28f24:	1a5b      	subs	r3, r3, r1
   28f26:	08db      	lsrs	r3, r3, #3
   28f28:	f363 108f 	bfi	r0, r3, #6, #10
   28f2c:	4906      	ldr	r1, [pc, #24]	; (28f48 <modem_info_params_get+0x194>)
   28f2e:	e7bf      	b.n	28eb0 <modem_info_params_get+0xfc>
		return -EINVAL;
   28f30:	f06f 0215 	mvn.w	r2, #21
   28f34:	e7c0      	b.n	28eb8 <modem_info_params_get+0x104>
   28f36:	bf00      	nop
   28f38:	000402cc 	.word	0x000402cc
   28f3c:	0004037c 	.word	0x0004037c
   28f40:	00043fee 	.word	0x00043fee
   28f44:	0004400c 	.word	0x0004400c
   28f48:	00044026 	.word	0x00044026

00028f4c <network_data_add>:

	return total_len;
}

static int network_data_add(struct network_param *network, cJSON *json_obj)
{
   28f4c:	b570      	push	{r4, r5, r6, lr}
   28f4e:	460e      	mov	r6, r1
   28f50:	b09a      	sub	sp, #104	; 0x68

	static const char lte_string[]	 = "LTE-M";
	static const char nbiot_string[] = "NB-IoT";
	static const char gps_string[]	 = " GPS";

	if (network == NULL || json_obj == NULL) {
   28f52:	4605      	mov	r5, r0
   28f54:	2800      	cmp	r0, #0
   28f56:	d065      	beq.n	29024 <network_data_add+0xd8>
   28f58:	2900      	cmp	r1, #0
   28f5a:	d063      	beq.n	29024 <network_data_add+0xd8>
		return -EINVAL;
	}

	total_len = json_add_data(&network->current_band, json_obj);
   28f5c:	f015 fb2b 	bl	3e5b6 <json_add_data>
	total_len += json_add_data(&network->sup_band, json_obj);
   28f60:	4631      	mov	r1, r6
	total_len = json_add_data(&network->current_band, json_obj);
   28f62:	4604      	mov	r4, r0
	total_len += json_add_data(&network->sup_band, json_obj);
   28f64:	f105 0070 	add.w	r0, r5, #112	; 0x70
   28f68:	f015 fb25 	bl	3e5b6 <json_add_data>
	total_len += json_add_data(&network->area_code, json_obj);
   28f6c:	4631      	mov	r1, r6
	total_len += json_add_data(&network->sup_band, json_obj);
   28f6e:	4404      	add	r4, r0
	total_len += json_add_data(&network->area_code, json_obj);
   28f70:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   28f74:	f015 fb1f 	bl	3e5b6 <json_add_data>
	total_len += json_add_data(&network->current_operator, json_obj);
   28f78:	4631      	mov	r1, r6
	total_len += json_add_data(&network->area_code, json_obj);
   28f7a:	4404      	add	r4, r0
	total_len += json_add_data(&network->current_operator, json_obj);
   28f7c:	f505 70a8 	add.w	r0, r5, #336	; 0x150
   28f80:	f015 fb19 	bl	3e5b6 <json_add_data>
	total_len += json_add_data(&network->ip_address, json_obj);
   28f84:	4631      	mov	r1, r6
	total_len += json_add_data(&network->current_operator, json_obj);
   28f86:	4404      	add	r4, r0
	total_len += json_add_data(&network->ip_address, json_obj);
   28f88:	f505 7044 	add.w	r0, r5, #784	; 0x310
   28f8c:	f015 fb13 	bl	3e5b6 <json_add_data>
	total_len += json_add_data(&network->ue_mode, json_obj);
   28f90:	4631      	mov	r1, r6
	total_len += json_add_data(&network->ip_address, json_obj);
   28f92:	4404      	add	r4, r0
	total_len += json_add_data(&network->ue_mode, json_obj);
   28f94:	f505 7060 	add.w	r0, r5, #896	; 0x380
   28f98:	f015 fb0d 	bl	3e5b6 <json_add_data>

	len = modem_info_name_get(network->cellid_hex.type, data_name);
   28f9c:	a901      	add	r1, sp, #4
	total_len += json_add_data(&network->ue_mode, json_obj);
   28f9e:	4404      	add	r4, r0
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   28fa0:	f895 030c 	ldrb.w	r0, [r5, #780]	; 0x30c
   28fa4:	f7ff fd58 	bl	28a58 <modem_info_name_get>
	data_name[len] =  '\0';
   28fa8:	ab1a      	add	r3, sp, #104	; 0x68
   28faa:	4418      	add	r0, r3
   28fac:	2300      	movs	r3, #0
   28fae:	f800 3c64 	strb.w	r3, [r0, #-100]
	ret = json_add_num(json_obj, data_name, network->cellid_dec);
   28fb2:	f505 63b6 	add.w	r3, r5, #1456	; 0x5b0
	json_num = cJSON_CreateNumber(num);
   28fb6:	ed93 0b00 	vldr	d0, [r3]
   28fba:	f7f4 fbc1 	bl	1d740 <cJSON_CreateNumber>
	if (json_num == NULL) {
   28fbe:	4602      	mov	r2, r0
   28fc0:	b120      	cbz	r0, 28fcc <network_data_add+0x80>
	cJSON_AddItemToObject(parent, str, item);
   28fc2:	a901      	add	r1, sp, #4
   28fc4:	4630      	mov	r0, r6
   28fc6:	f014 fd12 	bl	3d9ee <cJSON_AddItemToObject>

	if (ret) {
		LOG_DBG("Unable to add the cell ID.");
	} else {
		total_len += sizeof(double);
   28fca:	3408      	adds	r4, #8
	}

	if (network->lte_mode.value == 1) {
   28fcc:	f8b5 33f0 	ldrh.w	r3, [r5, #1008]	; 0x3f0
   28fd0:	f505 62b7 	add.w	r2, r5, #1464	; 0x5b8
   28fd4:	2b01      	cmp	r3, #1
   28fd6:	d11a      	bne.n	2900e <network_data_add+0xc2>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
   28fd8:	4610      	mov	r0, r2
   28fda:	4914      	ldr	r1, [pc, #80]	; (2902c <network_data_add+0xe0>)
   28fdc:	f016 f82d 	bl	3f03a <strcat>
   28fe0:	4602      	mov	r2, r0
		strcat(network->network_mode, lte_string);
		total_len += sizeof(lte_string);
   28fe2:	3406      	adds	r4, #6
	} else if (network->nbiot_mode.value == 1) {
		strcat(network->network_mode, nbiot_string);
		total_len += sizeof(nbiot_string);
	}

	if (network->gps_mode.value == 1) {
   28fe4:	f8b5 34d0 	ldrh.w	r3, [r5, #1232]	; 0x4d0
   28fe8:	2b01      	cmp	r3, #1
   28fea:	d105      	bne.n	28ff8 <network_data_add+0xac>
   28fec:	4610      	mov	r0, r2
   28fee:	4910      	ldr	r1, [pc, #64]	; (29030 <network_data_add+0xe4>)
   28ff0:	f016 f823 	bl	3f03a <strcat>
   28ff4:	4602      	mov	r2, r0
		strcat(network->network_mode, gps_string);
		total_len += sizeof(gps_string);
   28ff6:	3405      	adds	r4, #5
	}

	ret = json_add_str(json_obj, "networkMode", network->network_mode);
   28ff8:	490e      	ldr	r1, [pc, #56]	; (29034 <network_data_add+0xe8>)
   28ffa:	4630      	mov	r0, r6
   28ffc:	f015 fac5 	bl	3e58a <json_add_str>

	if (ret) {
   29000:	b110      	cbz	r0, 29008 <network_data_add+0xbc>
		printk("Unable to add the network mode");
   29002:	480d      	ldr	r0, [pc, #52]	; (29038 <network_data_add+0xec>)
   29004:	f013 fae6 	bl	3c5d4 <printk>
	}

	return total_len;
}
   29008:	4620      	mov	r0, r4
   2900a:	b01a      	add	sp, #104	; 0x68
   2900c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (network->nbiot_mode.value == 1) {
   2900e:	f8b5 3460 	ldrh.w	r3, [r5, #1120]	; 0x460
   29012:	2b01      	cmp	r3, #1
   29014:	d1e6      	bne.n	28fe4 <network_data_add+0x98>
   29016:	4610      	mov	r0, r2
   29018:	4908      	ldr	r1, [pc, #32]	; (2903c <network_data_add+0xf0>)
   2901a:	f016 f80e 	bl	3f03a <strcat>
		total_len += sizeof(nbiot_string);
   2901e:	3407      	adds	r4, #7
   29020:	4602      	mov	r2, r0
   29022:	e7df      	b.n	28fe4 <network_data_add+0x98>
		return -EINVAL;
   29024:	f06f 0415 	mvn.w	r4, #21
   29028:	e7ee      	b.n	29008 <network_data_add+0xbc>
   2902a:	bf00      	nop
   2902c:	0004409d 	.word	0x0004409d
   29030:	00044098 	.word	0x00044098
   29034:	000440c9 	.word	0x000440c9
   29038:	000440d5 	.word	0x000440d5
   2903c:	000440c2 	.word	0x000440c2

00029040 <device_data_add>:

	return total_len;
}

static int device_data_add(struct device_param *device, cJSON *json_obj)
{
   29040:	b570      	push	{r4, r5, r6, lr}
   29042:	460d      	mov	r5, r1
	int total_len;

	if (device == NULL || json_obj == NULL) {
   29044:	4606      	mov	r6, r0
   29046:	b328      	cbz	r0, 29094 <device_data_add+0x54>
   29048:	b321      	cbz	r1, 29094 <device_data_add+0x54>
		return -EINVAL;
	}

	total_len = json_add_data(&device->modem_fw, json_obj);
   2904a:	f015 fab4 	bl	3e5b6 <json_add_data>
	total_len += json_add_data(&device->battery, json_obj);
   2904e:	4629      	mov	r1, r5
	total_len = json_add_data(&device->modem_fw, json_obj);
   29050:	4604      	mov	r4, r0
	total_len += json_add_data(&device->battery, json_obj);
   29052:	f106 0070 	add.w	r0, r6, #112	; 0x70
   29056:	f015 faae 	bl	3e5b6 <json_add_data>
	total_len += json_add_data(&device->imei, json_obj);
   2905a:	4629      	mov	r1, r5
	total_len += json_add_data(&device->battery, json_obj);
   2905c:	4404      	add	r4, r0
	total_len += json_add_data(&device->imei, json_obj);
   2905e:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   29062:	f015 faa8 	bl	3e5b6 <json_add_data>
	total_len += json_add_str(json_obj, "board", device->board);
   29066:	f8d6 2150 	ldr.w	r2, [r6, #336]	; 0x150
	total_len += json_add_data(&device->imei, json_obj);
   2906a:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "board", device->board);
   2906c:	490b      	ldr	r1, [pc, #44]	; (2909c <device_data_add+0x5c>)
   2906e:	4628      	mov	r0, r5
   29070:	f015 fa8b 	bl	3e58a <json_add_str>
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   29074:	f8d6 2154 	ldr.w	r2, [r6, #340]	; 0x154
	total_len += json_add_str(json_obj, "board", device->board);
   29078:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2907a:	4909      	ldr	r1, [pc, #36]	; (290a0 <device_data_add+0x60>)
   2907c:	4628      	mov	r0, r5
   2907e:	f015 fa84 	bl	3e58a <json_add_str>
	total_len += json_add_str(json_obj, "appName", device->app_name);
   29082:	f8d6 2158 	ldr.w	r2, [r6, #344]	; 0x158
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   29086:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appName", device->app_name);
   29088:	4906      	ldr	r1, [pc, #24]	; (290a4 <device_data_add+0x64>)
   2908a:	4628      	mov	r0, r5
   2908c:	f015 fa7d 	bl	3e58a <json_add_str>
   29090:	4420      	add	r0, r4

	return total_len;
}
   29092:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   29094:	f06f 0015 	mvn.w	r0, #21
   29098:	e7fb      	b.n	29092 <device_data_add+0x52>
   2909a:	bf00      	nop
   2909c:	0004407f 	.word	0x0004407f
   290a0:	00044085 	.word	0x00044085
   290a4:	00044090 	.word	0x00044090

000290a8 <modem_info_json_object_encode>:

int modem_info_json_object_encode(struct modem_param_info *modem,
				  cJSON *root_obj)
{
   290a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   290ac:	4681      	mov	r9, r0
	if (root_obj == NULL || modem == NULL) {
   290ae:	460d      	mov	r5, r1
   290b0:	2900      	cmp	r1, #0
   290b2:	d04f      	beq.n	29154 <modem_info_json_object_encode+0xac>
   290b4:	2800      	cmp	r0, #0
   290b6:	d04d      	beq.n	29154 <modem_info_json_object_encode+0xac>
		return -EINVAL;
	}

	int obj_count = cJSON_GetArraySize(root_obj);
   290b8:	4608      	mov	r0, r1
   290ba:	f014 fc81 	bl	3d9c0 <cJSON_GetArraySize>
   290be:	4604      	mov	r4, r0

	cJSON *network_obj	= cJSON_CreateObject();
   290c0:	f7fd fc50 	bl	26964 <cJSON_CreateObject>
   290c4:	4680      	mov	r8, r0
	cJSON *sim_obj		= cJSON_CreateObject();
   290c6:	f7fd fc4d 	bl	26964 <cJSON_CreateObject>
   290ca:	4607      	mov	r7, r0
	cJSON *device_obj	= cJSON_CreateObject();
   290cc:	f7fd fc4a 	bl	26964 <cJSON_CreateObject>
   290d0:	4606      	mov	r6, r0

	if (network_obj == NULL || sim_obj == NULL || device_obj == NULL) {
   290d2:	f1b8 0f00 	cmp.w	r8, #0
   290d6:	d03a      	beq.n	2914e <modem_info_json_object_encode+0xa6>
   290d8:	b3cf      	cbz	r7, 2914e <modem_info_json_object_encode+0xa6>
   290da:	b3c0      	cbz	r0, 2914e <modem_info_json_object_encode+0xa6>
		obj_count = -ENOMEM;
		goto delete_object;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
	    (network_data_add(&modem->network, network_obj) > 0)) {
   290dc:	4641      	mov	r1, r8
   290de:	4648      	mov	r0, r9
   290e0:	f7ff ff34 	bl	28f4c <network_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
   290e4:	2800      	cmp	r0, #0
   290e6:	dd06      	ble.n	290f6 <modem_info_json_object_encode+0x4e>
	cJSON_AddItemToObject(parent, str, item);
   290e8:	4642      	mov	r2, r8
   290ea:	491c      	ldr	r1, [pc, #112]	; (2915c <modem_info_json_object_encode+0xb4>)
   290ec:	4628      	mov	r0, r5
   290ee:	f014 fc7e 	bl	3d9ee <cJSON_AddItemToObject>

		json_add_obj(root_obj, "networkInfo", network_obj);
		network_obj = NULL;
   290f2:	f04f 0800 	mov.w	r8, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
	    (sim_data_add(&modem->sim, sim_obj) > 0)) {
   290f6:	4639      	mov	r1, r7
   290f8:	f509 60b9 	add.w	r0, r9, #1480	; 0x5c8
   290fc:	f015 fa9f 	bl	3e63e <sim_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
   29100:	2800      	cmp	r0, #0
   29102:	dd05      	ble.n	29110 <modem_info_json_object_encode+0x68>
	cJSON_AddItemToObject(parent, str, item);
   29104:	463a      	mov	r2, r7
   29106:	4916      	ldr	r1, [pc, #88]	; (29160 <modem_info_json_object_encode+0xb8>)
   29108:	4628      	mov	r0, r5
   2910a:	f014 fc70 	bl	3d9ee <cJSON_AddItemToObject>

		json_add_obj(root_obj, "simInfo", sim_obj);
		sim_obj = NULL;
   2910e:	2700      	movs	r7, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
	    (device_data_add(&modem->device, device_obj) > 0)) {
   29110:	4631      	mov	r1, r6
   29112:	f509 60e3 	add.w	r0, r9, #1816	; 0x718
   29116:	f7ff ff93 	bl	29040 <device_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
   2911a:	2800      	cmp	r0, #0
   2911c:	dd05      	ble.n	2912a <modem_info_json_object_encode+0x82>
	cJSON_AddItemToObject(parent, str, item);
   2911e:	4632      	mov	r2, r6
   29120:	4910      	ldr	r1, [pc, #64]	; (29164 <modem_info_json_object_encode+0xbc>)
   29122:	4628      	mov	r0, r5
   29124:	f014 fc63 	bl	3d9ee <cJSON_AddItemToObject>

		json_add_obj(root_obj, "deviceInfo", device_obj);
		device_obj = NULL;
   29128:	2600      	movs	r6, #0
	}

delete_object:
	cJSON_Delete(network_obj);
   2912a:	4640      	mov	r0, r8
   2912c:	f7fd fb56 	bl	267dc <cJSON_Delete>
	cJSON_Delete(sim_obj);
   29130:	4638      	mov	r0, r7
   29132:	f7fd fb53 	bl	267dc <cJSON_Delete>
	cJSON_Delete(device_obj);
   29136:	4630      	mov	r0, r6
   29138:	f7fd fb50 	bl	267dc <cJSON_Delete>

	if (obj_count >= 0) {
   2913c:	2c00      	cmp	r4, #0
   2913e:	db03      	blt.n	29148 <modem_info_json_object_encode+0xa0>
		obj_count = cJSON_GetArraySize(root_obj) - obj_count;
   29140:	4628      	mov	r0, r5
   29142:	f014 fc3d 	bl	3d9c0 <cJSON_GetArraySize>
   29146:	1b04      	subs	r4, r0, r4
	}

	return obj_count;
}
   29148:	4620      	mov	r0, r4
   2914a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		obj_count = -ENOMEM;
   2914e:	f06f 040b 	mvn.w	r4, #11
   29152:	e7ea      	b.n	2912a <modem_info_json_object_encode+0x82>
		return -EINVAL;
   29154:	f06f 0415 	mvn.w	r4, #21
   29158:	e7f6      	b.n	29148 <modem_info_json_object_encode+0xa0>
   2915a:	bf00      	nop
   2915c:	000440a3 	.word	0x000440a3
   29160:	000440af 	.word	0x000440af
   29164:	000440b7 	.word	0x000440b7

00029168 <cloud_get_binding>:

extern struct cloud_backend __cloud_backends_start[0];
extern struct cloud_backend __cloud_backends_end[0];

struct cloud_backend *cloud_get_binding(const char *name)
{
   29168:	b570      	push	{r4, r5, r6, lr}
   2916a:	4606      	mov	r6, r0
	struct cloud_backend *info;

	for (info = __cloud_backends_start; info != __cloud_backends_end;
   2916c:	4c09      	ldr	r4, [pc, #36]	; (29194 <cloud_get_binding+0x2c>)
   2916e:	4d0a      	ldr	r5, [pc, #40]	; (29198 <cloud_get_binding+0x30>)
   29170:	42ac      	cmp	r4, r5
   29172:	d101      	bne.n	29178 <cloud_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   29174:	2400      	movs	r4, #0
   29176:	e00a      	b.n	2918e <cloud_get_binding+0x26>
		if (info->api == NULL) {
   29178:	6823      	ldr	r3, [r4, #0]
   2917a:	b90b      	cbnz	r3, 29180 <cloud_get_binding+0x18>
	     info++) {
   2917c:	3408      	adds	r4, #8
   2917e:	e7f7      	b.n	29170 <cloud_get_binding+0x8>
		if (strcmp(name, info->config->name) == 0) {
   29180:	6863      	ldr	r3, [r4, #4]
   29182:	4630      	mov	r0, r6
   29184:	6819      	ldr	r1, [r3, #0]
   29186:	f7f3 ffc3 	bl	1d110 <strcmp>
   2918a:	2800      	cmp	r0, #0
   2918c:	d1f6      	bne.n	2917c <cloud_get_binding+0x14>
}
   2918e:	4620      	mov	r0, r4
   29190:	bd70      	pop	{r4, r5, r6, pc}
   29192:	bf00      	nop
   29194:	000477f4 	.word	0x000477f4
   29198:	000477fc 	.word	0x000477fc

0002919c <uninit>:

	return nrf_cloud_init(&params);
}

static int uninit(const struct cloud_backend *const backend)
{
   2919c:	b508      	push	{r3, lr}
	LOG_INF("uninit() is not implemented");
   2919e:	f04f 0000 	mov.w	r0, #0
   291a2:	2303      	movs	r3, #3
   291a4:	4a06      	ldr	r2, [pc, #24]	; (291c0 <uninit+0x24>)
   291a6:	f363 0007 	bfi	r0, r3, #0, #8
   291aa:	4b06      	ldr	r3, [pc, #24]	; (291c4 <uninit+0x28>)
   291ac:	4906      	ldr	r1, [pc, #24]	; (291c8 <uninit+0x2c>)
   291ae:	1a9b      	subs	r3, r3, r2
   291b0:	08db      	lsrs	r3, r3, #3
   291b2:	f363 108f 	bfi	r0, r3, #6, #10
   291b6:	f013 fa64 	bl	3c682 <log_string_sync>

	return 0;
}
   291ba:	2000      	movs	r0, #0
   291bc:	bd08      	pop	{r3, pc}
   291be:	bf00      	nop
   291c0:	000402cc 	.word	0x000402cc
   291c4:	000403a4 	.word	0x000403a4
   291c8:	0004433a 	.word	0x0004433a

000291cc <event_handler>:
{
   291cc:	b570      	push	{r4, r5, r6, lr}
   291ce:	4606      	mov	r6, r0
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   291d0:	4c63      	ldr	r4, [pc, #396]	; (29360 <event_handler+0x194>)
{
   291d2:	b088      	sub	sp, #32
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   291d4:	6823      	ldr	r3, [r4, #0]
	struct cloud_event evt = { 0 };
   291d6:	221c      	movs	r2, #28
   291d8:	2100      	movs	r1, #0
   291da:	a801      	add	r0, sp, #4
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   291dc:	685d      	ldr	r5, [r3, #4]
	struct cloud_event evt = { 0 };
   291de:	f015 fd94 	bl	3ed0a <memset>
	switch (nrf_cloud_evt->type) {
   291e2:	7833      	ldrb	r3, [r6, #0]
   291e4:	4a5f      	ldr	r2, [pc, #380]	; (29364 <event_handler+0x198>)
   291e6:	4960      	ldr	r1, [pc, #384]	; (29368 <event_handler+0x19c>)
   291e8:	2b05      	cmp	r3, #5
   291ea:	eba2 0201 	sub.w	r2, r2, r1
   291ee:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   291f2:	d079      	beq.n	292e8 <event_handler+0x11c>
   291f4:	d821      	bhi.n	2923a <event_handler+0x6e>
   291f6:	2b02      	cmp	r3, #2
   291f8:	d05c      	beq.n	292b4 <event_handler+0xe8>
   291fa:	d80d      	bhi.n	29218 <event_handler+0x4c>
   291fc:	2b01      	cmp	r3, #1
   291fe:	d04a      	beq.n	29296 <event_handler+0xca>
		LOG_DBG("Unknown event type: %d", nrf_cloud_evt->type);
   29200:	2104      	movs	r1, #4
   29202:	f04f 0000 	mov.w	r0, #0
   29206:	f361 0007 	bfi	r0, r1, #0, #8
   2920a:	f362 108f 	bfi	r0, r2, #6, #10
   2920e:	4957      	ldr	r1, [pc, #348]	; (2936c <event_handler+0x1a0>)
   29210:	4a57      	ldr	r2, [pc, #348]	; (29370 <event_handler+0x1a4>)
   29212:	f013 fa36 	bl	3c682 <log_string_sync>
}
   29216:	e072      	b.n	292fe <event_handler+0x132>
	switch (nrf_cloud_evt->type) {
   29218:	2b03      	cmp	r3, #3
   2921a:	d058      	beq.n	292ce <event_handler+0x102>
   2921c:	2b04      	cmp	r3, #4
   2921e:	d1ef      	bne.n	29200 <event_handler+0x34>
		LOG_DBG("NRF_CLOUD_EVT_READY");
   29220:	2304      	movs	r3, #4
   29222:	f04f 0000 	mov.w	r0, #0
   29226:	f363 0007 	bfi	r0, r3, #0, #8
   2922a:	f362 108f 	bfi	r0, r2, #6, #10
   2922e:	4951      	ldr	r1, [pc, #324]	; (29374 <event_handler+0x1a8>)
   29230:	4a4f      	ldr	r2, [pc, #316]	; (29370 <event_handler+0x1a4>)
   29232:	f013 fa26 	bl	3c682 <log_string_sync>
		evt.type = CLOUD_EVT_READY;
   29236:	2302      	movs	r3, #2
   29238:	e039      	b.n	292ae <event_handler+0xe2>
	switch (nrf_cloud_evt->type) {
   2923a:	2b08      	cmp	r3, #8
   2923c:	d061      	beq.n	29302 <event_handler+0x136>
   2923e:	d818      	bhi.n	29272 <event_handler+0xa6>
   29240:	2b06      	cmp	r3, #6
   29242:	d06b      	beq.n	2931c <event_handler+0x150>
   29244:	2b07      	cmp	r3, #7
   29246:	d1db      	bne.n	29200 <event_handler+0x34>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_DATA_ACK");
   29248:	2304      	movs	r3, #4
   2924a:	f04f 0000 	mov.w	r0, #0
   2924e:	f363 0007 	bfi	r0, r3, #0, #8
   29252:	f362 108f 	bfi	r0, r2, #6, #10
   29256:	4948      	ldr	r1, [pc, #288]	; (29378 <event_handler+0x1ac>)
   29258:	4a45      	ldr	r2, [pc, #276]	; (29370 <event_handler+0x1a4>)
   2925a:	f013 fa12 	bl	3c682 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_SENT;
   2925e:	2304      	movs	r3, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   29260:	68ea      	ldr	r2, [r5, #12]
		evt.type = CLOUD_EVT_DATA_SENT;
   29262:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   29266:	eb0d 0103 	add.w	r1, sp, r3
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2926a:	6820      	ldr	r0, [r4, #0]
   2926c:	f015 f9ff 	bl	3e66e <cloud_notify_event>
		break;
   29270:	e045      	b.n	292fe <event_handler+0x132>
	switch (nrf_cloud_evt->type) {
   29272:	2b09      	cmp	r3, #9
   29274:	d067      	beq.n	29346 <event_handler+0x17a>
   29276:	2bff      	cmp	r3, #255	; 0xff
   29278:	d1c2      	bne.n	29200 <event_handler+0x34>
		LOG_DBG("NRF_CLOUD_EVT_ERROR: %d", nrf_cloud_evt->status);
   2927a:	2304      	movs	r3, #4
   2927c:	f04f 0000 	mov.w	r0, #0
   29280:	f363 0007 	bfi	r0, r3, #0, #8
   29284:	f362 108f 	bfi	r0, r2, #6, #10
   29288:	6873      	ldr	r3, [r6, #4]
   2928a:	4a39      	ldr	r2, [pc, #228]	; (29370 <event_handler+0x1a4>)
   2928c:	493b      	ldr	r1, [pc, #236]	; (2937c <event_handler+0x1b0>)
   2928e:	f013 f9f8 	bl	3c682 <log_string_sync>
		evt.type = CLOUD_EVT_ERROR;
   29292:	2303      	movs	r3, #3
   29294:	e00b      	b.n	292ae <event_handler+0xe2>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_CONNECTED");
   29296:	2304      	movs	r3, #4
   29298:	f04f 0000 	mov.w	r0, #0
   2929c:	f363 0007 	bfi	r0, r3, #0, #8
   292a0:	f362 108f 	bfi	r0, r2, #6, #10
   292a4:	4936      	ldr	r1, [pc, #216]	; (29380 <event_handler+0x1b4>)
   292a6:	4a32      	ldr	r2, [pc, #200]	; (29370 <event_handler+0x1a4>)
   292a8:	f013 f9eb 	bl	3c682 <log_string_sync>
		evt.type = CLOUD_EVT_CONNECTED;
   292ac:	2300      	movs	r3, #0
		evt.type = CLOUD_EVT_FOTA_DONE;
   292ae:	f88d 3004 	strb.w	r3, [sp, #4]
   292b2:	e045      	b.n	29340 <event_handler+0x174>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATION_REQUEST");
   292b4:	2304      	movs	r3, #4
   292b6:	f04f 0000 	mov.w	r0, #0
   292ba:	f363 0007 	bfi	r0, r3, #0, #8
   292be:	f362 108f 	bfi	r0, r2, #6, #10
   292c2:	4930      	ldr	r1, [pc, #192]	; (29384 <event_handler+0x1b8>)
   292c4:	4a2a      	ldr	r2, [pc, #168]	; (29370 <event_handler+0x1a4>)
   292c6:	f013 f9dc 	bl	3c682 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_REQUEST;
   292ca:	2306      	movs	r3, #6
   292cc:	e7ef      	b.n	292ae <event_handler+0xe2>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATED");
   292ce:	2304      	movs	r3, #4
   292d0:	f04f 0000 	mov.w	r0, #0
   292d4:	f363 0007 	bfi	r0, r3, #0, #8
   292d8:	f362 108f 	bfi	r0, r2, #6, #10
   292dc:	492a      	ldr	r1, [pc, #168]	; (29388 <event_handler+0x1bc>)
   292de:	4a24      	ldr	r2, [pc, #144]	; (29370 <event_handler+0x1a4>)
   292e0:	f013 f9cf 	bl	3c682 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_DONE;
   292e4:	2307      	movs	r3, #7
   292e6:	e7e2      	b.n	292ae <event_handler+0xe2>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_ATTACHED");
   292e8:	f04f 0000 	mov.w	r0, #0
   292ec:	2304      	movs	r3, #4
   292ee:	f363 0007 	bfi	r0, r3, #0, #8
   292f2:	f362 108f 	bfi	r0, r2, #6, #10
   292f6:	4925      	ldr	r1, [pc, #148]	; (2938c <event_handler+0x1c0>)
   292f8:	4a1d      	ldr	r2, [pc, #116]	; (29370 <event_handler+0x1a4>)
   292fa:	f013 f9c2 	bl	3c682 <log_string_sync>
}
   292fe:	b008      	add	sp, #32
   29300:	bd70      	pop	{r4, r5, r6, pc}
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED");
   29302:	2304      	movs	r3, #4
   29304:	f04f 0000 	mov.w	r0, #0
   29308:	f363 0007 	bfi	r0, r3, #0, #8
   2930c:	f362 108f 	bfi	r0, r2, #6, #10
   29310:	491f      	ldr	r1, [pc, #124]	; (29390 <event_handler+0x1c4>)
   29312:	4a17      	ldr	r2, [pc, #92]	; (29370 <event_handler+0x1a4>)
   29314:	f013 f9b5 	bl	3c682 <log_string_sync>
		evt.type = CLOUD_EVT_DISCONNECTED;
   29318:	2301      	movs	r3, #1
   2931a:	e7c8      	b.n	292ae <event_handler+0xe2>
		LOG_DBG("NRF_CLOUD_EVT_RX_DATA");
   2931c:	2304      	movs	r3, #4
   2931e:	f04f 0000 	mov.w	r0, #0
   29322:	f363 0007 	bfi	r0, r3, #0, #8
   29326:	f362 108f 	bfi	r0, r2, #6, #10
   2932a:	491a      	ldr	r1, [pc, #104]	; (29394 <event_handler+0x1c8>)
   2932c:	4a10      	ldr	r2, [pc, #64]	; (29370 <event_handler+0x1a4>)
   2932e:	f013 f9a8 	bl	3c682 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_RECEIVED;
   29332:	2305      	movs	r3, #5
   29334:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.msg.buf = (char *)nrf_cloud_evt->data.ptr;
   29338:	68f3      	ldr	r3, [r6, #12]
   2933a:	9302      	str	r3, [sp, #8]
		evt.data.msg.len = nrf_cloud_evt->data.len;
   2933c:	68b3      	ldr	r3, [r6, #8]
   2933e:	9303      	str	r3, [sp, #12]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   29340:	68ea      	ldr	r2, [r5, #12]
   29342:	a901      	add	r1, sp, #4
   29344:	e791      	b.n	2926a <event_handler+0x9e>
		LOG_DBG("NRF_CLOUD_EVT_FOTA_DONE");
   29346:	2304      	movs	r3, #4
   29348:	f04f 0000 	mov.w	r0, #0
   2934c:	f363 0007 	bfi	r0, r3, #0, #8
   29350:	f362 108f 	bfi	r0, r2, #6, #10
   29354:	4910      	ldr	r1, [pc, #64]	; (29398 <event_handler+0x1cc>)
   29356:	4a06      	ldr	r2, [pc, #24]	; (29370 <event_handler+0x1a4>)
   29358:	f013 f993 	bl	3c682 <log_string_sync>
		evt.type = CLOUD_EVT_FOTA_DONE;
   2935c:	2308      	movs	r3, #8
   2935e:	e7a6      	b.n	292ae <event_handler+0xe2>
   29360:	20023d8c 	.word	0x20023d8c
   29364:	000403a4 	.word	0x000403a4
   29368:	000402cc 	.word	0x000402cc
   2936c:	000442ab 	.word	0x000442ab
   29370:	00044126 	.word	0x00044126
   29374:	000441d4 	.word	0x000441d4
   29378:	0004420e 	.word	0x0004420e
   2937c:	00044259 	.word	0x00044259
   29380:	00044161 	.word	0x00044161
   29384:	00044187 	.word	0x00044187
   29388:	000441b2 	.word	0x000441b2
   2938c:	000441ec 	.word	0x000441ec
   29390:	00044230 	.word	0x00044230
   29394:	00044275 	.word	0x00044275
   29398:	0004428f 	.word	0x0004428f

0002939c <send>:
	return nrf_cloud_disconnect();
}

static int send(const struct cloud_backend *const backend,
		const struct cloud_msg *const msg)
{
   2939c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err = 0;

	if (msg->endpoint.len != 0) {
   2939e:	694c      	ldr	r4, [r1, #20]
   293a0:	2c00      	cmp	r4, #0
   293a2:	d156      	bne.n	29452 <send+0xb6>
		/* Unsupported case where topic is not the default. */
		return -ENOTSUP;
	}

	switch (msg->endpoint.type) {
   293a4:	898b      	ldrh	r3, [r1, #12]
   293a6:	b18b      	cbz	r3, 293cc <send+0x30>
   293a8:	2b01      	cmp	r3, #1
   293aa:	d034      	beq.n	29416 <send+0x7a>
			return err;
		}
		break;
	}
	default:
		LOG_DBG("Unknown cloud endpoint type: %d", msg->endpoint.type);
   293ac:	2204      	movs	r2, #4
   293ae:	f04f 0000 	mov.w	r0, #0
   293b2:	4929      	ldr	r1, [pc, #164]	; (29458 <send+0xbc>)
   293b4:	f362 0007 	bfi	r0, r2, #0, #8
   293b8:	4a28      	ldr	r2, [pc, #160]	; (2945c <send+0xc0>)
   293ba:	1a52      	subs	r2, r2, r1
   293bc:	08d2      	lsrs	r2, r2, #3
   293be:	f362 108f 	bfi	r0, r2, #6, #10
   293c2:	4927      	ldr	r1, [pc, #156]	; (29460 <send+0xc4>)
   293c4:	4a27      	ldr	r2, [pc, #156]	; (29464 <send+0xc8>)
   293c6:	f013 f95c 	bl	3c682 <log_string_sync>
		break;
	}

	if (err) {
   293ca:	e00a      	b.n	293e2 <send+0x46>
		const struct nct_dc_data buf = {
   293cc:	9302      	str	r3, [sp, #8]
   293ce:	684b      	ldr	r3, [r1, #4]
   293d0:	9300      	str	r3, [sp, #0]
   293d2:	680b      	ldr	r3, [r1, #0]
   293d4:	9301      	str	r3, [sp, #4]
		if (msg->qos == CLOUD_QOS_AT_MOST_ONCE) {
   293d6:	7a0b      	ldrb	r3, [r1, #8]
   293d8:	b933      	cbnz	r3, 293e8 <send+0x4c>
			err = nct_dc_stream(&buf);
   293da:	4668      	mov	r0, sp
   293dc:	f015 fa2f 	bl	3e83e <nct_dc_stream>
			err = nct_dc_send(&buf);
   293e0:	4604      	mov	r4, r0
		return err;
	}

	return 0;
}
   293e2:	4620      	mov	r0, r4
   293e4:	b004      	add	sp, #16
   293e6:	bd10      	pop	{r4, pc}
		} else if (msg->qos == CLOUD_QOS_AT_LEAST_ONCE) {
   293e8:	2b01      	cmp	r3, #1
   293ea:	d103      	bne.n	293f4 <send+0x58>
			err = nct_dc_send(&buf);
   293ec:	4668      	mov	r0, sp
   293ee:	f015 fa23 	bl	3e838 <nct_dc_send>
   293f2:	e7f5      	b.n	293e0 <send+0x44>
			LOG_ERR("Unsupported QoS setting.");
   293f4:	2301      	movs	r3, #1
   293f6:	f04f 0000 	mov.w	r0, #0
   293fa:	4a17      	ldr	r2, [pc, #92]	; (29458 <send+0xbc>)
   293fc:	f363 0007 	bfi	r0, r3, #0, #8
   29400:	4b16      	ldr	r3, [pc, #88]	; (2945c <send+0xc0>)
   29402:	4919      	ldr	r1, [pc, #100]	; (29468 <send+0xcc>)
   29404:	1a9b      	subs	r3, r3, r2
   29406:	08db      	lsrs	r3, r3, #3
   29408:	f363 108f 	bfi	r0, r3, #6, #10
   2940c:	f013 f939 	bl	3c682 <log_string_sync>
			return err;
   29410:	f06f 0415 	mvn.w	r4, #21
   29414:	e7e5      	b.n	293e2 <send+0x46>
		struct nct_cc_data shadow_data = {
   29416:	684a      	ldr	r2, [r1, #4]
		err = nct_cc_send(&shadow_data);
   29418:	4668      	mov	r0, sp
		struct nct_cc_data shadow_data = {
   2941a:	9200      	str	r2, [sp, #0]
   2941c:	680a      	ldr	r2, [r1, #0]
   2941e:	e9cd 4402 	strd	r4, r4, [sp, #8]
   29422:	9201      	str	r2, [sp, #4]
   29424:	f88d 300c 	strb.w	r3, [sp, #12]
		err = nct_cc_send(&shadow_data);
   29428:	f001 fac2 	bl	2a9b0 <nct_cc_send>
		if (err) {
   2942c:	4604      	mov	r4, r0
   2942e:	2800      	cmp	r0, #0
   29430:	d0d7      	beq.n	293e2 <send+0x46>
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   29432:	2301      	movs	r3, #1
   29434:	f04f 0000 	mov.w	r0, #0
   29438:	4a07      	ldr	r2, [pc, #28]	; (29458 <send+0xbc>)
   2943a:	f363 0007 	bfi	r0, r3, #0, #8
   2943e:	4b07      	ldr	r3, [pc, #28]	; (2945c <send+0xc0>)
   29440:	490a      	ldr	r1, [pc, #40]	; (2946c <send+0xd0>)
   29442:	1a9b      	subs	r3, r3, r2
   29444:	08db      	lsrs	r3, r3, #3
   29446:	f363 108f 	bfi	r0, r3, #6, #10
   2944a:	4622      	mov	r2, r4
   2944c:	f013 f919 	bl	3c682 <log_string_sync>
			return err;
   29450:	e7c7      	b.n	293e2 <send+0x46>
		return -ENOTSUP;
   29452:	f06f 0485 	mvn.w	r4, #133	; 0x85
   29456:	e7c4      	b.n	293e2 <send+0x46>
   29458:	000402cc 	.word	0x000402cc
   2945c:	000403a4 	.word	0x000403a4
   29460:	0004430c 	.word	0x0004430c
   29464:	0004413c 	.word	0x0004413c
   29468:	000442d4 	.word	0x000442d4
   2946c:	000442ed 	.word	0x000442ed

00029470 <nfsm_get_current_state>:
	return m_current_state;
   29470:	4b01      	ldr	r3, [pc, #4]	; (29478 <nfsm_get_current_state+0x8>)
   29472:	7818      	ldrb	r0, [r3, #0]
}
   29474:	4770      	bx	lr
   29476:	bf00      	nop
   29478:	2002af59 	.word	0x2002af59

0002947c <nfsm_set_current_state_and_notify>:
{
   2947c:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("state: %d", state);
   2947e:	2304      	movs	r3, #4
{
   29480:	4605      	mov	r5, r0
	LOG_DBG("state: %d", state);
   29482:	f04f 0000 	mov.w	r0, #0
   29486:	4a0c      	ldr	r2, [pc, #48]	; (294b8 <nfsm_set_current_state_and_notify+0x3c>)
   29488:	f363 0007 	bfi	r0, r3, #0, #8
   2948c:	4b0b      	ldr	r3, [pc, #44]	; (294bc <nfsm_set_current_state_and_notify+0x40>)
{
   2948e:	460c      	mov	r4, r1
   29490:	1a9b      	subs	r3, r3, r2
   29492:	08db      	lsrs	r3, r3, #3
	LOG_DBG("state: %d", state);
   29494:	f363 108f 	bfi	r0, r3, #6, #10
   29498:	4a09      	ldr	r2, [pc, #36]	; (294c0 <nfsm_set_current_state_and_notify+0x44>)
   2949a:	462b      	mov	r3, r5
   2949c:	4909      	ldr	r1, [pc, #36]	; (294c4 <nfsm_set_current_state_and_notify+0x48>)
   2949e:	f013 f8f0 	bl	3c682 <log_string_sync>
	m_current_state = state;
   294a2:	4b09      	ldr	r3, [pc, #36]	; (294c8 <nfsm_set_current_state_and_notify+0x4c>)
   294a4:	701d      	strb	r5, [r3, #0]
	if ((m_event_handler != NULL) && (evt != NULL)) {
   294a6:	4b09      	ldr	r3, [pc, #36]	; (294cc <nfsm_set_current_state_and_notify+0x50>)
   294a8:	681b      	ldr	r3, [r3, #0]
   294aa:	b123      	cbz	r3, 294b6 <nfsm_set_current_state_and_notify+0x3a>
   294ac:	b11c      	cbz	r4, 294b6 <nfsm_set_current_state_and_notify+0x3a>
		m_event_handler(evt);
   294ae:	4620      	mov	r0, r4
}
   294b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		m_event_handler(evt);
   294b4:	4718      	bx	r3
}
   294b6:	bd70      	pop	{r4, r5, r6, pc}
   294b8:	000402cc 	.word	0x000402cc
   294bc:	000403a4 	.word	0x000403a4
   294c0:	00044104 	.word	0x00044104
   294c4:	000442c6 	.word	0x000442c6
   294c8:	2002af59 	.word	0x2002af59
   294cc:	20023d88 	.word	0x20023d88

000294d0 <nrf_cloud_init>:
{
   294d0:	b538      	push	{r3, r4, r5, lr}
	if (m_current_state != STATE_IDLE) {
   294d2:	4c0d      	ldr	r4, [pc, #52]	; (29508 <nrf_cloud_init+0x38>)
{
   294d4:	4605      	mov	r5, r0
	if (m_current_state != STATE_IDLE) {
   294d6:	7823      	ldrb	r3, [r4, #0]
   294d8:	b983      	cbnz	r3, 294fc <nrf_cloud_init+0x2c>
	if (param->event_handler == NULL) {
   294da:	6803      	ldr	r3, [r0, #0]
   294dc:	b18b      	cbz	r3, 29502 <nrf_cloud_init+0x32>
	err = nfsm_init();
   294de:	f015 f9a9 	bl	3e834 <nfsm_init>
	if (err) {
   294e2:	b950      	cbnz	r0, 294fa <nrf_cloud_init+0x2a>
	err = nrf_codec_init();
   294e4:	f015 f91e 	bl	3e724 <nrf_codec_init>
	if (err) {
   294e8:	b938      	cbnz	r0, 294fa <nrf_cloud_init+0x2a>
	err = nct_init();
   294ea:	f001 f82b 	bl	2a544 <nct_init>
	if (err) {
   294ee:	b920      	cbnz	r0, 294fa <nrf_cloud_init+0x2a>
	m_event_handler = param->event_handler;
   294f0:	4b06      	ldr	r3, [pc, #24]	; (2950c <nrf_cloud_init+0x3c>)
   294f2:	682a      	ldr	r2, [r5, #0]
   294f4:	601a      	str	r2, [r3, #0]
	m_current_state = STATE_INITIALIZED;
   294f6:	2301      	movs	r3, #1
   294f8:	7023      	strb	r3, [r4, #0]
}
   294fa:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
   294fc:	f06f 000c 	mvn.w	r0, #12
   29500:	e7fb      	b.n	294fa <nrf_cloud_init+0x2a>
		return -EINVAL;
   29502:	f06f 0015 	mvn.w	r0, #21
   29506:	e7f8      	b.n	294fa <nrf_cloud_init+0x2a>
   29508:	2002af59 	.word	0x2002af59
   2950c:	20023d88 	.word	0x20023d88

00029510 <init>:
{
   29510:	b507      	push	{r0, r1, r2, lr}
	const struct nrf_cloud_init_param params = {
   29512:	4b06      	ldr	r3, [pc, #24]	; (2952c <init+0x1c>)
   29514:	9301      	str	r3, [sp, #4]
	backend->config->handler = handler;
   29516:	6843      	ldr	r3, [r0, #4]
   29518:	6059      	str	r1, [r3, #4]
	nrf_cloud_backend = (struct cloud_backend *)backend;
   2951a:	4b05      	ldr	r3, [pc, #20]	; (29530 <init+0x20>)
   2951c:	6018      	str	r0, [r3, #0]
	return nrf_cloud_init(&params);
   2951e:	a801      	add	r0, sp, #4
   29520:	f7ff ffd6 	bl	294d0 <nrf_cloud_init>
}
   29524:	b003      	add	sp, #12
   29526:	f85d fb04 	ldr.w	pc, [sp], #4
   2952a:	bf00      	nop
   2952c:	000291cd 	.word	0x000291cd
   29530:	20023d8c 	.word	0x20023d8c

00029534 <nrf_cloud_connect>:
	if (NOT_VALID_STATE(STATE_INITIALIZED)) {
   29534:	4b04      	ldr	r3, [pc, #16]	; (29548 <nrf_cloud_connect+0x14>)
   29536:	781b      	ldrb	r3, [r3, #0]
   29538:	2b01      	cmp	r3, #1
   2953a:	d801      	bhi.n	29540 <nrf_cloud_connect+0xc>
	return nct_connect();
   2953c:	f001 b956 	b.w	2a7ec <nct_connect>
}
   29540:	f06f 000c 	mvn.w	r0, #12
   29544:	4770      	bx	lr
   29546:	bf00      	nop
   29548:	2002af59 	.word	0x2002af59

0002954c <connect>:
{
   2954c:	b538      	push	{r3, r4, r5, lr}
   2954e:	4605      	mov	r5, r0
	err = nrf_cloud_connect(NULL);
   29550:	2000      	movs	r0, #0
   29552:	f7ff ffef 	bl	29534 <nrf_cloud_connect>
	switch (err) {
   29556:	f110 0f0d 	cmn.w	r0, #13
	err = nrf_cloud_connect(NULL);
   2955a:	4604      	mov	r4, r0
	switch (err) {
   2955c:	d038      	beq.n	295d0 <connect+0x84>
   2955e:	dc22      	bgt.n	295a6 <connect+0x5a>
   29560:	f110 0f6f 	cmn.w	r0, #111	; 0x6f
   29564:	d037      	beq.n	295d6 <connect+0x8a>
   29566:	dc15      	bgt.n	29594 <connect+0x48>
   29568:	f110 0f74 	cmn.w	r0, #116	; 0x74
   2956c:	d036      	beq.n	295dc <connect+0x90>
		LOG_DBG("nrf_cloud_connect failed %d", err);
   2956e:	2304      	movs	r3, #4
   29570:	f04f 0000 	mov.w	r0, #0
   29574:	4a1f      	ldr	r2, [pc, #124]	; (295f4 <connect+0xa8>)
   29576:	f363 0007 	bfi	r0, r3, #0, #8
   2957a:	4b1f      	ldr	r3, [pc, #124]	; (295f8 <connect+0xac>)
   2957c:	491f      	ldr	r1, [pc, #124]	; (295fc <connect+0xb0>)
   2957e:	1a9b      	subs	r3, r3, r2
   29580:	08db      	lsrs	r3, r3, #3
   29582:	f363 108f 	bfi	r0, r3, #6, #10
   29586:	4a1e      	ldr	r2, [pc, #120]	; (29600 <connect+0xb4>)
   29588:	4623      	mov	r3, r4
   2958a:	f013 f87a 	bl	3c682 <log_string_sync>
		return CLOUD_CONNECT_RES_ERR_MISC;
   2958e:	f06f 0404 	mvn.w	r4, #4
   29592:	e01b      	b.n	295cc <connect+0x80>
	switch (err) {
   29594:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   29598:	d023      	beq.n	295e2 <connect+0x96>
   2959a:	f110 0f16 	cmn.w	r0, #22
   2959e:	d1e6      	bne.n	2956e <connect+0x22>
		return CLOUD_CONNECT_RES_ERR_PRV_KEY;
   295a0:	f06f 0406 	mvn.w	r4, #6
   295a4:	e012      	b.n	295cc <connect+0x80>
	switch (err) {
   295a6:	f110 0f0a 	cmn.w	r0, #10
   295aa:	d01d      	beq.n	295e8 <connect+0x9c>
   295ac:	dc05      	bgt.n	295ba <connect+0x6e>
   295ae:	f110 0f0c 	cmn.w	r0, #12
   295b2:	d1dc      	bne.n	2956e <connect+0x22>
		return CLOUD_CONNECT_RES_ERR_NO_MEM;
   295b4:	f06f 0405 	mvn.w	r4, #5
   295b8:	e008      	b.n	295cc <connect+0x80>
	switch (err) {
   295ba:	f110 0f08 	cmn.w	r0, #8
   295be:	d016      	beq.n	295ee <connect+0xa2>
   295c0:	2800      	cmp	r0, #0
   295c2:	d1d4      	bne.n	2956e <connect+0x22>
		backend->config->socket = nct_socket_get();
   295c4:	686d      	ldr	r5, [r5, #4]
   295c6:	f001 fb67 	bl	2ac98 <nct_socket_get>
   295ca:	60a8      	str	r0, [r5, #8]
}
   295cc:	4620      	mov	r0, r4
   295ce:	bd38      	pop	{r3, r4, r5, pc}
		return CLOUD_CONNECT_RES_ERR_NOT_INITD;
   295d0:	f04f 34ff 	mov.w	r4, #4294967295
   295d4:	e7fa      	b.n	295cc <connect+0x80>
		return CLOUD_CONNECT_RES_ERR_CERT_MISC;
   295d6:	f06f 0408 	mvn.w	r4, #8
   295da:	e7f7      	b.n	295cc <connect+0x80>
		return CLOUD_CONNECT_RES_ERR_TIMEOUT_NO_DATA;
   295dc:	f06f 0409 	mvn.w	r4, #9
   295e0:	e7f4      	b.n	295cc <connect+0x80>
		return CLOUD_CONNECT_RES_ERR_CERT;
   295e2:	f06f 0407 	mvn.w	r4, #7
   295e6:	e7f1      	b.n	295cc <connect+0x80>
		return CLOUD_CONNECT_RES_ERR_NETWORK;
   295e8:	f06f 0402 	mvn.w	r4, #2
   295ec:	e7ee      	b.n	295cc <connect+0x80>
		return CLOUD_CONNECT_RES_ERR_BACKEND;
   295ee:	f06f 0403 	mvn.w	r4, #3
   295f2:	e7eb      	b.n	295cc <connect+0x80>
   295f4:	000402cc 	.word	0x000402cc
   295f8:	000403a4 	.word	0x000403a4
   295fc:	00044141 	.word	0x00044141
   29600:	00044134 	.word	0x00044134

00029604 <nrf_cloud_disconnect>:
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   29604:	4b05      	ldr	r3, [pc, #20]	; (2961c <nrf_cloud_disconnect+0x18>)
   29606:	781a      	ldrb	r2, [r3, #0]
   29608:	2a09      	cmp	r2, #9
   2960a:	d902      	bls.n	29612 <nrf_cloud_disconnect+0xe>
	    NOT_VALID_STATE(STATE_CC_CONNECTED)) {
   2960c:	781b      	ldrb	r3, [r3, #0]
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   2960e:	2b04      	cmp	r3, #4
   29610:	d801      	bhi.n	29616 <nrf_cloud_disconnect+0x12>
	return nct_disconnect();
   29612:	f001 bb0d 	b.w	2ac30 <nct_disconnect>
}
   29616:	f06f 000c 	mvn.w	r0, #12
   2961a:	4770      	bx	lr
   2961c:	2002af59 	.word	0x2002af59

00029620 <nct_input>:
	return nfsm_handle_incoming_event(evt, m_current_state);
   29620:	4b01      	ldr	r3, [pc, #4]	; (29628 <nct_input+0x8>)
   29622:	7819      	ldrb	r1, [r3, #0]
   29624:	f000 bcb8 	b.w	29f98 <nfsm_handle_incoming_event>
   29628:	2002af59 	.word	0x2002af59

0002962c <nct_apply_update>:
	m_event_handler(&evt);
   2962c:	4b01      	ldr	r3, [pc, #4]	; (29634 <nct_apply_update+0x8>)
   2962e:	4802      	ldr	r0, [pc, #8]	; (29638 <nct_apply_update+0xc>)
   29630:	681b      	ldr	r3, [r3, #0]
   29632:	4718      	bx	r3
   29634:	20023d88 	.word	0x20023d88
   29638:	00040a24 	.word	0x00040a24

0002963c <nrf_cloud_decode_desired_obj>:
	return !strncmp(s1, s2, strlen(s2));
}

static void nrf_cloud_decode_desired_obj(cJSON *const root_obj,
					 cJSON **desired_obj)
{
   2963c:	b538      	push	{r3, r4, r5, lr}
   2963e:	460c      	mov	r4, r1
	cJSON *state_obj;

	if ((root_obj != NULL) && (desired_obj != NULL)) {
   29640:	4605      	mov	r5, r0
   29642:	b140      	cbz	r0, 29656 <nrf_cloud_decode_desired_obj+0x1a>
		/* On initial pairing, a shadow delta event is sent */
		/* which does not include the "desired" JSON key, */
		/* "state" is used instead */
		state_obj = json_object_decode(root_obj, "state");
   29644:	4904      	ldr	r1, [pc, #16]	; (29658 <nrf_cloud_decode_desired_obj+0x1c>)
   29646:	f015 f83a 	bl	3e6be <json_object_decode>
		if (state_obj == NULL) {
   2964a:	b918      	cbnz	r0, 29654 <nrf_cloud_decode_desired_obj+0x18>
			*desired_obj = json_object_decode(root_obj, "desired");
   2964c:	4903      	ldr	r1, [pc, #12]	; (2965c <nrf_cloud_decode_desired_obj+0x20>)
   2964e:	4628      	mov	r0, r5
   29650:	f015 f835 	bl	3e6be <json_object_decode>
		} else {
			*desired_obj = state_obj;
   29654:	6020      	str	r0, [r4, #0]
		}
	}
}
   29656:	bd38      	pop	{r3, r4, r5, pc}
   29658:	00041ea1 	.word	0x00041ea1
   2965c:	000443ad 	.word	0x000443ad

00029660 <nrf_cloud_decode_requested_state>:
	return 0;
}

int nrf_cloud_decode_requested_state(const struct nrf_cloud_data *input,
				     enum nfsm_state *requested_state)
{
   29660:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29662:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   29664:	460e      	mov	r6, r1
   29666:	b949      	cbnz	r1, 2967c <nrf_cloud_decode_requested_state+0x1c>
   29668:	494f      	ldr	r1, [pc, #316]	; (297a8 <nrf_cloud_decode_requested_state+0x148>)
   2966a:	4850      	ldr	r0, [pc, #320]	; (297ac <nrf_cloud_decode_requested_state+0x14c>)
   2966c:	23cb      	movs	r3, #203	; 0xcb
   2966e:	4a50      	ldr	r2, [pc, #320]	; (297b0 <nrf_cloud_decode_requested_state+0x150>)
   29670:	f012 ffb0 	bl	3c5d4 <printk>
   29674:	21cb      	movs	r1, #203	; 0xcb
   29676:	484e      	ldr	r0, [pc, #312]	; (297b0 <nrf_cloud_decode_requested_state+0x150>)
   29678:	f012 fff2 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2967c:	b94c      	cbnz	r4, 29692 <nrf_cloud_decode_requested_state+0x32>
   2967e:	494d      	ldr	r1, [pc, #308]	; (297b4 <nrf_cloud_decode_requested_state+0x154>)
   29680:	484a      	ldr	r0, [pc, #296]	; (297ac <nrf_cloud_decode_requested_state+0x14c>)
   29682:	23cc      	movs	r3, #204	; 0xcc
   29684:	4a4a      	ldr	r2, [pc, #296]	; (297b0 <nrf_cloud_decode_requested_state+0x150>)
   29686:	f012 ffa5 	bl	3c5d4 <printk>
   2968a:	21cc      	movs	r1, #204	; 0xcc
   2968c:	4848      	ldr	r0, [pc, #288]	; (297b0 <nrf_cloud_decode_requested_state+0x150>)
   2968e:	f012 ffe7 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   29692:	6863      	ldr	r3, [r4, #4]
   29694:	b94b      	cbnz	r3, 296aa <nrf_cloud_decode_requested_state+0x4a>
   29696:	4948      	ldr	r1, [pc, #288]	; (297b8 <nrf_cloud_decode_requested_state+0x158>)
   29698:	4844      	ldr	r0, [pc, #272]	; (297ac <nrf_cloud_decode_requested_state+0x14c>)
   2969a:	23cd      	movs	r3, #205	; 0xcd
   2969c:	4a44      	ldr	r2, [pc, #272]	; (297b0 <nrf_cloud_decode_requested_state+0x150>)
   2969e:	f012 ff99 	bl	3c5d4 <printk>
   296a2:	21cd      	movs	r1, #205	; 0xcd
   296a4:	4842      	ldr	r0, [pc, #264]	; (297b0 <nrf_cloud_decode_requested_state+0x150>)
   296a6:	f012 ffdb 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   296aa:	6823      	ldr	r3, [r4, #0]
   296ac:	b94b      	cbnz	r3, 296c2 <nrf_cloud_decode_requested_state+0x62>
   296ae:	4943      	ldr	r1, [pc, #268]	; (297bc <nrf_cloud_decode_requested_state+0x15c>)
   296b0:	483e      	ldr	r0, [pc, #248]	; (297ac <nrf_cloud_decode_requested_state+0x14c>)
   296b2:	23ce      	movs	r3, #206	; 0xce
   296b4:	4a3e      	ldr	r2, [pc, #248]	; (297b0 <nrf_cloud_decode_requested_state+0x150>)
   296b6:	f012 ff8d 	bl	3c5d4 <printk>
   296ba:	21ce      	movs	r1, #206	; 0xce
   296bc:	483c      	ldr	r0, [pc, #240]	; (297b0 <nrf_cloud_decode_requested_state+0x150>)
   296be:	f012 ffcf 	bl	3c660 <assert_post_action>
	cJSON *desired_obj;
	cJSON *pairing_obj;
	cJSON *pairing_state_obj;
	cJSON *topic_prefix_obj;

	root_obj = cJSON_Parse(input->ptr);
   296c2:	6860      	ldr	r0, [r4, #4]
   296c4:	f014 f975 	bl	3d9b2 <cJSON_Parse>
	if (root_obj == NULL) {
   296c8:	4605      	mov	r5, r0
   296ca:	b9a8      	cbnz	r0, 296f8 <nrf_cloud_decode_requested_state+0x98>
		LOG_ERR("cJSON_Parse failed: %s",
   296cc:	2301      	movs	r3, #1
   296ce:	f04f 0500 	mov.w	r5, #0
   296d2:	4a3b      	ldr	r2, [pc, #236]	; (297c0 <nrf_cloud_decode_requested_state+0x160>)
   296d4:	f363 0507 	bfi	r5, r3, #0, #8
   296d8:	4b3a      	ldr	r3, [pc, #232]	; (297c4 <nrf_cloud_decode_requested_state+0x164>)
   296da:	6860      	ldr	r0, [r4, #4]
   296dc:	1a9b      	subs	r3, r3, r2
   296de:	08db      	lsrs	r3, r3, #3
   296e0:	f363 158f 	bfi	r5, r3, #6, #10
   296e4:	f012 ffdf 	bl	3c6a6 <log_strdup>
   296e8:	4937      	ldr	r1, [pc, #220]	; (297c8 <nrf_cloud_decode_requested_state+0x168>)
   296ea:	4602      	mov	r2, r0
   296ec:	4628      	mov	r0, r5
   296ee:	f012 ffc8 	bl	3c682 <log_string_sync>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
		if (cJSON_HasObjectItem(desired_obj, "config") == false) {
			LOG_DBG("No valid state found!");
		}
		cJSON_Delete(root_obj);
		return -ENOENT;
   296f2:	f06f 0401 	mvn.w	r4, #1
   296f6:	e00d      	b.n	29714 <nrf_cloud_decode_requested_state+0xb4>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   296f8:	a901      	add	r1, sp, #4
   296fa:	f7ff ff9f 	bl	2963c <nrf_cloud_decode_desired_obj>
		json_object_decode(desired_obj, "nrfcloud_mqtt_topic_prefix");
   296fe:	4933      	ldr	r1, [pc, #204]	; (297cc <nrf_cloud_decode_requested_state+0x16c>)
   29700:	9801      	ldr	r0, [sp, #4]
   29702:	f014 ffdc 	bl	3e6be <json_object_decode>
	if (topic_prefix_obj != NULL) {
   29706:	b140      	cbz	r0, 2971a <nrf_cloud_decode_requested_state+0xba>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   29708:	2307      	movs	r3, #7
		cJSON_Delete(root_obj);
   2970a:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2970c:	7033      	strb	r3, [r6, #0]
		cJSON_Delete(root_obj);
   2970e:	f7fd f865 	bl	267dc <cJSON_Delete>
		return 0;
   29712:	2400      	movs	r4, #0
	}

	cJSON_Delete(root_obj);

	return 0;
}
   29714:	4620      	mov	r0, r4
   29716:	b002      	add	sp, #8
   29718:	bd70      	pop	{r4, r5, r6, pc}
	pairing_obj = json_object_decode(desired_obj, "pairing");
   2971a:	492d      	ldr	r1, [pc, #180]	; (297d0 <nrf_cloud_decode_requested_state+0x170>)
   2971c:	9801      	ldr	r0, [sp, #4]
   2971e:	f014 ffce 	bl	3e6be <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, "state");
   29722:	492c      	ldr	r1, [pc, #176]	; (297d4 <nrf_cloud_decode_requested_state+0x174>)
   29724:	f014 ffcb 	bl	3e6be <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   29728:	b110      	cbz	r0, 29730 <nrf_cloud_decode_requested_state+0xd0>
   2972a:	68c3      	ldr	r3, [r0, #12]
   2972c:	2b10      	cmp	r3, #16
   2972e:	d015      	beq.n	2975c <nrf_cloud_decode_requested_state+0xfc>
		if (cJSON_HasObjectItem(desired_obj, "config") == false) {
   29730:	4929      	ldr	r1, [pc, #164]	; (297d8 <nrf_cloud_decode_requested_state+0x178>)
   29732:	9801      	ldr	r0, [sp, #4]
   29734:	f014 f952 	bl	3d9dc <cJSON_HasObjectItem>
   29738:	b960      	cbnz	r0, 29754 <nrf_cloud_decode_requested_state+0xf4>
			LOG_DBG("No valid state found!");
   2973a:	2304      	movs	r3, #4
   2973c:	4a20      	ldr	r2, [pc, #128]	; (297c0 <nrf_cloud_decode_requested_state+0x160>)
   2973e:	f363 0007 	bfi	r0, r3, #0, #8
   29742:	4b20      	ldr	r3, [pc, #128]	; (297c4 <nrf_cloud_decode_requested_state+0x164>)
   29744:	4925      	ldr	r1, [pc, #148]	; (297dc <nrf_cloud_decode_requested_state+0x17c>)
   29746:	1a9b      	subs	r3, r3, r2
   29748:	08db      	lsrs	r3, r3, #3
   2974a:	f363 108f 	bfi	r0, r3, #6, #10
   2974e:	4a24      	ldr	r2, [pc, #144]	; (297e0 <nrf_cloud_decode_requested_state+0x180>)
   29750:	f012 ff97 	bl	3c682 <log_string_sync>
		cJSON_Delete(root_obj);
   29754:	4628      	mov	r0, r5
   29756:	f7fd f841 	bl	267dc <cJSON_Delete>
   2975a:	e7ca      	b.n	296f2 <nrf_cloud_decode_requested_state+0x92>
	const char *state_str = pairing_state_obj->valuestring;
   2975c:	6904      	ldr	r4, [r0, #16]
	return !strncmp(s1, s2, strlen(s2));
   2975e:	4821      	ldr	r0, [pc, #132]	; (297e4 <nrf_cloud_decode_requested_state+0x184>)
   29760:	f7f3 fce0 	bl	1d124 <strlen>
   29764:	491f      	ldr	r1, [pc, #124]	; (297e4 <nrf_cloud_decode_requested_state+0x184>)
   29766:	4602      	mov	r2, r0
   29768:	4620      	mov	r0, r4
   2976a:	f015 fca7 	bl	3f0bc <strncmp>
	if (compare(state_str, DUA_PIN_STR)) {
   2976e:	4604      	mov	r4, r0
   29770:	b928      	cbnz	r0, 2977e <nrf_cloud_decode_requested_state+0x11e>
		(*requested_state) = STATE_UA_PIN_WAIT;
   29772:	2306      	movs	r3, #6
	cJSON_Delete(root_obj);
   29774:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_WAIT;
   29776:	7033      	strb	r3, [r6, #0]
	cJSON_Delete(root_obj);
   29778:	f7fd f830 	bl	267dc <cJSON_Delete>
	return 0;
   2977c:	e7ca      	b.n	29714 <nrf_cloud_decode_requested_state+0xb4>
		LOG_ERR("Deprecated state. Delete device from nrfCloud and update device with JITP certificates.");
   2977e:	2301      	movs	r3, #1
   29780:	f04f 0000 	mov.w	r0, #0
   29784:	4a0e      	ldr	r2, [pc, #56]	; (297c0 <nrf_cloud_decode_requested_state+0x160>)
   29786:	f363 0007 	bfi	r0, r3, #0, #8
   2978a:	4b0e      	ldr	r3, [pc, #56]	; (297c4 <nrf_cloud_decode_requested_state+0x164>)
   2978c:	4916      	ldr	r1, [pc, #88]	; (297e8 <nrf_cloud_decode_requested_state+0x188>)
   2978e:	1a9b      	subs	r3, r3, r2
   29790:	08db      	lsrs	r3, r3, #3
   29792:	f363 108f 	bfi	r0, r3, #6, #10
   29796:	f012 ff74 	bl	3c682 <log_string_sync>
		cJSON_Delete(root_obj);
   2979a:	4628      	mov	r0, r5
   2979c:	f7fd f81e 	bl	267dc <cJSON_Delete>
		return -ENOTSUP;
   297a0:	f06f 0485 	mvn.w	r4, #133	; 0x85
   297a4:	e7b6      	b.n	29714 <nrf_cloud_decode_requested_state+0xb4>
   297a6:	bf00      	nop
   297a8:	000443b5 	.word	0x000443b5
   297ac:	00041757 	.word	0x00041757
   297b0:	000444ce 	.word	0x000444ce
   297b4:	000443d4 	.word	0x000443d4
   297b8:	000443e9 	.word	0x000443e9
   297bc:	00044403 	.word	0x00044403
   297c0:	000402cc 	.word	0x000402cc
   297c4:	000403ac 	.word	0x000403ac
   297c8:	00044413 	.word	0x00044413
   297cc:	0004442a 	.word	0x0004442a
   297d0:	00044445 	.word	0x00044445
   297d4:	00041ea1 	.word	0x00041ea1
   297d8:	00041dac 	.word	0x00041dac
   297dc:	0004444d 	.word	0x0004444d
   297e0:	00044356 	.word	0x00044356
   297e4:	00044467 	.word	0x00044467
   297e8:	00044476 	.word	0x00044476

000297ec <nrf_cloud_encode_config_response>:

int nrf_cloud_encode_config_response(struct nrf_cloud_data const *const input,
				     struct nrf_cloud_data *const output,
				     bool *const has_config)
{
   297ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   297f0:	4605      	mov	r5, r0
   297f2:	4690      	mov	r8, r2
	__ASSERT_NO_MSG(output != NULL);
   297f4:	460c      	mov	r4, r1
   297f6:	b959      	cbnz	r1, 29810 <nrf_cloud_encode_config_response+0x24>
   297f8:	494e      	ldr	r1, [pc, #312]	; (29934 <nrf_cloud_encode_config_response+0x148>)
   297fa:	484f      	ldr	r0, [pc, #316]	; (29938 <nrf_cloud_encode_config_response+0x14c>)
   297fc:	f240 1305 	movw	r3, #261	; 0x105
   29800:	4a4e      	ldr	r2, [pc, #312]	; (2993c <nrf_cloud_encode_config_response+0x150>)
   29802:	f012 fee7 	bl	3c5d4 <printk>
   29806:	f240 1105 	movw	r1, #261	; 0x105
   2980a:	484c      	ldr	r0, [pc, #304]	; (2993c <nrf_cloud_encode_config_response+0x150>)
   2980c:	f012 ff28 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   29810:	2d00      	cmp	r5, #0
   29812:	d164      	bne.n	298de <nrf_cloud_encode_config_response+0xf2>
   29814:	494a      	ldr	r1, [pc, #296]	; (29940 <nrf_cloud_encode_config_response+0x154>)
   29816:	4848      	ldr	r0, [pc, #288]	; (29938 <nrf_cloud_encode_config_response+0x14c>)
   29818:	f44f 7383 	mov.w	r3, #262	; 0x106
   2981c:	4a47      	ldr	r2, [pc, #284]	; (2993c <nrf_cloud_encode_config_response+0x150>)
   2981e:	f012 fed9 	bl	3c5d4 <printk>
   29822:	f44f 7183 	mov.w	r1, #262	; 0x106
   29826:	4845      	ldr	r0, [pc, #276]	; (2993c <nrf_cloud_encode_config_response+0x150>)
   29828:	f012 ff1a 	bl	3c660 <assert_post_action>
	cJSON *state_obj = NULL;
	cJSON *config_obj = NULL;
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;

	if (input_obj == NULL) {
		return -ESRCH; /* invalid input or no JSON parsed */
   2982c:	f06f 0002 	mvn.w	r0, #2
   29830:	e07d      	b.n	2992e <nrf_cloud_encode_config_response+0x142>
		output->len = 0;
		return 0;
	}

	/* Prepare JSON response for the delta */
	root_obj = cJSON_CreateObject();
   29832:	f7fd f897 	bl	26964 <cJSON_CreateObject>
   29836:	4605      	mov	r5, r0
	desired_obj = cJSON_CreateObject();
   29838:	f7fd f894 	bl	26964 <cJSON_CreateObject>
   2983c:	4680      	mov	r8, r0
	null_obj = cJSON_CreateNull();
   2983e:	f7fd f861 	bl	26904 <cJSON_CreateNull>
   29842:	4681      	mov	r9, r0
	reported_obj = cJSON_CreateObject();
   29844:	f7fd f88e 	bl	26964 <cJSON_CreateObject>
   29848:	4682      	mov	sl, r0

	if ((root_obj == NULL) || (desired_obj == NULL) || (null_obj == NULL) ||
   2984a:	b135      	cbz	r5, 2985a <nrf_cloud_encode_config_response+0x6e>
   2984c:	f1b8 0f00 	cmp.w	r8, #0
   29850:	d003      	beq.n	2985a <nrf_cloud_encode_config_response+0x6e>
   29852:	f1b9 0f00 	cmp.w	r9, #0
   29856:	d000      	beq.n	2985a <nrf_cloud_encode_config_response+0x6e>
   29858:	b9a0      	cbnz	r0, 29884 <nrf_cloud_encode_config_response+0x98>
		(reported_obj == NULL)) {
		cJSON_Delete(root_obj);
   2985a:	4628      	mov	r0, r5
   2985c:	f7fc ffbe 	bl	267dc <cJSON_Delete>
		cJSON_Delete(desired_obj);
   29860:	4640      	mov	r0, r8
   29862:	f7fc ffbb 	bl	267dc <cJSON_Delete>
		cJSON_Delete(null_obj);
   29866:	4648      	mov	r0, r9
   29868:	f7fc ffb8 	bl	267dc <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2986c:	4650      	mov	r0, sl
   2986e:	f7fc ffb5 	bl	267dc <cJSON_Delete>
		cJSON_Delete(config_obj);
   29872:	4638      	mov	r0, r7
   29874:	f7fc ffb2 	bl	267dc <cJSON_Delete>
		cJSON_Delete(state_obj);
   29878:	4630      	mov	r0, r6
   2987a:	f7fc ffaf 	bl	267dc <cJSON_Delete>
	(void)json_add_obj(state_obj, "state", root_obj);
	buffer = cJSON_PrintUnformatted(state_obj);
	cJSON_Delete(state_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   2987e:	f06f 000b 	mvn.w	r0, #11
   29882:	e054      	b.n	2992e <nrf_cloud_encode_config_response+0x142>
	cJSON_AddItemToObject(parent, str, item);
   29884:	463a      	mov	r2, r7
   29886:	492f      	ldr	r1, [pc, #188]	; (29944 <nrf_cloud_encode_config_response+0x158>)
   29888:	f014 f8b1 	bl	3d9ee <cJSON_AddItemToObject>
   2988c:	4628      	mov	r0, r5
   2988e:	4652      	mov	r2, sl
   29890:	492d      	ldr	r1, [pc, #180]	; (29948 <nrf_cloud_encode_config_response+0x15c>)
   29892:	f014 f8ac 	bl	3d9ee <cJSON_AddItemToObject>
   29896:	464a      	mov	r2, r9
   29898:	492a      	ldr	r1, [pc, #168]	; (29944 <nrf_cloud_encode_config_response+0x158>)
   2989a:	4640      	mov	r0, r8
   2989c:	f014 f8a7 	bl	3d9ee <cJSON_AddItemToObject>
   298a0:	4642      	mov	r2, r8
   298a2:	492a      	ldr	r1, [pc, #168]	; (2994c <nrf_cloud_encode_config_response+0x160>)
   298a4:	4628      	mov	r0, r5
   298a6:	f014 f8a2 	bl	3d9ee <cJSON_AddItemToObject>
	cJSON_Delete(state_obj);
   298aa:	4630      	mov	r0, r6
   298ac:	f7fc ff96 	bl	267dc <cJSON_Delete>
	state_obj = cJSON_CreateObject();
   298b0:	f7fd f858 	bl	26964 <cJSON_CreateObject>
   298b4:	4606      	mov	r6, r0
	cJSON_AddItemToObject(parent, str, item);
   298b6:	462a      	mov	r2, r5
   298b8:	4925      	ldr	r1, [pc, #148]	; (29950 <nrf_cloud_encode_config_response+0x164>)
   298ba:	f014 f898 	bl	3d9ee <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(state_obj);
   298be:	4630      	mov	r0, r6
   298c0:	f014 f87b 	bl	3d9ba <cJSON_PrintUnformatted>
   298c4:	4605      	mov	r5, r0
	cJSON_Delete(state_obj);
   298c6:	4630      	mov	r0, r6
   298c8:	f7fc ff88 	bl	267dc <cJSON_Delete>
	if (buffer == NULL) {
   298cc:	2d00      	cmp	r5, #0
   298ce:	d0d6      	beq.n	2987e <nrf_cloud_encode_config_response+0x92>
	}

	output->ptr = buffer;
   298d0:	6065      	str	r5, [r4, #4]
	output->len = strlen(buffer);
   298d2:	4628      	mov	r0, r5
   298d4:	f7f3 fc26 	bl	1d124 <strlen>
   298d8:	6020      	str	r0, [r4, #0]

	return 0;
   298da:	2000      	movs	r0, #0
   298dc:	e027      	b.n	2992e <nrf_cloud_encode_config_response+0x142>
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;
   298de:	6868      	ldr	r0, [r5, #4]
   298e0:	f014 f867 	bl	3d9b2 <cJSON_Parse>
	if (input_obj == NULL) {
   298e4:	4605      	mov	r5, r0
   298e6:	2800      	cmp	r0, #0
   298e8:	d0a0      	beq.n	2982c <nrf_cloud_encode_config_response+0x40>
	state_obj = cJSON_DetachItemFromObject(input_obj, "state");
   298ea:	4919      	ldr	r1, [pc, #100]	; (29950 <nrf_cloud_encode_config_response+0x164>)
   298ec:	f014 f896 	bl	3da1c <cJSON_DetachItemFromObject>
	config_obj = cJSON_DetachItemFromObject(
   298f0:	1e06      	subs	r6, r0, #0
   298f2:	bf14      	ite	ne
   298f4:	4630      	movne	r0, r6
   298f6:	4628      	moveq	r0, r5
   298f8:	4912      	ldr	r1, [pc, #72]	; (29944 <nrf_cloud_encode_config_response+0x158>)
   298fa:	f014 f88f 	bl	3da1c <cJSON_DetachItemFromObject>
   298fe:	4607      	mov	r7, r0
	cJSON_Delete(input_obj);
   29900:	4628      	mov	r0, r5
   29902:	f7fc ff6b 	bl	267dc <cJSON_Delete>
	if (has_config) {
   29906:	f1b8 0f00 	cmp.w	r8, #0
   2990a:	d004      	beq.n	29916 <nrf_cloud_encode_config_response+0x12a>
		*has_config = (config_obj != NULL);
   2990c:	1c3b      	adds	r3, r7, #0
   2990e:	bf18      	it	ne
   29910:	2301      	movne	r3, #1
   29912:	f888 3000 	strb.w	r3, [r8]
	if ((state_obj == NULL) || (config_obj == NULL)) {
   29916:	b10e      	cbz	r6, 2991c <nrf_cloud_encode_config_response+0x130>
   29918:	2f00      	cmp	r7, #0
   2991a:	d18a      	bne.n	29832 <nrf_cloud_encode_config_response+0x46>
		cJSON_Delete(state_obj);
   2991c:	4630      	mov	r0, r6
   2991e:	f7fc ff5d 	bl	267dc <cJSON_Delete>
		cJSON_Delete(config_obj);
   29922:	4638      	mov	r0, r7
   29924:	f7fc ff5a 	bl	267dc <cJSON_Delete>
		output->ptr = NULL;
   29928:	2000      	movs	r0, #0
		output->len = 0;
   2992a:	e9c4 0000 	strd	r0, r0, [r4]
}
   2992e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29932:	bf00      	nop
   29934:	00041e82 	.word	0x00041e82
   29938:	00041757 	.word	0x00041757
   2993c:	000444ce 	.word	0x000444ce
   29940:	000443d4 	.word	0x000443d4
   29944:	00041dac 	.word	0x00041dac
   29948:	00041e98 	.word	0x00041e98
   2994c:	000443ad 	.word	0x000443ad
   29950:	00041ea1 	.word	0x00041ea1

00029954 <nrf_cloud_encode_state>:

int nrf_cloud_encode_state(u32_t reported_state, struct nrf_cloud_data *output)
{
   29954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29958:	4604      	mov	r4, r0
   2995a:	b086      	sub	sp, #24
	int ret;

	__ASSERT_NO_MSG(output != NULL);
   2995c:	4689      	mov	r9, r1
   2995e:	b959      	cbnz	r1, 29978 <nrf_cloud_encode_state+0x24>
   29960:	495a      	ldr	r1, [pc, #360]	; (29acc <nrf_cloud_encode_state+0x178>)
   29962:	485b      	ldr	r0, [pc, #364]	; (29ad0 <nrf_cloud_encode_state+0x17c>)
   29964:	f240 1357 	movw	r3, #343	; 0x157
   29968:	4a5a      	ldr	r2, [pc, #360]	; (29ad4 <nrf_cloud_encode_state+0x180>)
   2996a:	f012 fe33 	bl	3c5d4 <printk>
   2996e:	f240 1157 	movw	r1, #343	; 0x157
   29972:	4858      	ldr	r0, [pc, #352]	; (29ad4 <nrf_cloud_encode_state+0x180>)
   29974:	f012 fe74 	bl	3c660 <assert_post_action>

	cJSON *root_obj = cJSON_CreateObject();
   29978:	f7fc fff4 	bl	26964 <cJSON_CreateObject>
   2997c:	4607      	mov	r7, r0
	cJSON *state_obj = cJSON_CreateObject();
   2997e:	f7fc fff1 	bl	26964 <cJSON_CreateObject>
   29982:	4680      	mov	r8, r0
	cJSON *reported_obj = cJSON_CreateObject();
   29984:	f7fc ffee 	bl	26964 <cJSON_CreateObject>
   29988:	4606      	mov	r6, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   2998a:	f7fc ffeb 	bl	26964 <cJSON_CreateObject>
   2998e:	4605      	mov	r5, r0

	if ((root_obj == NULL) || (state_obj == NULL) ||
   29990:	b127      	cbz	r7, 2999c <nrf_cloud_encode_state+0x48>
   29992:	f1b8 0f00 	cmp.w	r8, #0
   29996:	d001      	beq.n	2999c <nrf_cloud_encode_state+0x48>
   29998:	b106      	cbz	r6, 2999c <nrf_cloud_encode_state+0x48>
	    (reported_obj == NULL) || (pairing_obj == NULL)) {
   2999a:	b970      	cbnz	r0, 299ba <nrf_cloud_encode_state+0x66>

		/* Report pairing topics. */
		cJSON *topics_obj = cJSON_CreateObject();

		if (topics_obj == NULL) {
			cJSON_Delete(root_obj);
   2999c:	4638      	mov	r0, r7
	ret += json_add_obj(reported_obj, "pairing", pairing_obj);
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {
		cJSON_Delete(root_obj);
   2999e:	f7fc ff1d 	bl	267dc <cJSON_Delete>
		cJSON_Delete(state_obj);
   299a2:	4640      	mov	r0, r8
   299a4:	f7fc ff1a 	bl	267dc <cJSON_Delete>
		cJSON_Delete(reported_obj);
   299a8:	4630      	mov	r0, r6
   299aa:	f7fc ff17 	bl	267dc <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   299ae:	4628      	mov	r0, r5
   299b0:	f7fc ff14 	bl	267dc <cJSON_Delete>

	buffer = cJSON_PrintUnformatted(root_obj);
	cJSON_Delete(root_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   299b4:	f06f 040b 	mvn.w	r4, #11
   299b8:	e011      	b.n	299de <nrf_cloud_encode_state+0x8a>
	switch (reported_state) {
   299ba:	2c06      	cmp	r4, #6
   299bc:	d013      	beq.n	299e6 <nrf_cloud_encode_state+0x92>
   299be:	2c07      	cmp	r4, #7
   299c0:	d04c      	beq.n	29a5c <nrf_cloud_encode_state+0x108>
		cJSON_Delete(root_obj);
   299c2:	4638      	mov	r0, r7
   299c4:	f7fc ff0a 	bl	267dc <cJSON_Delete>
		cJSON_Delete(state_obj);
   299c8:	4640      	mov	r0, r8
   299ca:	f7fc ff07 	bl	267dc <cJSON_Delete>
		cJSON_Delete(reported_obj);
   299ce:	4630      	mov	r0, r6
   299d0:	f7fc ff04 	bl	267dc <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   299d4:	4628      	mov	r0, r5
   299d6:	f7fc ff01 	bl	267dc <cJSON_Delete>
		return -ENOTSUP;
   299da:	f06f 0485 	mvn.w	r4, #133	; 0x85

	output->ptr = buffer;
	output->len = strlen(buffer);

	return 0;
}
   299de:	4620      	mov	r0, r4
   299e0:	b006      	add	sp, #24
   299e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   299e6:	4a3c      	ldr	r2, [pc, #240]	; (29ad8 <nrf_cloud_encode_state+0x184>)
   299e8:	493c      	ldr	r1, [pc, #240]	; (29adc <nrf_cloud_encode_state+0x188>)
   299ea:	f014 fe57 	bl	3e69c <json_add_str>
		ret += json_add_null(pairing_obj, "topics");
   299ee:	493c      	ldr	r1, [pc, #240]	; (29ae0 <nrf_cloud_encode_state+0x18c>)
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   299f0:	4604      	mov	r4, r0
		ret += json_add_null(pairing_obj, "topics");
   299f2:	4628      	mov	r0, r5
   299f4:	f014 fe67 	bl	3e6c6 <json_add_null>
		ret += json_add_null(pairing_obj, "config");
   299f8:	493a      	ldr	r1, [pc, #232]	; (29ae4 <nrf_cloud_encode_state+0x190>)
		ret += json_add_null(pairing_obj, "topics");
   299fa:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   299fc:	4628      	mov	r0, r5
   299fe:	f014 fe62 	bl	3e6c6 <json_add_null>
		ret += json_add_null(reported_obj, "stage");
   29a02:	4939      	ldr	r1, [pc, #228]	; (29ae8 <nrf_cloud_encode_state+0x194>)
		ret += json_add_null(pairing_obj, "config");
   29a04:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "stage");
   29a06:	4630      	mov	r0, r6
   29a08:	f014 fe5d 	bl	3e6c6 <json_add_null>
		ret += json_add_null(reported_obj,
   29a0c:	4937      	ldr	r1, [pc, #220]	; (29aec <nrf_cloud_encode_state+0x198>)
		ret += json_add_null(reported_obj, "stage");
   29a0e:	4404      	add	r4, r0
		ret += json_add_null(reported_obj,
   29a10:	4630      	mov	r0, r6
   29a12:	f014 fe58 	bl	3e6c6 <json_add_null>
   29a16:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   29a18:	462a      	mov	r2, r5
   29a1a:	4935      	ldr	r1, [pc, #212]	; (29af0 <nrf_cloud_encode_state+0x19c>)
   29a1c:	4630      	mov	r0, r6
   29a1e:	f013 ffe6 	bl	3d9ee <cJSON_AddItemToObject>
   29a22:	4632      	mov	r2, r6
   29a24:	4933      	ldr	r1, [pc, #204]	; (29af4 <nrf_cloud_encode_state+0x1a0>)
   29a26:	4640      	mov	r0, r8
   29a28:	f013 ffe1 	bl	3d9ee <cJSON_AddItemToObject>
   29a2c:	4638      	mov	r0, r7
   29a2e:	4642      	mov	r2, r8
   29a30:	492a      	ldr	r1, [pc, #168]	; (29adc <nrf_cloud_encode_state+0x188>)
   29a32:	f013 ffdc 	bl	3d9ee <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   29a36:	4638      	mov	r0, r7
	if (ret != 0) {
   29a38:	2c00      	cmp	r4, #0
   29a3a:	d1b0      	bne.n	2999e <nrf_cloud_encode_state+0x4a>
	buffer = cJSON_PrintUnformatted(root_obj);
   29a3c:	f013 ffbd 	bl	3d9ba <cJSON_PrintUnformatted>
   29a40:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   29a42:	4638      	mov	r0, r7
   29a44:	f7fc feca 	bl	267dc <cJSON_Delete>
	if (buffer == NULL) {
   29a48:	2d00      	cmp	r5, #0
   29a4a:	d0b3      	beq.n	299b4 <nrf_cloud_encode_state+0x60>
	output->ptr = buffer;
   29a4c:	f8c9 5004 	str.w	r5, [r9, #4]
	output->len = strlen(buffer);
   29a50:	4628      	mov	r0, r5
   29a52:	f7f3 fb67 	bl	1d124 <strlen>
   29a56:	f8c9 0000 	str.w	r0, [r9]
	return 0;
   29a5a:	e7c0      	b.n	299de <nrf_cloud_encode_state+0x8a>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, &m_endp);
   29a5c:	aa04      	add	r2, sp, #16
   29a5e:	4669      	mov	r1, sp
   29a60:	a802      	add	r0, sp, #8
   29a62:	f001 f857 	bl	2ab14 <nct_dc_endpoint_get>
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   29a66:	9a05      	ldr	r2, [sp, #20]
   29a68:	4920      	ldr	r1, [pc, #128]	; (29aec <nrf_cloud_encode_state+0x198>)
   29a6a:	4630      	mov	r0, r6
   29a6c:	f014 fe16 	bl	3e69c <json_add_str>
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   29a70:	4a21      	ldr	r2, [pc, #132]	; (29af8 <nrf_cloud_encode_state+0x1a4>)
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   29a72:	4604      	mov	r4, r0
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   29a74:	4919      	ldr	r1, [pc, #100]	; (29adc <nrf_cloud_encode_state+0x188>)
   29a76:	4628      	mov	r0, r5
   29a78:	f014 fe10 	bl	3e69c <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   29a7c:	4919      	ldr	r1, [pc, #100]	; (29ae4 <nrf_cloud_encode_state+0x190>)
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   29a7e:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   29a80:	4628      	mov	r0, r5
   29a82:	f014 fe20 	bl	3e6c6 <json_add_null>
		ret += json_add_null(reported_obj, "pairingStatus");
   29a86:	491d      	ldr	r1, [pc, #116]	; (29afc <nrf_cloud_encode_state+0x1a8>)
		ret += json_add_null(pairing_obj, "config");
   29a88:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "pairingStatus");
   29a8a:	4630      	mov	r0, r6
   29a8c:	f014 fe1b 	bl	3e6c6 <json_add_null>
   29a90:	4404      	add	r4, r0
		cJSON *topics_obj = cJSON_CreateObject();
   29a92:	f7fc ff67 	bl	26964 <cJSON_CreateObject>
		if (topics_obj == NULL) {
   29a96:	4682      	mov	sl, r0
   29a98:	2800      	cmp	r0, #0
   29a9a:	f43f af7f 	beq.w	2999c <nrf_cloud_encode_state+0x48>
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   29a9e:	9a03      	ldr	r2, [sp, #12]
   29aa0:	4917      	ldr	r1, [pc, #92]	; (29b00 <nrf_cloud_encode_state+0x1ac>)
   29aa2:	f014 fdfb 	bl	3e69c <json_add_str>
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   29aa6:	9a01      	ldr	r2, [sp, #4]
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   29aa8:	4404      	add	r4, r0
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   29aaa:	4916      	ldr	r1, [pc, #88]	; (29b04 <nrf_cloud_encode_state+0x1b0>)
   29aac:	4650      	mov	r0, sl
   29aae:	f014 fdf5 	bl	3e69c <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   29ab2:	4652      	mov	r2, sl
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   29ab4:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   29ab6:	490a      	ldr	r1, [pc, #40]	; (29ae0 <nrf_cloud_encode_state+0x18c>)
   29ab8:	4628      	mov	r0, r5
   29aba:	f013 ff98 	bl	3d9ee <cJSON_AddItemToObject>
		if (ret != 0) {
   29abe:	2c00      	cmp	r4, #0
   29ac0:	d0aa      	beq.n	29a18 <nrf_cloud_encode_state+0xc4>
			cJSON_Delete(topics_obj);
   29ac2:	4650      	mov	r0, sl
   29ac4:	f7fc fe8a 	bl	267dc <cJSON_Delete>
		break;
   29ac8:	e7a6      	b.n	29a18 <nrf_cloud_encode_state+0xc4>
   29aca:	bf00      	nop
   29acc:	00041e82 	.word	0x00041e82
   29ad0:	00041757 	.word	0x00041757
   29ad4:	000444ce 	.word	0x000444ce
   29ad8:	00044467 	.word	0x00044467
   29adc:	00041ea1 	.word	0x00041ea1
   29ae0:	00044561 	.word	0x00044561
   29ae4:	00041dac 	.word	0x00041dac
   29ae8:	00044568 	.word	0x00044568
   29aec:	0004442a 	.word	0x0004442a
   29af0:	00044445 	.word	0x00044445
   29af4:	00041e98 	.word	0x00041e98
   29af8:	0004456e 	.word	0x0004456e
   29afc:	00044575 	.word	0x00044575
   29b00:	00044583 	.word	0x00044583
   29b04:	00044587 	.word	0x00044587

00029b08 <nrf_cloud_decode_data_endpoint>:
 */
int nrf_cloud_decode_data_endpoint(const struct nrf_cloud_data *input,
				   struct nrf_cloud_data *tx_endpoint,
				   struct nrf_cloud_data *rx_endpoint,
				   struct nrf_cloud_data *m_endpoint)
{
   29b08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   29b0c:	4689      	mov	r9, r1
   29b0e:	4690      	mov	r8, r2
   29b10:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(input != NULL);
   29b12:	4604      	mov	r4, r0
   29b14:	b958      	cbnz	r0, 29b2e <nrf_cloud_decode_data_endpoint+0x26>
   29b16:	4950      	ldr	r1, [pc, #320]	; (29c58 <nrf_cloud_decode_data_endpoint+0x150>)
   29b18:	4850      	ldr	r0, [pc, #320]	; (29c5c <nrf_cloud_decode_data_endpoint+0x154>)
   29b1a:	f240 13c9 	movw	r3, #457	; 0x1c9
   29b1e:	4a50      	ldr	r2, [pc, #320]	; (29c60 <nrf_cloud_decode_data_endpoint+0x158>)
   29b20:	f012 fd58 	bl	3c5d4 <printk>
   29b24:	f240 11c9 	movw	r1, #457	; 0x1c9
   29b28:	484d      	ldr	r0, [pc, #308]	; (29c60 <nrf_cloud_decode_data_endpoint+0x158>)
   29b2a:	f012 fd99 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   29b2e:	6863      	ldr	r3, [r4, #4]
   29b30:	b95b      	cbnz	r3, 29b4a <nrf_cloud_decode_data_endpoint+0x42>
   29b32:	494c      	ldr	r1, [pc, #304]	; (29c64 <nrf_cloud_decode_data_endpoint+0x15c>)
   29b34:	4849      	ldr	r0, [pc, #292]	; (29c5c <nrf_cloud_decode_data_endpoint+0x154>)
   29b36:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
   29b3a:	4a49      	ldr	r2, [pc, #292]	; (29c60 <nrf_cloud_decode_data_endpoint+0x158>)
   29b3c:	f012 fd4a 	bl	3c5d4 <printk>
   29b40:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
   29b44:	4846      	ldr	r0, [pc, #280]	; (29c60 <nrf_cloud_decode_data_endpoint+0x158>)
   29b46:	f012 fd8b 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   29b4a:	6823      	ldr	r3, [r4, #0]
   29b4c:	b95b      	cbnz	r3, 29b66 <nrf_cloud_decode_data_endpoint+0x5e>
   29b4e:	4946      	ldr	r1, [pc, #280]	; (29c68 <nrf_cloud_decode_data_endpoint+0x160>)
   29b50:	4842      	ldr	r0, [pc, #264]	; (29c5c <nrf_cloud_decode_data_endpoint+0x154>)
   29b52:	f240 13cb 	movw	r3, #459	; 0x1cb
   29b56:	4a42      	ldr	r2, [pc, #264]	; (29c60 <nrf_cloud_decode_data_endpoint+0x158>)
   29b58:	f012 fd3c 	bl	3c5d4 <printk>
   29b5c:	f240 11cb 	movw	r1, #459	; 0x1cb
   29b60:	483f      	ldr	r0, [pc, #252]	; (29c60 <nrf_cloud_decode_data_endpoint+0x158>)
   29b62:	f012 fd7d 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   29b66:	f1b9 0f00 	cmp.w	r9, #0
   29b6a:	d10b      	bne.n	29b84 <nrf_cloud_decode_data_endpoint+0x7c>
   29b6c:	493f      	ldr	r1, [pc, #252]	; (29c6c <nrf_cloud_decode_data_endpoint+0x164>)
   29b6e:	483b      	ldr	r0, [pc, #236]	; (29c5c <nrf_cloud_decode_data_endpoint+0x154>)
   29b70:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   29b74:	4a3a      	ldr	r2, [pc, #232]	; (29c60 <nrf_cloud_decode_data_endpoint+0x158>)
   29b76:	f012 fd2d 	bl	3c5d4 <printk>
   29b7a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   29b7e:	4838      	ldr	r0, [pc, #224]	; (29c60 <nrf_cloud_decode_data_endpoint+0x158>)
   29b80:	f012 fd6e 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   29b84:	f1b8 0f00 	cmp.w	r8, #0
   29b88:	d10b      	bne.n	29ba2 <nrf_cloud_decode_data_endpoint+0x9a>
   29b8a:	4939      	ldr	r1, [pc, #228]	; (29c70 <nrf_cloud_decode_data_endpoint+0x168>)
   29b8c:	4833      	ldr	r0, [pc, #204]	; (29c5c <nrf_cloud_decode_data_endpoint+0x154>)
   29b8e:	f240 13cd 	movw	r3, #461	; 0x1cd
   29b92:	4a33      	ldr	r2, [pc, #204]	; (29c60 <nrf_cloud_decode_data_endpoint+0x158>)
   29b94:	f012 fd1e 	bl	3c5d4 <printk>
   29b98:	f240 11cd 	movw	r1, #461	; 0x1cd
   29b9c:	4830      	ldr	r0, [pc, #192]	; (29c60 <nrf_cloud_decode_data_endpoint+0x158>)
   29b9e:	f012 fd5f 	bl	3c660 <assert_post_action>

	int err;
	cJSON *root_obj;
	cJSON *m_endpoint_obj = NULL;
	cJSON *desired_obj = NULL;
   29ba2:	2300      	movs	r3, #0

	root_obj = cJSON_Parse(input->ptr);
   29ba4:	6860      	ldr	r0, [r4, #4]
	cJSON *desired_obj = NULL;
   29ba6:	9301      	str	r3, [sp, #4]
	root_obj = cJSON_Parse(input->ptr);
   29ba8:	f013 ff03 	bl	3d9b2 <cJSON_Parse>
	if (root_obj == NULL) {
   29bac:	4605      	mov	r5, r0
   29bae:	b308      	cbz	r0, 29bf4 <nrf_cloud_decode_data_endpoint+0xec>
		return -ENOENT;
	}

	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   29bb0:	a901      	add	r1, sp, #4
   29bb2:	f7ff fd43 	bl	2963c <nrf_cloud_decode_desired_obj>

	if (m_endpoint != NULL) {
   29bb6:	b307      	cbz	r7, 29bfa <nrf_cloud_decode_data_endpoint+0xf2>
		m_endpoint_obj = json_object_decode(
   29bb8:	492e      	ldr	r1, [pc, #184]	; (29c74 <nrf_cloud_decode_data_endpoint+0x16c>)
   29bba:	9801      	ldr	r0, [sp, #4]
   29bbc:	f014 fd7f 	bl	3e6be <json_object_decode>
   29bc0:	4604      	mov	r4, r0
			desired_obj, "nrfcloud_mqtt_topic_prefix");
	}

	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   29bc2:	492d      	ldr	r1, [pc, #180]	; (29c78 <nrf_cloud_decode_data_endpoint+0x170>)
   29bc4:	9801      	ldr	r0, [sp, #4]
   29bc6:	f014 fd7a 	bl	3e6be <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   29bca:	492c      	ldr	r1, [pc, #176]	; (29c7c <nrf_cloud_decode_data_endpoint+0x174>)
	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   29bcc:	4606      	mov	r6, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   29bce:	f014 fd76 	bl	3e6be <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   29bd2:	492b      	ldr	r1, [pc, #172]	; (29c80 <nrf_cloud_decode_data_endpoint+0x178>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   29bd4:	4682      	mov	sl, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   29bd6:	4630      	mov	r0, r6
   29bd8:	f014 fd71 	bl	3e6be <json_object_decode>
   29bdc:	4606      	mov	r6, r0

	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   29bde:	f1ba 0f00 	cmp.w	sl, #0
   29be2:	d004      	beq.n	29bee <nrf_cloud_decode_data_endpoint+0xe6>
   29be4:	b118      	cbz	r0, 29bee <nrf_cloud_decode_data_endpoint+0xe6>
   29be6:	f8da 300c 	ldr.w	r3, [sl, #12]
   29bea:	2b10      	cmp	r3, #16
   29bec:	d007      	beq.n	29bfe <nrf_cloud_decode_data_endpoint+0xf6>
	}

	const char *state_str = pairing_state_obj->valuestring;

	if (!compare(state_str, PAIRED_STR)) {
		cJSON_Delete(root_obj);
   29bee:	4628      	mov	r0, r5
   29bf0:	f7fc fdf4 	bl	267dc <cJSON_Delete>
		return -ENOENT;
   29bf4:	f06f 0401 	mvn.w	r4, #1
   29bf8:	e017      	b.n	29c2a <nrf_cloud_decode_data_endpoint+0x122>
	cJSON *m_endpoint_obj = NULL;
   29bfa:	463c      	mov	r4, r7
   29bfc:	e7e1      	b.n	29bc2 <nrf_cloud_decode_data_endpoint+0xba>
	return !strncmp(s1, s2, strlen(s2));
   29bfe:	4821      	ldr	r0, [pc, #132]	; (29c84 <nrf_cloud_decode_data_endpoint+0x17c>)
	const char *state_str = pairing_state_obj->valuestring;
   29c00:	f8da a010 	ldr.w	sl, [sl, #16]
	return !strncmp(s1, s2, strlen(s2));
   29c04:	f7f3 fa8e 	bl	1d124 <strlen>
   29c08:	491e      	ldr	r1, [pc, #120]	; (29c84 <nrf_cloud_decode_data_endpoint+0x17c>)
   29c0a:	4602      	mov	r2, r0
   29c0c:	4650      	mov	r0, sl
   29c0e:	f015 fa55 	bl	3f0bc <strncmp>
	if (!compare(state_str, PAIRED_STR)) {
   29c12:	2800      	cmp	r0, #0
   29c14:	d1eb      	bne.n	29bee <nrf_cloud_decode_data_endpoint+0xe6>
		return -ENOENT;
	}

	if (m_endpoint_obj != NULL) {
   29c16:	b164      	cbz	r4, 29c32 <nrf_cloud_decode_data_endpoint+0x12a>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   29c18:	4620      	mov	r0, r4
   29c1a:	4639      	mov	r1, r7
   29c1c:	f014 fd63 	bl	3e6e6 <json_decode_and_alloc>
		if (err) {
   29c20:	4604      	mov	r4, r0
   29c22:	b130      	cbz	r0, 29c32 <nrf_cloud_decode_data_endpoint+0x12a>

	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");

	err = json_decode_and_alloc(rx_obj, rx_endpoint);
	if (err) {
		cJSON_Delete(root_obj);
   29c24:	4628      	mov	r0, r5
		return err;
	}

	cJSON_Delete(root_obj);
   29c26:	f7fc fdd9 	bl	267dc <cJSON_Delete>

	return err;
}
   29c2a:	4620      	mov	r0, r4
   29c2c:	b002      	add	sp, #8
   29c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *tx_obj = json_object_decode(topic_obj, "d2c");
   29c32:	4915      	ldr	r1, [pc, #84]	; (29c88 <nrf_cloud_decode_data_endpoint+0x180>)
   29c34:	4630      	mov	r0, r6
   29c36:	f014 fd42 	bl	3e6be <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   29c3a:	4649      	mov	r1, r9
   29c3c:	f014 fd53 	bl	3e6e6 <json_decode_and_alloc>
	if (err) {
   29c40:	4604      	mov	r4, r0
   29c42:	2800      	cmp	r0, #0
   29c44:	d1ee      	bne.n	29c24 <nrf_cloud_decode_data_endpoint+0x11c>
	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");
   29c46:	4911      	ldr	r1, [pc, #68]	; (29c8c <nrf_cloud_decode_data_endpoint+0x184>)
   29c48:	4630      	mov	r0, r6
   29c4a:	f014 fd38 	bl	3e6be <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   29c4e:	4641      	mov	r1, r8
   29c50:	f014 fd49 	bl	3e6e6 <json_decode_and_alloc>
	if (err) {
   29c54:	4604      	mov	r4, r0
   29c56:	e7e5      	b.n	29c24 <nrf_cloud_decode_data_endpoint+0x11c>
   29c58:	000443d4 	.word	0x000443d4
   29c5c:	00041757 	.word	0x00041757
   29c60:	000444ce 	.word	0x000444ce
   29c64:	000443e9 	.word	0x000443e9
   29c68:	00044403 	.word	0x00044403
   29c6c:	00044377 	.word	0x00044377
   29c70:	00044392 	.word	0x00044392
   29c74:	0004442a 	.word	0x0004442a
   29c78:	00044445 	.word	0x00044445
   29c7c:	00041ea1 	.word	0x00041ea1
   29c80:	00044561 	.word	0x00044561
   29c84:	0004456e 	.word	0x0004456e
   29c88:	00044583 	.word	0x00044583
   29c8c:	00044587 	.word	0x00044587

00029c90 <state_ua_pin_wait>:

	return err;
}

static int state_ua_pin_wait(void)
{
   29c90:	b510      	push	{r4, lr}
   29c92:	b088      	sub	sp, #32
	int err;
	struct nct_cc_data msg = {
   29c94:	2210      	movs	r2, #16
   29c96:	2100      	movs	r1, #0
   29c98:	4668      	mov	r0, sp
   29c9a:	f015 f836 	bl	3ed0a <memset>
   29c9e:	2301      	movs	r3, #1
		.opcode = NCT_CC_OPCODE_UPDATE_REQ,
		.id = DEFAULT_REPORT_ID,
	};

	/* Publish report to the cloud on current status. */
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   29ca0:	4669      	mov	r1, sp
   29ca2:	2006      	movs	r0, #6
	struct nct_cc_data msg = {
   29ca4:	9302      	str	r3, [sp, #8]
   29ca6:	f88d 300c 	strb.w	r3, [sp, #12]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   29caa:	f7ff fe53 	bl	29954 <nrf_cloud_encode_state>
	if (err) {
   29cae:	4604      	mov	r4, r0
   29cb0:	b188      	cbz	r0, 29cd6 <state_ua_pin_wait+0x46>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   29cb2:	2301      	movs	r3, #1
   29cb4:	f04f 0000 	mov.w	r0, #0
   29cb8:	4a1b      	ldr	r2, [pc, #108]	; (29d28 <state_ua_pin_wait+0x98>)
   29cba:	f363 0007 	bfi	r0, r3, #0, #8
   29cbe:	4b1b      	ldr	r3, [pc, #108]	; (29d2c <state_ua_pin_wait+0x9c>)
   29cc0:	491b      	ldr	r1, [pc, #108]	; (29d30 <state_ua_pin_wait+0xa0>)
   29cc2:	1a9b      	subs	r3, r3, r2
   29cc4:	08db      	lsrs	r3, r3, #3
   29cc6:	f363 108f 	bfi	r0, r3, #6, #10
   29cca:	4622      	mov	r2, r4
   29ccc:	f012 fcd9 	bl	3c682 <log_string_sync>
	};

	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);

	return 0;
}
   29cd0:	4620      	mov	r0, r4
   29cd2:	b008      	add	sp, #32
   29cd4:	bd10      	pop	{r4, pc}
	err = nct_cc_send(&msg);
   29cd6:	4668      	mov	r0, sp
   29cd8:	f000 fe6a 	bl	2a9b0 <nct_cc_send>
	if (err) {
   29cdc:	4604      	mov	r4, r0
   29cde:	b190      	cbz	r0, 29d06 <state_ua_pin_wait+0x76>
		LOG_ERR("nct_cc_send failed %d", err);
   29ce0:	2301      	movs	r3, #1
   29ce2:	f04f 0000 	mov.w	r0, #0
   29ce6:	4a10      	ldr	r2, [pc, #64]	; (29d28 <state_ua_pin_wait+0x98>)
   29ce8:	f363 0007 	bfi	r0, r3, #0, #8
   29cec:	4b0f      	ldr	r3, [pc, #60]	; (29d2c <state_ua_pin_wait+0x9c>)
   29cee:	4911      	ldr	r1, [pc, #68]	; (29d34 <state_ua_pin_wait+0xa4>)
   29cf0:	1a9b      	subs	r3, r3, r2
   29cf2:	08db      	lsrs	r3, r3, #3
   29cf4:	f363 108f 	bfi	r0, r3, #6, #10
   29cf8:	4622      	mov	r2, r4
   29cfa:	f012 fcc2 	bl	3c682 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   29cfe:	9801      	ldr	r0, [sp, #4]
   29d00:	f014 fe42 	bl	3e988 <k_free>
		return err;
   29d04:	e7e4      	b.n	29cd0 <state_ua_pin_wait+0x40>
	nrf_cloud_free((void *)msg.data.ptr);
   29d06:	9801      	ldr	r0, [sp, #4]
   29d08:	f014 fe3e 	bl	3e988 <k_free>
	struct nrf_cloud_evt evt = {
   29d0c:	2210      	movs	r2, #16
   29d0e:	4621      	mov	r1, r4
   29d10:	eb0d 0002 	add.w	r0, sp, r2
   29d14:	f014 fff9 	bl	3ed0a <memset>
   29d18:	2302      	movs	r3, #2
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   29d1a:	a904      	add	r1, sp, #16
   29d1c:	2006      	movs	r0, #6
	struct nrf_cloud_evt evt = {
   29d1e:	f88d 3010 	strb.w	r3, [sp, #16]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   29d22:	f7ff fbab 	bl	2947c <nfsm_set_current_state_and_notify>
	return 0;
   29d26:	e7d3      	b.n	29cd0 <state_ua_pin_wait+0x40>
   29d28:	000402cc 	.word	0x000402cc
   29d2c:	000403b4 	.word	0x000403b4
   29d30:	000446c7 	.word	0x000446c7
   29d34:	000446e8 	.word	0x000446e8

00029d38 <cc_connection_handler>:

	return 0;
}

static int cc_connection_handler(const struct nct_evt *nct_evt)
{
   29d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   29d3a:	4604      	mov	r4, r0
		.opcode = NCT_CC_OPCODE_GET_REQ,
		.id = CLOUD_STATE_REQ_ID,
	};

	int err;
	const struct nrf_cloud_evt evt = {
   29d3c:	2100      	movs	r1, #0
   29d3e:	2210      	movs	r2, #16
   29d40:	4668      	mov	r0, sp
   29d42:	f014 ffe2 	bl	3ed0a <memset>
   29d46:	23ff      	movs	r3, #255	; 0xff
		.type = NRF_CLOUD_EVT_ERROR,
	};

	if (nct_evt->status != 0) {
   29d48:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   29d4a:	f88d 3000 	strb.w	r3, [sp]
	if (nct_evt->status != 0) {
   29d4e:	b139      	cbz	r1, 29d60 <cc_connection_handler+0x28>
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   29d50:	4669      	mov	r1, sp
   29d52:	200c      	movs	r0, #12
   29d54:	f7ff fb92 	bl	2947c <nfsm_set_current_state_and_notify>
		return 0;
   29d58:	2400      	movs	r4, #0
	}

	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);

	return 0;
}
   29d5a:	4620      	mov	r0, r4
   29d5c:	b004      	add	sp, #16
   29d5e:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   29d60:	2004      	movs	r0, #4
   29d62:	f7ff fb8b 	bl	2947c <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   29d66:	4806      	ldr	r0, [pc, #24]	; (29d80 <cc_connection_handler+0x48>)
   29d68:	f000 fe22 	bl	2a9b0 <nct_cc_send>
	if (err) {
   29d6c:	4604      	mov	r4, r0
   29d6e:	b120      	cbz	r0, 29d7a <cc_connection_handler+0x42>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   29d70:	4669      	mov	r1, sp
   29d72:	2002      	movs	r0, #2
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   29d74:	f7ff fb82 	bl	2947c <nfsm_set_current_state_and_notify>
	return 0;
   29d78:	e7ef      	b.n	29d5a <cc_connection_handler+0x22>
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   29d7a:	4601      	mov	r1, r0
   29d7c:	2005      	movs	r0, #5
   29d7e:	e7f9      	b.n	29d74 <cc_connection_handler+0x3c>
   29d80:	00040b50 	.word	0x00040b50

00029d84 <cc_rx_data_handler>:

	return state_ua_pin_complete();
}

static int cc_rx_data_handler(const struct nct_evt *nct_evt)
{
   29d84:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	enum nfsm_state new_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
	bool config_found = false;
   29d86:	2700      	movs	r7, #0
{
   29d88:	b091      	sub	sp, #68	; 0x44
   29d8a:	4605      	mov	r5, r0
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   29d8c:	6844      	ldr	r4, [r0, #4]
	bool config_found = false;
   29d8e:	f88d 7007 	strb.w	r7, [sp, #7]
	const enum nfsm_state current_state = nfsm_get_current_state();
   29d92:	f7ff fb6d 	bl	29470 <nfsm_get_current_state>
	struct nct_cc_data msg = {
   29d96:	2210      	movs	r2, #16
   29d98:	4639      	mov	r1, r7
	const enum nfsm_state current_state = nfsm_get_current_state();
   29d9a:	4606      	mov	r6, r0
	struct nct_cc_data msg = {
   29d9c:	a808      	add	r0, sp, #32
   29d9e:	f014 ffb4 	bl	3ed0a <memset>
   29da2:	2301      	movs	r3, #1
	struct nrf_cloud_evt cloud_evt = {
   29da4:	2210      	movs	r2, #16
   29da6:	4639      	mov	r1, r7
   29da8:	a80c      	add	r0, sp, #48	; 0x30
	struct nct_cc_data msg = {
   29daa:	930a      	str	r3, [sp, #40]	; 0x28
   29dac:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	struct nrf_cloud_evt cloud_evt = {
   29db0:	f014 ffab 	bl	3ed0a <memset>
   29db4:	2306      	movs	r3, #6
	if (evt->param.cc == NULL) {
   29db6:	6868      	ldr	r0, [r5, #4]
	struct nrf_cloud_evt cloud_evt = {
   29db8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	if (evt->param.cc == NULL) {
   29dbc:	b1b0      	cbz	r0, 29dec <cc_rx_data_handler+0x68>
	err = nrf_cloud_encode_config_response(&evt->param.cc->data, &msg.data,
   29dbe:	f10d 0207 	add.w	r2, sp, #7
   29dc2:	a908      	add	r1, sp, #32
   29dc4:	f7ff fd12 	bl	297ec <nrf_cloud_encode_config_response>
	if ((err) && (err != -ESRCH)) {
   29dc8:	4602      	mov	r2, r0
   29dca:	b370      	cbz	r0, 29e2a <cc_rx_data_handler+0xa6>
   29dcc:	1cc3      	adds	r3, r0, #3
   29dce:	d02c      	beq.n	29e2a <cc_rx_data_handler+0xa6>
		LOG_ERR("nrf_cloud_encode_config_response failed %d", err);
   29dd0:	2301      	movs	r3, #1
   29dd2:	f04f 0000 	mov.w	r0, #0
   29dd6:	4969      	ldr	r1, [pc, #420]	; (29f7c <cc_rx_data_handler+0x1f8>)
   29dd8:	f363 0007 	bfi	r0, r3, #0, #8
   29ddc:	4b68      	ldr	r3, [pc, #416]	; (29f80 <cc_rx_data_handler+0x1fc>)
   29dde:	1a5b      	subs	r3, r3, r1
   29de0:	08db      	lsrs	r3, r3, #3
   29de2:	f363 108f 	bfi	r0, r3, #6, #10
   29de6:	4967      	ldr	r1, [pc, #412]	; (29f84 <cc_rx_data_handler+0x200>)
   29de8:	f012 fc4b 	bl	3c682 <log_string_sync>

	handle_device_config_update(nct_evt, &config_found);

	err = nrf_cloud_decode_requested_state(payload, &new_state);
   29dec:	4620      	mov	r0, r4
   29dee:	f10d 0106 	add.w	r1, sp, #6
   29df2:	f7ff fc35 	bl	29660 <nrf_cloud_decode_requested_state>

	if (err) {
   29df6:	4604      	mov	r4, r0
   29df8:	2800      	cmp	r0, #0
   29dfa:	d03f      	beq.n	29e7c <cc_rx_data_handler+0xf8>
		if (!config_found) {
   29dfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29e00:	2b00      	cmp	r3, #0
   29e02:	f040 80b8 	bne.w	29f76 <cc_rx_data_handler+0x1f2>
			LOG_ERR("nrf_cloud_decode_requested_state Failed %d",
   29e06:	2301      	movs	r3, #1
   29e08:	f04f 0000 	mov.w	r0, #0
   29e0c:	4a5b      	ldr	r2, [pc, #364]	; (29f7c <cc_rx_data_handler+0x1f8>)
   29e0e:	f363 0007 	bfi	r0, r3, #0, #8
   29e12:	4b5b      	ldr	r3, [pc, #364]	; (29f80 <cc_rx_data_handler+0x1fc>)
   29e14:	495c      	ldr	r1, [pc, #368]	; (29f88 <cc_rx_data_handler+0x204>)
   29e16:	1a9b      	subs	r3, r3, r2
   29e18:	4622      	mov	r2, r4
   29e1a:	08db      	lsrs	r3, r3, #3
   29e1c:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   29e20:	f012 fc2f 	bl	3c682 <log_string_sync>
	default:
		break;
	}

	return 0;
}
   29e24:	4620      	mov	r0, r4
   29e26:	b011      	add	sp, #68	; 0x44
   29e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (*config_found == false) {
   29e2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29e2e:	2b00      	cmp	r3, #0
   29e30:	d0dc      	beq.n	29dec <cc_rx_data_handler+0x68>
	if (msg.data.ptr) {
   29e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29e34:	b1b3      	cbz	r3, 29e64 <cc_rx_data_handler+0xe0>
		err = nct_cc_send(&msg);
   29e36:	a808      	add	r0, sp, #32
   29e38:	f000 fdba 	bl	2a9b0 <nct_cc_send>
   29e3c:	4607      	mov	r7, r0
		nrf_cloud_free((void *)msg.data.ptr);
   29e3e:	9809      	ldr	r0, [sp, #36]	; 0x24
   29e40:	f014 fda2 	bl	3e988 <k_free>
		if (err) {
   29e44:	b177      	cbz	r7, 29e64 <cc_rx_data_handler+0xe0>
			LOG_ERR("nct_cc_send failed %d", err);
   29e46:	2301      	movs	r3, #1
   29e48:	f04f 0000 	mov.w	r0, #0
   29e4c:	4a4b      	ldr	r2, [pc, #300]	; (29f7c <cc_rx_data_handler+0x1f8>)
   29e4e:	f363 0007 	bfi	r0, r3, #0, #8
   29e52:	4b4b      	ldr	r3, [pc, #300]	; (29f80 <cc_rx_data_handler+0x1fc>)
   29e54:	494d      	ldr	r1, [pc, #308]	; (29f8c <cc_rx_data_handler+0x208>)
   29e56:	1a9b      	subs	r3, r3, r2
   29e58:	08db      	lsrs	r3, r3, #3
   29e5a:	f363 108f 	bfi	r0, r3, #6, #10
   29e5e:	463a      	mov	r2, r7
   29e60:	f012 fc0f 	bl	3c682 <log_string_sync>
	cloud_evt.data = evt->param.cc->data;
   29e64:	686b      	ldr	r3, [r5, #4]
   29e66:	e893 0003 	ldmia.w	r3, {r0, r1}
   29e6a:	ab10      	add	r3, sp, #64	; 0x40
   29e6c:	e903 0003 	stmdb	r3, {r0, r1}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   29e70:	f7ff fafe 	bl	29470 <nfsm_get_current_state>
   29e74:	a90c      	add	r1, sp, #48	; 0x30
   29e76:	f7ff fb01 	bl	2947c <nfsm_set_current_state_and_notify>
	return err;
   29e7a:	e7b7      	b.n	29dec <cc_rx_data_handler+0x68>
	switch (current_state) {
   29e7c:	3e04      	subs	r6, #4
   29e7e:	2e05      	cmp	r6, #5
   29e80:	d8d0      	bhi.n	29e24 <cc_rx_data_handler+0xa0>
   29e82:	e8df f006 	tbb	[pc, r6]
   29e86:	0303      	.short	0x0303
   29e88:	70700303 	.word	0x70700303
		if (new_state == STATE_UA_PIN_COMPLETE) {
   29e8c:	f89d 6006 	ldrb.w	r6, [sp, #6]
   29e90:	2e07      	cmp	r6, #7
   29e92:	d161      	bne.n	29f58 <cc_rx_data_handler+0x1d4>
	err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, &endpoint);
   29e94:	ab06      	add	r3, sp, #24
   29e96:	aa02      	add	r2, sp, #8
   29e98:	a904      	add	r1, sp, #16
   29e9a:	6868      	ldr	r0, [r5, #4]
   29e9c:	f7ff fe34 	bl	29b08 <nrf_cloud_decode_data_endpoint>
	if (err) {
   29ea0:	4604      	mov	r4, r0
   29ea2:	b168      	cbz	r0, 29ec0 <cc_rx_data_handler+0x13c>
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   29ea4:	2301      	movs	r3, #1
   29ea6:	f04f 0000 	mov.w	r0, #0
   29eaa:	4a34      	ldr	r2, [pc, #208]	; (29f7c <cc_rx_data_handler+0x1f8>)
   29eac:	f363 0007 	bfi	r0, r3, #0, #8
   29eb0:	4b33      	ldr	r3, [pc, #204]	; (29f80 <cc_rx_data_handler+0x1fc>)
   29eb2:	4937      	ldr	r1, [pc, #220]	; (29f90 <cc_rx_data_handler+0x20c>)
   29eb4:	1a9b      	subs	r3, r3, r2
   29eb6:	08db      	lsrs	r3, r3, #3
   29eb8:	f363 108f 	bfi	r0, r3, #6, #10
   29ebc:	4622      	mov	r2, r4
   29ebe:	e7af      	b.n	29e20 <cc_rx_data_handler+0x9c>
	nct_dc_endpoint_set(&tx, &rx, &endpoint);
   29ec0:	aa06      	add	r2, sp, #24
   29ec2:	a902      	add	r1, sp, #8
   29ec4:	a804      	add	r0, sp, #16
   29ec6:	f000 fdf1 	bl	2aaac <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   29eca:	4621      	mov	r1, r4
   29ecc:	2210      	movs	r2, #16
   29ece:	a808      	add	r0, sp, #32
   29ed0:	f014 ff1b 	bl	3ed0a <memset>
   29ed4:	f641 63d2 	movw	r3, #7890	; 0x1ed2
   29ed8:	930a      	str	r3, [sp, #40]	; 0x28
   29eda:	2301      	movs	r3, #1
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   29edc:	a908      	add	r1, sp, #32
   29ede:	4630      	mov	r0, r6
	struct nct_cc_data msg = {
   29ee0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   29ee4:	f7ff fd36 	bl	29954 <nrf_cloud_encode_state>
	if (err) {
   29ee8:	4604      	mov	r4, r0
   29eea:	b168      	cbz	r0, 29f08 <cc_rx_data_handler+0x184>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   29eec:	2301      	movs	r3, #1
   29eee:	f04f 0000 	mov.w	r0, #0
   29ef2:	4a22      	ldr	r2, [pc, #136]	; (29f7c <cc_rx_data_handler+0x1f8>)
   29ef4:	f363 0007 	bfi	r0, r3, #0, #8
   29ef8:	4b21      	ldr	r3, [pc, #132]	; (29f80 <cc_rx_data_handler+0x1fc>)
   29efa:	4926      	ldr	r1, [pc, #152]	; (29f94 <cc_rx_data_handler+0x210>)
   29efc:	1a9b      	subs	r3, r3, r2
   29efe:	08db      	lsrs	r3, r3, #3
   29f00:	f363 108f 	bfi	r0, r3, #6, #10
   29f04:	4622      	mov	r2, r4
   29f06:	e78b      	b.n	29e20 <cc_rx_data_handler+0x9c>
	err = nct_cc_send(&msg);
   29f08:	a808      	add	r0, sp, #32
   29f0a:	f000 fd51 	bl	2a9b0 <nct_cc_send>
	if (err) {
   29f0e:	4604      	mov	r4, r0
   29f10:	b190      	cbz	r0, 29f38 <cc_rx_data_handler+0x1b4>
		LOG_ERR("nct_cc_send failed %d", err);
   29f12:	2301      	movs	r3, #1
   29f14:	f04f 0000 	mov.w	r0, #0
   29f18:	4a18      	ldr	r2, [pc, #96]	; (29f7c <cc_rx_data_handler+0x1f8>)
   29f1a:	f363 0007 	bfi	r0, r3, #0, #8
   29f1e:	4b18      	ldr	r3, [pc, #96]	; (29f80 <cc_rx_data_handler+0x1fc>)
   29f20:	491a      	ldr	r1, [pc, #104]	; (29f8c <cc_rx_data_handler+0x208>)
   29f22:	1a9b      	subs	r3, r3, r2
   29f24:	08db      	lsrs	r3, r3, #3
   29f26:	f363 108f 	bfi	r0, r3, #6, #10
   29f2a:	4622      	mov	r2, r4
   29f2c:	f012 fba9 	bl	3c682 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   29f30:	9809      	ldr	r0, [sp, #36]	; 0x24
   29f32:	f014 fd29 	bl	3e988 <k_free>
		return err;
   29f36:	e775      	b.n	29e24 <cc_rx_data_handler+0xa0>
	nrf_cloud_free((void *)msg.data.ptr);
   29f38:	9809      	ldr	r0, [sp, #36]	; 0x24
   29f3a:	f014 fd25 	bl	3e988 <k_free>
	struct nrf_cloud_evt evt = {
   29f3e:	4621      	mov	r1, r4
   29f40:	2210      	movs	r2, #16
   29f42:	a80c      	add	r0, sp, #48	; 0x30
   29f44:	f014 fee1 	bl	3ed0a <memset>
   29f48:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   29f4a:	a90c      	add	r1, sp, #48	; 0x30
   29f4c:	4630      	mov	r0, r6
	struct nrf_cloud_evt evt = {
   29f4e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   29f52:	f7ff fa93 	bl	2947c <nfsm_set_current_state_and_notify>
			return handle_pin_complete(nct_evt);
   29f56:	e765      	b.n	29e24 <cc_rx_data_handler+0xa0>
		} else if (new_state == STATE_UA_PIN_WAIT) {
   29f58:	2e06      	cmp	r6, #6
   29f5a:	f47f af63 	bne.w	29e24 <cc_rx_data_handler+0xa0>
			return state_ua_pin_wait();
   29f5e:	f7ff fe97 	bl	29c90 <state_ua_pin_wait>
   29f62:	4604      	mov	r4, r0
   29f64:	e75e      	b.n	29e24 <cc_rx_data_handler+0xa0>
		if (new_state == STATE_UA_PIN_WAIT) {
   29f66:	f89d 3006 	ldrb.w	r3, [sp, #6]
   29f6a:	2b06      	cmp	r3, #6
   29f6c:	f47f af5a 	bne.w	29e24 <cc_rx_data_handler+0xa0>
			(void)nct_dc_disconnect();
   29f70:	f000 fe34 	bl	2abdc <nct_dc_disconnect>
   29f74:	e7f3      	b.n	29f5e <cc_rx_data_handler+0x1da>
		return 0;
   29f76:	2400      	movs	r4, #0
   29f78:	e754      	b.n	29e24 <cc_rx_data_handler+0xa0>
   29f7a:	bf00      	nop
   29f7c:	000402cc 	.word	0x000402cc
   29f80:	000403b4 	.word	0x000403b4
   29f84:	000445ae 	.word	0x000445ae
   29f88:	000445d9 	.word	0x000445d9
   29f8c:	000446e8 	.word	0x000446e8
   29f90:	00044604 	.word	0x00044604
   29f94:	000446c7 	.word	0x000446c7

00029f98 <nfsm_handle_incoming_event>:
{
   29f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29f9a:	460d      	mov	r5, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   29f9c:	4607      	mov	r7, r0
   29f9e:	b120      	cbz	r0, 29faa <nfsm_handle_incoming_event+0x12>
   29fa0:	7a06      	ldrb	r6, [r0, #8]
   29fa2:	2e09      	cmp	r6, #9
   29fa4:	d801      	bhi.n	29faa <nfsm_handle_incoming_event+0x12>
   29fa6:	290c      	cmp	r1, #12
   29fa8:	d90e      	bls.n	29fc8 <nfsm_handle_incoming_event+0x30>
		__ASSERT_NO_MSG(false);
   29faa:	2384      	movs	r3, #132	; 0x84
   29fac:	4a1e      	ldr	r2, [pc, #120]	; (2a028 <nfsm_handle_incoming_event+0x90>)
   29fae:	491f      	ldr	r1, [pc, #124]	; (2a02c <nfsm_handle_incoming_event+0x94>)
   29fb0:	481f      	ldr	r0, [pc, #124]	; (2a030 <nfsm_handle_incoming_event+0x98>)
   29fb2:	f012 fb0f 	bl	3c5d4 <printk>
   29fb6:	2184      	movs	r1, #132	; 0x84
   29fb8:	481b      	ldr	r0, [pc, #108]	; (2a028 <nfsm_handle_incoming_event+0x90>)
   29fba:	f012 fb51 	bl	3c660 <assert_post_action>
		return -EINVAL;
   29fbe:	f06f 0415 	mvn.w	r4, #21
}
   29fc2:	4620      	mov	r0, r4
   29fc4:	b003      	add	sp, #12
   29fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state_event_handlers[state][nct_evt->type] != NULL) {
   29fc8:	4b1a      	ldr	r3, [pc, #104]	; (2a034 <nfsm_handle_incoming_event+0x9c>)
   29fca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   29fce:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   29fd2:	b1a4      	cbz	r4, 29ffe <nfsm_handle_incoming_event+0x66>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   29fd4:	47a0      	blx	r4
		if (err) {
   29fd6:	4604      	mov	r4, r0
   29fd8:	2800      	cmp	r0, #0
   29fda:	d0f2      	beq.n	29fc2 <nfsm_handle_incoming_event+0x2a>
			LOG_ERR("Handler failed! state: %d, type: %d", state,
   29fdc:	2301      	movs	r3, #1
   29fde:	f04f 0000 	mov.w	r0, #0
   29fe2:	4a15      	ldr	r2, [pc, #84]	; (2a038 <nfsm_handle_incoming_event+0xa0>)
   29fe4:	f363 0007 	bfi	r0, r3, #0, #8
   29fe8:	4b14      	ldr	r3, [pc, #80]	; (2a03c <nfsm_handle_incoming_event+0xa4>)
   29fea:	4915      	ldr	r1, [pc, #84]	; (2a040 <nfsm_handle_incoming_event+0xa8>)
   29fec:	1a9b      	subs	r3, r3, r2
   29fee:	08db      	lsrs	r3, r3, #3
   29ff0:	f363 108f 	bfi	r0, r3, #6, #10
   29ff4:	462a      	mov	r2, r5
   29ff6:	7a3b      	ldrb	r3, [r7, #8]
   29ff8:	f012 fb43 	bl	3c682 <log_string_sync>
   29ffc:	e7e1      	b.n	29fc2 <nfsm_handle_incoming_event+0x2a>
	LOG_DBG("Dropping FSM transition %d, current state %d", nct_evt->type,
   29ffe:	2304      	movs	r3, #4
   2a000:	f04f 0500 	mov.w	r5, #0
   2a004:	4a0d      	ldr	r2, [pc, #52]	; (2a03c <nfsm_handle_incoming_event+0xa4>)
   2a006:	f363 0507 	bfi	r5, r3, #0, #8
   2a00a:	4b0b      	ldr	r3, [pc, #44]	; (2a038 <nfsm_handle_incoming_event+0xa0>)
   2a00c:	1ad2      	subs	r2, r2, r3
   2a00e:	08d2      	lsrs	r2, r2, #3
   2a010:	f362 158f 	bfi	r5, r2, #6, #10
   2a014:	f7ff fa2c 	bl	29470 <nfsm_get_current_state>
   2a018:	4633      	mov	r3, r6
   2a01a:	9000      	str	r0, [sp, #0]
   2a01c:	4a09      	ldr	r2, [pc, #36]	; (2a044 <nfsm_handle_incoming_event+0xac>)
   2a01e:	490a      	ldr	r1, [pc, #40]	; (2a048 <nfsm_handle_incoming_event+0xb0>)
   2a020:	4628      	mov	r0, r5
   2a022:	f012 fb2e 	bl	3c682 <log_string_sync>
	return 0;
   2a026:	e7cc      	b.n	29fc2 <nfsm_handle_incoming_event+0x2a>
   2a028:	0004462d 	.word	0x0004462d
   2a02c:	00046834 	.word	0x00046834
   2a030:	00041757 	.word	0x00041757
   2a034:	00040bb0 	.word	0x00040bb0
   2a038:	000402cc 	.word	0x000402cc
   2a03c:	000403b4 	.word	0x000403b4
   2a040:	00044672 	.word	0x00044672
   2a044:	0004459b 	.word	0x0004459b
   2a048:	00044696 	.word	0x00044696

0002a04c <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   2a04c:	2200      	movs	r2, #0
   2a04e:	4b04      	ldr	r3, [pc, #16]	; (2a060 <dc_endpoint_reset+0x14>)
	nct.dc_rx_endp.size = 0;
   2a050:	e9c3 222d 	strd	r2, r2, [r3, #180]	; 0xb4

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   2a054:	e9c3 222b 	strd	r2, r2, [r3, #172]	; 0xac

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   2a058:	e9c3 222f 	strd	r2, r2, [r3, #188]	; 0xbc
}
   2a05c:	4770      	bx	lr
   2a05e:	bf00      	nop
   2a060:	20023d94 	.word	0x20023d94

0002a064 <aws_fota_cb_handler>:
}

#if defined(CONFIG_AWS_FOTA)
/* Handle AWS FOTA events */
static void aws_fota_cb_handler(enum aws_fota_evt_id evt)
{
   2a064:	b508      	push	{r3, lr}
	switch (evt) {
   2a066:	2803      	cmp	r0, #3
   2a068:	d845      	bhi.n	2a0f6 <aws_fota_cb_handler+0x92>
   2a06a:	e8df f000 	tbb	[pc, r0]
   2a06e:	3402      	.short	0x3402
   2a070:	2315      	.short	0x2315
	case AWS_FOTA_EVT_DONE:
		LOG_DBG("AWS_FOTA_EVT_DONE, rebooting to apply update.");
   2a072:	2304      	movs	r3, #4
   2a074:	f04f 0000 	mov.w	r0, #0
   2a078:	4a1f      	ldr	r2, [pc, #124]	; (2a0f8 <aws_fota_cb_handler+0x94>)
   2a07a:	f363 0007 	bfi	r0, r3, #0, #8
   2a07e:	4b1f      	ldr	r3, [pc, #124]	; (2a0fc <aws_fota_cb_handler+0x98>)
   2a080:	491f      	ldr	r1, [pc, #124]	; (2a100 <aws_fota_cb_handler+0x9c>)
   2a082:	1a9b      	subs	r3, r3, r2
   2a084:	08db      	lsrs	r3, r3, #3
   2a086:	4a1f      	ldr	r2, [pc, #124]	; (2a104 <aws_fota_cb_handler+0xa0>)
   2a088:	f363 108f 	bfi	r0, r3, #6, #10
		nct_apply_update();
		break;

	case AWS_FOTA_EVT_ERASE_PENDING:
		LOG_DBG("AWS_FOTA_EVT_ERASE_PENDING rebooting");
   2a08c:	f012 faf9 	bl	3c682 <log_string_sync>

	case AWS_FOTA_EVT_ERROR:
		LOG_ERR("AWS_FOTA_EVT_ERROR");
		break;
	}
}
   2a090:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		nct_apply_update();
   2a094:	f7ff baca 	b.w	2962c <nct_apply_update>
		LOG_DBG("AWS_FOTA_EVT_ERASE_PENDING rebooting");
   2a098:	2304      	movs	r3, #4
   2a09a:	f04f 0000 	mov.w	r0, #0
   2a09e:	4a16      	ldr	r2, [pc, #88]	; (2a0f8 <aws_fota_cb_handler+0x94>)
   2a0a0:	f363 0007 	bfi	r0, r3, #0, #8
   2a0a4:	4b15      	ldr	r3, [pc, #84]	; (2a0fc <aws_fota_cb_handler+0x98>)
   2a0a6:	4918      	ldr	r1, [pc, #96]	; (2a108 <aws_fota_cb_handler+0xa4>)
   2a0a8:	1a9b      	subs	r3, r3, r2
   2a0aa:	08db      	lsrs	r3, r3, #3
   2a0ac:	f363 108f 	bfi	r0, r3, #6, #10
   2a0b0:	4a14      	ldr	r2, [pc, #80]	; (2a104 <aws_fota_cb_handler+0xa0>)
   2a0b2:	e7eb      	b.n	2a08c <aws_fota_cb_handler+0x28>
		LOG_DBG("AWS_FOTA_EVT_ERASE_DONE.\n");
   2a0b4:	2304      	movs	r3, #4
   2a0b6:	f04f 0000 	mov.w	r0, #0
   2a0ba:	4a0f      	ldr	r2, [pc, #60]	; (2a0f8 <aws_fota_cb_handler+0x94>)
   2a0bc:	f363 0007 	bfi	r0, r3, #0, #8
   2a0c0:	4b0e      	ldr	r3, [pc, #56]	; (2a0fc <aws_fota_cb_handler+0x98>)
   2a0c2:	4912      	ldr	r1, [pc, #72]	; (2a10c <aws_fota_cb_handler+0xa8>)
   2a0c4:	1a9b      	subs	r3, r3, r2
   2a0c6:	08db      	lsrs	r3, r3, #3
   2a0c8:	f363 108f 	bfi	r0, r3, #6, #10
   2a0cc:	4a0d      	ldr	r2, [pc, #52]	; (2a104 <aws_fota_cb_handler+0xa0>)
}
   2a0ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_DBG("AWS_FOTA_EVT_ERASE_DONE.\n");
   2a0d2:	f012 bad6 	b.w	3c682 <log_string_sync>
		LOG_ERR("AWS_FOTA_EVT_ERROR");
   2a0d6:	2301      	movs	r3, #1
   2a0d8:	f04f 0000 	mov.w	r0, #0
   2a0dc:	4a06      	ldr	r2, [pc, #24]	; (2a0f8 <aws_fota_cb_handler+0x94>)
   2a0de:	f363 0007 	bfi	r0, r3, #0, #8
   2a0e2:	4b06      	ldr	r3, [pc, #24]	; (2a0fc <aws_fota_cb_handler+0x98>)
   2a0e4:	490a      	ldr	r1, [pc, #40]	; (2a110 <aws_fota_cb_handler+0xac>)
   2a0e6:	1a9b      	subs	r3, r3, r2
   2a0e8:	08db      	lsrs	r3, r3, #3
   2a0ea:	f363 108f 	bfi	r0, r3, #6, #10
}
   2a0ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("AWS_FOTA_EVT_ERROR");
   2a0f2:	f012 bac6 	b.w	3c682 <log_string_sync>
}
   2a0f6:	bd08      	pop	{r3, pc}
   2a0f8:	000402cc 	.word	0x000402cc
   2a0fc:	000403bc 	.word	0x000403bc
   2a100:	000447eb 	.word	0x000447eb
   2a104:	00044732 	.word	0x00044732
   2a108:	0004481d 	.word	0x0004481d
   2a10c:	00044846 	.word	0x00044846
   2a110:	00044864 	.word	0x00044864

0002a114 <dc_send>:
{
   2a114:	b530      	push	{r4, r5, lr}
   2a116:	460d      	mov	r5, r1
   2a118:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   2a11a:	4604      	mov	r4, r0
   2a11c:	b368      	cbz	r0, 2a17a <dc_send+0x66>
	struct mqtt_publish_param publish = {
   2a11e:	2210      	movs	r2, #16
   2a120:	2100      	movs	r1, #0
   2a122:	a802      	add	r0, sp, #8
   2a124:	f014 fdf1 	bl	3ed0a <memset>
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   2a128:	4b15      	ldr	r3, [pc, #84]	; (2a180 <dc_send+0x6c>)
	struct mqtt_publish_param publish = {
   2a12a:	f88d 5008 	strb.w	r5, [sp, #8]
   2a12e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
   2a132:	9200      	str	r2, [sp, #0]
   2a134:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   2a138:	9201      	str	r2, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   2a13a:	6822      	ldr	r2, [r4, #0]
   2a13c:	b11a      	cbz	r2, 2a146 <dc_send+0x32>
   2a13e:	6861      	ldr	r1, [r4, #4]
   2a140:	b109      	cbz	r1, 2a146 <dc_send+0x32>
		publish.message.payload.len = dc_data->data.len;
   2a142:	e9cd 1203 	strd	r1, r2, [sp, #12]
	if (dc_data->id != 0) {
   2a146:	68a2      	ldr	r2, [r4, #8]
   2a148:	b13a      	cbz	r2, 2a15a <dc_send+0x46>
		publish.message_id = dc_data->id;
   2a14a:	f8ad 2014 	strh.w	r2, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   2a14e:	4669      	mov	r1, sp
   2a150:	480c      	ldr	r0, [pc, #48]	; (2a184 <dc_send+0x70>)
   2a152:	f013 f836 	bl	3d1c2 <mqtt_publish>
}
   2a156:	b007      	add	sp, #28
   2a158:	bd30      	pop	{r4, r5, pc}
	nct.message_id++;
   2a15a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
   2a15e:	1c51      	adds	r1, r2, #1
	if ((u16_t)nct.message_id == 0) {
   2a160:	b288      	uxth	r0, r1
   2a162:	b130      	cbz	r0, 2a172 <dc_send+0x5e>
	nct.message_id++;
   2a164:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
		publish.message_id = dc_get_next_message_id();
   2a168:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   2a16c:	f8ad 3014 	strh.w	r3, [sp, #20]
   2a170:	e7ed      	b.n	2a14e <dc_send+0x3a>
		nct.message_id++;
   2a172:	3202      	adds	r2, #2
   2a174:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
   2a178:	e7f6      	b.n	2a168 <dc_send+0x54>
		return -EINVAL;
   2a17a:	f06f 0015 	mvn.w	r0, #21
   2a17e:	e7ea      	b.n	2a156 <dc_send+0x42>
   2a180:	20023d94 	.word	0x20023d94
   2a184:	20023dac 	.word	0x20023dac

0002a188 <dc_endpoint_free>:
{
   2a188:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   2a18a:	4c0a      	ldr	r4, [pc, #40]	; (2a1b4 <dc_endpoint_free+0x2c>)
   2a18c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2a190:	b108      	cbz	r0, 2a196 <dc_endpoint_free+0xe>
		nrf_cloud_free(nct.dc_rx_endp.utf8);
   2a192:	f014 fbf9 	bl	3e988 <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   2a196:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   2a19a:	b108      	cbz	r0, 2a1a0 <dc_endpoint_free+0x18>
		nrf_cloud_free(nct.dc_tx_endp.utf8);
   2a19c:	f014 fbf4 	bl	3e988 <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   2a1a0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2a1a4:	b108      	cbz	r0, 2a1aa <dc_endpoint_free+0x22>
		nrf_cloud_free(nct.dc_m_endp.utf8);
   2a1a6:	f014 fbef 	bl	3e988 <k_free>
}
   2a1aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dc_endpoint_reset();
   2a1ae:	f7ff bf4d 	b.w	2a04c <dc_endpoint_reset>
   2a1b2:	bf00      	nop
   2a1b4:	20023d94 	.word	0x20023d94

0002a1b8 <nct_mqtt_evt_handler>:
/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	int err;
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2a1b8:	2300      	movs	r3, #0
{
   2a1ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a1bc:	b08f      	sub	sp, #60	; 0x3c
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2a1be:	e9cd 3305 	strd	r3, r3, [sp, #20]
   2a1c2:	69cb      	ldr	r3, [r1, #28]
{
   2a1c4:	4607      	mov	r7, r0
   2a1c6:	460c      	mov	r4, r1
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2a1c8:	9304      	str	r3, [sp, #16]
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_AWS_FOTA)
	err = aws_fota_mqtt_evt_handler(mqtt_client, _mqtt_evt);
   2a1ca:	f002 f811 	bl	2c1f0 <aws_fota_mqtt_evt_handler>
	if (err == 0) {
   2a1ce:	1e02      	subs	r2, r0, #0
   2a1d0:	d074      	beq.n	2a2bc <nct_mqtt_evt_handler+0x104>
		/* Event handled by FOTA library so we can skip it */
		return;
	} else if (err < 0) {
   2a1d2:	da28      	bge.n	2a226 <nct_mqtt_evt_handler+0x6e>
		LOG_ERR("aws_fota_mqtt_evt_handler: Failed! %d", err);
   2a1d4:	2301      	movs	r3, #1
   2a1d6:	f04f 0000 	mov.w	r0, #0
   2a1da:	4d91      	ldr	r5, [pc, #580]	; (2a420 <nct_mqtt_evt_handler+0x268>)
   2a1dc:	f363 0007 	bfi	r0, r3, #0, #8
   2a1e0:	4b90      	ldr	r3, [pc, #576]	; (2a424 <nct_mqtt_evt_handler+0x26c>)
   2a1e2:	4991      	ldr	r1, [pc, #580]	; (2a428 <nct_mqtt_evt_handler+0x270>)
   2a1e4:	1aed      	subs	r5, r5, r3
   2a1e6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2a1ea:	f365 108f 	bfi	r0, r5, #6, #10
   2a1ee:	f012 fa48 	bl	3c682 <log_string_sync>
		LOG_DBG("Disconnecting MQTT client...");
   2a1f2:	2304      	movs	r3, #4
   2a1f4:	f04f 0000 	mov.w	r0, #0
   2a1f8:	f363 0007 	bfi	r0, r3, #0, #8
   2a1fc:	4a8b      	ldr	r2, [pc, #556]	; (2a42c <nct_mqtt_evt_handler+0x274>)
   2a1fe:	f365 108f 	bfi	r0, r5, #6, #10
   2a202:	498b      	ldr	r1, [pc, #556]	; (2a430 <nct_mqtt_evt_handler+0x278>)
   2a204:	f012 fa3d 	bl	3c682 <log_string_sync>

		err = mqtt_disconnect(mqtt_client);
   2a208:	4638      	mov	r0, r7
   2a20a:	f013 f82f 	bl	3d26c <mqtt_disconnect>
		if (err) {
   2a20e:	4602      	mov	r2, r0
   2a210:	b148      	cbz	r0, 2a226 <nct_mqtt_evt_handler+0x6e>
			LOG_ERR("Could not disconnect: %d", err);
   2a212:	2101      	movs	r1, #1
   2a214:	f04f 0000 	mov.w	r0, #0
   2a218:	f361 0007 	bfi	r0, r1, #0, #8
   2a21c:	f365 108f 	bfi	r0, r5, #6, #10
   2a220:	4984      	ldr	r1, [pc, #528]	; (2a434 <nct_mqtt_evt_handler+0x27c>)
   2a222:	f012 fa2e 	bl	3c682 <log_string_sync>
		}
	}
#endif /* defined(CONFIG_AWS_FOTA) */

	switch (_mqtt_evt->type) {
   2a226:	7823      	ldrb	r3, [r4, #0]
   2a228:	2b08      	cmp	r3, #8
   2a22a:	d847      	bhi.n	2a2bc <nct_mqtt_evt_handler+0x104>
   2a22c:	e8df f013 	tbh	[pc, r3, lsl #1]
   2a230:	00de0009 	.word	0x00de0009
   2a234:	00c6001c 	.word	0x00c6001c
   2a238:	00460046 	.word	0x00460046
   2a23c:	00970046 	.word	0x00970046
   2a240:	00b0      	.short	0x00b0
	case MQTT_EVT_CONNACK: {
		LOG_DBG("MQTT_EVT_CONNACK");
   2a242:	2304      	movs	r3, #4
   2a244:	f04f 0000 	mov.w	r0, #0
   2a248:	4a76      	ldr	r2, [pc, #472]	; (2a424 <nct_mqtt_evt_handler+0x26c>)
   2a24a:	f363 0007 	bfi	r0, r3, #0, #8
   2a24e:	4b74      	ldr	r3, [pc, #464]	; (2a420 <nct_mqtt_evt_handler+0x268>)
   2a250:	4979      	ldr	r1, [pc, #484]	; (2a438 <nct_mqtt_evt_handler+0x280>)
   2a252:	1a9b      	subs	r3, r3, r2
   2a254:	08db      	lsrs	r3, r3, #3
   2a256:	f363 108f 	bfi	r0, r3, #6, #10
   2a25a:	4a74      	ldr	r2, [pc, #464]	; (2a42c <nct_mqtt_evt_handler+0x274>)
   2a25c:	f012 fa11 	bl	3c682 <log_string_sync>

		evt.type = NCT_EVT_CONNECTED;
   2a260:	2300      	movs	r3, #0
		break;
	}
	case MQTT_EVT_DISCONNECT: {
		LOG_DBG("MQTT_EVT_DISCONNECT: result = %d", _mqtt_evt->result);

		evt.type = NCT_EVT_DISCONNECTED;
   2a262:	f88d 3018 	strb.w	r3, [sp, #24]
	}
	default:
		break;
	}

	if (event_notify) {
   2a266:	e055      	b.n	2a314 <nct_mqtt_evt_handler+0x15c>
		LOG_DBG("MQTT_EVT_PUBLISH: id = %d len = %d",
   2a268:	2304      	movs	r3, #4
   2a26a:	f04f 0000 	mov.w	r0, #0
   2a26e:	4a6d      	ldr	r2, [pc, #436]	; (2a424 <nct_mqtt_evt_handler+0x26c>)
   2a270:	f363 0007 	bfi	r0, r3, #0, #8
   2a274:	4b6a      	ldr	r3, [pc, #424]	; (2a420 <nct_mqtt_evt_handler+0x268>)
   2a276:	4971      	ldr	r1, [pc, #452]	; (2a43c <nct_mqtt_evt_handler+0x284>)
   2a278:	1a9b      	subs	r3, r3, r2
   2a27a:	f3c3 05c9 	ubfx	r5, r3, #3, #10
   2a27e:	6963      	ldr	r3, [r4, #20]
   2a280:	4a6a      	ldr	r2, [pc, #424]	; (2a42c <nct_mqtt_evt_handler+0x274>)
   2a282:	9300      	str	r3, [sp, #0]
   2a284:	f365 108f 	bfi	r0, r5, #6, #10
   2a288:	8b23      	ldrh	r3, [r4, #24]
   2a28a:	f012 f9fa 	bl	3c682 <log_string_sync>
		int err = publish_get_payload(mqtt_client,
   2a28e:	6962      	ldr	r2, [r4, #20]
	if (length > sizeof(nct.payload_buf)) {
   2a290:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2a294:	d814      	bhi.n	2a2c0 <nct_mqtt_evt_handler+0x108>
	return mqtt_readall_publish_payload(client, nct.payload_buf, length);
   2a296:	496a      	ldr	r1, [pc, #424]	; (2a440 <nct_mqtt_evt_handler+0x288>)
   2a298:	4638      	mov	r0, r7
   2a29a:	f013 f8eb 	bl	3d474 <mqtt_readall_publish_payload>
		if (err < 0) {
   2a29e:	1e02      	subs	r2, r0, #0
   2a2a0:	da11      	bge.n	2a2c6 <nct_mqtt_evt_handler+0x10e>
			LOG_ERR("publish_get_payload: failed %d", err);
   2a2a2:	2301      	movs	r3, #1
   2a2a4:	f04f 0000 	mov.w	r0, #0
   2a2a8:	f363 0007 	bfi	r0, r3, #0, #8
   2a2ac:	f365 108f 	bfi	r0, r5, #6, #10
   2a2b0:	4964      	ldr	r1, [pc, #400]	; (2a444 <nct_mqtt_evt_handler+0x28c>)
   2a2b2:	f012 f9e6 	bl	3c682 <log_string_sync>
			mqtt_disconnect(mqtt_client);
   2a2b6:	4638      	mov	r0, r7
   2a2b8:	f012 ffd8 	bl	3d26c <mqtt_disconnect>

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
		}
	}
}
   2a2bc:	b00f      	add	sp, #60	; 0x3c
   2a2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2a2c0:	f06f 0279 	mvn.w	r2, #121	; 0x79
   2a2c4:	e7ed      	b.n	2a2a2 <nct_mqtt_evt_handler+0xea>
	for (u32_t index = 0; index < list_size; index++) {
   2a2c6:	2500      	movs	r5, #0
   2a2c8:	4e5f      	ldr	r6, [pc, #380]	; (2a448 <nct_mqtt_evt_handler+0x290>)
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   2a2ca:	68a2      	ldr	r2, [r4, #8]
   2a2cc:	6873      	ldr	r3, [r6, #4]
   2a2ce:	6831      	ldr	r1, [r6, #0]
   2a2d0:	429a      	cmp	r2, r3
   2a2d2:	bf28      	it	cs
   2a2d4:	461a      	movcs	r2, r3
   2a2d6:	6860      	ldr	r0, [r4, #4]
   2a2d8:	f014 fef0 	bl	3f0bc <strncmp>
		if (strings_compare(
   2a2dc:	2800      	cmp	r0, #0
   2a2de:	d12e      	bne.n	2a33e <nct_mqtt_evt_handler+0x186>
			*opcode = nct_cc_rx_opcode_map[index];
   2a2e0:	4b5a      	ldr	r3, [pc, #360]	; (2a44c <nct_mqtt_evt_handler+0x294>)
   2a2e2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   2a2e6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			cc.id = p->message_id;
   2a2ea:	8b23      	ldrh	r3, [r4, #24]
   2a2ec:	930c      	str	r3, [sp, #48]	; 0x30
			cc.data.ptr = nct.payload_buf;
   2a2ee:	4b54      	ldr	r3, [pc, #336]	; (2a440 <nct_mqtt_evt_handler+0x288>)
   2a2f0:	930b      	str	r3, [sp, #44]	; 0x2c
			cc.data.len = p->message.payload.len;
   2a2f2:	6963      	ldr	r3, [r4, #20]
   2a2f4:	930a      	str	r3, [sp, #40]	; 0x28
			evt.type = NCT_EVT_CC_RX_DATA;
   2a2f6:	2303      	movs	r3, #3
   2a2f8:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.cc = &cc;
   2a2fc:	ab0a      	add	r3, sp, #40	; 0x28
			evt.param.dc = &dc;
   2a2fe:	9305      	str	r3, [sp, #20]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2a300:	7b23      	ldrb	r3, [r4, #12]
   2a302:	2b01      	cmp	r3, #1
   2a304:	d106      	bne.n	2a314 <nct_mqtt_evt_handler+0x15c>
			const struct mqtt_puback_param ack = {
   2a306:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2a308:	a903      	add	r1, sp, #12
   2a30a:	4638      	mov	r0, r7
			const struct mqtt_puback_param ack = {
   2a30c:	f8ad 300c 	strh.w	r3, [sp, #12]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2a310:	f012 ff85 	bl	3d21e <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   2a314:	a804      	add	r0, sp, #16
   2a316:	f7ff f983 	bl	29620 <nct_input>
		if (err != 0) {
   2a31a:	4602      	mov	r2, r0
   2a31c:	2800      	cmp	r0, #0
   2a31e:	d0cd      	beq.n	2a2bc <nct_mqtt_evt_handler+0x104>
			LOG_ERR("nct_input: failed %d", err);
   2a320:	2301      	movs	r3, #1
   2a322:	f04f 0000 	mov.w	r0, #0
   2a326:	493f      	ldr	r1, [pc, #252]	; (2a424 <nct_mqtt_evt_handler+0x26c>)
   2a328:	f363 0007 	bfi	r0, r3, #0, #8
   2a32c:	4b3c      	ldr	r3, [pc, #240]	; (2a420 <nct_mqtt_evt_handler+0x268>)
   2a32e:	1a5b      	subs	r3, r3, r1
   2a330:	08db      	lsrs	r3, r3, #3
   2a332:	f363 108f 	bfi	r0, r3, #6, #10
   2a336:	4946      	ldr	r1, [pc, #280]	; (2a450 <nct_mqtt_evt_handler+0x298>)
   2a338:	f012 f9a3 	bl	3c682 <log_string_sync>
   2a33c:	e7be      	b.n	2a2bc <nct_mqtt_evt_handler+0x104>
	for (u32_t index = 0; index < list_size; index++) {
   2a33e:	3501      	adds	r5, #1
   2a340:	2d03      	cmp	r5, #3
   2a342:	f106 060c 	add.w	r6, r6, #12
   2a346:	d1c0      	bne.n	2a2ca <nct_mqtt_evt_handler+0x112>
			dc.id = p->message_id;
   2a348:	8b23      	ldrh	r3, [r4, #24]
   2a34a:	9309      	str	r3, [sp, #36]	; 0x24
			dc.data.ptr = nct.payload_buf;
   2a34c:	4b3c      	ldr	r3, [pc, #240]	; (2a440 <nct_mqtt_evt_handler+0x288>)
   2a34e:	9308      	str	r3, [sp, #32]
			dc.data.len = p->message.payload.len;
   2a350:	6963      	ldr	r3, [r4, #20]
   2a352:	9307      	str	r3, [sp, #28]
			evt.type = NCT_EVT_DC_RX_DATA;
   2a354:	2305      	movs	r3, #5
   2a356:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.dc = &dc;
   2a35a:	ab07      	add	r3, sp, #28
   2a35c:	e7cf      	b.n	2a2fe <nct_mqtt_evt_handler+0x146>
		LOG_DBG("MQTT_EVT_SUBACK: id = %d result = %d",
   2a35e:	2304      	movs	r3, #4
   2a360:	f04f 0000 	mov.w	r0, #0
   2a364:	4a2f      	ldr	r2, [pc, #188]	; (2a424 <nct_mqtt_evt_handler+0x26c>)
   2a366:	f363 0007 	bfi	r0, r3, #0, #8
   2a36a:	4b2d      	ldr	r3, [pc, #180]	; (2a420 <nct_mqtt_evt_handler+0x268>)
   2a36c:	4939      	ldr	r1, [pc, #228]	; (2a454 <nct_mqtt_evt_handler+0x29c>)
   2a36e:	1a9b      	subs	r3, r3, r2
   2a370:	08db      	lsrs	r3, r3, #3
   2a372:	f363 108f 	bfi	r0, r3, #6, #10
   2a376:	69e3      	ldr	r3, [r4, #28]
   2a378:	4a2c      	ldr	r2, [pc, #176]	; (2a42c <nct_mqtt_evt_handler+0x274>)
   2a37a:	9300      	str	r3, [sp, #0]
   2a37c:	88a3      	ldrh	r3, [r4, #4]
   2a37e:	f012 f980 	bl	3c682 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   2a382:	f240 42d2 	movw	r2, #1234	; 0x4d2
   2a386:	88a3      	ldrh	r3, [r4, #4]
   2a388:	4293      	cmp	r3, r2
   2a38a:	d141      	bne.n	2a410 <nct_mqtt_evt_handler+0x258>
			evt.type = NCT_EVT_CC_CONNECTED;
   2a38c:	2301      	movs	r3, #1
   2a38e:	e768      	b.n	2a262 <nct_mqtt_evt_handler+0xaa>
		LOG_DBG("MQTT_EVT_UNSUBACK");
   2a390:	2304      	movs	r3, #4
   2a392:	f04f 0000 	mov.w	r0, #0
   2a396:	4a23      	ldr	r2, [pc, #140]	; (2a424 <nct_mqtt_evt_handler+0x26c>)
   2a398:	f363 0007 	bfi	r0, r3, #0, #8
   2a39c:	4b20      	ldr	r3, [pc, #128]	; (2a420 <nct_mqtt_evt_handler+0x268>)
   2a39e:	492e      	ldr	r1, [pc, #184]	; (2a458 <nct_mqtt_evt_handler+0x2a0>)
   2a3a0:	1a9b      	subs	r3, r3, r2
   2a3a2:	08db      	lsrs	r3, r3, #3
   2a3a4:	f363 108f 	bfi	r0, r3, #6, #10
   2a3a8:	4a20      	ldr	r2, [pc, #128]	; (2a42c <nct_mqtt_evt_handler+0x274>)
   2a3aa:	f012 f96a 	bl	3c682 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   2a3ae:	f240 43d2 	movw	r3, #1234	; 0x4d2
   2a3b2:	88a2      	ldrh	r2, [r4, #4]
   2a3b4:	429a      	cmp	r2, r3
   2a3b6:	d181      	bne.n	2a2bc <nct_mqtt_evt_handler+0x104>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   2a3b8:	2307      	movs	r3, #7
   2a3ba:	e752      	b.n	2a262 <nct_mqtt_evt_handler+0xaa>
		LOG_DBG("MQTT_EVT_PUBACK: id = %d result = %d",
   2a3bc:	2304      	movs	r3, #4
   2a3be:	f04f 0000 	mov.w	r0, #0
   2a3c2:	4a18      	ldr	r2, [pc, #96]	; (2a424 <nct_mqtt_evt_handler+0x26c>)
   2a3c4:	f363 0007 	bfi	r0, r3, #0, #8
   2a3c8:	4b15      	ldr	r3, [pc, #84]	; (2a420 <nct_mqtt_evt_handler+0x268>)
   2a3ca:	4924      	ldr	r1, [pc, #144]	; (2a45c <nct_mqtt_evt_handler+0x2a4>)
   2a3cc:	1a9b      	subs	r3, r3, r2
   2a3ce:	08db      	lsrs	r3, r3, #3
   2a3d0:	f363 108f 	bfi	r0, r3, #6, #10
   2a3d4:	69e3      	ldr	r3, [r4, #28]
   2a3d6:	4a15      	ldr	r2, [pc, #84]	; (2a42c <nct_mqtt_evt_handler+0x274>)
   2a3d8:	9300      	str	r3, [sp, #0]
   2a3da:	88a3      	ldrh	r3, [r4, #4]
   2a3dc:	f012 f951 	bl	3c682 <log_string_sync>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   2a3e0:	2304      	movs	r3, #4
   2a3e2:	f88d 3018 	strb.w	r3, [sp, #24]
		evt.param.data_id = _mqtt_evt->param.puback.message_id;
   2a3e6:	88a3      	ldrh	r3, [r4, #4]
   2a3e8:	9305      	str	r3, [sp, #20]
	if (event_notify) {
   2a3ea:	e793      	b.n	2a314 <nct_mqtt_evt_handler+0x15c>
		LOG_DBG("MQTT_EVT_DISCONNECT: result = %d", _mqtt_evt->result);
   2a3ec:	2304      	movs	r3, #4
   2a3ee:	f04f 0000 	mov.w	r0, #0
   2a3f2:	4a0c      	ldr	r2, [pc, #48]	; (2a424 <nct_mqtt_evt_handler+0x26c>)
   2a3f4:	f363 0007 	bfi	r0, r3, #0, #8
   2a3f8:	4b09      	ldr	r3, [pc, #36]	; (2a420 <nct_mqtt_evt_handler+0x268>)
   2a3fa:	4919      	ldr	r1, [pc, #100]	; (2a460 <nct_mqtt_evt_handler+0x2a8>)
   2a3fc:	1a9b      	subs	r3, r3, r2
   2a3fe:	08db      	lsrs	r3, r3, #3
   2a400:	f363 108f 	bfi	r0, r3, #6, #10
   2a404:	4a09      	ldr	r2, [pc, #36]	; (2a42c <nct_mqtt_evt_handler+0x274>)
   2a406:	69e3      	ldr	r3, [r4, #28]
   2a408:	f012 f93b 	bl	3c682 <log_string_sync>
		evt.type = NCT_EVT_DISCONNECTED;
   2a40c:	2309      	movs	r3, #9
   2a40e:	e728      	b.n	2a262 <nct_mqtt_evt_handler+0xaa>
		if (_mqtt_evt->param.suback.message_id == NCT_DC_SUBSCRIBE_ID) {
   2a410:	f242 223d 	movw	r2, #8765	; 0x223d
   2a414:	4293      	cmp	r3, r2
   2a416:	f47f af51 	bne.w	2a2bc <nct_mqtt_evt_handler+0x104>
			evt.type = NCT_EVT_DC_CONNECTED;
   2a41a:	2302      	movs	r3, #2
   2a41c:	e721      	b.n	2a262 <nct_mqtt_evt_handler+0xaa>
   2a41e:	bf00      	nop
   2a420:	000403bc 	.word	0x000403bc
   2a424:	000402cc 	.word	0x000402cc
   2a428:	00044c1a 	.word	0x00044c1a
   2a42c:	00044757 	.word	0x00044757
   2a430:	00044c40 	.word	0x00044c40
   2a434:	00044c61 	.word	0x00044c61
   2a438:	00044c7a 	.word	0x00044c7a
   2a43c:	00044c8f 	.word	0x00044c8f
   2a440:	2002405c 	.word	0x2002405c
   2a444:	00044cb6 	.word	0x00044cb6
   2a448:	00040c0c 	.word	0x00040c0c
   2a44c:	00040c30 	.word	0x00040c30
   2a450:	00044d62 	.word	0x00044d62
   2a454:	00044cd5 	.word	0x00044cd5
   2a458:	00044cfe 	.word	0x00044cfe
   2a45c:	00044d14 	.word	0x00044d14
   2a460:	00044d3d 	.word	0x00044d3d

0002a464 <nct_mqtt_connect>:
{
   2a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	mqtt_client_init(&nct.client);
   2a466:	4c2e      	ldr	r4, [pc, #184]	; (2a520 <nct_mqtt_connect+0xbc>)
   2a468:	f104 0018 	add.w	r0, r4, #24
   2a46c:	f012 fe4b 	bl	3d106 <mqtt_client_init>
	nct.client.evt_cb = nct_mqtt_evt_handler;
   2a470:	4b2c      	ldr	r3, [pc, #176]	; (2a524 <nct_mqtt_connect+0xc0>)
	nct.client.client_id.utf8 = (u8_t *)client_id_buf;
   2a472:	482d      	ldr	r0, [pc, #180]	; (2a528 <nct_mqtt_connect+0xc4>)
	nct.client.broker = (struct sockaddr *)&nct.broker;
   2a474:	f104 0794 	add.w	r7, r4, #148	; 0x94
	nct.client.evt_cb = nct_mqtt_evt_handler;
   2a478:	67a3      	str	r3, [r4, #120]	; 0x78
	nct.client.broker = (struct sockaddr *)&nct.broker;
   2a47a:	6667      	str	r7, [r4, #100]	; 0x64
	nct.client.client_id.utf8 = (u8_t *)client_id_buf;
   2a47c:	65e0      	str	r0, [r4, #92]	; 0x5c
	nct.client.client_id.size = strlen(client_id_buf);
   2a47e:	f7f2 fe51 	bl	1d124 <strlen>
	nct.client.protocol_version = MQTT_VERSION_3_1_1;
   2a482:	2304      	movs	r3, #4
   2a484:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	nct.client.password = NULL;
   2a488:	2300      	movs	r3, #0
	nct.client.user_name = NULL;
   2a48a:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
	nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2a48e:	2301      	movs	r3, #1
   2a490:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nct.client.rx_buf = nct.rx_buf;
   2a494:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
   2a498:	67e3      	str	r3, [r4, #124]	; 0x7c
   2a49a:	4626      	mov	r6, r4
	nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2a49c:	f44f 7380 	mov.w	r3, #256	; 0x100
	nct.client.tx_buf = nct.tx_buf;
   2a4a0:	f504 72e4 	add.w	r2, r4, #456	; 0x1c8
   2a4a4:	f104 0544 	add.w	r5, r4, #68	; 0x44
	nct.client.client_id.size = strlen(client_id_buf);
   2a4a8:	6620      	str	r0, [r4, #96]	; 0x60
	nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2a4aa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	nct.client.tx_buf_size = sizeof(nct.tx_buf);
   2a4ae:	e9c4 2321 	strd	r2, r3, [r4, #132]	; 0x84
	memcpy(tls_config, &nct.tls_config, sizeof(struct mqtt_sec_config));
   2a4b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2a4b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2a4b6:	e896 0003 	ldmia.w	r6, {r0, r1}
   2a4ba:	e885 0003 	stmia.w	r5, {r0, r1}
	err = aws_fota_init(&nct.client, aws_fota_cb_handler);
   2a4be:	491b      	ldr	r1, [pc, #108]	; (2a52c <nct_mqtt_connect+0xc8>)
   2a4c0:	f104 0018 	add.w	r0, r4, #24
   2a4c4:	f002 f976 	bl	2c7b4 <aws_fota_init>
	if (err != 0) {
   2a4c8:	4602      	mov	r2, r0
   2a4ca:	b188      	cbz	r0, 2a4f0 <nct_mqtt_connect+0x8c>
		LOG_ERR("aws_fota_init failed %d", err);
   2a4cc:	2301      	movs	r3, #1
   2a4ce:	f04f 0000 	mov.w	r0, #0
   2a4d2:	4917      	ldr	r1, [pc, #92]	; (2a530 <nct_mqtt_connect+0xcc>)
   2a4d4:	f363 0007 	bfi	r0, r3, #0, #8
   2a4d8:	4b16      	ldr	r3, [pc, #88]	; (2a534 <nct_mqtt_connect+0xd0>)
		return -ENOEXEC;
   2a4da:	f06f 0407 	mvn.w	r4, #7
   2a4de:	1a5b      	subs	r3, r3, r1
   2a4e0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("aws_fota_init failed %d", err);
   2a4e2:	f363 108f 	bfi	r0, r3, #6, #10
   2a4e6:	4914      	ldr	r1, [pc, #80]	; (2a538 <nct_mqtt_connect+0xd4>)
   2a4e8:	f012 f8cb 	bl	3c682 <log_string_sync>
}
   2a4ec:	4620      	mov	r0, r4
   2a4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	err = mqtt_connect(&nct.client);
   2a4f0:	f104 0018 	add.w	r0, r4, #24
   2a4f4:	f012 fe21 	bl	3d13a <mqtt_connect>
	if (err != 0) {
   2a4f8:	4604      	mov	r4, r0
   2a4fa:	2800      	cmp	r0, #0
   2a4fc:	d0f6      	beq.n	2a4ec <nct_mqtt_connect+0x88>
		LOG_DBG("mqtt_connect failed %d", err);
   2a4fe:	2304      	movs	r3, #4
   2a500:	f04f 0000 	mov.w	r0, #0
   2a504:	4a0a      	ldr	r2, [pc, #40]	; (2a530 <nct_mqtt_connect+0xcc>)
   2a506:	f363 0007 	bfi	r0, r3, #0, #8
   2a50a:	4b0a      	ldr	r3, [pc, #40]	; (2a534 <nct_mqtt_connect+0xd0>)
   2a50c:	490b      	ldr	r1, [pc, #44]	; (2a53c <nct_mqtt_connect+0xd8>)
   2a50e:	1a9b      	subs	r3, r3, r2
   2a510:	08db      	lsrs	r3, r3, #3
   2a512:	f363 108f 	bfi	r0, r3, #6, #10
   2a516:	4a0a      	ldr	r2, [pc, #40]	; (2a540 <nct_mqtt_connect+0xdc>)
   2a518:	4623      	mov	r3, r4
   2a51a:	f012 f8b2 	bl	3c682 <log_string_sync>
   2a51e:	e7e5      	b.n	2a4ec <nct_mqtt_connect+0x88>
   2a520:	20023d94 	.word	0x20023d94
   2a524:	0002a1b9 	.word	0x0002a1b9
   2a528:	2002af82 	.word	0x2002af82
   2a52c:	0002a065 	.word	0x0002a065
   2a530:	000402cc 	.word	0x000402cc
   2a534:	000403bc 	.word	0x000403bc
   2a538:	00044be7 	.word	0x00044be7
   2a53c:	00044bff 	.word	0x00044bff
   2a540:	00044746 	.word	0x00044746

0002a544 <nct_init>:

int nct_init(void)
{
   2a544:	b530      	push	{r4, r5, lr}
   2a546:	b085      	sub	sp, #20
	int err;

	dc_endpoint_reset();
   2a548:	f7ff fd80 	bl	2a04c <dc_endpoint_reset>
	at_socket_fd = nrf_socket(NRF_AF_LTE, NRF_SOCK_DGRAM, NRF_PROTO_AT);
   2a54c:	f240 2201 	movw	r2, #513	; 0x201
   2a550:	2102      	movs	r1, #2
   2a552:	2066      	movs	r0, #102	; 0x66
   2a554:	f008 fa26 	bl	329a4 <nrf_socket>
	__ASSERT_NO_MSG(at_socket_fd >= 0);
   2a558:	1e04      	subs	r4, r0, #0
   2a55a:	da0b      	bge.n	2a574 <nct_init+0x30>
   2a55c:	4980      	ldr	r1, [pc, #512]	; (2a760 <nct_init+0x21c>)
   2a55e:	4881      	ldr	r0, [pc, #516]	; (2a764 <nct_init+0x220>)
   2a560:	f44f 738a 	mov.w	r3, #276	; 0x114
   2a564:	4a80      	ldr	r2, [pc, #512]	; (2a768 <nct_init+0x224>)
   2a566:	f012 f835 	bl	3c5d4 <printk>
   2a56a:	f44f 718a 	mov.w	r1, #276	; 0x114
   2a56e:	487e      	ldr	r0, [pc, #504]	; (2a768 <nct_init+0x224>)
   2a570:	f012 f876 	bl	3c660 <assert_post_action>
	bytes_written = nrf_write(at_socket_fd, "AT+CGSN", 7);
   2a574:	2207      	movs	r2, #7
   2a576:	497d      	ldr	r1, [pc, #500]	; (2a76c <nct_init+0x228>)
   2a578:	4620      	mov	r0, r4
   2a57a:	f008 fa69 	bl	32a50 <nrf_write>
	__ASSERT_NO_MSG(bytes_written == 7);
   2a57e:	2807      	cmp	r0, #7
   2a580:	d00b      	beq.n	2a59a <nct_init+0x56>
   2a582:	497b      	ldr	r1, [pc, #492]	; (2a770 <nct_init+0x22c>)
   2a584:	4877      	ldr	r0, [pc, #476]	; (2a764 <nct_init+0x220>)
   2a586:	f240 1317 	movw	r3, #279	; 0x117
   2a58a:	4a77      	ldr	r2, [pc, #476]	; (2a768 <nct_init+0x224>)
   2a58c:	f012 f822 	bl	3c5d4 <printk>
   2a590:	f240 1117 	movw	r1, #279	; 0x117
   2a594:	4874      	ldr	r0, [pc, #464]	; (2a768 <nct_init+0x224>)
   2a596:	f012 f863 	bl	3c660 <assert_post_action>
	bytes_read = nrf_read(at_socket_fd, imei_buf, NRF_IMEI_LEN);
   2a59a:	220f      	movs	r2, #15
   2a59c:	4669      	mov	r1, sp
   2a59e:	4620      	mov	r0, r4
   2a5a0:	f008 faa2 	bl	32ae8 <nrf_read>
	__ASSERT_NO_MSG(bytes_read == NRF_IMEI_LEN);
   2a5a4:	280f      	cmp	r0, #15
   2a5a6:	d00b      	beq.n	2a5c0 <nct_init+0x7c>
   2a5a8:	4972      	ldr	r1, [pc, #456]	; (2a774 <nct_init+0x230>)
   2a5aa:	486e      	ldr	r0, [pc, #440]	; (2a764 <nct_init+0x220>)
   2a5ac:	f44f 738d 	mov.w	r3, #282	; 0x11a
   2a5b0:	4a6d      	ldr	r2, [pc, #436]	; (2a768 <nct_init+0x224>)
   2a5b2:	f012 f80f 	bl	3c5d4 <printk>
   2a5b6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2a5ba:	486b      	ldr	r0, [pc, #428]	; (2a768 <nct_init+0x224>)
   2a5bc:	f012 f850 	bl	3c660 <assert_post_action>
	imei_buf[NRF_IMEI_LEN] = 0;
   2a5c0:	2300      	movs	r3, #0
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "nrf-%s", imei_buf);
   2a5c2:	4a6d      	ldr	r2, [pc, #436]	; (2a778 <nct_init+0x234>)
	imei_buf[NRF_IMEI_LEN] = 0;
   2a5c4:	f88d 300f 	strb.w	r3, [sp, #15]
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "nrf-%s", imei_buf);
   2a5c8:	2114      	movs	r1, #20
   2a5ca:	466b      	mov	r3, sp
   2a5cc:	486b      	ldr	r0, [pc, #428]	; (2a77c <nct_init+0x238>)
   2a5ce:	f010 f9ab 	bl	3a928 <sniprintf>
	ret = nrf_close(at_socket_fd);
   2a5d2:	4620      	mov	r0, r4
   2a5d4:	f008 f9f8 	bl	329c8 <nrf_close>
	__ASSERT_NO_MSG(ret == 0);
   2a5d8:	b158      	cbz	r0, 2a5f2 <nct_init+0xae>
   2a5da:	4969      	ldr	r1, [pc, #420]	; (2a780 <nct_init+0x23c>)
   2a5dc:	4861      	ldr	r0, [pc, #388]	; (2a764 <nct_init+0x220>)
   2a5de:	f44f 7390 	mov.w	r3, #288	; 0x120
   2a5e2:	4a61      	ldr	r2, [pc, #388]	; (2a768 <nct_init+0x224>)
   2a5e4:	f011 fff6 	bl	3c5d4 <printk>
   2a5e8:	f44f 7190 	mov.w	r1, #288	; 0x120
   2a5ec:	485e      	ldr	r0, [pc, #376]	; (2a768 <nct_init+0x224>)
   2a5ee:	f012 f837 	bl	3c660 <assert_post_action>
	LOG_DBG("client_id = %s", log_strdup(id));
   2a5f2:	2304      	movs	r3, #4
   2a5f4:	f04f 0500 	mov.w	r5, #0
   2a5f8:	4c62      	ldr	r4, [pc, #392]	; (2a784 <nct_init+0x240>)
   2a5fa:	f363 0507 	bfi	r5, r3, #0, #8
   2a5fe:	4b62      	ldr	r3, [pc, #392]	; (2a788 <nct_init+0x244>)
   2a600:	485e      	ldr	r0, [pc, #376]	; (2a77c <nct_init+0x238>)
   2a602:	1ae4      	subs	r4, r4, r3
   2a604:	f012 f84f 	bl	3c6a6 <log_strdup>
   2a608:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2a60c:	f364 158f 	bfi	r5, r4, #6, #10
   2a610:	4603      	mov	r3, r0
   2a612:	4a5e      	ldr	r2, [pc, #376]	; (2a78c <nct_init+0x248>)
   2a614:	495e      	ldr	r1, [pc, #376]	; (2a790 <nct_init+0x24c>)
   2a616:	4628      	mov	r0, r5
   2a618:	f012 f833 	bl	3c682 <log_string_sync>
	ret = snprintf(shadow_base_topic, sizeof(shadow_base_topic),
   2a61c:	4b57      	ldr	r3, [pc, #348]	; (2a77c <nct_init+0x238>)
   2a61e:	4a5d      	ldr	r2, [pc, #372]	; (2a794 <nct_init+0x250>)
   2a620:	2127      	movs	r1, #39	; 0x27
   2a622:	485d      	ldr	r0, [pc, #372]	; (2a798 <nct_init+0x254>)
   2a624:	f010 f980 	bl	3a928 <sniprintf>
	if (ret != NCT_SHADOW_BASE_TOPIC_LEN) {
   2a628:	2826      	cmp	r0, #38	; 0x26
   2a62a:	d003      	beq.n	2a634 <nct_init+0xf0>
		return -ENOMEM;
   2a62c:	f06f 000b 	mvn.w	r0, #11
	if (err) {
		return err;
	}

	return nct_provision();
}
   2a630:	b005      	add	sp, #20
   2a632:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("shadow_base_topic: %s", log_strdup(shadow_base_topic));
   2a634:	2304      	movs	r3, #4
   2a636:	f04f 0500 	mov.w	r5, #0
   2a63a:	4857      	ldr	r0, [pc, #348]	; (2a798 <nct_init+0x254>)
   2a63c:	f363 0507 	bfi	r5, r3, #0, #8
   2a640:	f012 f831 	bl	3c6a6 <log_strdup>
   2a644:	f364 158f 	bfi	r5, r4, #6, #10
   2a648:	4603      	mov	r3, r0
   2a64a:	4a54      	ldr	r2, [pc, #336]	; (2a79c <nct_init+0x258>)
   2a64c:	4954      	ldr	r1, [pc, #336]	; (2a7a0 <nct_init+0x25c>)
   2a64e:	4628      	mov	r0, r5
   2a650:	f012 f817 	bl	3c682 <log_string_sync>
	ret = snprintf(accepted_topic, sizeof(accepted_topic),
   2a654:	4b49      	ldr	r3, [pc, #292]	; (2a77c <nct_init+0x238>)
   2a656:	4a53      	ldr	r2, [pc, #332]	; (2a7a4 <nct_init+0x260>)
   2a658:	2128      	movs	r1, #40	; 0x28
   2a65a:	4853      	ldr	r0, [pc, #332]	; (2a7a8 <nct_init+0x264>)
   2a65c:	f010 f964 	bl	3a928 <sniprintf>
	if (ret != NCT_ACCEPTED_TOPIC_LEN) {
   2a660:	2827      	cmp	r0, #39	; 0x27
   2a662:	d1e3      	bne.n	2a62c <nct_init+0xe8>
	LOG_DBG("accepted_topic: %s", log_strdup(accepted_topic));
   2a664:	2304      	movs	r3, #4
   2a666:	f04f 0500 	mov.w	r5, #0
   2a66a:	484f      	ldr	r0, [pc, #316]	; (2a7a8 <nct_init+0x264>)
   2a66c:	f363 0507 	bfi	r5, r3, #0, #8
   2a670:	f012 f819 	bl	3c6a6 <log_strdup>
   2a674:	f364 158f 	bfi	r5, r4, #6, #10
   2a678:	4603      	mov	r3, r0
   2a67a:	4a48      	ldr	r2, [pc, #288]	; (2a79c <nct_init+0x258>)
   2a67c:	494b      	ldr	r1, [pc, #300]	; (2a7ac <nct_init+0x268>)
   2a67e:	4628      	mov	r0, r5
   2a680:	f011 ffff 	bl	3c682 <log_string_sync>
	ret = snprintf(rejected_topic, sizeof(rejected_topic),
   2a684:	4b3d      	ldr	r3, [pc, #244]	; (2a77c <nct_init+0x238>)
   2a686:	4a4a      	ldr	r2, [pc, #296]	; (2a7b0 <nct_init+0x26c>)
   2a688:	2134      	movs	r1, #52	; 0x34
   2a68a:	484a      	ldr	r0, [pc, #296]	; (2a7b4 <nct_init+0x270>)
   2a68c:	f010 f94c 	bl	3a928 <sniprintf>
	if (ret != NCT_REJECTED_TOPIC_LEN) {
   2a690:	2833      	cmp	r0, #51	; 0x33
   2a692:	d1cb      	bne.n	2a62c <nct_init+0xe8>
	LOG_DBG("rejected_topic: %s", log_strdup(rejected_topic));
   2a694:	2304      	movs	r3, #4
   2a696:	f04f 0500 	mov.w	r5, #0
   2a69a:	4846      	ldr	r0, [pc, #280]	; (2a7b4 <nct_init+0x270>)
   2a69c:	f363 0507 	bfi	r5, r3, #0, #8
   2a6a0:	f012 f801 	bl	3c6a6 <log_strdup>
   2a6a4:	f364 158f 	bfi	r5, r4, #6, #10
   2a6a8:	4603      	mov	r3, r0
   2a6aa:	4a3c      	ldr	r2, [pc, #240]	; (2a79c <nct_init+0x258>)
   2a6ac:	4942      	ldr	r1, [pc, #264]	; (2a7b8 <nct_init+0x274>)
   2a6ae:	4628      	mov	r0, r5
   2a6b0:	f011 ffe7 	bl	3c682 <log_string_sync>
	ret = snprintf(update_delta_topic, sizeof(update_delta_topic),
   2a6b4:	4b31      	ldr	r3, [pc, #196]	; (2a77c <nct_init+0x238>)
   2a6b6:	4a41      	ldr	r2, [pc, #260]	; (2a7bc <nct_init+0x278>)
   2a6b8:	2134      	movs	r1, #52	; 0x34
   2a6ba:	4841      	ldr	r0, [pc, #260]	; (2a7c0 <nct_init+0x27c>)
   2a6bc:	f010 f934 	bl	3a928 <sniprintf>
	if (ret != NCT_UPDATE_DELTA_TOPIC_LEN) {
   2a6c0:	2833      	cmp	r0, #51	; 0x33
   2a6c2:	d1b3      	bne.n	2a62c <nct_init+0xe8>
	LOG_DBG("update_delta_topic: %s", log_strdup(update_delta_topic));
   2a6c4:	2304      	movs	r3, #4
   2a6c6:	f04f 0500 	mov.w	r5, #0
   2a6ca:	483d      	ldr	r0, [pc, #244]	; (2a7c0 <nct_init+0x27c>)
   2a6cc:	f363 0507 	bfi	r5, r3, #0, #8
   2a6d0:	f011 ffe9 	bl	3c6a6 <log_strdup>
   2a6d4:	f364 158f 	bfi	r5, r4, #6, #10
   2a6d8:	4603      	mov	r3, r0
   2a6da:	4a30      	ldr	r2, [pc, #192]	; (2a79c <nct_init+0x258>)
   2a6dc:	4939      	ldr	r1, [pc, #228]	; (2a7c4 <nct_init+0x280>)
   2a6de:	4628      	mov	r0, r5
   2a6e0:	f011 ffcf 	bl	3c682 <log_string_sync>
	ret = snprintf(update_topic, sizeof(update_topic), NCT_UPDATE_TOPIC,
   2a6e4:	4b25      	ldr	r3, [pc, #148]	; (2a77c <nct_init+0x238>)
   2a6e6:	4a38      	ldr	r2, [pc, #224]	; (2a7c8 <nct_init+0x284>)
   2a6e8:	212e      	movs	r1, #46	; 0x2e
   2a6ea:	4838      	ldr	r0, [pc, #224]	; (2a7cc <nct_init+0x288>)
   2a6ec:	f010 f91c 	bl	3a928 <sniprintf>
	if (ret != NCT_UPDATE_TOPIC_LEN) {
   2a6f0:	282d      	cmp	r0, #45	; 0x2d
   2a6f2:	d19b      	bne.n	2a62c <nct_init+0xe8>
	LOG_DBG("update_topic: %s", log_strdup(update_topic));
   2a6f4:	2304      	movs	r3, #4
   2a6f6:	f04f 0500 	mov.w	r5, #0
   2a6fa:	4834      	ldr	r0, [pc, #208]	; (2a7cc <nct_init+0x288>)
   2a6fc:	f363 0507 	bfi	r5, r3, #0, #8
   2a700:	f011 ffd1 	bl	3c6a6 <log_strdup>
   2a704:	f364 158f 	bfi	r5, r4, #6, #10
   2a708:	4603      	mov	r3, r0
   2a70a:	4a24      	ldr	r2, [pc, #144]	; (2a79c <nct_init+0x258>)
   2a70c:	4930      	ldr	r1, [pc, #192]	; (2a7d0 <nct_init+0x28c>)
   2a70e:	4628      	mov	r0, r5
   2a710:	f011 ffb7 	bl	3c682 <log_string_sync>
	ret = snprintf(shadow_get_topic, sizeof(shadow_get_topic),
   2a714:	4b19      	ldr	r3, [pc, #100]	; (2a77c <nct_init+0x238>)
   2a716:	4a2f      	ldr	r2, [pc, #188]	; (2a7d4 <nct_init+0x290>)
   2a718:	212b      	movs	r1, #43	; 0x2b
   2a71a:	482f      	ldr	r0, [pc, #188]	; (2a7d8 <nct_init+0x294>)
   2a71c:	f010 f904 	bl	3a928 <sniprintf>
	if (ret != NCT_SHADOW_GET_LEN) {
   2a720:	282a      	cmp	r0, #42	; 0x2a
   2a722:	d183      	bne.n	2a62c <nct_init+0xe8>
	LOG_DBG("shadow_get_topic: %s", log_strdup(shadow_get_topic));
   2a724:	2304      	movs	r3, #4
   2a726:	f04f 0500 	mov.w	r5, #0
   2a72a:	482b      	ldr	r0, [pc, #172]	; (2a7d8 <nct_init+0x294>)
   2a72c:	f363 0507 	bfi	r5, r3, #0, #8
   2a730:	f011 ffb9 	bl	3c6a6 <log_strdup>
   2a734:	f364 158f 	bfi	r5, r4, #6, #10
   2a738:	4603      	mov	r3, r0
   2a73a:	4a18      	ldr	r2, [pc, #96]	; (2a79c <nct_init+0x258>)
   2a73c:	4628      	mov	r0, r5
   2a73e:	4927      	ldr	r1, [pc, #156]	; (2a7dc <nct_init+0x298>)
   2a740:	f011 ff9f 	bl	3c682 <log_string_sync>
	nct.tls_config.cipher_count = 0;
   2a744:	2202      	movs	r2, #2
   2a746:	2000      	movs	r0, #0
	nct.tls_config.peer_verify = 2;
   2a748:	4b25      	ldr	r3, [pc, #148]	; (2a7e0 <nct_init+0x29c>)
	nct.tls_config.cipher_count = 0;
   2a74a:	e9c3 2000 	strd	r2, r0, [r3]
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   2a74e:	2201      	movs	r2, #1
   2a750:	60da      	str	r2, [r3, #12]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2a752:	4a24      	ldr	r2, [pc, #144]	; (2a7e4 <nct_init+0x2a0>)
	nct.tls_config.cipher_list = NULL;
   2a754:	6098      	str	r0, [r3, #8]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2a756:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   2a758:	4a23      	ldr	r2, [pc, #140]	; (2a7e8 <nct_init+0x2a4>)
   2a75a:	615a      	str	r2, [r3, #20]
	return nct_provision();
   2a75c:	e768      	b.n	2a630 <nct_init+0xec>
   2a75e:	bf00      	nop
   2a760:	00044a2d 	.word	0x00044a2d
   2a764:	00041757 	.word	0x00041757
   2a768:	000449e2 	.word	0x000449e2
   2a76c:	00043e5d 	.word	0x00043e5d
   2a770:	00044a3f 	.word	0x00044a3f
   2a774:	00044a52 	.word	0x00044a52
   2a778:	00044a63 	.word	0x00044a63
   2a77c:	2002af82 	.word	0x2002af82
   2a780:	00043229 	.word	0x00043229
   2a784:	000403bc 	.word	0x000403bc
   2a788:	000402cc 	.word	0x000402cc
   2a78c:	0004470c 	.word	0x0004470c
   2a790:	00044a6a 	.word	0x00044a6a
   2a794:	00044a7d 	.word	0x00044a7d
   2a798:	2002afca 	.word	0x2002afca
   2a79c:	0004471e 	.word	0x0004471e
   2a7a0:	00044a93 	.word	0x00044a93
   2a7a4:	00044aad 	.word	0x00044aad
   2a7a8:	2002af5a 	.word	0x2002af5a
   2a7ac:	00044ac4 	.word	0x00044ac4
   2a7b0:	00044adb 	.word	0x00044adb
   2a7b4:	2002af96 	.word	0x2002af96
   2a7b8:	00044afe 	.word	0x00044afe
   2a7bc:	00044b15 	.word	0x00044b15
   2a7c0:	2002b01c 	.word	0x2002b01c
   2a7c4:	00044b38 	.word	0x00044b38
   2a7c8:	00044b53 	.word	0x00044b53
   2a7cc:	2002b050 	.word	0x2002b050
   2a7d0:	00044b70 	.word	0x00044b70
   2a7d4:	00044b85 	.word	0x00044b85
   2a7d8:	2002aff1 	.word	0x2002aff1
   2a7dc:	00044b9f 	.word	0x00044b9f
   2a7e0:	20023d94 	.word	0x20023d94
   2a7e4:	20031564 	.word	0x20031564
   2a7e8:	00044bb8 	.word	0x00044bb8

0002a7ec <nct_connect>:

	return err;
}
#else
int nct_connect(void)
{
   2a7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a7f0:	b08c      	sub	sp, #48	; 0x30
	int err;
	struct addrinfo *result;
	struct addrinfo *addr;
	struct addrinfo hints = {
   2a7f2:	2220      	movs	r2, #32
   2a7f4:	2100      	movs	r1, #0
   2a7f6:	a804      	add	r0, sp, #16
   2a7f8:	f014 fa87 	bl	3ed0a <memset>
   2a7fc:	2301      	movs	r3, #1

static inline int getaddrinfo(const char *node, const char *service,
			      const struct addrinfo *hints,
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
   2a7fe:	4c48      	ldr	r4, [pc, #288]	; (2a920 <nct_connect+0x134>)
   2a800:	e9cd 3305 	strd	r3, r3, [sp, #20]
   2a804:	6823      	ldr	r3, [r4, #0]
   2a806:	b94b      	cbnz	r3, 2a81c <nct_connect+0x30>
   2a808:	4946      	ldr	r1, [pc, #280]	; (2a924 <nct_connect+0x138>)
   2a80a:	4847      	ldr	r0, [pc, #284]	; (2a928 <nct_connect+0x13c>)
   2a80c:	2393      	movs	r3, #147	; 0x93
   2a80e:	4a47      	ldr	r2, [pc, #284]	; (2a92c <nct_connect+0x140>)
   2a810:	f011 fee0 	bl	3c5d4 <printk>
   2a814:	2193      	movs	r1, #147	; 0x93
   2a816:	4845      	ldr	r0, [pc, #276]	; (2a92c <nct_connect+0x140>)
   2a818:	f011 ff22 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   2a81c:	6823      	ldr	r3, [r4, #0]
   2a81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2a820:	b94b      	cbnz	r3, 2a836 <nct_connect+0x4a>
   2a822:	4943      	ldr	r1, [pc, #268]	; (2a930 <nct_connect+0x144>)
   2a824:	4840      	ldr	r0, [pc, #256]	; (2a928 <nct_connect+0x13c>)
   2a826:	2394      	movs	r3, #148	; 0x94
   2a828:	4a40      	ldr	r2, [pc, #256]	; (2a92c <nct_connect+0x140>)
   2a82a:	f011 fed3 	bl	3c5d4 <printk>
   2a82e:	2194      	movs	r1, #148	; 0x94
   2a830:	483e      	ldr	r0, [pc, #248]	; (2a92c <nct_connect+0x140>)
   2a832:	f011 ff15 	bl	3c660 <assert_post_action>

	return socket_ops->getaddrinfo(node, service, hints, res);
   2a836:	6823      	ldr	r3, [r4, #0]
   2a838:	aa04      	add	r2, sp, #16
   2a83a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
   2a83c:	2100      	movs	r1, #0
   2a83e:	ab03      	add	r3, sp, #12
   2a840:	483c      	ldr	r0, [pc, #240]	; (2a934 <nct_connect+0x148>)
   2a842:	47a8      	blx	r5
		.ai_family = NRF_CLOUD_AF_FAMILY,
		.ai_socktype = SOCK_STREAM
	};

	err = getaddrinfo(NRF_CLOUD_HOSTNAME, NULL, &hints, &result);
	if (err) {
   2a844:	4b3c      	ldr	r3, [pc, #240]	; (2a938 <nct_connect+0x14c>)
   2a846:	4d3d      	ldr	r5, [pc, #244]	; (2a93c <nct_connect+0x150>)
   2a848:	1aed      	subs	r5, r5, r3
   2a84a:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2a84e:	4603      	mov	r3, r0
   2a850:	b180      	cbz	r0, 2a874 <nct_connect+0x88>
		LOG_DBG("getaddrinfo failed %d", err);
   2a852:	2204      	movs	r2, #4
   2a854:	f04f 0000 	mov.w	r0, #0
   2a858:	f362 0007 	bfi	r0, r2, #0, #8
   2a85c:	f365 108f 	bfi	r0, r5, #6, #10
   2a860:	4a37      	ldr	r2, [pc, #220]	; (2a940 <nct_connect+0x154>)
   2a862:	4938      	ldr	r1, [pc, #224]	; (2a944 <nct_connect+0x158>)
   2a864:	f011 ff0d 	bl	3c682 <log_string_sync>
		return -ECHILD;
   2a868:	f06f 0509 	mvn.w	r5, #9

	/* Free the address. */
	freeaddrinfo(result);

	return err;
}
   2a86c:	4628      	mov	r0, r5
   2a86e:	b00c      	add	sp, #48	; 0x30
   2a870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   2a874:	f04f 0818 	mov.w	r8, #24
	addr = result;
   2a878:	9e03      	ldr	r6, [sp, #12]
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   2a87a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 2a940 <nct_connect+0x154>
   2a87e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 2a958 <nct_connect+0x16c>
	while (addr != NULL) {
   2a882:	b916      	cbnz	r6, 2a88a <nct_connect+0x9e>
	err = -ECHILD;
   2a884:	f06f 0509 	mvn.w	r5, #9
   2a888:	e018      	b.n	2a8bc <nct_connect+0xd0>
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   2a88a:	6933      	ldr	r3, [r6, #16]
   2a88c:	2b08      	cmp	r3, #8
   2a88e:	d134      	bne.n	2a8fa <nct_connect+0x10e>
					->sin_addr.s_addr;
   2a890:	6973      	ldr	r3, [r6, #20]
			broker->sin_addr.s_addr =
   2a892:	4a2d      	ldr	r2, [pc, #180]	; (2a948 <nct_connect+0x15c>)
					->sin_addr.s_addr;
   2a894:	685b      	ldr	r3, [r3, #4]
			broker->sin_family = AF_INET;
   2a896:	492d      	ldr	r1, [pc, #180]	; (2a94c <nct_connect+0x160>)
			broker->sin_addr.s_addr =
   2a898:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			broker->sin_family = AF_INET;
   2a89c:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
			LOG_DBG("IPv4 Address 0x%08x", broker->sin_addr.s_addr);
   2a8a0:	f04f 0000 	mov.w	r0, #0
   2a8a4:	2204      	movs	r2, #4
   2a8a6:	f362 0007 	bfi	r0, r2, #0, #8
   2a8aa:	f365 108f 	bfi	r0, r5, #6, #10
   2a8ae:	4a24      	ldr	r2, [pc, #144]	; (2a940 <nct_connect+0x154>)
   2a8b0:	4927      	ldr	r1, [pc, #156]	; (2a950 <nct_connect+0x164>)
   2a8b2:	f011 fee6 	bl	3c682 <log_string_sync>
			err = nct_mqtt_connect();
   2a8b6:	f7ff fdd5 	bl	2a464 <nct_mqtt_connect>
   2a8ba:	4605      	mov	r5, r0
}

static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
   2a8bc:	6823      	ldr	r3, [r4, #0]
	freeaddrinfo(result);
   2a8be:	9e03      	ldr	r6, [sp, #12]
   2a8c0:	b94b      	cbnz	r3, 2a8d6 <nct_connect+0xea>
   2a8c2:	4918      	ldr	r1, [pc, #96]	; (2a924 <nct_connect+0x138>)
   2a8c4:	4818      	ldr	r0, [pc, #96]	; (2a928 <nct_connect+0x13c>)
   2a8c6:	239b      	movs	r3, #155	; 0x9b
   2a8c8:	4a18      	ldr	r2, [pc, #96]	; (2a92c <nct_connect+0x140>)
   2a8ca:	f011 fe83 	bl	3c5d4 <printk>
   2a8ce:	219b      	movs	r1, #155	; 0x9b
   2a8d0:	4816      	ldr	r0, [pc, #88]	; (2a92c <nct_connect+0x140>)
   2a8d2:	f011 fec5 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   2a8d6:	6823      	ldr	r3, [r4, #0]
   2a8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2a8da:	b94b      	cbnz	r3, 2a8f0 <nct_connect+0x104>
   2a8dc:	491d      	ldr	r1, [pc, #116]	; (2a954 <nct_connect+0x168>)
   2a8de:	4812      	ldr	r0, [pc, #72]	; (2a928 <nct_connect+0x13c>)
   2a8e0:	239c      	movs	r3, #156	; 0x9c
   2a8e2:	4a12      	ldr	r2, [pc, #72]	; (2a92c <nct_connect+0x140>)
   2a8e4:	f011 fe76 	bl	3c5d4 <printk>
   2a8e8:	219c      	movs	r1, #156	; 0x9c
   2a8ea:	4810      	ldr	r0, [pc, #64]	; (2a92c <nct_connect+0x140>)
   2a8ec:	f011 feb8 	bl	3c660 <assert_post_action>

	return socket_ops->freeaddrinfo(res);
   2a8f0:	6823      	ldr	r3, [r4, #0]
   2a8f2:	4630      	mov	r0, r6
   2a8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2a8f6:	4798      	blx	r3
   2a8f8:	e7b8      	b.n	2a86c <nct_connect+0x80>
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   2a8fa:	f027 023f 	bic.w	r2, r7, #63	; 0x3f
   2a8fe:	f042 0204 	orr.w	r2, r2, #4
   2a902:	f362 0707 	bfi	r7, r2, #0, #8
   2a906:	2208      	movs	r2, #8
   2a908:	f365 178f 	bfi	r7, r5, #6, #10
   2a90c:	9200      	str	r2, [sp, #0]
   2a90e:	f8cd 8004 	str.w	r8, [sp, #4]
   2a912:	464a      	mov	r2, r9
   2a914:	4651      	mov	r1, sl
   2a916:	4638      	mov	r0, r7
   2a918:	f011 feb3 	bl	3c682 <log_string_sync>
		addr = addr->ai_next;
   2a91c:	69f6      	ldr	r6, [r6, #28]
   2a91e:	e7b0      	b.n	2a882 <nct_connect+0x96>
   2a920:	20023a4c 	.word	0x20023a4c
   2a924:	000418d1 	.word	0x000418d1
   2a928:	00041757 	.word	0x00041757
   2a92c:	000418a8 	.word	0x000418a8
   2a930:	000448ec 	.word	0x000448ec
   2a934:	00044bb8 	.word	0x00044bb8
   2a938:	000402cc 	.word	0x000402cc
   2a93c:	000403bc 	.word	0x000403bc
   2a940:	0004476c 	.word	0x0004476c
   2a944:	00044904 	.word	0x00044904
   2a948:	20023d94 	.word	0x20023d94
   2a94c:	b3220001 	.word	0xb3220001
   2a950:	0004491e 	.word	0x0004491e
   2a954:	0004495d 	.word	0x0004495d
   2a958:	00044936 	.word	0x00044936

0002a95c <nct_cc_connect>:
#endif /* defined(CONFIG_NRF_CLOUD_STATIC_IPV4) */

int nct_cc_connect(void)
{
   2a95c:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_cc_connect");
   2a95e:	2304      	movs	r3, #4
   2a960:	f04f 0000 	mov.w	r0, #0
   2a964:	4a0b      	ldr	r2, [pc, #44]	; (2a994 <nct_cc_connect+0x38>)
   2a966:	f363 0007 	bfi	r0, r3, #0, #8
   2a96a:	4b0b      	ldr	r3, [pc, #44]	; (2a998 <nct_cc_connect+0x3c>)
   2a96c:	490b      	ldr	r1, [pc, #44]	; (2a99c <nct_cc_connect+0x40>)
   2a96e:	1a9b      	subs	r3, r3, r2
   2a970:	08db      	lsrs	r3, r3, #3
   2a972:	f363 108f 	bfi	r0, r3, #6, #10
   2a976:	4a0a      	ldr	r2, [pc, #40]	; (2a9a0 <nct_cc_connect+0x44>)
   2a978:	f011 fe83 	bl	3c682 <log_string_sync>

	const struct mqtt_subscription_list subscription_list = {
   2a97c:	4b09      	ldr	r3, [pc, #36]	; (2a9a4 <nct_cc_connect+0x48>)
		.list = (struct mqtt_topic *)&nct_cc_rx_list,
		.list_count = ARRAY_SIZE(nct_cc_rx_list),
		.message_id = NCT_CC_SUBSCRIBE_ID
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   2a97e:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   2a980:	9300      	str	r3, [sp, #0]
   2a982:	4b09      	ldr	r3, [pc, #36]	; (2a9a8 <nct_cc_connect+0x4c>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   2a984:	4809      	ldr	r0, [pc, #36]	; (2a9ac <nct_cc_connect+0x50>)
	const struct mqtt_subscription_list subscription_list = {
   2a986:	9301      	str	r3, [sp, #4]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2a988:	f012 fc99 	bl	3d2be <mqtt_subscribe>
}
   2a98c:	b003      	add	sp, #12
   2a98e:	f85d fb04 	ldr.w	pc, [sp], #4
   2a992:	bf00      	nop
   2a994:	000402cc 	.word	0x000402cc
   2a998:	000403bc 	.word	0x000403bc
   2a99c:	00044877 	.word	0x00044877
   2a9a0:	00044778 	.word	0x00044778
   2a9a4:	00040c0c 	.word	0x00040c0c
   2a9a8:	04d20003 	.word	0x04d20003
   2a9ac:	20023dac 	.word	0x20023dac

0002a9b0 <nct_cc_send>:

int nct_cc_send(const struct nct_cc_data *cc_data)
{
   2a9b0:	b570      	push	{r4, r5, r6, lr}
   2a9b2:	4b34      	ldr	r3, [pc, #208]	; (2aa84 <nct_cc_send+0xd4>)
   2a9b4:	4c34      	ldr	r4, [pc, #208]	; (2aa88 <nct_cc_send+0xd8>)
   2a9b6:	b088      	sub	sp, #32
   2a9b8:	1ae4      	subs	r4, r4, r3
   2a9ba:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	static u32_t msg_id;

	if (cc_data == NULL) {
   2a9be:	4605      	mov	r5, r0
   2a9c0:	b970      	cbnz	r0, 2a9e0 <nct_cc_send+0x30>
		LOG_ERR("cc_data == NULL");
   2a9c2:	2301      	movs	r3, #1
   2a9c4:	f04f 0000 	mov.w	r0, #0
   2a9c8:	f363 0007 	bfi	r0, r3, #0, #8
   2a9cc:	f364 108f 	bfi	r0, r4, #6, #10
   2a9d0:	492e      	ldr	r1, [pc, #184]	; (2aa8c <nct_cc_send+0xdc>)
   2a9d2:	f011 fe56 	bl	3c682 <log_string_sync>
		return -EINVAL;
   2a9d6:	f06f 0515 	mvn.w	r5, #21
	if (err) {
		LOG_ERR("mqtt_publish failed %d", err);
	}

	return err;
}
   2a9da:	4628      	mov	r0, r5
   2a9dc:	b008      	add	sp, #32
   2a9de:	bd70      	pop	{r4, r5, r6, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   2a9e0:	7b06      	ldrb	r6, [r0, #12]
   2a9e2:	2e01      	cmp	r6, #1
   2a9e4:	d90d      	bls.n	2aa02 <nct_cc_send+0x52>
		LOG_ERR("opcode = %d", cc_data->opcode);
   2a9e6:	2301      	movs	r3, #1
   2a9e8:	f04f 0000 	mov.w	r0, #0
   2a9ec:	f363 0007 	bfi	r0, r3, #0, #8
   2a9f0:	f364 108f 	bfi	r0, r4, #6, #10
   2a9f4:	4632      	mov	r2, r6
   2a9f6:	4926      	ldr	r1, [pc, #152]	; (2aa90 <nct_cc_send+0xe0>)
   2a9f8:	f011 fe43 	bl	3c682 <log_string_sync>
		return -ENOTSUP;
   2a9fc:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2aa00:	e7eb      	b.n	2a9da <nct_cc_send+0x2a>
	struct mqtt_publish_param publish = {
   2aa02:	2210      	movs	r2, #16
   2aa04:	2100      	movs	r1, #0
   2aa06:	eb0d 0002 	add.w	r0, sp, r2
   2aa0a:	f014 f97e 	bl	3ed0a <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   2aa0e:	230c      	movs	r3, #12
   2aa10:	4373      	muls	r3, r6
   2aa12:	4920      	ldr	r1, [pc, #128]	; (2aa94 <nct_cc_send+0xe4>)
   2aa14:	18ca      	adds	r2, r1, r3
	struct mqtt_publish_param publish = {
   2aa16:	58cb      	ldr	r3, [r1, r3]
   2aa18:	9302      	str	r3, [sp, #8]
   2aa1a:	6853      	ldr	r3, [r2, #4]
   2aa1c:	9303      	str	r3, [sp, #12]
   2aa1e:	7a13      	ldrb	r3, [r2, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2aa20:	682a      	ldr	r2, [r5, #0]
	struct mqtt_publish_param publish = {
   2aa22:	f88d 3010 	strb.w	r3, [sp, #16]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2aa26:	b11a      	cbz	r2, 2aa30 <nct_cc_send+0x80>
   2aa28:	686b      	ldr	r3, [r5, #4]
   2aa2a:	b10b      	cbz	r3, 2aa30 <nct_cc_send+0x80>
		publish.message.payload.len = cc_data->data.len;
   2aa2c:	e9cd 3205 	strd	r3, r2, [sp, #20]
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2aa30:	68ab      	ldr	r3, [r5, #8]
   2aa32:	b313      	cbz	r3, 2aa7a <nct_cc_send+0xca>
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2aa34:	2104      	movs	r1, #4
   2aa36:	f04f 0000 	mov.w	r0, #0
   2aa3a:	f361 0007 	bfi	r0, r1, #0, #8
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2aa3e:	b29b      	uxth	r3, r3
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2aa40:	f364 108f 	bfi	r0, r4, #6, #10
   2aa44:	e9cd 6200 	strd	r6, r2, [sp]
   2aa48:	4913      	ldr	r1, [pc, #76]	; (2aa98 <nct_cc_send+0xe8>)
   2aa4a:	4a14      	ldr	r2, [pc, #80]	; (2aa9c <nct_cc_send+0xec>)
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2aa4c:	f8ad 301c 	strh.w	r3, [sp, #28]
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2aa50:	f011 fe17 	bl	3c682 <log_string_sync>
	int err = mqtt_publish(&nct.client, &publish);
   2aa54:	a902      	add	r1, sp, #8
   2aa56:	4812      	ldr	r0, [pc, #72]	; (2aaa0 <nct_cc_send+0xf0>)
   2aa58:	f012 fbb3 	bl	3d1c2 <mqtt_publish>
	if (err) {
   2aa5c:	4605      	mov	r5, r0
   2aa5e:	2800      	cmp	r0, #0
   2aa60:	d0bb      	beq.n	2a9da <nct_cc_send+0x2a>
		LOG_ERR("mqtt_publish failed %d", err);
   2aa62:	2301      	movs	r3, #1
   2aa64:	f04f 0000 	mov.w	r0, #0
   2aa68:	f363 0007 	bfi	r0, r3, #0, #8
   2aa6c:	f364 108f 	bfi	r0, r4, #6, #10
   2aa70:	462a      	mov	r2, r5
   2aa72:	490c      	ldr	r1, [pc, #48]	; (2aaa4 <nct_cc_send+0xf4>)
   2aa74:	f011 fe05 	bl	3c682 <log_string_sync>
   2aa78:	e7af      	b.n	2a9da <nct_cc_send+0x2a>
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2aa7a:	490b      	ldr	r1, [pc, #44]	; (2aaa8 <nct_cc_send+0xf8>)
   2aa7c:	680b      	ldr	r3, [r1, #0]
   2aa7e:	3301      	adds	r3, #1
   2aa80:	600b      	str	r3, [r1, #0]
   2aa82:	e7d7      	b.n	2aa34 <nct_cc_send+0x84>
   2aa84:	000402cc 	.word	0x000402cc
   2aa88:	000403bc 	.word	0x000403bc
   2aa8c:	0004488a 	.word	0x0004488a
   2aa90:	0004489a 	.word	0x0004489a
   2aa94:	00040c3c 	.word	0x00040c3c
   2aa98:	000448a6 	.word	0x000448a6
   2aa9c:	00044787 	.word	0x00044787
   2aaa0:	20023dac 	.word	0x20023dac
   2aaa4:	000448d5 	.word	0x000448d5
   2aaa8:	20023d90 	.word	0x20023d90

0002aaac <nct_dc_endpoint_set>:
}

void nct_dc_endpoint_set(const struct nrf_cloud_data *tx_endp,
			 const struct nrf_cloud_data *rx_endp,
			 const struct nrf_cloud_data *m_endp)
{
   2aaac:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_set");
   2aaae:	2304      	movs	r3, #4
{
   2aab0:	4606      	mov	r6, r0
	LOG_DBG("nct_dc_endpoint_set");
   2aab2:	f04f 0000 	mov.w	r0, #0
{
   2aab6:	460d      	mov	r5, r1
   2aab8:	4614      	mov	r4, r2
	LOG_DBG("nct_dc_endpoint_set");
   2aaba:	f363 0007 	bfi	r0, r3, #0, #8
   2aabe:	4a10      	ldr	r2, [pc, #64]	; (2ab00 <nct_dc_endpoint_set+0x54>)
   2aac0:	4b10      	ldr	r3, [pc, #64]	; (2ab04 <nct_dc_endpoint_set+0x58>)
   2aac2:	4911      	ldr	r1, [pc, #68]	; (2ab08 <nct_dc_endpoint_set+0x5c>)
   2aac4:	1a9b      	subs	r3, r3, r2
   2aac6:	08db      	lsrs	r3, r3, #3
   2aac8:	f363 108f 	bfi	r0, r3, #6, #10
   2aacc:	4a0f      	ldr	r2, [pc, #60]	; (2ab0c <nct_dc_endpoint_set+0x60>)
   2aace:	f011 fdd8 	bl	3c682 <log_string_sync>

	/* In case the endpoint was previous set, free and reset
	 * before copying new one.
	 */
	dc_endpoint_free();
   2aad2:	f7ff fb59 	bl	2a188 <dc_endpoint_free>

	nct.dc_tx_endp.utf8 = (u8_t *)tx_endp->ptr;
   2aad6:	6872      	ldr	r2, [r6, #4]
   2aad8:	4b0d      	ldr	r3, [pc, #52]	; (2ab10 <nct_dc_endpoint_set+0x64>)
   2aada:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	nct.dc_tx_endp.size = tx_endp->len;
   2aade:	6832      	ldr	r2, [r6, #0]
   2aae0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	nct.dc_rx_endp.utf8 = (u8_t *)rx_endp->ptr;
   2aae4:	686a      	ldr	r2, [r5, #4]
   2aae6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	nct.dc_rx_endp.size = rx_endp->len;
   2aaea:	682a      	ldr	r2, [r5, #0]
   2aaec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	if (m_endp != NULL) {
   2aaf0:	b12c      	cbz	r4, 2aafe <nct_dc_endpoint_set+0x52>
		nct.dc_m_endp.utf8 = (u8_t *)m_endp->ptr;
   2aaf2:	6862      	ldr	r2, [r4, #4]
   2aaf4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		nct.dc_m_endp.size = m_endp->len;
   2aaf8:	6822      	ldr	r2, [r4, #0]
   2aafa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	}
}
   2aafe:	bd70      	pop	{r4, r5, r6, pc}
   2ab00:	000402cc 	.word	0x000402cc
   2ab04:	000403bc 	.word	0x000403bc
   2ab08:	000449b7 	.word	0x000449b7
   2ab0c:	00044793 	.word	0x00044793
   2ab10:	20023d94 	.word	0x20023d94

0002ab14 <nct_dc_endpoint_get>:

void nct_dc_endpoint_get(struct nrf_cloud_data *const tx_endp,
			 struct nrf_cloud_data *const rx_endp,
			 struct nrf_cloud_data *const m_endp)
{
   2ab14:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_get");
   2ab16:	2304      	movs	r3, #4
{
   2ab18:	4606      	mov	r6, r0
	LOG_DBG("nct_dc_endpoint_get");
   2ab1a:	f04f 0000 	mov.w	r0, #0
{
   2ab1e:	460d      	mov	r5, r1
   2ab20:	4614      	mov	r4, r2
	LOG_DBG("nct_dc_endpoint_get");
   2ab22:	f363 0007 	bfi	r0, r3, #0, #8
   2ab26:	4a0f      	ldr	r2, [pc, #60]	; (2ab64 <nct_dc_endpoint_get+0x50>)
   2ab28:	4b0f      	ldr	r3, [pc, #60]	; (2ab68 <nct_dc_endpoint_get+0x54>)
   2ab2a:	4910      	ldr	r1, [pc, #64]	; (2ab6c <nct_dc_endpoint_get+0x58>)
   2ab2c:	1a9b      	subs	r3, r3, r2
   2ab2e:	08db      	lsrs	r3, r3, #3
   2ab30:	f363 108f 	bfi	r0, r3, #6, #10
   2ab34:	4a0e      	ldr	r2, [pc, #56]	; (2ab70 <nct_dc_endpoint_get+0x5c>)
   2ab36:	f011 fda4 	bl	3c682 <log_string_sync>

	tx_endp->ptr = nct.dc_tx_endp.utf8;
   2ab3a:	4b0e      	ldr	r3, [pc, #56]	; (2ab74 <nct_dc_endpoint_get+0x60>)
   2ab3c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
   2ab40:	6072      	str	r2, [r6, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   2ab42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   2ab46:	6032      	str	r2, [r6, #0]

	rx_endp->ptr = nct.dc_rx_endp.utf8;
   2ab48:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   2ab4c:	606a      	str	r2, [r5, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   2ab4e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   2ab52:	602a      	str	r2, [r5, #0]

	if (m_endp != NULL) {
   2ab54:	b12c      	cbz	r4, 2ab62 <nct_dc_endpoint_get+0x4e>
		m_endp->ptr = nct.dc_m_endp.utf8;
   2ab56:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
		m_endp->len = nct.dc_m_endp.size;
   2ab5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
		m_endp->ptr = nct.dc_m_endp.utf8;
   2ab5e:	6062      	str	r2, [r4, #4]
		m_endp->len = nct.dc_m_endp.size;
   2ab60:	6023      	str	r3, [r4, #0]
	}
}
   2ab62:	bd70      	pop	{r4, r5, r6, pc}
   2ab64:	000402cc 	.word	0x000402cc
   2ab68:	000403bc 	.word	0x000403bc
   2ab6c:	0004499f 	.word	0x0004499f
   2ab70:	000447a7 	.word	0x000447a7
   2ab74:	20023d94 	.word	0x20023d94

0002ab78 <nct_dc_connect>:

int nct_dc_connect(void)
{
   2ab78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");
   2ab7a:	2304      	movs	r3, #4
   2ab7c:	f04f 0000 	mov.w	r0, #0
   2ab80:	4a10      	ldr	r2, [pc, #64]	; (2abc4 <nct_dc_connect+0x4c>)
   2ab82:	f363 0007 	bfi	r0, r3, #0, #8
   2ab86:	4b10      	ldr	r3, [pc, #64]	; (2abc8 <nct_dc_connect+0x50>)
   2ab88:	4910      	ldr	r1, [pc, #64]	; (2abcc <nct_dc_connect+0x54>)
   2ab8a:	1a9b      	subs	r3, r3, r2
   2ab8c:	08db      	lsrs	r3, r3, #3
   2ab8e:	f363 108f 	bfi	r0, r3, #6, #10
   2ab92:	4a0f      	ldr	r2, [pc, #60]	; (2abd0 <nct_dc_connect+0x58>)
   2ab94:	f011 fd75 	bl	3c682 <log_string_sync>

	struct mqtt_topic subscribe_topic = {
		.topic = {
			.utf8 = nct.dc_rx_endp.utf8,
   2ab98:	480e      	ldr	r0, [pc, #56]	; (2abd4 <nct_dc_connect+0x5c>)
		.list = &subscribe_topic,
		.list_count = 1,
		.message_id = NCT_DC_SUBSCRIBE_ID
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   2ab9a:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   2ab9c:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
	return mqtt_subscribe(&nct.client, &subscription_list);
   2aba0:	3018      	adds	r0, #24
	struct mqtt_topic subscribe_topic = {
   2aba2:	9303      	str	r3, [sp, #12]
   2aba4:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   2aba8:	9304      	str	r3, [sp, #16]
   2abaa:	2301      	movs	r3, #1
   2abac:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   2abb0:	ab03      	add	r3, sp, #12
   2abb2:	9301      	str	r3, [sp, #4]
   2abb4:	4b08      	ldr	r3, [pc, #32]	; (2abd8 <nct_dc_connect+0x60>)
   2abb6:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2abb8:	f012 fb81 	bl	3d2be <mqtt_subscribe>
}
   2abbc:	b007      	add	sp, #28
   2abbe:	f85d fb04 	ldr.w	pc, [sp], #4
   2abc2:	bf00      	nop
   2abc4:	000402cc 	.word	0x000402cc
   2abc8:	000403bc 	.word	0x000403bc
   2abcc:	00044976 	.word	0x00044976
   2abd0:	000447bb 	.word	0x000447bb
   2abd4:	20023d94 	.word	0x20023d94
   2abd8:	223d0001 	.word	0x223d0001

0002abdc <nct_dc_disconnect>:
{
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
}

int nct_dc_disconnect(void)
{
   2abdc:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_dc_disconnect");
   2abde:	2304      	movs	r3, #4
   2abe0:	f04f 0000 	mov.w	r0, #0
   2abe4:	4a0c      	ldr	r2, [pc, #48]	; (2ac18 <nct_dc_disconnect+0x3c>)
   2abe6:	f363 0007 	bfi	r0, r3, #0, #8
   2abea:	4b0c      	ldr	r3, [pc, #48]	; (2ac1c <nct_dc_disconnect+0x40>)
   2abec:	490c      	ldr	r1, [pc, #48]	; (2ac20 <nct_dc_disconnect+0x44>)
   2abee:	1a9b      	subs	r3, r3, r2
   2abf0:	08db      	lsrs	r3, r3, #3
   2abf2:	f363 108f 	bfi	r0, r3, #6, #10
   2abf6:	4a0b      	ldr	r2, [pc, #44]	; (2ac24 <nct_dc_disconnect+0x48>)
   2abf8:	f011 fd43 	bl	3c682 <log_string_sync>

	const struct mqtt_subscription_list subscription_list = {
   2abfc:	480a      	ldr	r0, [pc, #40]	; (2ac28 <nct_dc_disconnect+0x4c>)
		.list = (struct mqtt_topic *)&nct.dc_rx_endp,
		.list_count = 1,
		.message_id = NCT_DC_SUBSCRIBE_ID
	};

	return mqtt_unsubscribe(&nct.client, &subscription_list);
   2abfe:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   2ac00:	f100 03b4 	add.w	r3, r0, #180	; 0xb4
   2ac04:	9300      	str	r3, [sp, #0]
   2ac06:	4b09      	ldr	r3, [pc, #36]	; (2ac2c <nct_dc_disconnect+0x50>)
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   2ac08:	3018      	adds	r0, #24
	const struct mqtt_subscription_list subscription_list = {
   2ac0a:	9301      	str	r3, [sp, #4]
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   2ac0c:	f012 fb7e 	bl	3d30c <mqtt_unsubscribe>
}
   2ac10:	b003      	add	sp, #12
   2ac12:	f85d fb04 	ldr.w	pc, [sp], #4
   2ac16:	bf00      	nop
   2ac18:	000402cc 	.word	0x000402cc
   2ac1c:	000403bc 	.word	0x000403bc
   2ac20:	00044989 	.word	0x00044989
   2ac24:	000447ca 	.word	0x000447ca
   2ac28:	20023d94 	.word	0x20023d94
   2ac2c:	223d0001 	.word	0x223d0001

0002ac30 <nct_disconnect>:

int nct_disconnect(void)
{
   2ac30:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");
   2ac32:	f04f 0000 	mov.w	r0, #0
   2ac36:	2304      	movs	r3, #4
   2ac38:	4a09      	ldr	r2, [pc, #36]	; (2ac60 <nct_disconnect+0x30>)
   2ac3a:	f363 0007 	bfi	r0, r3, #0, #8
   2ac3e:	4b09      	ldr	r3, [pc, #36]	; (2ac64 <nct_disconnect+0x34>)
   2ac40:	4909      	ldr	r1, [pc, #36]	; (2ac68 <nct_disconnect+0x38>)
   2ac42:	1a9b      	subs	r3, r3, r2
   2ac44:	08db      	lsrs	r3, r3, #3
   2ac46:	f363 108f 	bfi	r0, r3, #6, #10
   2ac4a:	4a08      	ldr	r2, [pc, #32]	; (2ac6c <nct_disconnect+0x3c>)
   2ac4c:	f011 fd19 	bl	3c682 <log_string_sync>

	dc_endpoint_free();
   2ac50:	f7ff fa9a 	bl	2a188 <dc_endpoint_free>
	return mqtt_disconnect(&nct.client);
}
   2ac54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   2ac58:	4805      	ldr	r0, [pc, #20]	; (2ac70 <nct_disconnect+0x40>)
   2ac5a:	f012 bb07 	b.w	3d26c <mqtt_disconnect>
   2ac5e:	bf00      	nop
   2ac60:	000402cc 	.word	0x000402cc
   2ac64:	000403bc 	.word	0x000403bc
   2ac68:	000449cf 	.word	0x000449cf
   2ac6c:	000447dc 	.word	0x000447dc
   2ac70:	20023dac 	.word	0x20023dac

0002ac74 <nct_process>:

void nct_process(void)
{
   2ac74:	b510      	push	{r4, lr}
	mqtt_input(&nct.client);
   2ac76:	4c04      	ldr	r4, [pc, #16]	; (2ac88 <nct_process+0x14>)
   2ac78:	4620      	mov	r0, r4
   2ac7a:	f012 fbd7 	bl	3d42c <mqtt_input>
	mqtt_live(&nct.client);
   2ac7e:	4620      	mov	r0, r4
}
   2ac80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mqtt_live(&nct.client);
   2ac84:	f012 bb94 	b.w	3d3b0 <mqtt_live>
   2ac88:	20023dac 	.word	0x20023dac

0002ac8c <nct_keepalive_time_left>:

int nct_keepalive_time_left(void)
{
	return (int)mqtt_keepalive_time_left(&nct.client);
   2ac8c:	4801      	ldr	r0, [pc, #4]	; (2ac94 <nct_keepalive_time_left+0x8>)
   2ac8e:	f012 bbb6 	b.w	3d3fe <mqtt_keepalive_time_left>
   2ac92:	bf00      	nop
   2ac94:	20023dac 	.word	0x20023dac

0002ac98 <nct_socket_get>:
}

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
}
   2ac98:	4b01      	ldr	r3, [pc, #4]	; (2aca0 <nct_socket_get+0x8>)
   2ac9a:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2ac9c:	4770      	bx	lr
   2ac9e:	bf00      	nop
   2aca0:	20023d94 	.word	0x20023d94

0002aca4 <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   2aca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT(client->offset <= client->fragment_size,
   2aca6:	f241 0304 	movw	r3, #4100	; 0x1004
   2acaa:	58c2      	ldr	r2, [r0, r3]
   2acac:	f241 0310 	movw	r3, #4112	; 0x1010
   2acb0:	58c3      	ldr	r3, [r0, r3]
{
   2acb2:	4604      	mov	r4, r0
	__ASSERT(client->offset <= client->fragment_size,
   2acb4:	429a      	cmp	r2, r3
   2acb6:	d90e      	bls.n	2acd6 <fragment_evt_send+0x32>
   2acb8:	4919      	ldr	r1, [pc, #100]	; (2ad20 <fragment_evt_send+0x7c>)
   2acba:	f44f 73b3 	mov.w	r3, #358	; 0x166
   2acbe:	4a19      	ldr	r2, [pc, #100]	; (2ad24 <fragment_evt_send+0x80>)
   2acc0:	4819      	ldr	r0, [pc, #100]	; (2ad28 <fragment_evt_send+0x84>)
   2acc2:	f011 fc87 	bl	3c5d4 <printk>
   2acc6:	4819      	ldr	r0, [pc, #100]	; (2ad2c <fragment_evt_send+0x88>)
   2acc8:	f011 fc84 	bl	3c5d4 <printk>
   2accc:	f44f 71b3 	mov.w	r1, #358	; 0x166
   2acd0:	4814      	ldr	r0, [pc, #80]	; (2ad24 <fragment_evt_send+0x80>)
   2acd2:	f011 fcc5 	bl	3c660 <assert_post_action>
		 "Fragment overflow!");

	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   2acd6:	f241 0304 	movw	r3, #4100	; 0x1004
   2acda:	58e3      	ldr	r3, [r4, r3]
   2acdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2ace0:	d90e      	bls.n	2ad00 <fragment_evt_send+0x5c>
   2ace2:	4913      	ldr	r1, [pc, #76]	; (2ad30 <fragment_evt_send+0x8c>)
   2ace4:	f240 1369 	movw	r3, #361	; 0x169
   2ace8:	4a0e      	ldr	r2, [pc, #56]	; (2ad24 <fragment_evt_send+0x80>)
   2acea:	480f      	ldr	r0, [pc, #60]	; (2ad28 <fragment_evt_send+0x84>)
   2acec:	f011 fc72 	bl	3c5d4 <printk>
   2acf0:	4810      	ldr	r0, [pc, #64]	; (2ad34 <fragment_evt_send+0x90>)
   2acf2:	f011 fc6f 	bl	3c5d4 <printk>
   2acf6:	f240 1169 	movw	r1, #361	; 0x169
   2acfa:	480a      	ldr	r0, [pc, #40]	; (2ad24 <fragment_evt_send+0x80>)
   2acfc:	f011 fcb0 	bl	3c660 <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   2ad00:	2300      	movs	r3, #0
   2ad02:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   2ad06:	1d23      	adds	r3, r4, #4
	const struct download_client_evt evt = {
   2ad08:	9302      	str	r3, [sp, #8]
			.len = client->offset,
   2ad0a:	f241 0304 	movw	r3, #4100	; 0x1004
	const struct download_client_evt evt = {
   2ad0e:	58e3      	ldr	r3, [r4, r3]
		}
	};

	return client->callback(&evt);
   2ad10:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   2ad12:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   2ad14:	f242 03e0 	movw	r3, #8416	; 0x20e0
   2ad18:	58e3      	ldr	r3, [r4, r3]
   2ad1a:	4798      	blx	r3
}
   2ad1c:	b004      	add	sp, #16
   2ad1e:	bd10      	pop	{r4, pc}
   2ad20:	00045097 	.word	0x00045097
   2ad24:	0004504a 	.word	0x0004504a
   2ad28:	00041757 	.word	0x00041757
   2ad2c:	000450bf 	.word	0x000450bf
   2ad30:	000450d4 	.word	0x000450d4
   2ad34:	000450eb 	.word	0x000450eb

0002ad38 <setsockopt>:
{
   2ad38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT_NO_MSG(socket_ops);
   2ad3c:	4c15      	ldr	r4, [pc, #84]	; (2ad94 <setsockopt+0x5c>)
{
   2ad3e:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   2ad40:	6823      	ldr	r3, [r4, #0]
{
   2ad42:	4605      	mov	r5, r0
   2ad44:	460e      	mov	r6, r1
   2ad46:	4617      	mov	r7, r2
   2ad48:	f8dd 9020 	ldr.w	r9, [sp, #32]
	__ASSERT_NO_MSG(socket_ops);
   2ad4c:	b94b      	cbnz	r3, 2ad62 <setsockopt+0x2a>
   2ad4e:	4912      	ldr	r1, [pc, #72]	; (2ad98 <setsockopt+0x60>)
   2ad50:	4812      	ldr	r0, [pc, #72]	; (2ad9c <setsockopt+0x64>)
   2ad52:	2357      	movs	r3, #87	; 0x57
   2ad54:	4a12      	ldr	r2, [pc, #72]	; (2ada0 <setsockopt+0x68>)
   2ad56:	f011 fc3d 	bl	3c5d4 <printk>
   2ad5a:	2157      	movs	r1, #87	; 0x57
   2ad5c:	4810      	ldr	r0, [pc, #64]	; (2ada0 <setsockopt+0x68>)
   2ad5e:	f011 fc7f 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   2ad62:	6823      	ldr	r3, [r4, #0]
   2ad64:	69db      	ldr	r3, [r3, #28]
   2ad66:	b94b      	cbnz	r3, 2ad7c <setsockopt+0x44>
   2ad68:	490e      	ldr	r1, [pc, #56]	; (2ada4 <setsockopt+0x6c>)
   2ad6a:	480c      	ldr	r0, [pc, #48]	; (2ad9c <setsockopt+0x64>)
   2ad6c:	2358      	movs	r3, #88	; 0x58
   2ad6e:	4a0c      	ldr	r2, [pc, #48]	; (2ada0 <setsockopt+0x68>)
   2ad70:	f011 fc30 	bl	3c5d4 <printk>
   2ad74:	2158      	movs	r1, #88	; 0x58
   2ad76:	480a      	ldr	r0, [pc, #40]	; (2ada0 <setsockopt+0x68>)
   2ad78:	f011 fc72 	bl	3c660 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   2ad7c:	6823      	ldr	r3, [r4, #0]
   2ad7e:	f8cd 9020 	str.w	r9, [sp, #32]
   2ad82:	69dc      	ldr	r4, [r3, #28]
   2ad84:	463a      	mov	r2, r7
   2ad86:	4643      	mov	r3, r8
   2ad88:	4631      	mov	r1, r6
   2ad8a:	4628      	mov	r0, r5
   2ad8c:	46a4      	mov	ip, r4
}
   2ad8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   2ad92:	4760      	bx	ip
   2ad94:	20023a4c 	.word	0x20023a4c
   2ad98:	000418d1 	.word	0x000418d1
   2ad9c:	00041757 	.word	0x00041757
   2ada0:	000418a8 	.word	0x000418a8
   2ada4:	00043254 	.word	0x00043254

0002ada8 <close>:
{
   2ada8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   2adaa:	4c10      	ldr	r4, [pc, #64]	; (2adec <close+0x44>)
{
   2adac:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   2adae:	6823      	ldr	r3, [r4, #0]
   2adb0:	b94b      	cbnz	r3, 2adc6 <close+0x1e>
   2adb2:	490f      	ldr	r1, [pc, #60]	; (2adf0 <close+0x48>)
   2adb4:	480f      	ldr	r0, [pc, #60]	; (2adf4 <close+0x4c>)
   2adb6:	2321      	movs	r3, #33	; 0x21
   2adb8:	4a0f      	ldr	r2, [pc, #60]	; (2adf8 <close+0x50>)
   2adba:	f011 fc0b 	bl	3c5d4 <printk>
   2adbe:	2121      	movs	r1, #33	; 0x21
   2adc0:	480d      	ldr	r0, [pc, #52]	; (2adf8 <close+0x50>)
   2adc2:	f011 fc4d 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2adc6:	6823      	ldr	r3, [r4, #0]
   2adc8:	685b      	ldr	r3, [r3, #4]
   2adca:	b94b      	cbnz	r3, 2ade0 <close+0x38>
   2adcc:	490b      	ldr	r1, [pc, #44]	; (2adfc <close+0x54>)
   2adce:	4809      	ldr	r0, [pc, #36]	; (2adf4 <close+0x4c>)
   2add0:	2322      	movs	r3, #34	; 0x22
   2add2:	4a09      	ldr	r2, [pc, #36]	; (2adf8 <close+0x50>)
   2add4:	f011 fbfe 	bl	3c5d4 <printk>
   2add8:	2122      	movs	r1, #34	; 0x22
   2adda:	4807      	ldr	r0, [pc, #28]	; (2adf8 <close+0x50>)
   2addc:	f011 fc40 	bl	3c660 <assert_post_action>
	return socket_ops->close(sock);
   2ade0:	6823      	ldr	r3, [r4, #0]
   2ade2:	4628      	mov	r0, r5
}
   2ade4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   2ade8:	685b      	ldr	r3, [r3, #4]
   2adea:	4718      	bx	r3
   2adec:	20023a4c 	.word	0x20023a4c
   2adf0:	000418d1 	.word	0x000418d1
   2adf4:	00041757 	.word	0x00041757
   2adf8:	000418a8 	.word	0x000418a8
   2adfc:	00043184 	.word	0x00043184

0002ae00 <get_request_send>:
{
   2ae00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT_NO_MSG(client);
   2ae04:	4605      	mov	r5, r0
{
   2ae06:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(client);
   2ae08:	b948      	cbnz	r0, 2ae1e <get_request_send+0x1e>
   2ae0a:	4955      	ldr	r1, [pc, #340]	; (2af60 <get_request_send+0x160>)
   2ae0c:	4855      	ldr	r0, [pc, #340]	; (2af64 <get_request_send+0x164>)
   2ae0e:	23f6      	movs	r3, #246	; 0xf6
   2ae10:	4a55      	ldr	r2, [pc, #340]	; (2af68 <get_request_send+0x168>)
   2ae12:	f011 fbdf 	bl	3c5d4 <printk>
   2ae16:	21f6      	movs	r1, #246	; 0xf6
   2ae18:	4853      	ldr	r0, [pc, #332]	; (2af68 <get_request_send+0x168>)
   2ae1a:	f011 fc21 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(client->host);
   2ae1e:	f241 0318 	movw	r3, #4120	; 0x1018
   2ae22:	58eb      	ldr	r3, [r5, r3]
   2ae24:	b94b      	cbnz	r3, 2ae3a <get_request_send+0x3a>
   2ae26:	4951      	ldr	r1, [pc, #324]	; (2af6c <get_request_send+0x16c>)
   2ae28:	484e      	ldr	r0, [pc, #312]	; (2af64 <get_request_send+0x164>)
   2ae2a:	23f7      	movs	r3, #247	; 0xf7
   2ae2c:	4a4e      	ldr	r2, [pc, #312]	; (2af68 <get_request_send+0x168>)
   2ae2e:	f011 fbd1 	bl	3c5d4 <printk>
   2ae32:	21f7      	movs	r1, #247	; 0xf7
   2ae34:	484c      	ldr	r0, [pc, #304]	; (2af68 <get_request_send+0x168>)
   2ae36:	f011 fc13 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   2ae3a:	f241 031c 	movw	r3, #4124	; 0x101c
   2ae3e:	58eb      	ldr	r3, [r5, r3]
   2ae40:	b94b      	cbnz	r3, 2ae56 <get_request_send+0x56>
   2ae42:	494b      	ldr	r1, [pc, #300]	; (2af70 <get_request_send+0x170>)
   2ae44:	4847      	ldr	r0, [pc, #284]	; (2af64 <get_request_send+0x164>)
   2ae46:	23f8      	movs	r3, #248	; 0xf8
   2ae48:	4a47      	ldr	r2, [pc, #284]	; (2af68 <get_request_send+0x168>)
   2ae4a:	f011 fbc3 	bl	3c5d4 <printk>
   2ae4e:	21f8      	movs	r1, #248	; 0xf8
   2ae50:	4845      	ldr	r0, [pc, #276]	; (2af68 <get_request_send+0x168>)
   2ae52:	f011 fc05 	bl	3c660 <assert_post_action>
	off = client->progress + client->fragment_size - 1;
   2ae56:	f241 030c 	movw	r3, #4108	; 0x100c
   2ae5a:	58ea      	ldr	r2, [r5, r3]
   2ae5c:	f241 0310 	movw	r3, #4112	; 0x1010
	if (client->file_size != 0) {
   2ae60:	f241 0108 	movw	r1, #4104	; 0x1008
	off = client->progress + client->fragment_size - 1;
   2ae64:	58eb      	ldr	r3, [r5, r3]
	if (client->file_size != 0) {
   2ae66:	5869      	ldr	r1, [r5, r1]
	off = client->progress + client->fragment_size - 1;
   2ae68:	4413      	add	r3, r2
   2ae6a:	3b01      	subs	r3, #1
	if (client->file_size != 0) {
   2ae6c:	b111      	cbz	r1, 2ae74 <get_request_send+0x74>
		off = MIN(off, client->file_size);
   2ae6e:	428b      	cmp	r3, r1
   2ae70:	bf28      	it	cs
   2ae72:	460b      	movcs	r3, r1
	len = snprintf(client->buf, CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   2ae74:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2ae78:	f241 0318 	movw	r3, #4120	; 0x1018
   2ae7c:	58eb      	ldr	r3, [r5, r3]
   2ae7e:	f105 0904 	add.w	r9, r5, #4
   2ae82:	9300      	str	r3, [sp, #0]
   2ae84:	f241 031c 	movw	r3, #4124	; 0x101c
   2ae88:	4a3a      	ldr	r2, [pc, #232]	; (2af74 <get_request_send+0x174>)
   2ae8a:	58eb      	ldr	r3, [r5, r3]
   2ae8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2ae90:	4648      	mov	r0, r9
   2ae92:	f00f fd49 	bl	3a928 <sniprintf>
	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE) {
   2ae96:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	len = snprintf(client->buf, CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   2ae9a:	4604      	mov	r4, r0
	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE) {
   2ae9c:	d945      	bls.n	2af2a <get_request_send+0x12a>
		LOG_ERR("Cannot create GET request, buffer too small");
   2ae9e:	2301      	movs	r3, #1
   2aea0:	f04f 0000 	mov.w	r0, #0
   2aea4:	4a34      	ldr	r2, [pc, #208]	; (2af78 <get_request_send+0x178>)
   2aea6:	f363 0007 	bfi	r0, r3, #0, #8
   2aeaa:	4b34      	ldr	r3, [pc, #208]	; (2af7c <get_request_send+0x17c>)
   2aeac:	4934      	ldr	r1, [pc, #208]	; (2af80 <get_request_send+0x180>)
   2aeae:	1a9b      	subs	r3, r3, r2
   2aeb0:	08db      	lsrs	r3, r3, #3
   2aeb2:	f363 108f 	bfi	r0, r3, #6, #10
   2aeb6:	f011 fbe4 	bl	3c682 <log_string_sync>
		return -ENOMEM;
   2aeba:	f06f 000b 	mvn.w	r0, #11
}
   2aebe:	b007      	add	sp, #28
   2aec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sent = send(client->fd, client->buf + off, len, 0);
   2aec4:	9b05      	ldr	r3, [sp, #20]
   2aec6:	f8d5 a000 	ldr.w	sl, [r5]
   2aeca:	eb09 0b03 	add.w	fp, r9, r3
	__ASSERT_NO_MSG(socket_ops);
   2aece:	f8d8 3000 	ldr.w	r3, [r8]
   2aed2:	b94b      	cbnz	r3, 2aee8 <get_request_send+0xe8>
   2aed4:	492b      	ldr	r1, [pc, #172]	; (2af84 <get_request_send+0x184>)
   2aed6:	4823      	ldr	r0, [pc, #140]	; (2af64 <get_request_send+0x164>)
   2aed8:	237e      	movs	r3, #126	; 0x7e
   2aeda:	4632      	mov	r2, r6
   2aedc:	f011 fb7a 	bl	3c5d4 <printk>
   2aee0:	217e      	movs	r1, #126	; 0x7e
   2aee2:	4630      	mov	r0, r6
   2aee4:	f011 fbbc 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   2aee8:	f8d8 3000 	ldr.w	r3, [r8]
   2aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2aeee:	b94b      	cbnz	r3, 2af04 <get_request_send+0x104>
   2aef0:	4925      	ldr	r1, [pc, #148]	; (2af88 <get_request_send+0x188>)
   2aef2:	481c      	ldr	r0, [pc, #112]	; (2af64 <get_request_send+0x164>)
   2aef4:	237f      	movs	r3, #127	; 0x7f
   2aef6:	4632      	mov	r2, r6
   2aef8:	f011 fb6c 	bl	3c5d4 <printk>
   2aefc:	217f      	movs	r1, #127	; 0x7f
   2aefe:	4630      	mov	r0, r6
   2af00:	f011 fbae 	bl	3c660 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   2af04:	f8d8 3000 	ldr.w	r3, [r8]
   2af08:	4622      	mov	r2, r4
   2af0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2af0c:	4659      	mov	r1, fp
   2af0e:	461f      	mov	r7, r3
   2af10:	4650      	mov	r0, sl
   2af12:	2300      	movs	r3, #0
   2af14:	47b8      	blx	r7
		if (sent <= 0) {
   2af16:	2800      	cmp	r0, #0
   2af18:	dd0d      	ble.n	2af36 <get_request_send+0x136>
		off += sent;
   2af1a:	9b05      	ldr	r3, [sp, #20]
		len -= sent;
   2af1c:	1a24      	subs	r4, r4, r0
		off += sent;
   2af1e:	4403      	add	r3, r0
   2af20:	9305      	str	r3, [sp, #20]
	while (len) {
   2af22:	2c00      	cmp	r4, #0
   2af24:	d1ce      	bne.n	2aec4 <get_request_send+0xc4>
	return 0;
   2af26:	4620      	mov	r0, r4
   2af28:	e7c9      	b.n	2aebe <get_request_send+0xbe>
	size_t off = 0;
   2af2a:	2300      	movs	r3, #0
	__ASSERT_NO_MSG(socket_ops);
   2af2c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2af94 <get_request_send+0x194>
   2af30:	9305      	str	r3, [sp, #20]
   2af32:	4e16      	ldr	r6, [pc, #88]	; (2af8c <get_request_send+0x18c>)
   2af34:	e7f5      	b.n	2af22 <get_request_send+0x122>
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   2af36:	2301      	movs	r3, #1
   2af38:	f04f 0400 	mov.w	r4, #0
   2af3c:	4a0e      	ldr	r2, [pc, #56]	; (2af78 <get_request_send+0x178>)
   2af3e:	f363 0407 	bfi	r4, r3, #0, #8
   2af42:	4b0e      	ldr	r3, [pc, #56]	; (2af7c <get_request_send+0x17c>)
   2af44:	1a9b      	subs	r3, r3, r2
   2af46:	08db      	lsrs	r3, r3, #3
   2af48:	f363 148f 	bfi	r4, r3, #6, #10
   2af4c:	f011 fd7e 	bl	3ca4c <__errno>
   2af50:	490f      	ldr	r1, [pc, #60]	; (2af90 <get_request_send+0x190>)
   2af52:	6802      	ldr	r2, [r0, #0]
   2af54:	4620      	mov	r0, r4
   2af56:	f011 fb94 	bl	3c682 <log_string_sync>
			return -EIO;
   2af5a:	f06f 0004 	mvn.w	r0, #4
		return err;
   2af5e:	e7ae      	b.n	2aebe <get_request_send+0xbe>
   2af60:	000451cd 	.word	0x000451cd
   2af64:	00041757 	.word	0x00041757
   2af68:	0004504a 	.word	0x0004504a
   2af6c:	000450fe 	.word	0x000450fe
   2af70:	0004510b 	.word	0x0004510b
   2af74:	00045118 	.word	0x00045118
   2af78:	000402cc 	.word	0x000402cc
   2af7c:	00040334 	.word	0x00040334
   2af80:	00045163 	.word	0x00045163
   2af84:	000418d1 	.word	0x000418d1
   2af88:	000431ce 	.word	0x000431ce
   2af8c:	000418a8 	.word	0x000418a8
   2af90:	0004518f 	.word	0x0004518f
   2af94:	20023a4c 	.word	0x20023a4c

0002af98 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   2af98:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   2af9a:	4605      	mov	r5, r0
{
   2af9c:	b087      	sub	sp, #28
	if (client == NULL || callback == NULL) {
   2af9e:	b1f0      	cbz	r0, 2afde <download_client_init+0x46>
   2afa0:	b1e9      	cbz	r1, 2afde <download_client_init+0x46>
		return -EINVAL;
	}

	client->fd = -1;
   2afa2:	f04f 33ff 	mov.w	r3, #4294967295
   2afa6:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   2afa8:	f242 03e0 	movw	r3, #8416	; 0x20e0
   2afac:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2afae:	2400      	movs	r4, #0
   2afb0:	230e      	movs	r3, #14
   2afb2:	e9cd 0400 	strd	r0, r4, [sp]
   2afb6:	f500 5187 	add.w	r1, r0, #4320	; 0x10e0
   2afba:	f500 5081 	add.w	r0, r0, #4128	; 0x1020
   2afbe:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2afc2:	e9cd 4404 	strd	r4, r4, [sp, #16]
   2afc6:	4b07      	ldr	r3, [pc, #28]	; (2afe4 <download_client_init+0x4c>)
   2afc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2afcc:	3010      	adds	r0, #16
   2afce:	f00d fe11 	bl	38bf4 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   2afd2:	f241 032c 	movw	r3, #4140	; 0x102c
   2afd6:	50e8      	str	r0, [r5, r3]
		k_thread_create(&client->thread, client->thread_stack,
				K_THREAD_STACK_SIZEOF(client->thread_stack),
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	return 0;
   2afd8:	4620      	mov	r0, r4
}
   2afda:	b007      	add	sp, #28
   2afdc:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2afde:	f06f 0015 	mvn.w	r0, #21
   2afe2:	e7fa      	b.n	2afda <download_client_init+0x42>
   2afe4:	0002b42d 	.word	0x0002b42d

0002afe8 <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   2afe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2afec:	b0a1      	sub	sp, #132	; 0x84
   2afee:	9103      	str	r1, [sp, #12]
   2aff0:	4617      	mov	r7, r2
	int err;

	if (client == NULL || host == NULL || config == NULL) {
   2aff2:	4605      	mov	r5, r0
   2aff4:	b928      	cbnz	r0, 2b002 <download_client_connect+0x1a>
		client->fd =
			resolve_and_connect(AF_INET, host, config);
	}

	if (client->fd < 0) {
		return -EINVAL;
   2aff6:	f06f 0615 	mvn.w	r6, #21
	if (err) {
		return err;
	}

	return 0;
}
   2affa:	4630      	mov	r0, r6
   2affc:	b021      	add	sp, #132	; 0x84
   2affe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (client == NULL || host == NULL || config == NULL) {
   2b002:	9b03      	ldr	r3, [sp, #12]
   2b004:	2b00      	cmp	r3, #0
   2b006:	d0f6      	beq.n	2aff6 <download_client_connect+0xe>
   2b008:	2a00      	cmp	r2, #0
   2b00a:	d0f4      	beq.n	2aff6 <download_client_connect+0xe>
		if (config->sec_tag != -1) {
   2b00c:	6853      	ldr	r3, [r2, #4]
   2b00e:	3301      	adds	r3, #1
   2b010:	d1f1      	bne.n	2aff6 <download_client_connect+0xe>
		client->fragment_size =
   2b012:	f241 0310 	movw	r3, #4112	; 0x1010
   2b016:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	if (client->fd != -1) {
   2b01a:	6806      	ldr	r6, [r0, #0]
		client->fragment_size =
   2b01c:	50c2      	str	r2, [r0, r3]
	if (client->fd != -1) {
   2b01e:	1c73      	adds	r3, r6, #1
   2b020:	f040 8184 	bne.w	2b32c <download_client_connect+0x344>
		port = (cfg->port != 0) ? htons(cfg->port) :
   2b024:	883a      	ldrh	r2, [r7, #0]
   2b026:	2a00      	cmp	r2, #0
   2b028:	d04f      	beq.n	2b0ca <download_client_connect+0xe2>
   2b02a:	0213      	lsls	r3, r2, #8
   2b02c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2b030:	b29b      	uxth	r3, r3
	struct addrinfo hints = {
   2b032:	2220      	movs	r2, #32
   2b034:	2100      	movs	r1, #0
   2b036:	eb0d 0002 	add.w	r0, sp, r2
		port = (cfg->port != 0) ? htons(cfg->port) :
   2b03a:	9304      	str	r3, [sp, #16]
	struct addrinfo hints = {
   2b03c:	f013 fe65 	bl	3ed0a <memset>
   2b040:	2301      	movs	r3, #1
   2b042:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   2b046:	2306      	movs	r3, #6
   2b048:	930b      	str	r3, [sp, #44]	; 0x2c
   2b04a:	68bb      	ldr	r3, [r7, #8]
   2b04c:	930e      	str	r3, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(socket_ops);
   2b04e:	4bb8      	ldr	r3, [pc, #736]	; (2b330 <download_client_connect+0x348>)
   2b050:	681a      	ldr	r2, [r3, #0]
   2b052:	4698      	mov	r8, r3
   2b054:	b94a      	cbnz	r2, 2b06a <download_client_connect+0x82>
   2b056:	49b7      	ldr	r1, [pc, #732]	; (2b334 <download_client_connect+0x34c>)
   2b058:	48b7      	ldr	r0, [pc, #732]	; (2b338 <download_client_connect+0x350>)
   2b05a:	2393      	movs	r3, #147	; 0x93
   2b05c:	4ab7      	ldr	r2, [pc, #732]	; (2b33c <download_client_connect+0x354>)
   2b05e:	f011 fab9 	bl	3c5d4 <printk>
   2b062:	2193      	movs	r1, #147	; 0x93
   2b064:	48b5      	ldr	r0, [pc, #724]	; (2b33c <download_client_connect+0x354>)
   2b066:	f011 fafb 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   2b06a:	f8d8 3000 	ldr.w	r3, [r8]
   2b06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2b070:	b94b      	cbnz	r3, 2b086 <download_client_connect+0x9e>
   2b072:	49b3      	ldr	r1, [pc, #716]	; (2b340 <download_client_connect+0x358>)
   2b074:	48b0      	ldr	r0, [pc, #704]	; (2b338 <download_client_connect+0x350>)
   2b076:	2394      	movs	r3, #148	; 0x94
   2b078:	4ab0      	ldr	r2, [pc, #704]	; (2b33c <download_client_connect+0x354>)
   2b07a:	f011 faab 	bl	3c5d4 <printk>
   2b07e:	2194      	movs	r1, #148	; 0x94
   2b080:	48ae      	ldr	r0, [pc, #696]	; (2b33c <download_client_connect+0x354>)
   2b082:	f011 faed 	bl	3c660 <assert_post_action>
	return socket_ops->getaddrinfo(node, service, hints, res);
   2b086:	f8d8 3000 	ldr.w	r3, [r8]
   2b08a:	aa08      	add	r2, sp, #32
   2b08c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   2b08e:	2100      	movs	r1, #0
   2b090:	ab07      	add	r3, sp, #28
   2b092:	9803      	ldr	r0, [sp, #12]
   2b094:	47a0      	blx	r4
	if (err) {
   2b096:	4cab      	ldr	r4, [pc, #684]	; (2b344 <download_client_connect+0x35c>)
   2b098:	4bab      	ldr	r3, [pc, #684]	; (2b348 <download_client_connect+0x360>)
   2b09a:	1ae4      	subs	r4, r4, r3
   2b09c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2b0a0:	b1b0      	cbz	r0, 2b0d0 <download_client_connect+0xe8>
		LOG_WRN("Failed to resolve hostname %s on %s", log_strdup(host),
   2b0a2:	2302      	movs	r3, #2
   2b0a4:	f04f 0600 	mov.w	r6, #0
   2b0a8:	9803      	ldr	r0, [sp, #12]
   2b0aa:	f363 0607 	bfi	r6, r3, #0, #8
   2b0ae:	f011 fafa 	bl	3c6a6 <log_strdup>
   2b0b2:	f364 168f 	bfi	r6, r4, #6, #10
   2b0b6:	4602      	mov	r2, r0
   2b0b8:	4ba4      	ldr	r3, [pc, #656]	; (2b34c <download_client_connect+0x364>)
   2b0ba:	49a5      	ldr	r1, [pc, #660]	; (2b350 <download_client_connect+0x368>)
   2b0bc:	4630      	mov	r0, r6
   2b0be:	f011 fae0 	bl	3c682 <log_string_sync>
		client->fd =
   2b0c2:	f04f 33ff 	mov.w	r3, #4294967295
   2b0c6:	602b      	str	r3, [r5, #0]
   2b0c8:	e795      	b.n	2aff6 <download_client_connect+0xe>
		port = (cfg->port != 0) ? htons(cfg->port) :
   2b0ca:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
   2b0ce:	e7b0      	b.n	2b032 <download_client_connect+0x4a>
	LOG_INF("Attempting to connect over %s",
   2b0d0:	2303      	movs	r3, #3
   2b0d2:	f04f 0a00 	mov.w	sl, #0
   2b0d6:	489d      	ldr	r0, [pc, #628]	; (2b34c <download_client_connect+0x364>)
   2b0d8:	f363 0a07 	bfi	sl, r3, #0, #8
   2b0dc:	f011 fae3 	bl	3c6a6 <log_strdup>
   2b0e0:	f364 1a8f 	bfi	sl, r4, #6, #10
   2b0e4:	4602      	mov	r2, r0
   2b0e6:	499b      	ldr	r1, [pc, #620]	; (2b354 <download_client_connect+0x36c>)
   2b0e8:	4650      	mov	r0, sl
   2b0ea:	f011 faca 	bl	3c682 <log_string_sync>
	__ASSERT_NO_MSG(socket_ops);
   2b0ee:	f8d8 3000 	ldr.w	r3, [r8]
   2b0f2:	b94b      	cbnz	r3, 2b108 <download_client_connect+0x120>
   2b0f4:	498f      	ldr	r1, [pc, #572]	; (2b334 <download_client_connect+0x34c>)
   2b0f6:	4890      	ldr	r0, [pc, #576]	; (2b338 <download_client_connect+0x350>)
   2b0f8:	2319      	movs	r3, #25
   2b0fa:	4a90      	ldr	r2, [pc, #576]	; (2b33c <download_client_connect+0x354>)
   2b0fc:	f011 fa6a 	bl	3c5d4 <printk>
   2b100:	2119      	movs	r1, #25
   2b102:	488e      	ldr	r0, [pc, #568]	; (2b33c <download_client_connect+0x354>)
   2b104:	f011 faac 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   2b108:	f8d8 3000 	ldr.w	r3, [r8]
   2b10c:	681b      	ldr	r3, [r3, #0]
   2b10e:	b94b      	cbnz	r3, 2b124 <download_client_connect+0x13c>
   2b110:	4991      	ldr	r1, [pc, #580]	; (2b358 <download_client_connect+0x370>)
   2b112:	4889      	ldr	r0, [pc, #548]	; (2b338 <download_client_connect+0x350>)
   2b114:	231a      	movs	r3, #26
   2b116:	4a89      	ldr	r2, [pc, #548]	; (2b33c <download_client_connect+0x354>)
   2b118:	f011 fa5c 	bl	3c5d4 <printk>
   2b11c:	211a      	movs	r1, #26
   2b11e:	4887      	ldr	r0, [pc, #540]	; (2b33c <download_client_connect+0x354>)
   2b120:	f011 fa9e 	bl	3c660 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   2b124:	2101      	movs	r1, #1
   2b126:	f8d8 3000 	ldr.w	r3, [r8]
   2b12a:	2206      	movs	r2, #6
   2b12c:	681b      	ldr	r3, [r3, #0]
   2b12e:	4608      	mov	r0, r1
   2b130:	4798      	blx	r3
	if (fd < 0) {
   2b132:	1e03      	subs	r3, r0, #0
   2b134:	9302      	str	r3, [sp, #8]
   2b136:	da38      	bge.n	2b1aa <download_client_connect+0x1c2>
		LOG_ERR("Failed to create socket, errno %d", errno);
   2b138:	2301      	movs	r3, #1
   2b13a:	f04f 0600 	mov.w	r6, #0
   2b13e:	f363 0607 	bfi	r6, r3, #0, #8
   2b142:	f011 fc83 	bl	3ca4c <__errno>
   2b146:	f364 168f 	bfi	r6, r4, #6, #10
   2b14a:	6802      	ldr	r2, [r0, #0]
   2b14c:	4983      	ldr	r1, [pc, #524]	; (2b35c <download_client_connect+0x374>)
   2b14e:	4630      	mov	r0, r6
   2b150:	f011 fa97 	bl	3c682 <log_string_sync>
	err = getaddrinfo(host, NULL, &hints, &info);
   2b154:	2600      	movs	r6, #0
	__ASSERT_NO_MSG(socket_ops);
   2b156:	4b76      	ldr	r3, [pc, #472]	; (2b330 <download_client_connect+0x348>)
	freeaddrinfo(info);
   2b158:	f8dd 901c 	ldr.w	r9, [sp, #28]
   2b15c:	681a      	ldr	r2, [r3, #0]
   2b15e:	4698      	mov	r8, r3
   2b160:	b94a      	cbnz	r2, 2b176 <download_client_connect+0x18e>
   2b162:	4974      	ldr	r1, [pc, #464]	; (2b334 <download_client_connect+0x34c>)
   2b164:	4874      	ldr	r0, [pc, #464]	; (2b338 <download_client_connect+0x350>)
   2b166:	239b      	movs	r3, #155	; 0x9b
   2b168:	4a74      	ldr	r2, [pc, #464]	; (2b33c <download_client_connect+0x354>)
   2b16a:	f011 fa33 	bl	3c5d4 <printk>
   2b16e:	219b      	movs	r1, #155	; 0x9b
   2b170:	4872      	ldr	r0, [pc, #456]	; (2b33c <download_client_connect+0x354>)
   2b172:	f011 fa75 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   2b176:	f8d8 3000 	ldr.w	r3, [r8]
   2b17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2b17c:	b94b      	cbnz	r3, 2b192 <download_client_connect+0x1aa>
   2b17e:	4978      	ldr	r1, [pc, #480]	; (2b360 <download_client_connect+0x378>)
   2b180:	486d      	ldr	r0, [pc, #436]	; (2b338 <download_client_connect+0x350>)
   2b182:	239c      	movs	r3, #156	; 0x9c
   2b184:	4a6d      	ldr	r2, [pc, #436]	; (2b33c <download_client_connect+0x354>)
   2b186:	f011 fa25 	bl	3c5d4 <printk>
   2b18a:	219c      	movs	r1, #156	; 0x9c
   2b18c:	486b      	ldr	r0, [pc, #428]	; (2b33c <download_client_connect+0x354>)
   2b18e:	f011 fa67 	bl	3c660 <assert_post_action>
	return socket_ops->freeaddrinfo(res);
   2b192:	f8d8 3000 	ldr.w	r3, [r8]
   2b196:	4648      	mov	r0, r9
   2b198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2b19a:	4798      	blx	r3
	if (err) {
   2b19c:	2e00      	cmp	r6, #0
   2b19e:	f000 80a6 	beq.w	2b2ee <download_client_connect+0x306>
		close(fd);
   2b1a2:	9802      	ldr	r0, [sp, #8]
   2b1a4:	f7ff fe00 	bl	2ada8 <close>
   2b1a8:	e78b      	b.n	2b0c2 <download_client_connect+0xda>
	if (cfg->apn != NULL) {
   2b1aa:	68b8      	ldr	r0, [r7, #8]
   2b1ac:	2800      	cmp	r0, #0
   2b1ae:	d052      	beq.n	2b256 <download_client_connect+0x26e>
		LOG_INF("Setting up APN: %s", log_strdup(cfg->apn));
   2b1b0:	2303      	movs	r3, #3
   2b1b2:	f04f 0a00 	mov.w	sl, #0
   2b1b6:	f363 0a07 	bfi	sl, r3, #0, #8
   2b1ba:	f011 fa74 	bl	3c6a6 <log_strdup>
   2b1be:	f364 1a8f 	bfi	sl, r4, #6, #10
   2b1c2:	4602      	mov	r2, r0
   2b1c4:	4967      	ldr	r1, [pc, #412]	; (2b364 <download_client_connect+0x37c>)
   2b1c6:	4650      	mov	r0, sl
   2b1c8:	f011 fa5b 	bl	3c682 <log_string_sync>
	struct ifreq ifr = {0};
   2b1cc:	2240      	movs	r2, #64	; 0x40
		err = socket_apn_set(fd, cfg->apn);
   2b1ce:	f8d7 b008 	ldr.w	fp, [r7, #8]
	struct ifreq ifr = {0};
   2b1d2:	2100      	movs	r1, #0
   2b1d4:	eb0d 0002 	add.w	r0, sp, r2
   2b1d8:	f013 fd97 	bl	3ed0a <memset>
	__ASSERT_NO_MSG(apn);
   2b1dc:	f1bb 0f00 	cmp.w	fp, #0
   2b1e0:	d109      	bne.n	2b1f6 <download_client_connect+0x20e>
   2b1e2:	4961      	ldr	r1, [pc, #388]	; (2b368 <download_client_connect+0x380>)
   2b1e4:	4854      	ldr	r0, [pc, #336]	; (2b338 <download_client_connect+0x350>)
   2b1e6:	2366      	movs	r3, #102	; 0x66
   2b1e8:	4a60      	ldr	r2, [pc, #384]	; (2b36c <download_client_connect+0x384>)
   2b1ea:	f011 f9f3 	bl	3c5d4 <printk>
   2b1ee:	2166      	movs	r1, #102	; 0x66
   2b1f0:	485e      	ldr	r0, [pc, #376]	; (2b36c <download_client_connect+0x384>)
   2b1f2:	f011 fa35 	bl	3c660 <assert_post_action>
	len = strlen(apn);
   2b1f6:	4658      	mov	r0, fp
   2b1f8:	f7f1 ff94 	bl	1d124 <strlen>
	if (len >= sizeof(ifr.ifr_name)) {
   2b1fc:	283f      	cmp	r0, #63	; 0x3f
	len = strlen(apn);
   2b1fe:	4682      	mov	sl, r0
	if (len >= sizeof(ifr.ifr_name)) {
   2b200:	d90a      	bls.n	2b218 <download_client_connect+0x230>
		LOG_ERR("Access point name is too long.");
   2b202:	2301      	movs	r3, #1
   2b204:	f04f 0000 	mov.w	r0, #0
   2b208:	f363 0007 	bfi	r0, r3, #0, #8
   2b20c:	f364 108f 	bfi	r0, r4, #6, #10
   2b210:	4957      	ldr	r1, [pc, #348]	; (2b370 <download_client_connect+0x388>)
   2b212:	f011 fa36 	bl	3c682 <log_string_sync>
		if (err) {
   2b216:	e79e      	b.n	2b156 <download_client_connect+0x16e>
	memcpy(ifr.ifr_name, apn, len);
   2b218:	2340      	movs	r3, #64	; 0x40
   2b21a:	4602      	mov	r2, r0
   2b21c:	4659      	mov	r1, fp
   2b21e:	eb0d 0003 	add.w	r0, sp, r3
   2b222:	f013 fd5f 	bl	3ece4 <__memcpy_chk>
	err = setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &ifr, len);
   2b226:	f8cd a000 	str.w	sl, [sp]
   2b22a:	ab10      	add	r3, sp, #64	; 0x40
   2b22c:	2219      	movs	r2, #25
   2b22e:	2101      	movs	r1, #1
   2b230:	9802      	ldr	r0, [sp, #8]
   2b232:	f7ff fd81 	bl	2ad38 <setsockopt>
	if (err) {
   2b236:	b170      	cbz	r0, 2b256 <download_client_connect+0x26e>
		LOG_ERR("Failed to bind socket, errno %d", errno);
   2b238:	2301      	movs	r3, #1
   2b23a:	f04f 0800 	mov.w	r8, #0
   2b23e:	f363 0807 	bfi	r8, r3, #0, #8
   2b242:	f011 fc03 	bl	3ca4c <__errno>
   2b246:	f364 188f 	bfi	r8, r4, #6, #10
   2b24a:	6802      	ldr	r2, [r0, #0]
   2b24c:	4949      	ldr	r1, [pc, #292]	; (2b374 <download_client_connect+0x38c>)
   2b24e:	4640      	mov	r0, r8
   2b250:	f011 fa17 	bl	3c682 <log_string_sync>
		if (err) {
   2b254:	e77f      	b.n	2b156 <download_client_connect+0x16e>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   2b256:	f8dd a01c 	ldr.w	sl, [sp, #28]
	__ASSERT_NO_MSG(socket_ops);
   2b25a:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 2b33c <download_client_connect+0x354>
   2b25e:	f1ba 0f00 	cmp.w	sl, #0
   2b262:	f43f af78 	beq.w	2b156 <download_client_connect+0x16e>
		struct sockaddr * const sa = addr->ai_addr;
   2b266:	f8da 6014 	ldr.w	r6, [sl, #20]
		switch (sa->sa_family) {
   2b26a:	8833      	ldrh	r3, [r6, #0]
   2b26c:	2b01      	cmp	r3, #1
   2b26e:	d001      	beq.n	2b274 <download_client_connect+0x28c>
   2b270:	2b02      	cmp	r3, #2
   2b272:	d101      	bne.n	2b278 <download_client_connect+0x290>
			((struct sockaddr_in *)sa)->sin_port = port;
   2b274:	9b04      	ldr	r3, [sp, #16]
   2b276:	8073      	strh	r3, [r6, #2]
		err = connect(fd, sa, addr->ai_addrlen);
   2b278:	f8da 3010 	ldr.w	r3, [sl, #16]
   2b27c:	9305      	str	r3, [sp, #20]
   2b27e:	4b2c      	ldr	r3, [pc, #176]	; (2b330 <download_client_connect+0x348>)
   2b280:	681b      	ldr	r3, [r3, #0]
   2b282:	b94b      	cbnz	r3, 2b298 <download_client_connect+0x2b0>
   2b284:	492b      	ldr	r1, [pc, #172]	; (2b334 <download_client_connect+0x34c>)
   2b286:	482c      	ldr	r0, [pc, #176]	; (2b338 <download_client_connect+0x350>)
   2b288:	2345      	movs	r3, #69	; 0x45
   2b28a:	465a      	mov	r2, fp
   2b28c:	f011 f9a2 	bl	3c5d4 <printk>
   2b290:	2145      	movs	r1, #69	; 0x45
   2b292:	4658      	mov	r0, fp
   2b294:	f011 f9e4 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   2b298:	4b25      	ldr	r3, [pc, #148]	; (2b330 <download_client_connect+0x348>)
   2b29a:	681b      	ldr	r3, [r3, #0]
   2b29c:	695b      	ldr	r3, [r3, #20]
   2b29e:	b94b      	cbnz	r3, 2b2b4 <download_client_connect+0x2cc>
   2b2a0:	4935      	ldr	r1, [pc, #212]	; (2b378 <download_client_connect+0x390>)
   2b2a2:	4825      	ldr	r0, [pc, #148]	; (2b338 <download_client_connect+0x350>)
   2b2a4:	2346      	movs	r3, #70	; 0x46
   2b2a6:	465a      	mov	r2, fp
   2b2a8:	f011 f994 	bl	3c5d4 <printk>
   2b2ac:	2146      	movs	r1, #70	; 0x46
   2b2ae:	4658      	mov	r0, fp
   2b2b0:	f011 f9d6 	bl	3c660 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   2b2b4:	f8d8 3000 	ldr.w	r3, [r8]
   2b2b8:	4631      	mov	r1, r6
   2b2ba:	695b      	ldr	r3, [r3, #20]
   2b2bc:	9a05      	ldr	r2, [sp, #20]
   2b2be:	9802      	ldr	r0, [sp, #8]
   2b2c0:	4798      	blx	r3
		if (err) {
   2b2c2:	4606      	mov	r6, r0
   2b2c4:	2800      	cmp	r0, #0
   2b2c6:	f43f af46 	beq.w	2b156 <download_client_connect+0x16e>
			LOG_ERR("Unable to connect, errno %d", errno);
   2b2ca:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   2b2ce:	f043 0301 	orr.w	r3, r3, #1
   2b2d2:	f363 0907 	bfi	r9, r3, #0, #8
   2b2d6:	f011 fbb9 	bl	3ca4c <__errno>
   2b2da:	f364 198f 	bfi	r9, r4, #6, #10
   2b2de:	6802      	ldr	r2, [r0, #0]
   2b2e0:	4926      	ldr	r1, [pc, #152]	; (2b37c <download_client_connect+0x394>)
   2b2e2:	4648      	mov	r0, r9
   2b2e4:	f011 f9cd 	bl	3c682 <log_string_sync>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   2b2e8:	f8da a01c 	ldr.w	sl, [sl, #28]
   2b2ec:	e7b7      	b.n	2b25e <download_client_connect+0x276>
		client->fd =
   2b2ee:	9b02      	ldr	r3, [sp, #8]
	if (client->fd < 0) {
   2b2f0:	2b00      	cmp	r3, #0
		client->fd =
   2b2f2:	602b      	str	r3, [r5, #0]
	if (client->fd < 0) {
   2b2f4:	f6ff ae7f 	blt.w	2aff6 <download_client_connect+0xe>
	client->host = host;
   2b2f8:	f241 0318 	movw	r3, #4120	; 0x1018
   2b2fc:	9a03      	ldr	r2, [sp, #12]
   2b2fe:	50ea      	str	r2, [r5, r3]
	client->config = *config;
   2b300:	f505 5581 	add.w	r5, r5, #4128	; 0x1020
   2b304:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
	LOG_INF("Connected to %s", log_strdup(host));
   2b308:	2303      	movs	r3, #3
	client->config = *config;
   2b30a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	LOG_INF("Connected to %s", log_strdup(host));
   2b30e:	f04f 0500 	mov.w	r5, #0
   2b312:	9803      	ldr	r0, [sp, #12]
   2b314:	f363 0507 	bfi	r5, r3, #0, #8
   2b318:	f011 f9c5 	bl	3c6a6 <log_strdup>
   2b31c:	f364 158f 	bfi	r5, r4, #6, #10
   2b320:	4602      	mov	r2, r0
   2b322:	4917      	ldr	r1, [pc, #92]	; (2b380 <download_client_connect+0x398>)
   2b324:	4628      	mov	r0, r5
   2b326:	f011 f9ac 	bl	3c682 <log_string_sync>
	if (err) {
   2b32a:	e666      	b.n	2affa <download_client_connect+0x12>
		return 0;
   2b32c:	2600      	movs	r6, #0
   2b32e:	e664      	b.n	2affa <download_client_connect+0x12>
   2b330:	20023a4c 	.word	0x20023a4c
   2b334:	000418d1 	.word	0x000418d1
   2b338:	00041757 	.word	0x00041757
   2b33c:	000418a8 	.word	0x000418a8
   2b340:	000448ec 	.word	0x000448ec
   2b344:	00040334 	.word	0x00040334
   2b348:	000402cc 	.word	0x000402cc
   2b34c:	00044d8b 	.word	0x00044d8b
   2b350:	00044d90 	.word	0x00044d90
   2b354:	00044db4 	.word	0x00044db4
   2b358:	00043196 	.word	0x00043196
   2b35c:	00044dd2 	.word	0x00044dd2
   2b360:	0004495d 	.word	0x0004495d
   2b364:	00044df4 	.word	0x00044df4
   2b368:	00044e07 	.word	0x00044e07
   2b36c:	0004504a 	.word	0x0004504a
   2b370:	00044e0b 	.word	0x00044e0b
   2b374:	00044e2a 	.word	0x00044e2a
   2b378:	000431a9 	.word	0x000431a9
   2b37c:	00044e4a 	.word	0x00044e4a
   2b380:	00044e66 	.word	0x00044e66

0002b384 <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   2b384:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   2b386:	4604      	mov	r4, r0
   2b388:	b300      	cbz	r0, 2b3cc <download_client_disconnect+0x48>
   2b38a:	6800      	ldr	r0, [r0, #0]
   2b38c:	2800      	cmp	r0, #0
   2b38e:	db1d      	blt.n	2b3cc <download_client_disconnect+0x48>
		return -EINVAL;
	}

	err = close(client->fd);
   2b390:	f7ff fd0a 	bl	2ada8 <close>
	if (err) {
   2b394:	b1b0      	cbz	r0, 2b3c4 <download_client_disconnect+0x40>
		LOG_ERR("Failed to close socket, errno %d", errno);
   2b396:	2301      	movs	r3, #1
   2b398:	f04f 0400 	mov.w	r4, #0
   2b39c:	4a0d      	ldr	r2, [pc, #52]	; (2b3d4 <download_client_disconnect+0x50>)
   2b39e:	f363 0407 	bfi	r4, r3, #0, #8
   2b3a2:	4b0d      	ldr	r3, [pc, #52]	; (2b3d8 <download_client_disconnect+0x54>)
   2b3a4:	1a9b      	subs	r3, r3, r2
   2b3a6:	08db      	lsrs	r3, r3, #3
   2b3a8:	f363 148f 	bfi	r4, r3, #6, #10
   2b3ac:	f011 fb4e 	bl	3ca4c <__errno>
   2b3b0:	490a      	ldr	r1, [pc, #40]	; (2b3dc <download_client_disconnect+0x58>)
   2b3b2:	6802      	ldr	r2, [r0, #0]
   2b3b4:	4620      	mov	r0, r4
   2b3b6:	f011 f964 	bl	3c682 <log_string_sync>
		return -errno;
   2b3ba:	f011 fb47 	bl	3ca4c <__errno>
   2b3be:	6800      	ldr	r0, [r0, #0]
   2b3c0:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   2b3c2:	bd10      	pop	{r4, pc}
	client->fd = -1;
   2b3c4:	f04f 33ff 	mov.w	r3, #4294967295
   2b3c8:	6023      	str	r3, [r4, #0]
	return 0;
   2b3ca:	e7fa      	b.n	2b3c2 <download_client_disconnect+0x3e>
		return -EINVAL;
   2b3cc:	f06f 0015 	mvn.w	r0, #21
   2b3d0:	e7f7      	b.n	2b3c2 <download_client_disconnect+0x3e>
   2b3d2:	bf00      	nop
   2b3d4:	000402cc 	.word	0x000402cc
   2b3d8:	00040334 	.word	0x00040334
   2b3dc:	00044e76 	.word	0x00044e76

0002b3e0 <reconnect>:
{
   2b3e0:	b510      	push	{r4, lr}
	LOG_INF("Reconnecting..");
   2b3e2:	2303      	movs	r3, #3
{
   2b3e4:	4604      	mov	r4, r0
	LOG_INF("Reconnecting..");
   2b3e6:	f04f 0000 	mov.w	r0, #0
   2b3ea:	4a0d      	ldr	r2, [pc, #52]	; (2b420 <reconnect+0x40>)
   2b3ec:	f363 0007 	bfi	r0, r3, #0, #8
   2b3f0:	4b0c      	ldr	r3, [pc, #48]	; (2b424 <reconnect+0x44>)
   2b3f2:	490d      	ldr	r1, [pc, #52]	; (2b428 <reconnect+0x48>)
   2b3f4:	1a9b      	subs	r3, r3, r2
   2b3f6:	08db      	lsrs	r3, r3, #3
   2b3f8:	f363 108f 	bfi	r0, r3, #6, #10
   2b3fc:	f011 f941 	bl	3c682 <log_string_sync>
	err = download_client_disconnect(dl);
   2b400:	4620      	mov	r0, r4
   2b402:	f7ff ffbf 	bl	2b384 <download_client_disconnect>
	if (err) {
   2b406:	b948      	cbnz	r0, 2b41c <reconnect+0x3c>
	err = download_client_connect(dl, dl->host, &dl->config);
   2b408:	f241 0318 	movw	r3, #4120	; 0x1018
   2b40c:	f504 5281 	add.w	r2, r4, #4128	; 0x1020
   2b410:	58e1      	ldr	r1, [r4, r3]
   2b412:	4620      	mov	r0, r4
}
   2b414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   2b418:	f7ff bde6 	b.w	2afe8 <download_client_connect>
}
   2b41c:	bd10      	pop	{r4, pc}
   2b41e:	bf00      	nop
   2b420:	000402cc 	.word	0x000402cc
   2b424:	00040334 	.word	0x00040334
   2b428:	000451b5 	.word	0x000451b5

0002b42c <download_thread>:
{
   2b42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b430:	4604      	mov	r4, r0
   2b432:	4b90      	ldr	r3, [pc, #576]	; (2b674 <_flash_used+0x78>)
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   2b434:	4a90      	ldr	r2, [pc, #576]	; (2b678 <_flash_used+0x7c>)
{
   2b436:	b091      	sub	sp, #68	; 0x44
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   2b438:	1a9b      	subs	r3, r3, r2
   2b43a:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
	k_thread_suspend(dl->tid);
   2b43e:	f500 5381 	add.w	r3, r0, #4128	; 0x1020
   2b442:	330c      	adds	r3, #12
   2b444:	930a      	str	r3, [sp, #40]	; 0x28
   2b446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b448:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_suspend(thread);
   2b44a:	f00d fcb1 	bl	38db0 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   2b44e:	f504 5580 	add.w	r5, r4, #4096	; 0x1000
   2b452:	3504      	adds	r5, #4
   2b454:	682b      	ldr	r3, [r5, #0]
   2b456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2b45a:	d30e      	bcc.n	2b47a <download_thread+0x4e>
   2b45c:	4987      	ldr	r1, [pc, #540]	; (2b67c <_flash_used+0x80>)
   2b45e:	f240 139f 	movw	r3, #415	; 0x19f
   2b462:	4a87      	ldr	r2, [pc, #540]	; (2b680 <_flash_used+0x84>)
   2b464:	4887      	ldr	r0, [pc, #540]	; (2b684 <_flash_used+0x88>)
   2b466:	f011 f8b5 	bl	3c5d4 <printk>
   2b46a:	4887      	ldr	r0, [pc, #540]	; (2b688 <_flash_used+0x8c>)
   2b46c:	f011 f8b2 	bl	3c5d4 <printk>
   2b470:	f240 119f 	movw	r1, #415	; 0x19f
   2b474:	4882      	ldr	r0, [pc, #520]	; (2b680 <_flash_used+0x84>)
   2b476:	f011 f8f3 	bl	3c660 <assert_post_action>
		len = recv(dl->fd, dl->buf + dl->offset,
   2b47a:	4626      	mov	r6, r4
   2b47c:	f856 3b04 	ldr.w	r3, [r6], #4
   2b480:	682f      	ldr	r7, [r5, #0]
   2b482:	930b      	str	r3, [sp, #44]	; 0x2c
	__ASSERT_NO_MSG(socket_ops);
   2b484:	4b81      	ldr	r3, [pc, #516]	; (2b68c <_flash_used+0x90>)
   2b486:	eb06 0807 	add.w	r8, r6, r7
   2b48a:	681b      	ldr	r3, [r3, #0]
   2b48c:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
   2b490:	b94b      	cbnz	r3, 2b4a6 <download_thread+0x7a>
   2b492:	497f      	ldr	r1, [pc, #508]	; (2b690 <_flash_used+0x94>)
   2b494:	487b      	ldr	r0, [pc, #492]	; (2b684 <_flash_used+0x88>)
   2b496:	2369      	movs	r3, #105	; 0x69
   2b498:	4a7e      	ldr	r2, [pc, #504]	; (2b694 <_flash_used+0x98>)
   2b49a:	f011 f89b 	bl	3c5d4 <printk>
   2b49e:	2169      	movs	r1, #105	; 0x69
   2b4a0:	487c      	ldr	r0, [pc, #496]	; (2b694 <_flash_used+0x98>)
   2b4a2:	f011 f8dd 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   2b4a6:	4b79      	ldr	r3, [pc, #484]	; (2b68c <_flash_used+0x90>)
   2b4a8:	681b      	ldr	r3, [r3, #0]
   2b4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b4ac:	b94b      	cbnz	r3, 2b4c2 <download_thread+0x96>
   2b4ae:	497a      	ldr	r1, [pc, #488]	; (2b698 <_flash_used+0x9c>)
   2b4b0:	4874      	ldr	r0, [pc, #464]	; (2b684 <_flash_used+0x88>)
   2b4b2:	236a      	movs	r3, #106	; 0x6a
   2b4b4:	4a77      	ldr	r2, [pc, #476]	; (2b694 <_flash_used+0x98>)
   2b4b6:	f011 f88d 	bl	3c5d4 <printk>
   2b4ba:	216a      	movs	r1, #106	; 0x6a
   2b4bc:	4875      	ldr	r0, [pc, #468]	; (2b694 <_flash_used+0x98>)
   2b4be:	f011 f8cf 	bl	3c660 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   2b4c2:	4b72      	ldr	r3, [pc, #456]	; (2b68c <_flash_used+0x90>)
   2b4c4:	463a      	mov	r2, r7
   2b4c6:	681b      	ldr	r3, [r3, #0]
   2b4c8:	4641      	mov	r1, r8
   2b4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b4cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2b4ce:	469c      	mov	ip, r3
   2b4d0:	2300      	movs	r3, #0
   2b4d2:	4667      	mov	r7, ip
   2b4d4:	47b8      	blx	r7
		if ((len == 0) || (len == -1)) {
   2b4d6:	1e43      	subs	r3, r0, #1
   2b4d8:	3303      	adds	r3, #3
   2b4da:	4680      	mov	r8, r0
			if ((dl->offset > 0) && (dl->has_header)) {
   2b4dc:	682b      	ldr	r3, [r5, #0]
		if ((len == 0) || (len == -1)) {
   2b4de:	d974      	bls.n	2b5ca <download_thread+0x19e>
			if ((dl->offset > 0) && (dl->has_header)) {
   2b4e0:	b1db      	cbz	r3, 2b51a <download_thread+0xee>
   2b4e2:	f241 0314 	movw	r3, #4116	; 0x1014
   2b4e6:	5ce3      	ldrb	r3, [r4, r3]
   2b4e8:	b1bb      	cbz	r3, 2b51a <download_thread+0xee>
				rc = fragment_evt_send(dl);
   2b4ea:	4620      	mov	r0, r4
   2b4ec:	f7ff fbda 	bl	2aca4 <fragment_evt_send>
				if (rc) {
   2b4f0:	b198      	cbz	r0, 2b51a <download_thread+0xee>
					LOG_INF("Fragment refused, download "
   2b4f2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2b4f6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   2b4fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2b4fe:	f043 0303 	orr.w	r3, r3, #3
   2b502:	f363 0207 	bfi	r2, r3, #0, #8
   2b506:	b293      	uxth	r3, r2
   2b508:	f36b 138f 	bfi	r3, fp, #6, #10
   2b50c:	f8ad 3010 	strh.w	r3, [sp, #16]
			LOG_INF("Fragment refused, download stopped.");
   2b510:	4962      	ldr	r1, [pc, #392]	; (2b69c <_flash_used+0xa0>)
   2b512:	b298      	uxth	r0, r3
   2b514:	f011 f8b5 	bl	3c682 <log_string_sync>
   2b518:	e795      	b.n	2b446 <download_thread+0x1a>
			if (len == -1) {
   2b51a:	f504 5603 	add.w	r6, r4, #8384	; 0x20c0
   2b51e:	f1b8 3fff 	cmp.w	r8, #4294967295
   2b522:	f106 0620 	add.w	r6, r6, #32
   2b526:	d13b      	bne.n	2b5a0 <download_thread+0x174>
				LOG_ERR("Error in recv(), errno %d", errno);
   2b528:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2b52c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2b530:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2b534:	f043 0301 	orr.w	r3, r3, #1
   2b538:	f363 0207 	bfi	r2, r3, #0, #8
   2b53c:	b293      	uxth	r3, r2
   2b53e:	f36b 138f 	bfi	r3, fp, #6, #10
   2b542:	f8ad 3014 	strh.w	r3, [sp, #20]
   2b546:	f011 fa81 	bl	3ca4c <__errno>
   2b54a:	4955      	ldr	r1, [pc, #340]	; (2b6a0 <_flash_used+0xa4>)
   2b54c:	6802      	ldr	r2, [r0, #0]
   2b54e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   2b552:	f011 f896 	bl	3c682 <log_string_sync>
				rc = error_evt_send(dl, ENOTCONN);
   2b556:	2180      	movs	r1, #128	; 0x80
				rc = error_evt_send(dl, ECONNRESET);
   2b558:	4630      	mov	r0, r6
   2b55a:	f013 f973 	bl	3e844 <error_evt_send.isra.1>
			if (rc) {
   2b55e:	2800      	cmp	r0, #0
   2b560:	f47f af71 	bne.w	2b446 <download_thread+0x1a>
			reconnect(dl);
   2b564:	4620      	mov	r0, r4
   2b566:	f7ff ff3b 	bl	2b3e0 <reconnect>
		dl->offset = 0;
   2b56a:	2700      	movs	r7, #0
		dl->has_header = false;
   2b56c:	46b8      	mov	r8, r7
   2b56e:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
   2b572:	3614      	adds	r6, #20
		dl->offset = 0;
   2b574:	602f      	str	r7, [r5, #0]
		rc = get_request_send(dl);
   2b576:	4620      	mov	r0, r4
		dl->has_header = false;
   2b578:	f886 8000 	strb.w	r8, [r6]
		rc = get_request_send(dl);
   2b57c:	f7ff fc40 	bl	2ae00 <get_request_send>
		if (rc) {
   2b580:	2800      	cmp	r0, #0
   2b582:	f43f af67 	beq.w	2b454 <download_thread+0x28>
			rc = error_evt_send(dl, ECONNRESET);
   2b586:	f504 5003 	add.w	r0, r4, #8384	; 0x20c0
   2b58a:	2168      	movs	r1, #104	; 0x68
   2b58c:	3020      	adds	r0, #32
   2b58e:	f013 f959 	bl	3e844 <error_evt_send.isra.1>
			if (rc) {
   2b592:	2800      	cmp	r0, #0
   2b594:	f47f af57 	bne.w	2b446 <download_thread+0x1a>
			reconnect(dl);
   2b598:	4620      	mov	r0, r4
   2b59a:	f7ff ff21 	bl	2b3e0 <reconnect>
			goto send_again;
   2b59e:	e7e9      	b.n	2b574 <download_thread+0x148>
				LOG_WRN("Peer closed connection!");
   2b5a0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2b5a4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2b5a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2b5ac:	f043 0302 	orr.w	r3, r3, #2
   2b5b0:	f363 0207 	bfi	r2, r3, #0, #8
   2b5b4:	b293      	uxth	r3, r2
   2b5b6:	f36b 138f 	bfi	r3, fp, #6, #10
   2b5ba:	493a      	ldr	r1, [pc, #232]	; (2b6a4 <_flash_used+0xa8>)
   2b5bc:	b298      	uxth	r0, r3
   2b5be:	f8ad 3018 	strh.w	r3, [sp, #24]
   2b5c2:	f011 f85e 	bl	3c682 <log_string_sync>
				rc = error_evt_send(dl, ECONNRESET);
   2b5c6:	2168      	movs	r1, #104	; 0x68
   2b5c8:	e7c6      	b.n	2b558 <download_thread+0x12c>
		dl->offset += len;
   2b5ca:	4403      	add	r3, r0
   2b5cc:	602b      	str	r3, [r5, #0]
		if (!dl->has_header) {
   2b5ce:	f241 0314 	movw	r3, #4116	; 0x1014
   2b5d2:	5ce3      	ldrb	r3, [r4, r3]
   2b5d4:	2b00      	cmp	r3, #0
   2b5d6:	f040 80b9 	bne.w	2b74c <_flash_used+0x150>
	p = strstr(client->buf, "\r\n\r\n");
   2b5da:	4933      	ldr	r1, [pc, #204]	; (2b6a8 <_flash_used+0xac>)
   2b5dc:	4630      	mov	r0, r6
   2b5de:	f013 fd9e 	bl	3f11e <strstr>
	if (!p) {
   2b5e2:	4607      	mov	r7, r0
   2b5e4:	2800      	cmp	r0, #0
   2b5e6:	f43f af35 	beq.w	2b454 <download_thread+0x28>
	hdr = p + strlen("\r\n\r\n") - client->buf;
   2b5ea:	482f      	ldr	r0, [pc, #188]	; (2b6a8 <_flash_used+0xac>)
   2b5ec:	f7f1 fd9a 	bl	1d124 <strlen>
   2b5f0:	183b      	adds	r3, r7, r0
   2b5f2:	1b9f      	subs	r7, r3, r6
	__ASSERT(hdr < sizeof(client->buf), "Buffer overflow");
   2b5f4:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
	hdr = p + strlen("\r\n\r\n") - client->buf;
   2b5f8:	930b      	str	r3, [sp, #44]	; 0x2c
	__ASSERT(hdr < sizeof(client->buf), "Buffer overflow");
   2b5fa:	d30e      	bcc.n	2b61a <_flash_used+0x1e>
   2b5fc:	492b      	ldr	r1, [pc, #172]	; (2b6ac <_flash_used+0xb0>)
   2b5fe:	f240 132d 	movw	r3, #301	; 0x12d
   2b602:	4a1f      	ldr	r2, [pc, #124]	; (2b680 <_flash_used+0x84>)
   2b604:	481f      	ldr	r0, [pc, #124]	; (2b684 <_flash_used+0x88>)
   2b606:	f010 ffe5 	bl	3c5d4 <printk>
   2b60a:	481f      	ldr	r0, [pc, #124]	; (2b688 <_flash_used+0x8c>)
   2b60c:	f010 ffe2 	bl	3c5d4 <printk>
   2b610:	f240 112d 	movw	r1, #301	; 0x12d
   2b614:	481a      	ldr	r0, [pc, #104]	; (2b680 <_flash_used+0x84>)
   2b616:	f011 f823 	bl	3c660 <assert_post_action>
	if (client->file_size == 0) {
   2b61a:	f241 0308 	movw	r3, #4104	; 0x1008
   2b61e:	58e3      	ldr	r3, [r4, r3]
   2b620:	2b00      	cmp	r3, #0
   2b622:	d153      	bne.n	2b6cc <_flash_used+0xd0>
		p = strstr(client->buf, "Content-Range: bytes");
   2b624:	4922      	ldr	r1, [pc, #136]	; (2b6b0 <_flash_used+0xb4>)
   2b626:	4630      	mov	r0, r6
   2b628:	f013 fd79 	bl	3f11e <strstr>
		if (!p) {
   2b62c:	b990      	cbnz	r0, 2b654 <_flash_used+0x58>
			LOG_ERR("Server did not send "
   2b62e:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   2b632:	f043 0301 	orr.w	r3, r3, #1
   2b636:	f363 0a07 	bfi	sl, r3, #0, #8
   2b63a:	f36b 1a8f 	bfi	sl, fp, #6, #10
   2b63e:	4650      	mov	r0, sl
   2b640:	491c      	ldr	r1, [pc, #112]	; (2b6b4 <_flash_used+0xb8>)
			LOG_ERR("Server did not send file size in response");
   2b642:	f011 f81e 	bl	3c682 <log_string_sync>
				error_evt_send(dl, EBADMSG);
   2b646:	f504 5003 	add.w	r0, r4, #8384	; 0x20c0
   2b64a:	214d      	movs	r1, #77	; 0x4d
   2b64c:	3020      	adds	r0, #32
   2b64e:	f013 f8f9 	bl	3e844 <error_evt_send.isra.1>
				break;
   2b652:	e6f8      	b.n	2b446 <download_thread+0x1a>
		p = strstr(p, "/");
   2b654:	4918      	ldr	r1, [pc, #96]	; (2b6b8 <_flash_used+0xbc>)
   2b656:	f013 fd62 	bl	3f11e <strstr>
		if (!p) {
   2b65a:	bb88      	cbnz	r0, 2b6c0 <_flash_used+0xc4>
			LOG_ERR("Server did not send file size in response");
   2b65c:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   2b660:	f043 0301 	orr.w	r3, r3, #1
   2b664:	f363 0907 	bfi	r9, r3, #0, #8
   2b668:	f36b 198f 	bfi	r9, fp, #6, #10
   2b66c:	4913      	ldr	r1, [pc, #76]	; (2b6bc <_flash_used+0xc0>)
   2b66e:	4648      	mov	r0, r9
   2b670:	e7e7      	b.n	2b642 <_flash_used+0x46>
   2b672:	bf00      	nop
   2b674:	00040334 	.word	0x00040334
   2b678:	000402cc 	.word	0x000402cc
   2b67c:	00044eac 	.word	0x00044eac
   2b680:	0004504a 	.word	0x0004504a
   2b684:	00041757 	.word	0x00041757
   2b688:	00044ec9 	.word	0x00044ec9
   2b68c:	20023a4c 	.word	0x20023a4c
   2b690:	000418d1 	.word	0x000418d1
   2b694:	000418a8 	.word	0x000418a8
   2b698:	000431bd 	.word	0x000431bd
   2b69c:	00044edb 	.word	0x00044edb
   2b6a0:	00044eff 	.word	0x00044eff
   2b6a4:	00044f19 	.word	0x00044f19
   2b6a8:	0004515e 	.word	0x0004515e
   2b6ac:	00044f31 	.word	0x00044f31
   2b6b0:	00044f4b 	.word	0x00044f4b
   2b6b4:	00044f60 	.word	0x00044f60
   2b6b8:	00044f90 	.word	0x00044f90
   2b6bc:	00044f92 	.word	0x00044f92
		client->file_size = atoi(p + 1);
   2b6c0:	3001      	adds	r0, #1
   2b6c2:	f013 fae2 	bl	3ec8a <atoi>
   2b6c6:	f241 0308 	movw	r3, #4104	; 0x1008
   2b6ca:	50e0      	str	r0, [r4, r3]
	p = strstr(client->buf, "Connection: close");
   2b6cc:	4958      	ldr	r1, [pc, #352]	; (2b830 <_flash_used+0x234>)
   2b6ce:	4630      	mov	r0, r6
   2b6d0:	f013 fd25 	bl	3f11e <strstr>
	if (p) {
   2b6d4:	b1b0      	cbz	r0, 2b704 <_flash_used+0x108>
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   2b6d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2b6da:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   2b6de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2b6e2:	f043 0302 	orr.w	r3, r3, #2
   2b6e6:	f363 0207 	bfi	r2, r3, #0, #8
   2b6ea:	b293      	uxth	r3, r2
   2b6ec:	f36b 138f 	bfi	r3, fp, #6, #10
   2b6f0:	b298      	uxth	r0, r3
   2b6f2:	4950      	ldr	r1, [pc, #320]	; (2b834 <_flash_used+0x238>)
   2b6f4:	f8ad 3008 	strh.w	r3, [sp, #8]
   2b6f8:	f010 ffc3 	bl	3c682 <log_string_sync>
		client->connection_close = true;
   2b6fc:	f241 0315 	movw	r3, #4117	; 0x1015
   2b700:	2201      	movs	r2, #1
   2b702:	54e2      	strb	r2, [r4, r3]
	if (client->offset != hdr) {
   2b704:	682a      	ldr	r2, [r5, #0]
   2b706:	4297      	cmp	r7, r2
   2b708:	d062      	beq.n	2b7d0 <_flash_used+0x1d4>
		LOG_WRN("Copying %u payload bytes", client->offset - hdr);
   2b70a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2b70e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2b712:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2b716:	f043 0302 	orr.w	r3, r3, #2
   2b71a:	f363 0107 	bfi	r1, r3, #0, #8
   2b71e:	b28b      	uxth	r3, r1
   2b720:	f36b 138f 	bfi	r3, fp, #6, #10
   2b724:	b298      	uxth	r0, r3
   2b726:	1bd2      	subs	r2, r2, r7
   2b728:	4943      	ldr	r1, [pc, #268]	; (2b838 <_flash_used+0x23c>)
   2b72a:	f8ad 300c 	strh.w	r3, [sp, #12]
   2b72e:	f010 ffa8 	bl	3c682 <log_string_sync>
		memcpy(client->buf, client->buf + hdr, client->offset - hdr);
   2b732:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b734:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b736:	1bd2      	subs	r2, r2, r7
   2b738:	4630      	mov	r0, r6
   2b73a:	f013 fac6 	bl	3ecca <memcpy>
		client->offset -= hdr;
   2b73e:	682b      	ldr	r3, [r5, #0]
   2b740:	1bdf      	subs	r7, r3, r7
   2b742:	602f      	str	r7, [r5, #0]
			dl->has_header = true;
   2b744:	2301      	movs	r3, #1
   2b746:	f241 0214 	movw	r2, #4116	; 0x1014
   2b74a:	54a3      	strb	r3, [r4, r2]
		dl->progress += MIN(dl->offset, len);
   2b74c:	f241 060c 	movw	r6, #4108	; 0x100c
		if ((dl->offset < dl->fragment_size) &&
   2b750:	f241 0010 	movw	r0, #4112	; 0x1010
		dl->progress += MIN(dl->offset, len);
   2b754:	6829      	ldr	r1, [r5, #0]
   2b756:	59a2      	ldr	r2, [r4, r6]
   2b758:	f241 0708 	movw	r7, #4104	; 0x1008
   2b75c:	4541      	cmp	r1, r8
   2b75e:	bf94      	ite	ls
   2b760:	1852      	addls	r2, r2, r1
   2b762:	4442      	addhi	r2, r8
		if ((dl->offset < dl->fragment_size) &&
   2b764:	5820      	ldr	r0, [r4, r0]
		dl->progress += MIN(dl->offset, len);
   2b766:	51a2      	str	r2, [r4, r6]
		if ((dl->offset < dl->fragment_size) &&
   2b768:	4281      	cmp	r1, r0
   2b76a:	59e3      	ldr	r3, [r4, r7]
   2b76c:	d202      	bcs.n	2b774 <_flash_used+0x178>
   2b76e:	429a      	cmp	r2, r3
   2b770:	f47f ae70 	bne.w	2b454 <download_thread+0x28>
		LOG_INF("Downloaded %u/%u bytes (%d%%)", dl->progress,
   2b774:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   2b778:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   2b77c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
   2b780:	f041 0103 	orr.w	r1, r1, #3
   2b784:	f361 0007 	bfi	r0, r1, #0, #8
   2b788:	b281      	uxth	r1, r0
   2b78a:	f36b 118f 	bfi	r1, fp, #6, #10
   2b78e:	f8ad 101c 	strh.w	r1, [sp, #28]
   2b792:	2164      	movs	r1, #100	; 0x64
   2b794:	4351      	muls	r1, r2
   2b796:	fbb1 f1f3 	udiv	r1, r1, r3
   2b79a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   2b79e:	9100      	str	r1, [sp, #0]
   2b7a0:	4926      	ldr	r1, [pc, #152]	; (2b83c <_flash_used+0x240>)
   2b7a2:	f010 ff6e 	bl	3c682 <log_string_sync>
		rc = fragment_evt_send(dl);
   2b7a6:	4620      	mov	r0, r4
   2b7a8:	f7ff fa7c 	bl	2aca4 <fragment_evt_send>
		if (rc) {
   2b7ac:	4680      	mov	r8, r0
   2b7ae:	b190      	cbz	r0, 2b7d6 <_flash_used+0x1da>
			LOG_INF("Fragment refused, download stopped.");
   2b7b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2b7b4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2b7b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2b7bc:	f043 0303 	orr.w	r3, r3, #3
   2b7c0:	f363 0207 	bfi	r2, r3, #0, #8
   2b7c4:	b293      	uxth	r3, r2
   2b7c6:	f36b 138f 	bfi	r3, fp, #6, #10
   2b7ca:	f8ad 3020 	strh.w	r3, [sp, #32]
   2b7ce:	e69f      	b.n	2b510 <download_thread+0xe4>
		client->offset = 0;
   2b7d0:	2300      	movs	r3, #0
   2b7d2:	602b      	str	r3, [r5, #0]
			if (rc > 0) {
   2b7d4:	e7b6      	b.n	2b744 <_flash_used+0x148>
		if (dl->progress == dl->file_size) {
   2b7d6:	59a2      	ldr	r2, [r4, r6]
   2b7d8:	59e3      	ldr	r3, [r4, r7]
   2b7da:	429a      	cmp	r2, r3
   2b7dc:	d11f      	bne.n	2b81e <_flash_used+0x222>
			LOG_INF("Download complete");
   2b7de:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2b7e2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2b7e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2b7ea:	f043 0303 	orr.w	r3, r3, #3
   2b7ee:	f363 0207 	bfi	r2, r3, #0, #8
   2b7f2:	b293      	uxth	r3, r2
   2b7f4:	f36b 138f 	bfi	r3, fp, #6, #10
   2b7f8:	b298      	uxth	r0, r3
   2b7fa:	4911      	ldr	r1, [pc, #68]	; (2b840 <_flash_used+0x244>)
   2b7fc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   2b800:	f010 ff3f 	bl	3c682 <log_string_sync>
			const struct download_client_evt evt = {
   2b804:	2302      	movs	r3, #2
   2b806:	e9cd 880d 	strd	r8, r8, [sp, #52]	; 0x34
   2b80a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			dl->callback(&evt);
   2b80e:	f242 03e0 	movw	r3, #8416	; 0x20e0
			const struct download_client_evt evt = {
   2b812:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
			dl->callback(&evt);
   2b816:	58e3      	ldr	r3, [r4, r3]
   2b818:	a80d      	add	r0, sp, #52	; 0x34
   2b81a:	4798      	blx	r3
			break;
   2b81c:	e613      	b.n	2b446 <download_thread+0x1a>
		if (dl->connection_close) {
   2b81e:	f241 0315 	movw	r3, #4117	; 0x1015
   2b822:	5ce2      	ldrb	r2, [r4, r3]
   2b824:	2a00      	cmp	r2, #0
   2b826:	f43f aea0 	beq.w	2b56a <download_thread+0x13e>
			dl->connection_close = false;
   2b82a:	54e0      	strb	r0, [r4, r3]
   2b82c:	e69a      	b.n	2b564 <download_thread+0x138>
   2b82e:	bf00      	nop
   2b830:	00044fbc 	.word	0x00044fbc
   2b834:	00044fce 	.word	0x00044fce
   2b838:	00045001 	.word	0x00045001
   2b83c:	0004501a 	.word	0x0004501a
   2b840:	00045038 	.word	0x00045038

0002b844 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   2b844:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   2b846:	4604      	mov	r4, r0
   2b848:	b390      	cbz	r0, 2b8b0 <download_client_start+0x6c>
   2b84a:	6803      	ldr	r3, [r0, #0]
   2b84c:	2b00      	cmp	r3, #0
   2b84e:	db2f      	blt.n	2b8b0 <download_client_start+0x6c>
		return -EINVAL;
	}

	client->file = file;
   2b850:	f241 031c 	movw	r3, #4124	; 0x101c
	client->file_size = 0;
	client->progress = from;
   2b854:	f241 060c 	movw	r6, #4108	; 0x100c
	client->file = file;
   2b858:	50c1      	str	r1, [r0, r3]
	client->file_size = 0;
   2b85a:	2300      	movs	r3, #0
   2b85c:	f241 0008 	movw	r0, #4104	; 0x1008
   2b860:	5023      	str	r3, [r4, r0]
	client->progress = from;
   2b862:	51a2      	str	r2, [r4, r6]

	client->offset = 0;
   2b864:	f241 0204 	movw	r2, #4100	; 0x1004
   2b868:	50a3      	str	r3, [r4, r2]
	client->has_header = false;
   2b86a:	f241 0214 	movw	r2, #4116	; 0x1014

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   2b86e:	f04f 0500 	mov.w	r5, #0
	client->has_header = false;
   2b872:	54a3      	strb	r3, [r4, r2]
	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   2b874:	2303      	movs	r3, #3
   2b876:	4a10      	ldr	r2, [pc, #64]	; (2b8b8 <download_client_start+0x74>)
   2b878:	f363 0507 	bfi	r5, r3, #0, #8
   2b87c:	4b0f      	ldr	r3, [pc, #60]	; (2b8bc <download_client_start+0x78>)
   2b87e:	4608      	mov	r0, r1
   2b880:	1a9b      	subs	r3, r3, r2
   2b882:	08db      	lsrs	r3, r3, #3
   2b884:	f363 158f 	bfi	r5, r3, #6, #10
   2b888:	f010 ff0d 	bl	3c6a6 <log_strdup>
   2b88c:	59a3      	ldr	r3, [r4, r6]
   2b88e:	4602      	mov	r2, r0
   2b890:	490b      	ldr	r1, [pc, #44]	; (2b8c0 <download_client_start+0x7c>)
   2b892:	4628      	mov	r0, r5
   2b894:	f010 fef5 	bl	3c682 <log_string_sync>
		client->progress);

	err = get_request_send(client);
   2b898:	4620      	mov	r0, r4
   2b89a:	f7ff fab1 	bl	2ae00 <get_request_send>
	if (err) {
   2b89e:	4605      	mov	r5, r0
   2b8a0:	b920      	cbnz	r0, 2b8ac <download_client_start+0x68>
		return err;
	}

	/* Let the thread run */
	k_thread_resume(client->tid);
   2b8a2:	f241 032c 	movw	r3, #4140	; 0x102c
   2b8a6:	58e0      	ldr	r0, [r4, r3]
	z_impl_k_thread_resume(thread);
   2b8a8:	f00d fad6 	bl	38e58 <z_impl_k_thread_resume>

	return 0;
}
   2b8ac:	4628      	mov	r0, r5
   2b8ae:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2b8b0:	f06f 0515 	mvn.w	r5, #21
   2b8b4:	e7fa      	b.n	2b8ac <download_client_start+0x68>
   2b8b6:	bf00      	nop
   2b8b8:	000402cc 	.word	0x000402cc
   2b8bc:	00040334 	.word	0x00040334
   2b8c0:	00044e97 	.word	0x00044e97

0002b8c4 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   2b8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   2b8c6:	a801      	add	r0, sp, #4
   2b8c8:	f001 f87e 	bl	2c9c8 <dfu_target_offset_get>

	err = download_client_start(&dlc, dlc.file, offset);
   2b8cc:	f241 031c 	movw	r3, #4124	; 0x101c
   2b8d0:	4812      	ldr	r0, [pc, #72]	; (2b91c <download_with_offset+0x58>)
   2b8d2:	9a01      	ldr	r2, [sp, #4]
   2b8d4:	58c1      	ldr	r1, [r0, r3]
   2b8d6:	f7ff ffb5 	bl	2b844 <download_client_start>

	LOG_INF("Downloading from offset: 0x%x", offset);
   2b8da:	2303      	movs	r3, #3
	err = download_client_start(&dlc, dlc.file, offset);
   2b8dc:	4605      	mov	r5, r0
	LOG_INF("Downloading from offset: 0x%x", offset);
   2b8de:	f04f 0000 	mov.w	r0, #0
   2b8e2:	4c0f      	ldr	r4, [pc, #60]	; (2b920 <download_with_offset+0x5c>)
   2b8e4:	f363 0007 	bfi	r0, r3, #0, #8
   2b8e8:	4b0e      	ldr	r3, [pc, #56]	; (2b924 <download_with_offset+0x60>)
   2b8ea:	9a01      	ldr	r2, [sp, #4]
   2b8ec:	1ae4      	subs	r4, r4, r3
   2b8ee:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2b8f2:	f364 108f 	bfi	r0, r4, #6, #10
   2b8f6:	490c      	ldr	r1, [pc, #48]	; (2b928 <download_with_offset+0x64>)
   2b8f8:	f010 fec3 	bl	3c682 <log_string_sync>
	if (err != 0) {
   2b8fc:	b15d      	cbz	r5, 2b916 <download_with_offset+0x52>
		LOG_ERR("%s failed with error %d", __func__, err);
   2b8fe:	2301      	movs	r3, #1
   2b900:	f04f 0000 	mov.w	r0, #0
   2b904:	f363 0007 	bfi	r0, r3, #0, #8
   2b908:	f364 108f 	bfi	r0, r4, #6, #10
   2b90c:	462b      	mov	r3, r5
   2b90e:	4a07      	ldr	r2, [pc, #28]	; (2b92c <download_with_offset+0x68>)
   2b910:	4907      	ldr	r1, [pc, #28]	; (2b930 <download_with_offset+0x6c>)
   2b912:	f010 feb6 	bl	3c682 <log_string_sync>
	}
}
   2b916:	b003      	add	sp, #12
   2b918:	bd30      	pop	{r4, r5, pc}
   2b91a:	bf00      	nop
   2b91c:	20020958 	.word	0x20020958
   2b920:	00040344 	.word	0x00040344
   2b924:	000402cc 	.word	0x000402cc
   2b928:	000452cf 	.word	0x000452cf
   2b92c:	000451d4 	.word	0x000451d4
   2b930:	000452ed 	.word	0x000452ed

0002b934 <send_evt>:
	const struct fota_download_evt evt = {
   2b934:	2300      	movs	r3, #0
{
   2b936:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   2b938:	e9cd 3300 	strd	r3, r3, [sp]
	callback(&evt);
   2b93c:	4b04      	ldr	r3, [pc, #16]	; (2b950 <send_evt+0x1c>)
	const struct fota_download_evt evt = {
   2b93e:	f88d 0000 	strb.w	r0, [sp]
	callback(&evt);
   2b942:	681b      	ldr	r3, [r3, #0]
   2b944:	4668      	mov	r0, sp
   2b946:	4798      	blx	r3
}
   2b948:	b003      	add	sp, #12
   2b94a:	f85d fb04 	ldr.w	pc, [sp], #4
   2b94e:	bf00      	nop
   2b950:	2002485c 	.word	0x2002485c

0002b954 <download_client_callback>:
{
   2b954:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (event == NULL) {
   2b958:	4605      	mov	r5, r0
   2b95a:	2800      	cmp	r0, #0
   2b95c:	f000 80f0 	beq.w	2bb40 <download_client_callback+0x1ec>
	switch (event->id) {
   2b960:	7803      	ldrb	r3, [r0, #0]
   2b962:	2b01      	cmp	r3, #1
   2b964:	f000 80a8 	beq.w	2bab8 <download_client_callback+0x164>
   2b968:	b123      	cbz	r3, 2b974 <download_client_callback+0x20>
   2b96a:	2b02      	cmp	r3, #2
   2b96c:	f000 8081 	beq.w	2ba72 <download_client_callback+0x11e>
	return 0;
   2b970:	2400      	movs	r4, #0
			socket_retries_left--;
   2b972:	e02c      	b.n	2b9ce <download_client_callback+0x7a>
		if (first_fragment) {
   2b974:	4e74      	ldr	r6, [pc, #464]	; (2bb48 <download_client_callback+0x1f4>)
   2b976:	7833      	ldrb	r3, [r6, #0]
   2b978:	46b0      	mov	r8, r6
   2b97a:	2b00      	cmp	r3, #0
   2b97c:	d04b      	beq.n	2ba16 <download_client_callback+0xc2>
			err = download_client_file_size_get(&dlc, &file_size);
   2b97e:	4f73      	ldr	r7, [pc, #460]	; (2bb4c <download_client_callback+0x1f8>)
   2b980:	4873      	ldr	r0, [pc, #460]	; (2bb50 <download_client_callback+0x1fc>)
   2b982:	4639      	mov	r1, r7
   2b984:	f012 ff6d 	bl	3e862 <download_client_file_size_get>
			if (err != 0) {
   2b988:	4604      	mov	r4, r0
   2b98a:	b118      	cbz	r0, 2b994 <download_client_callback+0x40>
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   2b98c:	2004      	movs	r0, #4
   2b98e:	f7ff ffd1 	bl	2b934 <send_evt>
			return err;
   2b992:	e01c      	b.n	2b9ce <download_client_callback+0x7a>
			first_fragment = false;
   2b994:	7030      	strb	r0, [r6, #0]
			int img_type = dfu_target_img_type(event->fragment.buf,
   2b996:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   2b99a:	f000 ffb7 	bl	2c90c <dfu_target_img_type>
			err = dfu_target_init(img_type, file_size,
   2b99e:	4a6d      	ldr	r2, [pc, #436]	; (2bb54 <download_client_callback+0x200>)
   2b9a0:	6839      	ldr	r1, [r7, #0]
   2b9a2:	f000 ffdb 	bl	2c95c <dfu_target_init>
			if ((err < 0) && (err != -EBUSY)) {
   2b9a6:	1e04      	subs	r4, r0, #0
   2b9a8:	da15      	bge.n	2b9d6 <download_client_callback+0x82>
   2b9aa:	f114 0f10 	cmn.w	r4, #16
   2b9ae:	d012      	beq.n	2b9d6 <download_client_callback+0x82>
				LOG_ERR("dfu_target_init error %d", err);
   2b9b0:	2301      	movs	r3, #1
   2b9b2:	f04f 0000 	mov.w	r0, #0
   2b9b6:	4a68      	ldr	r2, [pc, #416]	; (2bb58 <download_client_callback+0x204>)
   2b9b8:	f363 0007 	bfi	r0, r3, #0, #8
   2b9bc:	4b67      	ldr	r3, [pc, #412]	; (2bb5c <download_client_callback+0x208>)
   2b9be:	4968      	ldr	r1, [pc, #416]	; (2bb60 <download_client_callback+0x20c>)
   2b9c0:	1a9b      	subs	r3, r3, r2
   2b9c2:	08db      	lsrs	r3, r3, #3
   2b9c4:	f363 108f 	bfi	r0, r3, #6, #10
   2b9c8:	4622      	mov	r2, r4
   2b9ca:	f010 fe5a 	bl	3c682 <log_string_sync>
}
   2b9ce:	4620      	mov	r0, r4
   2b9d0:	b004      	add	sp, #16
   2b9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = dfu_target_offset_get(&offset);
   2b9d6:	a801      	add	r0, sp, #4
   2b9d8:	f000 fff6 	bl	2c9c8 <dfu_target_offset_get>
			if (err != 0) {
   2b9dc:	b110      	cbz	r0, 2b9e4 <download_client_callback+0x90>
				send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   2b9de:	2004      	movs	r0, #4
   2b9e0:	f7ff ffa8 	bl	2b934 <send_evt>
			if (offset != 0) {
   2b9e4:	9b01      	ldr	r3, [sp, #4]
   2b9e6:	b1b3      	cbz	r3, 2ba16 <download_client_callback+0xc2>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2b9e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b9ec:	495d      	ldr	r1, [pc, #372]	; (2bb64 <download_client_callback+0x210>)
   2b9ee:	485e      	ldr	r0, [pc, #376]	; (2bb68 <download_client_callback+0x214>)
   2b9f0:	f00d fa88 	bl	38f04 <k_delayed_work_submit_to_queue>
				LOG_INF("Refuse fragment, restart with offset");
   2b9f4:	2303      	movs	r3, #3
   2b9f6:	f04f 0000 	mov.w	r0, #0
   2b9fa:	4a57      	ldr	r2, [pc, #348]	; (2bb58 <download_client_callback+0x204>)
   2b9fc:	f363 0007 	bfi	r0, r3, #0, #8
   2ba00:	4b56      	ldr	r3, [pc, #344]	; (2bb5c <download_client_callback+0x208>)
   2ba02:	495a      	ldr	r1, [pc, #360]	; (2bb6c <download_client_callback+0x218>)
   2ba04:	1a9b      	subs	r3, r3, r2
   2ba06:	08db      	lsrs	r3, r3, #3
   2ba08:	f363 108f 	bfi	r0, r3, #6, #10
   2ba0c:	f010 fe39 	bl	3c682 <log_string_sync>
				return -1;
   2ba10:	f04f 34ff 	mov.w	r4, #4294967295
   2ba14:	e7db      	b.n	2b9ce <download_client_callback+0x7a>
		err = dfu_target_write(event->fragment.buf,
   2ba16:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   2ba1a:	f000 ffdf 	bl	2c9dc <dfu_target_write>
		if (err != 0) {
   2ba1e:	4604      	mov	r4, r0
   2ba20:	b190      	cbz	r0, 2ba48 <download_client_callback+0xf4>
			LOG_ERR("dfu_target_write error %d", err);
   2ba22:	2301      	movs	r3, #1
   2ba24:	f04f 0000 	mov.w	r0, #0
   2ba28:	4a4b      	ldr	r2, [pc, #300]	; (2bb58 <download_client_callback+0x204>)
   2ba2a:	f363 0007 	bfi	r0, r3, #0, #8
   2ba2e:	4b4b      	ldr	r3, [pc, #300]	; (2bb5c <download_client_callback+0x208>)
   2ba30:	494f      	ldr	r1, [pc, #316]	; (2bb70 <download_client_callback+0x21c>)
   2ba32:	1a9b      	subs	r3, r3, r2
   2ba34:	08db      	lsrs	r3, r3, #3
   2ba36:	f363 108f 	bfi	r0, r3, #6, #10
   2ba3a:	4622      	mov	r2, r4
   2ba3c:	f010 fe21 	bl	3c682 <log_string_sync>
			(void) download_client_disconnect(&dlc);
   2ba40:	4843      	ldr	r0, [pc, #268]	; (2bb50 <download_client_callback+0x1fc>)
   2ba42:	f7ff fc9f 	bl	2b384 <download_client_disconnect>
   2ba46:	e7a1      	b.n	2b98c <download_client_callback+0x38>
		if (IS_ENABLED(CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT) &&
   2ba48:	f898 3000 	ldrb.w	r3, [r8]
   2ba4c:	2b00      	cmp	r3, #0
   2ba4e:	d1be      	bne.n	2b9ce <download_client_callback+0x7a>
			err = dfu_target_offset_get(&offset);
   2ba50:	a801      	add	r0, sp, #4
   2ba52:	f000 ffb9 	bl	2c9c8 <dfu_target_offset_get>
			if (err != 0) {
   2ba56:	b110      	cbz	r0, 2ba5e <download_client_callback+0x10a>
				send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   2ba58:	2004      	movs	r0, #4
   2ba5a:	f7ff ff6b 	bl	2b934 <send_evt>
	const struct fota_download_evt evt = {
   2ba5e:	2300      	movs	r3, #0
   2ba60:	f88d 3008 	strb.w	r3, [sp, #8]
   2ba64:	9b01      	ldr	r3, [sp, #4]
	callback(&evt);
   2ba66:	a802      	add	r0, sp, #8
	const struct fota_download_evt evt = {
   2ba68:	9303      	str	r3, [sp, #12]
	callback(&evt);
   2ba6a:	4b42      	ldr	r3, [pc, #264]	; (2bb74 <download_client_callback+0x220>)
   2ba6c:	681b      	ldr	r3, [r3, #0]
   2ba6e:	4798      	blx	r3
   2ba70:	e7ad      	b.n	2b9ce <download_client_callback+0x7a>
		err = dfu_target_done(true);
   2ba72:	2001      	movs	r0, #1
   2ba74:	f000 ffbe 	bl	2c9f4 <dfu_target_done>
		if (err != 0) {
   2ba78:	4604      	mov	r4, r0
   2ba7a:	b178      	cbz	r0, 2ba9c <download_client_callback+0x148>
			LOG_ERR("dfu_target_done error: %d", err);
   2ba7c:	2301      	movs	r3, #1
   2ba7e:	f04f 0000 	mov.w	r0, #0
   2ba82:	4a35      	ldr	r2, [pc, #212]	; (2bb58 <download_client_callback+0x204>)
   2ba84:	f363 0007 	bfi	r0, r3, #0, #8
   2ba88:	4b34      	ldr	r3, [pc, #208]	; (2bb5c <download_client_callback+0x208>)
   2ba8a:	493b      	ldr	r1, [pc, #236]	; (2bb78 <download_client_callback+0x224>)
   2ba8c:	1a9b      	subs	r3, r3, r2
   2ba8e:	08db      	lsrs	r3, r3, #3
   2ba90:	f363 108f 	bfi	r0, r3, #6, #10
   2ba94:	4622      	mov	r2, r4
   2ba96:	f010 fdf4 	bl	3c682 <log_string_sync>
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   2ba9a:	e777      	b.n	2b98c <download_client_callback+0x38>
		err = download_client_disconnect(&dlc);
   2ba9c:	482c      	ldr	r0, [pc, #176]	; (2bb50 <download_client_callback+0x1fc>)
   2ba9e:	f7ff fc71 	bl	2b384 <download_client_disconnect>
		if (err != 0) {
   2baa2:	4604      	mov	r4, r0
   2baa4:	2800      	cmp	r0, #0
   2baa6:	f47f af71 	bne.w	2b98c <download_client_callback+0x38>
		send_evt(FOTA_DOWNLOAD_EVT_FINISHED);
   2baaa:	2001      	movs	r0, #1
   2baac:	f7ff ff42 	bl	2b934 <send_evt>
		first_fragment = true;
   2bab0:	2201      	movs	r2, #1
   2bab2:	4b25      	ldr	r3, [pc, #148]	; (2bb48 <download_client_callback+0x1f4>)
   2bab4:	701a      	strb	r2, [r3, #0]
		break;
   2bab6:	e78a      	b.n	2b9ce <download_client_callback+0x7a>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   2bab8:	4e30      	ldr	r6, [pc, #192]	; (2bb7c <download_client_callback+0x228>)
   2baba:	4c28      	ldr	r4, [pc, #160]	; (2bb5c <download_client_callback+0x208>)
   2babc:	6832      	ldr	r2, [r6, #0]
   2babe:	4f26      	ldr	r7, [pc, #152]	; (2bb58 <download_client_callback+0x204>)
   2bac0:	b1aa      	cbz	r2, 2baee <download_client_callback+0x19a>
   2bac2:	6843      	ldr	r3, [r0, #4]
   2bac4:	f113 0f80 	cmn.w	r3, #128	; 0x80
   2bac8:	d001      	beq.n	2bace <download_client_callback+0x17a>
   2baca:	3368      	adds	r3, #104	; 0x68
   2bacc:	d10f      	bne.n	2baee <download_client_callback+0x19a>
			LOG_WRN("Download socket error. %d retries left...",
   2bace:	2302      	movs	r3, #2
   2bad0:	f04f 0000 	mov.w	r0, #0
   2bad4:	1be4      	subs	r4, r4, r7
   2bad6:	f363 0007 	bfi	r0, r3, #0, #8
   2bada:	08e4      	lsrs	r4, r4, #3
   2badc:	f364 108f 	bfi	r0, r4, #6, #10
   2bae0:	4927      	ldr	r1, [pc, #156]	; (2bb80 <download_client_callback+0x22c>)
   2bae2:	f010 fdce 	bl	3c682 <log_string_sync>
			socket_retries_left--;
   2bae6:	6833      	ldr	r3, [r6, #0]
   2bae8:	3b01      	subs	r3, #1
   2baea:	6033      	str	r3, [r6, #0]
   2baec:	e740      	b.n	2b970 <download_client_callback+0x1c>
			download_client_disconnect(&dlc);
   2baee:	4818      	ldr	r0, [pc, #96]	; (2bb50 <download_client_callback+0x1fc>)
   2baf0:	f7ff fc48 	bl	2b384 <download_client_disconnect>
			LOG_ERR("Download client error");
   2baf4:	2301      	movs	r3, #1
   2baf6:	f04f 0000 	mov.w	r0, #0
   2bafa:	1be4      	subs	r4, r4, r7
   2bafc:	f363 0007 	bfi	r0, r3, #0, #8
   2bb00:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2bb04:	f364 108f 	bfi	r0, r4, #6, #10
   2bb08:	491e      	ldr	r1, [pc, #120]	; (2bb84 <download_client_callback+0x230>)
   2bb0a:	f010 fdba 	bl	3c682 <log_string_sync>
			err = dfu_target_done(false);
   2bb0e:	2000      	movs	r0, #0
   2bb10:	f000 ff70 	bl	2c9f4 <dfu_target_done>
			if (err == -EACCES) {
   2bb14:	f110 0f0d 	cmn.w	r0, #13
   2bb18:	d00a      	beq.n	2bb30 <download_client_callback+0x1dc>
			} else if (err != 0) {
   2bb1a:	b148      	cbz	r0, 2bb30 <download_client_callback+0x1dc>
				LOG_ERR("Unable to deinitialze resources "
   2bb1c:	f04f 0000 	mov.w	r0, #0
   2bb20:	2301      	movs	r3, #1
   2bb22:	f363 0007 	bfi	r0, r3, #0, #8
   2bb26:	f364 108f 	bfi	r0, r4, #6, #10
   2bb2a:	4917      	ldr	r1, [pc, #92]	; (2bb88 <download_client_callback+0x234>)
   2bb2c:	f010 fda9 	bl	3c682 <log_string_sync>
			first_fragment = true;
   2bb30:	2201      	movs	r2, #1
   2bb32:	4b05      	ldr	r3, [pc, #20]	; (2bb48 <download_client_callback+0x1f4>)
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   2bb34:	2004      	movs	r0, #4
			first_fragment = true;
   2bb36:	701a      	strb	r2, [r3, #0]
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   2bb38:	f7ff fefc 	bl	2b934 <send_evt>
			return event->error;
   2bb3c:	686c      	ldr	r4, [r5, #4]
   2bb3e:	e746      	b.n	2b9ce <download_client_callback+0x7a>
		return -EINVAL;
   2bb40:	f06f 0415 	mvn.w	r4, #21
   2bb44:	e743      	b.n	2b9ce <download_client_callback+0x7a>
   2bb46:	bf00      	nop
   2bb48:	20031751 	.word	0x20031751
   2bb4c:	20024880 	.word	0x20024880
   2bb50:	20020958 	.word	0x20020958
   2bb54:	0003e879 	.word	0x0003e879
   2bb58:	000402cc 	.word	0x000402cc
   2bb5c:	00040344 	.word	0x00040344
   2bb60:	000451e9 	.word	0x000451e9
   2bb64:	20024860 	.word	0x20024860
   2bb68:	200293b0 	.word	0x200293b0
   2bb6c:	00045202 	.word	0x00045202
   2bb70:	00045227 	.word	0x00045227
   2bb74:	2002485c 	.word	0x2002485c
   2bb78:	00045241 	.word	0x00045241
   2bb7c:	20024884 	.word	0x20024884
   2bb80:	0004525b 	.word	0x0004525b
   2bb84:	00045285 	.word	0x00045285
   2bb88:	0004529b 	.word	0x0004529b

0002bb8c <fota_download_start>:

int fota_download_start(const char *host, const char *file)
{
	int err = -1;

	struct download_client_cfg config = {
   2bb8c:	2300      	movs	r3, #0
{
   2bb8e:	b530      	push	{r4, r5, lr}
   2bb90:	b085      	sub	sp, #20
	struct download_client_cfg config = {
   2bb92:	9301      	str	r3, [sp, #4]
   2bb94:	9303      	str	r3, [sp, #12]
   2bb96:	f04f 33ff 	mov.w	r3, #4294967295
{
   2bb9a:	460d      	mov	r5, r1
	struct download_client_cfg config = {
   2bb9c:	9302      	str	r3, [sp, #8]
		.sec_tag = -1, /* HTTP */
	};

	if (host == NULL || file == NULL || callback == NULL) {
   2bb9e:	4601      	mov	r1, r0
   2bba0:	b1c8      	cbz	r0, 2bbd6 <fota_download_start+0x4a>
   2bba2:	b1c5      	cbz	r5, 2bbd6 <fota_download_start+0x4a>
   2bba4:	4b0d      	ldr	r3, [pc, #52]	; (2bbdc <fota_download_start+0x50>)
   2bba6:	681b      	ldr	r3, [r3, #0]
   2bba8:	b1ab      	cbz	r3, 2bbd6 <fota_download_start+0x4a>
		return -EINVAL;
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   2bbaa:	2202      	movs	r2, #2
   2bbac:	4b0c      	ldr	r3, [pc, #48]	; (2bbe0 <fota_download_start+0x54>)
		LOG_INF("B1 update, selected file:\n%s", update);
		file = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   2bbae:	480d      	ldr	r0, [pc, #52]	; (2bbe4 <fota_download_start+0x58>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   2bbb0:	601a      	str	r2, [r3, #0]
	err = download_client_connect(&dlc, host, &config);
   2bbb2:	aa01      	add	r2, sp, #4
   2bbb4:	f7ff fa18 	bl	2afe8 <download_client_connect>
	if (err != 0) {
   2bbb8:	4604      	mov	r4, r0
   2bbba:	b948      	cbnz	r0, 2bbd0 <fota_download_start+0x44>
		return err;
	}


	err = download_client_start(&dlc, file, 0);
   2bbbc:	4602      	mov	r2, r0
   2bbbe:	4629      	mov	r1, r5
   2bbc0:	4808      	ldr	r0, [pc, #32]	; (2bbe4 <fota_download_start+0x58>)
   2bbc2:	f7ff fe3f 	bl	2b844 <download_client_start>
	if (err != 0) {
   2bbc6:	4604      	mov	r4, r0
   2bbc8:	b110      	cbz	r0, 2bbd0 <fota_download_start+0x44>
		download_client_disconnect(&dlc);
   2bbca:	4806      	ldr	r0, [pc, #24]	; (2bbe4 <fota_download_start+0x58>)
   2bbcc:	f7ff fbda 	bl	2b384 <download_client_disconnect>
		return err;
	}

	return 0;
}
   2bbd0:	4620      	mov	r0, r4
   2bbd2:	b005      	add	sp, #20
   2bbd4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2bbd6:	f06f 0415 	mvn.w	r4, #21
   2bbda:	e7f9      	b.n	2bbd0 <fota_download_start+0x44>
   2bbdc:	2002485c 	.word	0x2002485c
   2bbe0:	20024884 	.word	0x20024884
   2bbe4:	20020958 	.word	0x20020958

0002bbe8 <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   2bbe8:	b508      	push	{r3, lr}
	if (client_callback == NULL) {
   2bbea:	b158      	cbz	r0, 2bc04 <fota_download_init+0x1c>
		return -EINVAL;
	}

	callback = client_callback;
   2bbec:	4b07      	ldr	r3, [pc, #28]	; (2bc0c <fota_download_init+0x24>)

	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   2bbee:	4908      	ldr	r1, [pc, #32]	; (2bc10 <fota_download_init+0x28>)
	callback = client_callback;
   2bbf0:	6018      	str	r0, [r3, #0]
	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   2bbf2:	4808      	ldr	r0, [pc, #32]	; (2bc14 <fota_download_init+0x2c>)
   2bbf4:	f012 ffd7 	bl	3eba6 <k_delayed_work_init>
	if (err != 0) {
		return err;
	}

	return 0;
}
   2bbf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int err = download_client_init(&dlc, download_client_callback);
   2bbfc:	4906      	ldr	r1, [pc, #24]	; (2bc18 <fota_download_init+0x30>)
   2bbfe:	4807      	ldr	r0, [pc, #28]	; (2bc1c <fota_download_init+0x34>)
   2bc00:	f7ff b9ca 	b.w	2af98 <download_client_init>
}
   2bc04:	f06f 0015 	mvn.w	r0, #21
   2bc08:	bd08      	pop	{r3, pc}
   2bc0a:	bf00      	nop
   2bc0c:	2002485c 	.word	0x2002485c
   2bc10:	0002b8c5 	.word	0x0002b8c5
   2bc14:	20024860 	.word	0x20024860
   2bc18:	0002b955 	.word	0x0002b955
   2bc1c:	20020958 	.word	0x20020958

0002bc20 <construct_topic>:
 */
#define TOPIC_TEMPLATE "$aws/things/%s/jobs/%s%s%s%s"
static int construct_topic(const u8_t *client_id, const u8_t *job_id,
			   const struct topic_conf *conf, u8_t *out_buf,
			   struct mqtt_topic *topic, bool remove_suffix)
{
   2bc20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2bc24:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   2bc26:	4688      	mov	r8, r1
   2bc28:	4615      	mov	r5, r2
   2bc2a:	461f      	mov	r7, r3
	if (client_id == NULL || job_id == NULL || conf == NULL ||
   2bc2c:	4681      	mov	r9, r0
   2bc2e:	2800      	cmp	r0, #0
   2bc30:	d05d      	beq.n	2bcee <construct_topic+0xce>
   2bc32:	2900      	cmp	r1, #0
   2bc34:	d05b      	beq.n	2bcee <construct_topic+0xce>
   2bc36:	6853      	ldr	r3, [r2, #4]
   2bc38:	2b00      	cmp	r3, #0
   2bc3a:	d058      	beq.n	2bcee <construct_topic+0xce>
	    conf->name == NULL || conf->suffix == NULL ||
   2bc3c:	6894      	ldr	r4, [r2, #8]
   2bc3e:	2c00      	cmp	r4, #0
   2bc40:	d055      	beq.n	2bcee <construct_topic+0xce>
   2bc42:	2f00      	cmp	r7, #0
   2bc44:	d053      	beq.n	2bcee <construct_topic+0xce>
	    out_buf == NULL || topic == NULL) {
		return -EINVAL;
	}

	const char *suffix = remove_suffix  ? "" : conf->suffix;
   2bc46:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   2bc4a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 2bd0c <construct_topic+0xec>
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   2bc4e:	4608      	mov	r0, r1
	const char *suffix = remove_suffix  ? "" : conf->suffix;
   2bc50:	2b00      	cmp	r3, #0
   2bc52:	bf18      	it	ne
   2bc54:	4654      	movne	r4, sl
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   2bc56:	f7f1 fa65 	bl	1d124 <strlen>
   2bc5a:	4a26      	ldr	r2, [pc, #152]	; (2bcf4 <construct_topic+0xd4>)
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   2bc5c:	686b      	ldr	r3, [r5, #4]
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   2bc5e:	2800      	cmp	r0, #0
   2bc60:	bf14      	ite	ne
   2bc62:	4610      	movne	r0, r2
   2bc64:	4650      	moveq	r0, sl
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   2bc66:	9403      	str	r4, [sp, #12]
   2bc68:	e9cd 0301 	strd	r0, r3, [sp, #4]
   2bc6c:	f8cd 8000 	str.w	r8, [sp]
   2bc70:	464b      	mov	r3, r9
   2bc72:	4a21      	ldr	r2, [pc, #132]	; (2bcf8 <construct_topic+0xd8>)
   2bc74:	2195      	movs	r1, #149	; 0x95
   2bc76:	4638      	mov	r0, r7
   2bc78:	f00e fe56 	bl	3a928 <sniprintf>
			client_id, job_id, slash_after_job_id, conf->name,
			suffix);

	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   2bc7c:	2894      	cmp	r0, #148	; 0x94
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   2bc7e:	4604      	mov	r4, r0
	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   2bc80:	dd18      	ble.n	2bcb4 <construct_topic+0x94>
		LOG_ERR("Unable to fit formated string into to allocate "
   2bc82:	2301      	movs	r3, #1
   2bc84:	f04f 0400 	mov.w	r4, #0
   2bc88:	4a1c      	ldr	r2, [pc, #112]	; (2bcfc <construct_topic+0xdc>)
   2bc8a:	f363 0407 	bfi	r4, r3, #0, #8
   2bc8e:	4b1c      	ldr	r3, [pc, #112]	; (2bd00 <construct_topic+0xe0>)
   2bc90:	6868      	ldr	r0, [r5, #4]
   2bc92:	1a9b      	subs	r3, r3, r2
   2bc94:	08db      	lsrs	r3, r3, #3
   2bc96:	f363 148f 	bfi	r4, r3, #6, #10
   2bc9a:	f010 fd04 	bl	3c6a6 <log_strdup>
   2bc9e:	4919      	ldr	r1, [pc, #100]	; (2bd04 <construct_topic+0xe4>)
   2bca0:	4602      	mov	r2, r0
   2bca2:	4620      	mov	r0, r4
   2bca4:	f010 fced 	bl	3c682 <log_string_sync>
			"memory for %s", log_strdup(conf->name));
		return -ENOMEM;
   2bca8:	f06f 040b 	mvn.w	r4, #11

	topic->topic.size = ret;
	topic->topic.utf8 = out_buf;
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
	return 0;
}
   2bcac:	4620      	mov	r0, r4
   2bcae:	b004      	add	sp, #16
   2bcb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (ret < 0) {
   2bcb4:	2800      	cmp	r0, #0
   2bcb6:	da14      	bge.n	2bce2 <construct_topic+0xc2>
		LOG_ERR("Output error for %s was encountered with return value "
   2bcb8:	2301      	movs	r3, #1
   2bcba:	f04f 0600 	mov.w	r6, #0
   2bcbe:	4a0f      	ldr	r2, [pc, #60]	; (2bcfc <construct_topic+0xdc>)
   2bcc0:	f363 0607 	bfi	r6, r3, #0, #8
   2bcc4:	4b0e      	ldr	r3, [pc, #56]	; (2bd00 <construct_topic+0xe0>)
   2bcc6:	6868      	ldr	r0, [r5, #4]
   2bcc8:	1a9b      	subs	r3, r3, r2
   2bcca:	08db      	lsrs	r3, r3, #3
   2bccc:	f363 168f 	bfi	r6, r3, #6, #10
   2bcd0:	f010 fce9 	bl	3c6a6 <log_strdup>
   2bcd4:	4623      	mov	r3, r4
   2bcd6:	4602      	mov	r2, r0
   2bcd8:	490b      	ldr	r1, [pc, #44]	; (2bd08 <construct_topic+0xe8>)
   2bcda:	4630      	mov	r0, r6
   2bcdc:	f010 fcd1 	bl	3c682 <log_string_sync>
		return ret;
   2bce0:	e7e4      	b.n	2bcac <construct_topic+0x8c>
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2bce2:	2301      	movs	r3, #1
	topic->topic.utf8 = out_buf;
   2bce4:	e9c6 7000 	strd	r7, r0, [r6]
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2bce8:	7233      	strb	r3, [r6, #8]
	return 0;
   2bcea:	2400      	movs	r4, #0
   2bcec:	e7de      	b.n	2bcac <construct_topic+0x8c>
		return -EINVAL;
   2bcee:	f06f 0415 	mvn.w	r4, #21
   2bcf2:	e7db      	b.n	2bcac <construct_topic+0x8c>
   2bcf4:	00044f90 	.word	0x00044f90
   2bcf8:	000453c8 	.word	0x000453c8
   2bcfc:	000402cc 	.word	0x000402cc
   2bd00:	000402f4 	.word	0x000402f4
   2bd04:	000453e5 	.word	0x000453e5
   2bd08:	00045422 	.word	0x00045422
   2bd0c:	00043121 	.word	0x00043121

0002bd10 <reg_topic>:

static int reg_topic(struct mqtt_client *const client, u8_t *topic_buf,
		     struct topic_conf const *conf, const u8_t *job_id,
		     bool subscribe)
{
   2bd10:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bd12:	b089      	sub	sp, #36	; 0x24
   2bd14:	468c      	mov	ip, r1
   2bd16:	4617      	mov	r7, r2
   2bd18:	4619      	mov	r1, r3
   2bd1a:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
	if (client == NULL) {
   2bd1e:	4604      	mov	r4, r0
   2bd20:	2800      	cmp	r0, #0
   2bd22:	d036      	beq.n	2bd92 <reg_topic+0x82>
		return -EINVAL;
	}

	struct mqtt_topic topic;
	int err = construct_topic(client->client_id.utf8, job_id, conf,
   2bd24:	2300      	movs	r3, #0
   2bd26:	ad05      	add	r5, sp, #20
   2bd28:	9301      	str	r3, [sp, #4]
   2bd2a:	9500      	str	r5, [sp, #0]
   2bd2c:	4663      	mov	r3, ip
   2bd2e:	6c40      	ldr	r0, [r0, #68]	; 0x44
   2bd30:	f7ff ff76 	bl	2bc20 <construct_topic>
				  topic_buf, &topic, false);

	const struct mqtt_subscription_list subscription_list = {
   2bd34:	2301      	movs	r3, #1
   2bd36:	f8ad 3010 	strh.w	r3, [sp, #16]
   2bd3a:	683b      	ldr	r3, [r7, #0]
   2bd3c:	9503      	str	r5, [sp, #12]
   2bd3e:	f8ad 3012 	strh.w	r3, [sp, #18]
		.list = &topic,
		.list_count = 1,
		.message_id = conf->msg_id
	};

	if (err) {
   2bd42:	b9c0      	cbnz	r0, 2bd76 <reg_topic+0x66>
		return err;
	}

	if (subscribe) {
   2bd44:	4a14      	ldr	r2, [pc, #80]	; (2bd98 <reg_topic+0x88>)
   2bd46:	4b15      	ldr	r3, [pc, #84]	; (2bd9c <reg_topic+0x8c>)
		LOG_INF("Subscribe: %s", log_strdup(topic.topic.utf8));
   2bd48:	f04f 0500 	mov.w	r5, #0
   2bd4c:	1a9b      	subs	r3, r3, r2
   2bd4e:	2203      	movs	r2, #3
   2bd50:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   2bd54:	f362 0507 	bfi	r5, r2, #0, #8
   2bd58:	9805      	ldr	r0, [sp, #20]
   2bd5a:	f363 158f 	bfi	r5, r3, #6, #10
	if (subscribe) {
   2bd5e:	b166      	cbz	r6, 2bd7a <reg_topic+0x6a>
		LOG_INF("Subscribe: %s", log_strdup(topic.topic.utf8));
   2bd60:	f010 fca1 	bl	3c6a6 <log_strdup>
   2bd64:	490e      	ldr	r1, [pc, #56]	; (2bda0 <reg_topic+0x90>)
   2bd66:	4602      	mov	r2, r0
   2bd68:	4628      	mov	r0, r5
   2bd6a:	f010 fc8a 	bl	3c682 <log_string_sync>
		return mqtt_subscribe(client, &subscription_list);
   2bd6e:	a903      	add	r1, sp, #12
   2bd70:	4620      	mov	r0, r4
   2bd72:	f011 faa4 	bl	3d2be <mqtt_subscribe>
	}

	LOG_INF("Unsubscribe: %s", log_strdup(topic.topic.utf8));
	return mqtt_unsubscribe(client, &subscription_list);
}
   2bd76:	b009      	add	sp, #36	; 0x24
   2bd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Unsubscribe: %s", log_strdup(topic.topic.utf8));
   2bd7a:	f010 fc94 	bl	3c6a6 <log_strdup>
   2bd7e:	4909      	ldr	r1, [pc, #36]	; (2bda4 <reg_topic+0x94>)
   2bd80:	4602      	mov	r2, r0
   2bd82:	4628      	mov	r0, r5
   2bd84:	f010 fc7d 	bl	3c682 <log_string_sync>
	return mqtt_unsubscribe(client, &subscription_list);
   2bd88:	a903      	add	r1, sp, #12
   2bd8a:	4620      	mov	r0, r4
   2bd8c:	f011 fabe 	bl	3d30c <mqtt_unsubscribe>
   2bd90:	e7f1      	b.n	2bd76 <reg_topic+0x66>
		return -EINVAL;
   2bd92:	f06f 0015 	mvn.w	r0, #21
   2bd96:	e7ee      	b.n	2bd76 <reg_topic+0x66>
   2bd98:	000402cc 	.word	0x000402cc
   2bd9c:	000402f4 	.word	0x000402f4
   2bda0:	00045480 	.word	0x00045480
   2bda4:	0004548e 	.word	0x0004548e

0002bda8 <publish>:
}

static int publish(struct mqtt_client *const client, const u8_t *job_id,
		   const struct topic_conf *conf, u8_t *payload_data,
		   size_t payload_data_len, u8_t *topic_buf)
{
   2bda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bdac:	461f      	mov	r7, r3
	struct mqtt_topic topic;

	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   2bdae:	2301      	movs	r3, #1
{
   2bdb0:	b08c      	sub	sp, #48	; 0x30
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   2bdb2:	ad03      	add	r5, sp, #12
   2bdb4:	9301      	str	r3, [sp, #4]
   2bdb6:	9500      	str	r5, [sp, #0]
{
   2bdb8:	4606      	mov	r6, r0
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   2bdba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bdbc:	6c40      	ldr	r0, [r0, #68]	; 0x44
   2bdbe:	f7ff ff2f 	bl	2bc20 <construct_topic>
				  topic_buf, &topic, true);

	if (ret) {
   2bdc2:	2800      	cmp	r0, #0
   2bdc4:	d138      	bne.n	2be38 <publish+0x90>
		return ret;
	}

	LOG_INF("Publish topic: %s", log_strdup(topic.topic.utf8));
   2bdc6:	2303      	movs	r3, #3
   2bdc8:	f04f 0800 	mov.w	r8, #0
   2bdcc:	4c1c      	ldr	r4, [pc, #112]	; (2be40 <publish+0x98>)
   2bdce:	f363 0807 	bfi	r8, r3, #0, #8
   2bdd2:	4b1c      	ldr	r3, [pc, #112]	; (2be44 <publish+0x9c>)
   2bdd4:	9803      	ldr	r0, [sp, #12]
   2bdd6:	1ae4      	subs	r4, r4, r3
   2bdd8:	f010 fc65 	bl	3c6a6 <log_strdup>
   2bddc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2bde0:	f364 188f 	bfi	r8, r4, #6, #10
   2bde4:	4602      	mov	r2, r0
   2bde6:	4918      	ldr	r1, [pc, #96]	; (2be48 <publish+0xa0>)
   2bde8:	4640      	mov	r0, r8
   2bdea:	f010 fc4a 	bl	3c682 <log_string_sync>
	LOG_INF("Publish payload %s", log_strdup(payload_data));
   2bdee:	f04f 0800 	mov.w	r8, #0
   2bdf2:	2303      	movs	r3, #3
   2bdf4:	4638      	mov	r0, r7
   2bdf6:	f363 0807 	bfi	r8, r3, #0, #8
   2bdfa:	f010 fc54 	bl	3c6a6 <log_strdup>
   2bdfe:	f364 188f 	bfi	r8, r4, #6, #10
   2be02:	4602      	mov	r2, r0
   2be04:	4911      	ldr	r1, [pc, #68]	; (2be4c <publish+0xa4>)
   2be06:	4640      	mov	r0, r8
   2be08:	f010 fc3b 	bl	3c682 <log_string_sync>

	struct mqtt_publish_param param = {
   2be0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2be10:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2be12:	ac06      	add	r4, sp, #24
   2be14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   2be18:	930a      	str	r3, [sp, #40]	; 0x28
   2be1a:	9709      	str	r7, [sp, #36]	; 0x24
		.message.topic = topic,
		.message.payload.data = payload_data,
		.message.payload.len = payload_data_len,
		.message_id = sys_rand32_get(),
   2be1c:	f7f9 fc70 	bl	25700 <sys_rand32_get>
	struct mqtt_publish_param param = {
   2be20:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   2be24:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   2be28:	f023 0303 	bic.w	r3, r3, #3
		.dup_flag = 0,
		.retain_flag = 0,
	};

	return mqtt_publish(client, &param);
   2be2c:	4621      	mov	r1, r4
   2be2e:	4630      	mov	r0, r6
	struct mqtt_publish_param param = {
   2be30:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	return mqtt_publish(client, &param);
   2be34:	f011 f9c5 	bl	3d1c2 <mqtt_publish>
}
   2be38:	b00c      	add	sp, #48	; 0x30
   2be3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2be3e:	bf00      	nop
   2be40:	000402f4 	.word	0x000402f4
   2be44:	000402cc 	.word	0x000402cc
   2be48:	0004545b 	.word	0x0004545b
   2be4c:	0004546d 	.word	0x0004546d

0002be50 <aws_jobs_subscribe_topic_notify_next>:
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   2be50:	2301      	movs	r3, #1
{
   2be52:	b507      	push	{r0, r1, r2, lr}
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   2be54:	4a03      	ldr	r2, [pc, #12]	; (2be64 <aws_jobs_subscribe_topic_notify_next+0x14>)
   2be56:	9300      	str	r3, [sp, #0]
   2be58:	4b03      	ldr	r3, [pc, #12]	; (2be68 <aws_jobs_subscribe_topic_notify_next+0x18>)
   2be5a:	f7ff ff59 	bl	2bd10 <reg_topic>
}
   2be5e:	b003      	add	sp, #12
   2be60:	f85d fb04 	ldr.w	pc, [sp], #4
   2be64:	00040c60 	.word	0x00040c60
   2be68:	00043121 	.word	0x00043121

0002be6c <aws_jobs_subscribe_topic_get>:
{
   2be6c:	b513      	push	{r0, r1, r4, lr}
	return reg_topic(client, topic_buf, &TOPIC_GET_CONF, job_id, true);
   2be6e:	2301      	movs	r3, #1
{
   2be70:	4614      	mov	r4, r2
	return reg_topic(client, topic_buf, &TOPIC_GET_CONF, job_id, true);
   2be72:	9300      	str	r3, [sp, #0]
   2be74:	4a03      	ldr	r2, [pc, #12]	; (2be84 <aws_jobs_subscribe_topic_get+0x18>)
   2be76:	460b      	mov	r3, r1
   2be78:	4621      	mov	r1, r4
   2be7a:	f7ff ff49 	bl	2bd10 <reg_topic>
}
   2be7e:	b002      	add	sp, #8
   2be80:	bd10      	pop	{r4, pc}
   2be82:	bf00      	nop
   2be84:	00040c54 	.word	0x00040c54

0002be88 <aws_jobs_subscribe_topic_update>:
{
   2be88:	b513      	push	{r0, r1, r4, lr}
	return reg_topic(client, topic_buf, &TOPIC_UPDATE_CONF, job_id, true);
   2be8a:	2301      	movs	r3, #1
{
   2be8c:	4614      	mov	r4, r2
	return reg_topic(client, topic_buf, &TOPIC_UPDATE_CONF, job_id, true);
   2be8e:	9300      	str	r3, [sp, #0]
   2be90:	4a03      	ldr	r2, [pc, #12]	; (2bea0 <aws_jobs_subscribe_topic_update+0x18>)
   2be92:	460b      	mov	r3, r1
   2be94:	4621      	mov	r1, r4
   2be96:	f7ff ff3b 	bl	2bd10 <reg_topic>
}
   2be9a:	b002      	add	sp, #8
   2be9c:	bd10      	pop	{r4, pc}
   2be9e:	bf00      	nop
   2bea0:	00040c6c 	.word	0x00040c6c

0002bea4 <aws_jobs_update_job_execution>:
				  const u8_t *job_id,
				  enum execution_status status,
				  const u8_t *status_details,
				  int expected_version,
				  const u8_t *client_token, u8_t *topic_buf)
{
   2bea4:	b570      	push	{r4, r5, r6, lr}
   2bea6:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
   2beaa:	460e      	mov	r6, r1
   2beac:	4605      	mov	r5, r0
   2beae:	f8dd 156c 	ldr.w	r1, [sp, #1388]	; 0x56c
	/* The rest of the parameters are checked later */
	if (status_details == NULL || client_token == NULL) {
   2beb2:	2b00      	cmp	r3, #0
   2beb4:	d046      	beq.n	2bf44 <aws_jobs_update_job_execution+0xa0>
   2beb6:	2900      	cmp	r1, #0
   2beb8:	d044      	beq.n	2bf44 <aws_jobs_update_job_execution+0xa0>
	 * is actually 32kb set it to what is the limiting factor which is the
	 * MQTT buffer size for reception.
	 */
	u8_t update_job_payload[CONFIG_UPDATE_JOB_PAYLOAD_LEN];

	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   2beba:	9102      	str	r1, [sp, #8]
   2bebc:	f8dd 1568 	ldr.w	r1, [sp, #1384]	; 0x568
   2bec0:	a804      	add	r0, sp, #16
   2bec2:	e9cd 3100 	strd	r3, r1, [sp]
   2bec6:	4b21      	ldr	r3, [pc, #132]	; (2bf4c <aws_jobs_update_job_execution+0xa8>)
   2bec8:	f240 5146 	movw	r1, #1350	; 0x546
   2becc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2bed0:	4a1f      	ldr	r2, [pc, #124]	; (2bf50 <aws_jobs_update_job_execution+0xac>)
   2bed2:	f00e fd29 	bl	3a928 <sniprintf>
			   UPDATE_JOB_PAYLOAD, execution_status_strings[status],
			   status_details, expected_version, client_token);

	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   2bed6:	f240 5345 	movw	r3, #1349	; 0x545
   2beda:	4298      	cmp	r0, r3
	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   2bedc:	4604      	mov	r4, r0
	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   2bede:	dd13      	ble.n	2bf08 <aws_jobs_update_job_execution+0x64>
		LOG_ERR("Unable to fit formated string in provided buffer.");
   2bee0:	2301      	movs	r3, #1
   2bee2:	f04f 0000 	mov.w	r0, #0
   2bee6:	4a1b      	ldr	r2, [pc, #108]	; (2bf54 <aws_jobs_update_job_execution+0xb0>)
   2bee8:	f363 0007 	bfi	r0, r3, #0, #8
   2beec:	4b1a      	ldr	r3, [pc, #104]	; (2bf58 <aws_jobs_update_job_execution+0xb4>)
   2beee:	491b      	ldr	r1, [pc, #108]	; (2bf5c <aws_jobs_update_job_execution+0xb8>)
   2bef0:	1a9b      	subs	r3, r3, r2
   2bef2:	08db      	lsrs	r3, r3, #3
   2bef4:	f363 108f 	bfi	r0, r3, #6, #10
   2bef8:	f010 fbc3 	bl	3c682 <log_string_sync>
		return -ENOMEM;
   2befc:	f06f 040b 	mvn.w	r4, #11
	}

	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
		       ret, topic_buf);

}
   2bf00:	4620      	mov	r0, r4
   2bf02:	f50d 6dab 	add.w	sp, sp, #1368	; 0x558
   2bf06:	bd70      	pop	{r4, r5, r6, pc}
	} else if (ret < 0) {
   2bf08:	2800      	cmp	r0, #0
   2bf0a:	da0f      	bge.n	2bf2c <aws_jobs_update_job_execution+0x88>
		LOG_ERR("Error when creating payload %d", ret);
   2bf0c:	2301      	movs	r3, #1
   2bf0e:	f04f 0000 	mov.w	r0, #0
   2bf12:	4a10      	ldr	r2, [pc, #64]	; (2bf54 <aws_jobs_update_job_execution+0xb0>)
   2bf14:	f363 0007 	bfi	r0, r3, #0, #8
   2bf18:	4b0f      	ldr	r3, [pc, #60]	; (2bf58 <aws_jobs_update_job_execution+0xb4>)
   2bf1a:	4911      	ldr	r1, [pc, #68]	; (2bf60 <aws_jobs_update_job_execution+0xbc>)
   2bf1c:	1a9b      	subs	r3, r3, r2
   2bf1e:	08db      	lsrs	r3, r3, #3
   2bf20:	f363 108f 	bfi	r0, r3, #6, #10
   2bf24:	4622      	mov	r2, r4
   2bf26:	f010 fbac 	bl	3c682 <log_string_sync>
		return ret;
   2bf2a:	e7e9      	b.n	2bf00 <aws_jobs_update_job_execution+0x5c>
	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
   2bf2c:	f8dd 3570 	ldr.w	r3, [sp, #1392]	; 0x570
   2bf30:	4a0c      	ldr	r2, [pc, #48]	; (2bf64 <aws_jobs_update_job_execution+0xc0>)
   2bf32:	e9cd 0300 	strd	r0, r3, [sp]
   2bf36:	4631      	mov	r1, r6
   2bf38:	ab04      	add	r3, sp, #16
   2bf3a:	4628      	mov	r0, r5
   2bf3c:	f7ff ff34 	bl	2bda8 <publish>
   2bf40:	4604      	mov	r4, r0
   2bf42:	e7dd      	b.n	2bf00 <aws_jobs_update_job_execution+0x5c>
		return -EINVAL;
   2bf44:	f06f 0415 	mvn.w	r4, #21
   2bf48:	e7da      	b.n	2bf00 <aws_jobs_update_job_execution+0x5c>
   2bf4a:	bf00      	nop
   2bf4c:	00040c78 	.word	0x00040c78
   2bf50:	00045327 	.word	0x00045327
   2bf54:	000402cc 	.word	0x000402cc
   2bf58:	000402f4 	.word	0x000402f4
   2bf5c:	00045377 	.word	0x00045377
   2bf60:	000453a9 	.word	0x000453a9
   2bf64:	00040c6c 	.word	0x00040c6c

0002bf68 <aws_jobs_get_job_execution>:

#define JOB_ID_GET_PAYLOAD "{\"clientToken\": \"\"}"
int aws_jobs_get_job_execution(struct mqtt_client *const client,
			       const char *job_id, u8_t *topic_buf)
{
   2bf68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   2bf6a:	4c08      	ldr	r4, [pc, #32]	; (2bf8c <aws_jobs_get_job_execution+0x24>)
{
   2bf6c:	4605      	mov	r5, r0
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   2bf6e:	4620      	mov	r0, r4
{
   2bf70:	4617      	mov	r7, r2
   2bf72:	460e      	mov	r6, r1
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   2bf74:	f7f1 f8d6 	bl	1d124 <strlen>
   2bf78:	4623      	mov	r3, r4
   2bf7a:	e9cd 0700 	strd	r0, r7, [sp]
   2bf7e:	4a04      	ldr	r2, [pc, #16]	; (2bf90 <aws_jobs_get_job_execution+0x28>)
   2bf80:	4631      	mov	r1, r6
   2bf82:	4628      	mov	r0, r5
   2bf84:	f7ff ff10 	bl	2bda8 <publish>
		       strlen(JOB_ID_GET_PAYLOAD), topic_buf);
}
   2bf88:	b003      	add	sp, #12
   2bf8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2bf8c:	00045313 	.word	0x00045313
   2bf90:	00040c54 	.word	0x00040c54

0002bf94 <update_job_execution.constprop.0>:
 */
#define AWS_FOTA_STATUS_DETAILS_TEMPLATE "{\"nextState\":\"%s\","\
					 "\"progress\":%d}"
#define STATUS_DETAILS_MAX_LEN 60

static int update_job_execution(struct mqtt_client *const client,
   2bf94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2bf98:	4680      	mov	r8, r0
   2bf9a:	460f      	mov	r7, r1
   2bf9c:	4616      	mov	r6, r2
   2bf9e:	4699      	mov	r9, r3
	while (!accepted) {
   2bfa0:	4c32      	ldr	r4, [pc, #200]	; (2c06c <update_job_execution.constprop.0+0xd8>)
static int update_job_execution(struct mqtt_client *const client,
   2bfa2:	b095      	sub	sp, #84	; 0x54
	while (!accepted) {
   2bfa4:	7823      	ldrb	r3, [r4, #0]
   2bfa6:	2b00      	cmp	r3, #0
   2bfa8:	d04e      	beq.n	2c048 <update_job_execution.constprop.0+0xb4>
				const char *client_token
				)
{
	/* Waiting for the previous call to this function to be accepted. */
	wait_for_update_accepted();
	accepted = false;
   2bfaa:	2300      	movs	r3, #0
	LOG_DBG("%s, state: %d, status: %d, version_number: %d", __func__,
   2bfac:	f04f 0000 	mov.w	r0, #0
	accepted = false;
   2bfb0:	7023      	strb	r3, [r4, #0]
	LOG_DBG("%s, state: %d, status: %d, version_number: %d", __func__,
   2bfb2:	2304      	movs	r3, #4
   2bfb4:	4c2e      	ldr	r4, [pc, #184]	; (2c070 <update_job_execution.constprop.0+0xdc>)
   2bfb6:	f363 0007 	bfi	r0, r3, #0, #8
   2bfba:	4d2e      	ldr	r5, [pc, #184]	; (2c074 <update_job_execution.constprop.0+0xe0>)
   2bfbc:	4b2e      	ldr	r3, [pc, #184]	; (2c078 <update_job_execution.constprop.0+0xe4>)
   2bfbe:	492f      	ldr	r1, [pc, #188]	; (2c07c <update_job_execution.constprop.0+0xe8>)
   2bfc0:	1ae4      	subs	r4, r4, r3
   2bfc2:	682b      	ldr	r3, [r5, #0]
   2bfc4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2bfc8:	e9cd 6301 	strd	r6, r3, [sp, #4]
   2bfcc:	4b2c      	ldr	r3, [pc, #176]	; (2c080 <update_job_execution.constprop.0+0xec>)
   2bfce:	f364 108f 	bfi	r0, r4, #6, #10
   2bfd2:	461a      	mov	r2, r3
   2bfd4:	9700      	str	r7, [sp, #0]
   2bfd6:	f010 fb54 	bl	3c682 <log_string_sync>
		state, next_state, execution_version_number);
	char status_details[STATUS_DETAILS_MAX_LEN + 1];
	int ret = snprintf(status_details, sizeof(status_details),
   2bfda:	4b2a      	ldr	r3, [pc, #168]	; (2c084 <update_job_execution.constprop.0+0xf0>)
   2bfdc:	f8cd 9000 	str.w	r9, [sp]
   2bfe0:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   2bfe4:	4a28      	ldr	r2, [pc, #160]	; (2c088 <update_job_execution.constprop.0+0xf4>)
   2bfe6:	213d      	movs	r1, #61	; 0x3d
   2bfe8:	a804      	add	r0, sp, #16
   2bfea:	f00e fc9d 	bl	3a928 <sniprintf>
			   AWS_FOTA_STATUS_DETAILS_TEMPLATE,
			   fota_status_strings[next_state], progress);
	__ASSERT(ret >= 0, "snprintf returned error %d\n", ret);
   2bfee:	1e06      	subs	r6, r0, #0
   2bff0:	da2d      	bge.n	2c04e <update_job_execution.constprop.0+0xba>
   2bff2:	2395      	movs	r3, #149	; 0x95
   2bff4:	4a25      	ldr	r2, [pc, #148]	; (2c08c <update_job_execution.constprop.0+0xf8>)
   2bff6:	4926      	ldr	r1, [pc, #152]	; (2c090 <update_job_execution.constprop.0+0xfc>)
   2bff8:	4826      	ldr	r0, [pc, #152]	; (2c094 <update_job_execution.constprop.0+0x100>)
   2bffa:	f010 faeb 	bl	3c5d4 <printk>
   2bffe:	4631      	mov	r1, r6
   2c000:	4825      	ldr	r0, [pc, #148]	; (2c098 <update_job_execution.constprop.0+0x104>)
   2c002:	f010 fae7 	bl	3c5d4 <printk>
   2c006:	2195      	movs	r1, #149	; 0x95
	__ASSERT(ret < STATUS_DETAILS_MAX_LEN,
   2c008:	4820      	ldr	r0, [pc, #128]	; (2c08c <update_job_execution.constprop.0+0xf8>)
   2c00a:	f010 fb29 	bl	3c660 <assert_post_action>
		"Not enough space for status, need %d bytes\n", ret+1);

	ret =  aws_jobs_update_job_execution(client, job_id, state,
   2c00e:	4b23      	ldr	r3, [pc, #140]	; (2c09c <update_job_execution.constprop.0+0x108>)
   2c010:	463a      	mov	r2, r7
   2c012:	9302      	str	r3, [sp, #8]
   2c014:	4b22      	ldr	r3, [pc, #136]	; (2c0a0 <update_job_execution.constprop.0+0x10c>)
   2c016:	4923      	ldr	r1, [pc, #140]	; (2c0a4 <update_job_execution.constprop.0+0x110>)
   2c018:	9301      	str	r3, [sp, #4]
   2c01a:	682b      	ldr	r3, [r5, #0]
   2c01c:	4640      	mov	r0, r8
   2c01e:	9300      	str	r3, [sp, #0]
   2c020:	ab04      	add	r3, sp, #16
   2c022:	f7ff ff3f 	bl	2bea4 <aws_jobs_update_job_execution>
					     status_details,
					     execution_version_number,
					     client_token, update_topic);

	if (ret < 0) {
   2c026:	1e05      	subs	r5, r0, #0
   2c028:	da0a      	bge.n	2c040 <update_job_execution.constprop.0+0xac>
		LOG_ERR("aws_jobs_update_job_execution failed: %d", ret);
   2c02a:	f04f 0000 	mov.w	r0, #0
   2c02e:	2301      	movs	r3, #1
   2c030:	f363 0007 	bfi	r0, r3, #0, #8
   2c034:	f364 108f 	bfi	r0, r4, #6, #10
   2c038:	462a      	mov	r2, r5
   2c03a:	491b      	ldr	r1, [pc, #108]	; (2c0a8 <update_job_execution.constprop.0+0x114>)
   2c03c:	f010 fb21 	bl	3c682 <log_string_sync>
	}


	return ret;
}
   2c040:	4628      	mov	r0, r5
   2c042:	b015      	add	sp, #84	; 0x54
   2c044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_impl_k_yield();
   2c048:	f00c fad4 	bl	385f4 <z_impl_k_yield>
   2c04c:	e7aa      	b.n	2bfa4 <update_job_execution.constprop.0+0x10>
	__ASSERT(ret < STATUS_DETAILS_MAX_LEN,
   2c04e:	2e3b      	cmp	r6, #59	; 0x3b
   2c050:	dddd      	ble.n	2c00e <update_job_execution.constprop.0+0x7a>
   2c052:	2397      	movs	r3, #151	; 0x97
   2c054:	4a0d      	ldr	r2, [pc, #52]	; (2c08c <update_job_execution.constprop.0+0xf8>)
   2c056:	4915      	ldr	r1, [pc, #84]	; (2c0ac <update_job_execution.constprop.0+0x118>)
   2c058:	480e      	ldr	r0, [pc, #56]	; (2c094 <update_job_execution.constprop.0+0x100>)
   2c05a:	f010 fabb 	bl	3c5d4 <printk>
   2c05e:	1c71      	adds	r1, r6, #1
   2c060:	4813      	ldr	r0, [pc, #76]	; (2c0b0 <update_job_execution.constprop.0+0x11c>)
   2c062:	f010 fab7 	bl	3c5d4 <printk>
   2c066:	2197      	movs	r1, #151	; 0x97
   2c068:	e7ce      	b.n	2c008 <update_job_execution.constprop.0+0x74>
   2c06a:	bf00      	nop
   2c06c:	20031752 	.word	0x20031752
   2c070:	000402ec 	.word	0x000402ec
   2c074:	20024890 	.word	0x20024890
   2c078:	000402cc 	.word	0x000402cc
   2c07c:	000458ef 	.word	0x000458ef
   2c080:	00045505 	.word	0x00045505
   2c084:	00040c98 	.word	0x00040c98
   2c088:	00045921 	.word	0x00045921
   2c08c:	00045942 	.word	0x00045942
   2c090:	00045981 	.word	0x00045981
   2c094:	00041757 	.word	0x00041757
   2c098:	0004598a 	.word	0x0004598a
   2c09c:	2002b92f 	.word	0x2002b92f
   2c0a0:	00043121 	.word	0x00043121
   2c0a4:	2002b313 	.word	0x2002b313
   2c0a8:	000459df 	.word	0x000459df
   2c0ac:	000459a8 	.word	0x000459a8
   2c0b0:	000459b1 	.word	0x000459b1

0002c0b4 <http_fota_handler>:
	}
}


static void http_fota_handler(const struct fota_download_evt *evt)
{
   2c0b4:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(c != NULL);
   2c0b6:	4c32      	ldr	r4, [pc, #200]	; (2c180 <http_fota_handler+0xcc>)
{
   2c0b8:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(c != NULL);
   2c0ba:	6823      	ldr	r3, [r4, #0]
   2c0bc:	b95b      	cbnz	r3, 2c0d6 <http_fota_handler+0x22>
   2c0be:	4931      	ldr	r1, [pc, #196]	; (2c184 <http_fota_handler+0xd0>)
   2c0c0:	4831      	ldr	r0, [pc, #196]	; (2c188 <http_fota_handler+0xd4>)
   2c0c2:	f240 13db 	movw	r3, #475	; 0x1db
   2c0c6:	4a31      	ldr	r2, [pc, #196]	; (2c18c <http_fota_handler+0xd8>)
   2c0c8:	f010 fa84 	bl	3c5d4 <printk>
   2c0cc:	f240 11db 	movw	r1, #475	; 0x1db
   2c0d0:	482e      	ldr	r0, [pc, #184]	; (2c18c <http_fota_handler+0xd8>)
   2c0d2:	f010 fac5 	bl	3c660 <assert_post_action>

	int err = 0;

	switch (evt->id) {
   2c0d6:	782b      	ldrb	r3, [r5, #0]
   2c0d8:	2b04      	cmp	r3, #4
   2c0da:	d850      	bhi.n	2c17e <http_fota_handler+0xca>
   2c0dc:	e8df f003 	tbb	[pc, r3]
   2c0e0:	26200344 	.word	0x26200344
   2c0e4:	2a          	.byte	0x2a
   2c0e5:	00          	.byte	0x00
	case FOTA_DOWNLOAD_EVT_FINISHED:
		LOG_INF("FOTA download completed evt received");
   2c0e6:	2303      	movs	r3, #3
   2c0e8:	f04f 0000 	mov.w	r0, #0
   2c0ec:	4a28      	ldr	r2, [pc, #160]	; (2c190 <http_fota_handler+0xdc>)
   2c0ee:	f363 0007 	bfi	r0, r3, #0, #8
   2c0f2:	4b28      	ldr	r3, [pc, #160]	; (2c194 <http_fota_handler+0xe0>)
   2c0f4:	4928      	ldr	r1, [pc, #160]	; (2c198 <http_fota_handler+0xe4>)
   2c0f6:	1a9b      	subs	r3, r3, r2
   2c0f8:	08db      	lsrs	r3, r3, #3
   2c0fa:	f363 108f 	bfi	r0, r3, #6, #10
   2c0fe:	f010 fac0 	bl	3c682 <log_string_sync>
		fota_state = APPLY_UPDATE;
   2c102:	2202      	movs	r2, #2
   2c104:	4b25      	ldr	r3, [pc, #148]	; (2c19c <http_fota_handler+0xe8>)
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS,
   2c106:	2101      	movs	r1, #1
		fota_state = APPLY_UPDATE;
   2c108:	701a      	strb	r2, [r3, #0]
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS,
   2c10a:	4b25      	ldr	r3, [pc, #148]	; (2c1a0 <http_fota_handler+0xec>)
   2c10c:	6820      	ldr	r0, [r4, #0]
   2c10e:	681b      	ldr	r3, [r3, #0]
   2c110:	f7ff ff40 	bl	2bf94 <update_job_execution.constprop.0>
					   fota_state, stored_progress, "");
		if (err != 0) {
   2c114:	2800      	cmp	r0, #0
   2c116:	d032      	beq.n	2c17e <http_fota_handler+0xca>
		LOG_ERR("FOTA download failed, report back");
		fota_state = NONE;
		execution_state = AWS_JOBS_QUEUED;
		(void) update_job_execution(c, job_id, AWS_JOBS_FAILED,
					    fota_state, -1, "");
		callback(AWS_FOTA_EVT_ERROR);
   2c118:	4b22      	ldr	r3, [pc, #136]	; (2c1a4 <http_fota_handler+0xf0>)
   2c11a:	2001      	movs	r0, #1
   2c11c:	681b      	ldr	r3, [r3, #0]
   2c11e:	e002      	b.n	2c126 <http_fota_handler+0x72>
		callback(AWS_FOTA_EVT_ERASE_PENDING);
   2c120:	2002      	movs	r0, #2
   2c122:	4b20      	ldr	r3, [pc, #128]	; (2c1a4 <http_fota_handler+0xf0>)
   2c124:	681b      	ldr	r3, [r3, #0]
					   fota_state, stored_progress, "");
		break;
#endif
	}

}
   2c126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(AWS_FOTA_EVT_ERASE_PENDING);
   2c12a:	4718      	bx	r3
		callback(AWS_FOTA_EVT_ERASE_DONE);
   2c12c:	4b1d      	ldr	r3, [pc, #116]	; (2c1a4 <http_fota_handler+0xf0>)
   2c12e:	2003      	movs	r0, #3
   2c130:	681b      	ldr	r3, [r3, #0]
   2c132:	e7f8      	b.n	2c126 <http_fota_handler+0x72>
		LOG_ERR("FOTA download failed, report back");
   2c134:	2301      	movs	r3, #1
   2c136:	f04f 0000 	mov.w	r0, #0
   2c13a:	4a15      	ldr	r2, [pc, #84]	; (2c190 <http_fota_handler+0xdc>)
   2c13c:	f363 0007 	bfi	r0, r3, #0, #8
   2c140:	4b14      	ldr	r3, [pc, #80]	; (2c194 <http_fota_handler+0xe0>)
   2c142:	4919      	ldr	r1, [pc, #100]	; (2c1a8 <http_fota_handler+0xf4>)
   2c144:	1a9b      	subs	r3, r3, r2
   2c146:	08db      	lsrs	r3, r3, #3
   2c148:	f363 108f 	bfi	r0, r3, #6, #10
   2c14c:	f010 fa99 	bl	3c682 <log_string_sync>
		fota_state = NONE;
   2c150:	2200      	movs	r2, #0
   2c152:	4b12      	ldr	r3, [pc, #72]	; (2c19c <http_fota_handler+0xe8>)
		(void) update_job_execution(c, job_id, AWS_JOBS_FAILED,
   2c154:	2103      	movs	r1, #3
		fota_state = NONE;
   2c156:	701a      	strb	r2, [r3, #0]
		execution_state = AWS_JOBS_QUEUED;
   2c158:	4b14      	ldr	r3, [pc, #80]	; (2c1ac <http_fota_handler+0xf8>)
		(void) update_job_execution(c, job_id, AWS_JOBS_FAILED,
   2c15a:	6820      	ldr	r0, [r4, #0]
		execution_state = AWS_JOBS_QUEUED;
   2c15c:	701a      	strb	r2, [r3, #0]
		(void) update_job_execution(c, job_id, AWS_JOBS_FAILED,
   2c15e:	f04f 33ff 	mov.w	r3, #4294967295
   2c162:	f7ff ff17 	bl	2bf94 <update_job_execution.constprop.0>
   2c166:	e7d7      	b.n	2c118 <http_fota_handler+0x64>
		stored_progress = evt->offset;
   2c168:	686b      	ldr	r3, [r5, #4]
   2c16a:	4a0d      	ldr	r2, [pc, #52]	; (2c1a0 <http_fota_handler+0xec>)
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS,
   2c16c:	6820      	ldr	r0, [r4, #0]
		stored_progress = evt->offset;
   2c16e:	6013      	str	r3, [r2, #0]
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS,
   2c170:	4a0a      	ldr	r2, [pc, #40]	; (2c19c <http_fota_handler+0xe8>)
   2c172:	2101      	movs	r1, #1
}
   2c174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS,
   2c178:	7812      	ldrb	r2, [r2, #0]
   2c17a:	f7ff bf0b 	b.w	2bf94 <update_job_execution.constprop.0>
}
   2c17e:	bd70      	pop	{r4, r5, r6, pc}
   2c180:	20024888 	.word	0x20024888
   2c184:	0004586a 	.word	0x0004586a
   2c188:	00041757 	.word	0x00041757
   2c18c:	00045942 	.word	0x00045942
   2c190:	000402cc 	.word	0x000402cc
   2c194:	000402ec 	.word	0x000402ec
   2c198:	0004587b 	.word	0x0004587b
   2c19c:	2002b17e 	.word	0x2002b17e
   2c1a0:	20024894 	.word	0x20024894
   2c1a4:	2002488c 	.word	0x2002488c
   2c1a8:	000458a0 	.word	0x000458a0
   2c1ac:	2002b07e 	.word	0x2002b07e

0002c1b0 <get_published_payload.constprop.1>:
	if (length > sizeof(payload_buf)) {
   2c1b0:	f240 5346 	movw	r3, #1350	; 0x546
static int get_published_payload(struct mqtt_client *client, u8_t *write_buf,
   2c1b4:	b570      	push	{r4, r5, r6, lr}
	u8_t *end = buf + length;
   2c1b6:	4c0d      	ldr	r4, [pc, #52]	; (2c1ec <get_published_payload.constprop.1+0x3c>)
	if (length > sizeof(payload_buf)) {
   2c1b8:	4299      	cmp	r1, r3
static int get_published_payload(struct mqtt_client *client, u8_t *write_buf,
   2c1ba:	4606      	mov	r6, r0
	u8_t *end = buf + length;
   2c1bc:	eb04 0501 	add.w	r5, r4, r1
	if (length > sizeof(payload_buf)) {
   2c1c0:	d80d      	bhi.n	2c1de <get_published_payload.constprop.1+0x2e>
	while (buf < end) {
   2c1c2:	42a5      	cmp	r5, r4
   2c1c4:	d801      	bhi.n	2c1ca <get_published_payload.constprop.1+0x1a>
	return 0;
   2c1c6:	2000      	movs	r0, #0
}
   2c1c8:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buf,
   2c1ca:	1b2a      	subs	r2, r5, r4
   2c1cc:	4621      	mov	r1, r4
   2c1ce:	4630      	mov	r0, r6
   2c1d0:	f011 f94d 	bl	3d46e <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   2c1d4:	2800      	cmp	r0, #0
   2c1d6:	dbf7      	blt.n	2c1c8 <get_published_payload.constprop.1+0x18>
		} else if (ret == 0) {
   2c1d8:	d004      	beq.n	2c1e4 <get_published_payload.constprop.1+0x34>
		buf += ret;
   2c1da:	4404      	add	r4, r0
   2c1dc:	e7f1      	b.n	2c1c2 <get_published_payload.constprop.1+0x12>
		return -EMSGSIZE;
   2c1de:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2c1e2:	e7f1      	b.n	2c1c8 <get_published_payload.constprop.1+0x18>
			return -EIO;
   2c1e4:	f06f 0004 	mvn.w	r0, #4
   2c1e8:	e7ee      	b.n	2c1c8 <get_published_payload.constprop.1+0x18>
   2c1ea:	bf00      	nop
   2c1ec:	2002b3e9 	.word	0x2002b3e9

0002c1f0 <aws_fota_mqtt_evt_handler>:
{
   2c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (evt->type) {
   2c1f4:	780b      	ldrb	r3, [r1, #0]
{
   2c1f6:	b089      	sub	sp, #36	; 0x24
   2c1f8:	4606      	mov	r6, r0
   2c1fa:	460d      	mov	r5, r1
	switch (evt->type) {
   2c1fc:	2b07      	cmp	r3, #7
   2c1fe:	d80b      	bhi.n	2c218 <aws_fota_mqtt_evt_handler+0x28>
   2c200:	e8df f013 	tbh	[pc, r3, lsl #1]
   2c204:	000a0008 	.word	0x000a0008
   2c208:	025e0035 	.word	0x025e0035
   2c20c:	000a000a 	.word	0x000a000a
   2c210:	0272000a 	.word	0x0272000a
		if (evt->result != 0) {
   2c214:	69cb      	ldr	r3, [r1, #28]
   2c216:	b10b      	cbz	r3, 2c21c <aws_fota_mqtt_evt_handler+0x2c>
			return err;
   2c218:	2701      	movs	r7, #1
   2c21a:	e0a3      	b.n	2c364 <aws_fota_mqtt_evt_handler+0x174>
		err = aws_jobs_subscribe_topic_notify_next(client,
   2c21c:	49b6      	ldr	r1, [pc, #728]	; (2c4f8 <aws_fota_mqtt_evt_handler+0x308>)
   2c21e:	f7ff fe17 	bl	2be50 <aws_jobs_subscribe_topic_notify_next>
		if (err) {
   2c222:	4607      	mov	r7, r0
   2c224:	b170      	cbz	r0, 2c244 <aws_fota_mqtt_evt_handler+0x54>
			LOG_ERR("Unable to subscribe to notify-next topic");
   2c226:	2301      	movs	r3, #1
   2c228:	f04f 0000 	mov.w	r0, #0
   2c22c:	4ab3      	ldr	r2, [pc, #716]	; (2c4fc <aws_fota_mqtt_evt_handler+0x30c>)
   2c22e:	f363 0007 	bfi	r0, r3, #0, #8
   2c232:	4bb3      	ldr	r3, [pc, #716]	; (2c500 <aws_fota_mqtt_evt_handler+0x310>)
   2c234:	49b3      	ldr	r1, [pc, #716]	; (2c504 <aws_fota_mqtt_evt_handler+0x314>)
   2c236:	1a9b      	subs	r3, r3, r2
   2c238:	08db      	lsrs	r3, r3, #3
   2c23a:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_INF("subscribed to get topic");
   2c23e:	f010 fa20 	bl	3c682 <log_string_sync>
			return 0;
   2c242:	e08f      	b.n	2c364 <aws_fota_mqtt_evt_handler+0x174>
		err = aws_jobs_subscribe_topic_get(client, "$next", get_topic);
   2c244:	4ab0      	ldr	r2, [pc, #704]	; (2c508 <aws_fota_mqtt_evt_handler+0x318>)
   2c246:	49b1      	ldr	r1, [pc, #708]	; (2c50c <aws_fota_mqtt_evt_handler+0x31c>)
   2c248:	4630      	mov	r0, r6
   2c24a:	f7ff fe0f 	bl	2be6c <aws_jobs_subscribe_topic_get>
		if (err) {
   2c24e:	4607      	mov	r7, r0
   2c250:	2800      	cmp	r0, #0
   2c252:	d0e1      	beq.n	2c218 <aws_fota_mqtt_evt_handler+0x28>
			LOG_ERR("Unable to subscribe to jobs/$next/get");
   2c254:	2301      	movs	r3, #1
   2c256:	f04f 0000 	mov.w	r0, #0
   2c25a:	4aa8      	ldr	r2, [pc, #672]	; (2c4fc <aws_fota_mqtt_evt_handler+0x30c>)
   2c25c:	f363 0007 	bfi	r0, r3, #0, #8
   2c260:	4ba7      	ldr	r3, [pc, #668]	; (2c500 <aws_fota_mqtt_evt_handler+0x310>)
   2c262:	49ab      	ldr	r1, [pc, #684]	; (2c510 <aws_fota_mqtt_evt_handler+0x320>)
   2c264:	1a9b      	subs	r3, r3, r2
   2c266:	08db      	lsrs	r3, r3, #3
   2c268:	f363 108f 	bfi	r0, r3, #6, #10
   2c26c:	e7e7      	b.n	2c23e <aws_fota_mqtt_evt_handler+0x4e>
		err = on_publish_evt(client,
   2c26e:	e9d1 7401 	ldrd	r7, r4, [r1, #4]
   2c272:	f8d1 8014 	ldr.w	r8, [r1, #20]
		aws_jobs_cmp(get_topic, topic, topic_len, "");
   2c276:	4622      	mov	r2, r4
   2c278:	4ba6      	ldr	r3, [pc, #664]	; (2c514 <aws_fota_mqtt_evt_handler+0x324>)
   2c27a:	4639      	mov	r1, r7
   2c27c:	48a2      	ldr	r0, [pc, #648]	; (2c508 <aws_fota_mqtt_evt_handler+0x318>)
   2c27e:	f012 fb05 	bl	3e88c <aws_jobs_cmp>
		aws_jobs_cmp(get_topic, topic, topic_len, "accepted");
   2c282:	4622      	mov	r2, r4
   2c284:	4ba4      	ldr	r3, [pc, #656]	; (2c518 <aws_fota_mqtt_evt_handler+0x328>)
   2c286:	4639      	mov	r1, r7
		aws_jobs_cmp(get_topic, topic, topic_len, "");
   2c288:	4682      	mov	sl, r0
		aws_jobs_cmp(get_topic, topic, topic_len, "accepted");
   2c28a:	489f      	ldr	r0, [pc, #636]	; (2c508 <aws_fota_mqtt_evt_handler+0x318>)
   2c28c:	f012 fafe 	bl	3e88c <aws_jobs_cmp>
		aws_jobs_cmp(notify_next_topic, topic, topic_len, "");
   2c290:	4622      	mov	r2, r4
		aws_jobs_cmp(get_topic, topic, topic_len, "accepted");
   2c292:	9003      	str	r0, [sp, #12]
		aws_jobs_cmp(notify_next_topic, topic, topic_len, "");
   2c294:	4b9f      	ldr	r3, [pc, #636]	; (2c514 <aws_fota_mqtt_evt_handler+0x324>)
   2c296:	4639      	mov	r1, r7
   2c298:	4897      	ldr	r0, [pc, #604]	; (2c4f8 <aws_fota_mqtt_evt_handler+0x308>)
   2c29a:	f012 faf7 	bl	3e88c <aws_jobs_cmp>
		aws_jobs_cmp(update_topic, topic, topic_len, "accepted");
   2c29e:	4622      	mov	r2, r4
		aws_jobs_cmp(notify_next_topic, topic, topic_len, "");
   2c2a0:	4683      	mov	fp, r0
		aws_jobs_cmp(update_topic, topic, topic_len, "accepted");
   2c2a2:	4b9d      	ldr	r3, [pc, #628]	; (2c518 <aws_fota_mqtt_evt_handler+0x328>)
   2c2a4:	4639      	mov	r1, r7
   2c2a6:	489d      	ldr	r0, [pc, #628]	; (2c51c <aws_fota_mqtt_evt_handler+0x32c>)
   2c2a8:	f012 faf0 	bl	3e88c <aws_jobs_cmp>
		aws_jobs_cmp(update_topic, topic, topic_len, "rejected");
   2c2ac:	4622      	mov	r2, r4
   2c2ae:	4639      	mov	r1, r7
		aws_jobs_cmp(update_topic, topic, topic_len, "accepted");
   2c2b0:	9004      	str	r0, [sp, #16]
		aws_jobs_cmp(update_topic, topic, topic_len, "rejected");
   2c2b2:	4b9b      	ldr	r3, [pc, #620]	; (2c520 <aws_fota_mqtt_evt_handler+0x330>)
   2c2b4:	4899      	ldr	r0, [pc, #612]	; (2c51c <aws_fota_mqtt_evt_handler+0x32c>)
   2c2b6:	f012 fae9 	bl	3e88c <aws_jobs_cmp>
	LOG_DBG("Received topic: %s", log_strdup(topic));
   2c2ba:	f04f 0900 	mov.w	r9, #0
   2c2be:	2304      	movs	r3, #4
   2c2c0:	4c8f      	ldr	r4, [pc, #572]	; (2c500 <aws_fota_mqtt_evt_handler+0x310>)
   2c2c2:	f363 0907 	bfi	r9, r3, #0, #8
   2c2c6:	4b8d      	ldr	r3, [pc, #564]	; (2c4fc <aws_fota_mqtt_evt_handler+0x30c>)
		aws_jobs_cmp(update_topic, topic, topic_len, "rejected");
   2c2c8:	9005      	str	r0, [sp, #20]
	LOG_DBG("Received topic: %s", log_strdup(topic));
   2c2ca:	4638      	mov	r0, r7
   2c2cc:	1ae4      	subs	r4, r4, r3
   2c2ce:	f010 f9ea 	bl	3c6a6 <log_strdup>
   2c2d2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2c2d6:	f364 198f 	bfi	r9, r4, #6, #10
   2c2da:	4603      	mov	r3, r0
   2c2dc:	4a91      	ldr	r2, [pc, #580]	; (2c524 <aws_fota_mqtt_evt_handler+0x334>)
   2c2de:	4992      	ldr	r1, [pc, #584]	; (2c528 <aws_fota_mqtt_evt_handler+0x338>)
   2c2e0:	4648      	mov	r0, r9
   2c2e2:	f010 f9ce 	bl	3c682 <log_string_sync>
	if (is_notify_next_topic || is_get_next_topic || is_get_accepted) {
   2c2e6:	f1bb 0f00 	cmp.w	fp, #0
   2c2ea:	d106      	bne.n	2c2fa <aws_fota_mqtt_evt_handler+0x10a>
   2c2ec:	f1ba 0f00 	cmp.w	sl, #0
   2c2f0:	d103      	bne.n	2c2fa <aws_fota_mqtt_evt_handler+0x10a>
   2c2f2:	9b03      	ldr	r3, [sp, #12]
   2c2f4:	2b00      	cmp	r3, #0
   2c2f6:	f000 80b6 	beq.w	2c466 <aws_fota_mqtt_evt_handler+0x276>
		LOG_INF("Checking for an available job");
   2c2fa:	2303      	movs	r3, #3
   2c2fc:	f04f 0000 	mov.w	r0, #0
   2c300:	f363 0007 	bfi	r0, r3, #0, #8
   2c304:	f364 108f 	bfi	r0, r4, #6, #10
   2c308:	4988      	ldr	r1, [pc, #544]	; (2c52c <aws_fota_mqtt_evt_handler+0x33c>)
   2c30a:	f010 f9ba 	bl	3c682 <log_string_sync>
	int err = get_published_payload(client, payload_buf, payload_len);
   2c30e:	4641      	mov	r1, r8
   2c310:	4630      	mov	r0, r6
   2c312:	f7ff ff4d 	bl	2c1b0 <get_published_payload.constprop.1>
	if (err) {
   2c316:	4607      	mov	r7, r0
   2c318:	b148      	cbz	r0, 2c32e <aws_fota_mqtt_evt_handler+0x13e>
		LOG_ERR("Error when getting the payload: %d", err);
   2c31a:	f04f 0000 	mov.w	r0, #0
   2c31e:	2301      	movs	r3, #1
   2c320:	f363 0007 	bfi	r0, r3, #0, #8
   2c324:	f364 108f 	bfi	r0, r4, #6, #10
   2c328:	463a      	mov	r2, r7
   2c32a:	4981      	ldr	r1, [pc, #516]	; (2c530 <aws_fota_mqtt_evt_handler+0x340>)
   2c32c:	e094      	b.n	2c458 <aws_fota_mqtt_evt_handler+0x268>
	err = aws_fota_parse_DescribeJobExecution_rsp(payload_buf, payload_len,
   2c32e:	f8df 9240 	ldr.w	r9, [pc, #576]	; 2c570 <aws_fota_mqtt_evt_handler+0x380>
   2c332:	f8df a240 	ldr.w	sl, [pc, #576]	; 2c574 <aws_fota_mqtt_evt_handler+0x384>
   2c336:	f8cd 9004 	str.w	r9, [sp, #4]
   2c33a:	f8cd a000 	str.w	sl, [sp]
   2c33e:	4b7d      	ldr	r3, [pc, #500]	; (2c534 <aws_fota_mqtt_evt_handler+0x344>)
   2c340:	4a7d      	ldr	r2, [pc, #500]	; (2c538 <aws_fota_mqtt_evt_handler+0x348>)
   2c342:	4641      	mov	r1, r8
   2c344:	487d      	ldr	r0, [pc, #500]	; (2c53c <aws_fota_mqtt_evt_handler+0x34c>)
   2c346:	f000 fa61 	bl	2c80c <aws_fota_parse_DescribeJobExecution_rsp>
	if (err < 0) {
   2c34a:	1e07      	subs	r7, r0, #0
   2c34c:	da0e      	bge.n	2c36c <aws_fota_mqtt_evt_handler+0x17c>
		LOG_ERR("Error when parsing the json: %d", err);
   2c34e:	f04f 0000 	mov.w	r0, #0
   2c352:	2301      	movs	r3, #1
   2c354:	f363 0007 	bfi	r0, r3, #0, #8
   2c358:	f364 108f 	bfi	r0, r4, #6, #10
   2c35c:	463a      	mov	r2, r7
   2c35e:	4978      	ldr	r1, [pc, #480]	; (2c540 <aws_fota_mqtt_evt_handler+0x350>)
   2c360:	f010 f98f 	bl	3c682 <log_string_sync>
}
   2c364:	4638      	mov	r0, r7
   2c366:	b009      	add	sp, #36	; 0x24
   2c368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else  if (err == 0) {
   2c36c:	d127      	bne.n	2c3be <aws_fota_mqtt_evt_handler+0x1ce>
		LOG_DBG("Got only one field: %s", log_strdup(payload_buf));
   2c36e:	2304      	movs	r3, #4
   2c370:	f04f 0600 	mov.w	r6, #0
   2c374:	4871      	ldr	r0, [pc, #452]	; (2c53c <aws_fota_mqtt_evt_handler+0x34c>)
   2c376:	f363 0607 	bfi	r6, r3, #0, #8
   2c37a:	f010 f994 	bl	3c6a6 <log_strdup>
   2c37e:	f364 168f 	bfi	r6, r4, #6, #10
   2c382:	4603      	mov	r3, r0
   2c384:	496f      	ldr	r1, [pc, #444]	; (2c544 <aws_fota_mqtt_evt_handler+0x354>)
   2c386:	4630      	mov	r0, r6
   2c388:	4a6f      	ldr	r2, [pc, #444]	; (2c548 <aws_fota_mqtt_evt_handler+0x358>)
   2c38a:	f010 f97a 	bl	3c682 <log_string_sync>
		LOG_INF("No queued jobs for this device");
   2c38e:	f04f 0000 	mov.w	r0, #0
   2c392:	2303      	movs	r3, #3
   2c394:	f363 0007 	bfi	r0, r3, #0, #8
   2c398:	f364 108f 	bfi	r0, r4, #6, #10
   2c39c:	496b      	ldr	r1, [pc, #428]	; (2c54c <aws_fota_mqtt_evt_handler+0x35c>)
   2c39e:	f010 f970 	bl	3c682 <log_string_sync>
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2c3a2:	7b2b      	ldrb	r3, [r5, #12]
   2c3a4:	2b01      	cmp	r3, #1
   2c3a6:	f040 819d 	bne.w	2c6e4 <aws_fota_mqtt_evt_handler+0x4f4>
			const struct mqtt_puback_param ack = {
   2c3aa:	8b2b      	ldrh	r3, [r5, #24]
			err = mqtt_publish_qos1_ack(c, &ack);
   2c3ac:	a907      	add	r1, sp, #28
			const struct mqtt_puback_param ack = {
   2c3ae:	f8ad 301c 	strh.w	r3, [sp, #28]
			err = mqtt_publish_qos1_ack(c, &ack);
   2c3b2:	4b67      	ldr	r3, [pc, #412]	; (2c550 <aws_fota_mqtt_evt_handler+0x360>)
   2c3b4:	6818      	ldr	r0, [r3, #0]
   2c3b6:	f010 ff32 	bl	3d21e <mqtt_publish_qos1_ack>
			err = update_job_execution(client, job_id,
   2c3ba:	4607      	mov	r7, r0
			if (err) {
   2c3bc:	e7d2      	b.n	2c364 <aws_fota_mqtt_evt_handler+0x174>
	LOG_DBG("Job ID: %s", log_strdup(job_id));
   2c3be:	2304      	movs	r3, #4
   2c3c0:	f04f 0700 	mov.w	r7, #0
   2c3c4:	485c      	ldr	r0, [pc, #368]	; (2c538 <aws_fota_mqtt_evt_handler+0x348>)
   2c3c6:	f363 0707 	bfi	r7, r3, #0, #8
   2c3ca:	f010 f96c 	bl	3c6a6 <log_strdup>
   2c3ce:	f364 178f 	bfi	r7, r4, #6, #10
   2c3d2:	4603      	mov	r3, r0
   2c3d4:	4a5c      	ldr	r2, [pc, #368]	; (2c548 <aws_fota_mqtt_evt_handler+0x358>)
   2c3d6:	495f      	ldr	r1, [pc, #380]	; (2c554 <aws_fota_mqtt_evt_handler+0x364>)
   2c3d8:	4638      	mov	r0, r7
   2c3da:	f010 f952 	bl	3c682 <log_string_sync>
	LOG_DBG("hostname: %s", log_strdup(hostname));
   2c3de:	f04f 0700 	mov.w	r7, #0
   2c3e2:	2304      	movs	r3, #4
   2c3e4:	4853      	ldr	r0, [pc, #332]	; (2c534 <aws_fota_mqtt_evt_handler+0x344>)
   2c3e6:	f363 0707 	bfi	r7, r3, #0, #8
   2c3ea:	f010 f95c 	bl	3c6a6 <log_strdup>
   2c3ee:	f364 178f 	bfi	r7, r4, #6, #10
   2c3f2:	4603      	mov	r3, r0
   2c3f4:	4a54      	ldr	r2, [pc, #336]	; (2c548 <aws_fota_mqtt_evt_handler+0x358>)
   2c3f6:	4958      	ldr	r1, [pc, #352]	; (2c558 <aws_fota_mqtt_evt_handler+0x368>)
   2c3f8:	4638      	mov	r0, r7
   2c3fa:	f010 f942 	bl	3c682 <log_string_sync>
	LOG_DBG("file_path %s", log_strdup(file_path));
   2c3fe:	f04f 0700 	mov.w	r7, #0
   2c402:	2304      	movs	r3, #4
   2c404:	4650      	mov	r0, sl
   2c406:	f363 0707 	bfi	r7, r3, #0, #8
   2c40a:	f010 f94c 	bl	3c6a6 <log_strdup>
   2c40e:	f364 178f 	bfi	r7, r4, #6, #10
   2c412:	4603      	mov	r3, r0
   2c414:	4a4c      	ldr	r2, [pc, #304]	; (2c548 <aws_fota_mqtt_evt_handler+0x358>)
   2c416:	4638      	mov	r0, r7
   2c418:	4950      	ldr	r1, [pc, #320]	; (2c55c <aws_fota_mqtt_evt_handler+0x36c>)
   2c41a:	f010 f932 	bl	3c682 <log_string_sync>
	LOG_DBG("execution_version_number: %d ", execution_version_number);
   2c41e:	2304      	movs	r3, #4
   2c420:	f04f 0000 	mov.w	r0, #0
   2c424:	f363 0007 	bfi	r0, r3, #0, #8
   2c428:	f364 108f 	bfi	r0, r4, #6, #10
   2c42c:	f8d9 3000 	ldr.w	r3, [r9]
   2c430:	4a45      	ldr	r2, [pc, #276]	; (2c548 <aws_fota_mqtt_evt_handler+0x358>)
   2c432:	494b      	ldr	r1, [pc, #300]	; (2c560 <aws_fota_mqtt_evt_handler+0x370>)
   2c434:	f010 f925 	bl	3c682 <log_string_sync>
	err = aws_jobs_subscribe_topic_update(client, job_id, update_topic);
   2c438:	4a38      	ldr	r2, [pc, #224]	; (2c51c <aws_fota_mqtt_evt_handler+0x32c>)
   2c43a:	493f      	ldr	r1, [pc, #252]	; (2c538 <aws_fota_mqtt_evt_handler+0x348>)
   2c43c:	4630      	mov	r0, r6
   2c43e:	f7ff fd23 	bl	2be88 <aws_jobs_subscribe_topic_update>
	if (err) {
   2c442:	4607      	mov	r7, r0
   2c444:	b158      	cbz	r0, 2c45e <aws_fota_mqtt_evt_handler+0x26e>
		LOG_ERR("Error when subscribing job_id_update: "
   2c446:	f04f 0000 	mov.w	r0, #0
   2c44a:	2301      	movs	r3, #1
   2c44c:	463a      	mov	r2, r7
   2c44e:	f363 0007 	bfi	r0, r3, #0, #8
   2c452:	4944      	ldr	r1, [pc, #272]	; (2c564 <aws_fota_mqtt_evt_handler+0x374>)
   2c454:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Error %d when getting the payload", err);
   2c458:	f010 f913 	bl	3c682 <log_string_sync>
		return err;
   2c45c:	e0b8      	b.n	2c5d0 <aws_fota_mqtt_evt_handler+0x3e0>
	fota_state = DOWNLOAD_FIRMWARE;
   2c45e:	2201      	movs	r2, #1
   2c460:	4b41      	ldr	r3, [pc, #260]	; (2c568 <aws_fota_mqtt_evt_handler+0x378>)
   2c462:	701a      	strb	r2, [r3, #0]
		if (err < 0) {
   2c464:	e79d      	b.n	2c3a2 <aws_fota_mqtt_evt_handler+0x1b2>
	} else if (doc_update_accepted) {
   2c466:	9b04      	ldr	r3, [sp, #16]
   2c468:	2b00      	cmp	r3, #0
   2c46a:	f000 80d8 	beq.w	2c61e <aws_fota_mqtt_evt_handler+0x42e>
	int err = get_published_payload(client, payload_buf, payload_len);
   2c46e:	4641      	mov	r1, r8
   2c470:	4630      	mov	r0, r6
   2c472:	f7ff fe9d 	bl	2c1b0 <get_published_payload.constprop.1>
	if (err) {
   2c476:	4607      	mov	r7, r0
   2c478:	2800      	cmp	r0, #0
   2c47a:	f47f af4e 	bne.w	2c31a <aws_fota_mqtt_evt_handler+0x12a>
	accepted = true;
   2c47e:	2201      	movs	r2, #1
   2c480:	4b3a      	ldr	r3, [pc, #232]	; (2c56c <aws_fota_mqtt_evt_handler+0x37c>)
	if (execution_state != AWS_JOBS_IN_PROGRESS
   2c482:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 2c580 <aws_fota_mqtt_evt_handler+0x390>
	accepted = true;
   2c486:	701a      	strb	r2, [r3, #0]
	execution_version_number++;
   2c488:	4a39      	ldr	r2, [pc, #228]	; (2c570 <aws_fota_mqtt_evt_handler+0x380>)
   2c48a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 2c568 <aws_fota_mqtt_evt_handler+0x378>
   2c48e:	6813      	ldr	r3, [r2, #0]
   2c490:	f89a 8000 	ldrb.w	r8, [sl]
   2c494:	3301      	adds	r3, #1
   2c496:	6013      	str	r3, [r2, #0]
	if (execution_state != AWS_JOBS_IN_PROGRESS
   2c498:	f899 3000 	ldrb.w	r3, [r9]
   2c49c:	2b01      	cmp	r3, #1
   2c49e:	d071      	beq.n	2c584 <aws_fota_mqtt_evt_handler+0x394>
	    && fota_state == DOWNLOAD_FIRMWARE) {
   2c4a0:	f1b8 0f01 	cmp.w	r8, #1
   2c4a4:	f040 809b 	bne.w	2c5de <aws_fota_mqtt_evt_handler+0x3ee>
		LOG_INF("Start downloading firmware from %s/%s",
   2c4a8:	2303      	movs	r3, #3
   2c4aa:	f04f 0600 	mov.w	r6, #0
   2c4ae:	4821      	ldr	r0, [pc, #132]	; (2c534 <aws_fota_mqtt_evt_handler+0x344>)
   2c4b0:	f363 0607 	bfi	r6, r3, #0, #8
		execution_state = AWS_JOBS_IN_PROGRESS;
   2c4b4:	f889 8000 	strb.w	r8, [r9]
		LOG_INF("Start downloading firmware from %s/%s",
   2c4b8:	f010 f8f5 	bl	3c6a6 <log_strdup>
   2c4bc:	4607      	mov	r7, r0
   2c4be:	482d      	ldr	r0, [pc, #180]	; (2c574 <aws_fota_mqtt_evt_handler+0x384>)
   2c4c0:	f010 f8f1 	bl	3c6a6 <log_strdup>
   2c4c4:	f364 168f 	bfi	r6, r4, #6, #10
   2c4c8:	4603      	mov	r3, r0
   2c4ca:	463a      	mov	r2, r7
   2c4cc:	492a      	ldr	r1, [pc, #168]	; (2c578 <aws_fota_mqtt_evt_handler+0x388>)
   2c4ce:	4630      	mov	r0, r6
   2c4d0:	f010 f8d7 	bl	3c682 <log_string_sync>
		err = fota_download_start(hostname, file_path);
   2c4d4:	4927      	ldr	r1, [pc, #156]	; (2c574 <aws_fota_mqtt_evt_handler+0x384>)
   2c4d6:	4817      	ldr	r0, [pc, #92]	; (2c534 <aws_fota_mqtt_evt_handler+0x344>)
   2c4d8:	f7ff fb58 	bl	2bb8c <fota_download_start>
		if (err) {
   2c4dc:	4607      	mov	r7, r0
   2c4de:	2800      	cmp	r0, #0
   2c4e0:	f43f af5f 	beq.w	2c3a2 <aws_fota_mqtt_evt_handler+0x1b2>
			LOG_ERR("Error (%d) when trying to start firmware "
   2c4e4:	f04f 0000 	mov.w	r0, #0
   2c4e8:	2301      	movs	r3, #1
   2c4ea:	f363 0007 	bfi	r0, r3, #0, #8
   2c4ee:	f364 108f 	bfi	r0, r4, #6, #10
   2c4f2:	463a      	mov	r2, r7
   2c4f4:	4921      	ldr	r1, [pc, #132]	; (2c57c <aws_fota_mqtt_evt_handler+0x38c>)
   2c4f6:	e7af      	b.n	2c458 <aws_fota_mqtt_evt_handler+0x268>
   2c4f8:	2002b354 	.word	0x2002b354
   2c4fc:	000402cc 	.word	0x000402cc
   2c500:	000402ec 	.word	0x000402ec
   2c504:	00045557 	.word	0x00045557
   2c508:	2002b17f 	.word	0x2002b17f
   2c50c:	00045580 	.word	0x00045580
   2c510:	00045586 	.word	0x00045586
   2c514:	00043121 	.word	0x00043121
   2c518:	00044abb 	.word	0x00044abb
   2c51c:	2002b92f 	.word	0x2002b92f
   2c520:	000457bc 	.word	0x000457bc
   2c524:	0004552c 	.word	0x0004552c
   2c528:	000455ac 	.word	0x000455ac
   2c52c:	000455c3 	.word	0x000455c3
   2c530:	000455e1 	.word	0x000455e1
   2c534:	2002b214 	.word	0x2002b214
   2c538:	2002b313 	.word	0x2002b313
   2c53c:	2002b3e9 	.word	0x2002b3e9
   2c540:	00045604 	.word	0x00045604
   2c544:	00045624 	.word	0x00045624
   2c548:	0004551a 	.word	0x0004551a
   2c54c:	0004563f 	.word	0x0004563f
   2c550:	20024888 	.word	0x20024888
   2c554:	0004565e 	.word	0x0004565e
   2c558:	0004566d 	.word	0x0004566d
   2c55c:	0004567e 	.word	0x0004567e
   2c560:	0004568f 	.word	0x0004568f
   2c564:	000456b1 	.word	0x000456b1
   2c568:	2002b17e 	.word	0x2002b17e
   2c56c:	20031752 	.word	0x20031752
   2c570:	20024890 	.word	0x20024890
   2c574:	2002b07f 	.word	0x2002b07f
   2c578:	000456da 	.word	0x000456da
   2c57c:	00045700 	.word	0x00045700
   2c580:	2002b07e 	.word	0x2002b07e
		   && fota_state == APPLY_UPDATE) {
   2c584:	f1b8 0f02 	cmp.w	r8, #2
   2c588:	f47f af0b 	bne.w	2c3a2 <aws_fota_mqtt_evt_handler+0x1b2>
		LOG_INF("Firmware download completed");
   2c58c:	2303      	movs	r3, #3
   2c58e:	f04f 0000 	mov.w	r0, #0
   2c592:	f363 0007 	bfi	r0, r3, #0, #8
   2c596:	f364 108f 	bfi	r0, r4, #6, #10
   2c59a:	4972      	ldr	r1, [pc, #456]	; (2c764 <aws_fota_mqtt_evt_handler+0x574>)
   2c59c:	f010 f871 	bl	3c682 <log_string_sync>
		err = update_job_execution(client, job_id,
   2c5a0:	4b71      	ldr	r3, [pc, #452]	; (2c768 <aws_fota_mqtt_evt_handler+0x578>)
   2c5a2:	f89a 2000 	ldrb.w	r2, [sl]
   2c5a6:	681b      	ldr	r3, [r3, #0]
   2c5a8:	4641      	mov	r1, r8
   2c5aa:	4630      	mov	r0, r6
		execution_state = AWS_JOBS_SUCCEEDED;
   2c5ac:	f889 8000 	strb.w	r8, [r9]
		err = update_job_execution(client, job_id,
   2c5b0:	f7ff fcf0 	bl	2bf94 <update_job_execution.constprop.0>
		if (err) {
   2c5b4:	4607      	mov	r7, r0
   2c5b6:	2800      	cmp	r0, #0
   2c5b8:	f43f aef3 	beq.w	2c3a2 <aws_fota_mqtt_evt_handler+0x1b2>
			LOG_ERR("Unable to update the job execution");
   2c5bc:	f04f 0000 	mov.w	r0, #0
   2c5c0:	2301      	movs	r3, #1
   2c5c2:	f363 0007 	bfi	r0, r3, #0, #8
   2c5c6:	f364 108f 	bfi	r0, r4, #6, #10
   2c5ca:	4968      	ldr	r1, [pc, #416]	; (2c76c <aws_fota_mqtt_evt_handler+0x57c>)
   2c5cc:	f010 f859 	bl	3c682 <log_string_sync>
		if (err < 0) {
   2c5d0:	2f00      	cmp	r7, #0
   2c5d2:	f6ff aec7 	blt.w	2c364 <aws_fota_mqtt_evt_handler+0x174>
		} else if (err == 1) {
   2c5d6:	2f01      	cmp	r7, #1
   2c5d8:	f47f aee3 	bne.w	2c3a2 <aws_fota_mqtt_evt_handler+0x1b2>
   2c5dc:	e61c      	b.n	2c218 <aws_fota_mqtt_evt_handler+0x28>
	} else if (execution_state == AWS_JOBS_SUCCEEDED
   2c5de:	2b02      	cmp	r3, #2
   2c5e0:	f47f aedf 	bne.w	2c3a2 <aws_fota_mqtt_evt_handler+0x1b2>
		   && fota_state == APPLY_UPDATE) {
   2c5e4:	f1b8 0f02 	cmp.w	r8, #2
   2c5e8:	f47f aedb 	bne.w	2c3a2 <aws_fota_mqtt_evt_handler+0x1b2>
		LOG_INF("Job document updated with SUCCEDED");
   2c5ec:	2303      	movs	r3, #3
   2c5ee:	f04f 0000 	mov.w	r0, #0
   2c5f2:	f363 0007 	bfi	r0, r3, #0, #8
   2c5f6:	f364 108f 	bfi	r0, r4, #6, #10
   2c5fa:	495d      	ldr	r1, [pc, #372]	; (2c770 <aws_fota_mqtt_evt_handler+0x580>)
   2c5fc:	f010 f841 	bl	3c682 <log_string_sync>
		LOG_INF("Ready to reboot");
   2c600:	2303      	movs	r3, #3
   2c602:	f04f 0000 	mov.w	r0, #0
   2c606:	f363 0007 	bfi	r0, r3, #0, #8
   2c60a:	f364 108f 	bfi	r0, r4, #6, #10
   2c60e:	4959      	ldr	r1, [pc, #356]	; (2c774 <aws_fota_mqtt_evt_handler+0x584>)
   2c610:	f010 f837 	bl	3c682 <log_string_sync>
		callback(AWS_FOTA_EVT_DONE);
   2c614:	4b58      	ldr	r3, [pc, #352]	; (2c778 <aws_fota_mqtt_evt_handler+0x588>)
   2c616:	4638      	mov	r0, r7
   2c618:	681b      	ldr	r3, [r3, #0]
   2c61a:	4798      	blx	r3
		if (err < 0) {
   2c61c:	e6c1      	b.n	2c3a2 <aws_fota_mqtt_evt_handler+0x1b2>
	} else if (doc_update_rejected) {
   2c61e:	9b05      	ldr	r3, [sp, #20]
   2c620:	2b00      	cmp	r3, #0
   2c622:	d03d      	beq.n	2c6a0 <aws_fota_mqtt_evt_handler+0x4b0>
		LOG_ERR("Job document update was rejected");
   2c624:	2301      	movs	r3, #1
   2c626:	f04f 0000 	mov.w	r0, #0
   2c62a:	f363 0007 	bfi	r0, r3, #0, #8
   2c62e:	f364 108f 	bfi	r0, r4, #6, #10
   2c632:	4952      	ldr	r1, [pc, #328]	; (2c77c <aws_fota_mqtt_evt_handler+0x58c>)
   2c634:	f010 f825 	bl	3c682 <log_string_sync>
	LOG_ERR("Job document update was rejected");
   2c638:	2301      	movs	r3, #1
   2c63a:	f04f 0000 	mov.w	r0, #0
   2c63e:	f363 0007 	bfi	r0, r3, #0, #8
   2c642:	f364 108f 	bfi	r0, r4, #6, #10
   2c646:	494d      	ldr	r1, [pc, #308]	; (2c77c <aws_fota_mqtt_evt_handler+0x58c>)
   2c648:	f010 f81b 	bl	3c682 <log_string_sync>
	execution_version_number--;
   2c64c:	4a4c      	ldr	r2, [pc, #304]	; (2c780 <aws_fota_mqtt_evt_handler+0x590>)
	int err = get_published_payload(client, payload_buf, payload_len);
   2c64e:	4641      	mov	r1, r8
	execution_version_number--;
   2c650:	6813      	ldr	r3, [r2, #0]
	int err = get_published_payload(client, payload_buf, payload_len);
   2c652:	4630      	mov	r0, r6
	execution_version_number--;
   2c654:	3b01      	subs	r3, #1
   2c656:	6013      	str	r3, [r2, #0]
	int err = get_published_payload(client, payload_buf, payload_len);
   2c658:	f7ff fdaa 	bl	2c1b0 <get_published_payload.constprop.1>
	if (err) {
   2c65c:	4607      	mov	r7, r0
   2c65e:	b148      	cbz	r0, 2c674 <aws_fota_mqtt_evt_handler+0x484>
		LOG_ERR("Error %d when getting the payload", err);
   2c660:	f04f 0000 	mov.w	r0, #0
   2c664:	2301      	movs	r3, #1
   2c666:	f363 0007 	bfi	r0, r3, #0, #8
   2c66a:	f364 108f 	bfi	r0, r4, #6, #10
   2c66e:	463a      	mov	r2, r7
   2c670:	4944      	ldr	r1, [pc, #272]	; (2c784 <aws_fota_mqtt_evt_handler+0x594>)
   2c672:	e6f1      	b.n	2c458 <aws_fota_mqtt_evt_handler+0x268>
	LOG_ERR("%s", log_strdup(payload_buf));
   2c674:	2301      	movs	r3, #1
   2c676:	f04f 0500 	mov.w	r5, #0
   2c67a:	4843      	ldr	r0, [pc, #268]	; (2c788 <aws_fota_mqtt_evt_handler+0x598>)
   2c67c:	f363 0507 	bfi	r5, r3, #0, #8
   2c680:	f010 f811 	bl	3c6a6 <log_strdup>
   2c684:	f364 158f 	bfi	r5, r4, #6, #10
   2c688:	4602      	mov	r2, r0
   2c68a:	4940      	ldr	r1, [pc, #256]	; (2c78c <aws_fota_mqtt_evt_handler+0x59c>)
   2c68c:	4628      	mov	r0, r5
   2c68e:	f00f fff8 	bl	3c682 <log_string_sync>
	callback(AWS_FOTA_EVT_ERROR);
   2c692:	4b39      	ldr	r3, [pc, #228]	; (2c778 <aws_fota_mqtt_evt_handler+0x588>)
   2c694:	2001      	movs	r0, #1
   2c696:	681b      	ldr	r3, [r3, #0]
   2c698:	4798      	blx	r3
	return -EFAULT;
   2c69a:	f06f 070d 	mvn.w	r7, #13
   2c69e:	e661      	b.n	2c364 <aws_fota_mqtt_evt_handler+0x174>
	LOG_INF("received an unhandled MQTT publish event on topic: %s",
   2c6a0:	2303      	movs	r3, #3
   2c6a2:	f04f 0500 	mov.w	r5, #0
   2c6a6:	4638      	mov	r0, r7
   2c6a8:	f363 0507 	bfi	r5, r3, #0, #8
   2c6ac:	f00f fffb 	bl	3c6a6 <log_strdup>
   2c6b0:	f364 158f 	bfi	r5, r4, #6, #10
   2c6b4:	4602      	mov	r2, r0
   2c6b6:	4936      	ldr	r1, [pc, #216]	; (2c790 <aws_fota_mqtt_evt_handler+0x5a0>)
   2c6b8:	4628      	mov	r0, r5
   2c6ba:	f00f ffe2 	bl	3c682 <log_string_sync>
   2c6be:	e5ab      	b.n	2c218 <aws_fota_mqtt_evt_handler+0x28>
		if (evt->result != 0) {
   2c6c0:	69ca      	ldr	r2, [r1, #28]
   2c6c2:	2a00      	cmp	r2, #0
   2c6c4:	f43f ada8 	beq.w	2c218 <aws_fota_mqtt_evt_handler+0x28>
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   2c6c8:	2301      	movs	r3, #1
   2c6ca:	f04f 0000 	mov.w	r0, #0
   2c6ce:	4931      	ldr	r1, [pc, #196]	; (2c794 <aws_fota_mqtt_evt_handler+0x5a4>)
   2c6d0:	f363 0007 	bfi	r0, r3, #0, #8
   2c6d4:	4b30      	ldr	r3, [pc, #192]	; (2c798 <aws_fota_mqtt_evt_handler+0x5a8>)
   2c6d6:	1a5b      	subs	r3, r3, r1
   2c6d8:	08db      	lsrs	r3, r3, #3
   2c6da:	f363 108f 	bfi	r0, r3, #6, #10
   2c6de:	492f      	ldr	r1, [pc, #188]	; (2c79c <aws_fota_mqtt_evt_handler+0x5ac>)
   2c6e0:	f00f ffcf 	bl	3c682 <log_string_sync>
		return 0;
   2c6e4:	2700      	movs	r7, #0
   2c6e6:	e63d      	b.n	2c364 <aws_fota_mqtt_evt_handler+0x174>
		if (evt->result != 0) {
   2c6e8:	69cf      	ldr	r7, [r1, #28]
   2c6ea:	2f00      	cmp	r7, #0
   2c6ec:	f47f ae3a 	bne.w	2c364 <aws_fota_mqtt_evt_handler+0x174>
		if (evt->param.suback.message_id == SUBSCRIBE_NOTIFY_NEXT) {
   2c6f0:	888b      	ldrh	r3, [r1, #4]
   2c6f2:	f5b3 6f04 	cmp.w	r3, #2112	; 0x840
   2c6f6:	d113      	bne.n	2c720 <aws_fota_mqtt_evt_handler+0x530>
			LOG_INF("subscribed to notify-next topic");
   2c6f8:	2303      	movs	r3, #3
   2c6fa:	f04f 0000 	mov.w	r0, #0
   2c6fe:	4a25      	ldr	r2, [pc, #148]	; (2c794 <aws_fota_mqtt_evt_handler+0x5a4>)
   2c700:	f363 0007 	bfi	r0, r3, #0, #8
   2c704:	4b24      	ldr	r3, [pc, #144]	; (2c798 <aws_fota_mqtt_evt_handler+0x5a8>)
   2c706:	4926      	ldr	r1, [pc, #152]	; (2c7a0 <aws_fota_mqtt_evt_handler+0x5b0>)
   2c708:	1a9b      	subs	r3, r3, r2
   2c70a:	08db      	lsrs	r3, r3, #3
   2c70c:	f363 108f 	bfi	r0, r3, #6, #10
   2c710:	f00f ffb7 	bl	3c682 <log_string_sync>
			err = aws_jobs_get_job_execution(client, "$next",
   2c714:	4a23      	ldr	r2, [pc, #140]	; (2c7a4 <aws_fota_mqtt_evt_handler+0x5b4>)
   2c716:	4924      	ldr	r1, [pc, #144]	; (2c7a8 <aws_fota_mqtt_evt_handler+0x5b8>)
   2c718:	4630      	mov	r0, r6
   2c71a:	f7ff fc25 	bl	2bf68 <aws_jobs_get_job_execution>
   2c71e:	e64c      	b.n	2c3ba <aws_fota_mqtt_evt_handler+0x1ca>
		if (evt->param.suback.message_id == SUBSCRIBE_GET) {
   2c720:	f640 0241 	movw	r2, #2113	; 0x841
   2c724:	4293      	cmp	r3, r2
   2c726:	d10c      	bne.n	2c742 <aws_fota_mqtt_evt_handler+0x552>
			LOG_INF("subscribed to get topic");
   2c728:	2303      	movs	r3, #3
   2c72a:	f04f 0000 	mov.w	r0, #0
   2c72e:	4a19      	ldr	r2, [pc, #100]	; (2c794 <aws_fota_mqtt_evt_handler+0x5a4>)
   2c730:	f363 0007 	bfi	r0, r3, #0, #8
   2c734:	4b18      	ldr	r3, [pc, #96]	; (2c798 <aws_fota_mqtt_evt_handler+0x5a8>)
   2c736:	491d      	ldr	r1, [pc, #116]	; (2c7ac <aws_fota_mqtt_evt_handler+0x5bc>)
   2c738:	1a9b      	subs	r3, r3, r2
   2c73a:	08db      	lsrs	r3, r3, #3
   2c73c:	f363 108f 	bfi	r0, r3, #6, #10
   2c740:	e57d      	b.n	2c23e <aws_fota_mqtt_evt_handler+0x4e>
		if ((fota_state == DOWNLOAD_FIRMWARE) &&
   2c742:	4a1b      	ldr	r2, [pc, #108]	; (2c7b0 <aws_fota_mqtt_evt_handler+0x5c0>)
   2c744:	7812      	ldrb	r2, [r2, #0]
   2c746:	2a01      	cmp	r2, #1
   2c748:	f47f ad66 	bne.w	2c218 <aws_fota_mqtt_evt_handler+0x28>
   2c74c:	f640 0143 	movw	r1, #2115	; 0x843
   2c750:	428b      	cmp	r3, r1
   2c752:	f47f ad61 	bne.w	2c218 <aws_fota_mqtt_evt_handler+0x28>
			stored_progress = 0;
   2c756:	4b04      	ldr	r3, [pc, #16]	; (2c768 <aws_fota_mqtt_evt_handler+0x578>)
			err = update_job_execution(client, job_id,
   2c758:	4611      	mov	r1, r2
			stored_progress = 0;
   2c75a:	601f      	str	r7, [r3, #0]
			err = update_job_execution(client, job_id,
   2c75c:	463b      	mov	r3, r7
   2c75e:	f7ff fc19 	bl	2bf94 <update_job_execution.constprop.0>
   2c762:	e62a      	b.n	2c3ba <aws_fota_mqtt_evt_handler+0x1ca>
   2c764:	00045732 	.word	0x00045732
   2c768:	20024894 	.word	0x20024894
   2c76c:	0004574e 	.word	0x0004574e
   2c770:	00045771 	.word	0x00045771
   2c774:	00045794 	.word	0x00045794
   2c778:	2002488c 	.word	0x2002488c
   2c77c:	000457a4 	.word	0x000457a4
   2c780:	20024890 	.word	0x20024890
   2c784:	000457c5 	.word	0x000457c5
   2c788:	2002b3e9 	.word	0x2002b3e9
   2c78c:	00045f68 	.word	0x00045f68
   2c790:	000457e7 	.word	0x000457e7
   2c794:	000402cc 	.word	0x000402cc
   2c798:	000402ec 	.word	0x000402ec
   2c79c:	0004581d 	.word	0x0004581d
   2c7a0:	00045832 	.word	0x00045832
   2c7a4:	2002b17f 	.word	0x2002b17f
   2c7a8:	00045580 	.word	0x00045580
   2c7ac:	00045852 	.word	0x00045852
   2c7b0:	2002b17e 	.word	0x2002b17e

0002c7b4 <aws_fota_init>:

int aws_fota_init(struct mqtt_client *const client,
		  aws_fota_callback_t evt_handler)
{
   2c7b4:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || evt_handler == NULL) {
   2c7b6:	b1d0      	cbz	r0, 2c7ee <aws_fota_init+0x3a>
   2c7b8:	b1c9      	cbz	r1, 2c7ee <aws_fota_init+0x3a>
		return -EINVAL;
	}

	/* Store client to make it available in event handlers. */
	c = client;
   2c7ba:	4b0e      	ldr	r3, [pc, #56]	; (2c7f4 <aws_fota_init+0x40>)
   2c7bc:	6018      	str	r0, [r3, #0]
	callback = evt_handler;
   2c7be:	4b0e      	ldr	r3, [pc, #56]	; (2c7f8 <aws_fota_init+0x44>)

	err = fota_download_init(http_fota_handler);
   2c7c0:	480e      	ldr	r0, [pc, #56]	; (2c7fc <aws_fota_init+0x48>)
	callback = evt_handler;
   2c7c2:	6019      	str	r1, [r3, #0]
	err = fota_download_init(http_fota_handler);
   2c7c4:	f7ff fa10 	bl	2bbe8 <fota_download_init>
	if (err != 0) {
   2c7c8:	4604      	mov	r4, r0
   2c7ca:	b170      	cbz	r0, 2c7ea <aws_fota_init+0x36>
		LOG_ERR("fota_download_init error %d", err);
   2c7cc:	2301      	movs	r3, #1
   2c7ce:	f04f 0000 	mov.w	r0, #0
   2c7d2:	4a0b      	ldr	r2, [pc, #44]	; (2c800 <aws_fota_init+0x4c>)
   2c7d4:	f363 0007 	bfi	r0, r3, #0, #8
   2c7d8:	4b0a      	ldr	r3, [pc, #40]	; (2c804 <aws_fota_init+0x50>)
   2c7da:	490b      	ldr	r1, [pc, #44]	; (2c808 <aws_fota_init+0x54>)
   2c7dc:	1a9b      	subs	r3, r3, r2
   2c7de:	08db      	lsrs	r3, r3, #3
   2c7e0:	f363 108f 	bfi	r0, r3, #6, #10
   2c7e4:	4622      	mov	r2, r4
   2c7e6:	f00f ff4c 	bl	3c682 <log_string_sync>
		return err;
	}

	return 0;
}
   2c7ea:	4620      	mov	r0, r4
   2c7ec:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2c7ee:	f06f 0415 	mvn.w	r4, #21
   2c7f2:	e7fa      	b.n	2c7ea <aws_fota_init+0x36>
   2c7f4:	20024888 	.word	0x20024888
   2c7f8:	2002488c 	.word	0x2002488c
   2c7fc:	0002c0b5 	.word	0x0002c0b5
   2c800:	000402cc 	.word	0x000402cc
   2c804:	000402ec 	.word	0x000402ec
   2c808:	0004553b 	.word	0x0004553b

0002c80c <aws_fota_parse_DescribeJobExecution_rsp>:
					   u32_t payload_len,
					   char *job_id_buf,
					   char *hostname_buf,
					   char *file_path_buf,
					   int *execution_version_number)
{
   2c80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c810:	4617      	mov	r7, r2
   2c812:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   2c816:	4698      	mov	r8, r3
	if (job_document == NULL
   2c818:	2800      	cmp	r0, #0
   2c81a:	d065      	beq.n	2c8e8 <aws_fota_parse_DescribeJobExecution_rsp+0xdc>
	    || job_id_buf == NULL
   2c81c:	2a00      	cmp	r2, #0
   2c81e:	d063      	beq.n	2c8e8 <aws_fota_parse_DescribeJobExecution_rsp+0xdc>
	    || hostname_buf == NULL
   2c820:	2b00      	cmp	r3, #0
   2c822:	d061      	beq.n	2c8e8 <aws_fota_parse_DescribeJobExecution_rsp+0xdc>
	    || file_path_buf == NULL
   2c824:	2e00      	cmp	r6, #0
   2c826:	d05f      	beq.n	2c8e8 <aws_fota_parse_DescribeJobExecution_rsp+0xdc>
	    || execution_version_number == NULL) {
   2c828:	2d00      	cmp	r5, #0
   2c82a:	d05d      	beq.n	2c8e8 <aws_fota_parse_DescribeJobExecution_rsp+0xdc>
		return -EINVAL;
	}

	int ret;

	cJSON *json_data = cJSON_Parse(job_document);
   2c82c:	f011 f8c1 	bl	3d9b2 <cJSON_Parse>

	if (json_data == NULL) {
   2c830:	4682      	mov	sl, r0
   2c832:	b938      	cbnz	r0, 2c844 <aws_fota_parse_DescribeJobExecution_rsp+0x38>
		ret = -ENODATA;
   2c834:	f06f 043c 	mvn.w	r4, #60	; 0x3c
		goto cleanup;
	}

	ret = 1;
cleanup:
	cJSON_Delete(json_data);
   2c838:	4650      	mov	r0, sl
   2c83a:	f7f9 ffcf 	bl	267dc <cJSON_Delete>
	return ret;
}
   2c83e:	4620      	mov	r0, r4
   2c840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *execution = cJSON_GetObjectItemCaseSensitive(json_data,
   2c844:	492a      	ldr	r1, [pc, #168]	; (2c8f0 <aws_fota_parse_DescribeJobExecution_rsp+0xe4>)
   2c846:	f011 f8c6 	bl	3d9d6 <cJSON_GetObjectItemCaseSensitive>
	if (execution == NULL) {
   2c84a:	4604      	mov	r4, r0
   2c84c:	2800      	cmp	r0, #0
   2c84e:	d0f3      	beq.n	2c838 <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
	cJSON *job_id = cJSON_GetObjectItemCaseSensitive(execution, "jobId");
   2c850:	4928      	ldr	r1, [pc, #160]	; (2c8f4 <aws_fota_parse_DescribeJobExecution_rsp+0xe8>)
   2c852:	f011 f8c0 	bl	3d9d6 <cJSON_GetObjectItemCaseSensitive>
   2c856:	4681      	mov	r9, r0
	if (cJSON_GetStringValue(job_id) != NULL) {
   2c858:	f011 f90b 	bl	3da72 <cJSON_GetStringValue>
   2c85c:	2800      	cmp	r0, #0
   2c85e:	d0e9      	beq.n	2c834 <aws_fota_parse_DescribeJobExecution_rsp+0x28>
		strncpy_nullterm(job_id_buf, job_id->valuestring,
   2c860:	4638      	mov	r0, r7
   2c862:	2241      	movs	r2, #65	; 0x41
   2c864:	f8d9 1010 	ldr.w	r1, [r9, #16]
   2c868:	f012 f845 	bl	3e8f6 <strncpy_nullterm>
	cJSON *job_data = cJSON_GetObjectItemCaseSensitive(execution,
   2c86c:	4922      	ldr	r1, [pc, #136]	; (2c8f8 <aws_fota_parse_DescribeJobExecution_rsp+0xec>)
   2c86e:	4620      	mov	r0, r4
   2c870:	f011 f8b1 	bl	3d9d6 <cJSON_GetObjectItemCaseSensitive>
   2c874:	4607      	mov	r7, r0
	if (!cJSON_IsObject(job_data)) {
   2c876:	f011 f903 	bl	3da80 <cJSON_IsObject>
   2c87a:	2800      	cmp	r0, #0
   2c87c:	d0da      	beq.n	2c834 <aws_fota_parse_DescribeJobExecution_rsp+0x28>
	cJSON *location = cJSON_GetObjectItemCaseSensitive(job_data,
   2c87e:	4638      	mov	r0, r7
   2c880:	491e      	ldr	r1, [pc, #120]	; (2c8fc <aws_fota_parse_DescribeJobExecution_rsp+0xf0>)
   2c882:	f011 f8a8 	bl	3d9d6 <cJSON_GetObjectItemCaseSensitive>
   2c886:	4607      	mov	r7, r0
	if (!cJSON_IsObject(location)) {
   2c888:	f011 f8fa 	bl	3da80 <cJSON_IsObject>
   2c88c:	2800      	cmp	r0, #0
   2c88e:	d0d1      	beq.n	2c834 <aws_fota_parse_DescribeJobExecution_rsp+0x28>
	cJSON *hostname = cJSON_GetObjectItemCaseSensitive(location, "host");
   2c890:	491b      	ldr	r1, [pc, #108]	; (2c900 <aws_fota_parse_DescribeJobExecution_rsp+0xf4>)
   2c892:	4638      	mov	r0, r7
   2c894:	f011 f89f 	bl	3d9d6 <cJSON_GetObjectItemCaseSensitive>
	cJSON *path = cJSON_GetObjectItemCaseSensitive(location, "path");
   2c898:	491a      	ldr	r1, [pc, #104]	; (2c904 <aws_fota_parse_DescribeJobExecution_rsp+0xf8>)
	cJSON *hostname = cJSON_GetObjectItemCaseSensitive(location, "host");
   2c89a:	4681      	mov	r9, r0
	cJSON *path = cJSON_GetObjectItemCaseSensitive(location, "path");
   2c89c:	4638      	mov	r0, r7
   2c89e:	f011 f89a 	bl	3d9d6 <cJSON_GetObjectItemCaseSensitive>
   2c8a2:	4607      	mov	r7, r0
	if ((cJSON_GetStringValue(hostname) != NULL)
   2c8a4:	4648      	mov	r0, r9
   2c8a6:	f011 f8e4 	bl	3da72 <cJSON_GetStringValue>
   2c8aa:	2800      	cmp	r0, #0
   2c8ac:	d0c2      	beq.n	2c834 <aws_fota_parse_DescribeJobExecution_rsp+0x28>
	   && (cJSON_GetStringValue(path) != NULL)) {
   2c8ae:	4638      	mov	r0, r7
   2c8b0:	f011 f8df 	bl	3da72 <cJSON_GetStringValue>
   2c8b4:	2800      	cmp	r0, #0
   2c8b6:	d0bd      	beq.n	2c834 <aws_fota_parse_DescribeJobExecution_rsp+0x28>
		strncpy_nullterm(hostname_buf, hostname->valuestring,
   2c8b8:	22ff      	movs	r2, #255	; 0xff
   2c8ba:	f8d9 1010 	ldr.w	r1, [r9, #16]
   2c8be:	4640      	mov	r0, r8
   2c8c0:	f012 f819 	bl	3e8f6 <strncpy_nullterm>
		strncpy_nullterm(file_path_buf, path->valuestring,
   2c8c4:	22ff      	movs	r2, #255	; 0xff
   2c8c6:	6939      	ldr	r1, [r7, #16]
   2c8c8:	4630      	mov	r0, r6
   2c8ca:	f012 f814 	bl	3e8f6 <strncpy_nullterm>
	cJSON *version_number = cJSON_GetObjectItemCaseSensitive(
   2c8ce:	4620      	mov	r0, r4
   2c8d0:	490d      	ldr	r1, [pc, #52]	; (2c908 <aws_fota_parse_DescribeJobExecution_rsp+0xfc>)
   2c8d2:	f011 f880 	bl	3d9d6 <cJSON_GetObjectItemCaseSensitive>
   2c8d6:	4604      	mov	r4, r0
	if (cJSON_IsNumber(version_number)) {
   2c8d8:	f011 f8bd 	bl	3da56 <cJSON_IsNumber>
   2c8dc:	2800      	cmp	r0, #0
   2c8de:	d0a9      	beq.n	2c834 <aws_fota_parse_DescribeJobExecution_rsp+0x28>
		*execution_version_number = version_number->valueint;
   2c8e0:	6963      	ldr	r3, [r4, #20]
	ret = 1;
   2c8e2:	2401      	movs	r4, #1
		*execution_version_number = version_number->valueint;
   2c8e4:	602b      	str	r3, [r5, #0]
	ret = 1;
   2c8e6:	e7a7      	b.n	2c838 <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
		return -EINVAL;
   2c8e8:	f06f 0415 	mvn.w	r4, #21
   2c8ec:	e7a7      	b.n	2c83e <aws_fota_parse_DescribeJobExecution_rsp+0x32>
   2c8ee:	bf00      	nop
   2c8f0:	00045767 	.word	0x00045767
   2c8f4:	00045a08 	.word	0x00045a08
   2c8f8:	00045a0e 	.word	0x00045a0e
   2c8fc:	00045a1a 	.word	0x00045a1a
   2c900:	00045106 	.word	0x00045106
   2c904:	00045a23 	.word	0x00045a23
   2c908:	00045a28 	.word	0x00045a28

0002c90c <dfu_target_img_type>:
LOG_MODULE_REGISTER(dfu_target, CONFIG_DFU_TARGET_LOG_LEVEL);

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
   2c90c:	b538      	push	{r3, r4, r5, lr}
   2c90e:	4605      	mov	r5, r0
   2c910:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT) &&
	    dfu_target_mcuboot_identify(buf)) {
   2c912:	f000 fc0b 	bl	2d12c <dfu_target_mcuboot_identify>
	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT) &&
   2c916:	b9a0      	cbnz	r0, 2c942 <dfu_target_img_type+0x36>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}

	if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
	    dfu_target_modem_identify(buf)) {
   2c918:	4628      	mov	r0, r5
   2c91a:	f000 f9b1 	bl	2cc80 <dfu_target_modem_identify>
	if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
   2c91e:	b990      	cbnz	r0, 2c946 <dfu_target_img_type+0x3a>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
	}

	if (len < MIN_SIZE_IDENTIFY_BUF) {
   2c920:	2c1f      	cmp	r4, #31
   2c922:	d912      	bls.n	2c94a <dfu_target_img_type+0x3e>
		return -EAGAIN;
	}

	LOG_ERR("No supported image type found");
   2c924:	2301      	movs	r3, #1
   2c926:	4a0a      	ldr	r2, [pc, #40]	; (2c950 <dfu_target_img_type+0x44>)
   2c928:	f363 0007 	bfi	r0, r3, #0, #8
   2c92c:	4b09      	ldr	r3, [pc, #36]	; (2c954 <dfu_target_img_type+0x48>)
   2c92e:	490a      	ldr	r1, [pc, #40]	; (2c958 <dfu_target_img_type+0x4c>)
   2c930:	1a9b      	subs	r3, r3, r2
   2c932:	08db      	lsrs	r3, r3, #3
   2c934:	f363 108f 	bfi	r0, r3, #6, #10
   2c938:	f00f fea3 	bl	3c682 <log_string_sync>
	return -ENOTSUP;
   2c93c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2c940:	bd38      	pop	{r3, r4, r5, pc}
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   2c942:	2001      	movs	r0, #1
   2c944:	e7fc      	b.n	2c940 <dfu_target_img_type+0x34>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   2c946:	2002      	movs	r0, #2
   2c948:	e7fa      	b.n	2c940 <dfu_target_img_type+0x34>
		return -EAGAIN;
   2c94a:	f06f 000a 	mvn.w	r0, #10
   2c94e:	e7f7      	b.n	2c940 <dfu_target_img_type+0x34>
   2c950:	000402cc 	.word	0x000402cc
   2c954:	00040314 	.word	0x00040314
   2c958:	00045a54 	.word	0x00045a54

0002c95c <dfu_target_init>:

int dfu_target_init(int img_type, size_t file_size, dfu_target_callback_t cb)
{
	const struct dfu_target *new_target = NULL;

	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT) &&
   2c95c:	2801      	cmp	r0, #1
{
   2c95e:	b570      	push	{r4, r5, r6, lr}
   2c960:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT) &&
   2c962:	d00f      	beq.n	2c984 <dfu_target_init+0x28>
	    img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
		new_target = &dfu_target_mcuboot;
	} else if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
   2c964:	2802      	cmp	r0, #2
   2c966:	d10f      	bne.n	2c988 <dfu_target_init+0x2c>
		   img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
		new_target = &dfu_target_modem;
   2c968:	4b11      	ldr	r3, [pc, #68]	; (2c9b0 <dfu_target_init+0x54>)
	/* The user is re-initializing with an previously aborted target.
	 * Avoid re-initializing generally to ensure that the download can
	 * continue where it left off. Re-initializing is required for modem
	 * upgrades to re-open the DFU socket that is closed on abort.
	 */
	if (new_target == current_target
   2c96a:	4c12      	ldr	r4, [pc, #72]	; (2c9b4 <dfu_target_init+0x58>)
   2c96c:	6821      	ldr	r1, [r4, #0]
   2c96e:	428b      	cmp	r3, r1
   2c970:	d101      	bne.n	2c976 <dfu_target_init+0x1a>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   2c972:	2802      	cmp	r0, #2
   2c974:	d119      	bne.n	2c9aa <dfu_target_init+0x4e>
		return 0;
	}

	current_target = new_target;
   2c976:	6023      	str	r3, [r4, #0]

	return current_target->init(file_size, cb);
   2c978:	4628      	mov	r0, r5
}
   2c97a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return current_target->init(file_size, cb);
   2c97e:	681b      	ldr	r3, [r3, #0]
   2c980:	4611      	mov	r1, r2
   2c982:	4718      	bx	r3
		new_target = &dfu_target_mcuboot;
   2c984:	4b0c      	ldr	r3, [pc, #48]	; (2c9b8 <dfu_target_init+0x5c>)
   2c986:	e7f0      	b.n	2c96a <dfu_target_init+0xe>
		LOG_ERR("Unknown image type");
   2c988:	2301      	movs	r3, #1
   2c98a:	f04f 0000 	mov.w	r0, #0
   2c98e:	4a0b      	ldr	r2, [pc, #44]	; (2c9bc <dfu_target_init+0x60>)
   2c990:	f363 0007 	bfi	r0, r3, #0, #8
   2c994:	4b0a      	ldr	r3, [pc, #40]	; (2c9c0 <dfu_target_init+0x64>)
   2c996:	490b      	ldr	r1, [pc, #44]	; (2c9c4 <dfu_target_init+0x68>)
   2c998:	1a9b      	subs	r3, r3, r2
   2c99a:	08db      	lsrs	r3, r3, #3
   2c99c:	f363 108f 	bfi	r0, r3, #6, #10
   2c9a0:	f00f fe6f 	bl	3c682 <log_string_sync>
		return -ENOTSUP;
   2c9a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2c9a8:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2c9aa:	2000      	movs	r0, #0
   2c9ac:	e7fc      	b.n	2c9a8 <dfu_target_init+0x4c>
   2c9ae:	bf00      	nop
   2c9b0:	00040cb4 	.word	0x00040cb4
   2c9b4:	20024898 	.word	0x20024898
   2c9b8:	00040ca4 	.word	0x00040ca4
   2c9bc:	000402cc 	.word	0x000402cc
   2c9c0:	00040314 	.word	0x00040314
   2c9c4:	00045a72 	.word	0x00045a72

0002c9c8 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   2c9c8:	4b03      	ldr	r3, [pc, #12]	; (2c9d8 <dfu_target_offset_get+0x10>)
   2c9ca:	681b      	ldr	r3, [r3, #0]
   2c9cc:	b10b      	cbz	r3, 2c9d2 <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   2c9ce:	685b      	ldr	r3, [r3, #4]
   2c9d0:	4718      	bx	r3
}
   2c9d2:	f06f 000c 	mvn.w	r0, #12
   2c9d6:	4770      	bx	lr
   2c9d8:	20024898 	.word	0x20024898

0002c9dc <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   2c9dc:	4b04      	ldr	r3, [pc, #16]	; (2c9f0 <dfu_target_write+0x14>)
   2c9de:	681b      	ldr	r3, [r3, #0]
   2c9e0:	b113      	cbz	r3, 2c9e8 <dfu_target_write+0xc>
   2c9e2:	b108      	cbz	r0, 2c9e8 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   2c9e4:	689b      	ldr	r3, [r3, #8]
   2c9e6:	4718      	bx	r3
}
   2c9e8:	f06f 000c 	mvn.w	r0, #12
   2c9ec:	4770      	bx	lr
   2c9ee:	bf00      	nop
   2c9f0:	20024898 	.word	0x20024898

0002c9f4 <dfu_target_done>:

int dfu_target_done(bool successful)
{
   2c9f4:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   2c9f6:	4d0f      	ldr	r5, [pc, #60]	; (2ca34 <dfu_target_done+0x40>)
{
   2c9f8:	4606      	mov	r6, r0
	if (current_target == NULL) {
   2c9fa:	682b      	ldr	r3, [r5, #0]
   2c9fc:	b1bb      	cbz	r3, 2ca2e <dfu_target_done+0x3a>
		return -EACCES;
	}

	err = current_target->done(successful);
   2c9fe:	68db      	ldr	r3, [r3, #12]
   2ca00:	4798      	blx	r3
	if (err != 0) {
   2ca02:	4604      	mov	r4, r0
   2ca04:	b178      	cbz	r0, 2ca26 <dfu_target_done+0x32>
		LOG_ERR("Unable to clean up dfu_target");
   2ca06:	2301      	movs	r3, #1
   2ca08:	f04f 0000 	mov.w	r0, #0
   2ca0c:	4a0a      	ldr	r2, [pc, #40]	; (2ca38 <dfu_target_done+0x44>)
   2ca0e:	f363 0007 	bfi	r0, r3, #0, #8
   2ca12:	4b0a      	ldr	r3, [pc, #40]	; (2ca3c <dfu_target_done+0x48>)
   2ca14:	490a      	ldr	r1, [pc, #40]	; (2ca40 <dfu_target_done+0x4c>)
   2ca16:	1a9b      	subs	r3, r3, r2
   2ca18:	08db      	lsrs	r3, r3, #3
   2ca1a:	f363 108f 	bfi	r0, r3, #6, #10
   2ca1e:	f00f fe30 	bl	3c682 <log_string_sync>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   2ca22:	4620      	mov	r0, r4
   2ca24:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   2ca26:	2e00      	cmp	r6, #0
   2ca28:	d0fb      	beq.n	2ca22 <dfu_target_done+0x2e>
		current_target = NULL;
   2ca2a:	6028      	str	r0, [r5, #0]
   2ca2c:	e7f9      	b.n	2ca22 <dfu_target_done+0x2e>
		return -EACCES;
   2ca2e:	f06f 040c 	mvn.w	r4, #12
   2ca32:	e7f6      	b.n	2ca22 <dfu_target_done+0x2e>
   2ca34:	20024898 	.word	0x20024898
   2ca38:	000402cc 	.word	0x000402cc
   2ca3c:	00040314 	.word	0x00040314
   2ca40:	00045a36 	.word	0x00045a36

0002ca44 <getsockopt.constprop.2>:
static inline int getsockopt(int sock, int level, int optname,
   2ca44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   2ca48:	4c15      	ldr	r4, [pc, #84]	; (2caa0 <getsockopt.constprop.2+0x5c>)
static inline int getsockopt(int sock, int level, int optname,
   2ca4a:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   2ca4c:	6823      	ldr	r3, [r4, #0]
static inline int getsockopt(int sock, int level, int optname,
   2ca4e:	4605      	mov	r5, r0
   2ca50:	460e      	mov	r6, r1
   2ca52:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   2ca54:	b94b      	cbnz	r3, 2ca6a <getsockopt.constprop.2+0x26>
   2ca56:	4913      	ldr	r1, [pc, #76]	; (2caa4 <getsockopt.constprop.2+0x60>)
   2ca58:	4813      	ldr	r0, [pc, #76]	; (2caa8 <getsockopt.constprop.2+0x64>)
   2ca5a:	2360      	movs	r3, #96	; 0x60
   2ca5c:	4a13      	ldr	r2, [pc, #76]	; (2caac <getsockopt.constprop.2+0x68>)
   2ca5e:	f00f fdb9 	bl	3c5d4 <printk>
   2ca62:	2160      	movs	r1, #96	; 0x60
   2ca64:	4811      	ldr	r0, [pc, #68]	; (2caac <getsockopt.constprop.2+0x68>)
   2ca66:	f00f fdfb 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getsockopt);
   2ca6a:	6823      	ldr	r3, [r4, #0]
   2ca6c:	6a1b      	ldr	r3, [r3, #32]
   2ca6e:	b94b      	cbnz	r3, 2ca84 <getsockopt.constprop.2+0x40>
   2ca70:	490f      	ldr	r1, [pc, #60]	; (2cab0 <getsockopt.constprop.2+0x6c>)
   2ca72:	480d      	ldr	r0, [pc, #52]	; (2caa8 <getsockopt.constprop.2+0x64>)
   2ca74:	2361      	movs	r3, #97	; 0x61
   2ca76:	4a0d      	ldr	r2, [pc, #52]	; (2caac <getsockopt.constprop.2+0x68>)
   2ca78:	f00f fdac 	bl	3c5d4 <printk>
   2ca7c:	2161      	movs	r1, #97	; 0x61
   2ca7e:	480b      	ldr	r0, [pc, #44]	; (2caac <getsockopt.constprop.2+0x68>)
   2ca80:	f00f fdee 	bl	3c660 <assert_post_action>
	return socket_ops->getsockopt(sock, level, optname, optval, optlen);
   2ca84:	6823      	ldr	r3, [r4, #0]
   2ca86:	f8cd 8000 	str.w	r8, [sp]
   2ca8a:	6a1c      	ldr	r4, [r3, #32]
   2ca8c:	4632      	mov	r2, r6
   2ca8e:	463b      	mov	r3, r7
   2ca90:	f240 2103 	movw	r1, #515	; 0x203
   2ca94:	4628      	mov	r0, r5
   2ca96:	47a0      	blx	r4
}
   2ca98:	b002      	add	sp, #8
   2ca9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ca9e:	bf00      	nop
   2caa0:	20023a4c 	.word	0x20023a4c
   2caa4:	000418d1 	.word	0x000418d1
   2caa8:	00041757 	.word	0x00041757
   2caac:	000418a8 	.word	0x000418a8
   2cab0:	00045cf5 	.word	0x00045cf5

0002cab4 <get_modem_error>:
{
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   2cab4:	2200      	movs	r2, #0
   2cab6:	2304      	movs	r3, #4
{
   2cab8:	b513      	push	{r0, r1, r4, lr}
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   2caba:	480f      	ldr	r0, [pc, #60]	; (2caf8 <get_modem_error+0x44>)
	len = sizeof(err);
   2cabc:	e9cd 2300 	strd	r2, r3, [sp]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   2cac0:	2114      	movs	r1, #20
   2cac2:	446b      	add	r3, sp
   2cac4:	466a      	mov	r2, sp
   2cac6:	6800      	ldr	r0, [r0, #0]
   2cac8:	f7ff ffbc 	bl	2ca44 <getsockopt.constprop.2>
	if (rc) {
   2cacc:	b188      	cbz	r0, 2caf2 <get_modem_error+0x3e>
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   2cace:	2301      	movs	r3, #1
   2cad0:	f04f 0400 	mov.w	r4, #0
   2cad4:	4a09      	ldr	r2, [pc, #36]	; (2cafc <get_modem_error+0x48>)
   2cad6:	f363 0407 	bfi	r4, r3, #0, #8
   2cada:	4b09      	ldr	r3, [pc, #36]	; (2cb00 <get_modem_error+0x4c>)
   2cadc:	1a9b      	subs	r3, r3, r2
   2cade:	08db      	lsrs	r3, r3, #3
   2cae0:	f363 148f 	bfi	r4, r3, #6, #10
   2cae4:	f00f ffb2 	bl	3ca4c <__errno>
   2cae8:	4906      	ldr	r1, [pc, #24]	; (2cb04 <get_modem_error+0x50>)
   2caea:	6802      	ldr	r2, [r0, #0]
   2caec:	4620      	mov	r0, r4
   2caee:	f00f fdc8 	bl	3c682 <log_string_sync>
	}

	return err;
}
   2caf2:	9800      	ldr	r0, [sp, #0]
   2caf4:	b002      	add	sp, #8
   2caf6:	bd10      	pop	{r4, pc}
   2caf8:	200248a0 	.word	0x200248a0
   2cafc:	000402cc 	.word	0x000402cc
   2cb00:	00040324 	.word	0x00040324
   2cb04:	00045ccf 	.word	0x00045ccf

0002cb08 <setsockopt.constprop.3>:
static inline int setsockopt(int sock, int level, int optname,
   2cb08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   2cb0c:	4c15      	ldr	r4, [pc, #84]	; (2cb64 <setsockopt.constprop.3+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   2cb0e:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   2cb10:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   2cb12:	4605      	mov	r5, r0
   2cb14:	460e      	mov	r6, r1
   2cb16:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   2cb18:	b94b      	cbnz	r3, 2cb2e <setsockopt.constprop.3+0x26>
   2cb1a:	4913      	ldr	r1, [pc, #76]	; (2cb68 <setsockopt.constprop.3+0x60>)
   2cb1c:	4813      	ldr	r0, [pc, #76]	; (2cb6c <setsockopt.constprop.3+0x64>)
   2cb1e:	2357      	movs	r3, #87	; 0x57
   2cb20:	4a13      	ldr	r2, [pc, #76]	; (2cb70 <setsockopt.constprop.3+0x68>)
   2cb22:	f00f fd57 	bl	3c5d4 <printk>
   2cb26:	2157      	movs	r1, #87	; 0x57
   2cb28:	4811      	ldr	r0, [pc, #68]	; (2cb70 <setsockopt.constprop.3+0x68>)
   2cb2a:	f00f fd99 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   2cb2e:	6823      	ldr	r3, [r4, #0]
   2cb30:	69db      	ldr	r3, [r3, #28]
   2cb32:	b94b      	cbnz	r3, 2cb48 <setsockopt.constprop.3+0x40>
   2cb34:	490f      	ldr	r1, [pc, #60]	; (2cb74 <setsockopt.constprop.3+0x6c>)
   2cb36:	480d      	ldr	r0, [pc, #52]	; (2cb6c <setsockopt.constprop.3+0x64>)
   2cb38:	2358      	movs	r3, #88	; 0x58
   2cb3a:	4a0d      	ldr	r2, [pc, #52]	; (2cb70 <setsockopt.constprop.3+0x68>)
   2cb3c:	f00f fd4a 	bl	3c5d4 <printk>
   2cb40:	2158      	movs	r1, #88	; 0x58
   2cb42:	480b      	ldr	r0, [pc, #44]	; (2cb70 <setsockopt.constprop.3+0x68>)
   2cb44:	f00f fd8c 	bl	3c660 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   2cb48:	6823      	ldr	r3, [r4, #0]
   2cb4a:	f8cd 8000 	str.w	r8, [sp]
   2cb4e:	69dc      	ldr	r4, [r3, #28]
   2cb50:	4632      	mov	r2, r6
   2cb52:	463b      	mov	r3, r7
   2cb54:	f240 2103 	movw	r1, #515	; 0x203
   2cb58:	4628      	mov	r0, r5
   2cb5a:	47a0      	blx	r4
}
   2cb5c:	b002      	add	sp, #8
   2cb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cb62:	bf00      	nop
   2cb64:	20023a4c 	.word	0x20023a4c
   2cb68:	000418d1 	.word	0x000418d1
   2cb6c:	00041757 	.word	0x00041757
   2cb70:	000418a8 	.word	0x000418a8
   2cb74:	00043254 	.word	0x00043254

0002cb78 <delete_banked_modem_fw>:
}
#define SLEEP_TIME 1
static int delete_banked_modem_fw(void)
{
	int err;
	socklen_t len = sizeof(offset);
   2cb78:	2304      	movs	r3, #4
{
   2cb7a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
   2cb7e:	f04f 0000 	mov.w	r0, #0
	socklen_t len = sizeof(offset);
   2cb82:	9301      	str	r3, [sp, #4]
	LOG_INF("Deleting firmware image, this can take several minutes");
   2cb84:	2303      	movs	r3, #3
   2cb86:	4c35      	ldr	r4, [pc, #212]	; (2cc5c <delete_banked_modem_fw+0xe4>)
   2cb88:	f363 0007 	bfi	r0, r3, #0, #8
   2cb8c:	4b34      	ldr	r3, [pc, #208]	; (2cc60 <delete_banked_modem_fw+0xe8>)
   2cb8e:	4935      	ldr	r1, [pc, #212]	; (2cc64 <delete_banked_modem_fw+0xec>)
   2cb90:	1ae4      	subs	r4, r4, r3
   2cb92:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2cb96:	f364 108f 	bfi	r0, r4, #6, #10
   2cb9a:	f00f fd72 	bl	3c682 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   2cb9e:	2300      	movs	r3, #0
   2cba0:	4e31      	ldr	r6, [pc, #196]	; (2cc68 <delete_banked_modem_fw+0xf0>)
   2cba2:	461a      	mov	r2, r3
   2cba4:	2106      	movs	r1, #6
   2cba6:	6830      	ldr	r0, [r6, #0]
   2cba8:	f7ff ffae 	bl	2cb08 <setsockopt.constprop.3>
	if (err < 0) {
   2cbac:	2800      	cmp	r0, #0
   2cbae:	da12      	bge.n	2cbd6 <delete_banked_modem_fw+0x5e>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   2cbb0:	2301      	movs	r3, #1
   2cbb2:	f04f 0500 	mov.w	r5, #0
   2cbb6:	f363 0507 	bfi	r5, r3, #0, #8
   2cbba:	f00f ff47 	bl	3ca4c <__errno>
   2cbbe:	f364 158f 	bfi	r5, r4, #6, #10
   2cbc2:	6802      	ldr	r2, [r0, #0]
   2cbc4:	4929      	ldr	r1, [pc, #164]	; (2cc6c <delete_banked_modem_fw+0xf4>)
   2cbc6:	4628      	mov	r0, r5
   2cbc8:	f00f fd5b 	bl	3c682 <log_string_sync>
		return -EFAULT;
   2cbcc:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   2cbd0:	b002      	add	sp, #8
   2cbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   2cbd6:	253c      	movs	r5, #60	; 0x3c
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2cbd8:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2cc78 <delete_banked_modem_fw+0x100>
				callback(DFU_TARGET_EVT_TIMEOUT);
   2cbdc:	f8df 9090 	ldr.w	r9, [pc, #144]	; 2cc70 <delete_banked_modem_fw+0xf8>
					LOG_ERR("DFU error: %d", err);
   2cbe0:	f8df a098 	ldr.w	sl, [pc, #152]	; 2cc7c <delete_banked_modem_fw+0x104>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2cbe4:	ab01      	add	r3, sp, #4
   2cbe6:	4642      	mov	r2, r8
   2cbe8:	2107      	movs	r1, #7
   2cbea:	6830      	ldr	r0, [r6, #0]
   2cbec:	f7ff ff2a 	bl	2ca44 <getsockopt.constprop.2>
		if (err < 0) {
   2cbf0:	2800      	cmp	r0, #0
   2cbf2:	da23      	bge.n	2cc3c <delete_banked_modem_fw+0xc4>
			if (timeout < 0) {
   2cbf4:	2d00      	cmp	r5, #0
   2cbf6:	da04      	bge.n	2cc02 <delete_banked_modem_fw+0x8a>
				callback(DFU_TARGET_EVT_TIMEOUT);
   2cbf8:	f8d9 3000 	ldr.w	r3, [r9]
   2cbfc:	2000      	movs	r0, #0
   2cbfe:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   2cc00:	253c      	movs	r5, #60	; 0x3c
			if (errno == ENOEXEC) {
   2cc02:	f00f ff23 	bl	3ca4c <__errno>
   2cc06:	6803      	ldr	r3, [r0, #0]
   2cc08:	2b08      	cmp	r3, #8
   2cc0a:	d115      	bne.n	2cc38 <delete_banked_modem_fw+0xc0>
				err = get_modem_error();
   2cc0c:	f7ff ff52 	bl	2cab4 <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   2cc10:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   2cc14:	4602      	mov	r2, r0
				if (err != DFU_ERASE_PENDING) {
   2cc16:	d00b      	beq.n	2cc30 <delete_banked_modem_fw+0xb8>
					LOG_ERR("DFU error: %d", err);
   2cc18:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2cc1c:	f043 0301 	orr.w	r3, r3, #1
   2cc20:	f363 0707 	bfi	r7, r3, #0, #8
   2cc24:	f364 178f 	bfi	r7, r4, #6, #10
   2cc28:	4651      	mov	r1, sl
   2cc2a:	4638      	mov	r0, r7
   2cc2c:	f00f fd29 	bl	3c682 <log_string_sync>
	return z_impl_k_sleep(ms);
   2cc30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2cc34:	f00b fe20 	bl	38878 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   2cc38:	3d01      	subs	r5, #1
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2cc3a:	e7d3      	b.n	2cbe4 <delete_banked_modem_fw+0x6c>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   2cc3c:	4b0c      	ldr	r3, [pc, #48]	; (2cc70 <delete_banked_modem_fw+0xf8>)
   2cc3e:	2001      	movs	r0, #1
   2cc40:	681b      	ldr	r3, [r3, #0]
   2cc42:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   2cc44:	2303      	movs	r3, #3
   2cc46:	f04f 0000 	mov.w	r0, #0
   2cc4a:	f363 0007 	bfi	r0, r3, #0, #8
   2cc4e:	f364 108f 	bfi	r0, r4, #6, #10
   2cc52:	4908      	ldr	r1, [pc, #32]	; (2cc74 <delete_banked_modem_fw+0xfc>)
   2cc54:	f00f fd15 	bl	3c682 <log_string_sync>
	return 0;
   2cc58:	2000      	movs	r0, #0
   2cc5a:	e7b9      	b.n	2cbd0 <delete_banked_modem_fw+0x58>
   2cc5c:	00040324 	.word	0x00040324
   2cc60:	000402cc 	.word	0x000402cc
   2cc64:	00045a85 	.word	0x00045a85
   2cc68:	200248a0 	.word	0x200248a0
   2cc6c:	00045abc 	.word	0x00045abc
   2cc70:	2002489c 	.word	0x2002489c
   2cc74:	00045aec 	.word	0x00045aec
   2cc78:	200248a4 	.word	0x200248a4
   2cc7c:	00045ade 	.word	0x00045ade

0002cc80 <dfu_target_modem_identify>:
	return err;
}

bool dfu_target_modem_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   2cc80:	6840      	ldr	r0, [r0, #4]

}
   2cc82:	4b02      	ldr	r3, [pc, #8]	; (2cc8c <dfu_target_modem_identify+0xc>)
   2cc84:	1ac3      	subs	r3, r0, r3
   2cc86:	4258      	negs	r0, r3
   2cc88:	4158      	adcs	r0, r3
   2cc8a:	4770      	bx	lr
   2cc8c:	7544656d 	.word	0x7544656d

0002cc90 <dfu_target_modem_init>:

int dfu_target_modem_init(size_t file_size, dfu_target_callback_t cb)
{
	int err;
	size_t scratch_space;
	socklen_t len = sizeof(offset);
   2cc90:	2304      	movs	r3, #4
{
   2cc92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2cc96:	b099      	sub	sp, #100	; 0x64
	socklen_t len = sizeof(offset);
   2cc98:	9303      	str	r3, [sp, #12]
	__ASSERT_NO_MSG(socket_ops);
   2cc9a:	4c7c      	ldr	r4, [pc, #496]	; (2ce8c <dfu_target_modem_init+0x1fc>)

	callback = cb;
   2cc9c:	4b7c      	ldr	r3, [pc, #496]	; (2ce90 <dfu_target_modem_init+0x200>)
{
   2cc9e:	4607      	mov	r7, r0
	callback = cb;
   2cca0:	6019      	str	r1, [r3, #0]
   2cca2:	6823      	ldr	r3, [r4, #0]
   2cca4:	b94b      	cbnz	r3, 2ccba <dfu_target_modem_init+0x2a>
   2cca6:	497b      	ldr	r1, [pc, #492]	; (2ce94 <dfu_target_modem_init+0x204>)
   2cca8:	487b      	ldr	r0, [pc, #492]	; (2ce98 <dfu_target_modem_init+0x208>)
   2ccaa:	2319      	movs	r3, #25
   2ccac:	4a7b      	ldr	r2, [pc, #492]	; (2ce9c <dfu_target_modem_init+0x20c>)
   2ccae:	f00f fc91 	bl	3c5d4 <printk>
   2ccb2:	2119      	movs	r1, #25
   2ccb4:	4879      	ldr	r0, [pc, #484]	; (2ce9c <dfu_target_modem_init+0x20c>)
   2ccb6:	f00f fcd3 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   2ccba:	6823      	ldr	r3, [r4, #0]
   2ccbc:	681b      	ldr	r3, [r3, #0]
   2ccbe:	b94b      	cbnz	r3, 2ccd4 <dfu_target_modem_init+0x44>
   2ccc0:	4977      	ldr	r1, [pc, #476]	; (2cea0 <dfu_target_modem_init+0x210>)
   2ccc2:	4875      	ldr	r0, [pc, #468]	; (2ce98 <dfu_target_modem_init+0x208>)
   2ccc4:	231a      	movs	r3, #26
   2ccc6:	4a75      	ldr	r2, [pc, #468]	; (2ce9c <dfu_target_modem_init+0x20c>)
   2ccc8:	f00f fc84 	bl	3c5d4 <printk>
   2cccc:	211a      	movs	r1, #26
   2ccce:	4873      	ldr	r0, [pc, #460]	; (2ce9c <dfu_target_modem_init+0x20c>)
   2ccd0:	f00f fcc6 	bl	3c660 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   2ccd4:	6823      	ldr	r3, [r4, #0]
   2ccd6:	f240 2203 	movw	r2, #515	; 0x203
   2ccda:	681b      	ldr	r3, [r3, #0]
   2ccdc:	2101      	movs	r1, #1
   2ccde:	2067      	movs	r0, #103	; 0x67
   2cce0:	4798      	blx	r3
   2cce2:	4c70      	ldr	r4, [pc, #448]	; (2cea4 <dfu_target_modem_init+0x214>)
   2cce4:	4b70      	ldr	r3, [pc, #448]	; (2cea8 <dfu_target_modem_init+0x218>)
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   2cce6:	4e71      	ldr	r6, [pc, #452]	; (2ceac <dfu_target_modem_init+0x21c>)
   2cce8:	1ae4      	subs	r4, r4, r3
	if (fd < 0) {
   2ccea:	2800      	cmp	r0, #0
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   2ccec:	6030      	str	r0, [r6, #0]
	if (fd < 0) {
   2ccee:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2ccf2:	4635      	mov	r5, r6
		LOG_ERR("Failed to open Modem DFU socket.");
   2ccf4:	f04f 0000 	mov.w	r0, #0
	if (fd < 0) {
   2ccf8:	da37      	bge.n	2cd6a <dfu_target_modem_init+0xda>
		LOG_ERR("Failed to open Modem DFU socket.");
   2ccfa:	2301      	movs	r3, #1
   2ccfc:	f363 0007 	bfi	r0, r3, #0, #8
   2cd00:	f364 108f 	bfi	r0, r4, #6, #10
   2cd04:	496a      	ldr	r1, [pc, #424]	; (2ceb0 <dfu_target_modem_init+0x220>)
   2cd06:	f00f fcbc 	bl	3c682 <log_string_sync>
		return fd;
   2cd0a:	6830      	ldr	r0, [r6, #0]

	err = modem_dfu_socket_init();
	if (err < 0) {
   2cd0c:	2800      	cmp	r0, #0
   2cd0e:	db52      	blt.n	2cdb6 <dfu_target_modem_init+0x126>
		return err;
	}

	err = getsockopt(fd, SOL_DFU, SO_DFU_RESOURCES, &scratch_space, &len);
   2cd10:	ab03      	add	r3, sp, #12
   2cd12:	aa0e      	add	r2, sp, #56	; 0x38
   2cd14:	2102      	movs	r1, #2
   2cd16:	6828      	ldr	r0, [r5, #0]
   2cd18:	f7ff fe94 	bl	2ca44 <getsockopt.constprop.2>
	if (err < 0) {
   2cd1c:	2800      	cmp	r0, #0
   2cd1e:	da13      	bge.n	2cd48 <dfu_target_modem_init+0xb8>
		if (errno == ENOEXEC) {
   2cd20:	f00f fe94 	bl	3ca4c <__errno>
   2cd24:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   2cd26:	f04f 0600 	mov.w	r6, #0
		if (errno == ENOEXEC) {
   2cd2a:	2b08      	cmp	r3, #8
			LOG_ERR("Modem error: %d", get_modem_error());
   2cd2c:	f04f 0301 	mov.w	r3, #1
   2cd30:	f363 0607 	bfi	r6, r3, #0, #8
   2cd34:	f364 168f 	bfi	r6, r4, #6, #10
		if (errno == ENOEXEC) {
   2cd38:	d158      	bne.n	2cdec <dfu_target_modem_init+0x15c>
			LOG_ERR("Modem error: %d", get_modem_error());
   2cd3a:	f7ff febb 	bl	2cab4 <get_modem_error>
   2cd3e:	4602      	mov	r2, r0
   2cd40:	495c      	ldr	r1, [pc, #368]	; (2ceb4 <dfu_target_modem_init+0x224>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2cd42:	4630      	mov	r0, r6
   2cd44:	f00f fc9d 	bl	3c682 <log_string_sync>
		}
	}

	if (file_size > scratch_space) {
   2cd48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cd4a:	42bb      	cmp	r3, r7
   2cd4c:	d253      	bcs.n	2cdf6 <dfu_target_modem_init+0x166>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   2cd4e:	2201      	movs	r2, #1
   2cd50:	f04f 0000 	mov.w	r0, #0
   2cd54:	f362 0007 	bfi	r0, r2, #0, #8
   2cd58:	f364 108f 	bfi	r0, r4, #6, #10
   2cd5c:	463a      	mov	r2, r7
   2cd5e:	4956      	ldr	r1, [pc, #344]	; (2ceb8 <dfu_target_modem_init+0x228>)
   2cd60:	f00f fc8f 	bl	3c682 <log_string_sync>
			file_size, scratch_space);
		return -EFBIG;
   2cd64:	f06f 001a 	mvn.w	r0, #26
   2cd68:	e025      	b.n	2cdb6 <dfu_target_modem_init+0x126>
	LOG_INF("Modem DFU Socket created");
   2cd6a:	2303      	movs	r3, #3
	len = sizeof(version);
   2cd6c:	f04f 0824 	mov.w	r8, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   2cd70:	f363 0007 	bfi	r0, r3, #0, #8
   2cd74:	f364 108f 	bfi	r0, r4, #6, #10
   2cd78:	4950      	ldr	r1, [pc, #320]	; (2cebc <dfu_target_modem_init+0x22c>)
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2cd7a:	f10d 0914 	add.w	r9, sp, #20
	LOG_INF("Modem DFU Socket created");
   2cd7e:	f00f fc80 	bl	3c682 <log_string_sync>
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2cd82:	ab04      	add	r3, sp, #16
   2cd84:	464a      	mov	r2, r9
   2cd86:	2101      	movs	r1, #1
   2cd88:	6830      	ldr	r0, [r6, #0]
	len = sizeof(version);
   2cd8a:	f8cd 8010 	str.w	r8, [sp, #16]
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2cd8e:	f7ff fe59 	bl	2ca44 <getsockopt.constprop.2>
	if (err < 0) {
   2cd92:	2800      	cmp	r0, #0
   2cd94:	da12      	bge.n	2cdbc <dfu_target_modem_init+0x12c>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   2cd96:	2301      	movs	r3, #1
   2cd98:	f04f 0500 	mov.w	r5, #0
   2cd9c:	f363 0507 	bfi	r5, r3, #0, #8
   2cda0:	f00f fe54 	bl	3ca4c <__errno>
   2cda4:	f364 158f 	bfi	r5, r4, #6, #10
   2cda8:	6802      	ldr	r2, [r0, #0]
   2cdaa:	4945      	ldr	r1, [pc, #276]	; (2cec0 <dfu_target_modem_init+0x230>)
   2cdac:	4628      	mov	r0, r5
   2cdae:	f00f fc68 	bl	3c682 <log_string_sync>
		return -1;
   2cdb2:	f04f 30ff 	mov.w	r0, #4294967295
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
}
   2cdb6:	b019      	add	sp, #100	; 0x64
   2cdb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   2cdbc:	4643      	mov	r3, r8
   2cdbe:	4a41      	ldr	r2, [pc, #260]	; (2cec4 <dfu_target_modem_init+0x234>)
   2cdc0:	2125      	movs	r1, #37	; 0x25
   2cdc2:	f8cd 9000 	str.w	r9, [sp]
   2cdc6:	a80e      	add	r0, sp, #56	; 0x38
   2cdc8:	f00d fdae 	bl	3a928 <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   2cdcc:	f04f 0600 	mov.w	r6, #0
   2cdd0:	2303      	movs	r3, #3
   2cdd2:	a80e      	add	r0, sp, #56	; 0x38
   2cdd4:	f363 0607 	bfi	r6, r3, #0, #8
   2cdd8:	f00f fc65 	bl	3c6a6 <log_strdup>
   2cddc:	f364 168f 	bfi	r6, r4, #6, #10
   2cde0:	4602      	mov	r2, r0
   2cde2:	4939      	ldr	r1, [pc, #228]	; (2cec8 <dfu_target_modem_init+0x238>)
   2cde4:	4630      	mov	r0, r6
   2cde6:	f00f fc4c 	bl	3c682 <log_string_sync>
	if (err < 0) {
   2cdea:	e791      	b.n	2cd10 <dfu_target_modem_init+0x80>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2cdec:	f00f fe2e 	bl	3ca4c <__errno>
   2cdf0:	4936      	ldr	r1, [pc, #216]	; (2cecc <dfu_target_modem_init+0x23c>)
   2cdf2:	6802      	ldr	r2, [r0, #0]
   2cdf4:	e7a5      	b.n	2cd42 <dfu_target_modem_init+0xb2>
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2cdf6:	ab03      	add	r3, sp, #12
   2cdf8:	4a35      	ldr	r2, [pc, #212]	; (2ced0 <dfu_target_modem_init+0x240>)
   2cdfa:	2107      	movs	r1, #7
   2cdfc:	6828      	ldr	r0, [r5, #0]
   2cdfe:	f7ff fe21 	bl	2ca44 <getsockopt.constprop.2>
	if (err < 0) {
   2ce02:	2800      	cmp	r0, #0
   2ce04:	da13      	bge.n	2ce2e <dfu_target_modem_init+0x19e>
		if (errno == ENOEXEC) {
   2ce06:	f00f fe21 	bl	3ca4c <__errno>
   2ce0a:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   2ce0c:	f04f 0600 	mov.w	r6, #0
		if (errno == ENOEXEC) {
   2ce10:	2b08      	cmp	r3, #8
			LOG_ERR("Modem error: %d", get_modem_error());
   2ce12:	f04f 0301 	mov.w	r3, #1
   2ce16:	f363 0607 	bfi	r6, r3, #0, #8
   2ce1a:	f364 168f 	bfi	r6, r4, #6, #10
		if (errno == ENOEXEC) {
   2ce1e:	d10f      	bne.n	2ce40 <dfu_target_modem_init+0x1b0>
			LOG_ERR("Modem error: %d", get_modem_error());
   2ce20:	f7ff fe48 	bl	2cab4 <get_modem_error>
   2ce24:	4602      	mov	r2, r0
   2ce26:	4923      	ldr	r1, [pc, #140]	; (2ceb4 <dfu_target_modem_init+0x224>)
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2ce28:	4630      	mov	r0, r6
   2ce2a:	f00f fc2a 	bl	3c682 <log_string_sync>
	if (offset == DIRTY_IMAGE) {
   2ce2e:	4e28      	ldr	r6, [pc, #160]	; (2ced0 <dfu_target_modem_init+0x240>)
   2ce30:	6832      	ldr	r2, [r6, #0]
   2ce32:	f5b2 1f20 	cmp.w	r2, #2621440	; 0x280000
   2ce36:	d108      	bne.n	2ce4a <dfu_target_modem_init+0x1ba>
		delete_banked_modem_fw();
   2ce38:	f7ff fe9e 	bl	2cb78 <delete_banked_modem_fw>
	return 0;
   2ce3c:	2000      	movs	r0, #0
   2ce3e:	e7ba      	b.n	2cdb6 <dfu_target_modem_init+0x126>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2ce40:	f00f fe04 	bl	3ca4c <__errno>
   2ce44:	4921      	ldr	r1, [pc, #132]	; (2cecc <dfu_target_modem_init+0x23c>)
   2ce46:	6802      	ldr	r2, [r0, #0]
   2ce48:	e7ee      	b.n	2ce28 <dfu_target_modem_init+0x198>
	} else if (offset != 0) {
   2ce4a:	2a00      	cmp	r2, #0
   2ce4c:	d0f6      	beq.n	2ce3c <dfu_target_modem_init+0x1ac>
		LOG_INF("Setting offset to 0x%x", offset);
   2ce4e:	2303      	movs	r3, #3
   2ce50:	f04f 0000 	mov.w	r0, #0
   2ce54:	f363 0007 	bfi	r0, r3, #0, #8
   2ce58:	f364 108f 	bfi	r0, r4, #6, #10
   2ce5c:	491d      	ldr	r1, [pc, #116]	; (2ced4 <dfu_target_modem_init+0x244>)
   2ce5e:	f00f fc10 	bl	3c682 <log_string_sync>
		len = sizeof(offset);
   2ce62:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   2ce64:	4632      	mov	r2, r6
   2ce66:	2107      	movs	r1, #7
   2ce68:	6828      	ldr	r0, [r5, #0]
		len = sizeof(offset);
   2ce6a:	9303      	str	r3, [sp, #12]
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   2ce6c:	f7ff fe4c 	bl	2cb08 <setsockopt.constprop.3>
		if (err != 0) {
   2ce70:	2800      	cmp	r0, #0
   2ce72:	d0e3      	beq.n	2ce3c <dfu_target_modem_init+0x1ac>
			LOG_INF("Error while setting offset: %d", offset);
   2ce74:	2303      	movs	r3, #3
   2ce76:	f04f 0000 	mov.w	r0, #0
   2ce7a:	f363 0007 	bfi	r0, r3, #0, #8
   2ce7e:	f364 108f 	bfi	r0, r4, #6, #10
   2ce82:	6832      	ldr	r2, [r6, #0]
   2ce84:	4914      	ldr	r1, [pc, #80]	; (2ced8 <dfu_target_modem_init+0x248>)
   2ce86:	f00f fbfc 	bl	3c682 <log_string_sync>
   2ce8a:	e7d7      	b.n	2ce3c <dfu_target_modem_init+0x1ac>
   2ce8c:	20023a4c 	.word	0x20023a4c
   2ce90:	2002489c 	.word	0x2002489c
   2ce94:	000418d1 	.word	0x000418d1
   2ce98:	00041757 	.word	0x00041757
   2ce9c:	000418a8 	.word	0x000418a8
   2cea0:	00043196 	.word	0x00043196
   2cea4:	00040324 	.word	0x00040324
   2cea8:	000402cc 	.word	0x000402cc
   2ceac:	200248a0 	.word	0x200248a0
   2ceb0:	00045b91 	.word	0x00045b91
   2ceb4:	00045c15 	.word	0x00045c15
   2ceb8:	00045c42 	.word	0x00045c42
   2cebc:	00045bb2 	.word	0x00045bb2
   2cec0:	00045bcb 	.word	0x00045bcb
   2cec4:	00045bf5 	.word	0x00045bf5
   2cec8:	00045bfa 	.word	0x00045bfa
   2cecc:	00045c25 	.word	0x00045c25
   2ced0:	200248a4 	.word	0x200248a4
   2ced4:	00045c71 	.word	0x00045c71
   2ced8:	00045c88 	.word	0x00045c88

0002cedc <dfu_target_modem_offset_get>:

int dfu_target_modem_offset_get(size_t *out)
{
	*out = offset;
   2cedc:	4b02      	ldr	r3, [pc, #8]	; (2cee8 <dfu_target_modem_offset_get+0xc>)
   2cede:	681b      	ldr	r3, [r3, #0]
   2cee0:	6003      	str	r3, [r0, #0]
	return 0;
}
   2cee2:	2000      	movs	r0, #0
   2cee4:	4770      	bx	lr
   2cee6:	bf00      	nop
   2cee8:	200248a4 	.word	0x200248a4

0002ceec <dfu_target_modem_write>:

int dfu_target_modem_write(const void *const buf, size_t len)
{
   2ceec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = 0;
	int sent = 0;
	int modem_error = 0;

	sent = send(fd, buf, len, 0);
   2ceee:	4b31      	ldr	r3, [pc, #196]	; (2cfb4 <dfu_target_modem_write+0xc8>)
	__ASSERT_NO_MSG(socket_ops);
   2cef0:	4c31      	ldr	r4, [pc, #196]	; (2cfb8 <dfu_target_modem_write+0xcc>)
   2cef2:	681f      	ldr	r7, [r3, #0]
   2cef4:	6823      	ldr	r3, [r4, #0]
{
   2cef6:	4606      	mov	r6, r0
   2cef8:	460d      	mov	r5, r1
   2cefa:	b94b      	cbnz	r3, 2cf10 <dfu_target_modem_write+0x24>
   2cefc:	492f      	ldr	r1, [pc, #188]	; (2cfbc <dfu_target_modem_write+0xd0>)
   2cefe:	4830      	ldr	r0, [pc, #192]	; (2cfc0 <dfu_target_modem_write+0xd4>)
   2cf00:	237e      	movs	r3, #126	; 0x7e
   2cf02:	4a30      	ldr	r2, [pc, #192]	; (2cfc4 <dfu_target_modem_write+0xd8>)
   2cf04:	f00f fb66 	bl	3c5d4 <printk>
   2cf08:	217e      	movs	r1, #126	; 0x7e
   2cf0a:	482e      	ldr	r0, [pc, #184]	; (2cfc4 <dfu_target_modem_write+0xd8>)
   2cf0c:	f00f fba8 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   2cf10:	6823      	ldr	r3, [r4, #0]
   2cf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2cf14:	b94b      	cbnz	r3, 2cf2a <dfu_target_modem_write+0x3e>
   2cf16:	492c      	ldr	r1, [pc, #176]	; (2cfc8 <dfu_target_modem_write+0xdc>)
   2cf18:	4829      	ldr	r0, [pc, #164]	; (2cfc0 <dfu_target_modem_write+0xd4>)
   2cf1a:	237f      	movs	r3, #127	; 0x7f
   2cf1c:	4a29      	ldr	r2, [pc, #164]	; (2cfc4 <dfu_target_modem_write+0xd8>)
   2cf1e:	f00f fb59 	bl	3c5d4 <printk>
   2cf22:	217f      	movs	r1, #127	; 0x7f
   2cf24:	4827      	ldr	r0, [pc, #156]	; (2cfc4 <dfu_target_modem_write+0xd8>)
   2cf26:	f00f fb9b 	bl	3c660 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   2cf2a:	6823      	ldr	r3, [r4, #0]
   2cf2c:	462a      	mov	r2, r5
   2cf2e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2cf30:	4631      	mov	r1, r6
   2cf32:	2300      	movs	r3, #0
   2cf34:	4638      	mov	r0, r7
   2cf36:	47a0      	blx	r4
	if (sent > 0) {
   2cf38:	2800      	cmp	r0, #0
   2cf3a:	dd05      	ble.n	2cf48 <dfu_target_modem_write+0x5c>
		offset += len;
		return 0;
   2cf3c:	2000      	movs	r0, #0
		offset += len;
   2cf3e:	4a23      	ldr	r2, [pc, #140]	; (2cfcc <dfu_target_modem_write+0xe0>)
   2cf40:	6813      	ldr	r3, [r2, #0]
   2cf42:	441d      	add	r5, r3
   2cf44:	6015      	str	r5, [r2, #0]
			return 0;
		}
	default:
		return -EFAULT;
	}
}
   2cf46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (errno != ENOEXEC) {
   2cf48:	f00f fd80 	bl	3ca4c <__errno>
   2cf4c:	6803      	ldr	r3, [r0, #0]
   2cf4e:	2b08      	cmp	r3, #8
   2cf50:	d12c      	bne.n	2cfac <dfu_target_modem_write+0xc0>
	modem_error = get_modem_error();
   2cf52:	f7ff fdaf 	bl	2cab4 <get_modem_error>
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   2cf56:	f04f 0700 	mov.w	r7, #0
   2cf5a:	2301      	movs	r3, #1
   2cf5c:	4a1c      	ldr	r2, [pc, #112]	; (2cfd0 <dfu_target_modem_write+0xe4>)
   2cf5e:	f363 0707 	bfi	r7, r3, #0, #8
   2cf62:	4b1c      	ldr	r3, [pc, #112]	; (2cfd4 <dfu_target_modem_write+0xe8>)
	modem_error = get_modem_error();
   2cf64:	4604      	mov	r4, r0
   2cf66:	1a9b      	subs	r3, r3, r2
   2cf68:	08db      	lsrs	r3, r3, #3
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   2cf6a:	f363 178f 	bfi	r7, r3, #6, #10
   2cf6e:	f00f fd6d 	bl	3ca4c <__errno>
   2cf72:	4623      	mov	r3, r4
   2cf74:	6802      	ldr	r2, [r0, #0]
   2cf76:	4918      	ldr	r1, [pc, #96]	; (2cfd8 <dfu_target_modem_write+0xec>)
   2cf78:	4638      	mov	r0, r7
   2cf7a:	f00f fb82 	bl	3c682 <log_string_sync>
	switch (modem_error) {
   2cf7e:	f114 0f0b 	cmn.w	r4, #11
   2cf82:	d004      	beq.n	2cf8e <dfu_target_modem_write+0xa2>
   2cf84:	f114 0f09 	cmn.w	r4, #9
   2cf88:	d00d      	beq.n	2cfa6 <dfu_target_modem_write+0xba>
   2cf8a:	340e      	adds	r4, #14
   2cf8c:	d10e      	bne.n	2cfac <dfu_target_modem_write+0xc0>
		delete_banked_modem_fw();
   2cf8e:	f7ff fdf3 	bl	2cb78 <delete_banked_modem_fw>
		err = dfu_target_modem_write(buf, len);
   2cf92:	4629      	mov	r1, r5
   2cf94:	4630      	mov	r0, r6
   2cf96:	f7ff ffa9 	bl	2ceec <dfu_target_modem_write>
			return 0;
   2cf9a:	2800      	cmp	r0, #0
   2cf9c:	bfb4      	ite	lt
   2cf9e:	f06f 0015 	mvnlt.w	r0, #21
   2cfa2:	2000      	movge	r0, #0
   2cfa4:	e7cf      	b.n	2cf46 <dfu_target_modem_write+0x5a>
		return -EINVAL;
   2cfa6:	f06f 0015 	mvn.w	r0, #21
   2cfaa:	e7cc      	b.n	2cf46 <dfu_target_modem_write+0x5a>
		return -EFAULT;
   2cfac:	f06f 000d 	mvn.w	r0, #13
   2cfb0:	e7c9      	b.n	2cf46 <dfu_target_modem_write+0x5a>
   2cfb2:	bf00      	nop
   2cfb4:	200248a0 	.word	0x200248a0
   2cfb8:	20023a4c 	.word	0x20023a4c
   2cfbc:	000418d1 	.word	0x000418d1
   2cfc0:	00041757 	.word	0x00041757
   2cfc4:	000418a8 	.word	0x000418a8
   2cfc8:	000431ce 	.word	0x000431ce
   2cfcc:	200248a4 	.word	0x200248a4
   2cfd0:	000402cc 	.word	0x000402cc
   2cfd4:	00040324 	.word	0x00040324
   2cfd8:	00045ca7 	.word	0x00045ca7

0002cfdc <dfu_target_modem_done>:

int dfu_target_modem_done(bool successful)
{
   2cfdc:	b570      	push	{r4, r5, r6, lr}
   2cfde:	4b38      	ldr	r3, [pc, #224]	; (2d0c0 <dfu_target_modem_done+0xe4>)
   2cfe0:	4c38      	ldr	r4, [pc, #224]	; (2d0c4 <dfu_target_modem_done+0xe8>)
   2cfe2:	4e39      	ldr	r6, [pc, #228]	; (2d0c8 <dfu_target_modem_done+0xec>)
   2cfe4:	1ae4      	subs	r4, r4, r3
   2cfe6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	int err = 0;

	if (successful) {
   2cfea:	2800      	cmp	r0, #0
   2cfec:	d05b      	beq.n	2d0a6 <dfu_target_modem_done+0xca>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   2cfee:	2303      	movs	r3, #3
   2cff0:	f04f 0000 	mov.w	r0, #0
   2cff4:	f363 0007 	bfi	r0, r3, #0, #8
   2cff8:	f364 108f 	bfi	r0, r4, #6, #10
   2cffc:	4933      	ldr	r1, [pc, #204]	; (2d0cc <dfu_target_modem_done+0xf0>)
   2cffe:	f00f fb40 	bl	3c682 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   2d002:	2300      	movs	r3, #0
   2d004:	2104      	movs	r1, #4
   2d006:	461a      	mov	r2, r3
   2d008:	6830      	ldr	r0, [r6, #0]
   2d00a:	f7ff fd7d 	bl	2cb08 <setsockopt.constprop.3>
	if (err < 0) {
   2d00e:	1e05      	subs	r5, r0, #0
   2d010:	da12      	bge.n	2d038 <dfu_target_modem_done+0x5c>
		if (errno == ENOEXEC) {
   2d012:	f00f fd1b 	bl	3ca4c <__errno>
   2d016:	6803      	ldr	r3, [r0, #0]
   2d018:	2b08      	cmp	r3, #8
   2d01a:	d13a      	bne.n	2d092 <dfu_target_modem_done+0xb6>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   2d01c:	2301      	movs	r3, #1
   2d01e:	f04f 0500 	mov.w	r5, #0
   2d022:	f363 0507 	bfi	r5, r3, #0, #8
   2d026:	f7ff fd45 	bl	2cab4 <get_modem_error>
   2d02a:	f364 158f 	bfi	r5, r4, #6, #10
   2d02e:	4602      	mov	r2, r0
   2d030:	4628      	mov	r0, r5
   2d032:	4927      	ldr	r1, [pc, #156]	; (2d0d0 <dfu_target_modem_done+0xf4>)
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   2d034:	f00f fb25 	bl	3c682 <log_string_sync>
	__ASSERT_NO_MSG(socket_ops);
   2d038:	4d26      	ldr	r5, [pc, #152]	; (2d0d4 <dfu_target_modem_done+0xf8>)
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   2d03a:	6836      	ldr	r6, [r6, #0]
   2d03c:	682b      	ldr	r3, [r5, #0]
   2d03e:	b94b      	cbnz	r3, 2d054 <dfu_target_modem_done+0x78>
   2d040:	4925      	ldr	r1, [pc, #148]	; (2d0d8 <dfu_target_modem_done+0xfc>)
   2d042:	4826      	ldr	r0, [pc, #152]	; (2d0dc <dfu_target_modem_done+0x100>)
   2d044:	2321      	movs	r3, #33	; 0x21
   2d046:	4a26      	ldr	r2, [pc, #152]	; (2d0e0 <dfu_target_modem_done+0x104>)
   2d048:	f00f fac4 	bl	3c5d4 <printk>
   2d04c:	2121      	movs	r1, #33	; 0x21
   2d04e:	4824      	ldr	r0, [pc, #144]	; (2d0e0 <dfu_target_modem_done+0x104>)
   2d050:	f00f fb06 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2d054:	682b      	ldr	r3, [r5, #0]
   2d056:	685b      	ldr	r3, [r3, #4]
   2d058:	b94b      	cbnz	r3, 2d06e <dfu_target_modem_done+0x92>
   2d05a:	4922      	ldr	r1, [pc, #136]	; (2d0e4 <dfu_target_modem_done+0x108>)
   2d05c:	481f      	ldr	r0, [pc, #124]	; (2d0dc <dfu_target_modem_done+0x100>)
   2d05e:	2322      	movs	r3, #34	; 0x22
   2d060:	4a1f      	ldr	r2, [pc, #124]	; (2d0e0 <dfu_target_modem_done+0x104>)
   2d062:	f00f fab7 	bl	3c5d4 <printk>
   2d066:	2122      	movs	r1, #34	; 0x22
   2d068:	481d      	ldr	r0, [pc, #116]	; (2d0e0 <dfu_target_modem_done+0x104>)
   2d06a:	f00f faf9 	bl	3c660 <assert_post_action>
	return socket_ops->close(sock);
   2d06e:	682b      	ldr	r3, [r5, #0]
   2d070:	4630      	mov	r0, r6
   2d072:	685b      	ldr	r3, [r3, #4]
   2d074:	4798      	blx	r3
	if (err < 0) {
   2d076:	1e05      	subs	r5, r0, #0
   2d078:	da20      	bge.n	2d0bc <dfu_target_modem_done+0xe0>
		LOG_ERR("Failed to close modem DFU socket.");
   2d07a:	f04f 0000 	mov.w	r0, #0
   2d07e:	2301      	movs	r3, #1
   2d080:	f363 0007 	bfi	r0, r3, #0, #8
   2d084:	f364 108f 	bfi	r0, r4, #6, #10
   2d088:	4917      	ldr	r1, [pc, #92]	; (2d0e8 <dfu_target_modem_done+0x10c>)
   2d08a:	f00f fafa 	bl	3c682 <log_string_sync>
		return err;
	}

	return 0;
}
   2d08e:	4628      	mov	r0, r5
   2d090:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   2d092:	f04f 0000 	mov.w	r0, #0
   2d096:	2301      	movs	r3, #1
   2d098:	f363 0007 	bfi	r0, r3, #0, #8
   2d09c:	f364 108f 	bfi	r0, r4, #6, #10
   2d0a0:	462a      	mov	r2, r5
   2d0a2:	490b      	ldr	r1, [pc, #44]	; (2d0d0 <dfu_target_modem_done+0xf4>)
   2d0a4:	e7c6      	b.n	2d034 <dfu_target_modem_done+0x58>
		LOG_INF("Modem upgrade aborted.");
   2d0a6:	2303      	movs	r3, #3
   2d0a8:	f04f 0000 	mov.w	r0, #0
   2d0ac:	f363 0007 	bfi	r0, r3, #0, #8
   2d0b0:	f364 108f 	bfi	r0, r4, #6, #10
   2d0b4:	490d      	ldr	r1, [pc, #52]	; (2d0ec <dfu_target_modem_done+0x110>)
   2d0b6:	f00f fae4 	bl	3c682 <log_string_sync>
   2d0ba:	e7bd      	b.n	2d038 <dfu_target_modem_done+0x5c>
	return 0;
   2d0bc:	2500      	movs	r5, #0
   2d0be:	e7e6      	b.n	2d08e <dfu_target_modem_done+0xb2>
   2d0c0:	000402cc 	.word	0x000402cc
   2d0c4:	00040324 	.word	0x00040324
   2d0c8:	200248a0 	.word	0x200248a0
   2d0cc:	00045b05 	.word	0x00045b05
   2d0d0:	00045b34 	.word	0x00045b34
   2d0d4:	20023a4c 	.word	0x20023a4c
   2d0d8:	000418d1 	.word	0x000418d1
   2d0dc:	00041757 	.word	0x00041757
   2d0e0:	000418a8 	.word	0x000418a8
   2d0e4:	00043184 	.word	0x00043184
   2d0e8:	00045b6f 	.word	0x00045b6f
   2d0ec:	00045b58 	.word	0x00045b58

0002d0f0 <reset_flash_context>:

	return 0;
}

static void reset_flash_context(void)
{
   2d0f0:	b508      	push	{r3, lr}
	/* Need to set bytes_written to 0 */
	int err = flash_img_init(&flash_img);
   2d0f2:	480a      	ldr	r0, [pc, #40]	; (2d11c <reset_flash_context+0x2c>)
   2d0f4:	f00f fb9b 	bl	3c82e <flash_img_init>

	if (err) {
   2d0f8:	b178      	cbz	r0, 2d11a <reset_flash_context+0x2a>
		LOG_ERR("Unable to re-initialize flash_img");
   2d0fa:	2301      	movs	r3, #1
   2d0fc:	f04f 0000 	mov.w	r0, #0
   2d100:	4a07      	ldr	r2, [pc, #28]	; (2d120 <reset_flash_context+0x30>)
   2d102:	f363 0007 	bfi	r0, r3, #0, #8
   2d106:	4b07      	ldr	r3, [pc, #28]	; (2d124 <reset_flash_context+0x34>)
   2d108:	4907      	ldr	r1, [pc, #28]	; (2d128 <reset_flash_context+0x38>)
   2d10a:	1a9b      	subs	r3, r3, r2
   2d10c:	08db      	lsrs	r3, r3, #3
   2d10e:	f363 108f 	bfi	r0, r3, #6, #10
	}
	err = store_flash_img_context();
	if (err != 0) {
		LOG_ERR("Unable to reset write progress: %d", err);
	}
}
   2d112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Unable to re-initialize flash_img");
   2d116:	f00f bab4 	b.w	3c682 <log_string_sync>
}
   2d11a:	bd08      	pop	{r3, pc}
   2d11c:	200248a8 	.word	0x200248a8
   2d120:	000402cc 	.word	0x000402cc
   2d124:	0004031c 	.word	0x0004031c
   2d128:	00045dcf 	.word	0x00045dcf

0002d12c <dfu_target_mcuboot_identify>:
	return *((const u32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   2d12c:	6800      	ldr	r0, [r0, #0]
}
   2d12e:	4b02      	ldr	r3, [pc, #8]	; (2d138 <dfu_target_mcuboot_identify+0xc>)
   2d130:	1ac3      	subs	r3, r0, r3
   2d132:	4258      	negs	r0, r3
   2d134:	4158      	adcs	r0, r3
   2d136:	4770      	bx	lr
   2d138:	96f3b83d 	.word	0x96f3b83d

0002d13c <dfu_target_mcuboot_init>:
{
   2d13c:	b538      	push	{r3, r4, r5, lr}
   2d13e:	4605      	mov	r5, r0
	int err = flash_img_init(&flash_img);
   2d140:	4816      	ldr	r0, [pc, #88]	; (2d19c <dfu_target_mcuboot_init+0x60>)
   2d142:	f00f fb74 	bl	3c82e <flash_img_init>
	if (err != 0) {
   2d146:	4604      	mov	r4, r0
   2d148:	b180      	cbz	r0, 2d16c <dfu_target_mcuboot_init+0x30>
		LOG_ERR("flash_img_init error %d", err);
   2d14a:	2301      	movs	r3, #1
   2d14c:	f04f 0000 	mov.w	r0, #0
   2d150:	4a13      	ldr	r2, [pc, #76]	; (2d1a0 <dfu_target_mcuboot_init+0x64>)
   2d152:	f363 0007 	bfi	r0, r3, #0, #8
   2d156:	4b13      	ldr	r3, [pc, #76]	; (2d1a4 <dfu_target_mcuboot_init+0x68>)
   2d158:	4913      	ldr	r1, [pc, #76]	; (2d1a8 <dfu_target_mcuboot_init+0x6c>)
   2d15a:	1a9b      	subs	r3, r3, r2
   2d15c:	08db      	lsrs	r3, r3, #3
   2d15e:	f363 108f 	bfi	r0, r3, #6, #10
   2d162:	4622      	mov	r2, r4
   2d164:	f00f fa8d 	bl	3c682 <log_string_sync>
}
   2d168:	4620      	mov	r0, r4
   2d16a:	bd38      	pop	{r3, r4, r5, pc}
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   2d16c:	f5b5 2ff0 	cmp.w	r5, #491520	; 0x78000
   2d170:	d9fa      	bls.n	2d168 <dfu_target_mcuboot_init+0x2c>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   2d172:	2301      	movs	r3, #1
   2d174:	f04f 0000 	mov.w	r0, #0
   2d178:	4a09      	ldr	r2, [pc, #36]	; (2d1a0 <dfu_target_mcuboot_init+0x64>)
   2d17a:	f363 0007 	bfi	r0, r3, #0, #8
   2d17e:	4b09      	ldr	r3, [pc, #36]	; (2d1a4 <dfu_target_mcuboot_init+0x68>)
   2d180:	490a      	ldr	r1, [pc, #40]	; (2d1ac <dfu_target_mcuboot_init+0x70>)
   2d182:	1a9b      	subs	r3, r3, r2
   2d184:	08db      	lsrs	r3, r3, #3
   2d186:	f363 108f 	bfi	r0, r3, #6, #10
   2d18a:	462a      	mov	r2, r5
   2d18c:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
   2d190:	f00f fa77 	bl	3c682 <log_string_sync>
		return -EFBIG;
   2d194:	f06f 041a 	mvn.w	r4, #26
   2d198:	e7e6      	b.n	2d168 <dfu_target_mcuboot_init+0x2c>
   2d19a:	bf00      	nop
   2d19c:	200248a8 	.word	0x200248a8
   2d1a0:	000402cc 	.word	0x000402cc
   2d1a4:	0004031c 	.word	0x0004031c
   2d1a8:	00045d95 	.word	0x00045d95
   2d1ac:	00045c42 	.word	0x00045c42

0002d1b0 <dfu_target_mcuboot_offset_get>:
{
   2d1b0:	b510      	push	{r4, lr}
   2d1b2:	4604      	mov	r4, r0
	*out = flash_img_bytes_written(&flash_img);
   2d1b4:	4802      	ldr	r0, [pc, #8]	; (2d1c0 <dfu_target_mcuboot_offset_get+0x10>)
   2d1b6:	f00f fb37 	bl	3c828 <flash_img_bytes_written>
   2d1ba:	6020      	str	r0, [r4, #0]
}
   2d1bc:	2000      	movs	r0, #0
   2d1be:	bd10      	pop	{r4, pc}
   2d1c0:	200248a8 	.word	0x200248a8

0002d1c4 <dfu_target_mcuboot_write>:
{
   2d1c4:	b510      	push	{r4, lr}
	int err = flash_img_buffered_write(&flash_img, (u8_t *)buf, len, false);
   2d1c6:	460a      	mov	r2, r1
   2d1c8:	2300      	movs	r3, #0
   2d1ca:	4601      	mov	r1, r0
   2d1cc:	480a      	ldr	r0, [pc, #40]	; (2d1f8 <dfu_target_mcuboot_write+0x34>)
   2d1ce:	f00f fade 	bl	3c78e <flash_img_buffered_write>
	if (err != 0) {
   2d1d2:	4604      	mov	r4, r0
   2d1d4:	b170      	cbz	r0, 2d1f4 <dfu_target_mcuboot_write+0x30>
		LOG_ERR("flash_img_buffered_write error %d", err);
   2d1d6:	2301      	movs	r3, #1
   2d1d8:	f04f 0000 	mov.w	r0, #0
   2d1dc:	4a07      	ldr	r2, [pc, #28]	; (2d1fc <dfu_target_mcuboot_write+0x38>)
   2d1de:	f363 0007 	bfi	r0, r3, #0, #8
   2d1e2:	4b07      	ldr	r3, [pc, #28]	; (2d200 <dfu_target_mcuboot_write+0x3c>)
   2d1e4:	4907      	ldr	r1, [pc, #28]	; (2d204 <dfu_target_mcuboot_write+0x40>)
   2d1e6:	1a9b      	subs	r3, r3, r2
   2d1e8:	08db      	lsrs	r3, r3, #3
   2d1ea:	f363 108f 	bfi	r0, r3, #6, #10
   2d1ee:	4622      	mov	r2, r4
   2d1f0:	f00f fa47 	bl	3c682 <log_string_sync>
}
   2d1f4:	4620      	mov	r0, r4
   2d1f6:	bd10      	pop	{r4, pc}
   2d1f8:	200248a8 	.word	0x200248a8
   2d1fc:	000402cc 	.word	0x000402cc
   2d200:	0004031c 	.word	0x0004031c
   2d204:	00045dad 	.word	0x00045dad

0002d208 <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   2d208:	b538      	push	{r3, r4, r5, lr}
   2d20a:	4c20      	ldr	r4, [pc, #128]	; (2d28c <dfu_target_mcuboot_done+0x84>)
   2d20c:	4b20      	ldr	r3, [pc, #128]	; (2d290 <dfu_target_mcuboot_done+0x88>)
   2d20e:	1ae4      	subs	r4, r4, r3
   2d210:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	int err = 0;

	if (successful) {
   2d214:	b380      	cbz	r0, 2d278 <dfu_target_mcuboot_done+0x70>
		err = flash_img_buffered_write(&flash_img, NULL, 0, true);
   2d216:	2200      	movs	r2, #0
   2d218:	2301      	movs	r3, #1
   2d21a:	4611      	mov	r1, r2
   2d21c:	481d      	ldr	r0, [pc, #116]	; (2d294 <dfu_target_mcuboot_done+0x8c>)
   2d21e:	f00f fab6 	bl	3c78e <flash_img_buffered_write>
		if (err != 0) {
   2d222:	4605      	mov	r5, r0
   2d224:	b170      	cbz	r0, 2d244 <dfu_target_mcuboot_done+0x3c>
			LOG_ERR("flash_img_buffered_write error %d", err);
   2d226:	f04f 0000 	mov.w	r0, #0
   2d22a:	2301      	movs	r3, #1
   2d22c:	462a      	mov	r2, r5
   2d22e:	f363 0007 	bfi	r0, r3, #0, #8
   2d232:	4919      	ldr	r1, [pc, #100]	; (2d298 <dfu_target_mcuboot_done+0x90>)
   2d234:	f364 108f 	bfi	r0, r4, #6, #10
			return err;
		}

		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   2d238:	f00f fa23 	bl	3c682 <log_string_sync>
			reset_flash_context();
   2d23c:	f7ff ff58 	bl	2d0f0 <reset_flash_context>
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	reset_flash_context();
	return err;
}
   2d240:	4628      	mov	r0, r5
   2d242:	bd38      	pop	{r3, r4, r5, pc}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   2d244:	f7f6 f854 	bl	232f0 <boot_request_upgrade>
		if (err != 0) {
   2d248:	4605      	mov	r5, r0
			LOG_ERR("boot_request_upgrade error %d", err);
   2d24a:	f04f 0000 	mov.w	r0, #0
		if (err != 0) {
   2d24e:	b13d      	cbz	r5, 2d260 <dfu_target_mcuboot_done+0x58>
			LOG_ERR("boot_request_upgrade error %d", err);
   2d250:	2301      	movs	r3, #1
   2d252:	f363 0007 	bfi	r0, r3, #0, #8
   2d256:	f364 108f 	bfi	r0, r4, #6, #10
   2d25a:	462a      	mov	r2, r5
   2d25c:	490f      	ldr	r1, [pc, #60]	; (2d29c <dfu_target_mcuboot_done+0x94>)
   2d25e:	e7eb      	b.n	2d238 <dfu_target_mcuboot_done+0x30>
		LOG_INF("MCUBoot image upgrade scheduled. Reset the device to "
   2d260:	2303      	movs	r3, #3
   2d262:	490f      	ldr	r1, [pc, #60]	; (2d2a0 <dfu_target_mcuboot_done+0x98>)
   2d264:	f363 0007 	bfi	r0, r3, #0, #8
   2d268:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_INF("MCUBoot image upgrade aborted.");
   2d26c:	f00f fa09 	bl	3c682 <log_string_sync>
	return err;
   2d270:	2500      	movs	r5, #0
	reset_flash_context();
   2d272:	f7ff ff3d 	bl	2d0f0 <reset_flash_context>
	return err;
   2d276:	e7e3      	b.n	2d240 <dfu_target_mcuboot_done+0x38>
		LOG_INF("MCUBoot image upgrade aborted.");
   2d278:	f04f 0000 	mov.w	r0, #0
   2d27c:	2303      	movs	r3, #3
   2d27e:	f363 0007 	bfi	r0, r3, #0, #8
   2d282:	f364 108f 	bfi	r0, r4, #6, #10
   2d286:	4907      	ldr	r1, [pc, #28]	; (2d2a4 <dfu_target_mcuboot_done+0x9c>)
   2d288:	e7f0      	b.n	2d26c <dfu_target_mcuboot_done+0x64>
   2d28a:	bf00      	nop
   2d28c:	0004031c 	.word	0x0004031c
   2d290:	000402cc 	.word	0x000402cc
   2d294:	200248a8 	.word	0x200248a8
   2d298:	00045dad 	.word	0x00045dad
   2d29c:	00045d1d 	.word	0x00045d1d
   2d2a0:	00045d3b 	.word	0x00045d3b
   2d2a4:	00045d76 	.word	0x00045d76

0002d2a8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   2d2a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2d2ac:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   2d2ae:	4c21      	ldr	r4, [pc, #132]	; (2d334 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   2d2b0:	4e21      	ldr	r6, [pc, #132]	; (2d338 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2d2b2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   2d2b6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2d340 <check_ext_api_requests+0x98>
{
   2d2ba:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2d2bc:	45a8      	cmp	r8, r5
   2d2be:	d803      	bhi.n	2d2c8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   2d2c0:	2000      	movs	r0, #0
   2d2c2:	b005      	add	sp, #20
   2d2c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   2d2c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d2ca:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2d2ce:	681f      	ldr	r7, [r3, #0]
   2d2d0:	ab01      	add	r3, sp, #4
   2d2d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   2d2d6:	220c      	movs	r2, #12
   2d2d8:	4619      	mov	r1, r3
   2d2da:	4638      	mov	r0, r7
   2d2dc:	f011 fce7 	bl	3ecae <memcmp>
   2d2e0:	b990      	cbnz	r0, 2d308 <check_ext_api_requests+0x60>
   2d2e2:	b18f      	cbz	r7, 2d308 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2d2e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   2d2e6:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2d2e8:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   2d2ea:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2d2ec:	4291      	cmp	r1, r2
   2d2ee:	d10b      	bne.n	2d308 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   2d2f0:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   2d2f2:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   2d2f4:	4291      	cmp	r1, r2
   2d2f6:	d807      	bhi.n	2d308 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   2d2f8:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   2d2fa:	4291      	cmp	r1, r2
   2d2fc:	d904      	bls.n	2d308 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   2d2fe:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2d300:	695b      	ldr	r3, [r3, #20]
   2d302:	ea32 0303 	bics.w	r3, r2, r3
   2d306:	d00a      	beq.n	2d31e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   2d308:	6a27      	ldr	r7, [r4, #32]
   2d30a:	b167      	cbz	r7, 2d326 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   2d30c:	480b      	ldr	r0, [pc, #44]	; (2d33c <check_ext_api_requests+0x94>)
   2d30e:	f00f f961 	bl	3c5d4 <printk>
			k_panic();
   2d312:	4040      	eors	r0, r0
   2d314:	f380 8811 	msr	BASEPRI, r0
   2d318:	f04f 0004 	mov.w	r0, #4
   2d31c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   2d31e:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2d320:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   2d322:	441c      	add	r4, r3
   2d324:	e7ca      	b.n	2d2bc <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   2d326:	4648      	mov	r0, r9
   2d328:	f00f f954 	bl	3c5d4 <printk>
			*ext_api_req->ext_api = NULL;
   2d32c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d32e:	601f      	str	r7, [r3, #0]
   2d330:	e7f5      	b.n	2d31e <check_ext_api_requests+0x76>
   2d332:	bf00      	nop
   2d334:	0001c43c 	.word	0x0001c43c
   2d338:	00040420 	.word	0x00040420
   2d33c:	00045e04 	.word	0x00045e04
   2d340:	00045e2d 	.word	0x00045e2d

0002d344 <sensor_sim_channel_get>:

static int sensor_sim_channel_get(struct device *dev,
				  enum sensor_channel chan,
				  struct sensor_value *sample)
{
   2d344:	b538      	push	{r3, r4, r5, lr}
   2d346:	4614      	mov	r4, r2
	switch (chan) {
   2d348:	2910      	cmp	r1, #16
   2d34a:	d82f      	bhi.n	2d3ac <sensor_sim_channel_get+0x68>
   2d34c:	e8df f001 	tbb	[pc, r1]
   2d350:	18140d09 	.word	0x18140d09
   2d354:	2e2e2e2e 	.word	0x2e2e2e2e
   2d358:	2e2e2e2e 	.word	0x2e2e2e2e
   2d35c:	2e2c282e 	.word	0x2e2c282e
   2d360:	2a          	.byte	0x2a
   2d361:	00          	.byte	0x00
	case SENSOR_CHAN_ACCEL_X:
		double_to_sensor_value(accel_samples[0], sample);
   2d362:	4b14      	ldr	r3, [pc, #80]	; (2d3b4 <sensor_sim_channel_get+0x70>)
		break;
	case SENSOR_CHAN_HUMIDITY:
		double_to_sensor_value(humidity_sample, sample);
		break;
	case SENSOR_CHAN_PRESS:
		double_to_sensor_value(pressure_sample, sample);
   2d364:	e9d3 0100 	ldrd	r0, r1, [r3]
   2d368:	e002      	b.n	2d370 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[1], sample);
   2d36a:	4b12      	ldr	r3, [pc, #72]	; (2d3b4 <sensor_sim_channel_get+0x70>)
   2d36c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
		double_to_sensor_value(pressure_sample, sample);
   2d370:	f7f0 fa1a 	bl	1d7a8 <double_to_sensor_value>
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   2d374:	2000      	movs	r0, #0
}
   2d376:	bd38      	pop	{r3, r4, r5, pc}
		double_to_sensor_value(accel_samples[2], sample);
   2d378:	4b0e      	ldr	r3, [pc, #56]	; (2d3b4 <sensor_sim_channel_get+0x70>)
   2d37a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   2d37e:	e7f7      	b.n	2d370 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[0], sample);
   2d380:	4d0c      	ldr	r5, [pc, #48]	; (2d3b4 <sensor_sim_channel_get+0x70>)
   2d382:	e9d5 0100 	ldrd	r0, r1, [r5]
   2d386:	f7f0 fa0f 	bl	1d7a8 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[1], ++sample);
   2d38a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   2d38e:	f104 0208 	add.w	r2, r4, #8
   2d392:	f7f0 fa09 	bl	1d7a8 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[2], ++sample);
   2d396:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   2d39a:	f104 0210 	add.w	r2, r4, #16
   2d39e:	e7e7      	b.n	2d370 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(temp_sample, sample);
   2d3a0:	4b05      	ldr	r3, [pc, #20]	; (2d3b8 <sensor_sim_channel_get+0x74>)
   2d3a2:	e7df      	b.n	2d364 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(humidity_sample, sample);
   2d3a4:	4b05      	ldr	r3, [pc, #20]	; (2d3bc <sensor_sim_channel_get+0x78>)
   2d3a6:	e7dd      	b.n	2d364 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(pressure_sample, sample);
   2d3a8:	4b05      	ldr	r3, [pc, #20]	; (2d3c0 <sensor_sim_channel_get+0x7c>)
   2d3aa:	e7db      	b.n	2d364 <sensor_sim_channel_get+0x20>
		return -ENOTSUP;
   2d3ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d3b0:	e7e1      	b.n	2d376 <sensor_sim_channel_get+0x32>
   2d3b2:	bf00      	nop
   2d3b4:	20022a40 	.word	0x20022a40
   2d3b8:	20022d50 	.word	0x20022d50
   2d3bc:	20022a58 	.word	0x20022a58
   2d3c0:	20022a60 	.word	0x20022a60

0002d3c4 <sensor_sim_trigger_set>:
{
   2d3c4:	b508      	push	{r3, lr}
	struct sensor_sim_data *drv_data = dev->driver_data;
   2d3c6:	6883      	ldr	r3, [r0, #8]
	switch (trig->type) {
   2d3c8:	8808      	ldrh	r0, [r1, #0]
   2d3ca:	2801      	cmp	r0, #1
   2d3cc:	d104      	bne.n	2d3d8 <sensor_sim_trigger_set+0x14>
		drv_data->drdy_trigger = *trig;
   2d3ce:	6808      	ldr	r0, [r1, #0]
		drv_data->drdy_handler = handler;
   2d3d0:	631a      	str	r2, [r3, #48]	; 0x30
		drv_data->drdy_trigger = *trig;
   2d3d2:	6358      	str	r0, [r3, #52]	; 0x34
	int ret = 0;
   2d3d4:	2000      	movs	r0, #0
}
   2d3d6:	bd08      	pop	{r3, pc}
		LOG_ERR("Unsupported sensor trigger");
   2d3d8:	2301      	movs	r3, #1
   2d3da:	f04f 0000 	mov.w	r0, #0
   2d3de:	4a07      	ldr	r2, [pc, #28]	; (2d3fc <sensor_sim_trigger_set+0x38>)
   2d3e0:	f363 0007 	bfi	r0, r3, #0, #8
   2d3e4:	4b06      	ldr	r3, [pc, #24]	; (2d400 <sensor_sim_trigger_set+0x3c>)
   2d3e6:	4907      	ldr	r1, [pc, #28]	; (2d404 <sensor_sim_trigger_set+0x40>)
   2d3e8:	1a9b      	subs	r3, r3, r2
   2d3ea:	08db      	lsrs	r3, r3, #3
   2d3ec:	f363 108f 	bfi	r0, r3, #6, #10
   2d3f0:	f00f f947 	bl	3c682 <log_string_sync>
	return ret;
   2d3f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d3f8:	e7ed      	b.n	2d3d6 <sensor_sim_trigger_set+0x12>
   2d3fa:	bf00      	nop
   2d3fc:	000402cc 	.word	0x000402cc
   2d400:	000403d4 	.word	0x000403d4
   2d404:	00045e60 	.word	0x00045e60

0002d408 <generate_sine.constprop.2>:
static double generate_sine(double offset, double amplitude)
   2d408:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
   2d40a:	f011 fbd8 	bl	3ebbe <z_impl_k_uptime_get>
	return offset + amplitude * sin(time % 65535);
   2d40e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2d412:	fbb0 f3f3 	udiv	r3, r0, r3
   2d416:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
   2d41a:	1ac0      	subs	r0, r0, r3
   2d41c:	f7ef f952 	bl	1c6c4 <__aeabi_ui2d>
   2d420:	ec41 0b10 	vmov	d0, r0, r1
   2d424:	f7f0 faa8 	bl	1d978 <sin>
   2d428:	2200      	movs	r2, #0
   2d42a:	4b05      	ldr	r3, [pc, #20]	; (2d440 <generate_sine.constprop.2+0x38>)
   2d42c:	ec51 0b10 	vmov	r0, r1, d0
   2d430:	f7ef f9c2 	bl	1c7b8 <__aeabi_dmul>
   2d434:	2200      	movs	r2, #0
   2d436:	2300      	movs	r3, #0
   2d438:	f7ef f808 	bl	1c44c <__adddf3>
}
   2d43c:	bd08      	pop	{r3, pc}
   2d43e:	bf00      	nop
   2d440:	40340000 	.word	0x40340000

0002d444 <sensor_sim_init>:
{
   2d444:	b530      	push	{r4, r5, lr}
	struct sensor_sim_data *drv_data = dev->driver_data;
   2d446:	6885      	ldr	r5, [r0, #8]
{
   2d448:	b087      	sub	sp, #28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2d44a:	2400      	movs	r4, #0
   2d44c:	f06f 0305 	mvn.w	r3, #5
   2d450:	f44f 7200 	mov.w	r2, #512	; 0x200
   2d454:	f105 0138 	add.w	r1, r5, #56	; 0x38
   2d458:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2d45c:	e9cd 0400 	strd	r0, r4, [sp]
   2d460:	4b06      	ldr	r3, [pc, #24]	; (2d47c <sensor_sim_init+0x38>)
   2d462:	e9cd 4404 	strd	r4, r4, [sp, #16]
   2d466:	f505 700e 	add.w	r0, r5, #568	; 0x238
   2d46a:	f00b fbc3 	bl	38bf4 <z_impl_k_thread_create>
   2d46e:	f7f6 fbf1 	bl	23c54 <z_timer_cycle_get_32>
	srand(k_cycle_get_32());
   2d472:	f00d f9e9 	bl	3a848 <srand>
}
   2d476:	4620      	mov	r0, r4
   2d478:	b007      	add	sp, #28
   2d47a:	bd30      	pop	{r4, r5, pc}
   2d47c:	0003e929 	.word	0x0003e929

0002d480 <start>:
	return err;
}
#endif

static int start(struct device *dev)
{
   2d480:	b5f0      	push	{r4, r5, r6, r7, lr}
	int retval;
	struct gps_drv_data *drv_data = dev->driver_data;
	nrf_gnss_fix_retry_t    fix_retry    = 0;
   2d482:	2400      	movs	r4, #0
	nrf_gnss_fix_interval_t fix_interval = 1;
   2d484:	2301      	movs	r3, #1
{
   2d486:	b0a1      	sub	sp, #132	; 0x84
	struct gps_drv_data *drv_data = dev->driver_data;
   2d488:	6887      	ldr	r7, [r0, #8]
	char buf[50] = {0};
   2d48a:	2232      	movs	r2, #50	; 0x32
   2d48c:	4621      	mov	r1, r4
   2d48e:	a813      	add	r0, sp, #76	; 0x4c
	nrf_gnss_fix_interval_t fix_interval = 1;
   2d490:	f8ad 3012 	strh.w	r3, [sp, #18]
#endif
#ifdef CONFIG_NRF9160_GPS_NMEA_GLL
	nmea_mask |= NRF_GNSS_NMEA_GLL_MASK;
#endif
#ifdef CONFIG_NRF9160_GPS_NMEA_GGA
	nmea_mask |= NRF_GNSS_NMEA_GGA_MASK;
   2d494:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_gnss_fix_retry_t    fix_retry    = 0;
   2d498:	f8ad 4010 	strh.w	r4, [sp, #16]
	nrf_gnss_delete_mask_t  delete_mask  = 0;
   2d49c:	9406      	str	r4, [sp, #24]
	char buf[50] = {0};
   2d49e:	f011 fc34 	bl	3ed0a <memset>
	err = at_params_list_init(&at_resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   2d4a2:	2105      	movs	r1, #5
   2d4a4:	a807      	add	r0, sp, #28
	struct at_param_list at_resp_list = {0};
   2d4a6:	e9cd 4407 	strd	r4, r4, [sp, #28]
	err = at_params_list_init(&at_resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   2d4aa:	f010 ff3b 	bl	3e324 <at_params_list_init>
	if (err) {
   2d4ae:	4ec3      	ldr	r6, [pc, #780]	; (2d7bc <start+0x33c>)
   2d4b0:	4bc3      	ldr	r3, [pc, #780]	; (2d7c0 <start+0x340>)
   2d4b2:	1af6      	subs	r6, r6, r3
   2d4b4:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   2d4b8:	4603      	mov	r3, r0
   2d4ba:	b1a8      	cbz	r0, 2d4e8 <start+0x68>
		LOG_ERR("Could init AT params list, error: %d", err);
   2d4bc:	2201      	movs	r2, #1
   2d4be:	f04f 0000 	mov.w	r0, #0
   2d4c2:	f362 0007 	bfi	r0, r2, #0, #8
   2d4c6:	f366 108f 	bfi	r0, r6, #6, #10
   2d4ca:	461a      	mov	r2, r3
   2d4cc:	49bd      	ldr	r1, [pc, #756]	; (2d7c4 <start+0x344>)
   2d4ce:	f00f f8d8 	bl	3c682 <log_string_sync>
	nmea_mask |= NRF_GNSS_NMEA_RMC_MASK;
#endif

#ifdef CONFIG_NRF9160_GPS_HANDLE_MODEM_CONFIGURATION
	if (enable_gps(dev) != 0) {
		LOG_ERR("Failed to enable GPS");
   2d4d2:	f04f 0000 	mov.w	r0, #0
   2d4d6:	2301      	movs	r3, #1
   2d4d8:	49bb      	ldr	r1, [pc, #748]	; (2d7c8 <start+0x348>)
   2d4da:	f363 0007 	bfi	r0, r3, #0, #8
   2d4de:	f366 108f 	bfi	r0, r6, #6, #10
				NRF_SO_GNSS_START,
				&delete_mask,
				sizeof(delete_mask));

	if (retval != 0) {
		LOG_ERR("Failed to start GPS");
   2d4e2:	f00f f8ce 	bl	3c682 <log_string_sync>
   2d4e6:	e13d      	b.n	2d764 <start+0x2e4>
	err = at_cmd_write(AT_XSYSTEMMODE_REQUEST, buf, sizeof(buf), NULL);
   2d4e8:	a913      	add	r1, sp, #76	; 0x4c
   2d4ea:	2232      	movs	r2, #50	; 0x32
   2d4ec:	48b7      	ldr	r0, [pc, #732]	; (2d7cc <start+0x34c>)
   2d4ee:	f7fa faad 	bl	27a4c <at_cmd_write>
	if (err) {
   2d4f2:	4601      	mov	r1, r0
   2d4f4:	2800      	cmp	r0, #0
   2d4f6:	d03e      	beq.n	2d576 <start+0xf6>
		LOG_ERR("Could not get modem's system mode");
   2d4f8:	2301      	movs	r3, #1
   2d4fa:	f04f 0000 	mov.w	r0, #0
   2d4fe:	f363 0007 	bfi	r0, r3, #0, #8
   2d502:	f366 108f 	bfi	r0, r6, #6, #10
   2d506:	49b2      	ldr	r1, [pc, #712]	; (2d7d0 <start+0x350>)
   2d508:	f00f f8bb 	bl	3c682 <log_string_sync>
		err = -EIO;
   2d50c:	f06f 0404 	mvn.w	r4, #4
	at_params_list_free(&at_resp_list);
   2d510:	a807      	add	r0, sp, #28
   2d512:	f010 ff1a 	bl	3e34a <at_params_list_free>
	if (enable_gps(dev) != 0) {
   2d516:	2c00      	cmp	r4, #0
   2d518:	d1db      	bne.n	2d4d2 <start+0x52>
	if (drv_data->socket < 0) {
   2d51a:	6a3b      	ldr	r3, [r7, #32]
   2d51c:	2b00      	cmp	r3, #0
   2d51e:	da15      	bge.n	2d54c <start+0xcc>
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   2d520:	f44f 7201 	mov.w	r2, #516	; 0x204
   2d524:	2102      	movs	r1, #2
   2d526:	2001      	movs	r0, #1
   2d528:	f005 fa3c 	bl	329a4 <nrf_socket>
   2d52c:	4602      	mov	r2, r0
		if (drv_data->socket >= 0) {
   2d52e:	2a00      	cmp	r2, #0
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   2d530:	6238      	str	r0, [r7, #32]
			LOG_DBG("GPS socket created");
   2d532:	f04f 0000 	mov.w	r0, #0
		if (drv_data->socket >= 0) {
   2d536:	f2c0 810d 	blt.w	2d754 <start+0x2d4>
			LOG_DBG("GPS socket created");
   2d53a:	2304      	movs	r3, #4
   2d53c:	f363 0007 	bfi	r0, r3, #0, #8
   2d540:	f366 108f 	bfi	r0, r6, #6, #10
   2d544:	4aa3      	ldr	r2, [pc, #652]	; (2d7d4 <start+0x354>)
   2d546:	49a4      	ldr	r1, [pc, #656]	; (2d7d8 <start+0x358>)
   2d548:	f00f f89b 	bl	3c682 <log_string_sync>
	retval = nrf_setsockopt(drv_data->socket,
   2d54c:	2402      	movs	r4, #2
   2d54e:	9400      	str	r4, [sp, #0]
   2d550:	ab04      	add	r3, sp, #16
   2d552:	4622      	mov	r2, r4
   2d554:	f44f 7101 	mov.w	r1, #516	; 0x204
   2d558:	6a38      	ldr	r0, [r7, #32]
   2d55a:	f005 fb25 	bl	32ba8 <nrf_setsockopt>
	if (retval != 0) {
   2d55e:	2800      	cmp	r0, #0
   2d560:	f000 8105 	beq.w	2d76e <start+0x2ee>
		LOG_ERR("Failed to set fix retry value");
   2d564:	f04f 0000 	mov.w	r0, #0
   2d568:	2301      	movs	r3, #1
   2d56a:	f363 0007 	bfi	r0, r3, #0, #8
   2d56e:	f366 108f 	bfi	r0, r6, #6, #10
   2d572:	499a      	ldr	r1, [pc, #616]	; (2d7dc <start+0x35c>)
   2d574:	e7b5      	b.n	2d4e2 <start+0x62>
	err = at_parser_max_params_from_str(buf,
   2d576:	2305      	movs	r3, #5
   2d578:	aa07      	add	r2, sp, #28
   2d57a:	a813      	add	r0, sp, #76	; 0x4c
   2d57c:	f7fa fefe 	bl	2837c <at_parser_max_params_from_str>
	if (err) {
   2d580:	4604      	mov	r4, r0
   2d582:	b158      	cbz	r0, 2d59c <start+0x11c>
		LOG_ERR("Could not parse AT response, error: %d", err);
   2d584:	f04f 0000 	mov.w	r0, #0
   2d588:	2301      	movs	r3, #1
   2d58a:	4622      	mov	r2, r4
   2d58c:	f363 0007 	bfi	r0, r3, #0, #8
   2d590:	4993      	ldr	r1, [pc, #588]	; (2d7e0 <start+0x360>)
   2d592:	f366 108f 	bfi	r0, r6, #6, #10
		LOG_ERR("Could not get GPS mode state, error: %d", err);
   2d596:	f00f f874 	bl	3c682 <log_string_sync>
		goto enable_gps_clean_exit;
   2d59a:	e7b9      	b.n	2d510 <start+0x90>
	err = at_params_short_get(&at_resp_list,
   2d59c:	f10d 0216 	add.w	r2, sp, #22
   2d5a0:	2103      	movs	r1, #3
   2d5a2:	a807      	add	r0, sp, #28
   2d5a4:	f010 ff69 	bl	3e47a <at_params_short_get>
	if (err) {
   2d5a8:	4604      	mov	r4, r0
   2d5aa:	b148      	cbz	r0, 2d5c0 <start+0x140>
		LOG_ERR("Could not get GPS mode state, error: %d", err);
   2d5ac:	f04f 0000 	mov.w	r0, #0
   2d5b0:	2301      	movs	r3, #1
   2d5b2:	f363 0007 	bfi	r0, r3, #0, #8
   2d5b6:	f366 108f 	bfi	r0, r6, #6, #10
   2d5ba:	4622      	mov	r2, r4
   2d5bc:	4989      	ldr	r1, [pc, #548]	; (2d7e4 <start+0x364>)
   2d5be:	e7ea      	b.n	2d596 <start+0x116>
	if (gps_param_value != 1) {
   2d5c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   2d5c4:	2b01      	cmp	r3, #1
   2d5c6:	d04c      	beq.n	2d662 <start+0x1e2>
		u16_t values[AT_XSYSTEMMODE_PARAMS_COUNT] = {0};
   2d5c8:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
   2d5cc:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
		LOG_DBG("GPS mode is not enabled, attempting to enable it");
   2d5d0:	2304      	movs	r3, #4
   2d5d2:	f04f 0000 	mov.w	r0, #0
   2d5d6:	f363 0007 	bfi	r0, r3, #0, #8
   2d5da:	f366 108f 	bfi	r0, r6, #6, #10
   2d5de:	4a82      	ldr	r2, [pc, #520]	; (2d7e8 <start+0x368>)
   2d5e0:	4982      	ldr	r1, [pc, #520]	; (2d7ec <start+0x36c>)
   2d5e2:	f00f f84e 	bl	3c682 <log_string_sync>
		for (size_t i = 0; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2d5e6:	ad09      	add	r5, sp, #36	; 0x24
			at_params_short_get(&at_resp_list, i, &values[i]);
   2d5e8:	462a      	mov	r2, r5
   2d5ea:	4621      	mov	r1, r4
   2d5ec:	a807      	add	r0, sp, #28
		for (size_t i = 0; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2d5ee:	3401      	adds	r4, #1
			at_params_short_get(&at_resp_list, i, &values[i]);
   2d5f0:	f010 ff43 	bl	3e47a <at_params_short_get>
		for (size_t i = 0; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2d5f4:	2c05      	cmp	r4, #5
   2d5f6:	f105 0502 	add.w	r5, r5, #2
   2d5fa:	d1f5      	bne.n	2d5e8 <start+0x168>
		values[AT_XSYSTEMMODE_GPS_PARAM_INDEX] = 1;
   2d5fc:	2301      	movs	r3, #1
   2d5fe:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		len = snprintf(cmd, sizeof(cmd), AT_XSYSTEMMODE_PROTO,
   2d602:	9302      	str	r3, [sp, #8]
   2d604:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2d608:	4a79      	ldr	r2, [pc, #484]	; (2d7f0 <start+0x370>)
   2d60a:	9301      	str	r3, [sp, #4]
   2d60c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   2d610:	211c      	movs	r1, #28
   2d612:	9300      	str	r3, [sp, #0]
   2d614:	a80c      	add	r0, sp, #48	; 0x30
   2d616:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2d61a:	f00d f985 	bl	3a928 <sniprintf>
		LOG_DBG("Sending AT command: %s", log_strdup(cmd));
   2d61e:	f04f 0400 	mov.w	r4, #0
   2d622:	2304      	movs	r3, #4
   2d624:	a80c      	add	r0, sp, #48	; 0x30
   2d626:	f363 0407 	bfi	r4, r3, #0, #8
   2d62a:	f00f f83c 	bl	3c6a6 <log_strdup>
   2d62e:	f366 148f 	bfi	r4, r6, #6, #10
   2d632:	4603      	mov	r3, r0
   2d634:	4a6c      	ldr	r2, [pc, #432]	; (2d7e8 <start+0x368>)
   2d636:	4620      	mov	r0, r4
   2d638:	496e      	ldr	r1, [pc, #440]	; (2d7f4 <start+0x374>)
   2d63a:	f00f f822 	bl	3c682 <log_string_sync>
		err = at_cmd_write(cmd, NULL, 0, NULL);
   2d63e:	2300      	movs	r3, #0
   2d640:	a80c      	add	r0, sp, #48	; 0x30
   2d642:	461a      	mov	r2, r3
   2d644:	4619      	mov	r1, r3
   2d646:	f7fa fa01 	bl	27a4c <at_cmd_write>
		if (err) {
   2d64a:	4604      	mov	r4, r0
   2d64c:	b148      	cbz	r0, 2d662 <start+0x1e2>
			LOG_ERR("Could not enable GPS mode, error: %d", err);
   2d64e:	f04f 0000 	mov.w	r0, #0
   2d652:	2301      	movs	r3, #1
   2d654:	f363 0007 	bfi	r0, r3, #0, #8
   2d658:	f366 108f 	bfi	r0, r6, #6, #10
   2d65c:	4622      	mov	r2, r4
   2d65e:	4966      	ldr	r1, [pc, #408]	; (2d7f8 <start+0x378>)
   2d660:	e799      	b.n	2d596 <start+0x116>
	LOG_DBG("GPS mode is enabled");
   2d662:	2304      	movs	r3, #4
   2d664:	f04f 0000 	mov.w	r0, #0
   2d668:	f363 0007 	bfi	r0, r3, #0, #8
   2d66c:	f366 108f 	bfi	r0, r6, #6, #10
   2d670:	4a5d      	ldr	r2, [pc, #372]	; (2d7e8 <start+0x368>)
   2d672:	4962      	ldr	r1, [pc, #392]	; (2d7fc <start+0x37c>)
   2d674:	f00f f805 	bl	3c682 <log_string_sync>
	err = at_cmd_write(AT_CFUN_REQUEST, buf, sizeof(buf), NULL);
   2d678:	2300      	movs	r3, #0
   2d67a:	2232      	movs	r2, #50	; 0x32
   2d67c:	a913      	add	r1, sp, #76	; 0x4c
   2d67e:	4860      	ldr	r0, [pc, #384]	; (2d800 <start+0x380>)
   2d680:	f7fa f9e4 	bl	27a4c <at_cmd_write>
	if (err) {
   2d684:	4604      	mov	r4, r0
   2d686:	b148      	cbz	r0, 2d69c <start+0x21c>
		LOG_ERR("Could not get functional mode, error: %d", err);
   2d688:	f04f 0000 	mov.w	r0, #0
   2d68c:	2301      	movs	r3, #1
   2d68e:	f363 0007 	bfi	r0, r3, #0, #8
   2d692:	f366 108f 	bfi	r0, r6, #6, #10
   2d696:	4622      	mov	r2, r4
   2d698:	495a      	ldr	r1, [pc, #360]	; (2d804 <start+0x384>)
   2d69a:	e77c      	b.n	2d596 <start+0x116>
	err = at_parser_max_params_from_str(buf,
   2d69c:	4601      	mov	r1, r0
   2d69e:	2302      	movs	r3, #2
   2d6a0:	aa07      	add	r2, sp, #28
   2d6a2:	a813      	add	r0, sp, #76	; 0x4c
   2d6a4:	f7fa fe6a 	bl	2837c <at_parser_max_params_from_str>
	if (err) {
   2d6a8:	4604      	mov	r4, r0
   2d6aa:	b148      	cbz	r0, 2d6c0 <start+0x240>
		LOG_ERR("Could not parse functional mode response, error: %d",
   2d6ac:	f04f 0000 	mov.w	r0, #0
   2d6b0:	2301      	movs	r3, #1
   2d6b2:	f363 0007 	bfi	r0, r3, #0, #8
   2d6b6:	f366 108f 	bfi	r0, r6, #6, #10
   2d6ba:	4622      	mov	r2, r4
   2d6bc:	4952      	ldr	r1, [pc, #328]	; (2d808 <start+0x388>)
   2d6be:	e76a      	b.n	2d596 <start+0x116>
	err = at_params_short_get(&at_resp_list, 1, &functional_mode);
   2d6c0:	aa0c      	add	r2, sp, #48	; 0x30
   2d6c2:	2101      	movs	r1, #1
   2d6c4:	a807      	add	r0, sp, #28
   2d6c6:	f010 fed8 	bl	3e47a <at_params_short_get>
	if (err) {
   2d6ca:	4604      	mov	r4, r0
		LOG_ERR("Could not get value of functional mode, error: %d",
   2d6cc:	f04f 0000 	mov.w	r0, #0
	if (err) {
   2d6d0:	b13c      	cbz	r4, 2d6e2 <start+0x262>
		LOG_ERR("Could not get value of functional mode, error: %d",
   2d6d2:	2301      	movs	r3, #1
   2d6d4:	f363 0007 	bfi	r0, r3, #0, #8
   2d6d8:	f366 108f 	bfi	r0, r6, #6, #10
   2d6dc:	4622      	mov	r2, r4
   2d6de:	494b      	ldr	r1, [pc, #300]	; (2d80c <start+0x38c>)
   2d6e0:	e759      	b.n	2d596 <start+0x116>
	LOG_DBG("Functional mode: %d", functional_mode);
   2d6e2:	2304      	movs	r3, #4
   2d6e4:	f363 0007 	bfi	r0, r3, #0, #8
   2d6e8:	f366 108f 	bfi	r0, r6, #6, #10
   2d6ec:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2d6f0:	4a3d      	ldr	r2, [pc, #244]	; (2d7e8 <start+0x368>)
   2d6f2:	4947      	ldr	r1, [pc, #284]	; (2d810 <start+0x390>)
   2d6f4:	f00e ffc5 	bl	3c682 <log_string_sync>
	if (functional_mode != FUNCTIONAL_MODE_ENABLED) {
   2d6f8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2d6fc:	2b01      	cmp	r3, #1
   2d6fe:	f43f af07 	beq.w	2d510 <start+0x90>
		LOG_DBG("Functional mode was %d, attemping to set to %d",
   2d702:	2204      	movs	r2, #4
   2d704:	f04f 0000 	mov.w	r0, #0
   2d708:	2501      	movs	r5, #1
   2d70a:	f362 0007 	bfi	r0, r2, #0, #8
   2d70e:	f366 108f 	bfi	r0, r6, #6, #10
   2d712:	4a35      	ldr	r2, [pc, #212]	; (2d7e8 <start+0x368>)
   2d714:	493f      	ldr	r1, [pc, #252]	; (2d814 <start+0x394>)
   2d716:	9500      	str	r5, [sp, #0]
   2d718:	f00e ffb3 	bl	3c682 <log_string_sync>
		err = at_cmd_write(AT_CFUN_1, NULL, 0, NULL);
   2d71c:	4623      	mov	r3, r4
   2d71e:	4622      	mov	r2, r4
   2d720:	4621      	mov	r1, r4
   2d722:	483d      	ldr	r0, [pc, #244]	; (2d818 <start+0x398>)
   2d724:	f7fa f992 	bl	27a4c <at_cmd_write>
		if (err) {
   2d728:	4604      	mov	r4, r0
			LOG_ERR("Could not set functional mode to %d",
   2d72a:	f04f 0000 	mov.w	r0, #0
		if (err) {
   2d72e:	b134      	cbz	r4, 2d73e <start+0x2be>
			LOG_ERR("Could not set functional mode to %d",
   2d730:	f365 0007 	bfi	r0, r5, #0, #8
   2d734:	f366 108f 	bfi	r0, r6, #6, #10
   2d738:	462a      	mov	r2, r5
   2d73a:	4938      	ldr	r1, [pc, #224]	; (2d81c <start+0x39c>)
   2d73c:	e72b      	b.n	2d596 <start+0x116>
		LOG_DBG("Functional mode set to %d", FUNCTIONAL_MODE_ENABLED);
   2d73e:	2304      	movs	r3, #4
   2d740:	f363 0007 	bfi	r0, r3, #0, #8
   2d744:	f366 108f 	bfi	r0, r6, #6, #10
   2d748:	462b      	mov	r3, r5
   2d74a:	4a27      	ldr	r2, [pc, #156]	; (2d7e8 <start+0x368>)
   2d74c:	4934      	ldr	r1, [pc, #208]	; (2d820 <start+0x3a0>)
   2d74e:	f00e ff98 	bl	3c682 <log_string_sync>
   2d752:	e6dd      	b.n	2d510 <start+0x90>
			LOG_ERR("Could not init socket (err: %d)",
   2d754:	2101      	movs	r1, #1
   2d756:	f361 0007 	bfi	r0, r1, #0, #8
   2d75a:	f366 108f 	bfi	r0, r6, #6, #10
   2d75e:	4931      	ldr	r1, [pc, #196]	; (2d824 <start+0x3a4>)
   2d760:	f00e ff8f 	bl	3c682 <log_string_sync>
		return -EIO;
   2d764:	f06f 0404 	mvn.w	r4, #4
	k_sem_give(&drv_data->thread_run_sem);

	LOG_DBG("GPS operational");

	return retval;
}
   2d768:	4620      	mov	r0, r4
   2d76a:	b021      	add	sp, #132	; 0x84
   2d76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	retval = nrf_setsockopt(drv_data->socket,
   2d76e:	9400      	str	r4, [sp, #0]
   2d770:	f10d 0312 	add.w	r3, sp, #18
   2d774:	2201      	movs	r2, #1
   2d776:	f44f 7101 	mov.w	r1, #516	; 0x204
   2d77a:	6a38      	ldr	r0, [r7, #32]
   2d77c:	f005 fa14 	bl	32ba8 <nrf_setsockopt>
	if (retval != 0) {
   2d780:	b140      	cbz	r0, 2d794 <start+0x314>
		LOG_ERR("Failed to set fix interval value");
   2d782:	f04f 0000 	mov.w	r0, #0
   2d786:	2301      	movs	r3, #1
   2d788:	f363 0007 	bfi	r0, r3, #0, #8
   2d78c:	f366 108f 	bfi	r0, r6, #6, #10
   2d790:	4925      	ldr	r1, [pc, #148]	; (2d828 <start+0x3a8>)
   2d792:	e6a6      	b.n	2d4e2 <start+0x62>
	retval = nrf_setsockopt(drv_data->socket,
   2d794:	9400      	str	r4, [sp, #0]
   2d796:	ab05      	add	r3, sp, #20
   2d798:	2204      	movs	r2, #4
   2d79a:	f44f 7101 	mov.w	r1, #516	; 0x204
   2d79e:	6a38      	ldr	r0, [r7, #32]
   2d7a0:	f005 fa02 	bl	32ba8 <nrf_setsockopt>
	if (retval != 0) {
   2d7a4:	2800      	cmp	r0, #0
   2d7a6:	d043      	beq.n	2d830 <start+0x3b0>
		LOG_ERR("Failed to set nmea mask");
   2d7a8:	f04f 0000 	mov.w	r0, #0
   2d7ac:	2301      	movs	r3, #1
   2d7ae:	f363 0007 	bfi	r0, r3, #0, #8
   2d7b2:	f366 108f 	bfi	r0, r6, #6, #10
   2d7b6:	491d      	ldr	r1, [pc, #116]	; (2d82c <start+0x3ac>)
   2d7b8:	e693      	b.n	2d4e2 <start+0x62>
   2d7ba:	bf00      	nop
   2d7bc:	0004039c 	.word	0x0004039c
   2d7c0:	000402cc 	.word	0x000402cc
   2d7c4:	000460b1 	.word	0x000460b1
   2d7c8:	0004631f 	.word	0x0004631f
   2d7cc:	00043e77 	.word	0x00043e77
   2d7d0:	000460d6 	.word	0x000460d6
   2d7d4:	00045eb2 	.word	0x00045eb2
   2d7d8:	00046334 	.word	0x00046334
   2d7dc:	0004636b 	.word	0x0004636b
   2d7e0:	000460f8 	.word	0x000460f8
   2d7e4:	0004611f 	.word	0x0004611f
   2d7e8:	00045ea7 	.word	0x00045ea7
   2d7ec:	00046147 	.word	0x00046147
   2d7f0:	0004617c 	.word	0x0004617c
   2d7f4:	00046198 	.word	0x00046198
   2d7f8:	000461b3 	.word	0x000461b3
   2d7fc:	000461d8 	.word	0x000461d8
   2d800:	000461f0 	.word	0x000461f0
   2d804:	000461f9 	.word	0x000461f9
   2d808:	00046222 	.word	0x00046222
   2d80c:	00046256 	.word	0x00046256
   2d810:	00046288 	.word	0x00046288
   2d814:	000462a0 	.word	0x000462a0
   2d818:	000462d3 	.word	0x000462d3
   2d81c:	000462dd 	.word	0x000462dd
   2d820:	00046301 	.word	0x00046301
   2d824:	0004634b 	.word	0x0004634b
   2d828:	00046389 	.word	0x00046389
   2d82c:	000463aa 	.word	0x000463aa
	retval = nrf_setsockopt(drv_data->socket,
   2d830:	2304      	movs	r3, #4
   2d832:	9300      	str	r3, [sp, #0]
   2d834:	2207      	movs	r2, #7
   2d836:	ab06      	add	r3, sp, #24
   2d838:	f44f 7101 	mov.w	r1, #516	; 0x204
   2d83c:	6a38      	ldr	r0, [r7, #32]
   2d83e:	f005 f9b3 	bl	32ba8 <nrf_setsockopt>
	if (retval != 0) {
   2d842:	4604      	mov	r4, r0
   2d844:	b140      	cbz	r0, 2d858 <start+0x3d8>
		LOG_ERR("Failed to start GPS");
   2d846:	f04f 0000 	mov.w	r0, #0
   2d84a:	2301      	movs	r3, #1
   2d84c:	f363 0007 	bfi	r0, r3, #0, #8
   2d850:	f366 108f 	bfi	r0, r6, #6, #10
   2d854:	490d      	ldr	r1, [pc, #52]	; (2d88c <start+0x40c>)
   2d856:	e644      	b.n	2d4e2 <start+0x62>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2d858:	2201      	movs	r2, #1
   2d85a:	f107 031c 	add.w	r3, r7, #28
   2d85e:	e8d3 1fef 	ldaex	r1, [r3]
   2d862:	e8c3 2fe0 	stlex	r0, r2, [r3]
   2d866:	2800      	cmp	r0, #0
   2d868:	d1f9      	bne.n	2d85e <start+0x3de>
	z_impl_k_sem_give(sem);
   2d86a:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
   2d86e:	f00b f845 	bl	388fc <z_impl_k_sem_give>
	LOG_DBG("GPS operational");
   2d872:	2304      	movs	r3, #4
   2d874:	f04f 0000 	mov.w	r0, #0
   2d878:	f363 0007 	bfi	r0, r3, #0, #8
   2d87c:	f366 108f 	bfi	r0, r6, #6, #10
   2d880:	4a03      	ldr	r2, [pc, #12]	; (2d890 <start+0x410>)
   2d882:	4904      	ldr	r1, [pc, #16]	; (2d894 <start+0x414>)
   2d884:	f00e fefd 	bl	3c682 <log_string_sync>
	return retval;
   2d888:	e76e      	b.n	2d768 <start+0x2e8>
   2d88a:	bf00      	nop
   2d88c:	000463c2 	.word	0x000463c2
   2d890:	00045eb2 	.word	0x00045eb2
   2d894:	000463d6 	.word	0x000463d6

0002d898 <channel_get>:
	return 0;
}

static int channel_get(struct device *dev, enum gps_channel chan,
		       struct gps_data *sample)
{
   2d898:	b570      	push	{r4, r5, r6, lr}
   2d89a:	4615      	mov	r5, r2
	switch (chan) {
   2d89c:	b121      	cbz	r1, 2d8a8 <channel_get+0x10>
   2d89e:	2901      	cmp	r1, #1
   2d8a0:	d011      	beq.n	2d8c6 <channel_get+0x2e>
		break;
	case GPS_CHAN_PVT:
		memcpy(sample, &fresh_pvt, sizeof(struct gps_data));
		break;
	default:
		return -ENOTSUP;
   2d8a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	return 0;
}
   2d8a6:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(sample->nmea.buf, fresh_nmea.nmea.buf,
   2d8a8:	4e0a      	ldr	r6, [pc, #40]	; (2d8d4 <channel_get+0x3c>)
   2d8aa:	f105 0008 	add.w	r0, r5, #8
   2d8ae:	f896 205b 	ldrb.w	r2, [r6, #91]	; 0x5b
   2d8b2:	f106 0108 	add.w	r1, r6, #8
   2d8b6:	f011 fa08 	bl	3ecca <memcpy>
		sample->nmea.len = fresh_nmea.nmea.len;
   2d8ba:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
   2d8be:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
   2d8c2:	2000      	movs	r0, #0
   2d8c4:	e7ef      	b.n	2d8a6 <channel_get+0xe>
   2d8c6:	22c0      	movs	r2, #192	; 0xc0
   2d8c8:	4903      	ldr	r1, [pc, #12]	; (2d8d8 <channel_get+0x40>)
   2d8ca:	4628      	mov	r0, r5
   2d8cc:	f011 f9fd 	bl	3ecca <memcpy>
   2d8d0:	e7f7      	b.n	2d8c2 <channel_get+0x2a>
   2d8d2:	bf00      	nop
   2d8d4:	20022d60 	.word	0x20022d60
   2d8d8:	20022e20 	.word	0x20022e20

0002d8dc <trigger_set>:
}

static int trigger_set(struct device *dev,
			       const struct gps_trigger *trig,
			       gps_trigger_handler_t handler)
{
   2d8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = 0;
	struct gps_drv_data *drv_data = dev->driver_data;
	(void)drv_data;

	switch (trig->type) {
   2d8de:	780b      	ldrb	r3, [r1, #0]
{
   2d8e0:	460e      	mov	r6, r1
	switch (trig->type) {
   2d8e2:	3b01      	subs	r3, #1
   2d8e4:	2b01      	cmp	r3, #1
{
   2d8e6:	4617      	mov	r7, r2
	struct gps_drv_data *drv_data = dev->driver_data;
   2d8e8:	6884      	ldr	r4, [r0, #8]
	switch (trig->type) {
   2d8ea:	d80e      	bhi.n	2d90a <trigger_set+0x2e>
	case GPS_TRIG_DATA_READY:
	case GPS_TRIG_FIX:
		k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   2d8ec:	f104 0508 	add.w	r5, r4, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   2d8f0:	f04f 31ff 	mov.w	r1, #4294967295
   2d8f4:	4628      	mov	r0, r5
   2d8f6:	f009 fbef 	bl	370d8 <z_impl_k_mutex_lock>
		drv_data->trigger_handler = handler;
		drv_data->trigger = *trig;
   2d8fa:	8833      	ldrh	r3, [r6, #0]
		drv_data->trigger_handler = handler;
   2d8fc:	6027      	str	r7, [r4, #0]
		drv_data->trigger = *trig;
   2d8fe:	80a3      	strh	r3, [r4, #4]
	return z_impl_k_mutex_unlock(mutex);
   2d900:	4628      	mov	r0, r5
   2d902:	f009 fcc7 	bl	37294 <z_impl_k_mutex_unlock>
	int ret = 0;
   2d906:	2000      	movs	r0, #0
		ret = -ENOTSUP;
		break;
	}

	return ret;
}
   2d908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("Unsupported GPS trigger");
   2d90a:	2301      	movs	r3, #1
   2d90c:	f04f 0000 	mov.w	r0, #0
   2d910:	4a06      	ldr	r2, [pc, #24]	; (2d92c <trigger_set+0x50>)
   2d912:	f363 0007 	bfi	r0, r3, #0, #8
   2d916:	4b06      	ldr	r3, [pc, #24]	; (2d930 <trigger_set+0x54>)
   2d918:	4906      	ldr	r1, [pc, #24]	; (2d934 <trigger_set+0x58>)
   2d91a:	1a9b      	subs	r3, r3, r2
   2d91c:	08db      	lsrs	r3, r3, #3
   2d91e:	f363 108f 	bfi	r0, r3, #6, #10
   2d922:	f00e feae 	bl	3c682 <log_string_sync>
	return ret;
   2d926:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d92a:	e7ed      	b.n	2d908 <trigger_set+0x2c>
   2d92c:	000402cc 	.word	0x000402cc
   2d930:	0004039c 	.word	0x0004039c
   2d934:	0004641a 	.word	0x0004641a

0002d938 <gps_thread>:
{
   2d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool operation_blocked = false;
   2d93c:	2500      	movs	r5, #0
   2d93e:	4b6c      	ldr	r3, [pc, #432]	; (2daf0 <gps_thread+0x1b8>)
				LOG_DBG("NMEA data ready");
   2d940:	4a6c      	ldr	r2, [pc, #432]	; (2daf4 <gps_thread+0x1bc>)
{
   2d942:	b0c5      	sub	sp, #276	; 0x114
				LOG_DBG("NMEA data ready");
   2d944:	1a9b      	subs	r3, r3, r2
	struct gps_drv_data *drv_data = dev->driver_data;
   2d946:	f8d0 b008 	ldr.w	fp, [r0, #8]
{
   2d94a:	900d      	str	r0, [sp, #52]	; 0x34
				LOG_DBG("NMEA data ready");
   2d94c:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	return z_impl_k_sem_take(sem, timeout);
   2d950:	f04f 31ff 	mov.w	r1, #4294967295
   2d954:	f60b 00d8 	addw	r0, fp, #2264	; 0x8d8
   2d958:	f00b f81a 	bl	38990 <z_impl_k_sem_take>
	__ASSERT_NO_MSG(socket_ops);
   2d95c:	4b66      	ldr	r3, [pc, #408]	; (2daf8 <gps_thread+0x1c0>)
		len = recv(drv_data->socket, &raw_gps_data,
   2d95e:	f8db 6020 	ldr.w	r6, [fp, #32]
   2d962:	681b      	ldr	r3, [r3, #0]
   2d964:	b94b      	cbnz	r3, 2d97a <gps_thread+0x42>
   2d966:	4965      	ldr	r1, [pc, #404]	; (2dafc <gps_thread+0x1c4>)
   2d968:	4865      	ldr	r0, [pc, #404]	; (2db00 <gps_thread+0x1c8>)
   2d96a:	2369      	movs	r3, #105	; 0x69
   2d96c:	4a65      	ldr	r2, [pc, #404]	; (2db04 <gps_thread+0x1cc>)
   2d96e:	f00e fe31 	bl	3c5d4 <printk>
   2d972:	2169      	movs	r1, #105	; 0x69
   2d974:	4863      	ldr	r0, [pc, #396]	; (2db04 <gps_thread+0x1cc>)
   2d976:	f00e fe73 	bl	3c660 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   2d97a:	4b5f      	ldr	r3, [pc, #380]	; (2daf8 <gps_thread+0x1c0>)
   2d97c:	681b      	ldr	r3, [r3, #0]
   2d97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2d980:	b94b      	cbnz	r3, 2d996 <gps_thread+0x5e>
   2d982:	4961      	ldr	r1, [pc, #388]	; (2db08 <gps_thread+0x1d0>)
   2d984:	485e      	ldr	r0, [pc, #376]	; (2db00 <gps_thread+0x1c8>)
   2d986:	236a      	movs	r3, #106	; 0x6a
   2d988:	4a5e      	ldr	r2, [pc, #376]	; (2db04 <gps_thread+0x1cc>)
   2d98a:	f00e fe23 	bl	3c5d4 <printk>
   2d98e:	216a      	movs	r1, #106	; 0x6a
   2d990:	485c      	ldr	r0, [pc, #368]	; (2db04 <gps_thread+0x1cc>)
   2d992:	f00e fe65 	bl	3c660 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   2d996:	4b58      	ldr	r3, [pc, #352]	; (2daf8 <gps_thread+0x1c0>)
   2d998:	22d8      	movs	r2, #216	; 0xd8
   2d99a:	681b      	ldr	r3, [r3, #0]
   2d99c:	a90e      	add	r1, sp, #56	; 0x38
   2d99e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   2d9a0:	4630      	mov	r0, r6
   2d9a2:	2300      	movs	r3, #0
   2d9a4:	47a0      	blx	r4
		if (len <= 0) {
   2d9a6:	1e02      	subs	r2, r0, #0
   2d9a8:	dc19      	bgt.n	2d9de <gps_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d9aa:	f10b 031c 	add.w	r3, fp, #28
   2d9ae:	e8d3 3faf 	lda	r3, [r3]
			if (!atomic_get(&drv_data->gps_is_active)) {
   2d9b2:	2b00      	cmp	r3, #0
   2d9b4:	d0cc      	beq.n	2d950 <gps_thread+0x18>
			LOG_ERR("recv() returned error: %d", len);
   2d9b6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2d9ba:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2d9be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2d9c2:	f043 0301 	orr.w	r3, r3, #1
   2d9c6:	f363 0107 	bfi	r1, r3, #0, #8
   2d9ca:	b28b      	uxth	r3, r1
   2d9cc:	f36a 138f 	bfi	r3, sl, #6, #10
   2d9d0:	494e      	ldr	r1, [pc, #312]	; (2db0c <gps_thread+0x1d4>)
   2d9d2:	b298      	uxth	r0, r3
   2d9d4:	f8ad 3010 	strh.w	r3, [sp, #16]
   2d9d8:	f00e fe53 	bl	3c682 <log_string_sync>
			continue;
   2d9dc:	e7be      	b.n	2d95c <gps_thread+0x24>
		switch (raw_gps_data.data_id) {
   2d9de:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   2d9e2:	2f01      	cmp	r7, #1
   2d9e4:	d04d      	beq.n	2da82 <gps_thread+0x14a>
   2d9e6:	2f02      	cmp	r7, #2
   2d9e8:	d1b8      	bne.n	2d95c <gps_thread+0x24>
			if (operation_blocked) {
   2d9ea:	2d00      	cmp	r5, #0
   2d9ec:	d1b6      	bne.n	2d95c <gps_thread+0x24>
			memcpy(fresh_nmea.nmea.buf, raw_gps_data.nmea, len);
   2d9ee:	4c48      	ldr	r4, [pc, #288]	; (2db10 <gps_thread+0x1d8>)
   2d9f0:	23b8      	movs	r3, #184	; 0xb8
   2d9f2:	a910      	add	r1, sp, #64	; 0x40
   2d9f4:	f104 0008 	add.w	r0, r4, #8
   2d9f8:	f011 f974 	bl	3ece4 <__memcpy_chk>
			fresh_nmea.nmea.len = strlen(raw_gps_data.nmea);
   2d9fc:	a810      	add	r0, sp, #64	; 0x40
   2d9fe:	f7ef fb91 	bl	1d124 <strlen>
   2da02:	f884 005b 	strb.w	r0, [r4, #91]	; 0x5b
			if ((drv_data->trigger.chan == GPS_CHAN_NMEA) &&
   2da06:	f8bb 4004 	ldrh.w	r4, [fp, #4]
   2da0a:	2c01      	cmp	r4, #1
   2da0c:	d114      	bne.n	2da38 <gps_thread+0x100>
				LOG_DBG("NMEA data ready");
   2da0e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2da12:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2da16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2da1a:	f043 0304 	orr.w	r3, r3, #4
   2da1e:	f363 0207 	bfi	r2, r3, #0, #8
   2da22:	b293      	uxth	r3, r2
   2da24:	f36a 138f 	bfi	r3, sl, #6, #10
   2da28:	4a3a      	ldr	r2, [pc, #232]	; (2db14 <gps_thread+0x1dc>)
   2da2a:	493b      	ldr	r1, [pc, #236]	; (2db18 <gps_thread+0x1e0>)
   2da2c:	b298      	uxth	r0, r3
   2da2e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
				trigger_send = true;
   2da32:	4625      	mov	r5, r4
				LOG_DBG("NMEA data ready");
   2da34:	f00e fe25 	bl	3c682 <log_string_sync>
			if ((drv_data->trigger.type == GPS_TRIG_FIX)
   2da38:	f89b 3004 	ldrb.w	r3, [fp, #4]
   2da3c:	2b02      	cmp	r3, #2
   2da3e:	f040 8176 	bne.w	2dd2e <gps_thread+0x3f6>
			    && is_fix(&fresh_pvt.pvt)) {
   2da42:	4b36      	ldr	r3, [pc, #216]	; (2db1c <gps_thread+0x1e4>)
   2da44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   2da48:	07db      	lsls	r3, r3, #31
   2da4a:	f140 8170 	bpl.w	2dd2e <gps_thread+0x3f6>
				if (drv_data->trigger.chan == GPS_CHAN_NMEA) {
   2da4e:	f89b 3005 	ldrb.w	r3, [fp, #5]
				LOG_DBG("NMEA: Position fix");
   2da52:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
					trigger_send = true;
   2da56:	2b00      	cmp	r3, #0
				LOG_DBG("NMEA: Position fix");
   2da58:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2da5c:	4930      	ldr	r1, [pc, #192]	; (2db20 <gps_thread+0x1e8>)
   2da5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2da62:	f043 0304 	orr.w	r3, r3, #4
   2da66:	f363 0207 	bfi	r2, r3, #0, #8
   2da6a:	b293      	uxth	r3, r2
   2da6c:	f36a 138f 	bfi	r3, sl, #6, #10
   2da70:	4a28      	ldr	r2, [pc, #160]	; (2db14 <gps_thread+0x1dc>)
   2da72:	b298      	uxth	r0, r3
					trigger_send = true;
   2da74:	bf08      	it	eq
   2da76:	2501      	moveq	r5, #1
				LOG_DBG("NMEA: Position fix");
   2da78:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   2da7c:	f00e fe01 	bl	3c682 <log_string_sync>
   2da80:	e155      	b.n	2dd2e <gps_thread+0x3f6>
			if (gps_is_blocked(&raw_gps_data.pvt)) {
   2da82:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   2da86:	f014 0610 	ands.w	r6, r4, #16
   2da8a:	d018      	beq.n	2dabe <gps_thread+0x186>
				if (operation_blocked) {
   2da8c:	2d00      	cmp	r5, #0
   2da8e:	f47f af65 	bne.w	2d95c <gps_thread+0x24>
				LOG_DBG("Waiting for time window to operate");
   2da92:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2da96:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2da9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2da9e:	f043 0304 	orr.w	r3, r3, #4
   2daa2:	f363 0207 	bfi	r2, r3, #0, #8
   2daa6:	b293      	uxth	r3, r2
   2daa8:	f36a 138f 	bfi	r3, sl, #6, #10
   2daac:	4a19      	ldr	r2, [pc, #100]	; (2db14 <gps_thread+0x1dc>)
   2daae:	491d      	ldr	r1, [pc, #116]	; (2db24 <gps_thread+0x1ec>)
   2dab0:	b298      	uxth	r0, r3
   2dab2:	f8ad 3014 	strh.w	r3, [sp, #20]
				operation_blocked = true;
   2dab6:	463d      	mov	r5, r7
				LOG_DBG("Waiting for time window to operate");
   2dab8:	f00e fde3 	bl	3c682 <log_string_sync>
				continue;
   2dabc:	e74e      	b.n	2d95c <gps_thread+0x24>
			if (pvt_deadline_missed(&raw_gps_data.pvt)) {
   2dabe:	f014 0408 	ands.w	r4, r4, #8
   2dac2:	d033      	beq.n	2db2c <gps_thread+0x1f4>
				LOG_DBG("Invalid PVT frame, discarding");
   2dac4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2dac8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2dacc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2dad0:	f043 0304 	orr.w	r3, r3, #4
   2dad4:	f363 0207 	bfi	r2, r3, #0, #8
   2dad8:	b293      	uxth	r3, r2
   2dada:	f36a 138f 	bfi	r3, sl, #6, #10
   2dade:	4a0d      	ldr	r2, [pc, #52]	; (2db14 <gps_thread+0x1dc>)
   2dae0:	4911      	ldr	r1, [pc, #68]	; (2db28 <gps_thread+0x1f0>)
   2dae2:	b298      	uxth	r0, r3
   2dae4:	f8ad 3018 	strh.w	r3, [sp, #24]
   2dae8:	f00e fdcb 	bl	3c682 <log_string_sync>
	return z_impl_k_mutex_unlock(mutex);
   2daec:	2500      	movs	r5, #0
   2daee:	e735      	b.n	2d95c <gps_thread+0x24>
   2daf0:	0004039c 	.word	0x0004039c
   2daf4:	000402cc 	.word	0x000402cc
   2daf8:	20023a4c 	.word	0x20023a4c
   2dafc:	000418d1 	.word	0x000418d1
   2db00:	00041757 	.word	0x00041757
   2db04:	000418a8 	.word	0x000418a8
   2db08:	000431bd 	.word	0x000431bd
   2db0c:	00045eec 	.word	0x00045eec
   2db10:	20022d60 	.word	0x20022d60
   2db14:	00045e9c 	.word	0x00045e9c
   2db18:	00045fdd 	.word	0x00045fdd
   2db1c:	20022e20 	.word	0x20022e20
   2db20:	00045ff1 	.word	0x00045ff1
   2db24:	00045f06 	.word	0x00045f06
   2db28:	00045f2d 	.word	0x00045f2d
	u8_t  n_unhealthy = 0;
   2db2c:	4627      	mov	r7, r4
	u8_t  n_used = 0;
   2db2e:	4626      	mov	r6, r4
   2db30:	ad0e      	add	r5, sp, #56	; 0x38
			if (pvt_deadline_missed(&raw_gps_data.pvt)) {
   2db32:	950b      	str	r5, [sp, #44]	; 0x2c
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   2db34:	940c      	str	r4, [sp, #48]	; 0x30
		u8_t sv = pvt_data->pvt.sv[i].sv;
   2db36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2db38:	f893 c046 	ldrb.w	ip, [r3, #70]	; 0x46
		if (sv) { /* SV number 0 indicates no satellite */
   2db3c:	f1bc 0f00 	cmp.w	ip, #0
   2db40:	d028      	beq.n	2db94 <gps_thread+0x25c>
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   2db42:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
			n_tracked++;
   2db46:	3401      	adds	r4, #1
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   2db48:	f3c2 0140 	ubfx	r1, r2, #1, #1
			n_tracked++;
   2db4c:	b2e4      	uxtb	r4, r4
			if (used) {
   2db4e:	b109      	cbz	r1, 2db54 <gps_thread+0x21c>
				n_used++;
   2db50:	3601      	adds	r6, #1
   2db52:	b2f6      	uxtb	r6, r6
				  NRF_GNSS_SV_FLAG_UNHEALTHY) ? true : false;
   2db54:	f3c2 02c0 	ubfx	r2, r2, #3, #1
			if (unhealthy) {
   2db58:	b10a      	cbz	r2, 2db5e <gps_thread+0x226>
				n_unhealthy++;
   2db5a:	3701      	adds	r7, #1
   2db5c:	b2ff      	uxtb	r7, r7
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   2db5e:	f029 003f 	bic.w	r0, r9, #63	; 0x3f
   2db62:	f040 0004 	orr.w	r0, r0, #4
   2db66:	f360 0907 	bfi	r9, r0, #0, #8
   2db6a:	4b7c      	ldr	r3, [pc, #496]	; (2dd5c <gps_thread+0x424>)
   2db6c:	487c      	ldr	r0, [pc, #496]	; (2dd60 <gps_thread+0x428>)
   2db6e:	f36a 198f 	bfi	r9, sl, #6, #10
   2db72:	2900      	cmp	r1, #0
   2db74:	bf08      	it	eq
   2db76:	4618      	moveq	r0, r3
   2db78:	4b7a      	ldr	r3, [pc, #488]	; (2dd64 <gps_thread+0x42c>)
   2db7a:	4601      	mov	r1, r0
   2db7c:	487a      	ldr	r0, [pc, #488]	; (2dd68 <gps_thread+0x430>)
   2db7e:	2a00      	cmp	r2, #0
   2db80:	bf08      	it	eq
   2db82:	4603      	moveq	r3, r0
   2db84:	4a79      	ldr	r2, [pc, #484]	; (2dd6c <gps_thread+0x434>)
   2db86:	e9cd 1300 	strd	r1, r3, [sp]
   2db8a:	4648      	mov	r0, r9
   2db8c:	4663      	mov	r3, ip
   2db8e:	4978      	ldr	r1, [pc, #480]	; (2dd70 <gps_thread+0x438>)
   2db90:	f00e fd77 	bl	3c682 <log_string_sync>
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   2db94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2db96:	3301      	adds	r3, #1
   2db98:	930c      	str	r3, [sp, #48]	; 0x30
   2db9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2db9c:	330c      	adds	r3, #12
   2db9e:	930b      	str	r3, [sp, #44]	; 0x2c
   2dba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2dba2:	2b0c      	cmp	r3, #12
   2dba4:	d1c7      	bne.n	2db36 <gps_thread+0x1fe>
	LOG_DBG("Tracking: %d Using: %d Unhealthy: %d", n_tracked,
   2dba6:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2dbaa:	f043 0304 	orr.w	r3, r3, #4
   2dbae:	f363 0807 	bfi	r8, r3, #0, #8
   2dbb2:	f36a 188f 	bfi	r8, sl, #6, #10
   2dbb6:	4623      	mov	r3, r4
   2dbb8:	e9cd 6700 	strd	r6, r7, [sp]
   2dbbc:	4a6b      	ldr	r2, [pc, #428]	; (2dd6c <gps_thread+0x434>)
   2dbbe:	496d      	ldr	r1, [pc, #436]	; (2dd74 <gps_thread+0x43c>)
   2dbc0:	4640      	mov	r0, r8
   2dbc2:	f00e fd5e 	bl	3c682 <log_string_sync>
	LOG_DBG("Seconds since last fix %lld",
   2dbc6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2dbca:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   2dbce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2dbd2:	f043 0304 	orr.w	r3, r3, #4
   2dbd6:	f363 0207 	bfi	r2, r3, #0, #8
   2dbda:	b293      	uxth	r3, r2
   2dbdc:	f36a 138f 	bfi	r3, sl, #6, #10
   2dbe0:	f8ad 300c 	strh.w	r3, [sp, #12]
	return z_impl_k_uptime_get();
   2dbe4:	f010 ffeb 	bl	3ebbe <z_impl_k_uptime_get>
   2dbe8:	4b63      	ldr	r3, [pc, #396]	; (2dd78 <gps_thread+0x440>)
   2dbea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2dbee:	e9d3 4600 	ldrd	r4, r6, [r3]
   2dbf2:	1b00      	subs	r0, r0, r4
   2dbf4:	f04f 0300 	mov.w	r3, #0
   2dbf8:	eb61 0106 	sbc.w	r1, r1, r6
   2dbfc:	f7ef f8be 	bl	1cd7c <__aeabi_uldivmod>
   2dc00:	4a5a      	ldr	r2, [pc, #360]	; (2dd6c <gps_thread+0x434>)
   2dc02:	e9cd 0100 	strd	r0, r1, [sp]
   2dc06:	495d      	ldr	r1, [pc, #372]	; (2dd7c <gps_thread+0x444>)
   2dc08:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   2dc0c:	f00e fd39 	bl	3c682 <log_string_sync>
	dest->latitude = src->latitude;
   2dc10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2dc14:	4b5a      	ldr	r3, [pc, #360]	; (2dd80 <gps_thread+0x448>)
	dest->altitude = src->altitude;
   2dc16:	9a14      	ldr	r2, [sp, #80]	; 0x50
	dest->latitude = src->latitude;
   2dc18:	e9c3 0102 	strd	r0, r1, [r3, #8]
	dest->longitude = src->longitude;
   2dc1c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
	dest->altitude = src->altitude;
   2dc20:	619a      	str	r2, [r3, #24]
	dest->accuracy = src->accuracy;
   2dc22:	9a15      	ldr	r2, [sp, #84]	; 0x54
	dest->longitude = src->longitude;
   2dc24:	e9c3 0104 	strd	r0, r1, [r3, #16]
	dest->accuracy = src->accuracy;
   2dc28:	61da      	str	r2, [r3, #28]
	dest->speed = src->speed;
   2dc2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
	dest->datetime.year = src->datetime.year;
   2dc2c:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
	dest->speed = src->speed;
   2dc30:	621a      	str	r2, [r3, #32]
	dest->heading = src->heading;
   2dc32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
	dest->datetime.year = src->datetime.year;
   2dc34:	8759      	strh	r1, [r3, #58]	; 0x3a
	dest->heading = src->heading;
   2dc36:	625a      	str	r2, [r3, #36]	; 0x24
	dest->flags = src->flags;
   2dc38:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
	dest->datetime.month = src->datetime.month;
   2dc3c:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
	dest->flags = src->flags;
   2dc40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dest->datetime.seconds = src->datetime.seconds;
   2dc44:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
	dest->datetime.month = src->datetime.month;
   2dc48:	8799      	strh	r1, [r3, #60]	; 0x3c
	dest->datetime.seconds = src->datetime.seconds;
   2dc4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dest->datetime.ms = src->datetime.ms;
   2dc4e:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
	dest->datetime.hour = src->datetime.hour;
   2dc52:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
	dest->datetime.ms = src->datetime.ms;
   2dc56:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	dest->pdop = src->pdop;
   2dc5a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
	dest->datetime.hour = src->datetime.hour;
   2dc5c:	87d9      	strh	r1, [r3, #62]	; 0x3e
	dest->pdop = src->pdop;
   2dc5e:	629a      	str	r2, [r3, #40]	; 0x28
	dest->hdop = src->hdop;
   2dc60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   2dc62:	62da      	str	r2, [r3, #44]	; 0x2c
	dest->vdop = src->vdop;
   2dc64:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2dc66:	631a      	str	r2, [r3, #48]	; 0x30
	dest->tdop = src->tdop;
   2dc68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   2dc6a:	635a      	str	r2, [r3, #52]	; 0x34
	for (size_t i = 0;
   2dc6c:	2200      	movs	r2, #0
		dest->sv[i].sv = src->sv[i].sv;
   2dc6e:	f8b5 1046 	ldrh.w	r1, [r5, #70]	; 0x46
	     i < MIN(NRF_GNSS_MAX_SATELLITES, GPS_MAX_SATELLITES); i++) {
   2dc72:	3201      	adds	r2, #1
		dest->sv[i].sv = src->sv[i].sv;
   2dc74:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
		dest->sv[i].cn0 = src->sv[i].cn0;
   2dc78:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
	for (size_t i = 0;
   2dc7c:	2a0c      	cmp	r2, #12
		dest->sv[i].cn0 = src->sv[i].cn0;
   2dc7e:	f8a3 1046 	strh.w	r1, [r3, #70]	; 0x46
		dest->sv[i].elevation = src->sv[i].elevation;
   2dc82:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
   2dc86:	f103 030a 	add.w	r3, r3, #10
   2dc8a:	87d9      	strh	r1, [r3, #62]	; 0x3e
		dest->sv[i].azimuth = src->sv[i].azimuth;
   2dc8c:	f8b5 104e 	ldrh.w	r1, [r5, #78]	; 0x4e
   2dc90:	f105 050c 	add.w	r5, r5, #12
   2dc94:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
		dest->sv[i].flags = src->sv[i].flags;
   2dc98:	f895 1044 	ldrb.w	r1, [r5, #68]	; 0x44
   2dc9c:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
		dest->sv[i].signal = src->sv[i].signal;
   2dca0:	f895 103c 	ldrb.w	r1, [r5, #60]	; 0x3c
   2dca4:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	for (size_t i = 0;
   2dca8:	d1e1      	bne.n	2dc6e <gps_thread+0x336>
			if ((drv_data->trigger.chan == GPS_CHAN_PVT)
   2dcaa:	f240 1301 	movw	r3, #257	; 0x101
   2dcae:	f8bb 2004 	ldrh.w	r2, [fp, #4]
   2dcb2:	429a      	cmp	r2, r3
   2dcb4:	d150      	bne.n	2dd58 <gps_thread+0x420>
				LOG_DBG("PVT data ready");
   2dcb6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2dcba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2dcbe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2dcc2:	f043 0304 	orr.w	r3, r3, #4
   2dcc6:	f363 0207 	bfi	r2, r3, #0, #8
   2dcca:	b293      	uxth	r3, r2
   2dccc:	f36a 138f 	bfi	r3, sl, #6, #10
   2dcd0:	4a2c      	ldr	r2, [pc, #176]	; (2dd84 <gps_thread+0x44c>)
   2dcd2:	492d      	ldr	r1, [pc, #180]	; (2dd88 <gps_thread+0x450>)
   2dcd4:	b298      	uxth	r0, r3
   2dcd6:	f8ad 301c 	strh.w	r3, [sp, #28]
				trigger_send = true;
   2dcda:	2501      	movs	r5, #1
				LOG_DBG("PVT data ready");
   2dcdc:	f00e fcd1 	bl	3c682 <log_string_sync>
			if ((drv_data->trigger.type == GPS_TRIG_FIX) &&
   2dce0:	f89b 3004 	ldrb.w	r3, [fp, #4]
   2dce4:	2b02      	cmp	r3, #2
   2dce6:	d122      	bne.n	2dd2e <gps_thread+0x3f6>
			    is_fix(&fresh_pvt.pvt)) {
   2dce8:	4b25      	ldr	r3, [pc, #148]	; (2dd80 <gps_thread+0x448>)
			if ((drv_data->trigger.type == GPS_TRIG_FIX) &&
   2dcea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   2dcee:	07da      	lsls	r2, r3, #31
   2dcf0:	d51d      	bpl.n	2dd2e <gps_thread+0x3f6>
				if (drv_data->trigger.chan == GPS_CHAN_PVT) {
   2dcf2:	f89b 3005 	ldrb.w	r3, [fp, #5]
				LOG_DBG("PVT: Position fix");
   2dcf6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
					trigger_send = true;
   2dcfa:	2b01      	cmp	r3, #1
				LOG_DBG("PVT: Position fix");
   2dcfc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2dd00:	4922      	ldr	r1, [pc, #136]	; (2dd8c <gps_thread+0x454>)
   2dd02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2dd06:	f043 0304 	orr.w	r3, r3, #4
   2dd0a:	f363 0207 	bfi	r2, r3, #0, #8
   2dd0e:	b293      	uxth	r3, r2
   2dd10:	f36a 138f 	bfi	r3, sl, #6, #10
   2dd14:	4a1b      	ldr	r2, [pc, #108]	; (2dd84 <gps_thread+0x44c>)
   2dd16:	b298      	uxth	r0, r3
					trigger_send = true;
   2dd18:	bf08      	it	eq
   2dd1a:	2501      	moveq	r5, #1
				LOG_DBG("PVT: Position fix");
   2dd1c:	f8ad 3020 	strh.w	r3, [sp, #32]
   2dd20:	f00e fcaf 	bl	3c682 <log_string_sync>
   2dd24:	f010 ff4b 	bl	3ebbe <z_impl_k_uptime_get>
				fix_timestamp = k_uptime_get();
   2dd28:	4b13      	ldr	r3, [pc, #76]	; (2dd78 <gps_thread+0x440>)
   2dd2a:	e9c3 0100 	strd	r0, r1, [r3]
		if (!trigger_send) {
   2dd2e:	2d00      	cmp	r5, #0
   2dd30:	f43f ae14 	beq.w	2d95c <gps_thread+0x24>
		k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   2dd34:	f10b 0408 	add.w	r4, fp, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   2dd38:	f04f 31ff 	mov.w	r1, #4294967295
   2dd3c:	4620      	mov	r0, r4
   2dd3e:	f009 f9cb 	bl	370d8 <z_impl_k_mutex_lock>
		if (drv_data->trigger_handler != NULL) {
   2dd42:	f8db 3000 	ldr.w	r3, [fp]
   2dd46:	b11b      	cbz	r3, 2dd50 <gps_thread+0x418>
			drv_data->trigger_handler(dev, &drv_data->trigger);
   2dd48:	f10b 0104 	add.w	r1, fp, #4
   2dd4c:	980d      	ldr	r0, [sp, #52]	; 0x34
   2dd4e:	4798      	blx	r3
	return z_impl_k_mutex_unlock(mutex);
   2dd50:	4620      	mov	r0, r4
   2dd52:	f009 fa9f 	bl	37294 <z_impl_k_mutex_unlock>
   2dd56:	e6c9      	b.n	2daec <gps_thread+0x1b4>
   2dd58:	2500      	movs	r5, #0
   2dd5a:	e7c1      	b.n	2dce0 <gps_thread+0x3a8>
   2dd5c:	00045ecb 	.word	0x00045ecb
   2dd60:	00045ec2 	.word	0x00045ec2
   2dd64:	00045ed4 	.word	0x00045ed4
   2dd68:	00045ee0 	.word	0x00045ee0
   2dd6c:	00045e86 	.word	0x00045e86
   2dd70:	00045f4f 	.word	0x00045f4f
   2dd74:	00045f6b 	.word	0x00045f6b
   2dd78:	20022d58 	.word	0x20022d58
   2dd7c:	00045f94 	.word	0x00045f94
   2dd80:	20022e20 	.word	0x20022e20
   2dd84:	00045e9c 	.word	0x00045e9c
   2dd88:	00045fb4 	.word	0x00045fb4
   2dd8c:	00045fc7 	.word	0x00045fc7

0002dd90 <stop>:
{
   2dd90:	b537      	push	{r0, r1, r2, r4, r5, lr}
	LOG_DBG("Stopping GPS");
   2dd92:	2304      	movs	r3, #4
	struct gps_drv_data *drv_data = dev->driver_data;
   2dd94:	6885      	ldr	r5, [r0, #8]
	LOG_DBG("Stopping GPS");
   2dd96:	f04f 0000 	mov.w	r0, #0
   2dd9a:	4c16      	ldr	r4, [pc, #88]	; (2ddf4 <stop+0x64>)
   2dd9c:	f363 0007 	bfi	r0, r3, #0, #8
   2dda0:	4b15      	ldr	r3, [pc, #84]	; (2ddf8 <stop+0x68>)
   2dda2:	4a16      	ldr	r2, [pc, #88]	; (2ddfc <stop+0x6c>)
   2dda4:	1ae4      	subs	r4, r4, r3
   2dda6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2ddaa:	f364 108f 	bfi	r0, r4, #6, #10
   2ddae:	4914      	ldr	r1, [pc, #80]	; (2de00 <stop+0x70>)
   2ddb0:	f00e fc67 	bl	3c682 <log_string_sync>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ddb4:	2300      	movs	r3, #0
   2ddb6:	f105 021c 	add.w	r2, r5, #28
   2ddba:	e8d2 1fef 	ldaex	r1, [r2]
   2ddbe:	e8c2 3fe0 	stlex	r0, r3, [r2]
   2ddc2:	2800      	cmp	r0, #0
   2ddc4:	d1f9      	bne.n	2ddba <stop+0x2a>
	retval = nrf_setsockopt(drv_data->socket,
   2ddc6:	9300      	str	r3, [sp, #0]
   2ddc8:	2208      	movs	r2, #8
   2ddca:	f44f 7101 	mov.w	r1, #516	; 0x204
   2ddce:	6a28      	ldr	r0, [r5, #32]
   2ddd0:	f004 feea 	bl	32ba8 <nrf_setsockopt>
	if (retval != 0) {
   2ddd4:	b158      	cbz	r0, 2ddee <stop+0x5e>
		LOG_ERR("Failed to stop GPS");
   2ddd6:	2301      	movs	r3, #1
   2ddd8:	f04f 0000 	mov.w	r0, #0
   2dddc:	f363 0007 	bfi	r0, r3, #0, #8
   2dde0:	f364 108f 	bfi	r0, r4, #6, #10
   2dde4:	4907      	ldr	r1, [pc, #28]	; (2de04 <stop+0x74>)
   2dde6:	f00e fc4c 	bl	3c682 <log_string_sync>
		return -EIO;
   2ddea:	f06f 0004 	mvn.w	r0, #4
}
   2ddee:	b003      	add	sp, #12
   2ddf0:	bd30      	pop	{r4, r5, pc}
   2ddf2:	bf00      	nop
   2ddf4:	0004039c 	.word	0x0004039c
   2ddf8:	000402cc 	.word	0x000402cc
   2ddfc:	00045ebd 	.word	0x00045ebd
   2de00:	000463ea 	.word	0x000463ea
   2de04:	000463fb 	.word	0x000463fb

0002de08 <init>:
	drv_data->socket = -1;
   2de08:	f04f 33ff 	mov.w	r3, #4294967295
{
   2de0c:	b570      	push	{r4, r5, r6, lr}
   2de0e:	4606      	mov	r6, r0
   2de10:	2400      	movs	r4, #0
	struct gps_drv_data *drv_data = dev->driver_data;
   2de12:	6885      	ldr	r5, [r0, #8]
{
   2de14:	b086      	sub	sp, #24
	drv_data->socket = -1;
   2de16:	622b      	str	r3, [r5, #32]
   2de18:	f105 031c 	add.w	r3, r5, #28
   2de1c:	e8d3 2fef 	ldaex	r2, [r3]
   2de20:	e8c3 4fe1 	stlex	r1, r4, [r3]
   2de24:	2900      	cmp	r1, #0
   2de26:	d1f9      	bne.n	2de1c <init+0x14>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2de28:	2201      	movs	r2, #1
   2de2a:	4621      	mov	r1, r4
   2de2c:	f605 00d8 	addw	r0, r5, #2264	; 0x8d8
   2de30:	f010 fe29 	bl	3ea86 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   2de34:	f105 0008 	add.w	r0, r5, #8
   2de38:	f010 fdc0 	bl	3e9bc <z_impl_k_mutex_init>
	struct gps_drv_data *drv_data = dev->driver_data;
   2de3c:	68b0      	ldr	r0, [r6, #8]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2de3e:	230a      	movs	r3, #10
   2de40:	f100 0128 	add.w	r1, r0, #40	; 0x28
   2de44:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2de48:	e9cd 4404 	strd	r4, r4, [sp, #16]
   2de4c:	e9cd 6400 	strd	r6, r4, [sp]
   2de50:	4b2a      	ldr	r3, [pc, #168]	; (2defc <init+0xf4>)
   2de52:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2de56:	f600 0028 	addw	r0, r0, #2088	; 0x828
   2de5a:	f00a fecb 	bl	38bf4 <z_impl_k_thread_create>
		err = at_cmd_write(CONFIG_NRF9160_GPS_MAGPIO_STRING,
   2de5e:	4623      	mov	r3, r4
   2de60:	4622      	mov	r2, r4
   2de62:	4621      	mov	r1, r4
   2de64:	4826      	ldr	r0, [pc, #152]	; (2df00 <init+0xf8>)
   2de66:	f7f9 fdf1 	bl	27a4c <at_cmd_write>
		if (err) {
   2de6a:	4c26      	ldr	r4, [pc, #152]	; (2df04 <init+0xfc>)
   2de6c:	4b26      	ldr	r3, [pc, #152]	; (2df08 <init+0x100>)
   2de6e:	4605      	mov	r5, r0
   2de70:	1ae4      	subs	r4, r4, r3
   2de72:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2de76:	b168      	cbz	r0, 2de94 <init+0x8c>
			LOG_ERR("Could not confiugure MAGPIO, error: %d", err);
   2de78:	f04f 0000 	mov.w	r0, #0
   2de7c:	2301      	movs	r3, #1
   2de7e:	462a      	mov	r2, r5
   2de80:	f363 0007 	bfi	r0, r3, #0, #8
   2de84:	4921      	ldr	r1, [pc, #132]	; (2df0c <init+0x104>)
   2de86:	f364 108f 	bfi	r0, r4, #6, #10
			LOG_ERR("Could not confiugure COEX0, error: %d", err);
   2de8a:	f00e fbfa 	bl	3c682 <log_string_sync>
}
   2de8e:	4628      	mov	r0, r5
   2de90:	b006      	add	sp, #24
   2de92:	bd70      	pop	{r4, r5, r6, pc}
		LOG_DBG("MAGPIO set: %s",
   2de94:	2304      	movs	r3, #4
   2de96:	f04f 0600 	mov.w	r6, #0
   2de9a:	4819      	ldr	r0, [pc, #100]	; (2df00 <init+0xf8>)
   2de9c:	f363 0607 	bfi	r6, r3, #0, #8
   2dea0:	f00e fc01 	bl	3c6a6 <log_strdup>
   2dea4:	f364 168f 	bfi	r6, r4, #6, #10
   2dea8:	4603      	mov	r3, r0
   2deaa:	4a19      	ldr	r2, [pc, #100]	; (2df10 <init+0x108>)
   2deac:	4919      	ldr	r1, [pc, #100]	; (2df14 <init+0x10c>)
   2deae:	4630      	mov	r0, r6
   2deb0:	f00e fbe7 	bl	3c682 <log_string_sync>
		err = at_cmd_write(CONFIG_NRF9160_GPS_COEX0_STRING,
   2deb4:	462b      	mov	r3, r5
   2deb6:	462a      	mov	r2, r5
   2deb8:	4629      	mov	r1, r5
   2deba:	4817      	ldr	r0, [pc, #92]	; (2df18 <init+0x110>)
   2debc:	f7f9 fdc6 	bl	27a4c <at_cmd_write>
		if (err) {
   2dec0:	4605      	mov	r5, r0
   2dec2:	b148      	cbz	r0, 2ded8 <init+0xd0>
			LOG_ERR("Could not confiugure COEX0, error: %d", err);
   2dec4:	f04f 0000 	mov.w	r0, #0
   2dec8:	2301      	movs	r3, #1
   2deca:	f363 0007 	bfi	r0, r3, #0, #8
   2dece:	f364 108f 	bfi	r0, r4, #6, #10
   2ded2:	462a      	mov	r2, r5
   2ded4:	4911      	ldr	r1, [pc, #68]	; (2df1c <init+0x114>)
   2ded6:	e7d8      	b.n	2de8a <init+0x82>
		LOG_DBG("COEX0 set: %s",
   2ded8:	2304      	movs	r3, #4
   2deda:	f04f 0600 	mov.w	r6, #0
   2dede:	480e      	ldr	r0, [pc, #56]	; (2df18 <init+0x110>)
   2dee0:	f363 0607 	bfi	r6, r3, #0, #8
   2dee4:	f00e fbdf 	bl	3c6a6 <log_strdup>
   2dee8:	f364 168f 	bfi	r6, r4, #6, #10
   2deec:	4603      	mov	r3, r0
   2deee:	4a08      	ldr	r2, [pc, #32]	; (2df10 <init+0x108>)
   2def0:	490b      	ldr	r1, [pc, #44]	; (2df20 <init+0x118>)
   2def2:	4630      	mov	r0, r6
   2def4:	f00e fbc5 	bl	3c682 <log_string_sync>
	return 0;
   2def8:	e7c9      	b.n	2de8e <init+0x86>
   2defa:	bf00      	nop
   2defc:	0002d939 	.word	0x0002d939
   2df00:	00046008 	.word	0x00046008
   2df04:	0004039c 	.word	0x0004039c
   2df08:	000402cc 	.word	0x000402cc
   2df0c:	00046027 	.word	0x00046027
   2df10:	00045eb8 	.word	0x00045eb8
   2df14:	0004604e 	.word	0x0004604e
   2df18:	00046061 	.word	0x00046061
   2df1c:	00046079 	.word	0x00046079
   2df20:	0004609f 	.word	0x0004609f

0002df24 <rpc_logobj_client_evt_handler>:
   2df24:	b120      	cbz	r0, 2df30 <rpc_logobj_client_evt_handler+0xc>
   2df26:	f850 1b08 	ldr.w	r1, [r0], #8
   2df2a:	0c09      	lsrs	r1, r1, #16
   2df2c:	f000 b852 	b.w	2dfd4 <logobj_event_handler>
   2df30:	4770      	bx	lr
   2df32:	bf00      	nop

0002df34 <rpc_logobj_client_init>:
   2df34:	4801      	ldr	r0, [pc, #4]	; (2df3c <rpc_logobj_client_init+0x8>)
   2df36:	f006 bc75 	b.w	34824 <rpc_client_register>
   2df3a:	bf00      	nop
   2df3c:	00040ce8 	.word	0x00040ce8

0002df40 <rpc_logobj_client_request_alloc>:
   2df40:	2300      	movs	r3, #0
   2df42:	b510      	push	{r4, lr}
   2df44:	b082      	sub	sp, #8
   2df46:	9301      	str	r3, [sp, #4]
   2df48:	b961      	cbnz	r1, 2df64 <rpc_logobj_client_request_alloc+0x24>
   2df4a:	b170      	cbz	r0, 2df6a <rpc_logobj_client_request_alloc+0x2a>
   2df4c:	4604      	mov	r4, r0
   2df4e:	aa01      	add	r2, sp, #4
   2df50:	2009      	movs	r0, #9
   2df52:	f006 fe9f 	bl	34c94 <rpc_message_alloc>
   2df56:	b918      	cbnz	r0, 2df60 <rpc_logobj_client_request_alloc+0x20>
   2df58:	9b01      	ldr	r3, [sp, #4]
   2df5a:	b10b      	cbz	r3, 2df60 <rpc_logobj_client_request_alloc+0x20>
   2df5c:	3308      	adds	r3, #8
   2df5e:	6023      	str	r3, [r4, #0]
   2df60:	b002      	add	sp, #8
   2df62:	bd10      	pop	{r4, pc}
   2df64:	200f      	movs	r0, #15
   2df66:	b002      	add	sp, #8
   2df68:	bd10      	pop	{r4, pc}
   2df6a:	200e      	movs	r0, #14
   2df6c:	b002      	add	sp, #8
   2df6e:	bd10      	pop	{r4, pc}

0002df70 <rpc_logobj_client_request_send>:
   2df70:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   2df74:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   2df78:	d10b      	bne.n	2df92 <rpc_logobj_client_request_send+0x22>
   2df7a:	b160      	cbz	r0, 2df96 <rpc_logobj_client_request_send+0x26>
   2df7c:	4603      	mov	r3, r0
   2df7e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2df82:	2009      	movs	r0, #9
   2df84:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2df88:	f843 1d08 	str.w	r1, [r3, #-8]!
   2df8c:	4619      	mov	r1, r3
   2df8e:	f006 be69 	b.w	34c64 <rpc_message_send>
   2df92:	200f      	movs	r0, #15
   2df94:	4770      	bx	lr
   2df96:	200e      	movs	r0, #14
   2df98:	4770      	bx	lr
   2df9a:	bf00      	nop

0002df9c <rpc_logobj_client_message_free>:
   2df9c:	b120      	cbz	r0, 2dfa8 <rpc_logobj_client_message_free+0xc>
   2df9e:	f1a0 0108 	sub.w	r1, r0, #8
   2dfa2:	2009      	movs	r0, #9
   2dfa4:	f006 bea8 	b.w	34cf8 <rpc_message_free>
   2dfa8:	200e      	movs	r0, #14
   2dfaa:	4770      	bx	lr

0002dfac <rpc_logobj_client_data_free>:
   2dfac:	b118      	cbz	r0, 2dfb6 <rpc_logobj_client_data_free+0xa>
   2dfae:	4601      	mov	r1, r0
   2dfb0:	2009      	movs	r0, #9
   2dfb2:	f006 bfb3 	b.w	34f1c <rpc_message_data_free>
   2dfb6:	200e      	movs	r0, #14
   2dfb8:	4770      	bx	lr
   2dfba:	bf00      	nop

0002dfbc <packet_free_cb>:
   2dfbc:	b510      	push	{r4, lr}
   2dfbe:	4604      	mov	r4, r0
   2dfc0:	6800      	ldr	r0, [r0, #0]
   2dfc2:	f7ff fff3 	bl	2dfac <rpc_logobj_client_data_free>
   2dfc6:	68a0      	ldr	r0, [r4, #8]
   2dfc8:	b118      	cbz	r0, 2dfd2 <packet_free_cb+0x16>
   2dfca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2dfce:	f001 b90f 	b.w	2f1f0 <nrf_free>
   2dfd2:	bd10      	pop	{r4, pc}

0002dfd4 <logobj_event_handler>:
   2dfd4:	b530      	push	{r4, r5, lr}
   2dfd6:	4b3b      	ldr	r3, [pc, #236]	; (2e0c4 <logobj_event_handler+0xf0>)
   2dfd8:	b085      	sub	sp, #20
   2dfda:	681d      	ldr	r5, [r3, #0]
   2dfdc:	2d00      	cmp	r5, #0
   2dfde:	d04c      	beq.n	2e07a <logobj_event_handler+0xa6>
   2dfe0:	f248 0302 	movw	r3, #32770	; 0x8002
   2dfe4:	4299      	cmp	r1, r3
   2dfe6:	d053      	beq.n	2e090 <logobj_event_handler+0xbc>
   2dfe8:	d91c      	bls.n	2e024 <logobj_event_handler+0x50>
   2dfea:	f248 0303 	movw	r3, #32771	; 0x8003
   2dfee:	4299      	cmp	r1, r3
   2dff0:	d05a      	beq.n	2e0a8 <logobj_event_handler+0xd4>
   2dff2:	f249 0301 	movw	r3, #36865	; 0x9001
   2dff6:	4299      	cmp	r1, r3
   2dff8:	d147      	bne.n	2e08a <logobj_event_handler+0xb6>
   2dffa:	2400      	movs	r4, #0
   2dffc:	6843      	ldr	r3, [r0, #4]
   2dffe:	6802      	ldr	r2, [r0, #0]
   2e000:	e9cd 4402 	strd	r4, r4, [sp, #8]
   2e004:	e9cd 2300 	strd	r2, r3, [sp]
   2e008:	69e8      	ldr	r0, [r5, #28]
   2e00a:	4669      	mov	r1, sp
   2e00c:	6803      	ldr	r3, [r0, #0]
   2e00e:	685b      	ldr	r3, [r3, #4]
   2e010:	4798      	blx	r3
   2e012:	3001      	adds	r0, #1
   2e014:	d04e      	beq.n	2e0b4 <logobj_event_handler+0xe0>
   2e016:	4620      	mov	r0, r4
   2e018:	682b      	ldr	r3, [r5, #0]
   2e01a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2e01e:	602b      	str	r3, [r5, #0]
   2e020:	b005      	add	sp, #20
   2e022:	bd30      	pop	{r4, r5, pc}
   2e024:	f248 0301 	movw	r3, #32769	; 0x8001
   2e028:	4299      	cmp	r1, r3
   2e02a:	d12e      	bne.n	2e08a <logobj_event_handler+0xb6>
   2e02c:	68c3      	ldr	r3, [r0, #12]
   2e02e:	2b00      	cmp	r3, #0
   2e030:	d135      	bne.n	2e09e <logobj_event_handler+0xca>
   2e032:	6828      	ldr	r0, [r5, #0]
   2e034:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   2e038:	d03e      	beq.n	2e0b8 <logobj_event_handler+0xe4>
   2e03a:	682b      	ldr	r3, [r5, #0]
   2e03c:	b29b      	uxth	r3, r3
   2e03e:	2b01      	cmp	r3, #1
   2e040:	d105      	bne.n	2e04e <logobj_event_handler+0x7a>
   2e042:	682b      	ldr	r3, [r5, #0]
   2e044:	0c1b      	lsrs	r3, r3, #16
   2e046:	041b      	lsls	r3, r3, #16
   2e048:	f043 0302 	orr.w	r3, r3, #2
   2e04c:	602b      	str	r3, [r5, #0]
   2e04e:	4b1e      	ldr	r3, [pc, #120]	; (2e0c8 <logobj_event_handler+0xf4>)
   2e050:	781a      	ldrb	r2, [r3, #0]
   2e052:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   2e056:	2a00      	cmp	r2, #0
   2e058:	d031      	beq.n	2e0be <logobj_event_handler+0xea>
   2e05a:	4a1c      	ldr	r2, [pc, #112]	; (2e0cc <logobj_event_handler+0xf8>)
   2e05c:	7811      	ldrb	r1, [r2, #0]
   2e05e:	b909      	cbnz	r1, 2e064 <logobj_event_handler+0x90>
   2e060:	2101      	movs	r1, #1
   2e062:	7011      	strb	r1, [r2, #0]
   2e064:	2000      	movs	r0, #0
   2e066:	7018      	strb	r0, [r3, #0]
   2e068:	682b      	ldr	r3, [r5, #0]
   2e06a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2e06e:	602b      	str	r3, [r5, #0]
   2e070:	682b      	ldr	r3, [r5, #0]
   2e072:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2e076:	602b      	str	r3, [r5, #0]
   2e078:	e7d2      	b.n	2e020 <logobj_event_handler+0x4c>
   2e07a:	6800      	ldr	r0, [r0, #0]
   2e07c:	2800      	cmp	r0, #0
   2e07e:	d0cf      	beq.n	2e020 <logobj_event_handler+0x4c>
   2e080:	f7ff ff94 	bl	2dfac <rpc_logobj_client_data_free>
   2e084:	4628      	mov	r0, r5
   2e086:	b005      	add	sp, #20
   2e088:	bd30      	pop	{r4, r5, pc}
   2e08a:	2000      	movs	r0, #0
   2e08c:	b005      	add	sp, #20
   2e08e:	bd30      	pop	{r4, r5, pc}
   2e090:	682b      	ldr	r3, [r5, #0]
   2e092:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   2e096:	d00b      	beq.n	2e0b0 <logobj_event_handler+0xdc>
   2e098:	68c0      	ldr	r0, [r0, #12]
   2e09a:	2800      	cmp	r0, #0
   2e09c:	d0e4      	beq.n	2e068 <logobj_event_handler+0x94>
   2e09e:	230e      	movs	r3, #14
   2e0a0:	2000      	movs	r0, #0
   2e0a2:	606b      	str	r3, [r5, #4]
   2e0a4:	b005      	add	sp, #20
   2e0a6:	bd30      	pop	{r4, r5, pc}
   2e0a8:	68c3      	ldr	r3, [r0, #12]
   2e0aa:	2b01      	cmp	r3, #1
   2e0ac:	d1a5      	bne.n	2dffa <logobj_event_handler+0x26>
   2e0ae:	e7f6      	b.n	2e09e <logobj_event_handler+0xca>
   2e0b0:	4618      	mov	r0, r3
   2e0b2:	e7b5      	b.n	2e020 <logobj_event_handler+0x4c>
   2e0b4:	2002      	movs	r0, #2
   2e0b6:	e7b3      	b.n	2e020 <logobj_event_handler+0x4c>
   2e0b8:	230e      	movs	r3, #14
   2e0ba:	606b      	str	r3, [r5, #4]
   2e0bc:	e7b0      	b.n	2e020 <logobj_event_handler+0x4c>
   2e0be:	4a03      	ldr	r2, [pc, #12]	; (2e0cc <logobj_event_handler+0xf8>)
   2e0c0:	7011      	strb	r1, [r2, #0]
   2e0c2:	e7cf      	b.n	2e064 <logobj_event_handler+0x90>
   2e0c4:	20024abc 	.word	0x20024abc
   2e0c8:	2002b9c4 	.word	0x2002b9c4
   2e0cc:	2002b9c5 	.word	0x2002b9c5

0002e0d0 <logobj_interface_init>:
   2e0d0:	2300      	movs	r3, #0
   2e0d2:	b510      	push	{r4, lr}
   2e0d4:	4907      	ldr	r1, [pc, #28]	; (2e0f4 <logobj_interface_init+0x24>)
   2e0d6:	4a08      	ldr	r2, [pc, #32]	; (2e0f8 <logobj_interface_init+0x28>)
   2e0d8:	4c08      	ldr	r4, [pc, #32]	; (2e0fc <logobj_interface_init+0x2c>)
   2e0da:	4809      	ldr	r0, [pc, #36]	; (2e100 <logobj_interface_init+0x30>)
   2e0dc:	7023      	strb	r3, [r4, #0]
   2e0de:	6003      	str	r3, [r0, #0]
   2e0e0:	700b      	strb	r3, [r1, #0]
   2e0e2:	6013      	str	r3, [r2, #0]
   2e0e4:	f7ff ff26 	bl	2df34 <rpc_logobj_client_init>
   2e0e8:	3000      	adds	r0, #0
   2e0ea:	bf18      	it	ne
   2e0ec:	2001      	movne	r0, #1
   2e0ee:	4240      	negs	r0, r0
   2e0f0:	bd10      	pop	{r4, pc}
   2e0f2:	bf00      	nop
   2e0f4:	2002b9c4 	.word	0x2002b9c4
   2e0f8:	20024ab8 	.word	0x20024ab8
   2e0fc:	2002b9c5 	.word	0x2002b9c5
   2e100:	20024abc 	.word	0x20024abc

0002e104 <logobj_interface_open>:
   2e104:	2300      	movs	r3, #0
   2e106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e10a:	2866      	cmp	r0, #102	; 0x66
   2e10c:	b082      	sub	sp, #8
   2e10e:	9300      	str	r3, [sp, #0]
   2e110:	d172      	bne.n	2e1f8 <logobj_interface_open+0xf4>
   2e112:	2902      	cmp	r1, #2
   2e114:	4689      	mov	r9, r1
   2e116:	d16f      	bne.n	2e1f8 <logobj_interface_open+0xf4>
   2e118:	f240 2305 	movw	r3, #517	; 0x205
   2e11c:	429a      	cmp	r2, r3
   2e11e:	4692      	mov	sl, r2
   2e120:	d16a      	bne.n	2e1f8 <logobj_interface_open+0xf4>
   2e122:	4f48      	ldr	r7, [pc, #288]	; (2e244 <logobj_interface_open+0x140>)
   2e124:	683d      	ldr	r5, [r7, #0]
   2e126:	2d00      	cmp	r5, #0
   2e128:	d17c      	bne.n	2e224 <logobj_interface_open+0x120>
   2e12a:	4680      	mov	r8, r0
   2e12c:	4a46      	ldr	r2, [pc, #280]	; (2e248 <logobj_interface_open+0x144>)
   2e12e:	4668      	mov	r0, sp
   2e130:	f006 f8f4 	bl	3431c <interface_socket_allocate>
   2e134:	9b00      	ldr	r3, [sp, #0]
   2e136:	4606      	mov	r6, r0
   2e138:	2b00      	cmp	r3, #0
   2e13a:	d07d      	beq.n	2e238 <logobj_interface_open+0x134>
   2e13c:	4629      	mov	r1, r5
   2e13e:	2204      	movs	r2, #4
   2e140:	4842      	ldr	r0, [pc, #264]	; (2e24c <logobj_interface_open+0x148>)
   2e142:	603b      	str	r3, [r7, #0]
   2e144:	f010 fde1 	bl	3ed0a <memset>
   2e148:	9c00      	ldr	r4, [sp, #0]
   2e14a:	4629      	mov	r1, r5
   2e14c:	e9c4 8903 	strd	r8, r9, [r4, #12]
   2e150:	f8c4 a014 	str.w	sl, [r4, #20]
   2e154:	a801      	add	r0, sp, #4
   2e156:	f7ff fef3 	bl	2df40 <rpc_logobj_client_request_alloc>
   2e15a:	2800      	cmp	r0, #0
   2e15c:	d13c      	bne.n	2e1d8 <logobj_interface_open+0xd4>
   2e15e:	2201      	movs	r2, #1
   2e160:	2104      	movs	r1, #4
   2e162:	9b01      	ldr	r3, [sp, #4]
   2e164:	4d3a      	ldr	r5, [pc, #232]	; (2e250 <logobj_interface_open+0x14c>)
   2e166:	7358      	strb	r0, [r3, #13]
   2e168:	7398      	strb	r0, [r3, #14]
   2e16a:	73d8      	strb	r0, [r3, #15]
   2e16c:	7258      	strb	r0, [r3, #9]
   2e16e:	7298      	strb	r0, [r3, #10]
   2e170:	72d8      	strb	r0, [r3, #11]
   2e172:	7219      	strb	r1, [r3, #8]
   2e174:	702a      	strb	r2, [r5, #0]
   2e176:	731a      	strb	r2, [r3, #12]
   2e178:	6822      	ldr	r2, [r4, #0]
   2e17a:	4618      	mov	r0, r3
   2e17c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   2e180:	6022      	str	r2, [r4, #0]
   2e182:	f247 0101 	movw	r1, #28673	; 0x7001
   2e186:	f7ff fef3 	bl	2df70 <rpc_logobj_client_request_send>
   2e18a:	bb38      	cbnz	r0, 2e1dc <logobj_interface_open+0xd8>
   2e18c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2e190:	f04f 33ff 	mov.w	r3, #4294967295
   2e194:	4611      	mov	r1, r2
   2e196:	4630      	mov	r0, r6
   2e198:	f006 f96c 	bl	34474 <interface_socket_wait>
   2e19c:	4604      	mov	r4, r0
   2e19e:	b310      	cbz	r0, 2e1e6 <logobj_interface_open+0xe2>
   2e1a0:	9a00      	ldr	r2, [sp, #0]
   2e1a2:	2e00      	cmp	r6, #0
   2e1a4:	6813      	ldr	r3, [r2, #0]
   2e1a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e1aa:	6013      	str	r3, [r2, #0]
   2e1ac:	9a00      	ldr	r2, [sp, #0]
   2e1ae:	6813      	ldr	r3, [r2, #0]
   2e1b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2e1b4:	6013      	str	r3, [r2, #0]
   2e1b6:	9a00      	ldr	r2, [sp, #0]
   2e1b8:	6813      	ldr	r3, [r2, #0]
   2e1ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2e1be:	6013      	str	r3, [r2, #0]
   2e1c0:	da36      	bge.n	2e230 <logobj_interface_open+0x12c>
   2e1c2:	2300      	movs	r3, #0
   2e1c4:	4620      	mov	r0, r4
   2e1c6:	603b      	str	r3, [r7, #0]
   2e1c8:	f04f 36ff 	mov.w	r6, #4294967295
   2e1cc:	f7f8 fcd0 	bl	26b70 <bsd_os_errno_set>
   2e1d0:	4630      	mov	r0, r6
   2e1d2:	b002      	add	sp, #8
   2e1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e1d8:	240c      	movs	r4, #12
   2e1da:	e7e1      	b.n	2e1a0 <logobj_interface_open+0x9c>
   2e1dc:	9801      	ldr	r0, [sp, #4]
   2e1de:	f7ff fedd 	bl	2df9c <rpc_logobj_client_message_free>
   2e1e2:	2405      	movs	r4, #5
   2e1e4:	e7dc      	b.n	2e1a0 <logobj_interface_open+0x9c>
   2e1e6:	4630      	mov	r0, r6
   2e1e8:	f006 f9b8 	bl	3455c <interface_socket_from_handle_get>
   2e1ec:	b150      	cbz	r0, 2e204 <logobj_interface_open+0x100>
   2e1ee:	6844      	ldr	r4, [r0, #4]
   2e1f0:	b144      	cbz	r4, 2e204 <logobj_interface_open+0x100>
   2e1f2:	2300      	movs	r3, #0
   2e1f4:	6043      	str	r3, [r0, #4]
   2e1f6:	e7d3      	b.n	2e1a0 <logobj_interface_open+0x9c>
   2e1f8:	2016      	movs	r0, #22
   2e1fa:	f7f8 fcb9 	bl	26b70 <bsd_os_errno_set>
   2e1fe:	f04f 36ff 	mov.w	r6, #4294967295
   2e202:	e7e5      	b.n	2e1d0 <logobj_interface_open+0xcc>
   2e204:	9a00      	ldr	r2, [sp, #0]
   2e206:	6813      	ldr	r3, [r2, #0]
   2e208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e20c:	6013      	str	r3, [r2, #0]
   2e20e:	9a00      	ldr	r2, [sp, #0]
   2e210:	6813      	ldr	r3, [r2, #0]
   2e212:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2e216:	6013      	str	r3, [r2, #0]
   2e218:	9a00      	ldr	r2, [sp, #0]
   2e21a:	6813      	ldr	r3, [r2, #0]
   2e21c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2e220:	6013      	str	r3, [r2, #0]
   2e222:	e7d5      	b.n	2e1d0 <logobj_interface_open+0xcc>
   2e224:	2001      	movs	r0, #1
   2e226:	f7f8 fca3 	bl	26b70 <bsd_os_errno_set>
   2e22a:	f04f 36ff 	mov.w	r6, #4294967295
   2e22e:	e7cf      	b.n	2e1d0 <logobj_interface_open+0xcc>
   2e230:	4630      	mov	r0, r6
   2e232:	f006 f8d1 	bl	343d8 <interface_socket_free>
   2e236:	e7c4      	b.n	2e1c2 <logobj_interface_open+0xbe>
   2e238:	2018      	movs	r0, #24
   2e23a:	f7f8 fc99 	bl	26b70 <bsd_os_errno_set>
   2e23e:	f04f 36ff 	mov.w	r6, #4294967295
   2e242:	e7c5      	b.n	2e1d0 <logobj_interface_open+0xcc>
   2e244:	20024abc 	.word	0x20024abc
   2e248:	0002dfbd 	.word	0x0002dfbd
   2e24c:	20024ab8 	.word	0x20024ab8
   2e250:	2002b9c4 	.word	0x2002b9c4

0002e254 <logobj_interface_read>:
   2e254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e258:	b085      	sub	sp, #20
   2e25a:	2900      	cmp	r1, #0
   2e25c:	d05e      	beq.n	2e31c <logobj_interface_read+0xc8>
   2e25e:	2a00      	cmp	r2, #0
   2e260:	4616      	mov	r6, r2
   2e262:	dd5b      	ble.n	2e31c <logobj_interface_read+0xc8>
   2e264:	461f      	mov	r7, r3
   2e266:	4680      	mov	r8, r0
   2e268:	460d      	mov	r5, r1
   2e26a:	f006 f977 	bl	3455c <interface_socket_from_handle_get>
   2e26e:	4604      	mov	r4, r0
   2e270:	2800      	cmp	r0, #0
   2e272:	d059      	beq.n	2e328 <logobj_interface_read+0xd4>
   2e274:	69c0      	ldr	r0, [r0, #28]
   2e276:	07ba      	lsls	r2, r7, #30
   2e278:	6803      	ldr	r3, [r0, #0]
   2e27a:	68db      	ldr	r3, [r3, #12]
   2e27c:	d524      	bpl.n	2e2c8 <logobj_interface_read+0x74>
   2e27e:	4798      	blx	r3
   2e280:	3001      	adds	r0, #1
   2e282:	d03b      	beq.n	2e2fc <logobj_interface_read+0xa8>
   2e284:	6823      	ldr	r3, [r4, #0]
   2e286:	69e0      	ldr	r0, [r4, #28]
   2e288:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   2e28c:	d038      	beq.n	2e300 <logobj_interface_read+0xac>
   2e28e:	2100      	movs	r1, #0
   2e290:	6823      	ldr	r3, [r4, #0]
   2e292:	463a      	mov	r2, r7
   2e294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2e298:	6023      	str	r3, [r4, #0]
   2e29a:	e9cd 1102 	strd	r1, r1, [sp, #8]
   2e29e:	e9cd 5600 	strd	r5, r6, [sp]
   2e2a2:	6803      	ldr	r3, [r0, #0]
   2e2a4:	4669      	mov	r1, sp
   2e2a6:	689b      	ldr	r3, [r3, #8]
   2e2a8:	4798      	blx	r3
   2e2aa:	4605      	mov	r5, r0
   2e2ac:	69e0      	ldr	r0, [r4, #28]
   2e2ae:	6803      	ldr	r3, [r0, #0]
   2e2b0:	68db      	ldr	r3, [r3, #12]
   2e2b2:	4798      	blx	r3
   2e2b4:	3001      	adds	r0, #1
   2e2b6:	d003      	beq.n	2e2c0 <logobj_interface_read+0x6c>
   2e2b8:	6823      	ldr	r3, [r4, #0]
   2e2ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2e2be:	6023      	str	r3, [r4, #0]
   2e2c0:	4628      	mov	r0, r5
   2e2c2:	b005      	add	sp, #20
   2e2c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e2c8:	6822      	ldr	r2, [r4, #0]
   2e2ca:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   2e2ce:	d1d6      	bne.n	2e27e <logobj_interface_read+0x2a>
   2e2d0:	4798      	blx	r3
   2e2d2:	1c43      	adds	r3, r0, #1
   2e2d4:	d1d6      	bne.n	2e284 <logobj_interface_read+0x30>
   2e2d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2e2da:	6a23      	ldr	r3, [r4, #32]
   2e2dc:	4611      	mov	r1, r2
   2e2de:	2b00      	cmp	r3, #0
   2e2e0:	bf08      	it	eq
   2e2e2:	4603      	moveq	r3, r0
   2e2e4:	4640      	mov	r0, r8
   2e2e6:	f006 f8c5 	bl	34474 <interface_socket_wait>
   2e2ea:	b158      	cbz	r0, 2e304 <logobj_interface_read+0xb0>
   2e2ec:	f04f 35ff 	mov.w	r5, #4294967295
   2e2f0:	f7f8 fc3e 	bl	26b70 <bsd_os_errno_set>
   2e2f4:	4628      	mov	r0, r5
   2e2f6:	b005      	add	sp, #20
   2e2f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e2fc:	2023      	movs	r0, #35	; 0x23
   2e2fe:	e7f5      	b.n	2e2ec <logobj_interface_read+0x98>
   2e300:	461d      	mov	r5, r3
   2e302:	e7d4      	b.n	2e2ae <logobj_interface_read+0x5a>
   2e304:	4640      	mov	r0, r8
   2e306:	f006 f929 	bl	3455c <interface_socket_from_handle_get>
   2e30a:	4603      	mov	r3, r0
   2e30c:	2800      	cmp	r0, #0
   2e30e:	d0b9      	beq.n	2e284 <logobj_interface_read+0x30>
   2e310:	6840      	ldr	r0, [r0, #4]
   2e312:	2800      	cmp	r0, #0
   2e314:	d0b6      	beq.n	2e284 <logobj_interface_read+0x30>
   2e316:	f8c3 9004 	str.w	r9, [r3, #4]
   2e31a:	e7e7      	b.n	2e2ec <logobj_interface_read+0x98>
   2e31c:	2016      	movs	r0, #22
   2e31e:	f7f8 fc27 	bl	26b70 <bsd_os_errno_set>
   2e322:	f04f 35ff 	mov.w	r5, #4294967295
   2e326:	e7cb      	b.n	2e2c0 <logobj_interface_read+0x6c>
   2e328:	2009      	movs	r0, #9
   2e32a:	f7f8 fc21 	bl	26b70 <bsd_os_errno_set>
   2e32e:	f04f 35ff 	mov.w	r5, #4294967295
   2e332:	e7c5      	b.n	2e2c0 <logobj_interface_read+0x6c>

0002e334 <logobj_interface_write>:
   2e334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e338:	b082      	sub	sp, #8
   2e33a:	2900      	cmp	r1, #0
   2e33c:	d05b      	beq.n	2e3f6 <logobj_interface_write+0xc2>
   2e33e:	2a04      	cmp	r2, #4
   2e340:	d159      	bne.n	2e3f6 <logobj_interface_write+0xc2>
   2e342:	461e      	mov	r6, r3
   2e344:	4607      	mov	r7, r0
   2e346:	460d      	mov	r5, r1
   2e348:	f006 f908 	bl	3455c <interface_socket_from_handle_get>
   2e34c:	4604      	mov	r4, r0
   2e34e:	2800      	cmp	r0, #0
   2e350:	d067      	beq.n	2e422 <logobj_interface_write+0xee>
   2e352:	07b0      	lsls	r0, r6, #30
   2e354:	d526      	bpl.n	2e3a4 <logobj_interface_write+0x70>
   2e356:	6823      	ldr	r3, [r4, #0]
   2e358:	039b      	lsls	r3, r3, #14
   2e35a:	d55e      	bpl.n	2e41a <logobj_interface_write+0xe6>
   2e35c:	2600      	movs	r6, #0
   2e35e:	6823      	ldr	r3, [r4, #0]
   2e360:	2100      	movs	r1, #0
   2e362:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2e366:	6023      	str	r3, [r4, #0]
   2e368:	a801      	add	r0, sp, #4
   2e36a:	f8d5 8000 	ldr.w	r8, [r5]
   2e36e:	f7ff fde7 	bl	2df40 <rpc_logobj_client_request_alloc>
   2e372:	b9f8      	cbnz	r0, 2e3b4 <logobj_interface_write+0x80>
   2e374:	2504      	movs	r5, #4
   2e376:	9b01      	ldr	r3, [sp, #4]
   2e378:	f247 0103 	movw	r1, #28675	; 0x7003
   2e37c:	f8c3 800c 	str.w	r8, [r3, #12]
   2e380:	7258      	strb	r0, [r3, #9]
   2e382:	7298      	strb	r0, [r3, #10]
   2e384:	72d8      	strb	r0, [r3, #11]
   2e386:	721d      	strb	r5, [r3, #8]
   2e388:	4618      	mov	r0, r3
   2e38a:	f7ff fdf1 	bl	2df70 <rpc_logobj_client_request_send>
   2e38e:	4680      	mov	r8, r0
   2e390:	bb40      	cbnz	r0, 2e3e4 <logobj_interface_write+0xb0>
   2e392:	b9ce      	cbnz	r6, 2e3c8 <logobj_interface_write+0x94>
   2e394:	4628      	mov	r0, r5
   2e396:	6823      	ldr	r3, [r4, #0]
   2e398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e39c:	6023      	str	r3, [r4, #0]
   2e39e:	b002      	add	sp, #8
   2e3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e3a4:	6823      	ldr	r3, [r4, #0]
   2e3a6:	00d9      	lsls	r1, r3, #3
   2e3a8:	d4d5      	bmi.n	2e356 <logobj_interface_write+0x22>
   2e3aa:	6823      	ldr	r3, [r4, #0]
   2e3ac:	039a      	lsls	r2, r3, #14
   2e3ae:	d536      	bpl.n	2e41e <logobj_interface_write+0xea>
   2e3b0:	2601      	movs	r6, #1
   2e3b2:	e7d4      	b.n	2e35e <logobj_interface_write+0x2a>
   2e3b4:	200c      	movs	r0, #12
   2e3b6:	6823      	ldr	r3, [r4, #0]
   2e3b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e3bc:	6023      	str	r3, [r4, #0]
   2e3be:	f7f8 fbd7 	bl	26b70 <bsd_os_errno_set>
   2e3c2:	f04f 30ff 	mov.w	r0, #4294967295
   2e3c6:	e7ea      	b.n	2e39e <logobj_interface_write+0x6a>
   2e3c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2e3cc:	f04f 33ff 	mov.w	r3, #4294967295
   2e3d0:	4611      	mov	r1, r2
   2e3d2:	4638      	mov	r0, r7
   2e3d4:	f006 f84e 	bl	34474 <interface_socket_wait>
   2e3d8:	b198      	cbz	r0, 2e402 <logobj_interface_write+0xce>
   2e3da:	6823      	ldr	r3, [r4, #0]
   2e3dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e3e0:	6023      	str	r3, [r4, #0]
   2e3e2:	e7ec      	b.n	2e3be <logobj_interface_write+0x8a>
   2e3e4:	9801      	ldr	r0, [sp, #4]
   2e3e6:	f7ff fdd9 	bl	2df9c <rpc_logobj_client_message_free>
   2e3ea:	6823      	ldr	r3, [r4, #0]
   2e3ec:	2005      	movs	r0, #5
   2e3ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e3f2:	6023      	str	r3, [r4, #0]
   2e3f4:	e7e3      	b.n	2e3be <logobj_interface_write+0x8a>
   2e3f6:	2016      	movs	r0, #22
   2e3f8:	f7f8 fbba 	bl	26b70 <bsd_os_errno_set>
   2e3fc:	f04f 30ff 	mov.w	r0, #4294967295
   2e400:	e7cd      	b.n	2e39e <logobj_interface_write+0x6a>
   2e402:	4638      	mov	r0, r7
   2e404:	f006 f8aa 	bl	3455c <interface_socket_from_handle_get>
   2e408:	4603      	mov	r3, r0
   2e40a:	2800      	cmp	r0, #0
   2e40c:	d0c2      	beq.n	2e394 <logobj_interface_write+0x60>
   2e40e:	6840      	ldr	r0, [r0, #4]
   2e410:	2800      	cmp	r0, #0
   2e412:	d0bf      	beq.n	2e394 <logobj_interface_write+0x60>
   2e414:	f8c3 8004 	str.w	r8, [r3, #4]
   2e418:	e7df      	b.n	2e3da <logobj_interface_write+0xa6>
   2e41a:	2073      	movs	r0, #115	; 0x73
   2e41c:	e7cf      	b.n	2e3be <logobj_interface_write+0x8a>
   2e41e:	2009      	movs	r0, #9
   2e420:	e7cd      	b.n	2e3be <logobj_interface_write+0x8a>
   2e422:	2009      	movs	r0, #9
   2e424:	f7f8 fba4 	bl	26b70 <bsd_os_errno_set>
   2e428:	f04f 30ff 	mov.w	r0, #4294967295
   2e42c:	e7b7      	b.n	2e39e <logobj_interface_write+0x6a>
   2e42e:	bf00      	nop

0002e430 <logobj_interface_setopt>:
   2e430:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e432:	2901      	cmp	r1, #1
   2e434:	b085      	sub	sp, #20
   2e436:	d068      	beq.n	2e50a <logobj_interface_setopt+0xda>
   2e438:	461e      	mov	r6, r3
   2e43a:	f240 2305 	movw	r3, #517	; 0x205
   2e43e:	4299      	cmp	r1, r3
   2e440:	f040 8095 	bne.w	2e56e <logobj_interface_setopt+0x13e>
   2e444:	4607      	mov	r7, r0
   2e446:	4615      	mov	r5, r2
   2e448:	f006 f888 	bl	3455c <interface_socket_from_handle_get>
   2e44c:	4604      	mov	r4, r0
   2e44e:	2800      	cmp	r0, #0
   2e450:	f000 80b2 	beq.w	2e5b8 <logobj_interface_setopt+0x188>
   2e454:	2d01      	cmp	r5, #1
   2e456:	d019      	beq.n	2e48c <logobj_interface_setopt+0x5c>
   2e458:	2d02      	cmp	r5, #2
   2e45a:	d010      	beq.n	2e47e <logobj_interface_setopt+0x4e>
   2e45c:	252a      	movs	r5, #42	; 0x2a
   2e45e:	6803      	ldr	r3, [r0, #0]
   2e460:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2e464:	6023      	str	r3, [r4, #0]
   2e466:	6823      	ldr	r3, [r4, #0]
   2e468:	4628      	mov	r0, r5
   2e46a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2e46e:	6023      	str	r3, [r4, #0]
   2e470:	f7f8 fb7e 	bl	26b70 <bsd_os_errno_set>
   2e474:	f04f 35ff 	mov.w	r5, #4294967295
   2e478:	4628      	mov	r0, r5
   2e47a:	b005      	add	sp, #20
   2e47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e47e:	b116      	cbz	r6, 2e486 <logobj_interface_setopt+0x56>
   2e480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e482:	2b01      	cmp	r3, #1
   2e484:	d049      	beq.n	2e51a <logobj_interface_setopt+0xea>
   2e486:	6823      	ldr	r3, [r4, #0]
   2e488:	2516      	movs	r5, #22
   2e48a:	e7e9      	b.n	2e460 <logobj_interface_setopt+0x30>
   2e48c:	2e00      	cmp	r6, #0
   2e48e:	d0fa      	beq.n	2e486 <logobj_interface_setopt+0x56>
   2e490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e492:	2b04      	cmp	r3, #4
   2e494:	d1f7      	bne.n	2e486 <logobj_interface_setopt+0x56>
   2e496:	2100      	movs	r1, #0
   2e498:	a803      	add	r0, sp, #12
   2e49a:	f7ff fd51 	bl	2df40 <rpc_logobj_client_request_alloc>
   2e49e:	4605      	mov	r5, r0
   2e4a0:	2800      	cmp	r0, #0
   2e4a2:	d16a      	bne.n	2e57a <logobj_interface_setopt+0x14a>
   2e4a4:	9803      	ldr	r0, [sp, #12]
   2e4a6:	2208      	movs	r2, #8
   2e4a8:	4629      	mov	r1, r5
   2e4aa:	300c      	adds	r0, #12
   2e4ac:	f010 fc2d 	bl	3ed0a <memset>
   2e4b0:	9803      	ldr	r0, [sp, #12]
   2e4b2:	4631      	mov	r1, r6
   2e4b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2e4b6:	300c      	adds	r0, #12
   2e4b8:	f010 fc07 	bl	3ecca <memcpy>
   2e4bc:	2308      	movs	r3, #8
   2e4be:	9803      	ldr	r0, [sp, #12]
   2e4c0:	f247 0102 	movw	r1, #28674	; 0x7002
   2e4c4:	7203      	strb	r3, [r0, #8]
   2e4c6:	7245      	strb	r5, [r0, #9]
   2e4c8:	7285      	strb	r5, [r0, #10]
   2e4ca:	72c5      	strb	r5, [r0, #11]
   2e4cc:	6823      	ldr	r3, [r4, #0]
   2e4ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2e4d2:	6023      	str	r3, [r4, #0]
   2e4d4:	f7ff fd4c 	bl	2df70 <rpc_logobj_client_request_send>
   2e4d8:	2800      	cmp	r0, #0
   2e4da:	d151      	bne.n	2e580 <logobj_interface_setopt+0x150>
   2e4dc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2e4e0:	f04f 33ff 	mov.w	r3, #4294967295
   2e4e4:	4611      	mov	r1, r2
   2e4e6:	4638      	mov	r0, r7
   2e4e8:	f005 ffc4 	bl	34474 <interface_socket_wait>
   2e4ec:	4605      	mov	r5, r0
   2e4ee:	2800      	cmp	r0, #0
   2e4f0:	d13b      	bne.n	2e56a <logobj_interface_setopt+0x13a>
   2e4f2:	4638      	mov	r0, r7
   2e4f4:	f006 f832 	bl	3455c <interface_socket_from_handle_get>
   2e4f8:	2800      	cmp	r0, #0
   2e4fa:	d04f      	beq.n	2e59c <logobj_interface_setopt+0x16c>
   2e4fc:	6843      	ldr	r3, [r0, #4]
   2e4fe:	2b00      	cmp	r3, #0
   2e500:	d04c      	beq.n	2e59c <logobj_interface_setopt+0x16c>
   2e502:	2200      	movs	r2, #0
   2e504:	461d      	mov	r5, r3
   2e506:	6042      	str	r2, [r0, #4]
   2e508:	e02f      	b.n	2e56a <logobj_interface_setopt+0x13a>
   2e50a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2e50c:	9400      	str	r4, [sp, #0]
   2e50e:	f006 f84d 	bl	345ac <interface_socket_setopt>
   2e512:	4605      	mov	r5, r0
   2e514:	4628      	mov	r0, r5
   2e516:	b005      	add	sp, #20
   2e518:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e51a:	2100      	movs	r1, #0
   2e51c:	a803      	add	r0, sp, #12
   2e51e:	7835      	ldrb	r5, [r6, #0]
   2e520:	f7ff fd0e 	bl	2df40 <rpc_logobj_client_request_alloc>
   2e524:	bb48      	cbnz	r0, 2e57a <logobj_interface_setopt+0x14a>
   2e526:	2d01      	cmp	r5, #1
   2e528:	bf08      	it	eq
   2e52a:	4b26      	ldreq	r3, [pc, #152]	; (2e5c4 <logobj_interface_setopt+0x194>)
   2e52c:	f04f 0204 	mov.w	r2, #4
   2e530:	bf08      	it	eq
   2e532:	701d      	strbeq	r5, [r3, #0]
   2e534:	2300      	movs	r3, #0
   2e536:	9803      	ldr	r0, [sp, #12]
   2e538:	f247 0101 	movw	r1, #28673	; 0x7001
   2e53c:	7243      	strb	r3, [r0, #9]
   2e53e:	60c5      	str	r5, [r0, #12]
   2e540:	7283      	strb	r3, [r0, #10]
   2e542:	72c3      	strb	r3, [r0, #11]
   2e544:	7202      	strb	r2, [r0, #8]
   2e546:	6823      	ldr	r3, [r4, #0]
   2e548:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2e54c:	6023      	str	r3, [r4, #0]
   2e54e:	f7ff fd0f 	bl	2df70 <rpc_logobj_client_request_send>
   2e552:	4606      	mov	r6, r0
   2e554:	b9a0      	cbnz	r0, 2e580 <logobj_interface_setopt+0x150>
   2e556:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2e55a:	f04f 33ff 	mov.w	r3, #4294967295
   2e55e:	4611      	mov	r1, r2
   2e560:	4638      	mov	r0, r7
   2e562:	f005 ff87 	bl	34474 <interface_socket_wait>
   2e566:	4605      	mov	r5, r0
   2e568:	b180      	cbz	r0, 2e58c <logobj_interface_setopt+0x15c>
   2e56a:	6823      	ldr	r3, [r4, #0]
   2e56c:	e778      	b.n	2e460 <logobj_interface_setopt+0x30>
   2e56e:	202a      	movs	r0, #42	; 0x2a
   2e570:	f7f8 fafe 	bl	26b70 <bsd_os_errno_set>
   2e574:	f04f 35ff 	mov.w	r5, #4294967295
   2e578:	e77e      	b.n	2e478 <logobj_interface_setopt+0x48>
   2e57a:	6823      	ldr	r3, [r4, #0]
   2e57c:	250c      	movs	r5, #12
   2e57e:	e76f      	b.n	2e460 <logobj_interface_setopt+0x30>
   2e580:	9803      	ldr	r0, [sp, #12]
   2e582:	f7ff fd0b 	bl	2df9c <rpc_logobj_client_message_free>
   2e586:	2505      	movs	r5, #5
   2e588:	6823      	ldr	r3, [r4, #0]
   2e58a:	e769      	b.n	2e460 <logobj_interface_setopt+0x30>
   2e58c:	4638      	mov	r0, r7
   2e58e:	f005 ffe5 	bl	3455c <interface_socket_from_handle_get>
   2e592:	b140      	cbz	r0, 2e5a6 <logobj_interface_setopt+0x176>
   2e594:	6845      	ldr	r5, [r0, #4]
   2e596:	b135      	cbz	r5, 2e5a6 <logobj_interface_setopt+0x176>
   2e598:	6046      	str	r6, [r0, #4]
   2e59a:	e7e6      	b.n	2e56a <logobj_interface_setopt+0x13a>
   2e59c:	4631      	mov	r1, r6
   2e59e:	2204      	movs	r2, #4
   2e5a0:	4809      	ldr	r0, [pc, #36]	; (2e5c8 <logobj_interface_setopt+0x198>)
   2e5a2:	f010 fb92 	bl	3ecca <memcpy>
   2e5a6:	6823      	ldr	r3, [r4, #0]
   2e5a8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2e5ac:	6023      	str	r3, [r4, #0]
   2e5ae:	6823      	ldr	r3, [r4, #0]
   2e5b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2e5b4:	6023      	str	r3, [r4, #0]
   2e5b6:	e75f      	b.n	2e478 <logobj_interface_setopt+0x48>
   2e5b8:	2009      	movs	r0, #9
   2e5ba:	f7f8 fad9 	bl	26b70 <bsd_os_errno_set>
   2e5be:	f04f 35ff 	mov.w	r5, #4294967295
   2e5c2:	e759      	b.n	2e478 <logobj_interface_setopt+0x48>
   2e5c4:	2002b9c4 	.word	0x2002b9c4
   2e5c8:	20024ab8 	.word	0x20024ab8

0002e5cc <logobj_interface_getopt>:
   2e5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e5ce:	2901      	cmp	r1, #1
   2e5d0:	b083      	sub	sp, #12
   2e5d2:	9e08      	ldr	r6, [sp, #32]
   2e5d4:	d030      	beq.n	2e638 <logobj_interface_getopt+0x6c>
   2e5d6:	461f      	mov	r7, r3
   2e5d8:	f240 2305 	movw	r3, #517	; 0x205
   2e5dc:	4299      	cmp	r1, r3
   2e5de:	d134      	bne.n	2e64a <logobj_interface_getopt+0x7e>
   2e5e0:	4615      	mov	r5, r2
   2e5e2:	f005 ffbb 	bl	3455c <interface_socket_from_handle_get>
   2e5e6:	2800      	cmp	r0, #0
   2e5e8:	d037      	beq.n	2e65a <logobj_interface_getopt+0x8e>
   2e5ea:	2d01      	cmp	r5, #1
   2e5ec:	d015      	beq.n	2e61a <logobj_interface_getopt+0x4e>
   2e5ee:	2d02      	cmp	r5, #2
   2e5f0:	d10b      	bne.n	2e60a <logobj_interface_getopt+0x3e>
   2e5f2:	b387      	cbz	r7, 2e656 <logobj_interface_getopt+0x8a>
   2e5f4:	6833      	ldr	r3, [r6, #0]
   2e5f6:	b373      	cbz	r3, 2e656 <logobj_interface_getopt+0x8a>
   2e5f8:	2300      	movs	r3, #0
   2e5fa:	2201      	movs	r2, #1
   2e5fc:	4618      	mov	r0, r3
   2e5fe:	491a      	ldr	r1, [pc, #104]	; (2e668 <logobj_interface_getopt+0x9c>)
   2e600:	7809      	ldrb	r1, [r1, #0]
   2e602:	7039      	strb	r1, [r7, #0]
   2e604:	6032      	str	r2, [r6, #0]
   2e606:	b003      	add	sp, #12
   2e608:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e60a:	2009      	movs	r0, #9
   2e60c:	f7f8 fab0 	bl	26b70 <bsd_os_errno_set>
   2e610:	f04f 33ff 	mov.w	r3, #4294967295
   2e614:	4618      	mov	r0, r3
   2e616:	b003      	add	sp, #12
   2e618:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e61a:	b1e7      	cbz	r7, 2e656 <logobj_interface_getopt+0x8a>
   2e61c:	6833      	ldr	r3, [r6, #0]
   2e61e:	2b03      	cmp	r3, #3
   2e620:	d919      	bls.n	2e656 <logobj_interface_getopt+0x8a>
   2e622:	4638      	mov	r0, r7
   2e624:	2204      	movs	r2, #4
   2e626:	4911      	ldr	r1, [pc, #68]	; (2e66c <logobj_interface_getopt+0xa0>)
   2e628:	f010 fb4f 	bl	3ecca <memcpy>
   2e62c:	2300      	movs	r3, #0
   2e62e:	2204      	movs	r2, #4
   2e630:	4618      	mov	r0, r3
   2e632:	6032      	str	r2, [r6, #0]
   2e634:	b003      	add	sp, #12
   2e636:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e638:	9600      	str	r6, [sp, #0]
   2e63a:	f005 ffed 	bl	34618 <interface_socket_getopt>
   2e63e:	4603      	mov	r3, r0
   2e640:	2800      	cmp	r0, #0
   2e642:	d1e3      	bne.n	2e60c <logobj_interface_getopt+0x40>
   2e644:	4618      	mov	r0, r3
   2e646:	b003      	add	sp, #12
   2e648:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e64a:	202a      	movs	r0, #42	; 0x2a
   2e64c:	f7f8 fa90 	bl	26b70 <bsd_os_errno_set>
   2e650:	f04f 33ff 	mov.w	r3, #4294967295
   2e654:	e7de      	b.n	2e614 <logobj_interface_getopt+0x48>
   2e656:	2016      	movs	r0, #22
   2e658:	e7d8      	b.n	2e60c <logobj_interface_getopt+0x40>
   2e65a:	2009      	movs	r0, #9
   2e65c:	f7f8 fa88 	bl	26b70 <bsd_os_errno_set>
   2e660:	f04f 33ff 	mov.w	r3, #4294967295
   2e664:	e7d6      	b.n	2e614 <logobj_interface_getopt+0x48>
   2e666:	bf00      	nop
   2e668:	2002b9c5 	.word	0x2002b9c5
   2e66c:	20024ab8 	.word	0x20024ab8

0002e670 <logobj_interface_close>:
   2e670:	b510      	push	{r4, lr}
   2e672:	4604      	mov	r4, r0
   2e674:	f005 ff72 	bl	3455c <interface_socket_from_handle_get>
   2e678:	b138      	cbz	r0, 2e68a <logobj_interface_close+0x1a>
   2e67a:	4620      	mov	r0, r4
   2e67c:	f005 feac 	bl	343d8 <interface_socket_free>
   2e680:	2300      	movs	r3, #0
   2e682:	4a05      	ldr	r2, [pc, #20]	; (2e698 <logobj_interface_close+0x28>)
   2e684:	4618      	mov	r0, r3
   2e686:	6013      	str	r3, [r2, #0]
   2e688:	bd10      	pop	{r4, pc}
   2e68a:	2009      	movs	r0, #9
   2e68c:	f7f8 fa70 	bl	26b70 <bsd_os_errno_set>
   2e690:	f04f 30ff 	mov.w	r0, #4294967295
   2e694:	bd10      	pop	{r4, pc}
   2e696:	bf00      	nop
   2e698:	20024abc 	.word	0x20024abc

0002e69c <packet_free_cb>:
   2e69c:	6800      	ldr	r0, [r0, #0]
   2e69e:	f004 bafb 	b.w	32c98 <rpc_at_client_data_free>
   2e6a2:	bf00      	nop

0002e6a4 <at_interface_write>:
   2e6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e6a6:	b083      	sub	sp, #12
   2e6a8:	460f      	mov	r7, r1
   2e6aa:	4615      	mov	r5, r2
   2e6ac:	4606      	mov	r6, r0
   2e6ae:	f005 ff55 	bl	3455c <interface_socket_from_handle_get>
   2e6b2:	2800      	cmp	r0, #0
   2e6b4:	d047      	beq.n	2e746 <at_interface_write+0xa2>
   2e6b6:	6803      	ldr	r3, [r0, #0]
   2e6b8:	4604      	mov	r4, r0
   2e6ba:	039b      	lsls	r3, r3, #14
   2e6bc:	d543      	bpl.n	2e746 <at_interface_write+0xa2>
   2e6be:	6803      	ldr	r3, [r0, #0]
   2e6c0:	4629      	mov	r1, r5
   2e6c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2e6c6:	6003      	str	r3, [r0, #0]
   2e6c8:	6803      	ldr	r3, [r0, #0]
   2e6ca:	a801      	add	r0, sp, #4
   2e6cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   2e6d0:	6023      	str	r3, [r4, #0]
   2e6d2:	f004 fab7 	bl	32c44 <rpc_at_client_request_alloc>
   2e6d6:	bba0      	cbnz	r0, 2e742 <at_interface_write+0x9e>
   2e6d8:	2204      	movs	r2, #4
   2e6da:	9b01      	ldr	r3, [sp, #4]
   2e6dc:	721a      	strb	r2, [r3, #8]
   2e6de:	7258      	strb	r0, [r3, #9]
   2e6e0:	7298      	strb	r0, [r3, #10]
   2e6e2:	72d8      	strb	r0, [r3, #11]
   2e6e4:	60de      	str	r6, [r3, #12]
   2e6e6:	b985      	cbnz	r5, 2e70a <at_interface_write+0x66>
   2e6e8:	4618      	mov	r0, r3
   2e6ea:	2101      	movs	r1, #1
   2e6ec:	f004 fabe 	bl	32c6c <rpc_at_client_request_send>
   2e6f0:	b9d0      	cbnz	r0, 2e728 <at_interface_write+0x84>
   2e6f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2e6f6:	4630      	mov	r0, r6
   2e6f8:	4611      	mov	r1, r2
   2e6fa:	f04f 33ff 	mov.w	r3, #4294967295
   2e6fe:	f005 feb9 	bl	34474 <interface_socket_wait>
   2e702:	b9a8      	cbnz	r0, 2e730 <at_interface_write+0x8c>
   2e704:	4628      	mov	r0, r5
   2e706:	b003      	add	sp, #12
   2e708:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e70a:	4639      	mov	r1, r7
   2e70c:	6818      	ldr	r0, [r3, #0]
   2e70e:	462a      	mov	r2, r5
   2e710:	f010 fadb 	bl	3ecca <memcpy>
   2e714:	2101      	movs	r1, #1
   2e716:	9801      	ldr	r0, [sp, #4]
   2e718:	f004 faa8 	bl	32c6c <rpc_at_client_request_send>
   2e71c:	2800      	cmp	r0, #0
   2e71e:	d0e8      	beq.n	2e6f2 <at_interface_write+0x4e>
   2e720:	9b01      	ldr	r3, [sp, #4]
   2e722:	6818      	ldr	r0, [r3, #0]
   2e724:	f004 fab8 	bl	32c98 <rpc_at_client_data_free>
   2e728:	9801      	ldr	r0, [sp, #4]
   2e72a:	f004 faad 	bl	32c88 <rpc_at_client_message_free>
   2e72e:	2023      	movs	r0, #35	; 0x23
   2e730:	6823      	ldr	r3, [r4, #0]
   2e732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e736:	6023      	str	r3, [r4, #0]
   2e738:	f7f8 fa1a 	bl	26b70 <bsd_os_errno_set>
   2e73c:	f04f 30ff 	mov.w	r0, #4294967295
   2e740:	e7e1      	b.n	2e706 <at_interface_write+0x62>
   2e742:	200c      	movs	r0, #12
   2e744:	e7f4      	b.n	2e730 <at_interface_write+0x8c>
   2e746:	2016      	movs	r0, #22
   2e748:	e7f6      	b.n	2e738 <at_interface_write+0x94>
   2e74a:	bf00      	nop

0002e74c <at_interface_init>:
   2e74c:	f004 ba74 	b.w	32c38 <rpc_at_client_init>

0002e750 <at_interface_open>:
   2e750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e754:	2500      	movs	r5, #0
   2e756:	b082      	sub	sp, #8
   2e758:	ab02      	add	r3, sp, #8
   2e75a:	f843 5d08 	str.w	r5, [r3, #-8]!
   2e75e:	4680      	mov	r8, r0
   2e760:	460f      	mov	r7, r1
   2e762:	4618      	mov	r0, r3
   2e764:	4616      	mov	r6, r2
   2e766:	2102      	movs	r1, #2
   2e768:	4a1d      	ldr	r2, [pc, #116]	; (2e7e0 <at_interface_open+0x90>)
   2e76a:	f005 fdd7 	bl	3431c <interface_socket_allocate>
   2e76e:	9b00      	ldr	r3, [sp, #0]
   2e770:	4604      	mov	r4, r0
   2e772:	b30b      	cbz	r3, 2e7b8 <at_interface_open+0x68>
   2e774:	e9c3 8703 	strd	r8, r7, [r3, #12]
   2e778:	615e      	str	r6, [r3, #20]
   2e77a:	4629      	mov	r1, r5
   2e77c:	a801      	add	r0, sp, #4
   2e77e:	f004 fa61 	bl	32c44 <rpc_at_client_request_alloc>
   2e782:	b9e8      	cbnz	r0, 2e7c0 <at_interface_open+0x70>
   2e784:	2204      	movs	r2, #4
   2e786:	9b01      	ldr	r3, [sp, #4]
   2e788:	2105      	movs	r1, #5
   2e78a:	7258      	strb	r0, [r3, #9]
   2e78c:	7298      	strb	r0, [r3, #10]
   2e78e:	72d8      	strb	r0, [r3, #11]
   2e790:	721a      	strb	r2, [r3, #8]
   2e792:	60dc      	str	r4, [r3, #12]
   2e794:	4618      	mov	r0, r3
   2e796:	f004 fa69 	bl	32c6c <rpc_at_client_request_send>
   2e79a:	b9d8      	cbnz	r0, 2e7d4 <at_interface_open+0x84>
   2e79c:	2202      	movs	r2, #2
   2e79e:	f04f 33ff 	mov.w	r3, #4294967295
   2e7a2:	4611      	mov	r1, r2
   2e7a4:	4620      	mov	r0, r4
   2e7a6:	f005 fe65 	bl	34474 <interface_socket_wait>
   2e7aa:	4605      	mov	r5, r0
   2e7ac:	b948      	cbnz	r0, 2e7c2 <at_interface_open+0x72>
   2e7ae:	9a00      	ldr	r2, [sp, #0]
   2e7b0:	6813      	ldr	r3, [r2, #0]
   2e7b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e7b6:	6013      	str	r3, [r2, #0]
   2e7b8:	4620      	mov	r0, r4
   2e7ba:	b002      	add	sp, #8
   2e7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e7c0:	250c      	movs	r5, #12
   2e7c2:	4620      	mov	r0, r4
   2e7c4:	f005 fe08 	bl	343d8 <interface_socket_free>
   2e7c8:	4628      	mov	r0, r5
   2e7ca:	f7f8 f9d1 	bl	26b70 <bsd_os_errno_set>
   2e7ce:	f04f 34ff 	mov.w	r4, #4294967295
   2e7d2:	e7f1      	b.n	2e7b8 <at_interface_open+0x68>
   2e7d4:	9801      	ldr	r0, [sp, #4]
   2e7d6:	f004 fa57 	bl	32c88 <rpc_at_client_message_free>
   2e7da:	2523      	movs	r5, #35	; 0x23
   2e7dc:	e7f1      	b.n	2e7c2 <at_interface_open+0x72>
   2e7de:	bf00      	nop
   2e7e0:	0002e69d 	.word	0x0002e69d

0002e7e4 <at_interface_close>:
   2e7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e7e6:	b083      	sub	sp, #12
   2e7e8:	4606      	mov	r6, r0
   2e7ea:	f005 feb7 	bl	3455c <interface_socket_from_handle_get>
   2e7ee:	2800      	cmp	r0, #0
   2e7f0:	d03d      	beq.n	2e86e <at_interface_close+0x8a>
   2e7f2:	230d      	movs	r3, #13
   2e7f4:	6807      	ldr	r7, [r0, #0]
   2e7f6:	6003      	str	r3, [r0, #0]
   2e7f8:	6803      	ldr	r3, [r0, #0]
   2e7fa:	4604      	mov	r4, r0
   2e7fc:	039b      	lsls	r3, r3, #14
   2e7fe:	d41f      	bmi.n	2e840 <at_interface_close+0x5c>
   2e800:	2100      	movs	r1, #0
   2e802:	a801      	add	r0, sp, #4
   2e804:	f004 fa1e 	bl	32c44 <rpc_at_client_request_alloc>
   2e808:	bb20      	cbnz	r0, 2e854 <at_interface_close+0x70>
   2e80a:	2204      	movs	r2, #4
   2e80c:	9b01      	ldr	r3, [sp, #4]
   2e80e:	2106      	movs	r1, #6
   2e810:	7258      	strb	r0, [r3, #9]
   2e812:	7298      	strb	r0, [r3, #10]
   2e814:	72d8      	strb	r0, [r3, #11]
   2e816:	721a      	strb	r2, [r3, #8]
   2e818:	60de      	str	r6, [r3, #12]
   2e81a:	4618      	mov	r0, r3
   2e81c:	f004 fa26 	bl	32c6c <rpc_at_client_request_send>
   2e820:	b9d0      	cbnz	r0, 2e858 <at_interface_close+0x74>
   2e822:	220e      	movs	r2, #14
   2e824:	f04f 33ff 	mov.w	r3, #4294967295
   2e828:	4611      	mov	r1, r2
   2e82a:	4630      	mov	r0, r6
   2e82c:	f005 fe22 	bl	34474 <interface_socket_wait>
   2e830:	4605      	mov	r5, r0
   2e832:	b9a8      	cbnz	r0, 2e860 <at_interface_close+0x7c>
   2e834:	4630      	mov	r0, r6
   2e836:	f005 fdcf 	bl	343d8 <interface_socket_free>
   2e83a:	4628      	mov	r0, r5
   2e83c:	b003      	add	sp, #12
   2e83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e840:	6803      	ldr	r3, [r0, #0]
   2e842:	2100      	movs	r1, #0
   2e844:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2e848:	6003      	str	r3, [r0, #0]
   2e84a:	a801      	add	r0, sp, #4
   2e84c:	f004 f9fa 	bl	32c44 <rpc_at_client_request_alloc>
   2e850:	2800      	cmp	r0, #0
   2e852:	d0da      	beq.n	2e80a <at_interface_close+0x26>
   2e854:	250c      	movs	r5, #12
   2e856:	e003      	b.n	2e860 <at_interface_close+0x7c>
   2e858:	9801      	ldr	r0, [sp, #4]
   2e85a:	f004 fa15 	bl	32c88 <rpc_at_client_message_free>
   2e85e:	2523      	movs	r5, #35	; 0x23
   2e860:	6027      	str	r7, [r4, #0]
   2e862:	4628      	mov	r0, r5
   2e864:	f7f8 f984 	bl	26b70 <bsd_os_errno_set>
   2e868:	f04f 35ff 	mov.w	r5, #4294967295
   2e86c:	e7e5      	b.n	2e83a <at_interface_close+0x56>
   2e86e:	2516      	movs	r5, #22
   2e870:	e7f7      	b.n	2e862 <at_interface_close+0x7e>
   2e872:	bf00      	nop

0002e874 <at_interface_read>:
   2e874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e878:	b084      	sub	sp, #16
   2e87a:	4688      	mov	r8, r1
   2e87c:	4615      	mov	r5, r2
   2e87e:	461e      	mov	r6, r3
   2e880:	4607      	mov	r7, r0
   2e882:	f005 fe6b 	bl	3455c <interface_socket_from_handle_get>
   2e886:	2800      	cmp	r0, #0
   2e888:	d049      	beq.n	2e91e <at_interface_read+0xaa>
   2e88a:	2300      	movs	r3, #0
   2e88c:	e9cd 8500 	strd	r8, r5, [sp]
   2e890:	f016 0502 	ands.w	r5, r6, #2
   2e894:	4604      	mov	r4, r0
   2e896:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2e89a:	d00e      	beq.n	2e8ba <at_interface_read+0x46>
   2e89c:	e01e      	b.n	2e8dc <at_interface_read+0x68>
   2e89e:	2d00      	cmp	r5, #0
   2e8a0:	d133      	bne.n	2e90a <at_interface_read+0x96>
   2e8a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2e8a6:	6a23      	ldr	r3, [r4, #32]
   2e8a8:	4611      	mov	r1, r2
   2e8aa:	2b00      	cmp	r3, #0
   2e8ac:	bf08      	it	eq
   2e8ae:	f04f 33ff 	moveq.w	r3, #4294967295
   2e8b2:	4638      	mov	r0, r7
   2e8b4:	f005 fdde 	bl	34474 <interface_socket_wait>
   2e8b8:	4605      	mov	r5, r0
   2e8ba:	6823      	ldr	r3, [r4, #0]
   2e8bc:	69e0      	ldr	r0, [r4, #28]
   2e8be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2e8c2:	6023      	str	r3, [r4, #0]
   2e8c4:	6803      	ldr	r3, [r0, #0]
   2e8c6:	4632      	mov	r2, r6
   2e8c8:	689b      	ldr	r3, [r3, #8]
   2e8ca:	4669      	mov	r1, sp
   2e8cc:	4798      	blx	r3
   2e8ce:	f1b0 0800 	subs.w	r8, r0, #0
   2e8d2:	dbe4      	blt.n	2e89e <at_interface_read+0x2a>
   2e8d4:	4640      	mov	r0, r8
   2e8d6:	b004      	add	sp, #16
   2e8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e8dc:	6803      	ldr	r3, [r0, #0]
   2e8de:	69c0      	ldr	r0, [r0, #28]
   2e8e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2e8e4:	6023      	str	r3, [r4, #0]
   2e8e6:	6803      	ldr	r3, [r0, #0]
   2e8e8:	4632      	mov	r2, r6
   2e8ea:	689b      	ldr	r3, [r3, #8]
   2e8ec:	4669      	mov	r1, sp
   2e8ee:	4798      	blx	r3
   2e8f0:	f1b0 0800 	subs.w	r8, r0, #0
   2e8f4:	daee      	bge.n	2e8d4 <at_interface_read+0x60>
   2e8f6:	f1b8 3fff 	cmp.w	r8, #4294967295
   2e8fa:	d1eb      	bne.n	2e8d4 <at_interface_read+0x60>
   2e8fc:	2023      	movs	r0, #35	; 0x23
   2e8fe:	f7f8 f937 	bl	26b70 <bsd_os_errno_set>
   2e902:	4640      	mov	r0, r8
   2e904:	b004      	add	sp, #16
   2e906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e90a:	f1b8 3fff 	cmp.w	r8, #4294967295
   2e90e:	d1e1      	bne.n	2e8d4 <at_interface_read+0x60>
   2e910:	4628      	mov	r0, r5
   2e912:	f7f8 f92d 	bl	26b70 <bsd_os_errno_set>
   2e916:	4640      	mov	r0, r8
   2e918:	b004      	add	sp, #16
   2e91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e91e:	2016      	movs	r0, #22
   2e920:	f7f8 f926 	bl	26b70 <bsd_os_errno_set>
   2e924:	f04f 38ff 	mov.w	r8, #4294967295
   2e928:	e7d4      	b.n	2e8d4 <at_interface_read+0x60>
   2e92a:	bf00      	nop

0002e92c <at_interface_getopt>:
   2e92c:	f005 be74 	b.w	34618 <interface_socket_getopt>

0002e930 <at_interface_setopt>:
   2e930:	f005 be3c 	b.w	345ac <interface_socket_setopt>

0002e934 <rpc_at_event_handler>:
   2e934:	b570      	push	{r4, r5, r6, lr}
   2e936:	4606      	mov	r6, r0
   2e938:	b084      	sub	sp, #16
   2e93a:	68c0      	ldr	r0, [r0, #12]
   2e93c:	460d      	mov	r5, r1
   2e93e:	f005 fe0d 	bl	3455c <interface_socket_from_handle_get>
   2e942:	4604      	mov	r4, r0
   2e944:	b348      	cbz	r0, 2e99a <rpc_at_event_handler+0x66>
   2e946:	6803      	ldr	r3, [r0, #0]
   2e948:	b29b      	uxth	r3, r3
   2e94a:	2b01      	cmp	r3, #1
   2e94c:	d01f      	beq.n	2e98e <rpc_at_event_handler+0x5a>
   2e94e:	6803      	ldr	r3, [r0, #0]
   2e950:	b29b      	uxth	r3, r3
   2e952:	2b0d      	cmp	r3, #13
   2e954:	d029      	beq.n	2e9aa <rpc_at_event_handler+0x76>
   2e956:	6803      	ldr	r3, [r0, #0]
   2e958:	b29b      	uxth	r3, r3
   2e95a:	2b02      	cmp	r3, #2
   2e95c:	d02d      	beq.n	2e9ba <rpc_at_event_handler+0x86>
   2e95e:	3d03      	subs	r5, #3
   2e960:	2d01      	cmp	r5, #1
   2e962:	d817      	bhi.n	2e994 <rpc_at_event_handler+0x60>
   2e964:	2500      	movs	r5, #0
   2e966:	6873      	ldr	r3, [r6, #4]
   2e968:	6832      	ldr	r2, [r6, #0]
   2e96a:	e9cd 5502 	strd	r5, r5, [sp, #8]
   2e96e:	e9cd 2300 	strd	r2, r3, [sp]
   2e972:	69e0      	ldr	r0, [r4, #28]
   2e974:	4669      	mov	r1, sp
   2e976:	6803      	ldr	r3, [r0, #0]
   2e978:	685b      	ldr	r3, [r3, #4]
   2e97a:	4798      	blx	r3
   2e97c:	3001      	adds	r0, #1
   2e97e:	d019      	beq.n	2e9b4 <rpc_at_event_handler+0x80>
   2e980:	4628      	mov	r0, r5
   2e982:	6823      	ldr	r3, [r4, #0]
   2e984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2e988:	6023      	str	r3, [r4, #0]
   2e98a:	b004      	add	sp, #16
   2e98c:	bd70      	pop	{r4, r5, r6, pc}
   2e98e:	2d02      	cmp	r5, #2
   2e990:	d1e5      	bne.n	2e95e <rpc_at_event_handler+0x2a>
   2e992:	6005      	str	r5, [r0, #0]
   2e994:	2000      	movs	r0, #0
   2e996:	b004      	add	sp, #16
   2e998:	bd70      	pop	{r4, r5, r6, pc}
   2e99a:	6830      	ldr	r0, [r6, #0]
   2e99c:	2800      	cmp	r0, #0
   2e99e:	d0f9      	beq.n	2e994 <rpc_at_event_handler+0x60>
   2e9a0:	f004 f97a 	bl	32c98 <rpc_at_client_data_free>
   2e9a4:	4620      	mov	r0, r4
   2e9a6:	b004      	add	sp, #16
   2e9a8:	bd70      	pop	{r4, r5, r6, pc}
   2e9aa:	2d02      	cmp	r5, #2
   2e9ac:	d1d7      	bne.n	2e95e <rpc_at_event_handler+0x2a>
   2e9ae:	230e      	movs	r3, #14
   2e9b0:	6003      	str	r3, [r0, #0]
   2e9b2:	e7ef      	b.n	2e994 <rpc_at_event_handler+0x60>
   2e9b4:	2002      	movs	r0, #2
   2e9b6:	b004      	add	sp, #16
   2e9b8:	bd70      	pop	{r4, r5, r6, pc}
   2e9ba:	6803      	ldr	r3, [r0, #0]
   2e9bc:	029b      	lsls	r3, r3, #10
   2e9be:	d5ce      	bpl.n	2e95e <rpc_at_event_handler+0x2a>
   2e9c0:	2d02      	cmp	r5, #2
   2e9c2:	d1cc      	bne.n	2e95e <rpc_at_event_handler+0x2a>
   2e9c4:	6803      	ldr	r3, [r0, #0]
   2e9c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2e9ca:	6003      	str	r3, [r0, #0]
   2e9cc:	6803      	ldr	r3, [r0, #0]
   2e9ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e9d2:	6003      	str	r3, [r0, #0]
   2e9d4:	e7de      	b.n	2e994 <rpc_at_event_handler+0x60>
   2e9d6:	bf00      	nop

0002e9d8 <dfu_client_event_handler>:
   2e9d8:	f850 1b08 	ldr.w	r1, [r0], #8
   2e9dc:	0c09      	lsrs	r1, r1, #16
   2e9de:	f001 b92f 	b.w	2fc40 <rpc_dfu_event_handler>
   2e9e2:	bf00      	nop

0002e9e4 <rpc_dfu_client_init>:
   2e9e4:	4801      	ldr	r0, [pc, #4]	; (2e9ec <rpc_dfu_client_init+0x8>)
   2e9e6:	f005 bf1d 	b.w	34824 <rpc_client_register>
   2e9ea:	bf00      	nop
   2e9ec:	00040cf8 	.word	0x00040cf8

0002e9f0 <rpc_dfu_client_request_alloc>:
   2e9f0:	2300      	movs	r3, #0
   2e9f2:	b510      	push	{r4, lr}
   2e9f4:	b082      	sub	sp, #8
   2e9f6:	9301      	str	r3, [sp, #4]
   2e9f8:	b158      	cbz	r0, 2ea12 <rpc_dfu_client_request_alloc+0x22>
   2e9fa:	4604      	mov	r4, r0
   2e9fc:	aa01      	add	r2, sp, #4
   2e9fe:	2006      	movs	r0, #6
   2ea00:	f006 f948 	bl	34c94 <rpc_message_alloc>
   2ea04:	b918      	cbnz	r0, 2ea0e <rpc_dfu_client_request_alloc+0x1e>
   2ea06:	9b01      	ldr	r3, [sp, #4]
   2ea08:	b10b      	cbz	r3, 2ea0e <rpc_dfu_client_request_alloc+0x1e>
   2ea0a:	3308      	adds	r3, #8
   2ea0c:	6023      	str	r3, [r4, #0]
   2ea0e:	b002      	add	sp, #8
   2ea10:	bd10      	pop	{r4, pc}
   2ea12:	2007      	movs	r0, #7
   2ea14:	b002      	add	sp, #8
   2ea16:	bd10      	pop	{r4, pc}

0002ea18 <rpc_dfu_client_request_send>:
   2ea18:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   2ea1c:	d10b      	bne.n	2ea36 <rpc_dfu_client_request_send+0x1e>
   2ea1e:	b160      	cbz	r0, 2ea3a <rpc_dfu_client_request_send+0x22>
   2ea20:	4603      	mov	r3, r0
   2ea22:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2ea26:	2006      	movs	r0, #6
   2ea28:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2ea2c:	f843 1d08 	str.w	r1, [r3, #-8]!
   2ea30:	4619      	mov	r1, r3
   2ea32:	f006 b917 	b.w	34c64 <rpc_message_send>
   2ea36:	200f      	movs	r0, #15
   2ea38:	4770      	bx	lr
   2ea3a:	2007      	movs	r0, #7
   2ea3c:	4770      	bx	lr
   2ea3e:	bf00      	nop

0002ea40 <rpc_dfu_client_message_free>:
   2ea40:	b120      	cbz	r0, 2ea4c <rpc_dfu_client_message_free+0xc>
   2ea42:	f1a0 0108 	sub.w	r1, r0, #8
   2ea46:	2006      	movs	r0, #6
   2ea48:	f006 b956 	b.w	34cf8 <rpc_message_free>
   2ea4c:	2007      	movs	r0, #7
   2ea4e:	4770      	bx	lr

0002ea50 <rpc_dfu_client_data_free>:
   2ea50:	b118      	cbz	r0, 2ea5a <rpc_dfu_client_data_free+0xa>
   2ea52:	4601      	mov	r1, r0
   2ea54:	2006      	movs	r0, #6
   2ea56:	f006 ba61 	b.w	34f1c <rpc_message_data_free>
   2ea5a:	2007      	movs	r0, #7
   2ea5c:	4770      	bx	lr
   2ea5e:	bf00      	nop

0002ea60 <mem_free>:
   2ea60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ea64:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 2eb34 <mem_free+0xd4>
   2ea68:	b083      	sub	sp, #12
   2ea6a:	9000      	str	r0, [sp, #0]
   2ea6c:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   2ea70:	f8dc 3008 	ldr.w	r3, [ip, #8]
   2ea74:	b12b      	cbz	r3, 2ea82 <mem_free+0x22>
   2ea76:	f8dc 2000 	ldr.w	r2, [ip]
   2ea7a:	9c00      	ldr	r4, [sp, #0]
   2ea7c:	7810      	ldrb	r0, [r2, #0]
   2ea7e:	42a0      	cmp	r0, r4
   2ea80:	d006      	beq.n	2ea90 <mem_free+0x30>
   2ea82:	f10c 0c0c 	add.w	ip, ip, #12
   2ea86:	45e3      	cmp	fp, ip
   2ea88:	d1f2      	bne.n	2ea70 <mem_free+0x10>
   2ea8a:	b003      	add	sp, #12
   2ea8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ea90:	f8dc a004 	ldr.w	sl, [ip, #4]
   2ea94:	eb03 080a 	add.w	r8, r3, sl
   2ea98:	45c2      	cmp	sl, r8
   2ea9a:	d2f2      	bcs.n	2ea82 <mem_free+0x22>
   2ea9c:	6853      	ldr	r3, [r2, #4]
   2ea9e:	f8cd c004 	str.w	ip, [sp, #4]
   2eaa2:	46d6      	mov	lr, sl
   2eaa4:	469c      	mov	ip, r3
   2eaa6:	f8d2 9010 	ldr.w	r9, [r2, #16]
   2eaaa:	8997      	ldrh	r7, [r2, #12]
   2eaac:	ebae 000a 	sub.w	r0, lr, sl
   2eab0:	b3df      	cbz	r7, 2eb2a <mem_free+0xca>
   2eab2:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   2eab6:	4290      	cmp	r0, r2
   2eab8:	d31c      	bcc.n	2eaf4 <mem_free+0x94>
   2eaba:	4665      	mov	r5, ip
   2eabc:	2400      	movs	r4, #0
   2eabe:	f109 0304 	add.w	r3, r9, #4
   2eac2:	e003      	b.n	2eacc <mem_free+0x6c>
   2eac4:	885a      	ldrh	r2, [r3, #2]
   2eac6:	3304      	adds	r3, #4
   2eac8:	4282      	cmp	r2, r0
   2eaca:	d815      	bhi.n	2eaf8 <mem_free+0x98>
   2eacc:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   2ead0:	3401      	adds	r4, #1
   2ead2:	42a7      	cmp	r7, r4
   2ead4:	fb02 5506 	mla	r5, r2, r6, r5
   2ead8:	eba0 0002 	sub.w	r0, r0, r2
   2eadc:	461e      	mov	r6, r3
   2eade:	d1f1      	bne.n	2eac4 <mem_free+0x64>
   2eae0:	2000      	movs	r0, #0
   2eae2:	4281      	cmp	r1, r0
   2eae4:	d00d      	beq.n	2eb02 <mem_free+0xa2>
   2eae6:	f10e 0e01 	add.w	lr, lr, #1
   2eaea:	45f0      	cmp	r8, lr
   2eaec:	d1de      	bne.n	2eaac <mem_free+0x4c>
   2eaee:	f8dd c004 	ldr.w	ip, [sp, #4]
   2eaf2:	e7c6      	b.n	2ea82 <mem_free+0x22>
   2eaf4:	4665      	mov	r5, ip
   2eaf6:	464e      	mov	r6, r9
   2eaf8:	8833      	ldrh	r3, [r6, #0]
   2eafa:	fb00 5003 	mla	r0, r0, r3, r5
   2eafe:	4281      	cmp	r1, r0
   2eb00:	d1f1      	bne.n	2eae6 <mem_free+0x86>
   2eb02:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   2eb06:	f8dd c004 	ldr.w	ip, [sp, #4]
   2eb0a:	d0ba      	beq.n	2ea82 <mem_free+0x22>
   2eb0c:	2301      	movs	r3, #1
   2eb0e:	4a08      	ldr	r2, [pc, #32]	; (2eb30 <mem_free+0xd0>)
   2eb10:	ea4f 115e 	mov.w	r1, lr, lsr #5
   2eb14:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2eb18:	f00e 0e1f 	and.w	lr, lr, #31
   2eb1c:	fa03 fe0e 	lsl.w	lr, r3, lr
   2eb20:	ea4e 0000 	orr.w	r0, lr, r0
   2eb24:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   2eb28:	e7af      	b.n	2ea8a <mem_free+0x2a>
   2eb2a:	4638      	mov	r0, r7
   2eb2c:	e7d9      	b.n	2eae2 <mem_free+0x82>
   2eb2e:	bf00      	nop
   2eb30:	20024ac0 	.word	0x20024ac0
   2eb34:	20024b04 	.word	0x20024b04

0002eb38 <mem_alloc.constprop.5>:
   2eb38:	2800      	cmp	r0, #0
   2eb3a:	d050      	beq.n	2ebde <mem_alloc.constprop.5+0xa6>
   2eb3c:	4b6d      	ldr	r3, [pc, #436]	; (2ecf4 <mem_alloc.constprop.5+0x1bc>)
   2eb3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2eb42:	4290      	cmp	r0, r2
   2eb44:	d84b      	bhi.n	2ebde <mem_alloc.constprop.5+0xa6>
   2eb46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eb4a:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   2eb4e:	b083      	sub	sp, #12
   2eb50:	f1bb 0f00 	cmp.w	fp, #0
   2eb54:	d054      	beq.n	2ec00 <mem_alloc.constprop.5+0xc8>
   2eb56:	f10b 32ff 	add.w	r2, fp, #4294967295
   2eb5a:	4691      	mov	r9, r2
   2eb5c:	2600      	movs	r6, #0
   2eb5e:	f04f 0812 	mov.w	r8, #18
   2eb62:	4f65      	ldr	r7, [pc, #404]	; (2ecf8 <mem_alloc.constprop.5+0x1c0>)
   2eb64:	9201      	str	r2, [sp, #4]
   2eb66:	f10b 0e11 	add.w	lr, fp, #17
   2eb6a:	eb06 0209 	add.w	r2, r6, r9
   2eb6e:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   2eb72:	3201      	adds	r2, #1
   2eb74:	0852      	lsrs	r2, r2, #1
   2eb76:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   2eb7a:	f102 0112 	add.w	r1, r2, #18
   2eb7e:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   2eb82:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   2eb86:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   2eb8a:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   2eb8e:	f8dc c004 	ldr.w	ip, [ip, #4]
   2eb92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2eb96:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2eb9a:	f8da a010 	ldr.w	sl, [sl, #16]
   2eb9e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   2eba2:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   2eba6:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   2ebaa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   2ebae:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   2ebb2:	6849      	ldr	r1, [r1, #4]
   2ebb4:	692d      	ldr	r5, [r5, #16]
   2ebb6:	6924      	ldr	r4, [r4, #16]
   2ebb8:	f8dc c004 	ldr.w	ip, [ip, #4]
   2ebbc:	4550      	cmp	r0, sl
   2ebbe:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   2ebc2:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   2ebc6:	d915      	bls.n	2ebf4 <mem_alloc.constprop.5+0xbc>
   2ebc8:	4288      	cmp	r0, r1
   2ebca:	d211      	bcs.n	2ebf0 <mem_alloc.constprop.5+0xb8>
   2ebcc:	42a8      	cmp	r0, r5
   2ebce:	d908      	bls.n	2ebe2 <mem_alloc.constprop.5+0xaa>
   2ebd0:	1c56      	adds	r6, r2, #1
   2ebd2:	45b1      	cmp	r9, r6
   2ebd4:	f0c0 8087 	bcc.w	2ece6 <mem_alloc.constprop.5+0x1ae>
   2ebd8:	f102 0813 	add.w	r8, r2, #19
   2ebdc:	e7c5      	b.n	2eb6a <mem_alloc.constprop.5+0x32>
   2ebde:	2000      	movs	r0, #0
   2ebe0:	4770      	bx	lr
   2ebe2:	f102 39ff 	add.w	r9, r2, #4294967295
   2ebe6:	454e      	cmp	r6, r9
   2ebe8:	d87d      	bhi.n	2ece6 <mem_alloc.constprop.5+0x1ae>
   2ebea:	f102 0e11 	add.w	lr, r2, #17
   2ebee:	e7bc      	b.n	2eb6a <mem_alloc.constprop.5+0x32>
   2ebf0:	f109 0601 	add.w	r6, r9, #1
   2ebf4:	45b3      	cmp	fp, r6
   2ebf6:	d007      	beq.n	2ec08 <mem_alloc.constprop.5+0xd0>
   2ebf8:	2e10      	cmp	r6, #16
   2ebfa:	d001      	beq.n	2ec00 <mem_alloc.constprop.5+0xc8>
   2ebfc:	45b3      	cmp	fp, r6
   2ebfe:	d808      	bhi.n	2ec12 <mem_alloc.constprop.5+0xda>
   2ec00:	2000      	movs	r0, #0
   2ec02:	b003      	add	sp, #12
   2ec04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec08:	9a01      	ldr	r2, [sp, #4]
   2ec0a:	2a10      	cmp	r2, #16
   2ec0c:	bf18      	it	ne
   2ec0e:	4616      	movne	r6, r2
   2ec10:	d0f6      	beq.n	2ec00 <mem_alloc.constprop.5+0xc8>
   2ec12:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 2ecfc <mem_alloc.constprop.5+0x1c4>
   2ec16:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   2ec1a:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   2ec1e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2ec22:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   2ec26:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   2ec2a:	f8d2 e004 	ldr.w	lr, [r2, #4]
   2ec2e:	691d      	ldr	r5, [r3, #16]
   2ec30:	2c00      	cmp	r4, #0
   2ec32:	d056      	beq.n	2ece2 <mem_alloc.constprop.5+0x1aa>
   2ec34:	462a      	mov	r2, r5
   2ec36:	4670      	mov	r0, lr
   2ec38:	00a4      	lsls	r4, r4, #2
   2ec3a:	eb05 0904 	add.w	r9, r5, r4
   2ec3e:	8851      	ldrh	r1, [r2, #2]
   2ec40:	3204      	adds	r2, #4
   2ec42:	4591      	cmp	r9, r2
   2ec44:	4408      	add	r0, r1
   2ec46:	d1fa      	bne.n	2ec3e <mem_alloc.constprop.5+0x106>
   2ec48:	1929      	adds	r1, r5, r4
   2ec4a:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   2ec4e:	4482      	add	sl, r0
   2ec50:	4582      	cmp	sl, r0
   2ec52:	d918      	bls.n	2ec86 <mem_alloc.constprop.5+0x14e>
   2ec54:	0941      	lsrs	r1, r0, #5
   2ec56:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   2ec5a:	f000 041f 	and.w	r4, r0, #31
   2ec5e:	fa22 f904 	lsr.w	r9, r2, r4
   2ec62:	f019 0f01 	tst.w	r9, #1
   2ec66:	d007      	beq.n	2ec78 <mem_alloc.constprop.5+0x140>
   2ec68:	e013      	b.n	2ec92 <mem_alloc.constprop.5+0x15a>
   2ec6a:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   2ec6e:	fa22 f904 	lsr.w	r9, r2, r4
   2ec72:	f019 0f01 	tst.w	r9, #1
   2ec76:	d10c      	bne.n	2ec92 <mem_alloc.constprop.5+0x15a>
   2ec78:	3001      	adds	r0, #1
   2ec7a:	4582      	cmp	sl, r0
   2ec7c:	ea4f 1150 	mov.w	r1, r0, lsr #5
   2ec80:	f000 041f 	and.w	r4, r0, #31
   2ec84:	d1f1      	bne.n	2ec6a <mem_alloc.constprop.5+0x132>
   2ec86:	3601      	adds	r6, #1
   2ec88:	455e      	cmp	r6, fp
   2ec8a:	f108 0808 	add.w	r8, r8, #8
   2ec8e:	d3c4      	bcc.n	2ec1a <mem_alloc.constprop.5+0xe2>
   2ec90:	e7b6      	b.n	2ec00 <mem_alloc.constprop.5+0xc8>
   2ec92:	2601      	movs	r6, #1
   2ec94:	fa06 f404 	lsl.w	r4, r6, r4
   2ec98:	899e      	ldrh	r6, [r3, #12]
   2ec9a:	ea22 0204 	bic.w	r2, r2, r4
   2ec9e:	eba0 000e 	sub.w	r0, r0, lr
   2eca2:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   2eca6:	685c      	ldr	r4, [r3, #4]
   2eca8:	2e00      	cmp	r6, #0
   2ecaa:	d0a9      	beq.n	2ec00 <mem_alloc.constprop.5+0xc8>
   2ecac:	886a      	ldrh	r2, [r5, #2]
   2ecae:	4282      	cmp	r2, r0
   2ecb0:	d811      	bhi.n	2ecd6 <mem_alloc.constprop.5+0x19e>
   2ecb2:	2100      	movs	r1, #0
   2ecb4:	1d2b      	adds	r3, r5, #4
   2ecb6:	e003      	b.n	2ecc0 <mem_alloc.constprop.5+0x188>
   2ecb8:	885a      	ldrh	r2, [r3, #2]
   2ecba:	3304      	adds	r3, #4
   2ecbc:	4282      	cmp	r2, r0
   2ecbe:	d80a      	bhi.n	2ecd6 <mem_alloc.constprop.5+0x19e>
   2ecc0:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   2ecc4:	3101      	adds	r1, #1
   2ecc6:	428e      	cmp	r6, r1
   2ecc8:	fb02 4405 	mla	r4, r2, r5, r4
   2eccc:	eba0 0002 	sub.w	r0, r0, r2
   2ecd0:	461d      	mov	r5, r3
   2ecd2:	d1f1      	bne.n	2ecb8 <mem_alloc.constprop.5+0x180>
   2ecd4:	e794      	b.n	2ec00 <mem_alloc.constprop.5+0xc8>
   2ecd6:	882b      	ldrh	r3, [r5, #0]
   2ecd8:	fb00 4003 	mla	r0, r0, r3, r4
   2ecdc:	b003      	add	sp, #12
   2ecde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ece2:	4670      	mov	r0, lr
   2ece4:	e7b0      	b.n	2ec48 <mem_alloc.constprop.5+0x110>
   2ece6:	f1bb 0f10 	cmp.w	fp, #16
   2ecea:	bf08      	it	eq
   2ecec:	260f      	moveq	r6, #15
   2ecee:	d090      	beq.n	2ec12 <mem_alloc.constprop.5+0xda>
   2ecf0:	e786      	b.n	2ec00 <mem_alloc.constprop.5+0xc8>
   2ecf2:	bf00      	nop
   2ecf4:	20024b40 	.word	0x20024b40
   2ecf8:	20024b04 	.word	0x20024b04
   2ecfc:	20024ac0 	.word	0x20024ac0

0002ed00 <mem_alloc.constprop.4>:
   2ed00:	2800      	cmp	r0, #0
   2ed02:	d04c      	beq.n	2ed9e <mem_alloc.constprop.4+0x9e>
   2ed04:	4b6b      	ldr	r3, [pc, #428]	; (2eeb4 <mem_alloc.constprop.4+0x1b4>)
   2ed06:	681a      	ldr	r2, [r3, #0]
   2ed08:	4290      	cmp	r0, r2
   2ed0a:	d848      	bhi.n	2ed9e <mem_alloc.constprop.4+0x9e>
   2ed0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ed10:	685f      	ldr	r7, [r3, #4]
   2ed12:	b083      	sub	sp, #12
   2ed14:	9700      	str	r7, [sp, #0]
   2ed16:	2f00      	cmp	r7, #0
   2ed18:	d051      	beq.n	2edbe <mem_alloc.constprop.4+0xbe>
   2ed1a:	1e7a      	subs	r2, r7, #1
   2ed1c:	4696      	mov	lr, r2
   2ed1e:	2100      	movs	r1, #0
   2ed20:	f04f 0c01 	mov.w	ip, #1
   2ed24:	4c64      	ldr	r4, [pc, #400]	; (2eeb8 <mem_alloc.constprop.4+0x1b8>)
   2ed26:	9201      	str	r2, [sp, #4]
   2ed28:	eb01 020e 	add.w	r2, r1, lr
   2ed2c:	3201      	adds	r2, #1
   2ed2e:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   2ed32:	0852      	lsrs	r2, r2, #1
   2ed34:	f102 0801 	add.w	r8, r2, #1
   2ed38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2ed3c:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   2ed40:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   2ed44:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   2ed48:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   2ed4c:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   2ed50:	f8d9 9004 	ldr.w	r9, [r9, #4]
   2ed54:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   2ed58:	f8da a010 	ldr.w	sl, [sl, #16]
   2ed5c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   2ed60:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   2ed64:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   2ed68:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   2ed6c:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   2ed70:	6936      	ldr	r6, [r6, #16]
   2ed72:	f8db b004 	ldr.w	fp, [fp, #4]
   2ed76:	692d      	ldr	r5, [r5, #16]
   2ed78:	f8d9 9004 	ldr.w	r9, [r9, #4]
   2ed7c:	4550      	cmp	r0, sl
   2ed7e:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   2ed82:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   2ed86:	d913      	bls.n	2edb0 <mem_alloc.constprop.4+0xb0>
   2ed88:	42a8      	cmp	r0, r5
   2ed8a:	d210      	bcs.n	2edae <mem_alloc.constprop.4+0xae>
   2ed8c:	42b0      	cmp	r0, r6
   2ed8e:	d908      	bls.n	2eda2 <mem_alloc.constprop.4+0xa2>
   2ed90:	45c6      	cmp	lr, r8
   2ed92:	4641      	mov	r1, r8
   2ed94:	f0c0 8087 	bcc.w	2eea6 <mem_alloc.constprop.4+0x1a6>
   2ed98:	f108 0c01 	add.w	ip, r8, #1
   2ed9c:	e7c4      	b.n	2ed28 <mem_alloc.constprop.4+0x28>
   2ed9e:	2000      	movs	r0, #0
   2eda0:	4770      	bx	lr
   2eda2:	f102 3eff 	add.w	lr, r2, #4294967295
   2eda6:	4571      	cmp	r1, lr
   2eda8:	d87d      	bhi.n	2eea6 <mem_alloc.constprop.4+0x1a6>
   2edaa:	4617      	mov	r7, r2
   2edac:	e7bc      	b.n	2ed28 <mem_alloc.constprop.4+0x28>
   2edae:	4639      	mov	r1, r7
   2edb0:	9a00      	ldr	r2, [sp, #0]
   2edb2:	428a      	cmp	r2, r1
   2edb4:	d007      	beq.n	2edc6 <mem_alloc.constprop.4+0xc6>
   2edb6:	2910      	cmp	r1, #16
   2edb8:	d001      	beq.n	2edbe <mem_alloc.constprop.4+0xbe>
   2edba:	428a      	cmp	r2, r1
   2edbc:	d808      	bhi.n	2edd0 <mem_alloc.constprop.4+0xd0>
   2edbe:	2000      	movs	r0, #0
   2edc0:	b003      	add	sp, #12
   2edc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2edc6:	9a01      	ldr	r2, [sp, #4]
   2edc8:	2a10      	cmp	r2, #16
   2edca:	bf18      	it	ne
   2edcc:	4611      	movne	r1, r2
   2edce:	d0f6      	beq.n	2edbe <mem_alloc.constprop.4+0xbe>
   2edd0:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 2eebc <mem_alloc.constprop.4+0x1bc>
   2edd4:	f8dd 9000 	ldr.w	r9, [sp]
   2edd8:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   2eddc:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   2ede0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2ede4:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   2ede8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   2edec:	f8d2 e004 	ldr.w	lr, [r2, #4]
   2edf0:	691f      	ldr	r7, [r3, #16]
   2edf2:	2e00      	cmp	r6, #0
   2edf4:	d055      	beq.n	2eea2 <mem_alloc.constprop.4+0x1a2>
   2edf6:	463a      	mov	r2, r7
   2edf8:	4670      	mov	r0, lr
   2edfa:	00b6      	lsls	r6, r6, #2
   2edfc:	eb07 0a06 	add.w	sl, r7, r6
   2ee00:	8855      	ldrh	r5, [r2, #2]
   2ee02:	3204      	adds	r2, #4
   2ee04:	4592      	cmp	sl, r2
   2ee06:	4428      	add	r0, r5
   2ee08:	d1fa      	bne.n	2ee00 <mem_alloc.constprop.4+0x100>
   2ee0a:	19bd      	adds	r5, r7, r6
   2ee0c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   2ee10:	4483      	add	fp, r0
   2ee12:	4583      	cmp	fp, r0
   2ee14:	d918      	bls.n	2ee48 <mem_alloc.constprop.4+0x148>
   2ee16:	0945      	lsrs	r5, r0, #5
   2ee18:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   2ee1c:	f000 061f 	and.w	r6, r0, #31
   2ee20:	fa22 fa06 	lsr.w	sl, r2, r6
   2ee24:	f01a 0f01 	tst.w	sl, #1
   2ee28:	d007      	beq.n	2ee3a <mem_alloc.constprop.4+0x13a>
   2ee2a:	e013      	b.n	2ee54 <mem_alloc.constprop.4+0x154>
   2ee2c:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   2ee30:	fa22 fa06 	lsr.w	sl, r2, r6
   2ee34:	f01a 0f01 	tst.w	sl, #1
   2ee38:	d10c      	bne.n	2ee54 <mem_alloc.constprop.4+0x154>
   2ee3a:	3001      	adds	r0, #1
   2ee3c:	4583      	cmp	fp, r0
   2ee3e:	ea4f 1550 	mov.w	r5, r0, lsr #5
   2ee42:	f000 061f 	and.w	r6, r0, #31
   2ee46:	d1f1      	bne.n	2ee2c <mem_alloc.constprop.4+0x12c>
   2ee48:	3101      	adds	r1, #1
   2ee4a:	4549      	cmp	r1, r9
   2ee4c:	f108 0808 	add.w	r8, r8, #8
   2ee50:	d3c4      	bcc.n	2eddc <mem_alloc.constprop.4+0xdc>
   2ee52:	e7b4      	b.n	2edbe <mem_alloc.constprop.4+0xbe>
   2ee54:	2101      	movs	r1, #1
   2ee56:	40b1      	lsls	r1, r6
   2ee58:	899e      	ldrh	r6, [r3, #12]
   2ee5a:	ea22 0201 	bic.w	r2, r2, r1
   2ee5e:	eba0 000e 	sub.w	r0, r0, lr
   2ee62:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   2ee66:	685c      	ldr	r4, [r3, #4]
   2ee68:	2e00      	cmp	r6, #0
   2ee6a:	d0a8      	beq.n	2edbe <mem_alloc.constprop.4+0xbe>
   2ee6c:	887a      	ldrh	r2, [r7, #2]
   2ee6e:	4282      	cmp	r2, r0
   2ee70:	d811      	bhi.n	2ee96 <mem_alloc.constprop.4+0x196>
   2ee72:	2100      	movs	r1, #0
   2ee74:	1d3b      	adds	r3, r7, #4
   2ee76:	e003      	b.n	2ee80 <mem_alloc.constprop.4+0x180>
   2ee78:	885a      	ldrh	r2, [r3, #2]
   2ee7a:	3304      	adds	r3, #4
   2ee7c:	4282      	cmp	r2, r0
   2ee7e:	d80a      	bhi.n	2ee96 <mem_alloc.constprop.4+0x196>
   2ee80:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   2ee84:	3101      	adds	r1, #1
   2ee86:	428e      	cmp	r6, r1
   2ee88:	eba0 0002 	sub.w	r0, r0, r2
   2ee8c:	fb02 4405 	mla	r4, r2, r5, r4
   2ee90:	461f      	mov	r7, r3
   2ee92:	d1f1      	bne.n	2ee78 <mem_alloc.constprop.4+0x178>
   2ee94:	e793      	b.n	2edbe <mem_alloc.constprop.4+0xbe>
   2ee96:	883b      	ldrh	r3, [r7, #0]
   2ee98:	fb00 4003 	mla	r0, r0, r3, r4
   2ee9c:	b003      	add	sp, #12
   2ee9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eea2:	4670      	mov	r0, lr
   2eea4:	e7b1      	b.n	2ee0a <mem_alloc.constprop.4+0x10a>
   2eea6:	9a00      	ldr	r2, [sp, #0]
   2eea8:	2a10      	cmp	r2, #16
   2eeaa:	bf08      	it	eq
   2eeac:	210f      	moveq	r1, #15
   2eeae:	d08f      	beq.n	2edd0 <mem_alloc.constprop.4+0xd0>
   2eeb0:	e785      	b.n	2edbe <mem_alloc.constprop.4+0xbe>
   2eeb2:	bf00      	nop
   2eeb4:	20024b40 	.word	0x20024b40
   2eeb8:	20024b04 	.word	0x20024b04
   2eebc:	20024ac0 	.word	0x20024ac0

0002eec0 <nrf_mem_init>:
   2eec0:	b570      	push	{r4, r5, r6, lr}
   2eec2:	2200      	movs	r2, #0
   2eec4:	2501      	movs	r5, #1
   2eec6:	4833      	ldr	r0, [pc, #204]	; (2ef94 <nrf_mem_init+0xd4>)
   2eec8:	0951      	lsrs	r1, r2, #5
   2eeca:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2eece:	f002 031f 	and.w	r3, r2, #31
   2eed2:	fa05 f303 	lsl.w	r3, r5, r3
   2eed6:	3201      	adds	r2, #1
   2eed8:	4323      	orrs	r3, r4
   2eeda:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2eede:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   2eee2:	d1f1      	bne.n	2eec8 <nrf_mem_init+0x8>
   2eee4:	2400      	movs	r4, #0
   2eee6:	4b2c      	ldr	r3, [pc, #176]	; (2ef98 <nrf_mem_init+0xd8>)
   2eee8:	4621      	mov	r1, r4
   2eeea:	223c      	movs	r2, #60	; 0x3c
   2eeec:	482b      	ldr	r0, [pc, #172]	; (2ef9c <nrf_mem_init+0xdc>)
   2eeee:	601c      	str	r4, [r3, #0]
   2eef0:	f00f ff0b 	bl	3ed0a <memset>
   2eef4:	2110      	movs	r1, #16
   2eef6:	2205      	movs	r2, #5
   2eef8:	4b29      	ldr	r3, [pc, #164]	; (2efa0 <nrf_mem_init+0xe0>)
   2eefa:	4e2a      	ldr	r6, [pc, #168]	; (2efa4 <nrf_mem_init+0xe4>)
   2eefc:	e9c3 4400 	strd	r4, r4, [r3]
   2ef00:	60d9      	str	r1, [r3, #12]
   2ef02:	6159      	str	r1, [r3, #20]
   2ef04:	61d9      	str	r1, [r3, #28]
   2ef06:	6259      	str	r1, [r3, #36]	; 0x24
   2ef08:	62d9      	str	r1, [r3, #44]	; 0x2c
   2ef0a:	6359      	str	r1, [r3, #52]	; 0x34
   2ef0c:	63d9      	str	r1, [r3, #60]	; 0x3c
   2ef0e:	6459      	str	r1, [r3, #68]	; 0x44
   2ef10:	64d9      	str	r1, [r3, #76]	; 0x4c
   2ef12:	6559      	str	r1, [r3, #84]	; 0x54
   2ef14:	65d9      	str	r1, [r3, #92]	; 0x5c
   2ef16:	6659      	str	r1, [r3, #100]	; 0x64
   2ef18:	66d9      	str	r1, [r3, #108]	; 0x6c
   2ef1a:	6759      	str	r1, [r3, #116]	; 0x74
   2ef1c:	67d9      	str	r1, [r3, #124]	; 0x7c
   2ef1e:	609a      	str	r2, [r3, #8]
   2ef20:	611a      	str	r2, [r3, #16]
   2ef22:	619a      	str	r2, [r3, #24]
   2ef24:	621a      	str	r2, [r3, #32]
   2ef26:	629a      	str	r2, [r3, #40]	; 0x28
   2ef28:	631a      	str	r2, [r3, #48]	; 0x30
   2ef2a:	639a      	str	r2, [r3, #56]	; 0x38
   2ef2c:	641a      	str	r2, [r3, #64]	; 0x40
   2ef2e:	649a      	str	r2, [r3, #72]	; 0x48
   2ef30:	651a      	str	r2, [r3, #80]	; 0x50
   2ef32:	659a      	str	r2, [r3, #88]	; 0x58
   2ef34:	661a      	str	r2, [r3, #96]	; 0x60
   2ef36:	669a      	str	r2, [r3, #104]	; 0x68
   2ef38:	671a      	str	r2, [r3, #112]	; 0x70
   2ef3a:	679a      	str	r2, [r3, #120]	; 0x78
   2ef3c:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   2ef40:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   2ef44:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   2ef48:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   2ef4c:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   2ef50:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   2ef54:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   2ef58:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   2ef5c:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   2ef60:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   2ef64:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   2ef68:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   2ef6c:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   2ef70:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   2ef74:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   2ef78:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   2ef7c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   2ef80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2ef84:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   2ef88:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   2ef8c:	4620      	mov	r0, r4
   2ef8e:	7035      	strb	r5, [r6, #0]
   2ef90:	bd70      	pop	{r4, r5, r6, pc}
   2ef92:	bf00      	nop
   2ef94:	20024ac0 	.word	0x20024ac0
   2ef98:	20024b00 	.word	0x20024b00
   2ef9c:	20024b04 	.word	0x20024b04
   2efa0:	20024b40 	.word	0x20024b40
   2efa4:	2002b9c6 	.word	0x2002b9c6

0002efa8 <nrf_mem_register>:
   2efa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2efac:	4b87      	ldr	r3, [pc, #540]	; (2f1cc <nrf_mem_register+0x224>)
   2efae:	b087      	sub	sp, #28
   2efb0:	781b      	ldrb	r3, [r3, #0]
   2efb2:	2b00      	cmp	r3, #0
   2efb4:	f000 808c 	beq.w	2f0d0 <nrf_mem_register+0x128>
   2efb8:	b328      	cbz	r0, 2f006 <nrf_mem_register+0x5e>
   2efba:	b321      	cbz	r1, 2f006 <nrf_mem_register+0x5e>
   2efbc:	780b      	ldrb	r3, [r1, #0]
   2efbe:	f8df 8218 	ldr.w	r8, [pc, #536]	; 2f1d8 <nrf_mem_register+0x230>
   2efc2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   2efc6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   2efca:	685b      	ldr	r3, [r3, #4]
   2efcc:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   2efd0:	4463      	add	r3, ip
   2efd2:	2b10      	cmp	r3, #16
   2efd4:	d811      	bhi.n	2effa <nrf_mem_register+0x52>
   2efd6:	f04f 0a00 	mov.w	sl, #0
   2efda:	4689      	mov	r9, r1
   2efdc:	4b7c      	ldr	r3, [pc, #496]	; (2f1d0 <nrf_mem_register+0x228>)
   2efde:	4f7d      	ldr	r7, [pc, #500]	; (2f1d4 <nrf_mem_register+0x22c>)
   2efe0:	681b      	ldr	r3, [r3, #0]
   2efe2:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   2efe6:	9300      	str	r3, [sp, #0]
   2efe8:	68b9      	ldr	r1, [r7, #8]
   2efea:	b191      	cbz	r1, 2f012 <nrf_mem_register+0x6a>
   2efec:	f10a 0a01 	add.w	sl, sl, #1
   2eff0:	f1ba 0f05 	cmp.w	sl, #5
   2eff4:	f107 070c 	add.w	r7, r7, #12
   2eff8:	d1f6      	bne.n	2efe8 <nrf_mem_register+0x40>
   2effa:	f248 1b07 	movw	fp, #33031	; 0x8107
   2effe:	4658      	mov	r0, fp
   2f000:	b007      	add	sp, #28
   2f002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f006:	f248 1b0e 	movw	fp, #33038	; 0x810e
   2f00a:	4658      	mov	r0, fp
   2f00c:	b007      	add	sp, #28
   2f00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f012:	f1bc 0f00 	cmp.w	ip, #0
   2f016:	d061      	beq.n	2f0dc <nrf_mem_register+0x134>
   2f018:	460d      	mov	r5, r1
   2f01a:	460c      	mov	r4, r1
   2f01c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   2f020:	eb0e 0b03 	add.w	fp, lr, r3
   2f024:	885a      	ldrh	r2, [r3, #2]
   2f026:	f833 6b04 	ldrh.w	r6, [r3], #4
   2f02a:	4415      	add	r5, r2
   2f02c:	459b      	cmp	fp, r3
   2f02e:	fb02 4406 	mla	r4, r2, r6, r4
   2f032:	d1f7      	bne.n	2f024 <nrf_mem_register+0x7c>
   2f034:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2f038:	42a3      	cmp	r3, r4
   2f03a:	d3d7      	bcc.n	2efec <nrf_mem_register+0x44>
   2f03c:	9b00      	ldr	r3, [sp, #0]
   2f03e:	442b      	add	r3, r5
   2f040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2f044:	d2d2      	bcs.n	2efec <nrf_mem_register+0x44>
   2f046:	4c63      	ldr	r4, [pc, #396]	; (2f1d4 <nrf_mem_register+0x22c>)
   2f048:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   2f04c:	0092      	lsls	r2, r2, #2
   2f04e:	f8c0 a000 	str.w	sl, [r0]
   2f052:	18a0      	adds	r0, r4, r2
   2f054:	f844 9002 	str.w	r9, [r4, r2]
   2f058:	9a00      	ldr	r2, [sp, #0]
   2f05a:	468b      	mov	fp, r1
   2f05c:	e9c0 2501 	strd	r2, r5, [r0, #4]
   2f060:	f899 2001 	ldrb.w	r2, [r9, #1]
   2f064:	485a      	ldr	r0, [pc, #360]	; (2f1d0 <nrf_mem_register+0x228>)
   2f066:	2a01      	cmp	r2, #1
   2f068:	6003      	str	r3, [r0, #0]
   2f06a:	d0c8      	beq.n	2effe <nrf_mem_register+0x56>
   2f06c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   2f070:	2b00      	cmp	r3, #0
   2f072:	d0c4      	beq.n	2effe <nrf_mem_register+0x56>
   2f074:	2500      	movs	r5, #0
   2f076:	f8cd 9004 	str.w	r9, [sp, #4]
   2f07a:	f8cd a00c 	str.w	sl, [sp, #12]
   2f07e:	f8cd b014 	str.w	fp, [sp, #20]
   2f082:	9b01      	ldr	r3, [sp, #4]
   2f084:	781f      	ldrb	r7, [r3, #0]
   2f086:	691a      	ldr	r2, [r3, #16]
   2f088:	013b      	lsls	r3, r7, #4
   2f08a:	eb03 0907 	add.w	r9, r3, r7
   2f08e:	9300      	str	r3, [sp, #0]
   2f090:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   2f094:	6859      	ldr	r1, [r3, #4]
   2f096:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   2f09a:	9102      	str	r1, [sp, #8]
   2f09c:	bb39      	cbnz	r1, 2f0ee <nrf_mem_register+0x146>
   2f09e:	9a03      	ldr	r2, [sp, #12]
   2f0a0:	60dd      	str	r5, [r3, #12]
   2f0a2:	609a      	str	r2, [r3, #8]
   2f0a4:	9b00      	ldr	r3, [sp, #0]
   2f0a6:	443b      	add	r3, r7
   2f0a8:	461f      	mov	r7, r3
   2f0aa:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   2f0ae:	684b      	ldr	r3, [r1, #4]
   2f0b0:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   2f0b4:	3301      	adds	r3, #1
   2f0b6:	4294      	cmp	r4, r2
   2f0b8:	604b      	str	r3, [r1, #4]
   2f0ba:	d912      	bls.n	2f0e2 <nrf_mem_register+0x13a>
   2f0bc:	9b01      	ldr	r3, [sp, #4]
   2f0be:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   2f0c2:	899b      	ldrh	r3, [r3, #12]
   2f0c4:	3501      	adds	r5, #1
   2f0c6:	429d      	cmp	r5, r3
   2f0c8:	d3db      	bcc.n	2f082 <nrf_mem_register+0xda>
   2f0ca:	f8dd b014 	ldr.w	fp, [sp, #20]
   2f0ce:	e796      	b.n	2effe <nrf_mem_register+0x56>
   2f0d0:	f248 1b08 	movw	fp, #33032	; 0x8108
   2f0d4:	4658      	mov	r0, fp
   2f0d6:	b007      	add	sp, #28
   2f0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f0dc:	9b00      	ldr	r3, [sp, #0]
   2f0de:	4665      	mov	r5, ip
   2f0e0:	e7ae      	b.n	2f040 <nrf_mem_register+0x98>
   2f0e2:	9b01      	ldr	r3, [sp, #4]
   2f0e4:	3501      	adds	r5, #1
   2f0e6:	899b      	ldrh	r3, [r3, #12]
   2f0e8:	42ab      	cmp	r3, r5
   2f0ea:	d8ca      	bhi.n	2f082 <nrf_mem_register+0xda>
   2f0ec:	e7ed      	b.n	2f0ca <nrf_mem_register+0x122>
   2f0ee:	2600      	movs	r6, #0
   2f0f0:	f101 3aff 	add.w	sl, r1, #4294967295
   2f0f4:	9504      	str	r5, [sp, #16]
   2f0f6:	eb06 000a 	add.w	r0, r6, sl
   2f0fa:	eb09 0206 	add.w	r2, r9, r6
   2f0fe:	3201      	adds	r2, #1
   2f100:	3001      	adds	r0, #1
   2f102:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   2f106:	0840      	lsrs	r0, r0, #1
   2f108:	4d32      	ldr	r5, [pc, #200]	; (2f1d4 <nrf_mem_register+0x22c>)
   2f10a:	eb09 0100 	add.w	r1, r9, r0
   2f10e:	eb09 030a 	add.w	r3, r9, sl
   2f112:	3101      	adds	r1, #1
   2f114:	3301      	adds	r3, #1
   2f116:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   2f11a:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   2f11e:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   2f122:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   2f126:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   2f12a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   2f12e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   2f132:	f8db b010 	ldr.w	fp, [fp, #16]
   2f136:	6852      	ldr	r2, [r2, #4]
   2f138:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   2f13c:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   2f140:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   2f144:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   2f148:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   2f14c:	f8de e010 	ldr.w	lr, [lr, #16]
   2f150:	6849      	ldr	r1, [r1, #4]
   2f152:	f8dc c010 	ldr.w	ip, [ip, #16]
   2f156:	685b      	ldr	r3, [r3, #4]
   2f158:	4294      	cmp	r4, r2
   2f15a:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   2f15e:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   2f162:	d92d      	bls.n	2f1c0 <nrf_mem_register+0x218>
   2f164:	429c      	cmp	r4, r3
   2f166:	d22d      	bcs.n	2f1c4 <nrf_mem_register+0x21c>
   2f168:	428c      	cmp	r4, r1
   2f16a:	d924      	bls.n	2f1b6 <nrf_mem_register+0x20e>
   2f16c:	1c46      	adds	r6, r0, #1
   2f16e:	45b2      	cmp	sl, r6
   2f170:	d2c1      	bcs.n	2f0f6 <nrf_mem_register+0x14e>
   2f172:	2610      	movs	r6, #16
   2f174:	9d04      	ldr	r5, [sp, #16]
   2f176:	9a02      	ldr	r2, [sp, #8]
   2f178:	42b2      	cmp	r2, r6
   2f17a:	d911      	bls.n	2f1a0 <nrf_mem_register+0x1f8>
   2f17c:	9b00      	ldr	r3, [sp, #0]
   2f17e:	443b      	add	r3, r7
   2f180:	441a      	add	r2, r3
   2f182:	4433      	add	r3, r6
   2f184:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   2f188:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   2f18c:	2208      	movs	r2, #8
   2f18e:	4651      	mov	r1, sl
   2f190:	eb0a 0002 	add.w	r0, sl, r2
   2f194:	f1aa 0a08 	sub.w	sl, sl, #8
   2f198:	f00f fd97 	bl	3ecca <memcpy>
   2f19c:	45d1      	cmp	r9, sl
   2f19e:	d1f5      	bne.n	2f18c <nrf_mem_register+0x1e4>
   2f1a0:	9b00      	ldr	r3, [sp, #0]
   2f1a2:	9903      	ldr	r1, [sp, #12]
   2f1a4:	443b      	add	r3, r7
   2f1a6:	4433      	add	r3, r6
   2f1a8:	3301      	adds	r3, #1
   2f1aa:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   2f1ae:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   2f1b2:	6055      	str	r5, [r2, #4]
   2f1b4:	e776      	b.n	2f0a4 <nrf_mem_register+0xfc>
   2f1b6:	f100 3aff 	add.w	sl, r0, #4294967295
   2f1ba:	4556      	cmp	r6, sl
   2f1bc:	d99b      	bls.n	2f0f6 <nrf_mem_register+0x14e>
   2f1be:	e7d8      	b.n	2f172 <nrf_mem_register+0x1ca>
   2f1c0:	9d04      	ldr	r5, [sp, #16]
   2f1c2:	e7d8      	b.n	2f176 <nrf_mem_register+0x1ce>
   2f1c4:	9d04      	ldr	r5, [sp, #16]
   2f1c6:	f10a 0601 	add.w	r6, sl, #1
   2f1ca:	e7d4      	b.n	2f176 <nrf_mem_register+0x1ce>
   2f1cc:	2002b9c6 	.word	0x2002b9c6
   2f1d0:	20024b00 	.word	0x20024b00
   2f1d4:	20024b04 	.word	0x20024b04
   2f1d8:	20024b40 	.word	0x20024b40

0002f1dc <nrf_malloc>:
   2f1dc:	4b03      	ldr	r3, [pc, #12]	; (2f1ec <nrf_malloc+0x10>)
   2f1de:	781b      	ldrb	r3, [r3, #0]
   2f1e0:	b10b      	cbz	r3, 2f1e6 <nrf_malloc+0xa>
   2f1e2:	f7ff bd8d 	b.w	2ed00 <mem_alloc.constprop.4>
   2f1e6:	4618      	mov	r0, r3
   2f1e8:	4770      	bx	lr
   2f1ea:	bf00      	nop
   2f1ec:	2002b9c6 	.word	0x2002b9c6

0002f1f0 <nrf_free>:
   2f1f0:	4b04      	ldr	r3, [pc, #16]	; (2f204 <nrf_free+0x14>)
   2f1f2:	781b      	ldrb	r3, [r3, #0]
   2f1f4:	b123      	cbz	r3, 2f200 <nrf_free+0x10>
   2f1f6:	b118      	cbz	r0, 2f200 <nrf_free+0x10>
   2f1f8:	4601      	mov	r1, r0
   2f1fa:	2000      	movs	r0, #0
   2f1fc:	f7ff bc30 	b.w	2ea60 <mem_free>
   2f200:	4770      	bx	lr
   2f202:	bf00      	nop
   2f204:	2002b9c6 	.word	0x2002b9c6

0002f208 <nrf_shared_malloc>:
   2f208:	4b03      	ldr	r3, [pc, #12]	; (2f218 <nrf_shared_malloc+0x10>)
   2f20a:	781b      	ldrb	r3, [r3, #0]
   2f20c:	b10b      	cbz	r3, 2f212 <nrf_shared_malloc+0xa>
   2f20e:	f7ff bc93 	b.w	2eb38 <mem_alloc.constprop.5>
   2f212:	4618      	mov	r0, r3
   2f214:	4770      	bx	lr
   2f216:	bf00      	nop
   2f218:	2002b9c6 	.word	0x2002b9c6

0002f21c <nrf_shared_free>:
   2f21c:	4b04      	ldr	r3, [pc, #16]	; (2f230 <nrf_shared_free+0x14>)
   2f21e:	781b      	ldrb	r3, [r3, #0]
   2f220:	b123      	cbz	r3, 2f22c <nrf_shared_free+0x10>
   2f222:	b118      	cbz	r0, 2f22c <nrf_shared_free+0x10>
   2f224:	4601      	mov	r1, r0
   2f226:	2001      	movs	r0, #1
   2f228:	f7ff bc1a 	b.w	2ea60 <mem_free>
   2f22c:	4770      	bx	lr
   2f22e:	bf00      	nop
   2f230:	2002b9c6 	.word	0x2002b9c6

0002f234 <ip_client_event_handler>:
   2f234:	f850 1b08 	ldr.w	r1, [r0], #8
   2f238:	0c09      	lsrs	r1, r1, #16
   2f23a:	f004 bded 	b.w	33e18 <rpc_ip_event_handler>
   2f23e:	bf00      	nop

0002f240 <rpc_ip_client_init>:
   2f240:	4801      	ldr	r0, [pc, #4]	; (2f248 <rpc_ip_client_init+0x8>)
   2f242:	f005 baef 	b.w	34824 <rpc_client_register>
   2f246:	bf00      	nop
   2f248:	00040d08 	.word	0x00040d08

0002f24c <rpc_ip_client_request_alloc>:
   2f24c:	2300      	movs	r3, #0
   2f24e:	b510      	push	{r4, lr}
   2f250:	b082      	sub	sp, #8
   2f252:	9301      	str	r3, [sp, #4]
   2f254:	b158      	cbz	r0, 2f26e <rpc_ip_client_request_alloc+0x22>
   2f256:	4604      	mov	r4, r0
   2f258:	aa01      	add	r2, sp, #4
   2f25a:	2004      	movs	r0, #4
   2f25c:	f005 fd1a 	bl	34c94 <rpc_message_alloc>
   2f260:	b918      	cbnz	r0, 2f26a <rpc_ip_client_request_alloc+0x1e>
   2f262:	9b01      	ldr	r3, [sp, #4]
   2f264:	b10b      	cbz	r3, 2f26a <rpc_ip_client_request_alloc+0x1e>
   2f266:	3308      	adds	r3, #8
   2f268:	6023      	str	r3, [r4, #0]
   2f26a:	b002      	add	sp, #8
   2f26c:	bd10      	pop	{r4, pc}
   2f26e:	2007      	movs	r0, #7
   2f270:	b002      	add	sp, #8
   2f272:	bd10      	pop	{r4, pc}

0002f274 <rpc_ip_client_request_send>:
   2f274:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   2f278:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   2f27c:	d10b      	bne.n	2f296 <rpc_ip_client_request_send+0x22>
   2f27e:	b160      	cbz	r0, 2f29a <rpc_ip_client_request_send+0x26>
   2f280:	4603      	mov	r3, r0
   2f282:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2f286:	2004      	movs	r0, #4
   2f288:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2f28c:	f843 1d08 	str.w	r1, [r3, #-8]!
   2f290:	4619      	mov	r1, r3
   2f292:	f005 bce7 	b.w	34c64 <rpc_message_send>
   2f296:	200f      	movs	r0, #15
   2f298:	4770      	bx	lr
   2f29a:	2007      	movs	r0, #7
   2f29c:	4770      	bx	lr
   2f29e:	bf00      	nop

0002f2a0 <rpc_ip_client_message_free>:
   2f2a0:	b120      	cbz	r0, 2f2ac <rpc_ip_client_message_free+0xc>
   2f2a2:	f1a0 0108 	sub.w	r1, r0, #8
   2f2a6:	2004      	movs	r0, #4
   2f2a8:	f005 bd26 	b.w	34cf8 <rpc_message_free>
   2f2ac:	2007      	movs	r0, #7
   2f2ae:	4770      	bx	lr

0002f2b0 <rpc_ip_client_data_free>:
   2f2b0:	b118      	cbz	r0, 2f2ba <rpc_ip_client_data_free+0xa>
   2f2b2:	4601      	mov	r1, r0
   2f2b4:	2004      	movs	r0, #4
   2f2b6:	f005 be31 	b.w	34f1c <rpc_message_data_free>
   2f2ba:	2007      	movs	r0, #7
   2f2bc:	4770      	bx	lr
   2f2be:	bf00      	nop

0002f2c0 <secure_client_socket>:
   2f2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f2c4:	460c      	mov	r4, r1
   2f2c6:	680b      	ldr	r3, [r1, #0]
   2f2c8:	4f46      	ldr	r7, [pc, #280]	; (2f3e4 <secure_client_socket+0x124>)
   2f2ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2f2ce:	600b      	str	r3, [r1, #0]
   2f2d0:	680b      	ldr	r3, [r1, #0]
   2f2d2:	00c6      	lsls	r6, r0, #3
   2f2d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2f2d8:	600b      	str	r3, [r1, #0]
   2f2da:	eb07 0a06 	add.w	sl, r7, r6
   2f2de:	b082      	sub	sp, #8
   2f2e0:	f8da 3004 	ldr.w	r3, [sl, #4]
   2f2e4:	6989      	ldr	r1, [r1, #24]
   2f2e6:	f247 0281 	movw	r2, #28801	; 0x7081
   2f2ea:	4605      	mov	r5, r0
   2f2ec:	f8d4 8000 	ldr.w	r8, [r4]
   2f2f0:	f003 fcf0 	bl	32cd4 <ip_interface_request_create>
   2f2f4:	2800      	cmp	r0, #0
   2f2f6:	d06f      	beq.n	2f3d8 <secure_client_socket+0x118>
   2f2f8:	f8da 2004 	ldr.w	r2, [sl, #4]
   2f2fc:	4681      	mov	r9, r0
   2f2fe:	2a00      	cmp	r2, #0
   2f300:	d15f      	bne.n	2f3c2 <secure_client_socket+0x102>
   2f302:	4b39      	ldr	r3, [pc, #228]	; (2f3e8 <secure_client_socket+0x128>)
   2f304:	1971      	adds	r1, r6, r5
   2f306:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2f30a:	2224      	movs	r2, #36	; 0x24
   2f30c:	f109 0014 	add.w	r0, r9, #20
   2f310:	f00f fcdb 	bl	3ecca <memcpy>
   2f314:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2f318:	4649      	mov	r1, r9
   2f31a:	3324      	adds	r3, #36	; 0x24
   2f31c:	f8c9 3008 	str.w	r3, [r9, #8]
   2f320:	6822      	ldr	r2, [r4, #0]
   2f322:	4643      	mov	r3, r8
   2f324:	0c12      	lsrs	r2, r2, #16
   2f326:	0412      	lsls	r2, r2, #16
   2f328:	f042 020a 	orr.w	r2, r2, #10
   2f32c:	6022      	str	r2, [r4, #0]
   2f32e:	4620      	mov	r0, r4
   2f330:	f247 0281 	movw	r2, #28801	; 0x7081
   2f334:	f003 fcee 	bl	32d14 <ip_interface_request_send>
   2f338:	4603      	mov	r3, r0
   2f33a:	b970      	cbnz	r0, 2f35a <secure_client_socket+0x9a>
   2f33c:	6823      	ldr	r3, [r4, #0]
   2f33e:	00db      	lsls	r3, r3, #3
   2f340:	d40f      	bmi.n	2f362 <secure_client_socket+0xa2>
   2f342:	f04f 33ff 	mov.w	r3, #4294967295
   2f346:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2f34a:	210b      	movs	r1, #11
   2f34c:	4628      	mov	r0, r5
   2f34e:	f003 fcf5 	bl	32d3c <ip_interface_wait>
   2f352:	4603      	mov	r3, r0
   2f354:	b150      	cbz	r0, 2f36c <secure_client_socket+0xac>
   2f356:	f8c4 8000 	str.w	r8, [r4]
   2f35a:	4618      	mov	r0, r3
   2f35c:	b002      	add	sp, #8
   2f35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f362:	2373      	movs	r3, #115	; 0x73
   2f364:	4618      	mov	r0, r3
   2f366:	b002      	add	sp, #8
   2f368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f36c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   2f370:	f04f 33ff 	mov.w	r3, #4294967295
   2f374:	4611      	mov	r1, r2
   2f376:	4628      	mov	r0, r5
   2f378:	f003 fce0 	bl	32d3c <ip_interface_wait>
   2f37c:	4603      	mov	r3, r0
   2f37e:	bb30      	cbnz	r0, 2f3ce <secure_client_socket+0x10e>
   2f380:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   2f384:	b138      	cbz	r0, 2f396 <secure_client_socket+0xd6>
   2f386:	9301      	str	r3, [sp, #4]
   2f388:	f7ff ff32 	bl	2f1f0 <nrf_free>
   2f38c:	9b01      	ldr	r3, [sp, #4]
   2f38e:	443e      	add	r6, r7
   2f390:	6073      	str	r3, [r6, #4]
   2f392:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   2f396:	4618      	mov	r0, r3
   2f398:	6822      	ldr	r2, [r4, #0]
   2f39a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   2f39e:	6022      	str	r2, [r4, #0]
   2f3a0:	6822      	ldr	r2, [r4, #0]
   2f3a2:	0c12      	lsrs	r2, r2, #16
   2f3a4:	0412      	lsls	r2, r2, #16
   2f3a6:	f042 020c 	orr.w	r2, r2, #12
   2f3aa:	6022      	str	r2, [r4, #0]
   2f3ac:	6822      	ldr	r2, [r4, #0]
   2f3ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   2f3b2:	6022      	str	r2, [r4, #0]
   2f3b4:	6822      	ldr	r2, [r4, #0]
   2f3b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2f3ba:	6022      	str	r2, [r4, #0]
   2f3bc:	b002      	add	sp, #8
   2f3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f3c2:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   2f3c6:	6800      	ldr	r0, [r0, #0]
   2f3c8:	f00f fc7f 	bl	3ecca <memcpy>
   2f3cc:	e799      	b.n	2f302 <secure_client_socket+0x42>
   2f3ce:	2b73      	cmp	r3, #115	; 0x73
   2f3d0:	d0c3      	beq.n	2f35a <secure_client_socket+0x9a>
   2f3d2:	f8c4 8000 	str.w	r8, [r4]
   2f3d6:	e7c0      	b.n	2f35a <secure_client_socket+0x9a>
   2f3d8:	230c      	movs	r3, #12
   2f3da:	4618      	mov	r0, r3
   2f3dc:	b002      	add	sp, #8
   2f3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f3e2:	bf00      	nop
   2f3e4:	20024d94 	.word	0x20024d94
   2f3e8:	20024c50 	.word	0x20024c50

0002f3ec <tls_interface_init>:
   2f3ec:	2000      	movs	r0, #0
   2f3ee:	4770      	bx	lr

0002f3f0 <tls_interface_open>:
   2f3f0:	b538      	push	{r3, r4, r5, lr}
   2f3f2:	f020 0308 	bic.w	r3, r0, #8
   2f3f6:	2b02      	cmp	r3, #2
   2f3f8:	d006      	beq.n	2f408 <tls_interface_open+0x18>
   2f3fa:	202f      	movs	r0, #47	; 0x2f
   2f3fc:	f7f7 fbb8 	bl	26b70 <bsd_os_errno_set>
   2f400:	f04f 35ff 	mov.w	r5, #4294967295
   2f404:	4628      	mov	r0, r5
   2f406:	bd38      	pop	{r3, r4, r5, pc}
   2f408:	4614      	mov	r4, r2
   2f40a:	1e4a      	subs	r2, r1, #1
   2f40c:	2a01      	cmp	r2, #1
   2f40e:	d828      	bhi.n	2f462 <tls_interface_open+0x72>
   2f410:	bb14      	cbnz	r4, 2f458 <tls_interface_open+0x68>
   2f412:	2901      	cmp	r1, #1
   2f414:	bf06      	itte	eq
   2f416:	2301      	moveq	r3, #1
   2f418:	f44f 7482 	moveq.w	r4, #260	; 0x104
   2f41c:	f44f 7487 	movne.w	r4, #270	; 0x10e
   2f420:	461a      	mov	r2, r3
   2f422:	f003 fcb7 	bl	32d94 <ip_interface_open>
   2f426:	1e05      	subs	r5, r0, #0
   2f428:	db26      	blt.n	2f478 <tls_interface_open+0x88>
   2f42a:	4b15      	ldr	r3, [pc, #84]	; (2f480 <tls_interface_open+0x90>)
   2f42c:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   2f430:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2f434:	2224      	movs	r2, #36	; 0x24
   2f436:	4913      	ldr	r1, [pc, #76]	; (2f484 <tls_interface_open+0x94>)
   2f438:	f00f fc47 	bl	3ecca <memcpy>
   2f43c:	4628      	mov	r0, r5
   2f43e:	f005 f88d 	bl	3455c <interface_socket_from_handle_get>
   2f442:	6803      	ldr	r3, [r0, #0]
   2f444:	6144      	str	r4, [r0, #20]
   2f446:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2f44a:	6003      	str	r3, [r0, #0]
   2f44c:	6803      	ldr	r3, [r0, #0]
   2f44e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2f452:	6003      	str	r3, [r0, #0]
   2f454:	4628      	mov	r0, r5
   2f456:	bd38      	pop	{r3, r4, r5, pc}
   2f458:	2901      	cmp	r1, #1
   2f45a:	d008      	beq.n	2f46e <tls_interface_open+0x7e>
   2f45c:	f5b4 7f87 	cmp.w	r4, #270	; 0x10e
   2f460:	d0de      	beq.n	2f420 <tls_interface_open+0x30>
   2f462:	2016      	movs	r0, #22
   2f464:	f7f7 fb84 	bl	26b70 <bsd_os_errno_set>
   2f468:	f04f 35ff 	mov.w	r5, #4294967295
   2f46c:	e7ca      	b.n	2f404 <tls_interface_open+0x14>
   2f46e:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   2f472:	d1f6      	bne.n	2f462 <tls_interface_open+0x72>
   2f474:	460b      	mov	r3, r1
   2f476:	e7d3      	b.n	2f420 <tls_interface_open+0x30>
   2f478:	f04f 35ff 	mov.w	r5, #4294967295
   2f47c:	e7c2      	b.n	2f404 <tls_interface_open+0x14>
   2f47e:	bf00      	nop
   2f480:	20024c50 	.word	0x20024c50
   2f484:	00040d18 	.word	0x00040d18

0002f488 <tls_interface_close>:
   2f488:	b538      	push	{r3, r4, r5, lr}
   2f48a:	4604      	mov	r4, r0
   2f48c:	f005 f866 	bl	3455c <interface_socket_from_handle_get>
   2f490:	b180      	cbz	r0, 2f4b4 <tls_interface_close+0x2c>
   2f492:	4d0b      	ldr	r5, [pc, #44]	; (2f4c0 <tls_interface_close+0x38>)
   2f494:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   2f498:	b138      	cbz	r0, 2f4aa <tls_interface_close+0x22>
   2f49a:	f7ff fea9 	bl	2f1f0 <nrf_free>
   2f49e:	2300      	movs	r3, #0
   2f4a0:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   2f4a4:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   2f4a8:	6053      	str	r3, [r2, #4]
   2f4aa:	4620      	mov	r0, r4
   2f4ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2f4b0:	f003 bd1c 	b.w	32eec <ip_interface_close>
   2f4b4:	2009      	movs	r0, #9
   2f4b6:	f7f7 fb5b 	bl	26b70 <bsd_os_errno_set>
   2f4ba:	f04f 30ff 	mov.w	r0, #4294967295
   2f4be:	bd38      	pop	{r3, r4, r5, pc}
   2f4c0:	20024d94 	.word	0x20024d94

0002f4c4 <tls_interface_sendto>:
   2f4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f4c8:	460d      	mov	r5, r1
   2f4ca:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2f4ce:	4616      	mov	r6, r2
   2f4d0:	461f      	mov	r7, r3
   2f4d2:	4604      	mov	r4, r0
   2f4d4:	f005 f842 	bl	3455c <interface_socket_from_handle_get>
   2f4d8:	2800      	cmp	r0, #0
   2f4da:	d03b      	beq.n	2f554 <tls_interface_sendto+0x90>
   2f4dc:	6803      	ldr	r3, [r0, #0]
   2f4de:	b29b      	uxth	r3, r3
   2f4e0:	2b0c      	cmp	r3, #12
   2f4e2:	d039      	beq.n	2f558 <tls_interface_sendto+0x94>
   2f4e4:	6803      	ldr	r3, [r0, #0]
   2f4e6:	b29b      	uxth	r3, r3
   2f4e8:	2b0b      	cmp	r3, #11
   2f4ea:	d111      	bne.n	2f510 <tls_interface_sendto+0x4c>
   2f4ec:	4b20      	ldr	r3, [pc, #128]	; (2f570 <tls_interface_sendto+0xac>)
   2f4ee:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   2f4f2:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   2f4f6:	2b02      	cmp	r3, #2
   2f4f8:	d038      	beq.n	2f56c <tls_interface_sendto+0xa8>
   2f4fa:	6903      	ldr	r3, [r0, #16]
   2f4fc:	2b01      	cmp	r3, #1
   2f4fe:	bf14      	ite	ne
   2f500:	2039      	movne	r0, #57	; 0x39
   2f502:	202a      	moveq	r0, #42	; 0x2a
   2f504:	f7f7 fb34 	bl	26b70 <bsd_os_errno_set>
   2f508:	f04f 30ff 	mov.w	r0, #4294967295
   2f50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f510:	6903      	ldr	r3, [r0, #16]
   2f512:	2b01      	cmp	r3, #1
   2f514:	d00b      	beq.n	2f52e <tls_interface_sendto+0x6a>
   2f516:	2b02      	cmp	r3, #2
   2f518:	d001      	beq.n	2f51e <tls_interface_sendto+0x5a>
   2f51a:	2039      	movs	r0, #57	; 0x39
   2f51c:	e7f2      	b.n	2f504 <tls_interface_sendto+0x40>
   2f51e:	6803      	ldr	r3, [r0, #0]
   2f520:	b29b      	uxth	r3, r3
   2f522:	2b02      	cmp	r3, #2
   2f524:	d007      	beq.n	2f536 <tls_interface_sendto+0x72>
   2f526:	6803      	ldr	r3, [r0, #0]
   2f528:	b29b      	uxth	r3, r3
   2f52a:	2b04      	cmp	r3, #4
   2f52c:	d003      	beq.n	2f536 <tls_interface_sendto+0x72>
   2f52e:	6803      	ldr	r3, [r0, #0]
   2f530:	b29b      	uxth	r3, r3
   2f532:	2b05      	cmp	r3, #5
   2f534:	d1f1      	bne.n	2f51a <tls_interface_sendto+0x56>
   2f536:	4b0e      	ldr	r3, [pc, #56]	; (2f570 <tls_interface_sendto+0xac>)
   2f538:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   2f53c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2f540:	2b02      	cmp	r3, #2
   2f542:	d1ea      	bne.n	2f51a <tls_interface_sendto+0x56>
   2f544:	4601      	mov	r1, r0
   2f546:	4620      	mov	r0, r4
   2f548:	f7ff feba 	bl	2f2c0 <secure_client_socket>
   2f54c:	2800      	cmp	r0, #0
   2f54e:	d003      	beq.n	2f558 <tls_interface_sendto+0x94>
   2f550:	dcd8      	bgt.n	2f504 <tls_interface_sendto+0x40>
   2f552:	e7d9      	b.n	2f508 <tls_interface_sendto+0x44>
   2f554:	2009      	movs	r0, #9
   2f556:	e7d5      	b.n	2f504 <tls_interface_sendto+0x40>
   2f558:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2f55c:	463b      	mov	r3, r7
   2f55e:	4632      	mov	r2, r6
   2f560:	4629      	mov	r1, r5
   2f562:	4620      	mov	r0, r4
   2f564:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f568:	f003 bd30 	b.w	32fcc <ip_interface_sendto>
   2f56c:	2023      	movs	r0, #35	; 0x23
   2f56e:	e7c9      	b.n	2f504 <tls_interface_sendto+0x40>
   2f570:	20024c50 	.word	0x20024c50

0002f574 <tls_interface_recvfrom>:
   2f574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f578:	460d      	mov	r5, r1
   2f57a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2f57e:	4616      	mov	r6, r2
   2f580:	461f      	mov	r7, r3
   2f582:	4604      	mov	r4, r0
   2f584:	f004 ffea 	bl	3455c <interface_socket_from_handle_get>
   2f588:	2800      	cmp	r0, #0
   2f58a:	d038      	beq.n	2f5fe <tls_interface_recvfrom+0x8a>
   2f58c:	6803      	ldr	r3, [r0, #0]
   2f58e:	b29b      	uxth	r3, r3
   2f590:	2b0c      	cmp	r3, #12
   2f592:	d00f      	beq.n	2f5b4 <tls_interface_recvfrom+0x40>
   2f594:	6803      	ldr	r3, [r0, #0]
   2f596:	b29b      	uxth	r3, r3
   2f598:	2b0d      	cmp	r3, #13
   2f59a:	d00b      	beq.n	2f5b4 <tls_interface_recvfrom+0x40>
   2f59c:	6903      	ldr	r3, [r0, #16]
   2f59e:	2b01      	cmp	r3, #1
   2f5a0:	d01a      	beq.n	2f5d8 <tls_interface_recvfrom+0x64>
   2f5a2:	2b02      	cmp	r3, #2
   2f5a4:	d010      	beq.n	2f5c8 <tls_interface_recvfrom+0x54>
   2f5a6:	2023      	movs	r0, #35	; 0x23
   2f5a8:	f7f7 fae2 	bl	26b70 <bsd_os_errno_set>
   2f5ac:	f04f 30ff 	mov.w	r0, #4294967295
   2f5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f5b4:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2f5b8:	463b      	mov	r3, r7
   2f5ba:	4632      	mov	r2, r6
   2f5bc:	4629      	mov	r1, r5
   2f5be:	4620      	mov	r0, r4
   2f5c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f5c4:	f003 be3c 	b.w	33240 <ip_interface_recvfrom>
   2f5c8:	6803      	ldr	r3, [r0, #0]
   2f5ca:	b29b      	uxth	r3, r3
   2f5cc:	2b02      	cmp	r3, #2
   2f5ce:	d007      	beq.n	2f5e0 <tls_interface_recvfrom+0x6c>
   2f5d0:	6803      	ldr	r3, [r0, #0]
   2f5d2:	b29b      	uxth	r3, r3
   2f5d4:	2b04      	cmp	r3, #4
   2f5d6:	d003      	beq.n	2f5e0 <tls_interface_recvfrom+0x6c>
   2f5d8:	6803      	ldr	r3, [r0, #0]
   2f5da:	b29b      	uxth	r3, r3
   2f5dc:	2b05      	cmp	r3, #5
   2f5de:	d1e2      	bne.n	2f5a6 <tls_interface_recvfrom+0x32>
   2f5e0:	4b08      	ldr	r3, [pc, #32]	; (2f604 <tls_interface_recvfrom+0x90>)
   2f5e2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   2f5e6:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2f5ea:	2b02      	cmp	r3, #2
   2f5ec:	d1db      	bne.n	2f5a6 <tls_interface_recvfrom+0x32>
   2f5ee:	4601      	mov	r1, r0
   2f5f0:	4620      	mov	r0, r4
   2f5f2:	f7ff fe65 	bl	2f2c0 <secure_client_socket>
   2f5f6:	2800      	cmp	r0, #0
   2f5f8:	d0dc      	beq.n	2f5b4 <tls_interface_recvfrom+0x40>
   2f5fa:	dcd5      	bgt.n	2f5a8 <tls_interface_recvfrom+0x34>
   2f5fc:	e7d6      	b.n	2f5ac <tls_interface_recvfrom+0x38>
   2f5fe:	2009      	movs	r0, #9
   2f600:	e7d2      	b.n	2f5a8 <tls_interface_recvfrom+0x34>
   2f602:	bf00      	nop
   2f604:	20024c50 	.word	0x20024c50

0002f608 <tls_interface_bind>:
   2f608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f60c:	460c      	mov	r4, r1
   2f60e:	4617      	mov	r7, r2
   2f610:	4606      	mov	r6, r0
   2f612:	f004 ffa3 	bl	3455c <interface_socket_from_handle_get>
   2f616:	2800      	cmp	r0, #0
   2f618:	d06d      	beq.n	2f6f6 <tls_interface_bind+0xee>
   2f61a:	6803      	ldr	r3, [r0, #0]
   2f61c:	4605      	mov	r5, r0
   2f61e:	b29b      	uxth	r3, r3
   2f620:	2b02      	cmp	r3, #2
   2f622:	d15a      	bne.n	2f6da <tls_interface_bind+0xd2>
   2f624:	4621      	mov	r1, r4
   2f626:	463a      	mov	r2, r7
   2f628:	4630      	mov	r0, r6
   2f62a:	f003 ffdf 	bl	335ec <ip_interface_bind>
   2f62e:	4604      	mov	r4, r0
   2f630:	2800      	cmp	r0, #0
   2f632:	d148      	bne.n	2f6c6 <tls_interface_bind+0xbe>
   2f634:	00f7      	lsls	r7, r6, #3
   2f636:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2f6fc <tls_interface_bind+0xf4>
   2f63a:	19bb      	adds	r3, r7, r6
   2f63c:	f818 3023 	ldrb.w	r3, [r8, r3, lsl #2]
   2f640:	2b01      	cmp	r3, #1
   2f642:	d002      	beq.n	2f64a <tls_interface_bind+0x42>
   2f644:	4620      	mov	r0, r4
   2f646:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f64a:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 2f700 <tls_interface_bind+0xf8>
   2f64e:	f247 0281 	movw	r2, #28801	; 0x7081
   2f652:	eb0b 0a07 	add.w	sl, fp, r7
   2f656:	f8da 3004 	ldr.w	r3, [sl, #4]
   2f65a:	69a9      	ldr	r1, [r5, #24]
   2f65c:	4630      	mov	r0, r6
   2f65e:	f003 fb39 	bl	32cd4 <ip_interface_request_create>
   2f662:	4681      	mov	r9, r0
   2f664:	2800      	cmp	r0, #0
   2f666:	d044      	beq.n	2f6f2 <tls_interface_bind+0xea>
   2f668:	f8da 2004 	ldr.w	r2, [sl, #4]
   2f66c:	2a00      	cmp	r2, #0
   2f66e:	d13a      	bne.n	2f6e6 <tls_interface_bind+0xde>
   2f670:	19b9      	adds	r1, r7, r6
   2f672:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   2f676:	2224      	movs	r2, #36	; 0x24
   2f678:	f109 0014 	add.w	r0, r9, #20
   2f67c:	f00f fb25 	bl	3ecca <memcpy>
   2f680:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2f684:	4649      	mov	r1, r9
   2f686:	3324      	adds	r3, #36	; 0x24
   2f688:	f8c9 3008 	str.w	r3, [r9, #8]
   2f68c:	682a      	ldr	r2, [r5, #0]
   2f68e:	2304      	movs	r3, #4
   2f690:	0c12      	lsrs	r2, r2, #16
   2f692:	0412      	lsls	r2, r2, #16
   2f694:	f042 020a 	orr.w	r2, r2, #10
   2f698:	602a      	str	r2, [r5, #0]
   2f69a:	4628      	mov	r0, r5
   2f69c:	f247 0281 	movw	r2, #28801	; 0x7081
   2f6a0:	f003 fb38 	bl	32d14 <ip_interface_request_send>
   2f6a4:	b9e8      	cbnz	r0, 2f6e2 <tls_interface_bind+0xda>
   2f6a6:	682b      	ldr	r3, [r5, #0]
   2f6a8:	00db      	lsls	r3, r3, #3
   2f6aa:	d418      	bmi.n	2f6de <tls_interface_bind+0xd6>
   2f6ac:	4630      	mov	r0, r6
   2f6ae:	f04f 33ff 	mov.w	r3, #4294967295
   2f6b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2f6b6:	210b      	movs	r1, #11
   2f6b8:	f003 fb40 	bl	32d3c <ip_interface_wait>
   2f6bc:	2800      	cmp	r0, #0
   2f6be:	d0c1      	beq.n	2f644 <tls_interface_bind+0x3c>
   2f6c0:	2304      	movs	r3, #4
   2f6c2:	4604      	mov	r4, r0
   2f6c4:	602b      	str	r3, [r5, #0]
   2f6c6:	2c00      	cmp	r4, #0
   2f6c8:	ddbc      	ble.n	2f644 <tls_interface_bind+0x3c>
   2f6ca:	4620      	mov	r0, r4
   2f6cc:	f04f 34ff 	mov.w	r4, #4294967295
   2f6d0:	f7f7 fa4e 	bl	26b70 <bsd_os_errno_set>
   2f6d4:	4620      	mov	r0, r4
   2f6d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f6da:	242d      	movs	r4, #45	; 0x2d
   2f6dc:	e7f5      	b.n	2f6ca <tls_interface_bind+0xc2>
   2f6de:	2473      	movs	r4, #115	; 0x73
   2f6e0:	e7f3      	b.n	2f6ca <tls_interface_bind+0xc2>
   2f6e2:	4604      	mov	r4, r0
   2f6e4:	e7ef      	b.n	2f6c6 <tls_interface_bind+0xbe>
   2f6e6:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
   2f6ea:	6800      	ldr	r0, [r0, #0]
   2f6ec:	f00f faed 	bl	3ecca <memcpy>
   2f6f0:	e7be      	b.n	2f670 <tls_interface_bind+0x68>
   2f6f2:	240c      	movs	r4, #12
   2f6f4:	e7e9      	b.n	2f6ca <tls_interface_bind+0xc2>
   2f6f6:	2409      	movs	r4, #9
   2f6f8:	e7e7      	b.n	2f6ca <tls_interface_bind+0xc2>
   2f6fa:	bf00      	nop
   2f6fc:	20024c50 	.word	0x20024c50
   2f700:	20024d94 	.word	0x20024d94

0002f704 <tls_interface_connect>:
   2f704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f706:	460e      	mov	r6, r1
   2f708:	4617      	mov	r7, r2
   2f70a:	4604      	mov	r4, r0
   2f70c:	f004 ff26 	bl	3455c <interface_socket_from_handle_get>
   2f710:	b1e8      	cbz	r0, 2f74e <tls_interface_connect+0x4a>
   2f712:	4b13      	ldr	r3, [pc, #76]	; (2f760 <tls_interface_connect+0x5c>)
   2f714:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   2f718:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2f71c:	2b02      	cmp	r3, #2
   2f71e:	d11c      	bne.n	2f75a <tls_interface_connect+0x56>
   2f720:	6803      	ldr	r3, [r0, #0]
   2f722:	4605      	mov	r5, r0
   2f724:	b29b      	uxth	r3, r3
   2f726:	2b02      	cmp	r3, #2
   2f728:	d003      	beq.n	2f732 <tls_interface_connect+0x2e>
   2f72a:	6803      	ldr	r3, [r0, #0]
   2f72c:	b29b      	uxth	r3, r3
   2f72e:	2b04      	cmp	r3, #4
   2f730:	d113      	bne.n	2f75a <tls_interface_connect+0x56>
   2f732:	463a      	mov	r2, r7
   2f734:	4631      	mov	r1, r6
   2f736:	4620      	mov	r0, r4
   2f738:	f003 feae 	bl	33498 <ip_interface_connect>
   2f73c:	b110      	cbz	r0, 2f744 <tls_interface_connect+0x40>
   2f73e:	2800      	cmp	r0, #0
   2f740:	dc06      	bgt.n	2f750 <tls_interface_connect+0x4c>
   2f742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f744:	4629      	mov	r1, r5
   2f746:	4620      	mov	r0, r4
   2f748:	f7ff fdba 	bl	2f2c0 <secure_client_socket>
   2f74c:	e7f7      	b.n	2f73e <tls_interface_connect+0x3a>
   2f74e:	2009      	movs	r0, #9
   2f750:	f7f7 fa0e 	bl	26b70 <bsd_os_errno_set>
   2f754:	f04f 30ff 	mov.w	r0, #4294967295
   2f758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f75a:	202d      	movs	r0, #45	; 0x2d
   2f75c:	e7f8      	b.n	2f750 <tls_interface_connect+0x4c>
   2f75e:	bf00      	nop
   2f760:	20024c50 	.word	0x20024c50

0002f764 <tls_interface_listen>:
   2f764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f768:	b083      	sub	sp, #12
   2f76a:	9101      	str	r1, [sp, #4]
   2f76c:	4605      	mov	r5, r0
   2f76e:	f004 fef5 	bl	3455c <interface_socket_from_handle_get>
   2f772:	2800      	cmp	r0, #0
   2f774:	d079      	beq.n	2f86a <tls_interface_listen+0x106>
   2f776:	6903      	ldr	r3, [r0, #16]
   2f778:	4604      	mov	r4, r0
   2f77a:	2b01      	cmp	r3, #1
   2f77c:	d173      	bne.n	2f866 <tls_interface_listen+0x102>
   2f77e:	6803      	ldr	r3, [r0, #0]
   2f780:	b29b      	uxth	r3, r3
   2f782:	2b04      	cmp	r3, #4
   2f784:	d05f      	beq.n	2f846 <tls_interface_listen+0xe2>
   2f786:	6823      	ldr	r3, [r4, #0]
   2f788:	b29b      	uxth	r3, r3
   2f78a:	2b0b      	cmp	r3, #11
   2f78c:	d16b      	bne.n	2f866 <tls_interface_listen+0x102>
   2f78e:	00ee      	lsls	r6, r5, #3
   2f790:	4f37      	ldr	r7, [pc, #220]	; (2f870 <tls_interface_listen+0x10c>)
   2f792:	1973      	adds	r3, r6, r5
   2f794:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   2f798:	2b01      	cmp	r3, #1
   2f79a:	d164      	bne.n	2f866 <tls_interface_listen+0x102>
   2f79c:	2201      	movs	r2, #1
   2f79e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 2f874 <tls_interface_listen+0x110>
   2f7a2:	1973      	adds	r3, r6, r5
   2f7a4:	00ee      	lsls	r6, r5, #3
   2f7a6:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   2f7aa:	eb09 0806 	add.w	r8, r9, r6
   2f7ae:	69a1      	ldr	r1, [r4, #24]
   2f7b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2f7b4:	f247 0281 	movw	r2, #28801	; 0x7081
   2f7b8:	4628      	mov	r0, r5
   2f7ba:	f8d4 a000 	ldr.w	sl, [r4]
   2f7be:	f003 fa89 	bl	32cd4 <ip_interface_request_create>
   2f7c2:	4683      	mov	fp, r0
   2f7c4:	2800      	cmp	r0, #0
   2f7c6:	d04c      	beq.n	2f862 <tls_interface_listen+0xfe>
   2f7c8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2f7cc:	2a00      	cmp	r2, #0
   2f7ce:	d142      	bne.n	2f856 <tls_interface_listen+0xf2>
   2f7d0:	1971      	adds	r1, r6, r5
   2f7d2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   2f7d6:	2224      	movs	r2, #36	; 0x24
   2f7d8:	f10b 0014 	add.w	r0, fp, #20
   2f7dc:	f00f fa75 	bl	3ecca <memcpy>
   2f7e0:	f8db 2008 	ldr.w	r2, [fp, #8]
   2f7e4:	4659      	mov	r1, fp
   2f7e6:	3224      	adds	r2, #36	; 0x24
   2f7e8:	f8cb 2008 	str.w	r2, [fp, #8]
   2f7ec:	6822      	ldr	r2, [r4, #0]
   2f7ee:	4653      	mov	r3, sl
   2f7f0:	0c12      	lsrs	r2, r2, #16
   2f7f2:	0412      	lsls	r2, r2, #16
   2f7f4:	f042 020a 	orr.w	r2, r2, #10
   2f7f8:	6022      	str	r2, [r4, #0]
   2f7fa:	4620      	mov	r0, r4
   2f7fc:	f247 0281 	movw	r2, #28801	; 0x7081
   2f800:	f003 fa88 	bl	32d14 <ip_interface_request_send>
   2f804:	b968      	cbnz	r0, 2f822 <tls_interface_listen+0xbe>
   2f806:	6823      	ldr	r3, [r4, #0]
   2f808:	00db      	lsls	r3, r3, #3
   2f80a:	d40f      	bmi.n	2f82c <tls_interface_listen+0xc8>
   2f80c:	f04f 33ff 	mov.w	r3, #4294967295
   2f810:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2f814:	210b      	movs	r1, #11
   2f816:	4628      	mov	r0, r5
   2f818:	f003 fa90 	bl	32d3c <ip_interface_wait>
   2f81c:	b170      	cbz	r0, 2f83c <tls_interface_listen+0xd8>
   2f81e:	f8c4 a000 	str.w	sl, [r4]
   2f822:	2800      	cmp	r0, #0
   2f824:	dc03      	bgt.n	2f82e <tls_interface_listen+0xca>
   2f826:	b003      	add	sp, #12
   2f828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f82c:	2073      	movs	r0, #115	; 0x73
   2f82e:	f7f7 f99f 	bl	26b70 <bsd_os_errno_set>
   2f832:	f04f 30ff 	mov.w	r0, #4294967295
   2f836:	b003      	add	sp, #12
   2f838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f83c:	9901      	ldr	r1, [sp, #4]
   2f83e:	4628      	mov	r0, r5
   2f840:	f003 ff6a 	bl	33718 <ip_interface_listen>
   2f844:	e7ed      	b.n	2f822 <tls_interface_listen+0xbe>
   2f846:	00ee      	lsls	r6, r5, #3
   2f848:	4f09      	ldr	r7, [pc, #36]	; (2f870 <tls_interface_listen+0x10c>)
   2f84a:	1973      	adds	r3, r6, r5
   2f84c:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   2f850:	2b02      	cmp	r3, #2
   2f852:	d198      	bne.n	2f786 <tls_interface_listen+0x22>
   2f854:	e7a2      	b.n	2f79c <tls_interface_listen+0x38>
   2f856:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   2f85a:	6800      	ldr	r0, [r0, #0]
   2f85c:	f00f fa35 	bl	3ecca <memcpy>
   2f860:	e7b6      	b.n	2f7d0 <tls_interface_listen+0x6c>
   2f862:	200c      	movs	r0, #12
   2f864:	e7e3      	b.n	2f82e <tls_interface_listen+0xca>
   2f866:	202d      	movs	r0, #45	; 0x2d
   2f868:	e7e1      	b.n	2f82e <tls_interface_listen+0xca>
   2f86a:	2009      	movs	r0, #9
   2f86c:	e7df      	b.n	2f82e <tls_interface_listen+0xca>
   2f86e:	bf00      	nop
   2f870:	20024c50 	.word	0x20024c50
   2f874:	20024d94 	.word	0x20024d94

0002f878 <tls_interface_accept>:
   2f878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f87a:	460c      	mov	r4, r1
   2f87c:	4616      	mov	r6, r2
   2f87e:	461f      	mov	r7, r3
   2f880:	4605      	mov	r5, r0
   2f882:	f004 fe6b 	bl	3455c <interface_socket_from_handle_get>
   2f886:	2800      	cmp	r0, #0
   2f888:	d03b      	beq.n	2f902 <tls_interface_accept+0x8a>
   2f88a:	6800      	ldr	r0, [r0, #0]
   2f88c:	b280      	uxth	r0, r0
   2f88e:	2806      	cmp	r0, #6
   2f890:	d137      	bne.n	2f902 <tls_interface_accept+0x8a>
   2f892:	4621      	mov	r1, r4
   2f894:	463b      	mov	r3, r7
   2f896:	4632      	mov	r2, r6
   2f898:	4628      	mov	r0, r5
   2f89a:	f003 ffb3 	bl	33804 <ip_interface_accept>
   2f89e:	4604      	mov	r4, r0
   2f8a0:	b118      	cbz	r0, 2f8aa <tls_interface_accept+0x32>
   2f8a2:	2c00      	cmp	r4, #0
   2f8a4:	dc2e      	bgt.n	2f904 <tls_interface_accept+0x8c>
   2f8a6:	4620      	mov	r0, r4
   2f8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f8aa:	4628      	mov	r0, r5
   2f8ac:	f004 fe56 	bl	3455c <interface_socket_from_handle_get>
   2f8b0:	6803      	ldr	r3, [r0, #0]
   2f8b2:	4f18      	ldr	r7, [pc, #96]	; (2f914 <tls_interface_accept+0x9c>)
   2f8b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2f8b8:	6003      	str	r3, [r0, #0]
   2f8ba:	6803      	ldr	r3, [r0, #0]
   2f8bc:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   2f8c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2f8c4:	4606      	mov	r6, r0
   2f8c6:	6003      	str	r3, [r0, #0]
   2f8c8:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   2f8cc:	2224      	movs	r2, #36	; 0x24
   2f8ce:	4638      	mov	r0, r7
   2f8d0:	f00f f9fb 	bl	3ecca <memcpy>
   2f8d4:	2302      	movs	r3, #2
   2f8d6:	703b      	strb	r3, [r7, #0]
   2f8d8:	6833      	ldr	r3, [r6, #0]
   2f8da:	4620      	mov	r0, r4
   2f8dc:	0c1b      	lsrs	r3, r3, #16
   2f8de:	041b      	lsls	r3, r3, #16
   2f8e0:	f043 030b 	orr.w	r3, r3, #11
   2f8e4:	6033      	str	r3, [r6, #0]
   2f8e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2f8ea:	f04f 33ff 	mov.w	r3, #4294967295
   2f8ee:	210c      	movs	r1, #12
   2f8f0:	f003 fa24 	bl	32d3c <ip_interface_wait>
   2f8f4:	4604      	mov	r4, r0
   2f8f6:	2800      	cmp	r0, #0
   2f8f8:	d0d5      	beq.n	2f8a6 <tls_interface_accept+0x2e>
   2f8fa:	2000      	movs	r0, #0
   2f8fc:	f003 faf6 	bl	32eec <ip_interface_close>
   2f900:	e7cf      	b.n	2f8a2 <tls_interface_accept+0x2a>
   2f902:	2409      	movs	r4, #9
   2f904:	4620      	mov	r0, r4
   2f906:	f04f 34ff 	mov.w	r4, #4294967295
   2f90a:	f7f7 f931 	bl	26b70 <bsd_os_errno_set>
   2f90e:	4620      	mov	r0, r4
   2f910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f912:	bf00      	nop
   2f914:	20024c50 	.word	0x20024c50

0002f918 <tls_interface_setopt>:
   2f918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f91c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2f920:	9e06      	ldr	r6, [sp, #24]
   2f922:	d11e      	bne.n	2f962 <tls_interface_setopt+0x4a>
   2f924:	461f      	mov	r7, r3
   2f926:	4605      	mov	r5, r0
   2f928:	2b00      	cmp	r3, #0
   2f92a:	f000 808c 	beq.w	2fa46 <tls_interface_setopt+0x12e>
   2f92e:	4690      	mov	r8, r2
   2f930:	f004 fe14 	bl	3455c <interface_socket_from_handle_get>
   2f934:	2800      	cmp	r0, #0
   2f936:	d07b      	beq.n	2fa30 <tls_interface_setopt+0x118>
   2f938:	6804      	ldr	r4, [r0, #0]
   2f93a:	b2a4      	uxth	r4, r4
   2f93c:	2c02      	cmp	r4, #2
   2f93e:	d007      	beq.n	2f950 <tls_interface_setopt+0x38>
   2f940:	6803      	ldr	r3, [r0, #0]
   2f942:	b29b      	uxth	r3, r3
   2f944:	2b04      	cmp	r3, #4
   2f946:	d003      	beq.n	2f950 <tls_interface_setopt+0x38>
   2f948:	6803      	ldr	r3, [r0, #0]
   2f94a:	b29b      	uxth	r3, r3
   2f94c:	2b05      	cmp	r3, #5
   2f94e:	d16f      	bne.n	2fa30 <tls_interface_setopt+0x118>
   2f950:	f108 32ff 	add.w	r2, r8, #4294967295
   2f954:	2a04      	cmp	r2, #4
   2f956:	d87c      	bhi.n	2fa52 <tls_interface_setopt+0x13a>
   2f958:	e8df f002 	tbb	[pc, r2]
   2f95c:	41324e24 	.word	0x41324e24
   2f960:	07          	.byte	0x07
   2f961:	00          	.byte	0x00
   2f962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2f966:	f004 b885 	b.w	33a74 <ip_interface_setopt>
   2f96a:	4c3b      	ldr	r4, [pc, #236]	; (2fa58 <tls_interface_setopt+0x140>)
   2f96c:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   2f970:	b138      	cbz	r0, 2f982 <tls_interface_setopt+0x6a>
   2f972:	f7ff fc3d 	bl	2f1f0 <nrf_free>
   2f976:	2200      	movs	r2, #0
   2f978:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   2f97c:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   2f980:	605a      	str	r2, [r3, #4]
   2f982:	4630      	mov	r0, r6
   2f984:	b34e      	cbz	r6, 2f9da <tls_interface_setopt+0xc2>
   2f986:	f7ff fc29 	bl	2f1dc <nrf_malloc>
   2f98a:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   2f98e:	2800      	cmp	r0, #0
   2f990:	d057      	beq.n	2fa42 <tls_interface_setopt+0x12a>
   2f992:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2f996:	4632      	mov	r2, r6
   2f998:	4639      	mov	r1, r7
   2f99a:	6066      	str	r6, [r4, #4]
   2f99c:	f00f f995 	bl	3ecca <memcpy>
   2f9a0:	2000      	movs	r0, #0
   2f9a2:	e01a      	b.n	2f9da <tls_interface_setopt+0xc2>
   2f9a4:	2e04      	cmp	r6, #4
   2f9a6:	d14a      	bne.n	2fa3e <tls_interface_setopt+0x126>
   2f9a8:	6838      	ldr	r0, [r7, #0]
   2f9aa:	2800      	cmp	r0, #0
   2f9ac:	d039      	beq.n	2fa22 <tls_interface_setopt+0x10a>
   2f9ae:	2801      	cmp	r0, #1
   2f9b0:	d145      	bne.n	2fa3e <tls_interface_setopt+0x126>
   2f9b2:	4a2a      	ldr	r2, [pc, #168]	; (2fa5c <tls_interface_setopt+0x144>)
   2f9b4:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2f9b8:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   2f9bc:	2000      	movs	r0, #0
   2f9be:	e00c      	b.n	2f9da <tls_interface_setopt+0xc2>
   2f9c0:	2e01      	cmp	r6, #1
   2f9c2:	d13c      	bne.n	2fa3e <tls_interface_setopt+0x126>
   2f9c4:	783a      	ldrb	r2, [r7, #0]
   2f9c6:	2000      	movs	r0, #0
   2f9c8:	3200      	adds	r2, #0
   2f9ca:	bf18      	it	ne
   2f9cc:	2201      	movne	r2, #1
   2f9ce:	4b23      	ldr	r3, [pc, #140]	; (2fa5c <tls_interface_setopt+0x144>)
   2f9d0:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2f9d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2f9d8:	7062      	strb	r2, [r4, #1]
   2f9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f9de:	2e04      	cmp	r6, #4
   2f9e0:	d12d      	bne.n	2fa3e <tls_interface_setopt+0x126>
   2f9e2:	683a      	ldr	r2, [r7, #0]
   2f9e4:	2a02      	cmp	r2, #2
   2f9e6:	d82a      	bhi.n	2fa3e <tls_interface_setopt+0x126>
   2f9e8:	4b1c      	ldr	r3, [pc, #112]	; (2fa5c <tls_interface_setopt+0x144>)
   2f9ea:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2f9ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2f9f2:	70a2      	strb	r2, [r4, #2]
   2f9f4:	2000      	movs	r0, #0
   2f9f6:	e7f0      	b.n	2f9da <tls_interface_setopt+0xc2>
   2f9f8:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   2f9fc:	d01f      	beq.n	2fa3e <tls_interface_setopt+0x126>
   2f9fe:	f016 0403 	ands.w	r4, r6, #3
   2fa02:	d11c      	bne.n	2fa3e <tls_interface_setopt+0x126>
   2fa04:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   2fa08:	00ad      	lsls	r5, r5, #2
   2fa0a:	4b14      	ldr	r3, [pc, #80]	; (2fa5c <tls_interface_setopt+0x144>)
   2fa0c:	1d28      	adds	r0, r5, #4
   2fa0e:	4418      	add	r0, r3
   2fa10:	442b      	add	r3, r5
   2fa12:	4632      	mov	r2, r6
   2fa14:	4639      	mov	r1, r7
   2fa16:	f883 c003 	strb.w	ip, [r3, #3]
   2fa1a:	f00f f956 	bl	3ecca <memcpy>
   2fa1e:	4620      	mov	r0, r4
   2fa20:	e7db      	b.n	2f9da <tls_interface_setopt+0xc2>
   2fa22:	2102      	movs	r1, #2
   2fa24:	4a0d      	ldr	r2, [pc, #52]	; (2fa5c <tls_interface_setopt+0x144>)
   2fa26:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2fa2a:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   2fa2e:	e7d4      	b.n	2f9da <tls_interface_setopt+0xc2>
   2fa30:	2009      	movs	r0, #9
   2fa32:	f7f7 f89d 	bl	26b70 <bsd_os_errno_set>
   2fa36:	f04f 30ff 	mov.w	r0, #4294967295
   2fa3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fa3e:	2016      	movs	r0, #22
   2fa40:	e7f7      	b.n	2fa32 <tls_interface_setopt+0x11a>
   2fa42:	200c      	movs	r0, #12
   2fa44:	e7f5      	b.n	2fa32 <tls_interface_setopt+0x11a>
   2fa46:	200e      	movs	r0, #14
   2fa48:	f7f7 f892 	bl	26b70 <bsd_os_errno_set>
   2fa4c:	f04f 30ff 	mov.w	r0, #4294967295
   2fa50:	e7c3      	b.n	2f9da <tls_interface_setopt+0xc2>
   2fa52:	202a      	movs	r0, #42	; 0x2a
   2fa54:	e7ed      	b.n	2fa32 <tls_interface_setopt+0x11a>
   2fa56:	bf00      	nop
   2fa58:	20024d94 	.word	0x20024d94
   2fa5c:	20024c50 	.word	0x20024c50

0002fa60 <tls_interface_getopt>:
   2fa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fa64:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2fa68:	9f06      	ldr	r7, [sp, #24]
   2fa6a:	d112      	bne.n	2fa92 <tls_interface_getopt+0x32>
   2fa6c:	461d      	mov	r5, r3
   2fa6e:	b16b      	cbz	r3, 2fa8c <tls_interface_getopt+0x2c>
   2fa70:	b167      	cbz	r7, 2fa8c <tls_interface_getopt+0x2c>
   2fa72:	4606      	mov	r6, r0
   2fa74:	4614      	mov	r4, r2
   2fa76:	f004 fd71 	bl	3455c <interface_socket_from_handle_get>
   2fa7a:	2800      	cmp	r0, #0
   2fa7c:	d04f      	beq.n	2fb1e <tls_interface_getopt+0xbe>
   2fa7e:	3c01      	subs	r4, #1
   2fa80:	2c03      	cmp	r4, #3
   2fa82:	d852      	bhi.n	2fb2a <tls_interface_getopt+0xca>
   2fa84:	e8df f004 	tbb	[pc, r4]
   2fa88:	09152139 	.word	0x09152139
   2fa8c:	200e      	movs	r0, #14
   2fa8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fa92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2fa96:	f004 b8a9 	b.w	33bec <ip_interface_getopt>
   2fa9a:	683b      	ldr	r3, [r7, #0]
   2fa9c:	2b04      	cmp	r3, #4
   2fa9e:	d13c      	bne.n	2fb1a <tls_interface_getopt+0xba>
   2faa0:	4b23      	ldr	r3, [pc, #140]	; (2fb30 <tls_interface_getopt+0xd0>)
   2faa2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2faa6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2faaa:	78b3      	ldrb	r3, [r6, #2]
   2faac:	2000      	movs	r0, #0
   2faae:	602b      	str	r3, [r5, #0]
   2fab0:	e7ed      	b.n	2fa8e <tls_interface_getopt+0x2e>
   2fab2:	683b      	ldr	r3, [r7, #0]
   2fab4:	2b01      	cmp	r3, #1
   2fab6:	d130      	bne.n	2fb1a <tls_interface_getopt+0xba>
   2fab8:	4b1d      	ldr	r3, [pc, #116]	; (2fb30 <tls_interface_getopt+0xd0>)
   2faba:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2fabe:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2fac2:	7873      	ldrb	r3, [r6, #1]
   2fac4:	2000      	movs	r0, #0
   2fac6:	702b      	strb	r3, [r5, #0]
   2fac8:	e7e1      	b.n	2fa8e <tls_interface_getopt+0x2e>
   2faca:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2face:	4918      	ldr	r1, [pc, #96]	; (2fb30 <tls_interface_getopt+0xd0>)
   2fad0:	683b      	ldr	r3, [r7, #0]
   2fad2:	00b6      	lsls	r6, r6, #2
   2fad4:	198a      	adds	r2, r1, r6
   2fad6:	f013 0403 	ands.w	r4, r3, #3
   2fada:	78d0      	ldrb	r0, [r2, #3]
   2fadc:	d121      	bne.n	2fb22 <tls_interface_getopt+0xc2>
   2fade:	089b      	lsrs	r3, r3, #2
   2fae0:	4283      	cmp	r3, r0
   2fae2:	bf28      	it	cs
   2fae4:	4603      	movcs	r3, r0
   2fae6:	009a      	lsls	r2, r3, #2
   2fae8:	b1db      	cbz	r3, 2fb22 <tls_interface_getopt+0xc2>
   2faea:	3604      	adds	r6, #4
   2faec:	4431      	add	r1, r6
   2faee:	603a      	str	r2, [r7, #0]
   2faf0:	4628      	mov	r0, r5
   2faf2:	f00f f8ea 	bl	3ecca <memcpy>
   2faf6:	4620      	mov	r0, r4
   2faf8:	e7c9      	b.n	2fa8e <tls_interface_getopt+0x2e>
   2fafa:	683b      	ldr	r3, [r7, #0]
   2fafc:	2b04      	cmp	r3, #4
   2fafe:	d10c      	bne.n	2fb1a <tls_interface_getopt+0xba>
   2fb00:	4b0b      	ldr	r3, [pc, #44]	; (2fb30 <tls_interface_getopt+0xd0>)
   2fb02:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2fb06:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   2fb0a:	2000      	movs	r0, #0
   2fb0c:	f1a3 0301 	sub.w	r3, r3, #1
   2fb10:	fab3 f383 	clz	r3, r3
   2fb14:	095b      	lsrs	r3, r3, #5
   2fb16:	602b      	str	r3, [r5, #0]
   2fb18:	e7b9      	b.n	2fa8e <tls_interface_getopt+0x2e>
   2fb1a:	2016      	movs	r0, #22
   2fb1c:	e7b7      	b.n	2fa8e <tls_interface_getopt+0x2e>
   2fb1e:	2009      	movs	r0, #9
   2fb20:	e7b5      	b.n	2fa8e <tls_interface_getopt+0x2e>
   2fb22:	2800      	cmp	r0, #0
   2fb24:	d1f9      	bne.n	2fb1a <tls_interface_getopt+0xba>
   2fb26:	6038      	str	r0, [r7, #0]
   2fb28:	e7b1      	b.n	2fa8e <tls_interface_getopt+0x2e>
   2fb2a:	202a      	movs	r0, #42	; 0x2a
   2fb2c:	e7af      	b.n	2fa8e <tls_interface_getopt+0x2e>
   2fb2e:	bf00      	nop
   2fb30:	20024c50 	.word	0x20024c50

0002fb34 <tls_rpc_ip_event_handler>:
   2fb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fb36:	f248 0581 	movw	r5, #32897	; 0x8081
   2fb3a:	42ab      	cmp	r3, r5
   2fb3c:	460c      	mov	r4, r1
   2fb3e:	d062      	beq.n	2fc06 <tls_rpc_ip_event_handler+0xd2>
   2fb40:	f249 0182 	movw	r1, #36994	; 0x9082
   2fb44:	428b      	cmp	r3, r1
   2fb46:	4606      	mov	r6, r0
   2fb48:	d02e      	beq.n	2fba8 <tls_rpc_ip_event_handler+0x74>
   2fb4a:	f248 0102 	movw	r1, #32770	; 0x8002
   2fb4e:	428b      	cmp	r3, r1
   2fb50:	d001      	beq.n	2fb56 <tls_rpc_ip_event_handler+0x22>
   2fb52:	2001      	movs	r0, #1
   2fb54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2fb56:	2c00      	cmp	r4, #0
   2fb58:	d0fb      	beq.n	2fb52 <tls_rpc_ip_event_handler+0x1e>
   2fb5a:	6963      	ldr	r3, [r4, #20]
   2fb5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   2fb60:	d002      	beq.n	2fb68 <tls_rpc_ip_event_handler+0x34>
   2fb62:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   2fb66:	d1f4      	bne.n	2fb52 <tls_rpc_ip_event_handler+0x1e>
   2fb68:	6823      	ldr	r3, [r4, #0]
   2fb6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   2fb6e:	6023      	str	r3, [r4, #0]
   2fb70:	6955      	ldr	r5, [r2, #20]
   2fb72:	2d00      	cmp	r5, #0
   2fb74:	d156      	bne.n	2fc24 <tls_rpc_ip_event_handler+0xf0>
   2fb76:	6823      	ldr	r3, [r4, #0]
   2fb78:	0c1b      	lsrs	r3, r3, #16
   2fb7a:	041b      	lsls	r3, r3, #16
   2fb7c:	f043 0305 	orr.w	r3, r3, #5
   2fb80:	6023      	str	r3, [r4, #0]
   2fb82:	6823      	ldr	r3, [r4, #0]
   2fb84:	00da      	lsls	r2, r3, #3
   2fb86:	d50d      	bpl.n	2fba4 <tls_rpc_ip_event_handler+0x70>
   2fb88:	4b2b      	ldr	r3, [pc, #172]	; (2fc38 <tls_rpc_ip_event_handler+0x104>)
   2fb8a:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   2fb8e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2fb92:	2b02      	cmp	r3, #2
   2fb94:	d106      	bne.n	2fba4 <tls_rpc_ip_event_handler+0x70>
   2fb96:	4630      	mov	r0, r6
   2fb98:	4621      	mov	r1, r4
   2fb9a:	f7ff fb91 	bl	2f2c0 <secure_client_socket>
   2fb9e:	b108      	cbz	r0, 2fba4 <tls_rpc_ip_event_handler+0x70>
   2fba0:	2873      	cmp	r0, #115	; 0x73
   2fba2:	d142      	bne.n	2fc2a <tls_rpc_ip_event_handler+0xf6>
   2fba4:	2000      	movs	r0, #0
   2fba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2fba8:	2c00      	cmp	r4, #0
   2fbaa:	d0fb      	beq.n	2fba4 <tls_rpc_ip_event_handler+0x70>
   2fbac:	6823      	ldr	r3, [r4, #0]
   2fbae:	b29b      	uxth	r3, r3
   2fbb0:	2b0b      	cmp	r3, #11
   2fbb2:	d1f7      	bne.n	2fba4 <tls_rpc_ip_event_handler+0x70>
   2fbb4:	6915      	ldr	r5, [r2, #16]
   2fbb6:	2d00      	cmp	r5, #0
   2fbb8:	d134      	bne.n	2fc24 <tls_rpc_ip_event_handler+0xf0>
   2fbba:	6823      	ldr	r3, [r4, #0]
   2fbbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   2fbc0:	6023      	str	r3, [r4, #0]
   2fbc2:	6823      	ldr	r3, [r4, #0]
   2fbc4:	00db      	lsls	r3, r3, #3
   2fbc6:	d5ed      	bpl.n	2fba4 <tls_rpc_ip_event_handler+0x70>
   2fbc8:	4f1c      	ldr	r7, [pc, #112]	; (2fc3c <tls_rpc_ip_event_handler+0x108>)
   2fbca:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   2fbce:	b130      	cbz	r0, 2fbde <tls_rpc_ip_event_handler+0xaa>
   2fbd0:	f7ff fb0e 	bl	2f1f0 <nrf_free>
   2fbd4:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   2fbd8:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   2fbdc:	605d      	str	r5, [r3, #4]
   2fbde:	6823      	ldr	r3, [r4, #0]
   2fbe0:	2000      	movs	r0, #0
   2fbe2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   2fbe6:	6023      	str	r3, [r4, #0]
   2fbe8:	6823      	ldr	r3, [r4, #0]
   2fbea:	0c1b      	lsrs	r3, r3, #16
   2fbec:	041b      	lsls	r3, r3, #16
   2fbee:	f043 030c 	orr.w	r3, r3, #12
   2fbf2:	6023      	str	r3, [r4, #0]
   2fbf4:	6823      	ldr	r3, [r4, #0]
   2fbf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2fbfa:	6023      	str	r3, [r4, #0]
   2fbfc:	6823      	ldr	r3, [r4, #0]
   2fbfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2fc02:	6023      	str	r3, [r4, #0]
   2fc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2fc06:	2900      	cmp	r1, #0
   2fc08:	d0cc      	beq.n	2fba4 <tls_rpc_ip_event_handler+0x70>
   2fc0a:	680b      	ldr	r3, [r1, #0]
   2fc0c:	b29b      	uxth	r3, r3
   2fc0e:	2b0a      	cmp	r3, #10
   2fc10:	d1c8      	bne.n	2fba4 <tls_rpc_ip_event_handler+0x70>
   2fc12:	6950      	ldr	r0, [r2, #20]
   2fc14:	b938      	cbnz	r0, 2fc26 <tls_rpc_ip_event_handler+0xf2>
   2fc16:	680b      	ldr	r3, [r1, #0]
   2fc18:	0c1b      	lsrs	r3, r3, #16
   2fc1a:	041b      	lsls	r3, r3, #16
   2fc1c:	f043 030b 	orr.w	r3, r3, #11
   2fc20:	600b      	str	r3, [r1, #0]
   2fc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2fc24:	4628      	mov	r0, r5
   2fc26:	f003 f84b 	bl	32cc0 <rpc_error_to_nrf_bsd_error>
   2fc2a:	6060      	str	r0, [r4, #4]
   2fc2c:	6823      	ldr	r3, [r4, #0]
   2fc2e:	2000      	movs	r0, #0
   2fc30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   2fc34:	6023      	str	r3, [r4, #0]
   2fc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2fc38:	20024c50 	.word	0x20024c50
   2fc3c:	20024d94 	.word	0x20024d94

0002fc40 <rpc_dfu_event_handler>:
   2fc40:	b508      	push	{r3, lr}
   2fc42:	4a08      	ldr	r2, [pc, #32]	; (2fc64 <rpc_dfu_event_handler+0x24>)
   2fc44:	68c1      	ldr	r1, [r0, #12]
   2fc46:	8812      	ldrh	r2, [r2, #0]
   2fc48:	4603      	mov	r3, r0
   2fc4a:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   2fc4e:	d005      	beq.n	2fc5c <rpc_dfu_event_handler+0x1c>
   2fc50:	6800      	ldr	r0, [r0, #0]
   2fc52:	b110      	cbz	r0, 2fc5a <rpc_dfu_event_handler+0x1a>
   2fc54:	f7fe fefc 	bl	2ea50 <rpc_dfu_client_data_free>
   2fc58:	2000      	movs	r0, #0
   2fc5a:	bd08      	pop	{r3, pc}
   2fc5c:	4a02      	ldr	r2, [pc, #8]	; (2fc68 <rpc_dfu_event_handler+0x28>)
   2fc5e:	2001      	movs	r0, #1
   2fc60:	6013      	str	r3, [r2, #0]
   2fc62:	bd08      	pop	{r3, pc}
   2fc64:	20029492 	.word	0x20029492
   2fc68:	20024de0 	.word	0x20024de0

0002fc6c <mfu_interface_init>:
   2fc6c:	2300      	movs	r3, #0
   2fc6e:	b510      	push	{r4, lr}
   2fc70:	4808      	ldr	r0, [pc, #32]	; (2fc94 <mfu_interface_init+0x28>)
   2fc72:	4909      	ldr	r1, [pc, #36]	; (2fc98 <mfu_interface_init+0x2c>)
   2fc74:	4a09      	ldr	r2, [pc, #36]	; (2fc9c <mfu_interface_init+0x30>)
   2fc76:	4c0a      	ldr	r4, [pc, #40]	; (2fca0 <mfu_interface_init+0x34>)
   2fc78:	8003      	strh	r3, [r0, #0]
   2fc7a:	600b      	str	r3, [r1, #0]
   2fc7c:	6013      	str	r3, [r2, #0]
   2fc7e:	6023      	str	r3, [r4, #0]
   2fc80:	f7fe feb0 	bl	2e9e4 <rpc_dfu_client_init>
   2fc84:	b910      	cbnz	r0, 2fc8c <mfu_interface_init+0x20>
   2fc86:	2301      	movs	r3, #1
   2fc88:	6023      	str	r3, [r4, #0]
   2fc8a:	bd10      	pop	{r4, pc}
   2fc8c:	f04f 30ff 	mov.w	r0, #4294967295
   2fc90:	bd10      	pop	{r4, pc}
   2fc92:	bf00      	nop
   2fc94:	20029492 	.word	0x20029492
   2fc98:	20024de0 	.word	0x20024de0
   2fc9c:	20024ddc 	.word	0x20024ddc
   2fca0:	20024dd4 	.word	0x20024dd4

0002fca4 <mfu_interface_open>:
   2fca4:	2801      	cmp	r0, #1
   2fca6:	b508      	push	{r3, lr}
   2fca8:	d10b      	bne.n	2fcc2 <mfu_interface_open+0x1e>
   2fcaa:	f240 2303 	movw	r3, #515	; 0x203
   2fcae:	429a      	cmp	r2, r3
   2fcb0:	d107      	bne.n	2fcc2 <mfu_interface_open+0x1e>
   2fcb2:	4b09      	ldr	r3, [pc, #36]	; (2fcd8 <mfu_interface_open+0x34>)
   2fcb4:	681a      	ldr	r2, [r3, #0]
   2fcb6:	2a01      	cmp	r2, #1
   2fcb8:	d109      	bne.n	2fcce <mfu_interface_open+0x2a>
   2fcba:	2202      	movs	r2, #2
   2fcbc:	601a      	str	r2, [r3, #0]
   2fcbe:	4807      	ldr	r0, [pc, #28]	; (2fcdc <mfu_interface_open+0x38>)
   2fcc0:	bd08      	pop	{r3, pc}
   2fcc2:	2016      	movs	r0, #22
   2fcc4:	f7f6 ff54 	bl	26b70 <bsd_os_errno_set>
   2fcc8:	f04f 30ff 	mov.w	r0, #4294967295
   2fccc:	bd08      	pop	{r3, pc}
   2fcce:	f7f6 ff4f 	bl	26b70 <bsd_os_errno_set>
   2fcd2:	f04f 30ff 	mov.w	r0, #4294967295
   2fcd6:	bd08      	pop	{r3, pc}
   2fcd8:	20024dd4 	.word	0x20024dd4
   2fcdc:	49765432 	.word	0x49765432

0002fce0 <mfu_interface_close>:
   2fce0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fce2:	4c32      	ldr	r4, [pc, #200]	; (2fdac <mfu_interface_close+0xcc>)
   2fce4:	b083      	sub	sp, #12
   2fce6:	6823      	ldr	r3, [r4, #0]
   2fce8:	1e9a      	subs	r2, r3, #2
   2fcea:	2a01      	cmp	r2, #1
   2fcec:	d857      	bhi.n	2fd9e <mfu_interface_close+0xbe>
   2fcee:	2b03      	cmp	r3, #3
   2fcf0:	d004      	beq.n	2fcfc <mfu_interface_close+0x1c>
   2fcf2:	2301      	movs	r3, #1
   2fcf4:	2000      	movs	r0, #0
   2fcf6:	6023      	str	r3, [r4, #0]
   2fcf8:	b003      	add	sp, #12
   2fcfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fcfc:	2100      	movs	r1, #0
   2fcfe:	4668      	mov	r0, sp
   2fd00:	f7fe fe76 	bl	2e9f0 <rpc_dfu_client_request_alloc>
   2fd04:	4603      	mov	r3, r0
   2fd06:	2800      	cmp	r0, #0
   2fd08:	d13d      	bne.n	2fd86 <mfu_interface_close+0xa6>
   2fd0a:	2104      	movs	r1, #4
   2fd0c:	4e28      	ldr	r6, [pc, #160]	; (2fdb0 <mfu_interface_close+0xd0>)
   2fd0e:	9800      	ldr	r0, [sp, #0]
   2fd10:	8832      	ldrh	r2, [r6, #0]
   2fd12:	7201      	strb	r1, [r0, #8]
   2fd14:	3201      	adds	r2, #1
   2fd16:	b292      	uxth	r2, r2
   2fd18:	0411      	lsls	r1, r2, #16
   2fd1a:	f041 0106 	orr.w	r1, r1, #6
   2fd1e:	4d25      	ldr	r5, [pc, #148]	; (2fdb4 <mfu_interface_close+0xd4>)
   2fd20:	60c1      	str	r1, [r0, #12]
   2fd22:	7103      	strb	r3, [r0, #4]
   2fd24:	7143      	strb	r3, [r0, #5]
   2fd26:	7183      	strb	r3, [r0, #6]
   2fd28:	71c3      	strb	r3, [r0, #7]
   2fd2a:	7243      	strb	r3, [r0, #9]
   2fd2c:	7283      	strb	r3, [r0, #10]
   2fd2e:	72c3      	strb	r3, [r0, #11]
   2fd30:	2106      	movs	r1, #6
   2fd32:	8032      	strh	r2, [r6, #0]
   2fd34:	602b      	str	r3, [r5, #0]
   2fd36:	f7fe fe6f 	bl	2ea18 <rpc_dfu_client_request_send>
   2fd3a:	b9d8      	cbnz	r0, 2fd74 <mfu_interface_close+0x94>
   2fd3c:	f04f 33ff 	mov.w	r3, #4294967295
   2fd40:	ae02      	add	r6, sp, #8
   2fd42:	4627      	mov	r7, r4
   2fd44:	f846 3d04 	str.w	r3, [r6, #-4]!
   2fd48:	e004      	b.n	2fd54 <mfu_interface_close+0x74>
   2fd4a:	4631      	mov	r1, r6
   2fd4c:	4638      	mov	r0, r7
   2fd4e:	f7f6 fe7b 	bl	26a48 <bsd_os_timedwait>
   2fd52:	b9f0      	cbnz	r0, 2fd92 <mfu_interface_close+0xb2>
   2fd54:	6828      	ldr	r0, [r5, #0]
   2fd56:	2800      	cmp	r0, #0
   2fd58:	d0f7      	beq.n	2fd4a <mfu_interface_close+0x6a>
   2fd5a:	6905      	ldr	r5, [r0, #16]
   2fd5c:	f7fe fe70 	bl	2ea40 <rpc_dfu_client_message_free>
   2fd60:	2d00      	cmp	r5, #0
   2fd62:	d0c6      	beq.n	2fcf2 <mfu_interface_close+0x12>
   2fd64:	4b14      	ldr	r3, [pc, #80]	; (2fdb8 <mfu_interface_close+0xd8>)
   2fd66:	2008      	movs	r0, #8
   2fd68:	601d      	str	r5, [r3, #0]
   2fd6a:	f7f6 ff01 	bl	26b70 <bsd_os_errno_set>
   2fd6e:	f04f 30ff 	mov.w	r0, #4294967295
   2fd72:	e7c1      	b.n	2fcf8 <mfu_interface_close+0x18>
   2fd74:	9800      	ldr	r0, [sp, #0]
   2fd76:	6803      	ldr	r3, [r0, #0]
   2fd78:	b11b      	cbz	r3, 2fd82 <mfu_interface_close+0xa2>
   2fd7a:	4618      	mov	r0, r3
   2fd7c:	f7fe fe68 	bl	2ea50 <rpc_dfu_client_data_free>
   2fd80:	9800      	ldr	r0, [sp, #0]
   2fd82:	f7fe fe5d 	bl	2ea40 <rpc_dfu_client_message_free>
   2fd86:	200c      	movs	r0, #12
   2fd88:	f7f6 fef2 	bl	26b70 <bsd_os_errno_set>
   2fd8c:	f04f 30ff 	mov.w	r0, #4294967295
   2fd90:	e7b2      	b.n	2fcf8 <mfu_interface_close+0x18>
   2fd92:	203c      	movs	r0, #60	; 0x3c
   2fd94:	f7f6 feec 	bl	26b70 <bsd_os_errno_set>
   2fd98:	f04f 30ff 	mov.w	r0, #4294967295
   2fd9c:	e7ac      	b.n	2fcf8 <mfu_interface_close+0x18>
   2fd9e:	2001      	movs	r0, #1
   2fda0:	f7f6 fee6 	bl	26b70 <bsd_os_errno_set>
   2fda4:	f04f 30ff 	mov.w	r0, #4294967295
   2fda8:	e7a6      	b.n	2fcf8 <mfu_interface_close+0x18>
   2fdaa:	bf00      	nop
   2fdac:	20024dd4 	.word	0x20024dd4
   2fdb0:	20029492 	.word	0x20029492
   2fdb4:	20024de0 	.word	0x20024de0
   2fdb8:	20024dd8 	.word	0x20024dd8

0002fdbc <mfu_interface_sendto>:
   2fdbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2fdc0:	4e5a      	ldr	r6, [pc, #360]	; (2ff2c <mfu_interface_sendto+0x170>)
   2fdc2:	4615      	mov	r5, r2
   2fdc4:	6833      	ldr	r3, [r6, #0]
   2fdc6:	b082      	sub	sp, #8
   2fdc8:	1e9a      	subs	r2, r3, #2
   2fdca:	2a01      	cmp	r2, #1
   2fdcc:	f200 80a7 	bhi.w	2ff1e <mfu_interface_sendto+0x162>
   2fdd0:	460f      	mov	r7, r1
   2fdd2:	2900      	cmp	r1, #0
   2fdd4:	f000 809d 	beq.w	2ff12 <mfu_interface_sendto+0x156>
   2fdd8:	2d00      	cmp	r5, #0
   2fdda:	f000 809a 	beq.w	2ff12 <mfu_interface_sendto+0x156>
   2fdde:	2b02      	cmp	r3, #2
   2fde0:	46e8      	mov	r8, sp
   2fde2:	d04e      	beq.n	2fe82 <mfu_interface_sendto+0xc6>
   2fde4:	4640      	mov	r0, r8
   2fde6:	4629      	mov	r1, r5
   2fde8:	f7fe fe02 	bl	2e9f0 <rpc_dfu_client_request_alloc>
   2fdec:	4606      	mov	r6, r0
   2fdee:	b140      	cbz	r0, 2fe02 <mfu_interface_sendto+0x46>
   2fdf0:	200c      	movs	r0, #12
   2fdf2:	f7f6 febd 	bl	26b70 <bsd_os_errno_set>
   2fdf6:	f04f 35ff 	mov.w	r5, #4294967295
   2fdfa:	4628      	mov	r0, r5
   2fdfc:	b002      	add	sp, #8
   2fdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2fe02:	9b00      	ldr	r3, [sp, #0]
   2fe04:	4639      	mov	r1, r7
   2fe06:	6818      	ldr	r0, [r3, #0]
   2fe08:	462a      	mov	r2, r5
   2fe0a:	f00e ff5e 	bl	3ecca <memcpy>
   2fe0e:	2104      	movs	r1, #4
   2fe10:	4c47      	ldr	r4, [pc, #284]	; (2ff30 <mfu_interface_sendto+0x174>)
   2fe12:	9800      	ldr	r0, [sp, #0]
   2fe14:	8823      	ldrh	r3, [r4, #0]
   2fe16:	6045      	str	r5, [r0, #4]
   2fe18:	3301      	adds	r3, #1
   2fe1a:	b29b      	uxth	r3, r3
   2fe1c:	041a      	lsls	r2, r3, #16
   2fe1e:	8023      	strh	r3, [r4, #0]
   2fe20:	430a      	orrs	r2, r1
   2fe22:	4c44      	ldr	r4, [pc, #272]	; (2ff34 <mfu_interface_sendto+0x178>)
   2fe24:	60c2      	str	r2, [r0, #12]
   2fe26:	7246      	strb	r6, [r0, #9]
   2fe28:	7286      	strb	r6, [r0, #10]
   2fe2a:	72c6      	strb	r6, [r0, #11]
   2fe2c:	7201      	strb	r1, [r0, #8]
   2fe2e:	6026      	str	r6, [r4, #0]
   2fe30:	f7fe fdf2 	bl	2ea18 <rpc_dfu_client_request_send>
   2fe34:	2800      	cmp	r0, #0
   2fe36:	d162      	bne.n	2fefe <mfu_interface_sendto+0x142>
   2fe38:	f04f 33ff 	mov.w	r3, #4294967295
   2fe3c:	ae02      	add	r6, sp, #8
   2fe3e:	4f3b      	ldr	r7, [pc, #236]	; (2ff2c <mfu_interface_sendto+0x170>)
   2fe40:	f846 3d04 	str.w	r3, [r6, #-4]!
   2fe44:	e004      	b.n	2fe50 <mfu_interface_sendto+0x94>
   2fe46:	4631      	mov	r1, r6
   2fe48:	4638      	mov	r0, r7
   2fe4a:	f7f6 fdfd 	bl	26a48 <bsd_os_timedwait>
   2fe4e:	b978      	cbnz	r0, 2fe70 <mfu_interface_sendto+0xb4>
   2fe50:	6820      	ldr	r0, [r4, #0]
   2fe52:	2800      	cmp	r0, #0
   2fe54:	d0f7      	beq.n	2fe46 <mfu_interface_sendto+0x8a>
   2fe56:	6904      	ldr	r4, [r0, #16]
   2fe58:	f7fe fdf2 	bl	2ea40 <rpc_dfu_client_message_free>
   2fe5c:	2c00      	cmp	r4, #0
   2fe5e:	d0cc      	beq.n	2fdfa <mfu_interface_sendto+0x3e>
   2fe60:	4b35      	ldr	r3, [pc, #212]	; (2ff38 <mfu_interface_sendto+0x17c>)
   2fe62:	2008      	movs	r0, #8
   2fe64:	601c      	str	r4, [r3, #0]
   2fe66:	f04f 35ff 	mov.w	r5, #4294967295
   2fe6a:	f7f6 fe81 	bl	26b70 <bsd_os_errno_set>
   2fe6e:	e7c4      	b.n	2fdfa <mfu_interface_sendto+0x3e>
   2fe70:	f04f 35ff 	mov.w	r5, #4294967295
   2fe74:	203c      	movs	r0, #60	; 0x3c
   2fe76:	f7f6 fe7b 	bl	26b70 <bsd_os_errno_set>
   2fe7a:	4628      	mov	r0, r5
   2fe7c:	b002      	add	sp, #8
   2fe7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2fe82:	4640      	mov	r0, r8
   2fe84:	2100      	movs	r1, #0
   2fe86:	f7fe fdb3 	bl	2e9f0 <rpc_dfu_client_request_alloc>
   2fe8a:	4602      	mov	r2, r0
   2fe8c:	2800      	cmp	r0, #0
   2fe8e:	d1af      	bne.n	2fdf0 <mfu_interface_sendto+0x34>
   2fe90:	f04f 0c08 	mov.w	ip, #8
   2fe94:	4926      	ldr	r1, [pc, #152]	; (2ff30 <mfu_interface_sendto+0x174>)
   2fe96:	4829      	ldr	r0, [pc, #164]	; (2ff3c <mfu_interface_sendto+0x180>)
   2fe98:	880b      	ldrh	r3, [r1, #0]
   2fe9a:	6804      	ldr	r4, [r0, #0]
   2fe9c:	3301      	adds	r3, #1
   2fe9e:	9800      	ldr	r0, [sp, #0]
   2fea0:	b29b      	uxth	r3, r3
   2fea2:	800b      	strh	r3, [r1, #0]
   2fea4:	041b      	lsls	r3, r3, #16
   2fea6:	f043 0303 	orr.w	r3, r3, #3
   2feaa:	6104      	str	r4, [r0, #16]
   2feac:	4c21      	ldr	r4, [pc, #132]	; (2ff34 <mfu_interface_sendto+0x178>)
   2feae:	60c3      	str	r3, [r0, #12]
   2feb0:	7102      	strb	r2, [r0, #4]
   2feb2:	7142      	strb	r2, [r0, #5]
   2feb4:	7182      	strb	r2, [r0, #6]
   2feb6:	71c2      	strb	r2, [r0, #7]
   2feb8:	7242      	strb	r2, [r0, #9]
   2feba:	7282      	strb	r2, [r0, #10]
   2febc:	72c2      	strb	r2, [r0, #11]
   2febe:	f880 c008 	strb.w	ip, [r0, #8]
   2fec2:	2103      	movs	r1, #3
   2fec4:	6022      	str	r2, [r4, #0]
   2fec6:	f7fe fda7 	bl	2ea18 <rpc_dfu_client_request_send>
   2feca:	b9c0      	cbnz	r0, 2fefe <mfu_interface_sendto+0x142>
   2fecc:	f04f 33ff 	mov.w	r3, #4294967295
   2fed0:	f10d 0908 	add.w	r9, sp, #8
   2fed4:	f849 3d04 	str.w	r3, [r9, #-4]!
   2fed8:	46b2      	mov	sl, r6
   2feda:	e005      	b.n	2fee8 <mfu_interface_sendto+0x12c>
   2fedc:	4649      	mov	r1, r9
   2fede:	4650      	mov	r0, sl
   2fee0:	f7f6 fdb2 	bl	26a48 <bsd_os_timedwait>
   2fee4:	2800      	cmp	r0, #0
   2fee6:	d1c3      	bne.n	2fe70 <mfu_interface_sendto+0xb4>
   2fee8:	6820      	ldr	r0, [r4, #0]
   2feea:	2800      	cmp	r0, #0
   2feec:	d0f6      	beq.n	2fedc <mfu_interface_sendto+0x120>
   2feee:	6904      	ldr	r4, [r0, #16]
   2fef0:	f7fe fda6 	bl	2ea40 <rpc_dfu_client_message_free>
   2fef4:	2c00      	cmp	r4, #0
   2fef6:	d1b3      	bne.n	2fe60 <mfu_interface_sendto+0xa4>
   2fef8:	2303      	movs	r3, #3
   2fefa:	6033      	str	r3, [r6, #0]
   2fefc:	e772      	b.n	2fde4 <mfu_interface_sendto+0x28>
   2fefe:	9800      	ldr	r0, [sp, #0]
   2ff00:	6803      	ldr	r3, [r0, #0]
   2ff02:	b11b      	cbz	r3, 2ff0c <mfu_interface_sendto+0x150>
   2ff04:	4618      	mov	r0, r3
   2ff06:	f7fe fda3 	bl	2ea50 <rpc_dfu_client_data_free>
   2ff0a:	9800      	ldr	r0, [sp, #0]
   2ff0c:	f7fe fd98 	bl	2ea40 <rpc_dfu_client_message_free>
   2ff10:	e76e      	b.n	2fdf0 <mfu_interface_sendto+0x34>
   2ff12:	2016      	movs	r0, #22
   2ff14:	f7f6 fe2c 	bl	26b70 <bsd_os_errno_set>
   2ff18:	f04f 35ff 	mov.w	r5, #4294967295
   2ff1c:	e76d      	b.n	2fdfa <mfu_interface_sendto+0x3e>
   2ff1e:	2001      	movs	r0, #1
   2ff20:	f7f6 fe26 	bl	26b70 <bsd_os_errno_set>
   2ff24:	f04f 35ff 	mov.w	r5, #4294967295
   2ff28:	e767      	b.n	2fdfa <mfu_interface_sendto+0x3e>
   2ff2a:	bf00      	nop
   2ff2c:	20024dd4 	.word	0x20024dd4
   2ff30:	20029492 	.word	0x20029492
   2ff34:	20024de0 	.word	0x20024de0
   2ff38:	20024dd8 	.word	0x20024dd8
   2ff3c:	20024ddc 	.word	0x20024ddc

0002ff40 <mfu_interface_setopt>:
   2ff40:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ff42:	4846      	ldr	r0, [pc, #280]	; (3005c <mfu_interface_setopt+0x11c>)
   2ff44:	b083      	sub	sp, #12
   2ff46:	6800      	ldr	r0, [r0, #0]
   2ff48:	3802      	subs	r0, #2
   2ff4a:	2801      	cmp	r0, #1
   2ff4c:	d877      	bhi.n	3003e <mfu_interface_setopt+0xfe>
   2ff4e:	f240 2003 	movw	r0, #515	; 0x203
   2ff52:	4281      	cmp	r1, r0
   2ff54:	d16d      	bne.n	30032 <mfu_interface_setopt+0xf2>
   2ff56:	3a04      	subs	r2, #4
   2ff58:	2a03      	cmp	r2, #3
   2ff5a:	d85c      	bhi.n	30016 <mfu_interface_setopt+0xd6>
   2ff5c:	e8df f002 	tbb	[pc, r2]
   2ff60:	514e024b 	.word	0x514e024b
   2ff64:	2407      	movs	r4, #7
   2ff66:	4625      	mov	r5, r4
   2ff68:	2100      	movs	r1, #0
   2ff6a:	4668      	mov	r0, sp
   2ff6c:	f7fe fd40 	bl	2e9f0 <rpc_dfu_client_request_alloc>
   2ff70:	4603      	mov	r3, r0
   2ff72:	2800      	cmp	r0, #0
   2ff74:	d138      	bne.n	2ffe8 <mfu_interface_setopt+0xa8>
   2ff76:	2704      	movs	r7, #4
   2ff78:	4e39      	ldr	r6, [pc, #228]	; (30060 <mfu_interface_setopt+0x120>)
   2ff7a:	9800      	ldr	r0, [sp, #0]
   2ff7c:	8832      	ldrh	r2, [r6, #0]
   2ff7e:	4629      	mov	r1, r5
   2ff80:	3201      	adds	r2, #1
   2ff82:	b292      	uxth	r2, r2
   2ff84:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   2ff88:	4c36      	ldr	r4, [pc, #216]	; (30064 <mfu_interface_setopt+0x124>)
   2ff8a:	60c5      	str	r5, [r0, #12]
   2ff8c:	7103      	strb	r3, [r0, #4]
   2ff8e:	7143      	strb	r3, [r0, #5]
   2ff90:	7183      	strb	r3, [r0, #6]
   2ff92:	71c3      	strb	r3, [r0, #7]
   2ff94:	7243      	strb	r3, [r0, #9]
   2ff96:	7283      	strb	r3, [r0, #10]
   2ff98:	72c3      	strb	r3, [r0, #11]
   2ff9a:	7207      	strb	r7, [r0, #8]
   2ff9c:	8032      	strh	r2, [r6, #0]
   2ff9e:	6023      	str	r3, [r4, #0]
   2ffa0:	f7fe fd3a 	bl	2ea18 <rpc_dfu_client_request_send>
   2ffa4:	b9b8      	cbnz	r0, 2ffd6 <mfu_interface_setopt+0x96>
   2ffa6:	f04f 33ff 	mov.w	r3, #4294967295
   2ffaa:	ad02      	add	r5, sp, #8
   2ffac:	4e2b      	ldr	r6, [pc, #172]	; (3005c <mfu_interface_setopt+0x11c>)
   2ffae:	f845 3d04 	str.w	r3, [r5, #-4]!
   2ffb2:	e005      	b.n	2ffc0 <mfu_interface_setopt+0x80>
   2ffb4:	4629      	mov	r1, r5
   2ffb6:	4630      	mov	r0, r6
   2ffb8:	f7f6 fd46 	bl	26a48 <bsd_os_timedwait>
   2ffbc:	2800      	cmp	r0, #0
   2ffbe:	d131      	bne.n	30024 <mfu_interface_setopt+0xe4>
   2ffc0:	6820      	ldr	r0, [r4, #0]
   2ffc2:	2800      	cmp	r0, #0
   2ffc4:	d0f6      	beq.n	2ffb4 <mfu_interface_setopt+0x74>
   2ffc6:	6904      	ldr	r4, [r0, #16]
   2ffc8:	f7fe fd3a 	bl	2ea40 <rpc_dfu_client_message_free>
   2ffcc:	2c00      	cmp	r4, #0
   2ffce:	d13c      	bne.n	3004a <mfu_interface_setopt+0x10a>
   2ffd0:	4620      	mov	r0, r4
   2ffd2:	b003      	add	sp, #12
   2ffd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ffd6:	9800      	ldr	r0, [sp, #0]
   2ffd8:	6803      	ldr	r3, [r0, #0]
   2ffda:	b11b      	cbz	r3, 2ffe4 <mfu_interface_setopt+0xa4>
   2ffdc:	4618      	mov	r0, r3
   2ffde:	f7fe fd37 	bl	2ea50 <rpc_dfu_client_data_free>
   2ffe2:	9800      	ldr	r0, [sp, #0]
   2ffe4:	f7fe fd2c 	bl	2ea40 <rpc_dfu_client_message_free>
   2ffe8:	200c      	movs	r0, #12
   2ffea:	f7f6 fdc1 	bl	26b70 <bsd_os_errno_set>
   2ffee:	f04f 30ff 	mov.w	r0, #4294967295
   2fff2:	b003      	add	sp, #12
   2fff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fff6:	2405      	movs	r4, #5
   2fff8:	4625      	mov	r5, r4
   2fffa:	e7b5      	b.n	2ff68 <mfu_interface_setopt+0x28>
   2fffc:	2408      	movs	r4, #8
   2fffe:	4625      	mov	r5, r4
   30000:	e7b2      	b.n	2ff68 <mfu_interface_setopt+0x28>
   30002:	b1b3      	cbz	r3, 30032 <mfu_interface_setopt+0xf2>
   30004:	9a08      	ldr	r2, [sp, #32]
   30006:	2a04      	cmp	r2, #4
   30008:	d113      	bne.n	30032 <mfu_interface_setopt+0xf2>
   3000a:	2000      	movs	r0, #0
   3000c:	681a      	ldr	r2, [r3, #0]
   3000e:	4b16      	ldr	r3, [pc, #88]	; (30068 <mfu_interface_setopt+0x128>)
   30010:	601a      	str	r2, [r3, #0]
   30012:	b003      	add	sp, #12
   30014:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30016:	202a      	movs	r0, #42	; 0x2a
   30018:	f7f6 fdaa 	bl	26b70 <bsd_os_errno_set>
   3001c:	f04f 30ff 	mov.w	r0, #4294967295
   30020:	b003      	add	sp, #12
   30022:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30024:	203c      	movs	r0, #60	; 0x3c
   30026:	f7f6 fda3 	bl	26b70 <bsd_os_errno_set>
   3002a:	f04f 30ff 	mov.w	r0, #4294967295
   3002e:	b003      	add	sp, #12
   30030:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30032:	2016      	movs	r0, #22
   30034:	f7f6 fd9c 	bl	26b70 <bsd_os_errno_set>
   30038:	f04f 30ff 	mov.w	r0, #4294967295
   3003c:	e7c9      	b.n	2ffd2 <mfu_interface_setopt+0x92>
   3003e:	2001      	movs	r0, #1
   30040:	f7f6 fd96 	bl	26b70 <bsd_os_errno_set>
   30044:	f04f 30ff 	mov.w	r0, #4294967295
   30048:	e7c3      	b.n	2ffd2 <mfu_interface_setopt+0x92>
   3004a:	4b08      	ldr	r3, [pc, #32]	; (3006c <mfu_interface_setopt+0x12c>)
   3004c:	2008      	movs	r0, #8
   3004e:	601c      	str	r4, [r3, #0]
   30050:	f7f6 fd8e 	bl	26b70 <bsd_os_errno_set>
   30054:	f04f 30ff 	mov.w	r0, #4294967295
   30058:	e7bb      	b.n	2ffd2 <mfu_interface_setopt+0x92>
   3005a:	bf00      	nop
   3005c:	20024dd4 	.word	0x20024dd4
   30060:	20029492 	.word	0x20029492
   30064:	20024de0 	.word	0x20024de0
   30068:	20024ddc 	.word	0x20024ddc
   3006c:	20024dd8 	.word	0x20024dd8

00030070 <mfu_interface_getopt>:
   30070:	f240 2003 	movw	r0, #515	; 0x203
   30074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30078:	4281      	cmp	r1, r0
   3007a:	b082      	sub	sp, #8
   3007c:	9e08      	ldr	r6, [sp, #32]
   3007e:	f040 80ae 	bne.w	301de <mfu_interface_getopt+0x16e>
   30082:	461d      	mov	r5, r3
   30084:	2b00      	cmp	r3, #0
   30086:	f000 80aa 	beq.w	301de <mfu_interface_getopt+0x16e>
   3008a:	2e00      	cmp	r6, #0
   3008c:	f000 80a7 	beq.w	301de <mfu_interface_getopt+0x16e>
   30090:	4b5e      	ldr	r3, [pc, #376]	; (3020c <mfu_interface_getopt+0x19c>)
   30092:	681b      	ldr	r3, [r3, #0]
   30094:	3b02      	subs	r3, #2
   30096:	2b01      	cmp	r3, #1
   30098:	f200 80a7 	bhi.w	301ea <mfu_interface_getopt+0x17a>
   3009c:	3a01      	subs	r2, #1
   3009e:	2a13      	cmp	r2, #19
   300a0:	d879      	bhi.n	30196 <mfu_interface_getopt+0x126>
   300a2:	e8df f002 	tbb	[pc, r2]
   300a6:	5f17      	.short	0x5f17
   300a8:	78787878 	.word	0x78787878
   300ac:	78787872 	.word	0x78787872
   300b0:	78787878 	.word	0x78787878
   300b4:	78787878 	.word	0x78787878
   300b8:	0a78      	.short	0x0a78
   300ba:	6833      	ldr	r3, [r6, #0]
   300bc:	2b04      	cmp	r3, #4
   300be:	f040 808e 	bne.w	301de <mfu_interface_getopt+0x16e>
   300c2:	2200      	movs	r2, #0
   300c4:	4610      	mov	r0, r2
   300c6:	4b52      	ldr	r3, [pc, #328]	; (30210 <mfu_interface_getopt+0x1a0>)
   300c8:	6819      	ldr	r1, [r3, #0]
   300ca:	601a      	str	r2, [r3, #0]
   300cc:	6029      	str	r1, [r5, #0]
   300ce:	b002      	add	sp, #8
   300d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   300d4:	6833      	ldr	r3, [r6, #0]
   300d6:	2b24      	cmp	r3, #36	; 0x24
   300d8:	f040 8081 	bne.w	301de <mfu_interface_getopt+0x16e>
   300dc:	2401      	movs	r4, #1
   300de:	46a0      	mov	r8, r4
   300e0:	2100      	movs	r1, #0
   300e2:	4668      	mov	r0, sp
   300e4:	f7fe fc84 	bl	2e9f0 <rpc_dfu_client_request_alloc>
   300e8:	2800      	cmp	r0, #0
   300ea:	d146      	bne.n	3017a <mfu_interface_getopt+0x10a>
   300ec:	4949      	ldr	r1, [pc, #292]	; (30214 <mfu_interface_getopt+0x1a4>)
   300ee:	9b00      	ldr	r3, [sp, #0]
   300f0:	880a      	ldrh	r2, [r1, #0]
   300f2:	f1b8 0f03 	cmp.w	r8, #3
   300f6:	f102 0201 	add.w	r2, r2, #1
   300fa:	b292      	uxth	r2, r2
   300fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   30100:	7118      	strb	r0, [r3, #4]
   30102:	800a      	strh	r2, [r1, #0]
   30104:	60dc      	str	r4, [r3, #12]
   30106:	7158      	strb	r0, [r3, #5]
   30108:	7198      	strb	r0, [r3, #6]
   3010a:	71d8      	strb	r0, [r3, #7]
   3010c:	d04b      	beq.n	301a6 <mfu_interface_getopt+0x136>
   3010e:	2104      	movs	r1, #4
   30110:	2200      	movs	r2, #0
   30112:	4f41      	ldr	r7, [pc, #260]	; (30218 <mfu_interface_getopt+0x1a8>)
   30114:	6099      	str	r1, [r3, #8]
   30116:	4618      	mov	r0, r3
   30118:	4641      	mov	r1, r8
   3011a:	603a      	str	r2, [r7, #0]
   3011c:	f7fe fc7c 	bl	2ea18 <rpc_dfu_client_request_send>
   30120:	2800      	cmp	r0, #0
   30122:	d14d      	bne.n	301c0 <mfu_interface_getopt+0x150>
   30124:	f04f 33ff 	mov.w	r3, #4294967295
   30128:	ac02      	add	r4, sp, #8
   3012a:	f844 3d04 	str.w	r3, [r4, #-4]!
   3012e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 3020c <mfu_interface_getopt+0x19c>
   30132:	e005      	b.n	30140 <mfu_interface_getopt+0xd0>
   30134:	4621      	mov	r1, r4
   30136:	4640      	mov	r0, r8
   30138:	f7f6 fc86 	bl	26a48 <bsd_os_timedwait>
   3013c:	2800      	cmp	r0, #0
   3013e:	d137      	bne.n	301b0 <mfu_interface_getopt+0x140>
   30140:	6839      	ldr	r1, [r7, #0]
   30142:	2900      	cmp	r1, #0
   30144:	d0f6      	beq.n	30134 <mfu_interface_getopt+0xc4>
   30146:	690c      	ldr	r4, [r1, #16]
   30148:	2c00      	cmp	r4, #0
   3014a:	d154      	bne.n	301f6 <mfu_interface_getopt+0x186>
   3014c:	6832      	ldr	r2, [r6, #0]
   3014e:	3114      	adds	r1, #20
   30150:	4628      	mov	r0, r5
   30152:	f00e fdba 	bl	3ecca <memcpy>
   30156:	6838      	ldr	r0, [r7, #0]
   30158:	f7fe fc72 	bl	2ea40 <rpc_dfu_client_message_free>
   3015c:	4620      	mov	r0, r4
   3015e:	b002      	add	sp, #8
   30160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30164:	6833      	ldr	r3, [r6, #0]
   30166:	2b04      	cmp	r3, #4
   30168:	d139      	bne.n	301de <mfu_interface_getopt+0x16e>
   3016a:	2402      	movs	r4, #2
   3016c:	2100      	movs	r1, #0
   3016e:	4668      	mov	r0, sp
   30170:	46a0      	mov	r8, r4
   30172:	f7fe fc3d 	bl	2e9f0 <rpc_dfu_client_request_alloc>
   30176:	2800      	cmp	r0, #0
   30178:	d0b8      	beq.n	300ec <mfu_interface_getopt+0x7c>
   3017a:	200c      	movs	r0, #12
   3017c:	f7f6 fcf8 	bl	26b70 <bsd_os_errno_set>
   30180:	f04f 30ff 	mov.w	r0, #4294967295
   30184:	b002      	add	sp, #8
   30186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3018a:	6833      	ldr	r3, [r6, #0]
   3018c:	2b04      	cmp	r3, #4
   3018e:	d126      	bne.n	301de <mfu_interface_getopt+0x16e>
   30190:	2409      	movs	r4, #9
   30192:	46a0      	mov	r8, r4
   30194:	e7a4      	b.n	300e0 <mfu_interface_getopt+0x70>
   30196:	202a      	movs	r0, #42	; 0x2a
   30198:	f7f6 fcea 	bl	26b70 <bsd_os_errno_set>
   3019c:	f04f 30ff 	mov.w	r0, #4294967295
   301a0:	b002      	add	sp, #8
   301a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   301a6:	4a1d      	ldr	r2, [pc, #116]	; (3021c <mfu_interface_getopt+0x1ac>)
   301a8:	2108      	movs	r1, #8
   301aa:	6812      	ldr	r2, [r2, #0]
   301ac:	611a      	str	r2, [r3, #16]
   301ae:	e7af      	b.n	30110 <mfu_interface_getopt+0xa0>
   301b0:	203c      	movs	r0, #60	; 0x3c
   301b2:	f7f6 fcdd 	bl	26b70 <bsd_os_errno_set>
   301b6:	f04f 30ff 	mov.w	r0, #4294967295
   301ba:	b002      	add	sp, #8
   301bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   301c0:	9800      	ldr	r0, [sp, #0]
   301c2:	6803      	ldr	r3, [r0, #0]
   301c4:	b11b      	cbz	r3, 301ce <mfu_interface_getopt+0x15e>
   301c6:	4618      	mov	r0, r3
   301c8:	f7fe fc42 	bl	2ea50 <rpc_dfu_client_data_free>
   301cc:	9800      	ldr	r0, [sp, #0]
   301ce:	f7fe fc37 	bl	2ea40 <rpc_dfu_client_message_free>
   301d2:	200c      	movs	r0, #12
   301d4:	f7f6 fccc 	bl	26b70 <bsd_os_errno_set>
   301d8:	f04f 30ff 	mov.w	r0, #4294967295
   301dc:	e7d2      	b.n	30184 <mfu_interface_getopt+0x114>
   301de:	2016      	movs	r0, #22
   301e0:	f7f6 fcc6 	bl	26b70 <bsd_os_errno_set>
   301e4:	f04f 30ff 	mov.w	r0, #4294967295
   301e8:	e771      	b.n	300ce <mfu_interface_getopt+0x5e>
   301ea:	2001      	movs	r0, #1
   301ec:	f7f6 fcc0 	bl	26b70 <bsd_os_errno_set>
   301f0:	f04f 30ff 	mov.w	r0, #4294967295
   301f4:	e76b      	b.n	300ce <mfu_interface_getopt+0x5e>
   301f6:	4b06      	ldr	r3, [pc, #24]	; (30210 <mfu_interface_getopt+0x1a0>)
   301f8:	2008      	movs	r0, #8
   301fa:	601c      	str	r4, [r3, #0]
   301fc:	f7f6 fcb8 	bl	26b70 <bsd_os_errno_set>
   30200:	6838      	ldr	r0, [r7, #0]
   30202:	f7fe fc1d 	bl	2ea40 <rpc_dfu_client_message_free>
   30206:	f04f 30ff 	mov.w	r0, #4294967295
   3020a:	e760      	b.n	300ce <mfu_interface_getopt+0x5e>
   3020c:	20024dd4 	.word	0x20024dd4
   30210:	20024dd8 	.word	0x20024dd8
   30214:	20029492 	.word	0x20029492
   30218:	20024de0 	.word	0x20024de0
   3021c:	20024ddc 	.word	0x20024ddc

00030220 <bsd_platform_error_handler>:
   30220:	b508      	push	{r3, lr}
   30222:	f00b fedc 	bl	3bfde <bsd_recoverable_error_handler>
   30226:	bd08      	pop	{r3, pc}

00030228 <bsd_init>:
   30228:	b510      	push	{r4, lr}
   3022a:	4c06      	ldr	r4, [pc, #24]	; (30244 <bsd_init+0x1c>)
   3022c:	7823      	ldrb	r3, [r4, #0]
   3022e:	b92b      	cbnz	r3, 3023c <bsd_init+0x14>
   30230:	f000 f826 	bl	30280 <bsd_platform_init>
   30234:	b908      	cbnz	r0, 3023a <bsd_init+0x12>
   30236:	2301      	movs	r3, #1
   30238:	7023      	strb	r3, [r4, #0]
   3023a:	bd10      	pop	{r4, pc}
   3023c:	f04f 30ff 	mov.w	r0, #4294967295
   30240:	bd10      	pop	{r4, pc}
   30242:	bf00      	nop
   30244:	2002b9c7 	.word	0x2002b9c7

00030248 <bsd_shutdown>:
   30248:	b510      	push	{r4, lr}
   3024a:	4c05      	ldr	r4, [pc, #20]	; (30260 <bsd_shutdown+0x18>)
   3024c:	7823      	ldrb	r3, [r4, #0]
   3024e:	b123      	cbz	r3, 3025a <bsd_shutdown+0x12>
   30250:	f000 f87c 	bl	3034c <bsd_platform_shutdown>
   30254:	b900      	cbnz	r0, 30258 <bsd_shutdown+0x10>
   30256:	7020      	strb	r0, [r4, #0]
   30258:	bd10      	pop	{r4, pc}
   3025a:	f04f 30ff 	mov.w	r0, #4294967295
   3025e:	bd10      	pop	{r4, pc}
   30260:	2002b9c7 	.word	0x2002b9c7

00030264 <unimplemented_method>:
   30264:	b40f      	push	{r0, r1, r2, r3}
   30266:	b508      	push	{r3, lr}
   30268:	202d      	movs	r0, #45	; 0x2d
   3026a:	f7f6 fc81 	bl	26b70 <bsd_os_errno_set>
   3026e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   30272:	f04f 30ff 	mov.w	r0, #4294967295
   30276:	b004      	add	sp, #16
   30278:	4770      	bx	lr
   3027a:	bf00      	nop

0003027c <rpc_transport_ipc_fault_handler>:
   3027c:	f7ff bfd0 	b.w	30220 <bsd_platform_error_handler>

00030280 <bsd_platform_init>:
   30280:	b5f0      	push	{r4, r5, r6, r7, lr}
   30282:	b093      	sub	sp, #76	; 0x4c
   30284:	f7fe fe1c 	bl	2eec0 <nrf_mem_init>
   30288:	2800      	cmp	r0, #0
   3028a:	d14c      	bne.n	30326 <bsd_platform_init+0xa6>
   3028c:	4928      	ldr	r1, [pc, #160]	; (30330 <bsd_platform_init+0xb0>)
   3028e:	a801      	add	r0, sp, #4
   30290:	f7fe fe8a 	bl	2efa8 <nrf_mem_register>
   30294:	2800      	cmp	r0, #0
   30296:	d146      	bne.n	30326 <bsd_platform_init+0xa6>
   30298:	f7f6 fd7c 	bl	26d94 <bsd_os_init>
   3029c:	f004 fab8 	bl	34810 <rpc_framework_init>
   302a0:	2800      	cmp	r0, #0
   302a2:	d140      	bne.n	30326 <bsd_platform_init+0xa6>
   302a4:	2320      	movs	r3, #32
   302a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   302aa:	2208      	movs	r2, #8
   302ac:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   302b0:	4f20      	ldr	r7, [pc, #128]	; (30334 <bsd_platform_init+0xb4>)
   302b2:	4e21      	ldr	r6, [pc, #132]	; (30338 <bsd_platform_init+0xb8>)
   302b4:	9303      	str	r3, [sp, #12]
   302b6:	9305      	str	r3, [sp, #20]
   302b8:	9307      	str	r3, [sp, #28]
   302ba:	4d20      	ldr	r5, [pc, #128]	; (3033c <bsd_platform_init+0xbc>)
   302bc:	9109      	str	r1, [sp, #36]	; 0x24
   302be:	910d      	str	r1, [sp, #52]	; 0x34
   302c0:	4c1f      	ldr	r4, [pc, #124]	; (30340 <bsd_platform_init+0xc0>)
   302c2:	4920      	ldr	r1, [pc, #128]	; (30344 <bsd_platform_init+0xc4>)
   302c4:	4b20      	ldr	r3, [pc, #128]	; (30348 <bsd_platform_init+0xc8>)
   302c6:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   302ca:	eb0d 0002 	add.w	r0, sp, r2
   302ce:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   302d2:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   302d6:	9702      	str	r7, [sp, #8]
   302d8:	9604      	str	r6, [sp, #16]
   302da:	9506      	str	r5, [sp, #24]
   302dc:	9408      	str	r4, [sp, #32]
   302de:	910a      	str	r1, [sp, #40]	; 0x28
   302e0:	930c      	str	r3, [sp, #48]	; 0x30
   302e2:	f000 fbe7 	bl	30ab4 <rpc_transport_ipc_init>
   302e6:	b108      	cbz	r0, 302ec <bsd_platform_init+0x6c>
   302e8:	b013      	add	sp, #76	; 0x4c
   302ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   302ec:	f004 f80a 	bl	34304 <interface_init>
   302f0:	b9c8      	cbnz	r0, 30326 <bsd_platform_init+0xa6>
   302f2:	f7fe fa2b 	bl	2e74c <at_interface_init>
   302f6:	b9b0      	cbnz	r0, 30326 <bsd_platform_init+0xa6>
   302f8:	f002 fd34 	bl	32d64 <ip_interface_init>
   302fc:	b998      	cbnz	r0, 30326 <bsd_platform_init+0xa6>
   302fe:	f7ff f875 	bl	2f3ec <tls_interface_init>
   30302:	b980      	cbnz	r0, 30326 <bsd_platform_init+0xa6>
   30304:	f7ff fcb2 	bl	2fc6c <mfu_interface_init>
   30308:	b968      	cbnz	r0, 30326 <bsd_platform_init+0xa6>
   3030a:	f001 fac3 	bl	31894 <pdn_interface_init>
   3030e:	b950      	cbnz	r0, 30326 <bsd_platform_init+0xa6>
   30310:	f005 fd48 	bl	35da4 <gnss_interface_init>
   30314:	b938      	cbnz	r0, 30326 <bsd_platform_init+0xa6>
   30316:	f7fd fedb 	bl	2e0d0 <logobj_interface_init>
   3031a:	3000      	adds	r0, #0
   3031c:	bf18      	it	ne
   3031e:	2001      	movne	r0, #1
   30320:	4240      	negs	r0, r0
   30322:	b013      	add	sp, #76	; 0x4c
   30324:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30326:	f04f 30ff 	mov.w	r0, #4294967295
   3032a:	b013      	add	sp, #76	; 0x4c
   3032c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3032e:	bf00      	nop
   30330:	00040e94 	.word	0x00040e94
   30334:	20010000 	.word	0x20010000
   30338:	20010040 	.word	0x20010040
   3033c:	20010020 	.word	0x20010020
   30340:	20017060 	.word	0x20017060
   30344:	20010060 	.word	0x20010060
   30348:	20013060 	.word	0x20013060

0003034c <bsd_platform_shutdown>:
   3034c:	b508      	push	{r3, lr}
   3034e:	f004 f991 	bl	34674 <interface_shutdown>
   30352:	f000 fc13 	bl	30b7c <rpc_transport_ipc_shutdown>
   30356:	2000      	movs	r0, #0
   30358:	bd08      	pop	{r3, pc}
   3035a:	bf00      	nop

0003035c <bsd_platform_af_method_table_get>:
   3035c:	2805      	cmp	r0, #5
   3035e:	d02a      	beq.n	303b6 <bsd_platform_af_method_table_get+0x5a>
   30360:	b508      	push	{r3, lr}
   30362:	d914      	bls.n	3038e <bsd_platform_af_method_table_get+0x32>
   30364:	280a      	cmp	r0, #10
   30366:	d016      	beq.n	30396 <bsd_platform_af_method_table_get+0x3a>
   30368:	2866      	cmp	r0, #102	; 0x66
   3036a:	d10b      	bne.n	30384 <bsd_platform_af_method_table_get+0x28>
   3036c:	f240 2302 	movw	r3, #514	; 0x202
   30370:	429a      	cmp	r2, r3
   30372:	d032      	beq.n	303da <bsd_platform_af_method_table_get+0x7e>
   30374:	f240 2305 	movw	r3, #517	; 0x205
   30378:	429a      	cmp	r2, r3
   3037a:	d032      	beq.n	303e2 <bsd_platform_af_method_table_get+0x86>
   3037c:	f240 2301 	movw	r3, #513	; 0x201
   30380:	429a      	cmp	r2, r3
   30382:	d02c      	beq.n	303de <bsd_platform_af_method_table_get+0x82>
   30384:	2016      	movs	r0, #22
   30386:	f7f6 fbf3 	bl	26b70 <bsd_os_errno_set>
   3038a:	2000      	movs	r0, #0
   3038c:	bd08      	pop	{r3, pc}
   3038e:	2801      	cmp	r0, #1
   30390:	d016      	beq.n	303c0 <bsd_platform_af_method_table_get+0x64>
   30392:	2802      	cmp	r0, #2
   30394:	d1f6      	bne.n	30384 <bsd_platform_af_method_table_get+0x28>
   30396:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   3039a:	2a0a      	cmp	r2, #10
   3039c:	d819      	bhi.n	303d2 <bsd_platform_af_method_table_get+0x76>
   3039e:	2301      	movs	r3, #1
   303a0:	f240 4103 	movw	r1, #1027	; 0x403
   303a4:	4810      	ldr	r0, [pc, #64]	; (303e8 <bsd_platform_af_method_table_get+0x8c>)
   303a6:	fa03 f202 	lsl.w	r2, r3, r2
   303aa:	420a      	tst	r2, r1
   303ac:	f100 0328 	add.w	r3, r0, #40	; 0x28
   303b0:	bf18      	it	ne
   303b2:	4618      	movne	r0, r3
   303b4:	bd08      	pop	{r3, pc}
   303b6:	2903      	cmp	r1, #3
   303b8:	480c      	ldr	r0, [pc, #48]	; (303ec <bsd_platform_af_method_table_get+0x90>)
   303ba:	bf18      	it	ne
   303bc:	2000      	movne	r0, #0
   303be:	4770      	bx	lr
   303c0:	f240 2303 	movw	r3, #515	; 0x203
   303c4:	429a      	cmp	r2, r3
   303c6:	d006      	beq.n	303d6 <bsd_platform_af_method_table_get+0x7a>
   303c8:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   303cc:	d1da      	bne.n	30384 <bsd_platform_af_method_table_get+0x28>
   303ce:	4808      	ldr	r0, [pc, #32]	; (303f0 <bsd_platform_af_method_table_get+0x94>)
   303d0:	bd08      	pop	{r3, pc}
   303d2:	4805      	ldr	r0, [pc, #20]	; (303e8 <bsd_platform_af_method_table_get+0x8c>)
   303d4:	bd08      	pop	{r3, pc}
   303d6:	4807      	ldr	r0, [pc, #28]	; (303f4 <bsd_platform_af_method_table_get+0x98>)
   303d8:	bd08      	pop	{r3, pc}
   303da:	4807      	ldr	r0, [pc, #28]	; (303f8 <bsd_platform_af_method_table_get+0x9c>)
   303dc:	bd08      	pop	{r3, pc}
   303de:	4807      	ldr	r0, [pc, #28]	; (303fc <bsd_platform_af_method_table_get+0xa0>)
   303e0:	bd08      	pop	{r3, pc}
   303e2:	4807      	ldr	r0, [pc, #28]	; (30400 <bsd_platform_af_method_table_get+0xa4>)
   303e4:	bd08      	pop	{r3, pc}
   303e6:	bf00      	nop
   303e8:	00040d64 	.word	0x00040d64
   303ec:	00040e54 	.word	0x00040e54
   303f0:	00040e04 	.word	0x00040e04
   303f4:	00040db4 	.word	0x00040db4
   303f8:	00040ddc 	.word	0x00040ddc
   303fc:	00040d3c 	.word	0x00040d3c
   30400:	00040e2c 	.word	0x00040e2c

00030404 <bsd_platform_fd_method_table_get>:
   30404:	b538      	push	{r3, r4, r5, lr}
   30406:	4605      	mov	r5, r0
   30408:	f004 f8a8 	bl	3455c <interface_socket_from_handle_get>
   3040c:	4604      	mov	r4, r0
   3040e:	b950      	cbnz	r0, 30426 <bsd_platform_fd_method_table_get+0x22>
   30410:	4b2a      	ldr	r3, [pc, #168]	; (304bc <bsd_platform_fd_method_table_get+0xb8>)
   30412:	43ab      	bics	r3, r5
   30414:	d032      	beq.n	3047c <bsd_platform_fd_method_table_get+0x78>
   30416:	4b2a      	ldr	r3, [pc, #168]	; (304c0 <bsd_platform_fd_method_table_get+0xbc>)
   30418:	43ab      	bics	r3, r5
   3041a:	d043      	beq.n	304a4 <bsd_platform_fd_method_table_get+0xa0>
   3041c:	4b29      	ldr	r3, [pc, #164]	; (304c4 <bsd_platform_fd_method_table_get+0xc0>)
   3041e:	43ab      	bics	r3, r5
   30420:	d146      	bne.n	304b0 <bsd_platform_fd_method_table_get+0xac>
   30422:	4829      	ldr	r0, [pc, #164]	; (304c8 <bsd_platform_fd_method_table_get+0xc4>)
   30424:	bd38      	pop	{r3, r4, r5, pc}
   30426:	68c3      	ldr	r3, [r0, #12]
   30428:	6942      	ldr	r2, [r0, #20]
   3042a:	2b05      	cmp	r3, #5
   3042c:	d034      	beq.n	30498 <bsd_platform_fd_method_table_get+0x94>
   3042e:	d911      	bls.n	30454 <bsd_platform_fd_method_table_get+0x50>
   30430:	2b0a      	cmp	r3, #10
   30432:	d013      	beq.n	3045c <bsd_platform_fd_method_table_get+0x58>
   30434:	2b66      	cmp	r3, #102	; 0x66
   30436:	d12a      	bne.n	3048e <bsd_platform_fd_method_table_get+0x8a>
   30438:	f240 2302 	movw	r3, #514	; 0x202
   3043c:	429a      	cmp	r2, r3
   3043e:	d031      	beq.n	304a4 <bsd_platform_fd_method_table_get+0xa0>
   30440:	f240 2305 	movw	r3, #517	; 0x205
   30444:	429a      	cmp	r2, r3
   30446:	d031      	beq.n	304ac <bsd_platform_fd_method_table_get+0xa8>
   30448:	f240 2301 	movw	r3, #513	; 0x201
   3044c:	429a      	cmp	r2, r3
   3044e:	d11e      	bne.n	3048e <bsd_platform_fd_method_table_get+0x8a>
   30450:	481e      	ldr	r0, [pc, #120]	; (304cc <bsd_platform_fd_method_table_get+0xc8>)
   30452:	bd38      	pop	{r3, r4, r5, pc}
   30454:	2b01      	cmp	r3, #1
   30456:	d013      	beq.n	30480 <bsd_platform_fd_method_table_get+0x7c>
   30458:	2b02      	cmp	r3, #2
   3045a:	d118      	bne.n	3048e <bsd_platform_fd_method_table_get+0x8a>
   3045c:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   30460:	2a0a      	cmp	r2, #10
   30462:	d821      	bhi.n	304a8 <bsd_platform_fd_method_table_get+0xa4>
   30464:	2301      	movs	r3, #1
   30466:	f240 4103 	movw	r1, #1027	; 0x403
   3046a:	4819      	ldr	r0, [pc, #100]	; (304d0 <bsd_platform_fd_method_table_get+0xcc>)
   3046c:	fa03 f202 	lsl.w	r2, r3, r2
   30470:	420a      	tst	r2, r1
   30472:	f100 0428 	add.w	r4, r0, #40	; 0x28
   30476:	bf18      	it	ne
   30478:	4620      	movne	r0, r4
   3047a:	bd38      	pop	{r3, r4, r5, pc}
   3047c:	4815      	ldr	r0, [pc, #84]	; (304d4 <bsd_platform_fd_method_table_get+0xd0>)
   3047e:	bd38      	pop	{r3, r4, r5, pc}
   30480:	f240 2303 	movw	r3, #515	; 0x203
   30484:	429a      	cmp	r2, r3
   30486:	d0f9      	beq.n	3047c <bsd_platform_fd_method_table_get+0x78>
   30488:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   3048c:	d0c9      	beq.n	30422 <bsd_platform_fd_method_table_get+0x1e>
   3048e:	2016      	movs	r0, #22
   30490:	f7f6 fb6e 	bl	26b70 <bsd_os_errno_set>
   30494:	2000      	movs	r0, #0
   30496:	bd38      	pop	{r3, r4, r5, pc}
   30498:	6903      	ldr	r3, [r0, #16]
   3049a:	480f      	ldr	r0, [pc, #60]	; (304d8 <bsd_platform_fd_method_table_get+0xd4>)
   3049c:	2b03      	cmp	r3, #3
   3049e:	bf18      	it	ne
   304a0:	2000      	movne	r0, #0
   304a2:	bd38      	pop	{r3, r4, r5, pc}
   304a4:	480d      	ldr	r0, [pc, #52]	; (304dc <bsd_platform_fd_method_table_get+0xd8>)
   304a6:	bd38      	pop	{r3, r4, r5, pc}
   304a8:	4809      	ldr	r0, [pc, #36]	; (304d0 <bsd_platform_fd_method_table_get+0xcc>)
   304aa:	bd38      	pop	{r3, r4, r5, pc}
   304ac:	480c      	ldr	r0, [pc, #48]	; (304e0 <bsd_platform_fd_method_table_get+0xdc>)
   304ae:	bd38      	pop	{r3, r4, r5, pc}
   304b0:	2009      	movs	r0, #9
   304b2:	f7f6 fb5d 	bl	26b70 <bsd_os_errno_set>
   304b6:	4620      	mov	r0, r4
   304b8:	bd38      	pop	{r3, r4, r5, pc}
   304ba:	bf00      	nop
   304bc:	49765432 	.word	0x49765432
   304c0:	789a0000 	.word	0x789a0000
   304c4:	49765443 	.word	0x49765443
   304c8:	00040e04 	.word	0x00040e04
   304cc:	00040d3c 	.word	0x00040d3c
   304d0:	00040d64 	.word	0x00040d64
   304d4:	00040db4 	.word	0x00040db4
   304d8:	00040e54 	.word	0x00040e54
   304dc:	00040ddc 	.word	0x00040ddc
   304e0:	00040e2c 	.word	0x00040e2c

000304e4 <bsd_platform_getaddrinfo>:
   304e4:	f003 bb84 	b.w	33bf0 <ip_interface_getaddrinfo>

000304e8 <bsd_platform_freeaddrinfo>:
   304e8:	f003 bc78 	b.w	33ddc <ip_interface_freeaddrinfo>

000304ec <bsd_platform_poll>:
   304ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   304f0:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   304f4:	b083      	sub	sp, #12
   304f6:	9200      	str	r2, [sp, #0]
   304f8:	2800      	cmp	r0, #0
   304fa:	d048      	beq.n	3058e <bsd_platform_poll+0xa2>
   304fc:	1e4b      	subs	r3, r1, #1
   304fe:	2b08      	cmp	r3, #8
   30500:	d845      	bhi.n	3058e <bsd_platform_poll+0xa2>
   30502:	4680      	mov	r8, r0
   30504:	4605      	mov	r5, r0
   30506:	2400      	movs	r4, #0
   30508:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   3050c:	88ab      	ldrh	r3, [r5, #4]
   3050e:	6828      	ldr	r0, [r5, #0]
   30510:	f003 0303 	and.w	r3, r3, #3
   30514:	a901      	add	r1, sp, #4
   30516:	f043 061c 	orr.w	r6, r3, #28
   3051a:	f004 f82d 	bl	34578 <interface_socket_event_get>
   3051e:	9b01      	ldr	r3, [sp, #4]
   30520:	3508      	adds	r5, #8
   30522:	4033      	ands	r3, r6
   30524:	f825 3c02 	strh.w	r3, [r5, #-2]
   30528:	b103      	cbz	r3, 3052c <bsd_platform_poll+0x40>
   3052a:	3401      	adds	r4, #1
   3052c:	42af      	cmp	r7, r5
   3052e:	d1ed      	bne.n	3050c <bsd_platform_poll+0x20>
   30530:	bb9c      	cbnz	r4, 3059a <bsd_platform_poll+0xae>
   30532:	4669      	mov	r1, sp
   30534:	4640      	mov	r0, r8
   30536:	f7f6 fa87 	bl	26a48 <bsd_os_timedwait>
   3053a:	4607      	mov	r7, r0
   3053c:	b108      	cbz	r0, 30542 <bsd_platform_poll+0x56>
   3053e:	283c      	cmp	r0, #60	; 0x3c
   30540:	d11d      	bne.n	3057e <bsd_platform_poll+0x92>
   30542:	46c1      	mov	r9, r8
   30544:	2600      	movs	r6, #0
   30546:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   3054a:	f8d9 0000 	ldr.w	r0, [r9]
   3054e:	f003 0303 	and.w	r3, r3, #3
   30552:	a901      	add	r1, sp, #4
   30554:	f043 041c 	orr.w	r4, r3, #28
   30558:	f004 f80e 	bl	34578 <interface_socket_event_get>
   3055c:	9b01      	ldr	r3, [sp, #4]
   3055e:	f109 0908 	add.w	r9, r9, #8
   30562:	4023      	ands	r3, r4
   30564:	f829 3c02 	strh.w	r3, [r9, #-2]
   30568:	b103      	cbz	r3, 3056c <bsd_platform_poll+0x80>
   3056a:	3601      	adds	r6, #1
   3056c:	454d      	cmp	r5, r9
   3056e:	d1ea      	bne.n	30546 <bsd_platform_poll+0x5a>
   30570:	b90e      	cbnz	r6, 30576 <bsd_platform_poll+0x8a>
   30572:	2f00      	cmp	r7, #0
   30574:	d0dd      	beq.n	30532 <bsd_platform_poll+0x46>
   30576:	4630      	mov	r0, r6
   30578:	b003      	add	sp, #12
   3057a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3057e:	2023      	movs	r0, #35	; 0x23
   30580:	f7f6 faf6 	bl	26b70 <bsd_os_errno_set>
   30584:	f04f 30ff 	mov.w	r0, #4294967295
   30588:	b003      	add	sp, #12
   3058a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3058e:	2016      	movs	r0, #22
   30590:	f7f6 faee 	bl	26b70 <bsd_os_errno_set>
   30594:	f04f 30ff 	mov.w	r0, #4294967295
   30598:	e7ee      	b.n	30578 <bsd_platform_poll+0x8c>
   3059a:	4620      	mov	r0, r4
   3059c:	e7ec      	b.n	30578 <bsd_platform_poll+0x8c>
   3059e:	bf00      	nop

000305a0 <bsd_platform_fcntl>:
   305a0:	b508      	push	{r3, lr}
   305a2:	4b06      	ldr	r3, [pc, #24]	; (305bc <bsd_platform_fcntl+0x1c>)
   305a4:	4383      	bics	r3, r0
   305a6:	d003      	beq.n	305b0 <bsd_platform_fcntl+0x10>
   305a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   305ac:	f004 b896 	b.w	346dc <interface_socket_fcntl>
   305b0:	202d      	movs	r0, #45	; 0x2d
   305b2:	f7f6 fadd 	bl	26b70 <bsd_os_errno_set>
   305b6:	f04f 30ff 	mov.w	r0, #4294967295
   305ba:	bd08      	pop	{r3, pc}
   305bc:	49765432 	.word	0x49765432

000305c0 <ipc_trace_init>:
   305c0:	4b01      	ldr	r3, [pc, #4]	; (305c8 <ipc_trace_init+0x8>)
   305c2:	6018      	str	r0, [r3, #0]
   305c4:	4770      	bx	lr
   305c6:	bf00      	nop
   305c8:	20024df0 	.word	0x20024df0

000305cc <bsd_os_trace_irq_handler>:
   305cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   305ce:	4b6c      	ldr	r3, [pc, #432]	; (30780 <bsd_os_trace_irq_handler+0x1b4>)
   305d0:	b083      	sub	sp, #12
   305d2:	781b      	ldrb	r3, [r3, #0]
   305d4:	2b00      	cmp	r3, #0
   305d6:	f000 80ad 	beq.w	30734 <bsd_os_trace_irq_handler+0x168>
   305da:	4b6a      	ldr	r3, [pc, #424]	; (30784 <bsd_os_trace_irq_handler+0x1b8>)
   305dc:	681c      	ldr	r4, [r3, #0]
   305de:	68a2      	ldr	r2, [r4, #8]
   305e0:	6863      	ldr	r3, [r4, #4]
   305e2:	429a      	cmp	r2, r3
   305e4:	d02d      	beq.n	30642 <bsd_os_trace_irq_handler+0x76>
   305e6:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   305ea:	f8ad 3000 	strh.w	r3, [sp]
   305ee:	7823      	ldrb	r3, [r4, #0]
   305f0:	466e      	mov	r6, sp
   305f2:	f88d 3004 	strb.w	r3, [sp, #4]
   305f6:	6863      	ldr	r3, [r4, #4]
   305f8:	2105      	movs	r1, #5
   305fa:	429a      	cmp	r2, r3
   305fc:	bf2a      	itet	cs
   305fe:	6927      	ldrcs	r7, [r4, #16]
   30600:	1a9f      	subcc	r7, r3, r2
   30602:	1abf      	subcs	r7, r7, r2
   30604:	429a      	cmp	r2, r3
   30606:	bf94      	ite	ls
   30608:	2500      	movls	r5, #0
   3060a:	68e5      	ldrhi	r5, [r4, #12]
   3060c:	b2bf      	uxth	r7, r7
   3060e:	bf88      	it	hi
   30610:	1b5b      	subhi	r3, r3, r5
   30612:	4630      	mov	r0, r6
   30614:	bf88      	it	hi
   30616:	b29d      	uxthhi	r5, r3
   30618:	f8ad 7002 	strh.w	r7, [sp, #2]
   3061c:	f00d fa74 	bl	3db08 <bsd_os_trace_put>
   30620:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   30624:	68a0      	ldr	r0, [r4, #8]
   30626:	f00d fa6f 	bl	3db08 <bsd_os_trace_put>
   3062a:	68a3      	ldr	r3, [r4, #8]
   3062c:	6922      	ldr	r2, [r4, #16]
   3062e:	441f      	add	r7, r3
   30630:	4297      	cmp	r7, r2
   30632:	bf08      	it	eq
   30634:	68e3      	ldreq	r3, [r4, #12]
   30636:	60a7      	str	r7, [r4, #8]
   30638:	bf08      	it	eq
   3063a:	60a3      	streq	r3, [r4, #8]
   3063c:	2d00      	cmp	r5, #0
   3063e:	f040 808d 	bne.w	3075c <bsd_os_trace_irq_handler+0x190>
   30642:	4b51      	ldr	r3, [pc, #324]	; (30788 <bsd_os_trace_irq_handler+0x1bc>)
   30644:	681c      	ldr	r4, [r3, #0]
   30646:	68a2      	ldr	r2, [r4, #8]
   30648:	6863      	ldr	r3, [r4, #4]
   3064a:	429a      	cmp	r2, r3
   3064c:	d02c      	beq.n	306a8 <bsd_os_trace_irq_handler+0xdc>
   3064e:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   30652:	f8ad 3000 	strh.w	r3, [sp]
   30656:	7823      	ldrb	r3, [r4, #0]
   30658:	466e      	mov	r6, sp
   3065a:	f88d 3004 	strb.w	r3, [sp, #4]
   3065e:	6863      	ldr	r3, [r4, #4]
   30660:	2105      	movs	r1, #5
   30662:	429a      	cmp	r2, r3
   30664:	bf2a      	itet	cs
   30666:	6927      	ldrcs	r7, [r4, #16]
   30668:	1a9f      	subcc	r7, r3, r2
   3066a:	1abf      	subcs	r7, r7, r2
   3066c:	429a      	cmp	r2, r3
   3066e:	bf94      	ite	ls
   30670:	2500      	movls	r5, #0
   30672:	68e5      	ldrhi	r5, [r4, #12]
   30674:	b2bf      	uxth	r7, r7
   30676:	bf88      	it	hi
   30678:	1b5b      	subhi	r3, r3, r5
   3067a:	4630      	mov	r0, r6
   3067c:	bf88      	it	hi
   3067e:	b29d      	uxthhi	r5, r3
   30680:	f8ad 7002 	strh.w	r7, [sp, #2]
   30684:	f00d fa40 	bl	3db08 <bsd_os_trace_put>
   30688:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3068c:	68a0      	ldr	r0, [r4, #8]
   3068e:	f00d fa3b 	bl	3db08 <bsd_os_trace_put>
   30692:	68a3      	ldr	r3, [r4, #8]
   30694:	6922      	ldr	r2, [r4, #16]
   30696:	441f      	add	r7, r3
   30698:	4297      	cmp	r7, r2
   3069a:	bf08      	it	eq
   3069c:	68e3      	ldreq	r3, [r4, #12]
   3069e:	60a7      	str	r7, [r4, #8]
   306a0:	bf08      	it	eq
   306a2:	60a3      	streq	r3, [r4, #8]
   306a4:	2d00      	cmp	r5, #0
   306a6:	d148      	bne.n	3073a <bsd_os_trace_irq_handler+0x16e>
   306a8:	4b38      	ldr	r3, [pc, #224]	; (3078c <bsd_os_trace_irq_handler+0x1c0>)
   306aa:	681c      	ldr	r4, [r3, #0]
   306ac:	68a2      	ldr	r2, [r4, #8]
   306ae:	6863      	ldr	r3, [r4, #4]
   306b0:	429a      	cmp	r2, r3
   306b2:	d02b      	beq.n	3070c <bsd_os_trace_irq_handler+0x140>
   306b4:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   306b8:	f8ad 3000 	strh.w	r3, [sp]
   306bc:	7823      	ldrb	r3, [r4, #0]
   306be:	466e      	mov	r6, sp
   306c0:	f88d 3004 	strb.w	r3, [sp, #4]
   306c4:	6863      	ldr	r3, [r4, #4]
   306c6:	2105      	movs	r1, #5
   306c8:	429a      	cmp	r2, r3
   306ca:	bf2a      	itet	cs
   306cc:	6927      	ldrcs	r7, [r4, #16]
   306ce:	1a9f      	subcc	r7, r3, r2
   306d0:	1abf      	subcs	r7, r7, r2
   306d2:	429a      	cmp	r2, r3
   306d4:	bf94      	ite	ls
   306d6:	2500      	movls	r5, #0
   306d8:	68e5      	ldrhi	r5, [r4, #12]
   306da:	b2bf      	uxth	r7, r7
   306dc:	bf88      	it	hi
   306de:	1b5b      	subhi	r3, r3, r5
   306e0:	4630      	mov	r0, r6
   306e2:	bf88      	it	hi
   306e4:	b29d      	uxthhi	r5, r3
   306e6:	f8ad 7002 	strh.w	r7, [sp, #2]
   306ea:	f00d fa0d 	bl	3db08 <bsd_os_trace_put>
   306ee:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   306f2:	68a0      	ldr	r0, [r4, #8]
   306f4:	f00d fa08 	bl	3db08 <bsd_os_trace_put>
   306f8:	68a3      	ldr	r3, [r4, #8]
   306fa:	6922      	ldr	r2, [r4, #16]
   306fc:	441f      	add	r7, r3
   306fe:	4297      	cmp	r7, r2
   30700:	bf08      	it	eq
   30702:	68e3      	ldreq	r3, [r4, #12]
   30704:	60a7      	str	r7, [r4, #8]
   30706:	bf08      	it	eq
   30708:	60a3      	streq	r3, [r4, #8]
   3070a:	b90d      	cbnz	r5, 30710 <bsd_os_trace_irq_handler+0x144>
   3070c:	b003      	add	sp, #12
   3070e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30710:	4630      	mov	r0, r6
   30712:	2105      	movs	r1, #5
   30714:	f8ad 5002 	strh.w	r5, [sp, #2]
   30718:	f00d f9f6 	bl	3db08 <bsd_os_trace_put>
   3071c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   30720:	68e0      	ldr	r0, [r4, #12]
   30722:	f00d f9f1 	bl	3db08 <bsd_os_trace_put>
   30726:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   3072a:	68e3      	ldr	r3, [r4, #12]
   3072c:	4413      	add	r3, r2
   3072e:	60a3      	str	r3, [r4, #8]
   30730:	b003      	add	sp, #12
   30732:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30734:	f7f6 fb26 	bl	26d84 <bsd_os_trace_irq_clear>
   30738:	e74f      	b.n	305da <bsd_os_trace_irq_handler+0xe>
   3073a:	2105      	movs	r1, #5
   3073c:	4630      	mov	r0, r6
   3073e:	f8ad 5002 	strh.w	r5, [sp, #2]
   30742:	f00d f9e1 	bl	3db08 <bsd_os_trace_put>
   30746:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3074a:	68e0      	ldr	r0, [r4, #12]
   3074c:	f00d f9dc 	bl	3db08 <bsd_os_trace_put>
   30750:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   30754:	68e3      	ldr	r3, [r4, #12]
   30756:	4413      	add	r3, r2
   30758:	60a3      	str	r3, [r4, #8]
   3075a:	e7a5      	b.n	306a8 <bsd_os_trace_irq_handler+0xdc>
   3075c:	2105      	movs	r1, #5
   3075e:	4630      	mov	r0, r6
   30760:	f8ad 5002 	strh.w	r5, [sp, #2]
   30764:	f00d f9d0 	bl	3db08 <bsd_os_trace_put>
   30768:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3076c:	68e0      	ldr	r0, [r4, #12]
   3076e:	f00d f9cb 	bl	3db08 <bsd_os_trace_put>
   30772:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   30776:	68e3      	ldr	r3, [r4, #12]
   30778:	4413      	add	r3, r2
   3077a:	60a3      	str	r3, [r4, #8]
   3077c:	e761      	b.n	30642 <bsd_os_trace_irq_handler+0x76>
   3077e:	bf00      	nop
   30780:	2002b9c8 	.word	0x2002b9c8
   30784:	20024dec 	.word	0x20024dec
   30788:	20024de4 	.word	0x20024de4
   3078c:	20024de8 	.word	0x20024de8

00030790 <ipc_trace_handle>:
   30790:	2200      	movs	r2, #0
   30792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30796:	4bb0      	ldr	r3, [pc, #704]	; (30a58 <ipc_trace_handle+0x2c8>)
   30798:	b083      	sub	sp, #12
   3079a:	681b      	ldr	r3, [r3, #0]
   3079c:	6919      	ldr	r1, [r3, #16]
   3079e:	695c      	ldr	r4, [r3, #20]
   307a0:	7c18      	ldrb	r0, [r3, #16]
   307a2:	741a      	strb	r2, [r3, #16]
   307a4:	7c58      	ldrb	r0, [r3, #17]
   307a6:	745a      	strb	r2, [r3, #17]
   307a8:	7c98      	ldrb	r0, [r3, #18]
   307aa:	749a      	strb	r2, [r3, #18]
   307ac:	7cd8      	ldrb	r0, [r3, #19]
   307ae:	74da      	strb	r2, [r3, #19]
   307b0:	7d18      	ldrb	r0, [r3, #20]
   307b2:	751a      	strb	r2, [r3, #20]
   307b4:	7d58      	ldrb	r0, [r3, #21]
   307b6:	755a      	strb	r2, [r3, #21]
   307b8:	7d98      	ldrb	r0, [r3, #22]
   307ba:	759a      	strb	r2, [r3, #22]
   307bc:	7dd8      	ldrb	r0, [r3, #23]
   307be:	75da      	strb	r2, [r3, #23]
   307c0:	b1b9      	cbz	r1, 307f2 <ipc_trace_handle+0x62>
   307c2:	3901      	subs	r1, #1
   307c4:	2903      	cmp	r1, #3
   307c6:	d814      	bhi.n	307f2 <ipc_trace_handle+0x62>
   307c8:	e8df f011 	tbh	[pc, r1, lsl #1]
   307cc:	010300d6 	.word	0x010300d6
   307d0:	00160004 	.word	0x00160004
   307d4:	2501      	movs	r5, #1
   307d6:	2003      	movs	r0, #3
   307d8:	2200      	movs	r2, #0
   307da:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   307de:	4c9f      	ldr	r4, [pc, #636]	; (30a5c <ipc_trace_handle+0x2cc>)
   307e0:	7025      	strb	r5, [r4, #0]
   307e2:	7a1c      	ldrb	r4, [r3, #8]
   307e4:	7218      	strb	r0, [r3, #8]
   307e6:	7a58      	ldrb	r0, [r3, #9]
   307e8:	725a      	strb	r2, [r3, #9]
   307ea:	7a98      	ldrb	r0, [r3, #10]
   307ec:	729a      	strb	r2, [r3, #10]
   307ee:	7ada      	ldrb	r2, [r3, #11]
   307f0:	72d9      	strb	r1, [r3, #11]
   307f2:	b003      	add	sp, #12
   307f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   307f8:	2104      	movs	r1, #4
   307fa:	2200      	movs	r2, #0
   307fc:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   30800:	7a1c      	ldrb	r4, [r3, #8]
   30802:	7219      	strb	r1, [r3, #8]
   30804:	7a59      	ldrb	r1, [r3, #9]
   30806:	725a      	strb	r2, [r3, #9]
   30808:	4994      	ldr	r1, [pc, #592]	; (30a5c <ipc_trace_handle+0x2cc>)
   3080a:	7a9c      	ldrb	r4, [r3, #10]
   3080c:	729a      	strb	r2, [r3, #10]
   3080e:	7adc      	ldrb	r4, [r3, #11]
   30810:	72d8      	strb	r0, [r3, #11]
   30812:	700a      	strb	r2, [r1, #0]
   30814:	780b      	ldrb	r3, [r1, #0]
   30816:	2b00      	cmp	r3, #0
   30818:	f000 8117 	beq.w	30a4a <ipc_trace_handle+0x2ba>
   3081c:	4b90      	ldr	r3, [pc, #576]	; (30a60 <ipc_trace_handle+0x2d0>)
   3081e:	681c      	ldr	r4, [r3, #0]
   30820:	68a2      	ldr	r2, [r4, #8]
   30822:	6863      	ldr	r3, [r4, #4]
   30824:	429a      	cmp	r2, r3
   30826:	d02d      	beq.n	30884 <ipc_trace_handle+0xf4>
   30828:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   3082c:	f8ad 3000 	strh.w	r3, [sp]
   30830:	7823      	ldrb	r3, [r4, #0]
   30832:	466e      	mov	r6, sp
   30834:	f88d 3004 	strb.w	r3, [sp, #4]
   30838:	6863      	ldr	r3, [r4, #4]
   3083a:	2105      	movs	r1, #5
   3083c:	429a      	cmp	r2, r3
   3083e:	bf2a      	itet	cs
   30840:	6927      	ldrcs	r7, [r4, #16]
   30842:	1a9f      	subcc	r7, r3, r2
   30844:	1abf      	subcs	r7, r7, r2
   30846:	429a      	cmp	r2, r3
   30848:	bf94      	ite	ls
   3084a:	2500      	movls	r5, #0
   3084c:	68e5      	ldrhi	r5, [r4, #12]
   3084e:	b2bf      	uxth	r7, r7
   30850:	bf88      	it	hi
   30852:	1b5b      	subhi	r3, r3, r5
   30854:	4630      	mov	r0, r6
   30856:	bf88      	it	hi
   30858:	b29d      	uxthhi	r5, r3
   3085a:	f8ad 7002 	strh.w	r7, [sp, #2]
   3085e:	f00d f953 	bl	3db08 <bsd_os_trace_put>
   30862:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   30866:	68a0      	ldr	r0, [r4, #8]
   30868:	f00d f94e 	bl	3db08 <bsd_os_trace_put>
   3086c:	68a3      	ldr	r3, [r4, #8]
   3086e:	6922      	ldr	r2, [r4, #16]
   30870:	441f      	add	r7, r3
   30872:	4297      	cmp	r7, r2
   30874:	bf08      	it	eq
   30876:	68e3      	ldreq	r3, [r4, #12]
   30878:	60a7      	str	r7, [r4, #8]
   3087a:	bf08      	it	eq
   3087c:	60a3      	streq	r3, [r4, #8]
   3087e:	2d00      	cmp	r5, #0
   30880:	f040 80d2 	bne.w	30a28 <ipc_trace_handle+0x298>
   30884:	4b77      	ldr	r3, [pc, #476]	; (30a64 <ipc_trace_handle+0x2d4>)
   30886:	681c      	ldr	r4, [r3, #0]
   30888:	68a2      	ldr	r2, [r4, #8]
   3088a:	6863      	ldr	r3, [r4, #4]
   3088c:	429a      	cmp	r2, r3
   3088e:	d02d      	beq.n	308ec <ipc_trace_handle+0x15c>
   30890:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   30894:	f8ad 3000 	strh.w	r3, [sp]
   30898:	7823      	ldrb	r3, [r4, #0]
   3089a:	466e      	mov	r6, sp
   3089c:	f88d 3004 	strb.w	r3, [sp, #4]
   308a0:	6863      	ldr	r3, [r4, #4]
   308a2:	2105      	movs	r1, #5
   308a4:	429a      	cmp	r2, r3
   308a6:	bf2a      	itet	cs
   308a8:	6927      	ldrcs	r7, [r4, #16]
   308aa:	1a9f      	subcc	r7, r3, r2
   308ac:	1abf      	subcs	r7, r7, r2
   308ae:	429a      	cmp	r2, r3
   308b0:	bf94      	ite	ls
   308b2:	2500      	movls	r5, #0
   308b4:	68e5      	ldrhi	r5, [r4, #12]
   308b6:	b2bf      	uxth	r7, r7
   308b8:	bf88      	it	hi
   308ba:	1b5b      	subhi	r3, r3, r5
   308bc:	4630      	mov	r0, r6
   308be:	bf88      	it	hi
   308c0:	b29d      	uxthhi	r5, r3
   308c2:	f8ad 7002 	strh.w	r7, [sp, #2]
   308c6:	f00d f91f 	bl	3db08 <bsd_os_trace_put>
   308ca:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   308ce:	68a0      	ldr	r0, [r4, #8]
   308d0:	f00d f91a 	bl	3db08 <bsd_os_trace_put>
   308d4:	68a3      	ldr	r3, [r4, #8]
   308d6:	6922      	ldr	r2, [r4, #16]
   308d8:	441f      	add	r7, r3
   308da:	4297      	cmp	r7, r2
   308dc:	bf08      	it	eq
   308de:	68e3      	ldreq	r3, [r4, #12]
   308e0:	60a7      	str	r7, [r4, #8]
   308e2:	bf08      	it	eq
   308e4:	60a3      	streq	r3, [r4, #8]
   308e6:	2d00      	cmp	r5, #0
   308e8:	f040 808d 	bne.w	30a06 <ipc_trace_handle+0x276>
   308ec:	4b5e      	ldr	r3, [pc, #376]	; (30a68 <ipc_trace_handle+0x2d8>)
   308ee:	681c      	ldr	r4, [r3, #0]
   308f0:	68a2      	ldr	r2, [r4, #8]
   308f2:	6863      	ldr	r3, [r4, #4]
   308f4:	429a      	cmp	r2, r3
   308f6:	f43f af7c 	beq.w	307f2 <ipc_trace_handle+0x62>
   308fa:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   308fe:	f8ad 3000 	strh.w	r3, [sp]
   30902:	7823      	ldrb	r3, [r4, #0]
   30904:	466e      	mov	r6, sp
   30906:	f88d 3004 	strb.w	r3, [sp, #4]
   3090a:	6863      	ldr	r3, [r4, #4]
   3090c:	2105      	movs	r1, #5
   3090e:	429a      	cmp	r2, r3
   30910:	bf2a      	itet	cs
   30912:	6927      	ldrcs	r7, [r4, #16]
   30914:	1a9f      	subcc	r7, r3, r2
   30916:	1abf      	subcs	r7, r7, r2
   30918:	429a      	cmp	r2, r3
   3091a:	bf94      	ite	ls
   3091c:	2500      	movls	r5, #0
   3091e:	68e5      	ldrhi	r5, [r4, #12]
   30920:	b2bf      	uxth	r7, r7
   30922:	bf88      	it	hi
   30924:	1b5b      	subhi	r3, r3, r5
   30926:	4630      	mov	r0, r6
   30928:	bf88      	it	hi
   3092a:	b29d      	uxthhi	r5, r3
   3092c:	f8ad 7002 	strh.w	r7, [sp, #2]
   30930:	f00d f8ea 	bl	3db08 <bsd_os_trace_put>
   30934:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   30938:	68a0      	ldr	r0, [r4, #8]
   3093a:	f00d f8e5 	bl	3db08 <bsd_os_trace_put>
   3093e:	68a3      	ldr	r3, [r4, #8]
   30940:	6922      	ldr	r2, [r4, #16]
   30942:	441f      	add	r7, r3
   30944:	4297      	cmp	r7, r2
   30946:	bf08      	it	eq
   30948:	68e3      	ldreq	r3, [r4, #12]
   3094a:	60a7      	str	r7, [r4, #8]
   3094c:	bf08      	it	eq
   3094e:	60a3      	streq	r3, [r4, #8]
   30950:	2d00      	cmp	r5, #0
   30952:	f43f af4e 	beq.w	307f2 <ipc_trace_handle+0x62>
   30956:	2105      	movs	r1, #5
   30958:	4630      	mov	r0, r6
   3095a:	f8ad 5002 	strh.w	r5, [sp, #2]
   3095e:	f00d f8d3 	bl	3db08 <bsd_os_trace_put>
   30962:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   30966:	68e0      	ldr	r0, [r4, #12]
   30968:	f00d f8ce 	bl	3db08 <bsd_os_trace_put>
   3096c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   30970:	68e3      	ldr	r3, [r4, #12]
   30972:	4413      	add	r3, r2
   30974:	60a3      	str	r3, [r4, #8]
   30976:	e73c      	b.n	307f2 <ipc_trace_handle+0x62>
   30978:	4a38      	ldr	r2, [pc, #224]	; (30a5c <ipc_trace_handle+0x2cc>)
   3097a:	7811      	ldrb	r1, [r2, #0]
   3097c:	b109      	cbz	r1, 30982 <ipc_trace_handle+0x1f2>
   3097e:	2100      	movs	r1, #0
   30980:	7011      	strb	r1, [r2, #0]
   30982:	68a5      	ldr	r5, [r4, #8]
   30984:	2d00      	cmp	r5, #0
   30986:	d039      	beq.n	309fc <ipc_trace_handle+0x26c>
   30988:	f04f 0c00 	mov.w	ip, #0
   3098c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 30a64 <ipc_trace_handle+0x2d4>
   30990:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 30a60 <ipc_trace_handle+0x2d0>
   30994:	4934      	ldr	r1, [pc, #208]	; (30a68 <ipc_trace_handle+0x2d8>)
   30996:	46e1      	mov	r9, ip
   30998:	4666      	mov	r6, ip
   3099a:	4662      	mov	r2, ip
   3099c:	f8d1 e000 	ldr.w	lr, [r1]
   309a0:	f8da 8000 	ldr.w	r8, [sl]
   309a4:	f8db 7000 	ldr.w	r7, [fp]
   309a8:	e008      	b.n	309bc <ipc_trace_handle+0x22c>
   309aa:	2963      	cmp	r1, #99	; 0x63
   309ac:	d016      	beq.n	309dc <ipc_trace_handle+0x24c>
   309ae:	2961      	cmp	r1, #97	; 0x61
   309b0:	bf04      	itt	eq
   309b2:	4607      	moveq	r7, r0
   309b4:	2601      	moveq	r6, #1
   309b6:	3201      	adds	r2, #1
   309b8:	42aa      	cmp	r2, r5
   309ba:	d013      	beq.n	309e4 <ipc_trace_handle+0x254>
   309bc:	1c91      	adds	r1, r2, #2
   309be:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   309c2:	6848      	ldr	r0, [r1, #4]
   309c4:	7801      	ldrb	r1, [r0, #0]
   309c6:	2962      	cmp	r1, #98	; 0x62
   309c8:	d1ef      	bne.n	309aa <ipc_trace_handle+0x21a>
   309ca:	4680      	mov	r8, r0
   309cc:	f04f 0901 	mov.w	r9, #1
   309d0:	e7f1      	b.n	309b6 <ipc_trace_handle+0x226>
   309d2:	f7f6 f9cf 	bl	26d74 <bsd_os_trace_irq_set>
   309d6:	b003      	add	sp, #12
   309d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   309dc:	4686      	mov	lr, r0
   309de:	f04f 0c01 	mov.w	ip, #1
   309e2:	e7e8      	b.n	309b6 <ipc_trace_handle+0x226>
   309e4:	bba6      	cbnz	r6, 30a50 <ipc_trace_handle+0x2c0>
   309e6:	f1b9 0f00 	cmp.w	r9, #0
   309ea:	d001      	beq.n	309f0 <ipc_trace_handle+0x260>
   309ec:	f8ca 8000 	str.w	r8, [sl]
   309f0:	f1bc 0f00 	cmp.w	ip, #0
   309f4:	d002      	beq.n	309fc <ipc_trace_handle+0x26c>
   309f6:	4a1c      	ldr	r2, [pc, #112]	; (30a68 <ipc_trace_handle+0x2d8>)
   309f8:	f8c2 e000 	str.w	lr, [r2]
   309fc:	2001      	movs	r0, #1
   309fe:	2200      	movs	r2, #0
   30a00:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   30a04:	e6ed      	b.n	307e2 <ipc_trace_handle+0x52>
   30a06:	2105      	movs	r1, #5
   30a08:	4630      	mov	r0, r6
   30a0a:	f8ad 5002 	strh.w	r5, [sp, #2]
   30a0e:	f00d f87b 	bl	3db08 <bsd_os_trace_put>
   30a12:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   30a16:	68e0      	ldr	r0, [r4, #12]
   30a18:	f00d f876 	bl	3db08 <bsd_os_trace_put>
   30a1c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   30a20:	68e3      	ldr	r3, [r4, #12]
   30a22:	4413      	add	r3, r2
   30a24:	60a3      	str	r3, [r4, #8]
   30a26:	e761      	b.n	308ec <ipc_trace_handle+0x15c>
   30a28:	2105      	movs	r1, #5
   30a2a:	4630      	mov	r0, r6
   30a2c:	f8ad 5002 	strh.w	r5, [sp, #2]
   30a30:	f00d f86a 	bl	3db08 <bsd_os_trace_put>
   30a34:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   30a38:	68e0      	ldr	r0, [r4, #12]
   30a3a:	f00d f865 	bl	3db08 <bsd_os_trace_put>
   30a3e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   30a42:	68e3      	ldr	r3, [r4, #12]
   30a44:	4413      	add	r3, r2
   30a46:	60a3      	str	r3, [r4, #8]
   30a48:	e71c      	b.n	30884 <ipc_trace_handle+0xf4>
   30a4a:	f7f6 f99b 	bl	26d84 <bsd_os_trace_irq_clear>
   30a4e:	e6e5      	b.n	3081c <ipc_trace_handle+0x8c>
   30a50:	f8cb 7000 	str.w	r7, [fp]
   30a54:	e7c7      	b.n	309e6 <ipc_trace_handle+0x256>
   30a56:	bf00      	nop
   30a58:	20024df0 	.word	0x20024df0
   30a5c:	2002b9c8 	.word	0x2002b9c8
   30a60:	20024dec 	.word	0x20024dec
   30a64:	20024de4 	.word	0x20024de4
   30a68:	20024de8 	.word	0x20024de8

00030a6c <rpc_trace_coredump_in_progress>:
   30a6c:	4b01      	ldr	r3, [pc, #4]	; (30a74 <rpc_trace_coredump_in_progress+0x8>)
   30a6e:	7818      	ldrb	r0, [r3, #0]
   30a70:	4770      	bx	lr
   30a72:	bf00      	nop
   30a74:	2002b9c8 	.word	0x2002b9c8

00030a78 <transport_reset>:
   30a78:	2000      	movs	r0, #0
   30a7a:	4770      	bx	lr

00030a7c <transport_data_free>:
   30a7c:	4b0b      	ldr	r3, [pc, #44]	; (30aac <transport_data_free+0x30>)
   30a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   30a82:	4413      	add	r3, r2
   30a84:	4298      	cmp	r0, r3
   30a86:	d20d      	bcs.n	30aa4 <transport_data_free+0x28>
   30a88:	4282      	cmp	r2, r0
   30a8a:	d80b      	bhi.n	30aa4 <transport_data_free+0x28>
   30a8c:	b510      	push	{r4, lr}
   30a8e:	4604      	mov	r4, r0
   30a90:	f000 fdfc 	bl	3168c <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   30a94:	b140      	cbz	r0, 30aa8 <transport_data_free+0x2c>
   30a96:	4a06      	ldr	r2, [pc, #24]	; (30ab0 <transport_data_free+0x34>)
   30a98:	6084      	str	r4, [r0, #8]
   30a9a:	6002      	str	r2, [r0, #0]
   30a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30aa0:	f000 bd3c 	b.w	3151c <rpc_transport_ipc_tx_send>
   30aa4:	f7fe bbba 	b.w	2f21c <nrf_shared_free>
   30aa8:	bd10      	pop	{r4, pc}
   30aaa:	bf00      	nop
   30aac:	20024df4 	.word	0x20024df4
   30ab0:	00020001 	.word	0x00020001

00030ab4 <rpc_transport_ipc_init>:
   30ab4:	2800      	cmp	r0, #0
   30ab6:	d02b      	beq.n	30b10 <rpc_transport_ipc_init+0x5c>
   30ab8:	b530      	push	{r4, r5, lr}
   30aba:	b089      	sub	sp, #36	; 0x24
   30abc:	aa01      	add	r2, sp, #4
   30abe:	4669      	mov	r1, sp
   30ac0:	4604      	mov	r4, r0
   30ac2:	f000 fc41 	bl	31348 <rpc_transport_ipc_tx_init>
   30ac6:	4603      	mov	r3, r0
   30ac8:	b140      	cbz	r0, 30adc <rpc_transport_ipc_init+0x28>
   30aca:	4a13      	ldr	r2, [pc, #76]	; (30b18 <rpc_transport_ipc_init+0x64>)
   30acc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   30ad0:	c803      	ldmia	r0, {r0, r1}
   30ad2:	e882 0003 	stmia.w	r2, {r0, r1}
   30ad6:	4618      	mov	r0, r3
   30ad8:	b009      	add	sp, #36	; 0x24
   30ada:	bd30      	pop	{r4, r5, pc}
   30adc:	e9dd 1200 	ldrd	r1, r2, [sp]
   30ae0:	4620      	mov	r0, r4
   30ae2:	f000 f857 	bl	30b94 <rpc_transport_ipc_rx_init>
   30ae6:	4603      	mov	r3, r0
   30ae8:	2800      	cmp	r0, #0
   30aea:	d1ee      	bne.n	30aca <rpc_transport_ipc_init+0x16>
   30aec:	4b0b      	ldr	r3, [pc, #44]	; (30b1c <rpc_transport_ipc_init+0x68>)
   30aee:	490c      	ldr	r1, [pc, #48]	; (30b20 <rpc_transport_ipc_init+0x6c>)
   30af0:	480c      	ldr	r0, [pc, #48]	; (30b24 <rpc_transport_ipc_init+0x70>)
   30af2:	4a0d      	ldr	r2, [pc, #52]	; (30b28 <rpc_transport_ipc_init+0x74>)
   30af4:	9303      	str	r3, [sp, #12]
   30af6:	4d0d      	ldr	r5, [pc, #52]	; (30b2c <rpc_transport_ipc_init+0x78>)
   30af8:	4b0d      	ldr	r3, [pc, #52]	; (30b30 <rpc_transport_ipc_init+0x7c>)
   30afa:	9104      	str	r1, [sp, #16]
   30afc:	9005      	str	r0, [sp, #20]
   30afe:	490d      	ldr	r1, [pc, #52]	; (30b34 <rpc_transport_ipc_init+0x80>)
   30b00:	a802      	add	r0, sp, #8
   30b02:	9307      	str	r3, [sp, #28]
   30b04:	9506      	str	r5, [sp, #24]
   30b06:	9202      	str	r2, [sp, #8]
   30b08:	f004 f804 	bl	34b14 <rpc_transport_register>
   30b0c:	4603      	mov	r3, r0
   30b0e:	e7dc      	b.n	30aca <rpc_transport_ipc_init+0x16>
   30b10:	230e      	movs	r3, #14
   30b12:	4618      	mov	r0, r3
   30b14:	4770      	bx	lr
   30b16:	bf00      	nop
   30b18:	20024df4 	.word	0x20024df4
   30b1c:	0003161d 	.word	0x0003161d
   30b20:	000316ed 	.word	0x000316ed
   30b24:	000311b1 	.word	0x000311b1
   30b28:	0003151d 	.word	0x0003151d
   30b2c:	00030a7d 	.word	0x00030a7d
   30b30:	00030a79 	.word	0x00030a79
   30b34:	20024dfc 	.word	0x20024dfc

00030b38 <rpc_transport_rx_handle>:
   30b38:	b160      	cbz	r0, 30b54 <rpc_transport_rx_handle+0x1c>
   30b3a:	b508      	push	{r3, lr}
   30b3c:	6843      	ldr	r3, [r0, #4]
   30b3e:	b2db      	uxtb	r3, r3
   30b40:	2b02      	cmp	r3, #2
   30b42:	d00e      	beq.n	30b62 <rpc_transport_rx_handle+0x2a>
   30b44:	6803      	ldr	r3, [r0, #0]
   30b46:	0c1b      	lsrs	r3, r3, #16
   30b48:	2b02      	cmp	r3, #2
   30b4a:	d005      	beq.n	30b58 <rpc_transport_rx_handle+0x20>
   30b4c:	2b04      	cmp	r3, #4
   30b4e:	d00e      	beq.n	30b6e <rpc_transport_rx_handle+0x36>
   30b50:	2000      	movs	r0, #0
   30b52:	bd08      	pop	{r3, pc}
   30b54:	2000      	movs	r0, #0
   30b56:	4770      	bx	lr
   30b58:	6880      	ldr	r0, [r0, #8]
   30b5a:	f7fe fb5f 	bl	2f21c <nrf_shared_free>
   30b5e:	2000      	movs	r0, #0
   30b60:	bd08      	pop	{r3, pc}
   30b62:	4601      	mov	r1, r0
   30b64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   30b68:	4803      	ldr	r0, [pc, #12]	; (30b78 <rpc_transport_rx_handle+0x40>)
   30b6a:	f003 bec5 	b.w	348f8 <rpc_transport_input>
   30b6e:	4802      	ldr	r0, [pc, #8]	; (30b78 <rpc_transport_rx_handle+0x40>)
   30b70:	f004 f830 	bl	34bd4 <rpc_transport_unregister>
   30b74:	2000      	movs	r0, #0
   30b76:	bd08      	pop	{r3, pc}
   30b78:	20024dfc 	.word	0x20024dfc

00030b7c <rpc_transport_ipc_shutdown>:
   30b7c:	b508      	push	{r3, lr}
   30b7e:	f000 fdbf 	bl	31700 <rpc_transport_ipc_tx_suspend>
   30b82:	f000 fb4b 	bl	3121c <rpc_transport_ipc_rx_suspend>
   30b86:	f000 fdc1 	bl	3170c <rpc_transport_ipc_tx_shutdown>
   30b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   30b8e:	f000 bb65 	b.w	3125c <rpc_transport_ipc_rx_shutdown>
   30b92:	bf00      	nop

00030b94 <rpc_transport_ipc_rx_init>:
   30b94:	2800      	cmp	r0, #0
   30b96:	f000 80ff 	beq.w	30d98 <rpc_transport_ipc_rx_init+0x204>
   30b9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30b9e:	6805      	ldr	r5, [r0, #0]
   30ba0:	b095      	sub	sp, #84	; 0x54
   30ba2:	2d00      	cmp	r5, #0
   30ba4:	f000 80ee 	beq.w	30d84 <rpc_transport_ipc_rx_init+0x1f0>
   30ba8:	6883      	ldr	r3, [r0, #8]
   30baa:	2b00      	cmp	r3, #0
   30bac:	f000 80ea 	beq.w	30d84 <rpc_transport_ipc_rx_init+0x1f0>
   30bb0:	6907      	ldr	r7, [r0, #16]
   30bb2:	2f00      	cmp	r7, #0
   30bb4:	f000 80e6 	beq.w	30d84 <rpc_transport_ipc_rx_init+0x1f0>
   30bb8:	6a84      	ldr	r4, [r0, #40]	; 0x28
   30bba:	2c00      	cmp	r4, #0
   30bbc:	f000 80e2 	beq.w	30d84 <rpc_transport_ipc_rx_init+0x1f0>
   30bc0:	6844      	ldr	r4, [r0, #4]
   30bc2:	2c1b      	cmp	r4, #27
   30bc4:	f240 80e3 	bls.w	30d8e <rpc_transport_ipc_rx_init+0x1fa>
   30bc8:	68c4      	ldr	r4, [r0, #12]
   30bca:	2c0b      	cmp	r4, #11
   30bcc:	f240 80df 	bls.w	30d8e <rpc_transport_ipc_rx_init+0x1fa>
   30bd0:	f8d0 e014 	ldr.w	lr, [r0, #20]
   30bd4:	f1be 0f17 	cmp.w	lr, #23
   30bd8:	f240 80d9 	bls.w	30d8e <rpc_transport_ipc_rx_init+0x1fa>
   30bdc:	2600      	movs	r6, #0
   30bde:	4604      	mov	r4, r0
   30be0:	486f      	ldr	r0, [pc, #444]	; (30da0 <rpc_transport_ipc_rx_init+0x20c>)
   30be2:	e9cd 1200 	strd	r1, r2, [sp]
   30be6:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 30dc0 <rpc_transport_ipc_rx_init+0x22c>
   30bea:	496e      	ldr	r1, [pc, #440]	; (30da4 <rpc_transport_ipc_rx_init+0x210>)
   30bec:	8006      	strh	r6, [r0, #0]
   30bee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   30bf0:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 30dc4 <rpc_transport_ipc_rx_init+0x230>
   30bf4:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 30dc8 <rpc_transport_ipc_rx_init+0x234>
   30bf8:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 30dcc <rpc_transport_ipc_rx_init+0x238>
   30bfc:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 30dd0 <rpc_transport_ipc_rx_init+0x23c>
   30c00:	4672      	mov	r2, lr
   30c02:	600e      	str	r6, [r1, #0]
   30c04:	f8ca 0000 	str.w	r0, [sl]
   30c08:	4631      	mov	r1, r6
   30c0a:	4638      	mov	r0, r7
   30c0c:	f8cc 6000 	str.w	r6, [ip]
   30c10:	f8cb 3000 	str.w	r3, [fp]
   30c14:	f8c8 6000 	str.w	r6, [r8]
   30c18:	f8c9 6000 	str.w	r6, [r9]
   30c1c:	f00e f875 	bl	3ed0a <memset>
   30c20:	69e3      	ldr	r3, [r4, #28]
   30c22:	4638      	mov	r0, r7
   30c24:	603b      	str	r3, [r7, #0]
   30c26:	69a3      	ldr	r3, [r4, #24]
   30c28:	607b      	str	r3, [r7, #4]
   30c2a:	f7ff fcc9 	bl	305c0 <ipc_trace_init>
   30c2e:	2201      	movs	r2, #1
   30c30:	f04f 0c04 	mov.w	ip, #4
   30c34:	4b5c      	ldr	r3, [pc, #368]	; (30da8 <rpc_transport_ipc_rx_init+0x214>)
   30c36:	495d      	ldr	r1, [pc, #372]	; (30dac <rpc_transport_ipc_rx_init+0x218>)
   30c38:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   30c3c:	6809      	ldr	r1, [r1, #0]
   30c3e:	2080      	movs	r0, #128	; 0x80
   30c40:	9104      	str	r1, [sp, #16]
   30c42:	495b      	ldr	r1, [pc, #364]	; (30db0 <rpc_transport_ipc_rx_init+0x21c>)
   30c44:	f8dd e010 	ldr.w	lr, [sp, #16]
   30c48:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   30c4c:	6809      	ldr	r1, [r1, #0]
   30c4e:	702e      	strb	r6, [r5, #0]
   30c50:	9103      	str	r1, [sp, #12]
   30c52:	706e      	strb	r6, [r5, #1]
   30c54:	70ee      	strb	r6, [r5, #3]
   30c56:	70aa      	strb	r2, [r5, #2]
   30c58:	9903      	ldr	r1, [sp, #12]
   30c5a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   30c5c:	f8db e000 	ldr.w	lr, [fp]
   30c60:	6069      	str	r1, [r5, #4]
   30c62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   30c64:	9c01      	ldr	r4, [sp, #4]
   30c66:	60a9      	str	r1, [r5, #8]
   30c68:	60ec      	str	r4, [r5, #12]
   30c6a:	9c00      	ldr	r4, [sp, #0]
   30c6c:	4951      	ldr	r1, [pc, #324]	; (30db4 <rpc_transport_ipc_rx_init+0x220>)
   30c6e:	61af      	str	r7, [r5, #24]
   30c70:	f8c5 e014 	str.w	lr, [r5, #20]
   30c74:	612c      	str	r4, [r5, #16]
   30c76:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   30c7a:	680c      	ldr	r4, [r1, #0]
   30c7c:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   30c80:	9405      	str	r4, [sp, #20]
   30c82:	9c05      	ldr	r4, [sp, #20]
   30c84:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   30c88:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   30c8c:	f44f 6780 	mov.w	r7, #1024	; 0x400
   30c90:	9406      	str	r4, [sp, #24]
   30c92:	9c06      	ldr	r4, [sp, #24]
   30c94:	2410      	movs	r4, #16
   30c96:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   30c9a:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   30c9e:	4d46      	ldr	r5, [pc, #280]	; (30db8 <rpc_transport_ipc_rx_init+0x224>)
   30ca0:	9407      	str	r4, [sp, #28]
   30ca2:	9c07      	ldr	r4, [sp, #28]
   30ca4:	2440      	movs	r4, #64	; 0x40
   30ca6:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   30caa:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   30cae:	9408      	str	r4, [sp, #32]
   30cb0:	9c08      	ldr	r4, [sp, #32]
   30cb2:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   30cb6:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   30cba:	9009      	str	r0, [sp, #36]	; 0x24
   30cbc:	9809      	ldr	r0, [sp, #36]	; 0x24
   30cbe:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   30cc2:	6808      	ldr	r0, [r1, #0]
   30cc4:	900a      	str	r0, [sp, #40]	; 0x28
   30cc6:	980a      	ldr	r0, [sp, #40]	; 0x28
   30cc8:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   30ccc:	6888      	ldr	r0, [r1, #8]
   30cce:	900b      	str	r0, [sp, #44]	; 0x2c
   30cd0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   30cd2:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   30cd6:	6908      	ldr	r0, [r1, #16]
   30cd8:	900c      	str	r0, [sp, #48]	; 0x30
   30cda:	980c      	ldr	r0, [sp, #48]	; 0x30
   30cdc:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   30ce0:	6988      	ldr	r0, [r1, #24]
   30ce2:	900d      	str	r0, [sp, #52]	; 0x34
   30ce4:	980d      	ldr	r0, [sp, #52]	; 0x34
   30ce6:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   30cea:	69c8      	ldr	r0, [r1, #28]
   30cec:	f501 7101 	add.w	r1, r1, #516	; 0x204
   30cf0:	900e      	str	r0, [sp, #56]	; 0x38
   30cf2:	980e      	ldr	r0, [sp, #56]	; 0x38
   30cf4:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   30cf8:	4310      	orrs	r0, r2
   30cfa:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   30cfe:	680c      	ldr	r4, [r1, #0]
   30d00:	482e      	ldr	r0, [pc, #184]	; (30dbc <rpc_transport_ipc_rx_init+0x228>)
   30d02:	940f      	str	r4, [sp, #60]	; 0x3c
   30d04:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   30d06:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   30d0a:	ea44 040c 	orr.w	r4, r4, ip
   30d0e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   30d12:	680c      	ldr	r4, [r1, #0]
   30d14:	9410      	str	r4, [sp, #64]	; 0x40
   30d16:	9c10      	ldr	r4, [sp, #64]	; 0x40
   30d18:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   30d1c:	f044 0410 	orr.w	r4, r4, #16
   30d20:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   30d24:	680c      	ldr	r4, [r1, #0]
   30d26:	9411      	str	r4, [sp, #68]	; 0x44
   30d28:	9c11      	ldr	r4, [sp, #68]	; 0x44
   30d2a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   30d2e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   30d32:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   30d36:	680c      	ldr	r4, [r1, #0]
   30d38:	9412      	str	r4, [sp, #72]	; 0x48
   30d3a:	9c12      	ldr	r4, [sp, #72]	; 0x48
   30d3c:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   30d40:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   30d44:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   30d48:	f8da 3000 	ldr.w	r3, [sl]
   30d4c:	6809      	ldr	r1, [r1, #0]
   30d4e:	015b      	lsls	r3, r3, #5
   30d50:	9113      	str	r1, [sp, #76]	; 0x4c
   30d52:	b2db      	uxtb	r3, r3
   30d54:	9913      	ldr	r1, [sp, #76]	; 0x4c
   30d56:	f8c8 2000 	str.w	r2, [r8]
   30d5a:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   30d5e:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   30d62:	6047      	str	r7, [r0, #4]
   30d64:	9602      	str	r6, [sp, #8]
   30d66:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   30d6a:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   30d6e:	9302      	str	r3, [sp, #8]
   30d70:	9b02      	ldr	r3, [sp, #8]
   30d72:	f8d8 3000 	ldr.w	r3, [r8]
   30d76:	2b01      	cmp	r3, #1
   30d78:	d0fb      	beq.n	30d72 <rpc_transport_ipc_rx_init+0x1de>
   30d7a:	f8d9 0000 	ldr.w	r0, [r9]
   30d7e:	b015      	add	sp, #84	; 0x54
   30d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d84:	f24c 000e 	movw	r0, #49166	; 0xc00e
   30d88:	b015      	add	sp, #84	; 0x54
   30d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d8e:	f24c 0009 	movw	r0, #49161	; 0xc009
   30d92:	b015      	add	sp, #84	; 0x54
   30d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d98:	f24c 000e 	movw	r0, #49166	; 0xc00e
   30d9c:	4770      	bx	lr
   30d9e:	bf00      	nop
   30da0:	20029494 	.word	0x20029494
   30da4:	20024e0c 	.word	0x20024e0c
   30da8:	4002a000 	.word	0x4002a000
   30dac:	4002a610 	.word	0x4002a610
   30db0:	4002a614 	.word	0x4002a614
   30db4:	4002a590 	.word	0x4002a590
   30db8:	40005000 	.word	0x40005000
   30dbc:	e000e100 	.word	0xe000e100
   30dc0:	20024e04 	.word	0x20024e04
   30dc4:	20024e10 	.word	0x20024e10
   30dc8:	20024e08 	.word	0x20024e08
   30dcc:	20024e14 	.word	0x20024e14
   30dd0:	20024e00 	.word	0x20024e00

00030dd4 <IPC_IRQHandler>:
   30dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30dd8:	f44f 6580 	mov.w	r5, #1024	; 0x400
   30ddc:	4ca7      	ldr	r4, [pc, #668]	; (3107c <IPC_IRQHandler+0x2a8>)
   30dde:	b087      	sub	sp, #28
   30de0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   30de4:	f3bf 8f4f 	dsb	sy
   30de8:	f3bf 8f6f 	isb	sy
   30dec:	4ea4      	ldr	r6, [pc, #656]	; (31080 <IPC_IRQHandler+0x2ac>)
   30dee:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   30df2:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   30df6:	061f      	lsls	r7, r3, #24
   30df8:	f100 80c8 	bmi.w	30f8c <IPC_IRQHandler+0x1b8>
   30dfc:	4ba0      	ldr	r3, [pc, #640]	; (31080 <IPC_IRQHandler+0x2ac>)
   30dfe:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   30e02:	07d0      	lsls	r0, r2, #31
   30e04:	f100 80d4 	bmi.w	30fb0 <IPC_IRQHandler+0x1dc>
   30e08:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   30e0c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   30e10:	f040 80b6 	bne.w	30f80 <IPC_IRQHandler+0x1ac>
   30e14:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   30e18:	0749      	lsls	r1, r1, #29
   30e1a:	f100 80e6 	bmi.w	30fea <IPC_IRQHandler+0x216>
   30e1e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   30e22:	06da      	lsls	r2, r3, #27
   30e24:	f140 809d 	bpl.w	30f62 <IPC_IRQHandler+0x18e>
   30e28:	2100      	movs	r1, #0
   30e2a:	4a95      	ldr	r2, [pc, #596]	; (31080 <IPC_IRQHandler+0x2ac>)
   30e2c:	4b95      	ldr	r3, [pc, #596]	; (31084 <IPC_IRQHandler+0x2b0>)
   30e2e:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   30e32:	681b      	ldr	r3, [r3, #0]
   30e34:	9304      	str	r3, [sp, #16]
   30e36:	9b04      	ldr	r3, [sp, #16]
   30e38:	f8df 8270 	ldr.w	r8, [pc, #624]	; 310ac <IPC_IRQHandler+0x2d8>
   30e3c:	4f92      	ldr	r7, [pc, #584]	; (31088 <IPC_IRQHandler+0x2b4>)
   30e3e:	f8df 9270 	ldr.w	r9, [pc, #624]	; 310b0 <IPC_IRQHandler+0x2dc>
   30e42:	f8d8 a000 	ldr.w	sl, [r8]
   30e46:	f8da 1000 	ldr.w	r1, [sl]
   30e4a:	2900      	cmp	r1, #0
   30e4c:	d03f      	beq.n	30ece <IPC_IRQHandler+0xfa>
   30e4e:	2200      	movs	r2, #0
   30e50:	4614      	mov	r4, r2
   30e52:	e002      	b.n	30e5a <IPC_IRQHandler+0x86>
   30e54:	3401      	adds	r4, #1
   30e56:	428c      	cmp	r4, r1
   30e58:	d227      	bcs.n	30eaa <IPC_IRQHandler+0xd6>
   30e5a:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   30e5e:	68ab      	ldr	r3, [r5, #8]
   30e60:	2b00      	cmp	r3, #0
   30e62:	d0f7      	beq.n	30e54 <IPC_IRQHandler+0x80>
   30e64:	686e      	ldr	r6, [r5, #4]
   30e66:	b2f6      	uxtb	r6, r6
   30e68:	2e01      	cmp	r6, #1
   30e6a:	d1f3      	bne.n	30e54 <IPC_IRQHandler+0x80>
   30e6c:	6868      	ldr	r0, [r5, #4]
   30e6e:	f8b9 3000 	ldrh.w	r3, [r9]
   30e72:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   30e76:	d1ed      	bne.n	30e54 <IPC_IRQHandler+0x80>
   30e78:	686a      	ldr	r2, [r5, #4]
   30e7a:	3301      	adds	r3, #1
   30e7c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   30e80:	f042 0202 	orr.w	r2, r2, #2
   30e84:	606a      	str	r2, [r5, #4]
   30e86:	68a8      	ldr	r0, [r5, #8]
   30e88:	f8a9 3000 	strh.w	r3, [r9]
   30e8c:	f7ff fe54 	bl	30b38 <rpc_transport_rx_handle>
   30e90:	4632      	mov	r2, r6
   30e92:	b928      	cbnz	r0, 30ea0 <IPC_IRQHandler+0xcc>
   30e94:	686b      	ldr	r3, [r5, #4]
   30e96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   30e9a:	f043 0303 	orr.w	r3, r3, #3
   30e9e:	606b      	str	r3, [r5, #4]
   30ea0:	f8da 1000 	ldr.w	r1, [sl]
   30ea4:	3401      	adds	r4, #1
   30ea6:	428c      	cmp	r4, r1
   30ea8:	d3d7      	bcc.n	30e5a <IPC_IRQHandler+0x86>
   30eaa:	2a00      	cmp	r2, #0
   30eac:	d1cd      	bne.n	30e4a <IPC_IRQHandler+0x76>
   30eae:	b171      	cbz	r1, 30ece <IPC_IRQHandler+0xfa>
   30eb0:	4613      	mov	r3, r2
   30eb2:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   30eb6:	6890      	ldr	r0, [r2, #8]
   30eb8:	3301      	adds	r3, #1
   30eba:	b130      	cbz	r0, 30eca <IPC_IRQHandler+0xf6>
   30ebc:	f8d2 b004 	ldr.w	fp, [r2, #4]
   30ec0:	fa5f fb8b 	uxtb.w	fp, fp
   30ec4:	f1bb 0f01 	cmp.w	fp, #1
   30ec8:	d003      	beq.n	30ed2 <IPC_IRQHandler+0xfe>
   30eca:	428b      	cmp	r3, r1
   30ecc:	d1f1      	bne.n	30eb2 <IPC_IRQHandler+0xde>
   30ece:	f04f 0b00 	mov.w	fp, #0
   30ed2:	f8d7 a000 	ldr.w	sl, [r7]
   30ed6:	f8da 2000 	ldr.w	r2, [sl]
   30eda:	2a00      	cmp	r2, #0
   30edc:	d03d      	beq.n	30f5a <IPC_IRQHandler+0x186>
   30ede:	2100      	movs	r1, #0
   30ee0:	460c      	mov	r4, r1
   30ee2:	e002      	b.n	30eea <IPC_IRQHandler+0x116>
   30ee4:	3401      	adds	r4, #1
   30ee6:	4294      	cmp	r4, r2
   30ee8:	d227      	bcs.n	30f3a <IPC_IRQHandler+0x166>
   30eea:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   30eee:	68ab      	ldr	r3, [r5, #8]
   30ef0:	2b00      	cmp	r3, #0
   30ef2:	d0f7      	beq.n	30ee4 <IPC_IRQHandler+0x110>
   30ef4:	686e      	ldr	r6, [r5, #4]
   30ef6:	b2f6      	uxtb	r6, r6
   30ef8:	2e01      	cmp	r6, #1
   30efa:	d1f3      	bne.n	30ee4 <IPC_IRQHandler+0x110>
   30efc:	6868      	ldr	r0, [r5, #4]
   30efe:	f8b9 3000 	ldrh.w	r3, [r9]
   30f02:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   30f06:	d1ed      	bne.n	30ee4 <IPC_IRQHandler+0x110>
   30f08:	686a      	ldr	r2, [r5, #4]
   30f0a:	3301      	adds	r3, #1
   30f0c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   30f10:	f042 0202 	orr.w	r2, r2, #2
   30f14:	606a      	str	r2, [r5, #4]
   30f16:	68a8      	ldr	r0, [r5, #8]
   30f18:	f8a9 3000 	strh.w	r3, [r9]
   30f1c:	f7ff fe0c 	bl	30b38 <rpc_transport_rx_handle>
   30f20:	4631      	mov	r1, r6
   30f22:	b928      	cbnz	r0, 30f30 <IPC_IRQHandler+0x15c>
   30f24:	686a      	ldr	r2, [r5, #4]
   30f26:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   30f2a:	f043 0303 	orr.w	r3, r3, #3
   30f2e:	606b      	str	r3, [r5, #4]
   30f30:	f8da 2000 	ldr.w	r2, [sl]
   30f34:	3401      	adds	r4, #1
   30f36:	4294      	cmp	r4, r2
   30f38:	d3d7      	bcc.n	30eea <IPC_IRQHandler+0x116>
   30f3a:	2900      	cmp	r1, #0
   30f3c:	d1cd      	bne.n	30eda <IPC_IRQHandler+0x106>
   30f3e:	b162      	cbz	r2, 30f5a <IPC_IRQHandler+0x186>
   30f40:	460b      	mov	r3, r1
   30f42:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   30f46:	6888      	ldr	r0, [r1, #8]
   30f48:	3301      	adds	r3, #1
   30f4a:	b120      	cbz	r0, 30f56 <IPC_IRQHandler+0x182>
   30f4c:	6849      	ldr	r1, [r1, #4]
   30f4e:	b2c9      	uxtb	r1, r1
   30f50:	2901      	cmp	r1, #1
   30f52:	f43f af76 	beq.w	30e42 <IPC_IRQHandler+0x6e>
   30f56:	4293      	cmp	r3, r2
   30f58:	d1f3      	bne.n	30f42 <IPC_IRQHandler+0x16e>
   30f5a:	f1bb 0f00 	cmp.w	fp, #0
   30f5e:	f47f af70 	bne.w	30e42 <IPC_IRQHandler+0x6e>
   30f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
   30f66:	4b49      	ldr	r3, [pc, #292]	; (3108c <IPC_IRQHandler+0x2b8>)
   30f68:	4a44      	ldr	r2, [pc, #272]	; (3107c <IPC_IRQHandler+0x2a8>)
   30f6a:	681b      	ldr	r3, [r3, #0]
   30f6c:	015b      	lsls	r3, r3, #5
   30f6e:	b2db      	uxtb	r3, r3
   30f70:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   30f74:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   30f78:	6051      	str	r1, [r2, #4]
   30f7a:	b007      	add	sp, #28
   30f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30f80:	2206      	movs	r2, #6
   30f82:	4b43      	ldr	r3, [pc, #268]	; (31090 <IPC_IRQHandler+0x2bc>)
   30f84:	601a      	str	r2, [r3, #0]
   30f86:	b007      	add	sp, #28
   30f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30f8c:	f7ff fc00 	bl	30790 <ipc_trace_handle>
   30f90:	f7ff fd6c 	bl	30a6c <rpc_trace_coredump_in_progress>
   30f94:	2800      	cmp	r0, #0
   30f96:	d149      	bne.n	3102c <IPC_IRQHandler+0x258>
   30f98:	4b3e      	ldr	r3, [pc, #248]	; (31094 <IPC_IRQHandler+0x2c0>)
   30f9a:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   30f9e:	681b      	ldr	r3, [r3, #0]
   30fa0:	9301      	str	r3, [sp, #4]
   30fa2:	9b01      	ldr	r3, [sp, #4]
   30fa4:	4b36      	ldr	r3, [pc, #216]	; (31080 <IPC_IRQHandler+0x2ac>)
   30fa6:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   30faa:	07d0      	lsls	r0, r2, #31
   30fac:	f57f af2c 	bpl.w	30e08 <IPC_IRQHandler+0x34>
   30fb0:	2000      	movs	r0, #0
   30fb2:	f248 0202 	movw	r2, #32770	; 0x8002
   30fb6:	4938      	ldr	r1, [pc, #224]	; (31098 <IPC_IRQHandler+0x2c4>)
   30fb8:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   30fbc:	6809      	ldr	r1, [r1, #0]
   30fbe:	9102      	str	r1, [sp, #8]
   30fc0:	9902      	ldr	r1, [sp, #8]
   30fc2:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   30fc6:	4293      	cmp	r3, r2
   30fc8:	d040      	beq.n	3104c <IPC_IRQHandler+0x278>
   30fca:	d81e      	bhi.n	3100a <IPC_IRQHandler+0x236>
   30fcc:	2b00      	cmp	r3, #0
   30fce:	d04f      	beq.n	31070 <IPC_IRQHandler+0x29c>
   30fd0:	2b02      	cmp	r3, #2
   30fd2:	d942      	bls.n	3105a <IPC_IRQHandler+0x286>
   30fd4:	f248 0201 	movw	r2, #32769	; 0x8001
   30fd8:	4293      	cmp	r3, r2
   30fda:	d149      	bne.n	31070 <IPC_IRQHandler+0x29c>
   30fdc:	2003      	movs	r0, #3
   30fde:	2207      	movs	r2, #7
   30fe0:	492b      	ldr	r1, [pc, #172]	; (31090 <IPC_IRQHandler+0x2bc>)
   30fe2:	4b2e      	ldr	r3, [pc, #184]	; (3109c <IPC_IRQHandler+0x2c8>)
   30fe4:	6008      	str	r0, [r1, #0]
   30fe6:	601a      	str	r2, [r3, #0]
   30fe8:	e7cd      	b.n	30f86 <IPC_IRQHandler+0x1b2>
   30fea:	4d29      	ldr	r5, [pc, #164]	; (31090 <IPC_IRQHandler+0x2bc>)
   30fec:	6829      	ldr	r1, [r5, #0]
   30fee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   30ff2:	2901      	cmp	r1, #1
   30ff4:	492a      	ldr	r1, [pc, #168]	; (310a0 <IPC_IRQHandler+0x2cc>)
   30ff6:	d05d      	beq.n	310b4 <IPC_IRQHandler+0x2e0>
   30ff8:	680a      	ldr	r2, [r1, #0]
   30ffa:	9203      	str	r2, [sp, #12]
   30ffc:	9a03      	ldr	r2, [sp, #12]
   30ffe:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   31002:	06db      	lsls	r3, r3, #27
   31004:	f53f af10 	bmi.w	30e28 <IPC_IRQHandler+0x54>
   31008:	e716      	b.n	30e38 <IPC_IRQHandler+0x64>
   3100a:	4a26      	ldr	r2, [pc, #152]	; (310a4 <IPC_IRQHandler+0x2d0>)
   3100c:	4293      	cmp	r3, r2
   3100e:	d814      	bhi.n	3103a <IPC_IRQHandler+0x266>
   31010:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   31014:	d814      	bhi.n	31040 <IPC_IRQHandler+0x26c>
   31016:	f248 0203 	movw	r2, #32771	; 0x8003
   3101a:	4293      	cmp	r3, r2
   3101c:	d128      	bne.n	31070 <IPC_IRQHandler+0x29c>
   3101e:	2003      	movs	r0, #3
   31020:	2204      	movs	r2, #4
   31022:	491b      	ldr	r1, [pc, #108]	; (31090 <IPC_IRQHandler+0x2bc>)
   31024:	4b1d      	ldr	r3, [pc, #116]	; (3109c <IPC_IRQHandler+0x2c8>)
   31026:	6008      	str	r0, [r1, #0]
   31028:	601a      	str	r2, [r3, #0]
   3102a:	e7ac      	b.n	30f86 <IPC_IRQHandler+0x1b2>
   3102c:	23e0      	movs	r3, #224	; 0xe0
   3102e:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   31032:	6065      	str	r5, [r4, #4]
   31034:	b007      	add	sp, #28
   31036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3103a:	4a1b      	ldr	r2, [pc, #108]	; (310a8 <IPC_IRQHandler+0x2d4>)
   3103c:	4293      	cmp	r3, r2
   3103e:	d117      	bne.n	31070 <IPC_IRQHandler+0x29c>
   31040:	2003      	movs	r0, #3
   31042:	4913      	ldr	r1, [pc, #76]	; (31090 <IPC_IRQHandler+0x2bc>)
   31044:	4a15      	ldr	r2, [pc, #84]	; (3109c <IPC_IRQHandler+0x2c8>)
   31046:	6008      	str	r0, [r1, #0]
   31048:	6013      	str	r3, [r2, #0]
   3104a:	e79c      	b.n	30f86 <IPC_IRQHandler+0x1b2>
   3104c:	2003      	movs	r0, #3
   3104e:	2206      	movs	r2, #6
   31050:	490f      	ldr	r1, [pc, #60]	; (31090 <IPC_IRQHandler+0x2bc>)
   31052:	4b12      	ldr	r3, [pc, #72]	; (3109c <IPC_IRQHandler+0x2c8>)
   31054:	6008      	str	r0, [r1, #0]
   31056:	601a      	str	r2, [r3, #0]
   31058:	e795      	b.n	30f86 <IPC_IRQHandler+0x1b2>
   3105a:	2303      	movs	r3, #3
   3105c:	4618      	mov	r0, r3
   3105e:	490c      	ldr	r1, [pc, #48]	; (31090 <IPC_IRQHandler+0x2bc>)
   31060:	4a0e      	ldr	r2, [pc, #56]	; (3109c <IPC_IRQHandler+0x2c8>)
   31062:	600b      	str	r3, [r1, #0]
   31064:	6013      	str	r3, [r2, #0]
   31066:	b007      	add	sp, #28
   31068:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3106c:	f7ff b906 	b.w	3027c <rpc_transport_ipc_fault_handler>
   31070:	2303      	movs	r3, #3
   31072:	4907      	ldr	r1, [pc, #28]	; (31090 <IPC_IRQHandler+0x2bc>)
   31074:	4a09      	ldr	r2, [pc, #36]	; (3109c <IPC_IRQHandler+0x2c8>)
   31076:	600b      	str	r3, [r1, #0]
   31078:	6013      	str	r3, [r2, #0]
   3107a:	e784      	b.n	30f86 <IPC_IRQHandler+0x1b2>
   3107c:	e000e100 	.word	0xe000e100
   31080:	4002a000 	.word	0x4002a000
   31084:	4002a110 	.word	0x4002a110
   31088:	20024e0c 	.word	0x20024e0c
   3108c:	20024e04 	.word	0x20024e04
   31090:	20024e08 	.word	0x20024e08
   31094:	4002a11c 	.word	0x4002a11c
   31098:	4002a100 	.word	0x4002a100
   3109c:	20024e00 	.word	0x20024e00
   310a0:	4002a108 	.word	0x4002a108
   310a4:	04400004 	.word	0x04400004
   310a8:	05500001 	.word	0x05500001
   310ac:	20024e10 	.word	0x20024e10
   310b0:	20029494 	.word	0x20029494
   310b4:	4a37      	ldr	r2, [pc, #220]	; (31194 <IPC_IRQHandler+0x3c0>)
   310b6:	680b      	ldr	r3, [r1, #0]
   310b8:	6812      	ldr	r2, [r2, #0]
   310ba:	9305      	str	r3, [sp, #20]
   310bc:	6893      	ldr	r3, [r2, #8]
   310be:	4836      	ldr	r0, [pc, #216]	; (31198 <IPC_IRQHandler+0x3c4>)
   310c0:	4936      	ldr	r1, [pc, #216]	; (3119c <IPC_IRQHandler+0x3c8>)
   310c2:	6003      	str	r3, [r0, #0]
   310c4:	6854      	ldr	r4, [r2, #4]
   310c6:	9a05      	ldr	r2, [sp, #20]
   310c8:	600c      	str	r4, [r1, #0]
   310ca:	b16b      	cbz	r3, 310e8 <IPC_IRQHandler+0x314>
   310cc:	b164      	cbz	r4, 310e8 <IPC_IRQHandler+0x314>
   310ce:	681b      	ldr	r3, [r3, #0]
   310d0:	2b10      	cmp	r3, #16
   310d2:	d802      	bhi.n	310da <IPC_IRQHandler+0x306>
   310d4:	6822      	ldr	r2, [r4, #0]
   310d6:	2a10      	cmp	r2, #16
   310d8:	d90c      	bls.n	310f4 <IPC_IRQHandler+0x320>
   310da:	2103      	movs	r1, #3
   310dc:	f24c 0206 	movw	r2, #49158	; 0xc006
   310e0:	4b2f      	ldr	r3, [pc, #188]	; (311a0 <IPC_IRQHandler+0x3cc>)
   310e2:	6029      	str	r1, [r5, #0]
   310e4:	601a      	str	r2, [r3, #0]
   310e6:	e74e      	b.n	30f86 <IPC_IRQHandler+0x1b2>
   310e8:	2103      	movs	r1, #3
   310ea:	2210      	movs	r2, #16
   310ec:	4b2c      	ldr	r3, [pc, #176]	; (311a0 <IPC_IRQHandler+0x3cc>)
   310ee:	6029      	str	r1, [r5, #0]
   310f0:	601a      	str	r2, [r3, #0]
   310f2:	e748      	b.n	30f86 <IPC_IRQHandler+0x1b2>
   310f4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 311ac <IPC_IRQHandler+0x3d8>
   310f8:	2a00      	cmp	r2, #0
   310fa:	d042      	beq.n	31182 <IPC_IRQHandler+0x3ae>
   310fc:	2300      	movs	r3, #0
   310fe:	f104 0904 	add.w	r9, r4, #4
   31102:	461e      	mov	r6, r3
   31104:	e002      	b.n	3110c <IPC_IRQHandler+0x338>
   31106:	3601      	adds	r6, #1
   31108:	4296      	cmp	r6, r2
   3110a:	d22a      	bcs.n	31162 <IPC_IRQHandler+0x38e>
   3110c:	00f7      	lsls	r7, r6, #3
   3110e:	19e1      	adds	r1, r4, r7
   31110:	6888      	ldr	r0, [r1, #8]
   31112:	2800      	cmp	r0, #0
   31114:	d0f7      	beq.n	31106 <IPC_IRQHandler+0x332>
   31116:	f8d1 a004 	ldr.w	sl, [r1, #4]
   3111a:	fa5f fa8a 	uxtb.w	sl, sl
   3111e:	f1ba 0f01 	cmp.w	sl, #1
   31122:	d1f0      	bne.n	31106 <IPC_IRQHandler+0x332>
   31124:	f8d1 c004 	ldr.w	ip, [r1, #4]
   31128:	f8b8 0000 	ldrh.w	r0, [r8]
   3112c:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   31130:	d1e9      	bne.n	31106 <IPC_IRQHandler+0x332>
   31132:	684b      	ldr	r3, [r1, #4]
   31134:	1c42      	adds	r2, r0, #1
   31136:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3113a:	f043 0302 	orr.w	r3, r3, #2
   3113e:	604b      	str	r3, [r1, #4]
   31140:	6888      	ldr	r0, [r1, #8]
   31142:	f8a8 2000 	strh.w	r2, [r8]
   31146:	f7ff fcf7 	bl	30b38 <rpc_transport_rx_handle>
   3114a:	4653      	mov	r3, sl
   3114c:	b938      	cbnz	r0, 3115e <IPC_IRQHandler+0x38a>
   3114e:	f859 2007 	ldr.w	r2, [r9, r7]
   31152:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   31156:	f042 0203 	orr.w	r2, r2, #3
   3115a:	f849 2007 	str.w	r2, [r9, r7]
   3115e:	6822      	ldr	r2, [r4, #0]
   31160:	e7d1      	b.n	31106 <IPC_IRQHandler+0x332>
   31162:	2b00      	cmp	r3, #0
   31164:	d1c8      	bne.n	310f8 <IPC_IRQHandler+0x324>
   31166:	b912      	cbnz	r2, 3116e <IPC_IRQHandler+0x39a>
   31168:	e00b      	b.n	31182 <IPC_IRQHandler+0x3ae>
   3116a:	4293      	cmp	r3, r2
   3116c:	d009      	beq.n	31182 <IPC_IRQHandler+0x3ae>
   3116e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   31172:	6888      	ldr	r0, [r1, #8]
   31174:	3301      	adds	r3, #1
   31176:	2800      	cmp	r0, #0
   31178:	d0f7      	beq.n	3116a <IPC_IRQHandler+0x396>
   3117a:	6849      	ldr	r1, [r1, #4]
   3117c:	b2c9      	uxtb	r1, r1
   3117e:	2901      	cmp	r1, #1
   31180:	d1f3      	bne.n	3116a <IPC_IRQHandler+0x396>
   31182:	2002      	movs	r0, #2
   31184:	4b07      	ldr	r3, [pc, #28]	; (311a4 <IPC_IRQHandler+0x3d0>)
   31186:	f44f 6180 	mov.w	r1, #1024	; 0x400
   3118a:	4a07      	ldr	r2, [pc, #28]	; (311a8 <IPC_IRQHandler+0x3d4>)
   3118c:	681b      	ldr	r3, [r3, #0]
   3118e:	6028      	str	r0, [r5, #0]
   31190:	e6ec      	b.n	30f6c <IPC_IRQHandler+0x198>
   31192:	bf00      	nop
   31194:	20024e14 	.word	0x20024e14
   31198:	20024e10 	.word	0x20024e10
   3119c:	20024e0c 	.word	0x20024e0c
   311a0:	20024e00 	.word	0x20024e00
   311a4:	20024e04 	.word	0x20024e04
   311a8:	e000e100 	.word	0xe000e100
   311ac:	20029494 	.word	0x20029494

000311b0 <rpc_transport_msg_free>:
   311b0:	b430      	push	{r4, r5}
   311b2:	4b18      	ldr	r3, [pc, #96]	; (31214 <rpc_transport_msg_free+0x64>)
   311b4:	681c      	ldr	r4, [r3, #0]
   311b6:	6825      	ldr	r5, [r4, #0]
   311b8:	b16d      	cbz	r5, 311d6 <rpc_transport_msg_free+0x26>
   311ba:	68a3      	ldr	r3, [r4, #8]
   311bc:	4283      	cmp	r3, r0
   311be:	d027      	beq.n	31210 <rpc_transport_msg_free+0x60>
   311c0:	2300      	movs	r3, #0
   311c2:	e002      	b.n	311ca <rpc_transport_msg_free+0x1a>
   311c4:	6889      	ldr	r1, [r1, #8]
   311c6:	4281      	cmp	r1, r0
   311c8:	d019      	beq.n	311fe <rpc_transport_msg_free+0x4e>
   311ca:	3301      	adds	r3, #1
   311cc:	00da      	lsls	r2, r3, #3
   311ce:	42ab      	cmp	r3, r5
   311d0:	eb04 0102 	add.w	r1, r4, r2
   311d4:	d1f6      	bne.n	311c4 <rpc_transport_msg_free+0x14>
   311d6:	4b10      	ldr	r3, [pc, #64]	; (31218 <rpc_transport_msg_free+0x68>)
   311d8:	681c      	ldr	r4, [r3, #0]
   311da:	6825      	ldr	r5, [r4, #0]
   311dc:	b16d      	cbz	r5, 311fa <rpc_transport_msg_free+0x4a>
   311de:	68a3      	ldr	r3, [r4, #8]
   311e0:	4283      	cmp	r3, r0
   311e2:	d015      	beq.n	31210 <rpc_transport_msg_free+0x60>
   311e4:	2300      	movs	r3, #0
   311e6:	e002      	b.n	311ee <rpc_transport_msg_free+0x3e>
   311e8:	6889      	ldr	r1, [r1, #8]
   311ea:	4281      	cmp	r1, r0
   311ec:	d007      	beq.n	311fe <rpc_transport_msg_free+0x4e>
   311ee:	3301      	adds	r3, #1
   311f0:	00da      	lsls	r2, r3, #3
   311f2:	429d      	cmp	r5, r3
   311f4:	eb04 0102 	add.w	r1, r4, r2
   311f8:	d1f6      	bne.n	311e8 <rpc_transport_msg_free+0x38>
   311fa:	bc30      	pop	{r4, r5}
   311fc:	4770      	bx	lr
   311fe:	3204      	adds	r2, #4
   31200:	58a3      	ldr	r3, [r4, r2]
   31202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   31206:	f043 0303 	orr.w	r3, r3, #3
   3120a:	50a3      	str	r3, [r4, r2]
   3120c:	bc30      	pop	{r4, r5}
   3120e:	4770      	bx	lr
   31210:	2204      	movs	r2, #4
   31212:	e7f5      	b.n	31200 <rpc_transport_msg_free+0x50>
   31214:	20024e10 	.word	0x20024e10
   31218:	20024e0c 	.word	0x20024e0c

0003121c <rpc_transport_ipc_rx_suspend>:
   3121c:	b410      	push	{r4}
   3121e:	2400      	movs	r4, #0
   31220:	2010      	movs	r0, #16
   31222:	2204      	movs	r2, #4
   31224:	4b0a      	ldr	r3, [pc, #40]	; (31250 <rpc_transport_ipc_rx_suspend+0x34>)
   31226:	490b      	ldr	r1, [pc, #44]	; (31254 <rpc_transport_ipc_rx_suspend+0x38>)
   31228:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   3122c:	680c      	ldr	r4, [r1, #0]
   3122e:	b083      	sub	sp, #12
   31230:	9401      	str	r4, [sp, #4]
   31232:	9c01      	ldr	r4, [sp, #4]
   31234:	f5a1 7126 	sub.w	r1, r1, #664	; 0x298
   31238:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   3123c:	6809      	ldr	r1, [r1, #0]
   3123e:	4b06      	ldr	r3, [pc, #24]	; (31258 <rpc_transport_ipc_rx_suspend+0x3c>)
   31240:	9100      	str	r1, [sp, #0]
   31242:	9900      	ldr	r1, [sp, #0]
   31244:	601a      	str	r2, [r3, #0]
   31246:	b003      	add	sp, #12
   31248:	f85d 4b04 	ldr.w	r4, [sp], #4
   3124c:	4770      	bx	lr
   3124e:	bf00      	nop
   31250:	4002a000 	.word	0x4002a000
   31254:	4002a5a0 	.word	0x4002a5a0
   31258:	20024e08 	.word	0x20024e08

0003125c <rpc_transport_ipc_rx_shutdown>:
   3125c:	b4f0      	push	{r4, r5, r6, r7}
   3125e:	4a32      	ldr	r2, [pc, #200]	; (31328 <rpc_transport_ipc_rx_shutdown+0xcc>)
   31260:	b08c      	sub	sp, #48	; 0x30
   31262:	6813      	ldr	r3, [r2, #0]
   31264:	2b06      	cmp	r3, #6
   31266:	d1fc      	bne.n	31262 <rpc_transport_ipc_rx_shutdown+0x6>
   31268:	2000      	movs	r0, #0
   3126a:	2201      	movs	r2, #1
   3126c:	210a      	movs	r1, #10
   3126e:	4b2f      	ldr	r3, [pc, #188]	; (3132c <rpc_transport_ipc_rx_shutdown+0xd0>)
   31270:	9000      	str	r0, [sp, #0]
   31272:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
   31276:	f8d3 0610 	ldr.w	r0, [r3, #1552]	; 0x610
   3127a:	9000      	str	r0, [sp, #0]
   3127c:	9800      	ldr	r0, [sp, #0]
   3127e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   31282:	9101      	str	r1, [sp, #4]
   31284:	9b01      	ldr	r3, [sp, #4]
   31286:	b12b      	cbz	r3, 31294 <rpc_transport_ipc_rx_shutdown+0x38>
   31288:	9b01      	ldr	r3, [sp, #4]
   3128a:	3b01      	subs	r3, #1
   3128c:	9301      	str	r3, [sp, #4]
   3128e:	9b01      	ldr	r3, [sp, #4]
   31290:	2b00      	cmp	r3, #0
   31292:	d1f9      	bne.n	31288 <rpc_transport_ipc_rx_shutdown+0x2c>
   31294:	2200      	movs	r2, #0
   31296:	2601      	movs	r6, #1
   31298:	2504      	movs	r5, #4
   3129a:	2410      	movs	r4, #16
   3129c:	4923      	ldr	r1, [pc, #140]	; (3132c <rpc_transport_ipc_rx_shutdown+0xd0>)
   3129e:	4b24      	ldr	r3, [pc, #144]	; (31330 <rpc_transport_ipc_rx_shutdown+0xd4>)
   312a0:	f8c1 2614 	str.w	r2, [r1, #1556]	; 0x614
   312a4:	f501 3115 	add.w	r1, r1, #152576	; 0x25400
   312a8:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   312ac:	f501 71c8 	add.w	r1, r1, #400	; 0x190
   312b0:	6809      	ldr	r1, [r1, #0]
   312b2:	2040      	movs	r0, #64	; 0x40
   312b4:	9102      	str	r1, [sp, #8]
   312b6:	491f      	ldr	r1, [pc, #124]	; (31334 <rpc_transport_ipc_rx_shutdown+0xd8>)
   312b8:	9f02      	ldr	r7, [sp, #8]
   312ba:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   312be:	680f      	ldr	r7, [r1, #0]
   312c0:	2180      	movs	r1, #128	; 0x80
   312c2:	9703      	str	r7, [sp, #12]
   312c4:	4f1c      	ldr	r7, [pc, #112]	; (31338 <rpc_transport_ipc_rx_shutdown+0xdc>)
   312c6:	f8dd c00c 	ldr.w	ip, [sp, #12]
   312ca:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   312ce:	683f      	ldr	r7, [r7, #0]
   312d0:	9704      	str	r7, [sp, #16]
   312d2:	4f1a      	ldr	r7, [pc, #104]	; (3133c <rpc_transport_ipc_rx_shutdown+0xe0>)
   312d4:	f8dd c010 	ldr.w	ip, [sp, #16]
   312d8:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   312dc:	683f      	ldr	r7, [r7, #0]
   312de:	9705      	str	r7, [sp, #20]
   312e0:	9f05      	ldr	r7, [sp, #20]
   312e2:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   312e6:	4a16      	ldr	r2, [pc, #88]	; (31340 <rpc_transport_ipc_rx_shutdown+0xe4>)
   312e8:	6812      	ldr	r2, [r2, #0]
   312ea:	9206      	str	r2, [sp, #24]
   312ec:	4a15      	ldr	r2, [pc, #84]	; (31344 <rpc_transport_ipc_rx_shutdown+0xe8>)
   312ee:	9f06      	ldr	r7, [sp, #24]
   312f0:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   312f4:	6816      	ldr	r6, [r2, #0]
   312f6:	9607      	str	r6, [sp, #28]
   312f8:	9e07      	ldr	r6, [sp, #28]
   312fa:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   312fe:	6815      	ldr	r5, [r2, #0]
   31300:	9508      	str	r5, [sp, #32]
   31302:	9d08      	ldr	r5, [sp, #32]
   31304:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
   31308:	6814      	ldr	r4, [r2, #0]
   3130a:	9409      	str	r4, [sp, #36]	; 0x24
   3130c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   3130e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   31312:	6810      	ldr	r0, [r2, #0]
   31314:	900a      	str	r0, [sp, #40]	; 0x28
   31316:	980a      	ldr	r0, [sp, #40]	; 0x28
   31318:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
   3131c:	6813      	ldr	r3, [r2, #0]
   3131e:	930b      	str	r3, [sp, #44]	; 0x2c
   31320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   31322:	b00c      	add	sp, #48	; 0x30
   31324:	bcf0      	pop	{r4, r5, r6, r7}
   31326:	4770      	bx	lr
   31328:	20024e08 	.word	0x20024e08
   3132c:	40005000 	.word	0x40005000
   31330:	4002a000 	.word	0x4002a000
   31334:	4002a598 	.word	0x4002a598
   31338:	4002a5a0 	.word	0x4002a5a0
   3133c:	4002a5a8 	.word	0x4002a5a8
   31340:	4002a5ac 	.word	0x4002a5ac
   31344:	4002a308 	.word	0x4002a308

00031348 <rpc_transport_ipc_tx_init>:
   31348:	2800      	cmp	r0, #0
   3134a:	f000 80b8 	beq.w	314be <rpc_transport_ipc_tx_init+0x176>
   3134e:	2900      	cmp	r1, #0
   31350:	f000 80b5 	beq.w	314be <rpc_transport_ipc_tx_init+0x176>
   31354:	2a00      	cmp	r2, #0
   31356:	f000 80b2 	beq.w	314be <rpc_transport_ipc_tx_init+0x176>
   3135a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3135e:	6a04      	ldr	r4, [r0, #32]
   31360:	b085      	sub	sp, #20
   31362:	2c00      	cmp	r4, #0
   31364:	f000 80a6 	beq.w	314b4 <rpc_transport_ipc_tx_init+0x16c>
   31368:	6a40      	ldr	r0, [r0, #36]	; 0x24
   3136a:	2800      	cmp	r0, #0
   3136c:	f000 80a2 	beq.w	314b4 <rpc_transport_ipc_tx_init+0x16c>
   31370:	f642 4587 	movw	r5, #11399	; 0x2c87
   31374:	f04f 0a00 	mov.w	sl, #0
   31378:	4e55      	ldr	r6, [pc, #340]	; (314d0 <rpc_transport_ipc_tx_init+0x188>)
   3137a:	42a8      	cmp	r0, r5
   3137c:	f886 a000 	strb.w	sl, [r6]
   31380:	f240 80a0 	bls.w	314c4 <rpc_transport_ipc_tx_init+0x17c>
   31384:	2708      	movs	r7, #8
   31386:	f8df 9180 	ldr.w	r9, [pc, #384]	; 31508 <rpc_transport_ipc_tx_init+0x1c0>
   3138a:	4620      	mov	r0, r4
   3138c:	4616      	mov	r6, r2
   3138e:	460d      	mov	r5, r1
   31390:	2244      	movs	r2, #68	; 0x44
   31392:	4651      	mov	r1, sl
   31394:	f8c9 4000 	str.w	r4, [r9]
   31398:	f00d fcb7 	bl	3ed0a <memset>
   3139c:	f8d9 2000 	ldr.w	r2, [r9]
   313a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   313a4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 3150c <rpc_transport_ipc_tx_init+0x1c4>
   313a8:	f882 a001 	strb.w	sl, [r2, #1]
   313ac:	f882 a002 	strb.w	sl, [r2, #2]
   313b0:	f882 a003 	strb.w	sl, [r2, #3]
   313b4:	7017      	strb	r7, [r2, #0]
   313b6:	4618      	mov	r0, r3
   313b8:	2244      	movs	r2, #68	; 0x44
   313ba:	4651      	mov	r1, sl
   313bc:	f8c8 3000 	str.w	r3, [r8]
   313c0:	f00d fca3 	bl	3ed0a <memset>
   313c4:	f8d8 2000 	ldr.w	r2, [r8]
   313c8:	f104 0388 	add.w	r3, r4, #136	; 0x88
   313cc:	f8df b140 	ldr.w	fp, [pc, #320]	; 31510 <rpc_transport_ipc_tx_init+0x1c8>
   313d0:	7017      	strb	r7, [r2, #0]
   313d2:	f882 a001 	strb.w	sl, [r2, #1]
   313d6:	f882 a002 	strb.w	sl, [r2, #2]
   313da:	f882 a003 	strb.w	sl, [r2, #3]
   313de:	4618      	mov	r0, r3
   313e0:	f44f 7200 	mov.w	r2, #512	; 0x200
   313e4:	4651      	mov	r1, sl
   313e6:	f8cb 3000 	str.w	r3, [fp]
   313ea:	f00d fc8e 	bl	3ed0a <memset>
   313ee:	4b39      	ldr	r3, [pc, #228]	; (314d4 <rpc_transport_ipc_tx_init+0x18c>)
   313f0:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   313f4:	f8c3 c000 	str.w	ip, [r3]
   313f8:	4651      	mov	r1, sl
   313fa:	4660      	mov	r0, ip
   313fc:	f44f 7200 	mov.w	r2, #512	; 0x200
   31400:	f00d fc83 	bl	3ed0a <memset>
   31404:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   31408:	2106      	movs	r1, #6
   3140a:	f04f 0e01 	mov.w	lr, #1
   3140e:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   31412:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   31416:	4b30      	ldr	r3, [pc, #192]	; (314d8 <rpc_transport_ipc_tx_init+0x190>)
   31418:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   3141c:	605c      	str	r4, [r3, #4]
   3141e:	4c2f      	ldr	r4, [pc, #188]	; (314dc <rpc_transport_ipc_tx_init+0x194>)
   31420:	f8c3 c008 	str.w	ip, [r3, #8]
   31424:	8199      	strh	r1, [r3, #12]
   31426:	f8a3 e000 	strh.w	lr, [r3]
   3142a:	4619      	mov	r1, r3
   3142c:	611c      	str	r4, [r3, #16]
   3142e:	4b2c      	ldr	r3, [pc, #176]	; (314e0 <rpc_transport_ipc_tx_init+0x198>)
   31430:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 31514 <rpc_transport_ipc_tx_init+0x1cc>
   31434:	6120      	str	r0, [r4, #16]
   31436:	482b      	ldr	r0, [pc, #172]	; (314e4 <rpc_transport_ipc_tx_init+0x19c>)
   31438:	6063      	str	r3, [r4, #4]
   3143a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   3143e:	60a0      	str	r0, [r4, #8]
   31440:	f8c4 c000 	str.w	ip, [r4]
   31444:	4828      	ldr	r0, [pc, #160]	; (314e8 <rpc_transport_ipc_tx_init+0x1a0>)
   31446:	60e3      	str	r3, [r4, #12]
   31448:	6162      	str	r2, [r4, #20]
   3144a:	f7fd fdad 	bl	2efa8 <nrf_mem_register>
   3144e:	2800      	cmp	r0, #0
   31450:	d132      	bne.n	314b8 <rpc_transport_ipc_tx_init+0x170>
   31452:	f04f 0c02 	mov.w	ip, #2
   31456:	2420      	movs	r4, #32
   31458:	f8d9 1000 	ldr.w	r1, [r9]
   3145c:	f8db 2000 	ldr.w	r2, [fp]
   31460:	6029      	str	r1, [r5, #0]
   31462:	4b1c      	ldr	r3, [pc, #112]	; (314d4 <rpc_transport_ipc_tx_init+0x18c>)
   31464:	f8d8 1000 	ldr.w	r1, [r8]
   31468:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 31518 <rpc_transport_ipc_tx_init+0x1d0>
   3146c:	4d1f      	ldr	r5, [pc, #124]	; (314ec <rpc_transport_ipc_tx_init+0x1a4>)
   3146e:	6031      	str	r1, [r6, #0]
   31470:	f8ce 2000 	str.w	r2, [lr]
   31474:	681b      	ldr	r3, [r3, #0]
   31476:	491e      	ldr	r1, [pc, #120]	; (314f0 <rpc_transport_ipc_tx_init+0x1a8>)
   31478:	f502 7200 	add.w	r2, r2, #512	; 0x200
   3147c:	602a      	str	r2, [r5, #0]
   3147e:	4e1d      	ldr	r6, [pc, #116]	; (314f4 <rpc_transport_ipc_tx_init+0x1ac>)
   31480:	4a1d      	ldr	r2, [pc, #116]	; (314f8 <rpc_transport_ipc_tx_init+0x1b0>)
   31482:	4d1e      	ldr	r5, [pc, #120]	; (314fc <rpc_transport_ipc_tx_init+0x1b4>)
   31484:	600b      	str	r3, [r1, #0]
   31486:	f503 7300 	add.w	r3, r3, #512	; 0x200
   3148a:	491d      	ldr	r1, [pc, #116]	; (31500 <rpc_transport_ipc_tx_init+0x1b8>)
   3148c:	6033      	str	r3, [r6, #0]
   3148e:	8028      	strh	r0, [r5, #0]
   31490:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   31494:	6809      	ldr	r1, [r1, #0]
   31496:	4b1b      	ldr	r3, [pc, #108]	; (31504 <rpc_transport_ipc_tx_init+0x1bc>)
   31498:	9103      	str	r1, [sp, #12]
   3149a:	9903      	ldr	r1, [sp, #12]
   3149c:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   314a0:	6819      	ldr	r1, [r3, #0]
   314a2:	443b      	add	r3, r7
   314a4:	9102      	str	r1, [sp, #8]
   314a6:	9902      	ldr	r1, [sp, #8]
   314a8:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   314ac:	681b      	ldr	r3, [r3, #0]
   314ae:	9301      	str	r3, [sp, #4]
   314b0:	9b01      	ldr	r3, [sp, #4]
   314b2:	e001      	b.n	314b8 <rpc_transport_ipc_tx_init+0x170>
   314b4:	f24c 0007 	movw	r0, #49159	; 0xc007
   314b8:	b005      	add	sp, #20
   314ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   314be:	f24c 000e 	movw	r0, #49166	; 0xc00e
   314c2:	4770      	bx	lr
   314c4:	f24c 0004 	movw	r0, #49156	; 0xc004
   314c8:	b005      	add	sp, #20
   314ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   314ce:	bf00      	nop
   314d0:	2002b9c9 	.word	0x2002b9c9
   314d4:	20024e40 	.word	0x20024e40
   314d8:	20024e2c 	.word	0x20024e2c
   314dc:	20024e50 	.word	0x20024e50
   314e0:	00040080 	.word	0x00040080
   314e4:	00040100 	.word	0x00040100
   314e8:	20024e18 	.word	0x20024e18
   314ec:	20024e24 	.word	0x20024e24
   314f0:	20024e20 	.word	0x20024e20
   314f4:	20024e1c 	.word	0x20024e1c
   314f8:	4002a000 	.word	0x4002a000
   314fc:	20029496 	.word	0x20029496
   31500:	4002a514 	.word	0x4002a514
   31504:	4002a51c 	.word	0x4002a51c
   31508:	20024e4c 	.word	0x20024e4c
   3150c:	20024e44 	.word	0x20024e44
   31510:	20024e48 	.word	0x20024e48
   31514:	00080040 	.word	0x00080040
   31518:	20024e28 	.word	0x20024e28

0003151c <rpc_transport_ipc_tx_send>:
   3151c:	2800      	cmp	r0, #0
   3151e:	d05f      	beq.n	315e0 <rpc_transport_ipc_tx_send+0xc4>
   31520:	b470      	push	{r4, r5, r6}
   31522:	4b33      	ldr	r3, [pc, #204]	; (315f0 <rpc_transport_ipc_tx_send+0xd4>)
   31524:	b083      	sub	sp, #12
   31526:	681a      	ldr	r2, [r3, #0]
   31528:	4b32      	ldr	r3, [pc, #200]	; (315f4 <rpc_transport_ipc_tx_send+0xd8>)
   3152a:	4282      	cmp	r2, r0
   3152c:	d81e      	bhi.n	3156c <rpc_transport_ipc_tx_send+0x50>
   3152e:	681b      	ldr	r3, [r3, #0]
   31530:	4931      	ldr	r1, [pc, #196]	; (315f8 <rpc_transport_ipc_tx_send+0xdc>)
   31532:	4283      	cmp	r3, r0
   31534:	6809      	ldr	r1, [r1, #0]
   31536:	d803      	bhi.n	31540 <rpc_transport_ipc_tx_send+0x24>
   31538:	4c30      	ldr	r4, [pc, #192]	; (315fc <rpc_transport_ipc_tx_send+0xe0>)
   3153a:	6824      	ldr	r4, [r4, #0]
   3153c:	4284      	cmp	r4, r0
   3153e:	d847      	bhi.n	315d0 <rpc_transport_ipc_tx_send+0xb4>
   31540:	4281      	cmp	r1, r0
   31542:	d90e      	bls.n	31562 <rpc_transport_ipc_tx_send+0x46>
   31544:	4b2e      	ldr	r3, [pc, #184]	; (31600 <rpc_transport_ipc_tx_send+0xe4>)
   31546:	781b      	ldrb	r3, [r3, #0]
   31548:	2b00      	cmp	r3, #0
   3154a:	d14c      	bne.n	315e6 <rpc_transport_ipc_tx_send+0xca>
   3154c:	1a83      	subs	r3, r0, r2
   3154e:	492d      	ldr	r1, [pc, #180]	; (31604 <rpc_transport_ipc_tx_send+0xe8>)
   31550:	099e      	lsrs	r6, r3, #6
   31552:	069b      	lsls	r3, r3, #26
   31554:	680a      	ldr	r2, [r1, #0]
   31556:	4c2c      	ldr	r4, [pc, #176]	; (31608 <rpc_transport_ipc_tx_send+0xec>)
   31558:	f04f 0103 	mov.w	r1, #3
   3155c:	f04f 0502 	mov.w	r5, #2
   31560:	d014      	beq.n	3158c <rpc_transport_ipc_tx_send+0x70>
   31562:	f24c 0010 	movw	r0, #49168	; 0xc010
   31566:	b003      	add	sp, #12
   31568:	bc70      	pop	{r4, r5, r6}
   3156a:	4770      	bx	lr
   3156c:	681b      	ldr	r3, [r3, #0]
   3156e:	4298      	cmp	r0, r3
   31570:	d3f7      	bcc.n	31562 <rpc_transport_ipc_tx_send+0x46>
   31572:	4a22      	ldr	r2, [pc, #136]	; (315fc <rpc_transport_ipc_tx_send+0xe0>)
   31574:	6812      	ldr	r2, [r2, #0]
   31576:	4290      	cmp	r0, r2
   31578:	d2f3      	bcs.n	31562 <rpc_transport_ipc_tx_send+0x46>
   3157a:	2101      	movs	r1, #1
   3157c:	1ac3      	subs	r3, r0, r3
   3157e:	4a23      	ldr	r2, [pc, #140]	; (3160c <rpc_transport_ipc_tx_send+0xf0>)
   31580:	099e      	lsrs	r6, r3, #6
   31582:	069b      	lsls	r3, r3, #26
   31584:	460d      	mov	r5, r1
   31586:	6812      	ldr	r2, [r2, #0]
   31588:	4c21      	ldr	r4, [pc, #132]	; (31610 <rpc_transport_ipc_tx_send+0xf4>)
   3158a:	d1ea      	bne.n	31562 <rpc_transport_ipc_tx_send+0x46>
   3158c:	6843      	ldr	r3, [r0, #4]
   3158e:	b2db      	uxtb	r3, r3
   31590:	429d      	cmp	r5, r3
   31592:	d120      	bne.n	315d6 <rpc_transport_ipc_tx_send+0xba>
   31594:	2020      	movs	r0, #32
   31596:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   3159a:	4d1e      	ldr	r5, [pc, #120]	; (31614 <rpc_transport_ipc_tx_send+0xf8>)
   3159c:	6853      	ldr	r3, [r2, #4]
   3159e:	882e      	ldrh	r6, [r5, #0]
   315a0:	b29b      	uxth	r3, r3
   315a2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   315a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   315aa:	f043 0301 	orr.w	r3, r3, #1
   315ae:	6053      	str	r3, [r2, #4]
   315b0:	bf00      	nop
   315b2:	3801      	subs	r0, #1
   315b4:	d1fc      	bne.n	315b0 <rpc_transport_ipc_tx_send+0x94>
   315b6:	2201      	movs	r2, #1
   315b8:	4b17      	ldr	r3, [pc, #92]	; (31618 <rpc_transport_ipc_tx_send+0xfc>)
   315ba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   315be:	6822      	ldr	r2, [r4, #0]
   315c0:	882b      	ldrh	r3, [r5, #0]
   315c2:	9201      	str	r2, [sp, #4]
   315c4:	9a01      	ldr	r2, [sp, #4]
   315c6:	3301      	adds	r3, #1
   315c8:	802b      	strh	r3, [r5, #0]
   315ca:	b003      	add	sp, #12
   315cc:	bc70      	pop	{r4, r5, r6}
   315ce:	4770      	bx	lr
   315d0:	4281      	cmp	r1, r0
   315d2:	d9d2      	bls.n	3157a <rpc_transport_ipc_tx_send+0x5e>
   315d4:	e7b6      	b.n	31544 <rpc_transport_ipc_tx_send+0x28>
   315d6:	f24c 0007 	movw	r0, #49159	; 0xc007
   315da:	b003      	add	sp, #12
   315dc:	bc70      	pop	{r4, r5, r6}
   315de:	4770      	bx	lr
   315e0:	f24c 000e 	movw	r0, #49166	; 0xc00e
   315e4:	4770      	bx	lr
   315e6:	f24c 000f 	movw	r0, #49167	; 0xc00f
   315ea:	b003      	add	sp, #12
   315ec:	bc70      	pop	{r4, r5, r6}
   315ee:	4770      	bx	lr
   315f0:	20024e28 	.word	0x20024e28
   315f4:	20024e20 	.word	0x20024e20
   315f8:	20024e24 	.word	0x20024e24
   315fc:	20024e1c 	.word	0x20024e1c
   31600:	2002b9c9 	.word	0x2002b9c9
   31604:	20024e4c 	.word	0x20024e4c
   31608:	4002a00c 	.word	0x4002a00c
   3160c:	20024e44 	.word	0x20024e44
   31610:	4002a004 	.word	0x4002a004
   31614:	20029496 	.word	0x20029496
   31618:	4002a000 	.word	0x4002a000

0003161c <rpc_transport_ipc_tx_rpc_data_alloc>:
   3161c:	4b18      	ldr	r3, [pc, #96]	; (31680 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   3161e:	781b      	ldrb	r3, [r3, #0]
   31620:	bb63      	cbnz	r3, 3167c <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   31622:	b4f0      	push	{r4, r5, r6, r7}
   31624:	4a17      	ldr	r2, [pc, #92]	; (31684 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   31626:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   3162a:	6814      	ldr	r4, [r2, #0]
   3162c:	4b16      	ldr	r3, [pc, #88]	; (31688 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   3162e:	6825      	ldr	r5, [r4, #0]
   31630:	681e      	ldr	r6, [r3, #0]
   31632:	b1a5      	cbz	r5, 3165e <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   31634:	4607      	mov	r7, r0
   31636:	00c1      	lsls	r1, r0, #3
   31638:	1863      	adds	r3, r4, r1
   3163a:	685a      	ldr	r2, [r3, #4]
   3163c:	b2d2      	uxtb	r2, r2
   3163e:	2a03      	cmp	r2, #3
   31640:	d104      	bne.n	3164c <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   31642:	609f      	str	r7, [r3, #8]
   31644:	685a      	ldr	r2, [r3, #4]
   31646:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   3164a:	605a      	str	r2, [r3, #4]
   3164c:	685a      	ldr	r2, [r3, #4]
   3164e:	f012 0fff 	tst.w	r2, #255	; 0xff
   31652:	d101      	bne.n	31658 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   31654:	689b      	ldr	r3, [r3, #8]
   31656:	b12b      	cbz	r3, 31664 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   31658:	3001      	adds	r0, #1
   3165a:	42a8      	cmp	r0, r5
   3165c:	d1eb      	bne.n	31636 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   3165e:	2000      	movs	r0, #0
   31660:	bcf0      	pop	{r4, r5, r6, r7}
   31662:	4770      	bx	lr
   31664:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   31668:	4421      	add	r1, r4
   3166a:	6088      	str	r0, [r1, #8]
   3166c:	6843      	ldr	r3, [r0, #4]
   3166e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   31672:	f043 0302 	orr.w	r3, r3, #2
   31676:	6043      	str	r3, [r0, #4]
   31678:	bcf0      	pop	{r4, r5, r6, r7}
   3167a:	4770      	bx	lr
   3167c:	2000      	movs	r0, #0
   3167e:	4770      	bx	lr
   31680:	2002b9c9 	.word	0x2002b9c9
   31684:	20024e4c 	.word	0x20024e4c
   31688:	20024e48 	.word	0x20024e48

0003168c <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   3168c:	b4f0      	push	{r4, r5, r6, r7}
   3168e:	4a15      	ldr	r2, [pc, #84]	; (316e4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   31690:	4b15      	ldr	r3, [pc, #84]	; (316e8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   31692:	6814      	ldr	r4, [r2, #0]
   31694:	681e      	ldr	r6, [r3, #0]
   31696:	6825      	ldr	r5, [r4, #0]
   31698:	b1ad      	cbz	r5, 316c6 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   3169a:	2000      	movs	r0, #0
   3169c:	4607      	mov	r7, r0
   3169e:	00c1      	lsls	r1, r0, #3
   316a0:	1863      	adds	r3, r4, r1
   316a2:	685a      	ldr	r2, [r3, #4]
   316a4:	b2d2      	uxtb	r2, r2
   316a6:	2a03      	cmp	r2, #3
   316a8:	d104      	bne.n	316b4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   316aa:	609f      	str	r7, [r3, #8]
   316ac:	685a      	ldr	r2, [r3, #4]
   316ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   316b2:	605a      	str	r2, [r3, #4]
   316b4:	685a      	ldr	r2, [r3, #4]
   316b6:	f012 0fff 	tst.w	r2, #255	; 0xff
   316ba:	d101      	bne.n	316c0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   316bc:	689b      	ldr	r3, [r3, #8]
   316be:	b12b      	cbz	r3, 316cc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   316c0:	3001      	adds	r0, #1
   316c2:	4285      	cmp	r5, r0
   316c4:	d1eb      	bne.n	3169e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   316c6:	2000      	movs	r0, #0
   316c8:	bcf0      	pop	{r4, r5, r6, r7}
   316ca:	4770      	bx	lr
   316cc:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   316d0:	4421      	add	r1, r4
   316d2:	6088      	str	r0, [r1, #8]
   316d4:	6843      	ldr	r3, [r0, #4]
   316d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   316da:	f043 0301 	orr.w	r3, r3, #1
   316de:	6043      	str	r3, [r0, #4]
   316e0:	bcf0      	pop	{r4, r5, r6, r7}
   316e2:	4770      	bx	lr
   316e4:	20024e44 	.word	0x20024e44
   316e8:	20024e40 	.word	0x20024e40

000316ec <rpc_transport_ipc_tx_data_alloc>:
   316ec:	4b03      	ldr	r3, [pc, #12]	; (316fc <rpc_transport_ipc_tx_data_alloc+0x10>)
   316ee:	781b      	ldrb	r3, [r3, #0]
   316f0:	b90b      	cbnz	r3, 316f6 <rpc_transport_ipc_tx_data_alloc+0xa>
   316f2:	f7fd bd89 	b.w	2f208 <nrf_shared_malloc>
   316f6:	2000      	movs	r0, #0
   316f8:	4770      	bx	lr
   316fa:	bf00      	nop
   316fc:	2002b9c9 	.word	0x2002b9c9

00031700 <rpc_transport_ipc_tx_suspend>:
   31700:	2201      	movs	r2, #1
   31702:	4b01      	ldr	r3, [pc, #4]	; (31708 <rpc_transport_ipc_tx_suspend+0x8>)
   31704:	701a      	strb	r2, [r3, #0]
   31706:	4770      	bx	lr
   31708:	2002b9c9 	.word	0x2002b9c9

0003170c <rpc_transport_ipc_tx_shutdown>:
   3170c:	b4f0      	push	{r4, r5, r6, r7}
   3170e:	4a16      	ldr	r2, [pc, #88]	; (31768 <rpc_transport_ipc_tx_shutdown+0x5c>)
   31710:	4b16      	ldr	r3, [pc, #88]	; (3176c <rpc_transport_ipc_tx_shutdown+0x60>)
   31712:	6814      	ldr	r4, [r2, #0]
   31714:	681e      	ldr	r6, [r3, #0]
   31716:	6825      	ldr	r5, [r4, #0]
   31718:	b1ad      	cbz	r5, 31746 <rpc_transport_ipc_tx_shutdown+0x3a>
   3171a:	2200      	movs	r2, #0
   3171c:	4617      	mov	r7, r2
   3171e:	00d0      	lsls	r0, r2, #3
   31720:	1823      	adds	r3, r4, r0
   31722:	6859      	ldr	r1, [r3, #4]
   31724:	b2c9      	uxtb	r1, r1
   31726:	2903      	cmp	r1, #3
   31728:	d104      	bne.n	31734 <rpc_transport_ipc_tx_shutdown+0x28>
   3172a:	609f      	str	r7, [r3, #8]
   3172c:	6859      	ldr	r1, [r3, #4]
   3172e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   31732:	6059      	str	r1, [r3, #4]
   31734:	6859      	ldr	r1, [r3, #4]
   31736:	f011 0fff 	tst.w	r1, #255	; 0xff
   3173a:	d101      	bne.n	31740 <rpc_transport_ipc_tx_shutdown+0x34>
   3173c:	689b      	ldr	r3, [r3, #8]
   3173e:	b123      	cbz	r3, 3174a <rpc_transport_ipc_tx_shutdown+0x3e>
   31740:	3201      	adds	r2, #1
   31742:	42aa      	cmp	r2, r5
   31744:	d1eb      	bne.n	3171e <rpc_transport_ipc_tx_shutdown+0x12>
   31746:	bcf0      	pop	{r4, r5, r6, r7}
   31748:	4770      	bx	lr
   3174a:	0192      	lsls	r2, r2, #6
   3174c:	4404      	add	r4, r0
   3174e:	18b0      	adds	r0, r6, r2
   31750:	60a0      	str	r0, [r4, #8]
   31752:	6843      	ldr	r3, [r0, #4]
   31754:	4906      	ldr	r1, [pc, #24]	; (31770 <rpc_transport_ipc_tx_shutdown+0x64>)
   31756:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3175a:	f043 0301 	orr.w	r3, r3, #1
   3175e:	6043      	str	r3, [r0, #4]
   31760:	50b1      	str	r1, [r6, r2]
   31762:	bcf0      	pop	{r4, r5, r6, r7}
   31764:	f7ff beda 	b.w	3151c <rpc_transport_ipc_tx_send>
   31768:	20024e44 	.word	0x20024e44
   3176c:	20024e40 	.word	0x20024e40
   31770:	00030001 	.word	0x00030001

00031774 <ok_rsp_parser>:
   31774:	2000      	movs	r0, #0
   31776:	4770      	bx	lr

00031778 <pdn_state_get_parser>:
   31778:	2200      	movs	r2, #0
   3177a:	b570      	push	{r4, r5, r6, lr}
   3177c:	780b      	ldrb	r3, [r1, #0]
   3177e:	b084      	sub	sp, #16
   31780:	460e      	mov	r6, r1
   31782:	e9cd 2200 	strd	r2, r2, [sp]
   31786:	e9cd 2202 	strd	r2, r2, [sp, #8]
   3178a:	b323      	cbz	r3, 317d6 <pdn_state_get_parser+0x5e>
   3178c:	460c      	mov	r4, r1
   3178e:	2b20      	cmp	r3, #32
   31790:	460d      	mov	r5, r1
   31792:	d01b      	beq.n	317cc <pdn_state_get_parser+0x54>
   31794:	700b      	strb	r3, [r1, #0]
   31796:	3201      	adds	r2, #1
   31798:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   3179c:	18b1      	adds	r1, r6, r2
   3179e:	460d      	mov	r5, r1
   317a0:	2b00      	cmp	r3, #0
   317a2:	d1f4      	bne.n	3178e <pdn_state_get_parser+0x16>
   317a4:	2200      	movs	r2, #0
   317a6:	4b0d      	ldr	r3, [pc, #52]	; (317dc <pdn_state_get_parser+0x64>)
   317a8:	702a      	strb	r2, [r5, #0]
   317aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   317ae:	4a0c      	ldr	r2, [pc, #48]	; (317e0 <pdn_state_get_parser+0x68>)
   317b0:	681b      	ldr	r3, [r3, #0]
   317b2:	2110      	movs	r1, #16
   317b4:	4668      	mov	r0, sp
   317b6:	f009 f8b7 	bl	3a928 <sniprintf>
   317ba:	4669      	mov	r1, sp
   317bc:	4630      	mov	r0, r6
   317be:	f00d fcae 	bl	3f11e <strstr>
   317c2:	3000      	adds	r0, #0
   317c4:	bf18      	it	ne
   317c6:	2001      	movne	r0, #1
   317c8:	b004      	add	sp, #16
   317ca:	bd70      	pop	{r4, r5, r6, pc}
   317cc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   317d0:	2b00      	cmp	r3, #0
   317d2:	d1dc      	bne.n	3178e <pdn_state_get_parser+0x16>
   317d4:	e7e6      	b.n	317a4 <pdn_state_get_parser+0x2c>
   317d6:	460d      	mov	r5, r1
   317d8:	e7e4      	b.n	317a4 <pdn_state_get_parser+0x2c>
   317da:	bf00      	nop
   317dc:	20024f6c 	.word	0x20024f6c
   317e0:	00040f50 	.word	0x00040f50

000317e4 <pdn_id_get_parser>:
   317e4:	b570      	push	{r4, r5, r6, lr}
   317e6:	780b      	ldrb	r3, [r1, #0]
   317e8:	4606      	mov	r6, r0
   317ea:	b313      	cbz	r3, 31832 <pdn_id_get_parser+0x4e>
   317ec:	4608      	mov	r0, r1
   317ee:	2400      	movs	r4, #0
   317f0:	460a      	mov	r2, r1
   317f2:	2b20      	cmp	r3, #32
   317f4:	4615      	mov	r5, r2
   317f6:	d017      	beq.n	31828 <pdn_id_get_parser+0x44>
   317f8:	7013      	strb	r3, [r2, #0]
   317fa:	3401      	adds	r4, #1
   317fc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   31800:	190a      	adds	r2, r1, r4
   31802:	4615      	mov	r5, r2
   31804:	2b00      	cmp	r3, #0
   31806:	d1f4      	bne.n	317f2 <pdn_id_get_parser+0xe>
   31808:	2300      	movs	r3, #0
   3180a:	4608      	mov	r0, r1
   3180c:	702b      	strb	r3, [r5, #0]
   3180e:	213a      	movs	r1, #58	; 0x3a
   31810:	f00d fc23 	bl	3f05a <strchr>
   31814:	b130      	cbz	r0, 31824 <pdn_id_get_parser+0x40>
   31816:	3001      	adds	r0, #1
   31818:	f00d fa37 	bl	3ec8a <atoi>
   3181c:	4b06      	ldr	r3, [pc, #24]	; (31838 <pdn_id_get_parser+0x54>)
   3181e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   31822:	6058      	str	r0, [r3, #4]
   31824:	2000      	movs	r0, #0
   31826:	bd70      	pop	{r4, r5, r6, pc}
   31828:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   3182c:	2b00      	cmp	r3, #0
   3182e:	d1e0      	bne.n	317f2 <pdn_id_get_parser+0xe>
   31830:	e7ea      	b.n	31808 <pdn_id_get_parser+0x24>
   31832:	460d      	mov	r5, r1
   31834:	e7e8      	b.n	31808 <pdn_id_get_parser+0x24>
   31836:	bf00      	nop
   31838:	20024f6c 	.word	0x20024f6c

0003183c <context_create_parser>:
   3183c:	b570      	push	{r4, r5, r6, lr}
   3183e:	780b      	ldrb	r3, [r1, #0]
   31840:	4606      	mov	r6, r0
   31842:	b313      	cbz	r3, 3188a <context_create_parser+0x4e>
   31844:	4608      	mov	r0, r1
   31846:	2400      	movs	r4, #0
   31848:	460a      	mov	r2, r1
   3184a:	2b20      	cmp	r3, #32
   3184c:	4615      	mov	r5, r2
   3184e:	d017      	beq.n	31880 <context_create_parser+0x44>
   31850:	7013      	strb	r3, [r2, #0]
   31852:	3401      	adds	r4, #1
   31854:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   31858:	190a      	adds	r2, r1, r4
   3185a:	4615      	mov	r5, r2
   3185c:	2b00      	cmp	r3, #0
   3185e:	d1f4      	bne.n	3184a <context_create_parser+0xe>
   31860:	2300      	movs	r3, #0
   31862:	4608      	mov	r0, r1
   31864:	702b      	strb	r3, [r5, #0]
   31866:	213a      	movs	r1, #58	; 0x3a
   31868:	f00d fbf7 	bl	3f05a <strchr>
   3186c:	b130      	cbz	r0, 3187c <context_create_parser+0x40>
   3186e:	4b08      	ldr	r3, [pc, #32]	; (31890 <context_create_parser+0x54>)
   31870:	3001      	adds	r0, #1
   31872:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   31876:	f00d fa08 	bl	3ec8a <atoi>
   3187a:	6020      	str	r0, [r4, #0]
   3187c:	2000      	movs	r0, #0
   3187e:	bd70      	pop	{r4, r5, r6, pc}
   31880:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   31884:	2b00      	cmp	r3, #0
   31886:	d1e0      	bne.n	3184a <context_create_parser+0xe>
   31888:	e7ea      	b.n	31860 <context_create_parser+0x24>
   3188a:	460d      	mov	r5, r1
   3188c:	e7e8      	b.n	31860 <context_create_parser+0x24>
   3188e:	bf00      	nop
   31890:	20024f6c 	.word	0x20024f6c

00031894 <pdn_interface_init>:
   31894:	f04f 33ff 	mov.w	r3, #4294967295
   31898:	b510      	push	{r4, lr}
   3189a:	4c09      	ldr	r4, [pc, #36]	; (318c0 <pdn_interface_init+0x2c>)
   3189c:	2228      	movs	r2, #40	; 0x28
   3189e:	2100      	movs	r1, #0
   318a0:	4808      	ldr	r0, [pc, #32]	; (318c4 <pdn_interface_init+0x30>)
   318a2:	6023      	str	r3, [r4, #0]
   318a4:	f00d fa31 	bl	3ed0a <memset>
   318a8:	f240 2201 	movw	r2, #513	; 0x201
   318ac:	2100      	movs	r1, #0
   318ae:	2066      	movs	r0, #102	; 0x66
   318b0:	f7fc ff4e 	bl	2e750 <at_interface_open>
   318b4:	2800      	cmp	r0, #0
   318b6:	6020      	str	r0, [r4, #0]
   318b8:	bfb4      	ite	lt
   318ba:	2003      	movlt	r0, #3
   318bc:	2000      	movge	r0, #0
   318be:	bd10      	pop	{r4, pc}
   318c0:	20024e68 	.word	0x20024e68
   318c4:	20024f6c 	.word	0x20024f6c

000318c8 <pdn_interface_open>:
   318c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   318cc:	2866      	cmp	r0, #102	; 0x66
   318ce:	b083      	sub	sp, #12
   318d0:	f040 80bc 	bne.w	31a4c <pdn_interface_open+0x184>
   318d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   318d8:	f040 80aa 	bne.w	31a30 <pdn_interface_open+0x168>
   318dc:	f240 2302 	movw	r3, #514	; 0x202
   318e0:	429a      	cmp	r2, r3
   318e2:	f040 80a5 	bne.w	31a30 <pdn_interface_open+0x168>
   318e6:	4c62      	ldr	r4, [pc, #392]	; (31a70 <pdn_interface_open+0x1a8>)
   318e8:	6825      	ldr	r5, [r4, #0]
   318ea:	b34d      	cbz	r5, 31940 <pdn_interface_open+0x78>
   318ec:	6863      	ldr	r3, [r4, #4]
   318ee:	2b00      	cmp	r3, #0
   318f0:	f000 8098 	beq.w	31a24 <pdn_interface_open+0x15c>
   318f4:	68a3      	ldr	r3, [r4, #8]
   318f6:	2b00      	cmp	r3, #0
   318f8:	f000 8096 	beq.w	31a28 <pdn_interface_open+0x160>
   318fc:	68e3      	ldr	r3, [r4, #12]
   318fe:	2b00      	cmp	r3, #0
   31900:	f000 8094 	beq.w	31a2c <pdn_interface_open+0x164>
   31904:	6923      	ldr	r3, [r4, #16]
   31906:	2b00      	cmp	r3, #0
   31908:	f000 8098 	beq.w	31a3c <pdn_interface_open+0x174>
   3190c:	6963      	ldr	r3, [r4, #20]
   3190e:	2b00      	cmp	r3, #0
   31910:	f000 8098 	beq.w	31a44 <pdn_interface_open+0x17c>
   31914:	69a3      	ldr	r3, [r4, #24]
   31916:	2b00      	cmp	r3, #0
   31918:	f000 8096 	beq.w	31a48 <pdn_interface_open+0x180>
   3191c:	69e3      	ldr	r3, [r4, #28]
   3191e:	2b00      	cmp	r3, #0
   31920:	f000 808e 	beq.w	31a40 <pdn_interface_open+0x178>
   31924:	6a23      	ldr	r3, [r4, #32]
   31926:	b153      	cbz	r3, 3193e <pdn_interface_open+0x76>
   31928:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3192a:	2509      	movs	r5, #9
   3192c:	b143      	cbz	r3, 31940 <pdn_interface_open+0x78>
   3192e:	200c      	movs	r0, #12
   31930:	f7f5 f91e 	bl	26b70 <bsd_os_errno_set>
   31934:	f04f 30ff 	mov.w	r0, #4294967295
   31938:	b003      	add	sp, #12
   3193a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3193e:	2508      	movs	r5, #8
   31940:	2074      	movs	r0, #116	; 0x74
   31942:	f7fd fc4b 	bl	2f1dc <nrf_malloc>
   31946:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   3194a:	2800      	cmp	r0, #0
   3194c:	d0ef      	beq.n	3192e <pdn_interface_open+0x66>
   3194e:	2274      	movs	r2, #116	; 0x74
   31950:	2100      	movs	r1, #0
   31952:	f00d f9da 	bl	3ed0a <memset>
   31956:	2101      	movs	r1, #1
   31958:	2003      	movs	r0, #3
   3195a:	f04f 37ff 	mov.w	r7, #4294967295
   3195e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   31962:	4a44      	ldr	r2, [pc, #272]	; (31a74 <pdn_interface_open+0x1ac>)
   31964:	6099      	str	r1, [r3, #8]
   31966:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   3196a:	f44f 7180 	mov.w	r1, #256	; 0x100
   3196e:	6718      	str	r0, [r3, #112]	; 0x70
   31970:	605f      	str	r7, [r3, #4]
   31972:	4841      	ldr	r0, [pc, #260]	; (31a78 <pdn_interface_open+0x1b0>)
   31974:	f8df 810c 	ldr.w	r8, [pc, #268]	; 31a84 <pdn_interface_open+0x1bc>
   31978:	f008 ffd6 	bl	3a928 <sniprintf>
   3197c:	483e      	ldr	r0, [pc, #248]	; (31a78 <pdn_interface_open+0x1b0>)
   3197e:	f8d8 9000 	ldr.w	r9, [r8]
   31982:	2600      	movs	r6, #0
   31984:	f7eb fbce 	bl	1d124 <strlen>
   31988:	4633      	mov	r3, r6
   3198a:	4602      	mov	r2, r0
   3198c:	493a      	ldr	r1, [pc, #232]	; (31a78 <pdn_interface_open+0x1b0>)
   3198e:	4648      	mov	r0, r9
   31990:	9601      	str	r6, [sp, #4]
   31992:	9600      	str	r6, [sp, #0]
   31994:	f7fc fe86 	bl	2e6a4 <at_interface_write>
   31998:	4681      	mov	r9, r0
   3199a:	4837      	ldr	r0, [pc, #220]	; (31a78 <pdn_interface_open+0x1b0>)
   3199c:	f7eb fbc2 	bl	1d124 <strlen>
   319a0:	4548      	cmp	r0, r9
   319a2:	d159      	bne.n	31a58 <pdn_interface_open+0x190>
   319a4:	4633      	mov	r3, r6
   319a6:	e9cd 6600 	strd	r6, r6, [sp]
   319aa:	f44f 7280 	mov.w	r2, #256	; 0x100
   319ae:	4932      	ldr	r1, [pc, #200]	; (31a78 <pdn_interface_open+0x1b0>)
   319b0:	f8d8 0000 	ldr.w	r0, [r8]
   319b4:	f7fc ff5e 	bl	2e874 <at_interface_read>
   319b8:	4606      	mov	r6, r0
   319ba:	4830      	ldr	r0, [pc, #192]	; (31a7c <pdn_interface_open+0x1b4>)
   319bc:	f7eb fbb2 	bl	1d124 <strlen>
   319c0:	4286      	cmp	r6, r0
   319c2:	db15      	blt.n	319f0 <pdn_interface_open+0x128>
   319c4:	4602      	mov	r2, r0
   319c6:	492c      	ldr	r1, [pc, #176]	; (31a78 <pdn_interface_open+0x1b0>)
   319c8:	482c      	ldr	r0, [pc, #176]	; (31a7c <pdn_interface_open+0x1b4>)
   319ca:	f00d fb77 	bl	3f0bc <strncmp>
   319ce:	b978      	cbnz	r0, 319f0 <pdn_interface_open+0x128>
   319d0:	4929      	ldr	r1, [pc, #164]	; (31a78 <pdn_interface_open+0x1b0>)
   319d2:	4628      	mov	r0, r5
   319d4:	f7ff ff32 	bl	3183c <context_create_parser>
   319d8:	b9b0      	cbnz	r0, 31a08 <pdn_interface_open+0x140>
   319da:	2202      	movs	r2, #2
   319dc:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   319e0:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   319e4:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   319e8:	609a      	str	r2, [r3, #8]
   319ea:	b003      	add	sp, #12
   319ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   319f0:	4823      	ldr	r0, [pc, #140]	; (31a80 <pdn_interface_open+0x1b8>)
   319f2:	f7eb fb97 	bl	1d124 <strlen>
   319f6:	4920      	ldr	r1, [pc, #128]	; (31a78 <pdn_interface_open+0x1b0>)
   319f8:	4602      	mov	r2, r0
   319fa:	4821      	ldr	r0, [pc, #132]	; (31a80 <pdn_interface_open+0x1b8>)
   319fc:	f00d fb5e 	bl	3f0bc <strncmp>
   31a00:	b960      	cbnz	r0, 31a1c <pdn_interface_open+0x154>
   31a02:	2008      	movs	r0, #8
   31a04:	f7f5 f8b4 	bl	26b70 <bsd_os_errno_set>
   31a08:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   31a0c:	f7fd fbf0 	bl	2f1f0 <nrf_free>
   31a10:	2300      	movs	r3, #0
   31a12:	f04f 30ff 	mov.w	r0, #4294967295
   31a16:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   31a1a:	e78d      	b.n	31938 <pdn_interface_open+0x70>
   31a1c:	2005      	movs	r0, #5
   31a1e:	f7f5 f8a7 	bl	26b70 <bsd_os_errno_set>
   31a22:	e7f1      	b.n	31a08 <pdn_interface_open+0x140>
   31a24:	2501      	movs	r5, #1
   31a26:	e78b      	b.n	31940 <pdn_interface_open+0x78>
   31a28:	2502      	movs	r5, #2
   31a2a:	e789      	b.n	31940 <pdn_interface_open+0x78>
   31a2c:	2503      	movs	r5, #3
   31a2e:	e787      	b.n	31940 <pdn_interface_open+0x78>
   31a30:	2016      	movs	r0, #22
   31a32:	f7f5 f89d 	bl	26b70 <bsd_os_errno_set>
   31a36:	f04f 30ff 	mov.w	r0, #4294967295
   31a3a:	e77d      	b.n	31938 <pdn_interface_open+0x70>
   31a3c:	2504      	movs	r5, #4
   31a3e:	e77f      	b.n	31940 <pdn_interface_open+0x78>
   31a40:	2507      	movs	r5, #7
   31a42:	e77d      	b.n	31940 <pdn_interface_open+0x78>
   31a44:	2505      	movs	r5, #5
   31a46:	e77b      	b.n	31940 <pdn_interface_open+0x78>
   31a48:	2506      	movs	r5, #6
   31a4a:	e779      	b.n	31940 <pdn_interface_open+0x78>
   31a4c:	202f      	movs	r0, #47	; 0x2f
   31a4e:	f7f5 f88f 	bl	26b70 <bsd_os_errno_set>
   31a52:	f04f 30ff 	mov.w	r0, #4294967295
   31a56:	e76f      	b.n	31938 <pdn_interface_open+0x70>
   31a58:	2005      	movs	r0, #5
   31a5a:	f7f5 f889 	bl	26b70 <bsd_os_errno_set>
   31a5e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   31a62:	f7fd fbc5 	bl	2f1f0 <nrf_free>
   31a66:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   31a6a:	4638      	mov	r0, r7
   31a6c:	e764      	b.n	31938 <pdn_interface_open+0x70>
   31a6e:	bf00      	nop
   31a70:	20024f6c 	.word	0x20024f6c
   31a74:	00040f2c 	.word	0x00040f2c
   31a78:	20024e6c 	.word	0x20024e6c
   31a7c:	00040f3c 	.word	0x00040f3c
   31a80:	00040f48 	.word	0x00040f48
   31a84:	20024e68 	.word	0x20024e68

00031a88 <pdn_interface_connect>:
   31a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31a8c:	b083      	sub	sp, #12
   31a8e:	2900      	cmp	r1, #0
   31a90:	f000 813e 	beq.w	31d10 <pdn_interface_connect+0x288>
   31a94:	2a64      	cmp	r2, #100	; 0x64
   31a96:	4691      	mov	r9, r2
   31a98:	f200 813a 	bhi.w	31d10 <pdn_interface_connect+0x288>
   31a9c:	4605      	mov	r5, r0
   31a9e:	4608      	mov	r0, r1
   31aa0:	4688      	mov	r8, r1
   31aa2:	f7eb fb3f 	bl	1d124 <strlen>
   31aa6:	2864      	cmp	r0, #100	; 0x64
   31aa8:	f200 8132 	bhi.w	31d10 <pdn_interface_connect+0x288>
   31aac:	4ba5      	ldr	r3, [pc, #660]	; (31d44 <pdn_interface_connect+0x2bc>)
   31aae:	43ab      	bics	r3, r5
   31ab0:	f040 8125 	bne.w	31cfe <pdn_interface_connect+0x276>
   31ab4:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   31ab8:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   31abc:	2d09      	cmp	r5, #9
   31abe:	f300 811e 	bgt.w	31cfe <pdn_interface_connect+0x276>
   31ac2:	4fa1      	ldr	r7, [pc, #644]	; (31d48 <pdn_interface_connect+0x2c0>)
   31ac4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   31ac8:	2b00      	cmp	r3, #0
   31aca:	f000 8118 	beq.w	31cfe <pdn_interface_connect+0x276>
   31ace:	689a      	ldr	r2, [r3, #8]
   31ad0:	2a00      	cmp	r2, #0
   31ad2:	f000 8114 	beq.w	31cfe <pdn_interface_connect+0x276>
   31ad6:	2d00      	cmp	r5, #0
   31ad8:	f2c0 8111 	blt.w	31cfe <pdn_interface_connect+0x276>
   31adc:	689b      	ldr	r3, [r3, #8]
   31ade:	2b02      	cmp	r3, #2
   31ae0:	f040 810d 	bne.w	31cfe <pdn_interface_connect+0x276>
   31ae4:	4e99      	ldr	r6, [pc, #612]	; (31d4c <pdn_interface_connect+0x2c4>)
   31ae6:	4a9a      	ldr	r2, [pc, #616]	; (31d50 <pdn_interface_connect+0x2c8>)
   31ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
   31aec:	4630      	mov	r0, r6
   31aee:	f008 ff1b 	bl	3a928 <sniprintf>
   31af2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   31af6:	4604      	mov	r4, r0
   31af8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   31afc:	681b      	ldr	r3, [r3, #0]
   31afe:	4a95      	ldr	r2, [pc, #596]	; (31d54 <pdn_interface_connect+0x2cc>)
   31b00:	1830      	adds	r0, r6, r0
   31b02:	f008 ff11 	bl	3a928 <sniprintf>
   31b06:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   31b0a:	4404      	add	r4, r0
   31b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   31b0e:	f003 0203 	and.w	r2, r3, #3
   31b12:	2a03      	cmp	r2, #3
   31b14:	f000 80ea 	beq.w	31cec <pdn_interface_connect+0x264>
   31b18:	079b      	lsls	r3, r3, #30
   31b1a:	eb06 0004 	add.w	r0, r6, r4
   31b1e:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   31b22:	bf4c      	ite	mi
   31b24:	4b8c      	ldrmi	r3, [pc, #560]	; (31d58 <pdn_interface_connect+0x2d0>)
   31b26:	4b8d      	ldrpl	r3, [pc, #564]	; (31d5c <pdn_interface_connect+0x2d4>)
   31b28:	4a8d      	ldr	r2, [pc, #564]	; (31d60 <pdn_interface_connect+0x2d8>)
   31b2a:	f008 fefd 	bl	3a928 <sniprintf>
   31b2e:	4404      	add	r4, r0
   31b30:	4643      	mov	r3, r8
   31b32:	4a8c      	ldr	r2, [pc, #560]	; (31d64 <pdn_interface_connect+0x2dc>)
   31b34:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   31b38:	1930      	adds	r0, r6, r4
   31b3a:	f008 fef5 	bl	3a928 <sniprintf>
   31b3e:	4420      	add	r0, r4
   31b40:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   31b44:	f300 80f7 	bgt.w	31d36 <pdn_interface_connect+0x2ae>
   31b48:	f8df a238 	ldr.w	sl, [pc, #568]	; 31d84 <pdn_interface_connect+0x2fc>
   31b4c:	487f      	ldr	r0, [pc, #508]	; (31d4c <pdn_interface_connect+0x2c4>)
   31b4e:	f8da b000 	ldr.w	fp, [sl]
   31b52:	2400      	movs	r4, #0
   31b54:	f7eb fae6 	bl	1d124 <strlen>
   31b58:	4623      	mov	r3, r4
   31b5a:	4602      	mov	r2, r0
   31b5c:	497b      	ldr	r1, [pc, #492]	; (31d4c <pdn_interface_connect+0x2c4>)
   31b5e:	4658      	mov	r0, fp
   31b60:	9401      	str	r4, [sp, #4]
   31b62:	9400      	str	r4, [sp, #0]
   31b64:	f7fc fd9e 	bl	2e6a4 <at_interface_write>
   31b68:	4683      	mov	fp, r0
   31b6a:	4878      	ldr	r0, [pc, #480]	; (31d4c <pdn_interface_connect+0x2c4>)
   31b6c:	f7eb fada 	bl	1d124 <strlen>
   31b70:	4558      	cmp	r0, fp
   31b72:	d008      	beq.n	31b86 <pdn_interface_connect+0xfe>
   31b74:	2005      	movs	r0, #5
   31b76:	f7f4 fffb 	bl	26b70 <bsd_os_errno_set>
   31b7a:	f04f 34ff 	mov.w	r4, #4294967295
   31b7e:	4620      	mov	r0, r4
   31b80:	b003      	add	sp, #12
   31b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31b86:	4623      	mov	r3, r4
   31b88:	e9cd 4400 	strd	r4, r4, [sp]
   31b8c:	f44f 7280 	mov.w	r2, #256	; 0x100
   31b90:	496e      	ldr	r1, [pc, #440]	; (31d4c <pdn_interface_connect+0x2c4>)
   31b92:	f8da 0000 	ldr.w	r0, [sl]
   31b96:	f7fc fe6d 	bl	2e874 <at_interface_read>
   31b9a:	4604      	mov	r4, r0
   31b9c:	4872      	ldr	r0, [pc, #456]	; (31d68 <pdn_interface_connect+0x2e0>)
   31b9e:	f7eb fac1 	bl	1d124 <strlen>
   31ba2:	4284      	cmp	r4, r0
   31ba4:	f2c0 8091 	blt.w	31cca <pdn_interface_connect+0x242>
   31ba8:	4602      	mov	r2, r0
   31baa:	4968      	ldr	r1, [pc, #416]	; (31d4c <pdn_interface_connect+0x2c4>)
   31bac:	486e      	ldr	r0, [pc, #440]	; (31d68 <pdn_interface_connect+0x2e0>)
   31bae:	f00d fa85 	bl	3f0bc <strncmp>
   31bb2:	2800      	cmp	r0, #0
   31bb4:	f040 8089 	bne.w	31cca <pdn_interface_connect+0x242>
   31bb8:	4964      	ldr	r1, [pc, #400]	; (31d4c <pdn_interface_connect+0x2c4>)
   31bba:	4628      	mov	r0, r5
   31bbc:	f7ff fdda 	bl	31774 <ok_rsp_parser>
   31bc0:	4604      	mov	r4, r0
   31bc2:	2800      	cmp	r0, #0
   31bc4:	d1db      	bne.n	31b7e <pdn_interface_connect+0xf6>
   31bc6:	4a69      	ldr	r2, [pc, #420]	; (31d6c <pdn_interface_connect+0x2e4>)
   31bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
   31bcc:	485f      	ldr	r0, [pc, #380]	; (31d4c <pdn_interface_connect+0x2c4>)
   31bce:	f008 feab 	bl	3a928 <sniprintf>
   31bd2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   31bd6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   31bda:	681b      	ldr	r3, [r3, #0]
   31bdc:	4a64      	ldr	r2, [pc, #400]	; (31d70 <pdn_interface_connect+0x2e8>)
   31bde:	4430      	add	r0, r6
   31be0:	f008 fea2 	bl	3a928 <sniprintf>
   31be4:	4859      	ldr	r0, [pc, #356]	; (31d4c <pdn_interface_connect+0x2c4>)
   31be6:	f8da b000 	ldr.w	fp, [sl]
   31bea:	f7eb fa9b 	bl	1d124 <strlen>
   31bee:	4623      	mov	r3, r4
   31bf0:	4602      	mov	r2, r0
   31bf2:	4956      	ldr	r1, [pc, #344]	; (31d4c <pdn_interface_connect+0x2c4>)
   31bf4:	4658      	mov	r0, fp
   31bf6:	9401      	str	r4, [sp, #4]
   31bf8:	9400      	str	r4, [sp, #0]
   31bfa:	f7fc fd53 	bl	2e6a4 <at_interface_write>
   31bfe:	4683      	mov	fp, r0
   31c00:	4852      	ldr	r0, [pc, #328]	; (31d4c <pdn_interface_connect+0x2c4>)
   31c02:	f7eb fa8f 	bl	1d124 <strlen>
   31c06:	4558      	cmp	r0, fp
   31c08:	d1b4      	bne.n	31b74 <pdn_interface_connect+0xec>
   31c0a:	4623      	mov	r3, r4
   31c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
   31c10:	494e      	ldr	r1, [pc, #312]	; (31d4c <pdn_interface_connect+0x2c4>)
   31c12:	f8da 0000 	ldr.w	r0, [sl]
   31c16:	e9cd 4400 	strd	r4, r4, [sp]
   31c1a:	f7fc fe2b 	bl	2e874 <at_interface_read>
   31c1e:	4683      	mov	fp, r0
   31c20:	4851      	ldr	r0, [pc, #324]	; (31d68 <pdn_interface_connect+0x2e0>)
   31c22:	f7eb fa7f 	bl	1d124 <strlen>
   31c26:	4583      	cmp	fp, r0
   31c28:	db4f      	blt.n	31cca <pdn_interface_connect+0x242>
   31c2a:	4602      	mov	r2, r0
   31c2c:	4947      	ldr	r1, [pc, #284]	; (31d4c <pdn_interface_connect+0x2c4>)
   31c2e:	484e      	ldr	r0, [pc, #312]	; (31d68 <pdn_interface_connect+0x2e0>)
   31c30:	f00d fa44 	bl	3f0bc <strncmp>
   31c34:	2800      	cmp	r0, #0
   31c36:	d148      	bne.n	31cca <pdn_interface_connect+0x242>
   31c38:	2103      	movs	r1, #3
   31c3a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   31c3e:	464a      	mov	r2, r9
   31c40:	6099      	str	r1, [r3, #8]
   31c42:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   31c46:	4641      	mov	r1, r8
   31c48:	300c      	adds	r0, #12
   31c4a:	f00d f83e 	bl	3ecca <memcpy>
   31c4e:	4a49      	ldr	r2, [pc, #292]	; (31d74 <pdn_interface_connect+0x2ec>)
   31c50:	f44f 7180 	mov.w	r1, #256	; 0x100
   31c54:	483d      	ldr	r0, [pc, #244]	; (31d4c <pdn_interface_connect+0x2c4>)
   31c56:	f008 fe67 	bl	3a928 <sniprintf>
   31c5a:	4601      	mov	r1, r0
   31c5c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   31c60:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   31c64:	681b      	ldr	r3, [r3, #0]
   31c66:	4a42      	ldr	r2, [pc, #264]	; (31d70 <pdn_interface_connect+0x2e8>)
   31c68:	1830      	adds	r0, r6, r0
   31c6a:	f008 fe5d 	bl	3a928 <sniprintf>
   31c6e:	4837      	ldr	r0, [pc, #220]	; (31d4c <pdn_interface_connect+0x2c4>)
   31c70:	f8da 6000 	ldr.w	r6, [sl]
   31c74:	f7eb fa56 	bl	1d124 <strlen>
   31c78:	4623      	mov	r3, r4
   31c7a:	4602      	mov	r2, r0
   31c7c:	4933      	ldr	r1, [pc, #204]	; (31d4c <pdn_interface_connect+0x2c4>)
   31c7e:	4630      	mov	r0, r6
   31c80:	9401      	str	r4, [sp, #4]
   31c82:	9400      	str	r4, [sp, #0]
   31c84:	f7fc fd0e 	bl	2e6a4 <at_interface_write>
   31c88:	4606      	mov	r6, r0
   31c8a:	4830      	ldr	r0, [pc, #192]	; (31d4c <pdn_interface_connect+0x2c4>)
   31c8c:	f7eb fa4a 	bl	1d124 <strlen>
   31c90:	42b0      	cmp	r0, r6
   31c92:	d153      	bne.n	31d3c <pdn_interface_connect+0x2b4>
   31c94:	4623      	mov	r3, r4
   31c96:	f44f 7280 	mov.w	r2, #256	; 0x100
   31c9a:	492c      	ldr	r1, [pc, #176]	; (31d4c <pdn_interface_connect+0x2c4>)
   31c9c:	f8da 0000 	ldr.w	r0, [sl]
   31ca0:	e9cd 4400 	strd	r4, r4, [sp]
   31ca4:	f7fc fde6 	bl	2e874 <at_interface_read>
   31ca8:	4606      	mov	r6, r0
   31caa:	4833      	ldr	r0, [pc, #204]	; (31d78 <pdn_interface_connect+0x2f0>)
   31cac:	f7eb fa3a 	bl	1d124 <strlen>
   31cb0:	4286      	cmp	r6, r0
   31cb2:	db33      	blt.n	31d1c <pdn_interface_connect+0x294>
   31cb4:	4602      	mov	r2, r0
   31cb6:	4925      	ldr	r1, [pc, #148]	; (31d4c <pdn_interface_connect+0x2c4>)
   31cb8:	482f      	ldr	r0, [pc, #188]	; (31d78 <pdn_interface_connect+0x2f0>)
   31cba:	f00d f9ff 	bl	3f0bc <strncmp>
   31cbe:	bb68      	cbnz	r0, 31d1c <pdn_interface_connect+0x294>
   31cc0:	4628      	mov	r0, r5
   31cc2:	4922      	ldr	r1, [pc, #136]	; (31d4c <pdn_interface_connect+0x2c4>)
   31cc4:	f7ff fd8e 	bl	317e4 <pdn_id_get_parser>
   31cc8:	e759      	b.n	31b7e <pdn_interface_connect+0xf6>
   31cca:	482c      	ldr	r0, [pc, #176]	; (31d7c <pdn_interface_connect+0x2f4>)
   31ccc:	f7eb fa2a 	bl	1d124 <strlen>
   31cd0:	491e      	ldr	r1, [pc, #120]	; (31d4c <pdn_interface_connect+0x2c4>)
   31cd2:	4602      	mov	r2, r0
   31cd4:	4829      	ldr	r0, [pc, #164]	; (31d7c <pdn_interface_connect+0x2f4>)
   31cd6:	f00d f9f1 	bl	3f0bc <strncmp>
   31cda:	2800      	cmp	r0, #0
   31cdc:	f47f af4a 	bne.w	31b74 <pdn_interface_connect+0xec>
   31ce0:	2008      	movs	r0, #8
   31ce2:	f7f4 ff45 	bl	26b70 <bsd_os_errno_set>
   31ce6:	f04f 34ff 	mov.w	r4, #4294967295
   31cea:	e748      	b.n	31b7e <pdn_interface_connect+0xf6>
   31cec:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   31cf0:	1930      	adds	r0, r6, r4
   31cf2:	4b23      	ldr	r3, [pc, #140]	; (31d80 <pdn_interface_connect+0x2f8>)
   31cf4:	4a1a      	ldr	r2, [pc, #104]	; (31d60 <pdn_interface_connect+0x2d8>)
   31cf6:	f008 fe17 	bl	3a928 <sniprintf>
   31cfa:	4404      	add	r4, r0
   31cfc:	e718      	b.n	31b30 <pdn_interface_connect+0xa8>
   31cfe:	f04f 34ff 	mov.w	r4, #4294967295
   31d02:	2009      	movs	r0, #9
   31d04:	f7f4 ff34 	bl	26b70 <bsd_os_errno_set>
   31d08:	4620      	mov	r0, r4
   31d0a:	b003      	add	sp, #12
   31d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31d10:	2016      	movs	r0, #22
   31d12:	f7f4 ff2d 	bl	26b70 <bsd_os_errno_set>
   31d16:	f04f 34ff 	mov.w	r4, #4294967295
   31d1a:	e730      	b.n	31b7e <pdn_interface_connect+0xf6>
   31d1c:	4817      	ldr	r0, [pc, #92]	; (31d7c <pdn_interface_connect+0x2f4>)
   31d1e:	f7eb fa01 	bl	1d124 <strlen>
   31d22:	490a      	ldr	r1, [pc, #40]	; (31d4c <pdn_interface_connect+0x2c4>)
   31d24:	4602      	mov	r2, r0
   31d26:	4815      	ldr	r0, [pc, #84]	; (31d7c <pdn_interface_connect+0x2f4>)
   31d28:	f00d f9c8 	bl	3f0bc <strncmp>
   31d2c:	b930      	cbnz	r0, 31d3c <pdn_interface_connect+0x2b4>
   31d2e:	2008      	movs	r0, #8
   31d30:	f7f4 ff1e 	bl	26b70 <bsd_os_errno_set>
   31d34:	e723      	b.n	31b7e <pdn_interface_connect+0xf6>
   31d36:	f04f 34ff 	mov.w	r4, #4294967295
   31d3a:	e720      	b.n	31b7e <pdn_interface_connect+0xf6>
   31d3c:	2005      	movs	r0, #5
   31d3e:	f7f4 ff17 	bl	26b70 <bsd_os_errno_set>
   31d42:	e71c      	b.n	31b7e <pdn_interface_connect+0xf6>
   31d44:	789a0000 	.word	0x789a0000
   31d48:	20024f6c 	.word	0x20024f6c
   31d4c:	20024e6c 	.word	0x20024e6c
   31d50:	00040eb4 	.word	0x00040eb4
   31d54:	00040ec0 	.word	0x00040ec0
   31d58:	00040ed4 	.word	0x00040ed4
   31d5c:	00040edc 	.word	0x00040edc
   31d60:	00040ecc 	.word	0x00040ecc
   31d64:	00040f10 	.word	0x00040f10
   31d68:	00040ee0 	.word	0x00040ee0
   31d6c:	00040ee4 	.word	0x00040ee4
   31d70:	00040ef0 	.word	0x00040ef0
   31d74:	00040ef4 	.word	0x00040ef4
   31d78:	00040f04 	.word	0x00040f04
   31d7c:	00040f48 	.word	0x00040f48
   31d80:	00040ec4 	.word	0x00040ec4
   31d84:	20024e68 	.word	0x20024e68

00031d88 <pdn_interface_close>:
   31d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31d8c:	4b63      	ldr	r3, [pc, #396]	; (31f1c <pdn_interface_close+0x194>)
   31d8e:	b083      	sub	sp, #12
   31d90:	4383      	bics	r3, r0
   31d92:	f040 809d 	bne.w	31ed0 <pdn_interface_close+0x148>
   31d96:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   31d9a:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   31d9e:	2c09      	cmp	r4, #9
   31da0:	f300 8096 	bgt.w	31ed0 <pdn_interface_close+0x148>
   31da4:	4d5e      	ldr	r5, [pc, #376]	; (31f20 <pdn_interface_close+0x198>)
   31da6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   31daa:	2800      	cmp	r0, #0
   31dac:	f000 8090 	beq.w	31ed0 <pdn_interface_close+0x148>
   31db0:	6883      	ldr	r3, [r0, #8]
   31db2:	2b00      	cmp	r3, #0
   31db4:	f000 808c 	beq.w	31ed0 <pdn_interface_close+0x148>
   31db8:	6883      	ldr	r3, [r0, #8]
   31dba:	2b03      	cmp	r3, #3
   31dbc:	d008      	beq.n	31dd0 <pdn_interface_close+0x48>
   31dbe:	f7fd fa17 	bl	2f1f0 <nrf_free>
   31dc2:	2300      	movs	r3, #0
   31dc4:	4618      	mov	r0, r3
   31dc6:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   31dca:	b003      	add	sp, #12
   31dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   31dd0:	4e54      	ldr	r6, [pc, #336]	; (31f24 <pdn_interface_close+0x19c>)
   31dd2:	4a55      	ldr	r2, [pc, #340]	; (31f28 <pdn_interface_close+0x1a0>)
   31dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
   31dd8:	4630      	mov	r0, r6
   31dda:	f008 fda5 	bl	3a928 <sniprintf>
   31dde:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   31de2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   31de6:	681b      	ldr	r3, [r3, #0]
   31de8:	4a50      	ldr	r2, [pc, #320]	; (31f2c <pdn_interface_close+0x1a4>)
   31dea:	4430      	add	r0, r6
   31dec:	f8df 814c 	ldr.w	r8, [pc, #332]	; 31f3c <pdn_interface_close+0x1b4>
   31df0:	f008 fd9a 	bl	3a928 <sniprintf>
   31df4:	4630      	mov	r0, r6
   31df6:	f8d8 9000 	ldr.w	r9, [r8]
   31dfa:	2700      	movs	r7, #0
   31dfc:	f7eb f992 	bl	1d124 <strlen>
   31e00:	4631      	mov	r1, r6
   31e02:	4602      	mov	r2, r0
   31e04:	463b      	mov	r3, r7
   31e06:	4648      	mov	r0, r9
   31e08:	9701      	str	r7, [sp, #4]
   31e0a:	9700      	str	r7, [sp, #0]
   31e0c:	f7fc fc4a 	bl	2e6a4 <at_interface_write>
   31e10:	4681      	mov	r9, r0
   31e12:	4630      	mov	r0, r6
   31e14:	f7eb f986 	bl	1d124 <strlen>
   31e18:	4548      	cmp	r0, r9
   31e1a:	d176      	bne.n	31f0a <pdn_interface_close+0x182>
   31e1c:	463b      	mov	r3, r7
   31e1e:	e9cd 7700 	strd	r7, r7, [sp]
   31e22:	f44f 7280 	mov.w	r2, #256	; 0x100
   31e26:	4631      	mov	r1, r6
   31e28:	f8d8 0000 	ldr.w	r0, [r8]
   31e2c:	f7fc fd22 	bl	2e874 <at_interface_read>
   31e30:	4607      	mov	r7, r0
   31e32:	483f      	ldr	r0, [pc, #252]	; (31f30 <pdn_interface_close+0x1a8>)
   31e34:	f7eb f976 	bl	1d124 <strlen>
   31e38:	4287      	cmp	r7, r0
   31e3a:	da4f      	bge.n	31edc <pdn_interface_close+0x154>
   31e3c:	483d      	ldr	r0, [pc, #244]	; (31f34 <pdn_interface_close+0x1ac>)
   31e3e:	f7eb f971 	bl	1d124 <strlen>
   31e42:	4938      	ldr	r1, [pc, #224]	; (31f24 <pdn_interface_close+0x19c>)
   31e44:	4602      	mov	r2, r0
   31e46:	483b      	ldr	r0, [pc, #236]	; (31f34 <pdn_interface_close+0x1ac>)
   31e48:	f00d f938 	bl	3f0bc <strncmp>
   31e4c:	2800      	cmp	r0, #0
   31e4e:	d15c      	bne.n	31f0a <pdn_interface_close+0x182>
   31e50:	2008      	movs	r0, #8
   31e52:	f7f4 fe8d 	bl	26b70 <bsd_os_errno_set>
   31e56:	4a38      	ldr	r2, [pc, #224]	; (31f38 <pdn_interface_close+0x1b0>)
   31e58:	f44f 7180 	mov.w	r1, #256	; 0x100
   31e5c:	4831      	ldr	r0, [pc, #196]	; (31f24 <pdn_interface_close+0x19c>)
   31e5e:	f008 fd63 	bl	3a928 <sniprintf>
   31e62:	4601      	mov	r1, r0
   31e64:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   31e68:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   31e6c:	681b      	ldr	r3, [r3, #0]
   31e6e:	4a2f      	ldr	r2, [pc, #188]	; (31f2c <pdn_interface_close+0x1a4>)
   31e70:	1830      	adds	r0, r6, r0
   31e72:	f008 fd59 	bl	3a928 <sniprintf>
   31e76:	482b      	ldr	r0, [pc, #172]	; (31f24 <pdn_interface_close+0x19c>)
   31e78:	f8d8 7000 	ldr.w	r7, [r8]
   31e7c:	2600      	movs	r6, #0
   31e7e:	f7eb f951 	bl	1d124 <strlen>
   31e82:	4633      	mov	r3, r6
   31e84:	4602      	mov	r2, r0
   31e86:	4927      	ldr	r1, [pc, #156]	; (31f24 <pdn_interface_close+0x19c>)
   31e88:	4638      	mov	r0, r7
   31e8a:	9601      	str	r6, [sp, #4]
   31e8c:	9600      	str	r6, [sp, #0]
   31e8e:	f7fc fc09 	bl	2e6a4 <at_interface_write>
   31e92:	4607      	mov	r7, r0
   31e94:	4823      	ldr	r0, [pc, #140]	; (31f24 <pdn_interface_close+0x19c>)
   31e96:	f7eb f945 	bl	1d124 <strlen>
   31e9a:	42b8      	cmp	r0, r7
   31e9c:	d139      	bne.n	31f12 <pdn_interface_close+0x18a>
   31e9e:	4633      	mov	r3, r6
   31ea0:	e9cd 6600 	strd	r6, r6, [sp]
   31ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
   31ea8:	491e      	ldr	r1, [pc, #120]	; (31f24 <pdn_interface_close+0x19c>)
   31eaa:	f8d8 0000 	ldr.w	r0, [r8]
   31eae:	f7fc fce1 	bl	2e874 <at_interface_read>
   31eb2:	4606      	mov	r6, r0
   31eb4:	481e      	ldr	r0, [pc, #120]	; (31f30 <pdn_interface_close+0x1a8>)
   31eb6:	f7eb f935 	bl	1d124 <strlen>
   31eba:	4286      	cmp	r6, r0
   31ebc:	db16      	blt.n	31eec <pdn_interface_close+0x164>
   31ebe:	4602      	mov	r2, r0
   31ec0:	4918      	ldr	r1, [pc, #96]	; (31f24 <pdn_interface_close+0x19c>)
   31ec2:	481b      	ldr	r0, [pc, #108]	; (31f30 <pdn_interface_close+0x1a8>)
   31ec4:	f00d f8fa 	bl	3f0bc <strncmp>
   31ec8:	b980      	cbnz	r0, 31eec <pdn_interface_close+0x164>
   31eca:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   31ece:	e776      	b.n	31dbe <pdn_interface_close+0x36>
   31ed0:	2009      	movs	r0, #9
   31ed2:	f7f4 fe4d 	bl	26b70 <bsd_os_errno_set>
   31ed6:	f04f 30ff 	mov.w	r0, #4294967295
   31eda:	e776      	b.n	31dca <pdn_interface_close+0x42>
   31edc:	4602      	mov	r2, r0
   31ede:	4631      	mov	r1, r6
   31ee0:	4813      	ldr	r0, [pc, #76]	; (31f30 <pdn_interface_close+0x1a8>)
   31ee2:	f00d f8eb 	bl	3f0bc <strncmp>
   31ee6:	2800      	cmp	r0, #0
   31ee8:	d0b5      	beq.n	31e56 <pdn_interface_close+0xce>
   31eea:	e7a7      	b.n	31e3c <pdn_interface_close+0xb4>
   31eec:	4811      	ldr	r0, [pc, #68]	; (31f34 <pdn_interface_close+0x1ac>)
   31eee:	f7eb f919 	bl	1d124 <strlen>
   31ef2:	490c      	ldr	r1, [pc, #48]	; (31f24 <pdn_interface_close+0x19c>)
   31ef4:	4602      	mov	r2, r0
   31ef6:	480f      	ldr	r0, [pc, #60]	; (31f34 <pdn_interface_close+0x1ac>)
   31ef8:	f00d f8e0 	bl	3f0bc <strncmp>
   31efc:	b948      	cbnz	r0, 31f12 <pdn_interface_close+0x18a>
   31efe:	2008      	movs	r0, #8
   31f00:	f7f4 fe36 	bl	26b70 <bsd_os_errno_set>
   31f04:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   31f08:	e759      	b.n	31dbe <pdn_interface_close+0x36>
   31f0a:	2005      	movs	r0, #5
   31f0c:	f7f4 fe30 	bl	26b70 <bsd_os_errno_set>
   31f10:	e7a1      	b.n	31e56 <pdn_interface_close+0xce>
   31f12:	2005      	movs	r0, #5
   31f14:	f7f4 fe2c 	bl	26b70 <bsd_os_errno_set>
   31f18:	e7d7      	b.n	31eca <pdn_interface_close+0x142>
   31f1a:	bf00      	nop
   31f1c:	789a0000 	.word	0x789a0000
   31f20:	20024f6c 	.word	0x20024f6c
   31f24:	20024e6c 	.word	0x20024e6c
   31f28:	00040ea8 	.word	0x00040ea8
   31f2c:	00040ef0 	.word	0x00040ef0
   31f30:	00040ee0 	.word	0x00040ee0
   31f34:	00040f48 	.word	0x00040f48
   31f38:	00040eb4 	.word	0x00040eb4
   31f3c:	20024e68 	.word	0x20024e68

00031f40 <pdn_interface_setopt>:
   31f40:	b510      	push	{r4, lr}
   31f42:	f240 2402 	movw	r4, #514	; 0x202
   31f46:	42a1      	cmp	r1, r4
   31f48:	d10b      	bne.n	31f62 <pdn_interface_setopt+0x22>
   31f4a:	b153      	cbz	r3, 31f62 <pdn_interface_setopt+0x22>
   31f4c:	9902      	ldr	r1, [sp, #8]
   31f4e:	b141      	cbz	r1, 31f62 <pdn_interface_setopt+0x22>
   31f50:	4925      	ldr	r1, [pc, #148]	; (31fe8 <pdn_interface_setopt+0xa8>)
   31f52:	4381      	bics	r1, r0
   31f54:	d00b      	beq.n	31f6e <pdn_interface_setopt+0x2e>
   31f56:	2009      	movs	r0, #9
   31f58:	f7f4 fe0a 	bl	26b70 <bsd_os_errno_set>
   31f5c:	f04f 30ff 	mov.w	r0, #4294967295
   31f60:	bd10      	pop	{r4, pc}
   31f62:	2016      	movs	r0, #22
   31f64:	f7f4 fe04 	bl	26b70 <bsd_os_errno_set>
   31f68:	f04f 30ff 	mov.w	r0, #4294967295
   31f6c:	bd10      	pop	{r4, pc}
   31f6e:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   31f72:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   31f76:	2809      	cmp	r0, #9
   31f78:	dced      	bgt.n	31f56 <pdn_interface_setopt+0x16>
   31f7a:	491c      	ldr	r1, [pc, #112]	; (31fec <pdn_interface_setopt+0xac>)
   31f7c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   31f80:	2900      	cmp	r1, #0
   31f82:	d0e8      	beq.n	31f56 <pdn_interface_setopt+0x16>
   31f84:	688c      	ldr	r4, [r1, #8]
   31f86:	2c00      	cmp	r4, #0
   31f88:	d0e5      	beq.n	31f56 <pdn_interface_setopt+0x16>
   31f8a:	2800      	cmp	r0, #0
   31f8c:	dbe3      	blt.n	31f56 <pdn_interface_setopt+0x16>
   31f8e:	2a01      	cmp	r2, #1
   31f90:	d001      	beq.n	31f96 <pdn_interface_setopt+0x56>
   31f92:	202d      	movs	r0, #45	; 0x2d
   31f94:	e7e6      	b.n	31f64 <pdn_interface_setopt+0x24>
   31f96:	688a      	ldr	r2, [r1, #8]
   31f98:	b1fa      	cbz	r2, 31fda <pdn_interface_setopt+0x9a>
   31f9a:	688a      	ldr	r2, [r1, #8]
   31f9c:	2a03      	cmp	r2, #3
   31f9e:	d01c      	beq.n	31fda <pdn_interface_setopt+0x9a>
   31fa0:	688a      	ldr	r2, [r1, #8]
   31fa2:	2a04      	cmp	r2, #4
   31fa4:	d019      	beq.n	31fda <pdn_interface_setopt+0x9a>
   31fa6:	9a02      	ldr	r2, [sp, #8]
   31fa8:	0890      	lsrs	r0, r2, #2
   31faa:	1e42      	subs	r2, r0, #1
   31fac:	2a01      	cmp	r2, #1
   31fae:	d8d8      	bhi.n	31f62 <pdn_interface_setopt+0x22>
   31fb0:	9a02      	ldr	r2, [sp, #8]
   31fb2:	0792      	lsls	r2, r2, #30
   31fb4:	d1d5      	bne.n	31f62 <pdn_interface_setopt+0x22>
   31fb6:	681a      	ldr	r2, [r3, #0]
   31fb8:	2a02      	cmp	r2, #2
   31fba:	d010      	beq.n	31fde <pdn_interface_setopt+0x9e>
   31fbc:	2a0a      	cmp	r2, #10
   31fbe:	d1d0      	bne.n	31f62 <pdn_interface_setopt+0x22>
   31fc0:	2202      	movs	r2, #2
   31fc2:	2802      	cmp	r0, #2
   31fc4:	d106      	bne.n	31fd4 <pdn_interface_setopt+0x94>
   31fc6:	685b      	ldr	r3, [r3, #4]
   31fc8:	2b02      	cmp	r3, #2
   31fca:	d00a      	beq.n	31fe2 <pdn_interface_setopt+0xa2>
   31fcc:	2b0a      	cmp	r3, #10
   31fce:	d1c8      	bne.n	31f62 <pdn_interface_setopt+0x22>
   31fd0:	f042 0202 	orr.w	r2, r2, #2
   31fd4:	670a      	str	r2, [r1, #112]	; 0x70
   31fd6:	2000      	movs	r0, #0
   31fd8:	e7c4      	b.n	31f64 <pdn_interface_setopt+0x24>
   31fda:	200e      	movs	r0, #14
   31fdc:	e7c2      	b.n	31f64 <pdn_interface_setopt+0x24>
   31fde:	2201      	movs	r2, #1
   31fe0:	e7ef      	b.n	31fc2 <pdn_interface_setopt+0x82>
   31fe2:	f042 0201 	orr.w	r2, r2, #1
   31fe6:	e7f5      	b.n	31fd4 <pdn_interface_setopt+0x94>
   31fe8:	789a0000 	.word	0x789a0000
   31fec:	20024f6c 	.word	0x20024f6c

00031ff0 <pdn_interface_getopt>:
   31ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31ff4:	f240 2402 	movw	r4, #514	; 0x202
   31ff8:	b083      	sub	sp, #12
   31ffa:	42a1      	cmp	r1, r4
   31ffc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   31ffe:	f040 80a9 	bne.w	32154 <pdn_interface_getopt+0x164>
   32002:	461e      	mov	r6, r3
   32004:	2b00      	cmp	r3, #0
   32006:	f000 80a5 	beq.w	32154 <pdn_interface_getopt+0x164>
   3200a:	2d00      	cmp	r5, #0
   3200c:	f000 80a2 	beq.w	32154 <pdn_interface_getopt+0x164>
   32010:	4b56      	ldr	r3, [pc, #344]	; (3216c <pdn_interface_getopt+0x17c>)
   32012:	4383      	bics	r3, r0
   32014:	f040 8084 	bne.w	32120 <pdn_interface_getopt+0x130>
   32018:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   3201c:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   32020:	2c09      	cmp	r4, #9
   32022:	dc7d      	bgt.n	32120 <pdn_interface_getopt+0x130>
   32024:	4b52      	ldr	r3, [pc, #328]	; (32170 <pdn_interface_getopt+0x180>)
   32026:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   3202a:	2b00      	cmp	r3, #0
   3202c:	d078      	beq.n	32120 <pdn_interface_getopt+0x130>
   3202e:	6899      	ldr	r1, [r3, #8]
   32030:	2900      	cmp	r1, #0
   32032:	d075      	beq.n	32120 <pdn_interface_getopt+0x130>
   32034:	2c00      	cmp	r4, #0
   32036:	db73      	blt.n	32120 <pdn_interface_getopt+0x130>
   32038:	2a02      	cmp	r2, #2
   3203a:	d00e      	beq.n	3205a <pdn_interface_getopt+0x6a>
   3203c:	2a03      	cmp	r2, #3
   3203e:	d008      	beq.n	32052 <pdn_interface_getopt+0x62>
   32040:	2a01      	cmp	r2, #1
   32042:	d015      	beq.n	32070 <pdn_interface_getopt+0x80>
   32044:	202d      	movs	r0, #45	; 0x2d
   32046:	f7f4 fd93 	bl	26b70 <bsd_os_errno_set>
   3204a:	2000      	movs	r0, #0
   3204c:	b003      	add	sp, #12
   3204e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32052:	682b      	ldr	r3, [r5, #0]
   32054:	bb23      	cbnz	r3, 320a0 <pdn_interface_getopt+0xb0>
   32056:	2016      	movs	r0, #22
   32058:	e7f5      	b.n	32046 <pdn_interface_getopt+0x56>
   3205a:	682a      	ldr	r2, [r5, #0]
   3205c:	2a00      	cmp	r2, #0
   3205e:	d0fa      	beq.n	32056 <pdn_interface_getopt+0x66>
   32060:	2201      	movs	r2, #1
   32062:	2000      	movs	r0, #0
   32064:	681b      	ldr	r3, [r3, #0]
   32066:	7033      	strb	r3, [r6, #0]
   32068:	602a      	str	r2, [r5, #0]
   3206a:	b003      	add	sp, #12
   3206c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32070:	689a      	ldr	r2, [r3, #8]
   32072:	2a00      	cmp	r2, #0
   32074:	d052      	beq.n	3211c <pdn_interface_getopt+0x12c>
   32076:	689a      	ldr	r2, [r3, #8]
   32078:	2a04      	cmp	r2, #4
   3207a:	d04f      	beq.n	3211c <pdn_interface_getopt+0x12c>
   3207c:	682a      	ldr	r2, [r5, #0]
   3207e:	2a07      	cmp	r2, #7
   32080:	d9e9      	bls.n	32056 <pdn_interface_getopt+0x66>
   32082:	f012 0203 	ands.w	r2, r2, #3
   32086:	d1e6      	bne.n	32056 <pdn_interface_getopt+0x66>
   32088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   3208a:	0799      	lsls	r1, r3, #30
   3208c:	d45d      	bmi.n	3214a <pdn_interface_getopt+0x15a>
   3208e:	2104      	movs	r1, #4
   32090:	07db      	lsls	r3, r3, #31
   32092:	d502      	bpl.n	3209a <pdn_interface_getopt+0xaa>
   32094:	2302      	movs	r3, #2
   32096:	50b3      	str	r3, [r6, r2]
   32098:	460a      	mov	r2, r1
   3209a:	602a      	str	r2, [r5, #0]
   3209c:	2000      	movs	r0, #0
   3209e:	e7d5      	b.n	3204c <pdn_interface_getopt+0x5c>
   320a0:	4a34      	ldr	r2, [pc, #208]	; (32174 <pdn_interface_getopt+0x184>)
   320a2:	f44f 7180 	mov.w	r1, #256	; 0x100
   320a6:	4834      	ldr	r0, [pc, #208]	; (32178 <pdn_interface_getopt+0x188>)
   320a8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 32184 <pdn_interface_getopt+0x194>
   320ac:	f008 fc3c 	bl	3a928 <sniprintf>
   320b0:	4831      	ldr	r0, [pc, #196]	; (32178 <pdn_interface_getopt+0x188>)
   320b2:	f8d8 9000 	ldr.w	r9, [r8]
   320b6:	2700      	movs	r7, #0
   320b8:	f7eb f834 	bl	1d124 <strlen>
   320bc:	463b      	mov	r3, r7
   320be:	4602      	mov	r2, r0
   320c0:	492d      	ldr	r1, [pc, #180]	; (32178 <pdn_interface_getopt+0x188>)
   320c2:	4648      	mov	r0, r9
   320c4:	9701      	str	r7, [sp, #4]
   320c6:	9700      	str	r7, [sp, #0]
   320c8:	f7fc faec 	bl	2e6a4 <at_interface_write>
   320cc:	4681      	mov	r9, r0
   320ce:	482a      	ldr	r0, [pc, #168]	; (32178 <pdn_interface_getopt+0x188>)
   320d0:	f7eb f828 	bl	1d124 <strlen>
   320d4:	4548      	cmp	r0, r9
   320d6:	d143      	bne.n	32160 <pdn_interface_getopt+0x170>
   320d8:	463b      	mov	r3, r7
   320da:	e9cd 7700 	strd	r7, r7, [sp]
   320de:	f44f 7280 	mov.w	r2, #256	; 0x100
   320e2:	4925      	ldr	r1, [pc, #148]	; (32178 <pdn_interface_getopt+0x188>)
   320e4:	f8d8 0000 	ldr.w	r0, [r8]
   320e8:	f7fc fbc4 	bl	2e874 <at_interface_read>
   320ec:	4607      	mov	r7, r0
   320ee:	4823      	ldr	r0, [pc, #140]	; (3217c <pdn_interface_getopt+0x18c>)
   320f0:	f7eb f818 	bl	1d124 <strlen>
   320f4:	4287      	cmp	r7, r0
   320f6:	db19      	blt.n	3212c <pdn_interface_getopt+0x13c>
   320f8:	4602      	mov	r2, r0
   320fa:	491f      	ldr	r1, [pc, #124]	; (32178 <pdn_interface_getopt+0x188>)
   320fc:	481f      	ldr	r0, [pc, #124]	; (3217c <pdn_interface_getopt+0x18c>)
   320fe:	f00c ffdd 	bl	3f0bc <strncmp>
   32102:	4607      	mov	r7, r0
   32104:	b990      	cbnz	r0, 3212c <pdn_interface_getopt+0x13c>
   32106:	4620      	mov	r0, r4
   32108:	491b      	ldr	r1, [pc, #108]	; (32178 <pdn_interface_getopt+0x188>)
   3210a:	f7ff fb35 	bl	31778 <pdn_state_get_parser>
   3210e:	2800      	cmp	r0, #0
   32110:	db99      	blt.n	32046 <pdn_interface_getopt+0x56>
   32112:	2301      	movs	r3, #1
   32114:	7030      	strb	r0, [r6, #0]
   32116:	4638      	mov	r0, r7
   32118:	602b      	str	r3, [r5, #0]
   3211a:	e797      	b.n	3204c <pdn_interface_getopt+0x5c>
   3211c:	200e      	movs	r0, #14
   3211e:	e792      	b.n	32046 <pdn_interface_getopt+0x56>
   32120:	2009      	movs	r0, #9
   32122:	f7f4 fd25 	bl	26b70 <bsd_os_errno_set>
   32126:	f04f 30ff 	mov.w	r0, #4294967295
   3212a:	e78f      	b.n	3204c <pdn_interface_getopt+0x5c>
   3212c:	4814      	ldr	r0, [pc, #80]	; (32180 <pdn_interface_getopt+0x190>)
   3212e:	f7ea fff9 	bl	1d124 <strlen>
   32132:	4911      	ldr	r1, [pc, #68]	; (32178 <pdn_interface_getopt+0x188>)
   32134:	4602      	mov	r2, r0
   32136:	4812      	ldr	r0, [pc, #72]	; (32180 <pdn_interface_getopt+0x190>)
   32138:	f00c ffc0 	bl	3f0bc <strncmp>
   3213c:	b980      	cbnz	r0, 32160 <pdn_interface_getopt+0x170>
   3213e:	2008      	movs	r0, #8
   32140:	f7f4 fd16 	bl	26b70 <bsd_os_errno_set>
   32144:	f04f 30ff 	mov.w	r0, #4294967295
   32148:	e77d      	b.n	32046 <pdn_interface_getopt+0x56>
   3214a:	220a      	movs	r2, #10
   3214c:	2108      	movs	r1, #8
   3214e:	6032      	str	r2, [r6, #0]
   32150:	2204      	movs	r2, #4
   32152:	e79d      	b.n	32090 <pdn_interface_getopt+0xa0>
   32154:	2016      	movs	r0, #22
   32156:	f7f4 fd0b 	bl	26b70 <bsd_os_errno_set>
   3215a:	f04f 30ff 	mov.w	r0, #4294967295
   3215e:	e775      	b.n	3204c <pdn_interface_getopt+0x5c>
   32160:	2005      	movs	r0, #5
   32162:	f7f4 fd05 	bl	26b70 <bsd_os_errno_set>
   32166:	f04f 30ff 	mov.w	r0, #4294967295
   3216a:	e76c      	b.n	32046 <pdn_interface_getopt+0x56>
   3216c:	789a0000 	.word	0x789a0000
   32170:	20024f6c 	.word	0x20024f6c
   32174:	00040f18 	.word	0x00040f18
   32178:	20024e6c 	.word	0x20024e6c
   3217c:	00040f24 	.word	0x00040f24
   32180:	00040f48 	.word	0x00040f48
   32184:	20024e68 	.word	0x20024e68

00032188 <pdn_interface_pdn_id_get>:
   32188:	2900      	cmp	r1, #0
   3218a:	f000 83b9 	beq.w	32900 <pdn_interface_pdn_id_get+0x778>
   3218e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32192:	4ca3      	ldr	r4, [pc, #652]	; (32420 <pdn_interface_pdn_id_get+0x298>)
   32194:	2802      	cmp	r0, #2
   32196:	b083      	sub	sp, #12
   32198:	460d      	mov	r5, r1
   3219a:	6823      	ldr	r3, [r4, #0]
   3219c:	f000 8094 	beq.w	322c8 <pdn_interface_pdn_id_get+0x140>
   321a0:	280a      	cmp	r0, #10
   321a2:	d03f      	beq.n	32224 <pdn_interface_pdn_id_get+0x9c>
   321a4:	b11b      	cbz	r3, 321ae <pdn_interface_pdn_id_get+0x26>
   321a6:	689b      	ldr	r3, [r3, #8]
   321a8:	2b03      	cmp	r3, #3
   321aa:	f000 8127 	beq.w	323fc <pdn_interface_pdn_id_get+0x274>
   321ae:	6863      	ldr	r3, [r4, #4]
   321b0:	b11b      	cbz	r3, 321ba <pdn_interface_pdn_id_get+0x32>
   321b2:	689b      	ldr	r3, [r3, #8]
   321b4:	2b03      	cmp	r3, #3
   321b6:	f000 8110 	beq.w	323da <pdn_interface_pdn_id_get+0x252>
   321ba:	68a3      	ldr	r3, [r4, #8]
   321bc:	b11b      	cbz	r3, 321c6 <pdn_interface_pdn_id_get+0x3e>
   321be:	689b      	ldr	r3, [r3, #8]
   321c0:	2b03      	cmp	r3, #3
   321c2:	f000 80f9 	beq.w	323b8 <pdn_interface_pdn_id_get+0x230>
   321c6:	68e3      	ldr	r3, [r4, #12]
   321c8:	b11b      	cbz	r3, 321d2 <pdn_interface_pdn_id_get+0x4a>
   321ca:	689b      	ldr	r3, [r3, #8]
   321cc:	2b03      	cmp	r3, #3
   321ce:	f000 80e2 	beq.w	32396 <pdn_interface_pdn_id_get+0x20e>
   321d2:	6923      	ldr	r3, [r4, #16]
   321d4:	b11b      	cbz	r3, 321de <pdn_interface_pdn_id_get+0x56>
   321d6:	689b      	ldr	r3, [r3, #8]
   321d8:	2b03      	cmp	r3, #3
   321da:	f000 8123 	beq.w	32424 <pdn_interface_pdn_id_get+0x29c>
   321de:	6963      	ldr	r3, [r4, #20]
   321e0:	b11b      	cbz	r3, 321ea <pdn_interface_pdn_id_get+0x62>
   321e2:	689b      	ldr	r3, [r3, #8]
   321e4:	2b03      	cmp	r3, #3
   321e6:	f000 8161 	beq.w	324ac <pdn_interface_pdn_id_get+0x324>
   321ea:	69a3      	ldr	r3, [r4, #24]
   321ec:	b11b      	cbz	r3, 321f6 <pdn_interface_pdn_id_get+0x6e>
   321ee:	689b      	ldr	r3, [r3, #8]
   321f0:	2b03      	cmp	r3, #3
   321f2:	f000 814a 	beq.w	3248a <pdn_interface_pdn_id_get+0x302>
   321f6:	69e3      	ldr	r3, [r4, #28]
   321f8:	b11b      	cbz	r3, 32202 <pdn_interface_pdn_id_get+0x7a>
   321fa:	689b      	ldr	r3, [r3, #8]
   321fc:	2b03      	cmp	r3, #3
   321fe:	f000 8133 	beq.w	32468 <pdn_interface_pdn_id_get+0x2e0>
   32202:	6a23      	ldr	r3, [r4, #32]
   32204:	b11b      	cbz	r3, 3220e <pdn_interface_pdn_id_get+0x86>
   32206:	689b      	ldr	r3, [r3, #8]
   32208:	2b03      	cmp	r3, #3
   3220a:	f000 811c 	beq.w	32446 <pdn_interface_pdn_id_get+0x2be>
   3220e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   32210:	b11b      	cbz	r3, 3221a <pdn_interface_pdn_id_get+0x92>
   32212:	689b      	ldr	r3, [r3, #8]
   32214:	2b03      	cmp	r3, #3
   32216:	f000 80ad 	beq.w	32374 <pdn_interface_pdn_id_get+0x1ec>
   3221a:	f04f 30ff 	mov.w	r0, #4294967295
   3221e:	b003      	add	sp, #12
   32220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32224:	b11b      	cbz	r3, 3222e <pdn_interface_pdn_id_get+0xa6>
   32226:	689b      	ldr	r3, [r3, #8]
   32228:	2b03      	cmp	r3, #3
   3222a:	f000 8335 	beq.w	32898 <pdn_interface_pdn_id_get+0x710>
   3222e:	6863      	ldr	r3, [r4, #4]
   32230:	b11b      	cbz	r3, 3223a <pdn_interface_pdn_id_get+0xb2>
   32232:	689b      	ldr	r3, [r3, #8]
   32234:	2b03      	cmp	r3, #3
   32236:	f000 82fd 	beq.w	32834 <pdn_interface_pdn_id_get+0x6ac>
   3223a:	68a3      	ldr	r3, [r4, #8]
   3223c:	b11b      	cbz	r3, 32246 <pdn_interface_pdn_id_get+0xbe>
   3223e:	689b      	ldr	r3, [r3, #8]
   32240:	2b03      	cmp	r3, #3
   32242:	f000 82d5 	beq.w	327f0 <pdn_interface_pdn_id_get+0x668>
   32246:	68e3      	ldr	r3, [r4, #12]
   32248:	b11b      	cbz	r3, 32252 <pdn_interface_pdn_id_get+0xca>
   3224a:	689e      	ldr	r6, [r3, #8]
   3224c:	2e03      	cmp	r6, #3
   3224e:	f000 81f0 	beq.w	32632 <pdn_interface_pdn_id_get+0x4aa>
   32252:	6923      	ldr	r3, [r4, #16]
   32254:	b11b      	cbz	r3, 3225e <pdn_interface_pdn_id_get+0xd6>
   32256:	689b      	ldr	r3, [r3, #8]
   32258:	2b03      	cmp	r3, #3
   3225a:	f000 8203 	beq.w	32664 <pdn_interface_pdn_id_get+0x4dc>
   3225e:	6963      	ldr	r3, [r4, #20]
   32260:	b11b      	cbz	r3, 3226a <pdn_interface_pdn_id_get+0xe2>
   32262:	689b      	ldr	r3, [r3, #8]
   32264:	2b03      	cmp	r3, #3
   32266:	f000 8215 	beq.w	32694 <pdn_interface_pdn_id_get+0x50c>
   3226a:	69a3      	ldr	r3, [r4, #24]
   3226c:	b11b      	cbz	r3, 32276 <pdn_interface_pdn_id_get+0xee>
   3226e:	689b      	ldr	r3, [r3, #8]
   32270:	2b03      	cmp	r3, #3
   32272:	f000 8227 	beq.w	326c4 <pdn_interface_pdn_id_get+0x53c>
   32276:	69e3      	ldr	r3, [r4, #28]
   32278:	b11b      	cbz	r3, 32282 <pdn_interface_pdn_id_get+0xfa>
   3227a:	689b      	ldr	r3, [r3, #8]
   3227c:	2b03      	cmp	r3, #3
   3227e:	f000 8239 	beq.w	326f4 <pdn_interface_pdn_id_get+0x56c>
   32282:	6a23      	ldr	r3, [r4, #32]
   32284:	b11b      	cbz	r3, 3228e <pdn_interface_pdn_id_get+0x106>
   32286:	689b      	ldr	r3, [r3, #8]
   32288:	2b03      	cmp	r3, #3
   3228a:	f000 824d 	beq.w	32728 <pdn_interface_pdn_id_get+0x5a0>
   3228e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   32290:	2b00      	cmp	r3, #0
   32292:	d0c2      	beq.n	3221a <pdn_interface_pdn_id_get+0x92>
   32294:	689b      	ldr	r3, [r3, #8]
   32296:	2b03      	cmp	r3, #3
   32298:	d1bf      	bne.n	3221a <pdn_interface_pdn_id_get+0x92>
   3229a:	4628      	mov	r0, r5
   3229c:	f7ea ff42 	bl	1d124 <strlen>
   322a0:	4606      	mov	r6, r0
   322a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   322a4:	300c      	adds	r0, #12
   322a6:	f7ea ff3d 	bl	1d124 <strlen>
   322aa:	42b0      	cmp	r0, r6
   322ac:	d1b5      	bne.n	3221a <pdn_interface_pdn_id_get+0x92>
   322ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
   322b0:	4628      	mov	r0, r5
   322b2:	310c      	adds	r1, #12
   322b4:	f7ea ff2c 	bl	1d110 <strcmp>
   322b8:	2800      	cmp	r0, #0
   322ba:	d1ae      	bne.n	3221a <pdn_interface_pdn_id_get+0x92>
   322bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   322be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   322c0:	0792      	lsls	r2, r2, #30
   322c2:	d5aa      	bpl.n	3221a <pdn_interface_pdn_id_get+0x92>
   322c4:	2609      	movs	r6, #9
   322c6:	e11a      	b.n	324fe <pdn_interface_pdn_id_get+0x376>
   322c8:	b11b      	cbz	r3, 322d2 <pdn_interface_pdn_id_get+0x14a>
   322ca:	689b      	ldr	r3, [r3, #8]
   322cc:	2b03      	cmp	r3, #3
   322ce:	f000 82fd 	beq.w	328cc <pdn_interface_pdn_id_get+0x744>
   322d2:	6863      	ldr	r3, [r4, #4]
   322d4:	b11b      	cbz	r3, 322de <pdn_interface_pdn_id_get+0x156>
   322d6:	689b      	ldr	r3, [r3, #8]
   322d8:	2b03      	cmp	r3, #3
   322da:	f000 82c5 	beq.w	32868 <pdn_interface_pdn_id_get+0x6e0>
   322de:	68a3      	ldr	r3, [r4, #8]
   322e0:	b11b      	cbz	r3, 322ea <pdn_interface_pdn_id_get+0x162>
   322e2:	689b      	ldr	r3, [r3, #8]
   322e4:	2b03      	cmp	r3, #3
   322e6:	f000 8269 	beq.w	327bc <pdn_interface_pdn_id_get+0x634>
   322ea:	68e3      	ldr	r3, [r4, #12]
   322ec:	b11b      	cbz	r3, 322f6 <pdn_interface_pdn_id_get+0x16e>
   322ee:	689e      	ldr	r6, [r3, #8]
   322f0:	2e03      	cmp	r6, #3
   322f2:	f000 80ec 	beq.w	324ce <pdn_interface_pdn_id_get+0x346>
   322f6:	6923      	ldr	r3, [r4, #16]
   322f8:	b11b      	cbz	r3, 32302 <pdn_interface_pdn_id_get+0x17a>
   322fa:	689b      	ldr	r3, [r3, #8]
   322fc:	2b03      	cmp	r3, #3
   322fe:	f000 814a 	beq.w	32596 <pdn_interface_pdn_id_get+0x40e>
   32302:	6963      	ldr	r3, [r4, #20]
   32304:	b11b      	cbz	r3, 3230e <pdn_interface_pdn_id_get+0x186>
   32306:	689b      	ldr	r3, [r3, #8]
   32308:	2b03      	cmp	r3, #3
   3230a:	f000 815e 	beq.w	325ca <pdn_interface_pdn_id_get+0x442>
   3230e:	69a3      	ldr	r3, [r4, #24]
   32310:	b11b      	cbz	r3, 3231a <pdn_interface_pdn_id_get+0x192>
   32312:	689b      	ldr	r3, [r3, #8]
   32314:	2b03      	cmp	r3, #3
   32316:	f000 8172 	beq.w	325fe <pdn_interface_pdn_id_get+0x476>
   3231a:	69e3      	ldr	r3, [r4, #28]
   3231c:	b11b      	cbz	r3, 32326 <pdn_interface_pdn_id_get+0x19e>
   3231e:	689b      	ldr	r3, [r3, #8]
   32320:	2b03      	cmp	r3, #3
   32322:	f000 821b 	beq.w	3275c <pdn_interface_pdn_id_get+0x5d4>
   32326:	6a23      	ldr	r3, [r4, #32]
   32328:	b11b      	cbz	r3, 32332 <pdn_interface_pdn_id_get+0x1aa>
   3232a:	689b      	ldr	r3, [r3, #8]
   3232c:	2b03      	cmp	r3, #3
   3232e:	f000 822d 	beq.w	3278c <pdn_interface_pdn_id_get+0x604>
   32332:	6a63      	ldr	r3, [r4, #36]	; 0x24
   32334:	2b00      	cmp	r3, #0
   32336:	f43f af70 	beq.w	3221a <pdn_interface_pdn_id_get+0x92>
   3233a:	689b      	ldr	r3, [r3, #8]
   3233c:	2b03      	cmp	r3, #3
   3233e:	f47f af6c 	bne.w	3221a <pdn_interface_pdn_id_get+0x92>
   32342:	4628      	mov	r0, r5
   32344:	f7ea feee 	bl	1d124 <strlen>
   32348:	4606      	mov	r6, r0
   3234a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   3234c:	300c      	adds	r0, #12
   3234e:	f7ea fee9 	bl	1d124 <strlen>
   32352:	4286      	cmp	r6, r0
   32354:	f47f af61 	bne.w	3221a <pdn_interface_pdn_id_get+0x92>
   32358:	6a61      	ldr	r1, [r4, #36]	; 0x24
   3235a:	4628      	mov	r0, r5
   3235c:	310c      	adds	r1, #12
   3235e:	f7ea fed7 	bl	1d110 <strcmp>
   32362:	2800      	cmp	r0, #0
   32364:	f47f af59 	bne.w	3221a <pdn_interface_pdn_id_get+0x92>
   32368:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3236a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3236c:	07d2      	lsls	r2, r2, #31
   3236e:	f57f af54 	bpl.w	3221a <pdn_interface_pdn_id_get+0x92>
   32372:	e7a7      	b.n	322c4 <pdn_interface_pdn_id_get+0x13c>
   32374:	4628      	mov	r0, r5
   32376:	f7ea fed5 	bl	1d124 <strlen>
   3237a:	4606      	mov	r6, r0
   3237c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   3237e:	300c      	adds	r0, #12
   32380:	f7ea fed0 	bl	1d124 <strlen>
   32384:	42b0      	cmp	r0, r6
   32386:	f47f af48 	bne.w	3221a <pdn_interface_pdn_id_get+0x92>
   3238a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   3238c:	4628      	mov	r0, r5
   3238e:	310c      	adds	r1, #12
   32390:	f7ea febe 	bl	1d110 <strcmp>
   32394:	e741      	b.n	3221a <pdn_interface_pdn_id_get+0x92>
   32396:	4628      	mov	r0, r5
   32398:	f7ea fec4 	bl	1d124 <strlen>
   3239c:	4606      	mov	r6, r0
   3239e:	68e0      	ldr	r0, [r4, #12]
   323a0:	300c      	adds	r0, #12
   323a2:	f7ea febf 	bl	1d124 <strlen>
   323a6:	4286      	cmp	r6, r0
   323a8:	f47f af13 	bne.w	321d2 <pdn_interface_pdn_id_get+0x4a>
   323ac:	68e1      	ldr	r1, [r4, #12]
   323ae:	4628      	mov	r0, r5
   323b0:	310c      	adds	r1, #12
   323b2:	f7ea fead 	bl	1d110 <strcmp>
   323b6:	e70c      	b.n	321d2 <pdn_interface_pdn_id_get+0x4a>
   323b8:	4628      	mov	r0, r5
   323ba:	f7ea feb3 	bl	1d124 <strlen>
   323be:	4606      	mov	r6, r0
   323c0:	68a0      	ldr	r0, [r4, #8]
   323c2:	300c      	adds	r0, #12
   323c4:	f7ea feae 	bl	1d124 <strlen>
   323c8:	4286      	cmp	r6, r0
   323ca:	f47f aefc 	bne.w	321c6 <pdn_interface_pdn_id_get+0x3e>
   323ce:	68a1      	ldr	r1, [r4, #8]
   323d0:	4628      	mov	r0, r5
   323d2:	310c      	adds	r1, #12
   323d4:	f7ea fe9c 	bl	1d110 <strcmp>
   323d8:	e6f5      	b.n	321c6 <pdn_interface_pdn_id_get+0x3e>
   323da:	4628      	mov	r0, r5
   323dc:	f7ea fea2 	bl	1d124 <strlen>
   323e0:	4606      	mov	r6, r0
   323e2:	6860      	ldr	r0, [r4, #4]
   323e4:	300c      	adds	r0, #12
   323e6:	f7ea fe9d 	bl	1d124 <strlen>
   323ea:	4286      	cmp	r6, r0
   323ec:	f47f aee5 	bne.w	321ba <pdn_interface_pdn_id_get+0x32>
   323f0:	6861      	ldr	r1, [r4, #4]
   323f2:	4628      	mov	r0, r5
   323f4:	310c      	adds	r1, #12
   323f6:	f7ea fe8b 	bl	1d110 <strcmp>
   323fa:	e6de      	b.n	321ba <pdn_interface_pdn_id_get+0x32>
   323fc:	4608      	mov	r0, r1
   323fe:	f7ea fe91 	bl	1d124 <strlen>
   32402:	4606      	mov	r6, r0
   32404:	6820      	ldr	r0, [r4, #0]
   32406:	300c      	adds	r0, #12
   32408:	f7ea fe8c 	bl	1d124 <strlen>
   3240c:	4286      	cmp	r6, r0
   3240e:	f47f aece 	bne.w	321ae <pdn_interface_pdn_id_get+0x26>
   32412:	6821      	ldr	r1, [r4, #0]
   32414:	4628      	mov	r0, r5
   32416:	310c      	adds	r1, #12
   32418:	f7ea fe7a 	bl	1d110 <strcmp>
   3241c:	e6c7      	b.n	321ae <pdn_interface_pdn_id_get+0x26>
   3241e:	bf00      	nop
   32420:	20024f6c 	.word	0x20024f6c
   32424:	4628      	mov	r0, r5
   32426:	f7ea fe7d 	bl	1d124 <strlen>
   3242a:	4606      	mov	r6, r0
   3242c:	6920      	ldr	r0, [r4, #16]
   3242e:	300c      	adds	r0, #12
   32430:	f7ea fe78 	bl	1d124 <strlen>
   32434:	4286      	cmp	r6, r0
   32436:	f47f aed2 	bne.w	321de <pdn_interface_pdn_id_get+0x56>
   3243a:	6921      	ldr	r1, [r4, #16]
   3243c:	4628      	mov	r0, r5
   3243e:	310c      	adds	r1, #12
   32440:	f7ea fe66 	bl	1d110 <strcmp>
   32444:	e6cb      	b.n	321de <pdn_interface_pdn_id_get+0x56>
   32446:	4628      	mov	r0, r5
   32448:	f7ea fe6c 	bl	1d124 <strlen>
   3244c:	4606      	mov	r6, r0
   3244e:	6a20      	ldr	r0, [r4, #32]
   32450:	300c      	adds	r0, #12
   32452:	f7ea fe67 	bl	1d124 <strlen>
   32456:	4286      	cmp	r6, r0
   32458:	f47f aed9 	bne.w	3220e <pdn_interface_pdn_id_get+0x86>
   3245c:	6a21      	ldr	r1, [r4, #32]
   3245e:	4628      	mov	r0, r5
   32460:	310c      	adds	r1, #12
   32462:	f7ea fe55 	bl	1d110 <strcmp>
   32466:	e6d2      	b.n	3220e <pdn_interface_pdn_id_get+0x86>
   32468:	4628      	mov	r0, r5
   3246a:	f7ea fe5b 	bl	1d124 <strlen>
   3246e:	4606      	mov	r6, r0
   32470:	69e0      	ldr	r0, [r4, #28]
   32472:	300c      	adds	r0, #12
   32474:	f7ea fe56 	bl	1d124 <strlen>
   32478:	4286      	cmp	r6, r0
   3247a:	f47f aec2 	bne.w	32202 <pdn_interface_pdn_id_get+0x7a>
   3247e:	69e1      	ldr	r1, [r4, #28]
   32480:	4628      	mov	r0, r5
   32482:	310c      	adds	r1, #12
   32484:	f7ea fe44 	bl	1d110 <strcmp>
   32488:	e6bb      	b.n	32202 <pdn_interface_pdn_id_get+0x7a>
   3248a:	4628      	mov	r0, r5
   3248c:	f7ea fe4a 	bl	1d124 <strlen>
   32490:	4606      	mov	r6, r0
   32492:	69a0      	ldr	r0, [r4, #24]
   32494:	300c      	adds	r0, #12
   32496:	f7ea fe45 	bl	1d124 <strlen>
   3249a:	4286      	cmp	r6, r0
   3249c:	f47f aeab 	bne.w	321f6 <pdn_interface_pdn_id_get+0x6e>
   324a0:	69a1      	ldr	r1, [r4, #24]
   324a2:	4628      	mov	r0, r5
   324a4:	310c      	adds	r1, #12
   324a6:	f7ea fe33 	bl	1d110 <strcmp>
   324aa:	e6a4      	b.n	321f6 <pdn_interface_pdn_id_get+0x6e>
   324ac:	4628      	mov	r0, r5
   324ae:	f7ea fe39 	bl	1d124 <strlen>
   324b2:	4606      	mov	r6, r0
   324b4:	6960      	ldr	r0, [r4, #20]
   324b6:	300c      	adds	r0, #12
   324b8:	f7ea fe34 	bl	1d124 <strlen>
   324bc:	4286      	cmp	r6, r0
   324be:	f47f ae94 	bne.w	321ea <pdn_interface_pdn_id_get+0x62>
   324c2:	6961      	ldr	r1, [r4, #20]
   324c4:	4628      	mov	r0, r5
   324c6:	310c      	adds	r1, #12
   324c8:	f7ea fe22 	bl	1d110 <strcmp>
   324cc:	e68d      	b.n	321ea <pdn_interface_pdn_id_get+0x62>
   324ce:	4628      	mov	r0, r5
   324d0:	f7ea fe28 	bl	1d124 <strlen>
   324d4:	4607      	mov	r7, r0
   324d6:	68e0      	ldr	r0, [r4, #12]
   324d8:	300c      	adds	r0, #12
   324da:	f7ea fe23 	bl	1d124 <strlen>
   324de:	4287      	cmp	r7, r0
   324e0:	f47f af09 	bne.w	322f6 <pdn_interface_pdn_id_get+0x16e>
   324e4:	68e1      	ldr	r1, [r4, #12]
   324e6:	4628      	mov	r0, r5
   324e8:	310c      	adds	r1, #12
   324ea:	f7ea fe11 	bl	1d110 <strcmp>
   324ee:	2800      	cmp	r0, #0
   324f0:	f47f af01 	bne.w	322f6 <pdn_interface_pdn_id_get+0x16e>
   324f4:	68e3      	ldr	r3, [r4, #12]
   324f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   324f8:	07d1      	lsls	r1, r2, #31
   324fa:	f57f aefc 	bpl.w	322f6 <pdn_interface_pdn_id_get+0x16e>
   324fe:	6858      	ldr	r0, [r3, #4]
   32500:	1c43      	adds	r3, r0, #1
   32502:	f47f ae8c 	bne.w	3221e <pdn_interface_pdn_id_get+0x96>
   32506:	4dc6      	ldr	r5, [pc, #792]	; (32820 <pdn_interface_pdn_id_get+0x698>)
   32508:	4ac6      	ldr	r2, [pc, #792]	; (32824 <pdn_interface_pdn_id_get+0x69c>)
   3250a:	f44f 7180 	mov.w	r1, #256	; 0x100
   3250e:	4628      	mov	r0, r5
   32510:	f008 fa0a 	bl	3a928 <sniprintf>
   32514:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   32518:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3251c:	681b      	ldr	r3, [r3, #0]
   3251e:	4ac2      	ldr	r2, [pc, #776]	; (32828 <pdn_interface_pdn_id_get+0x6a0>)
   32520:	4428      	add	r0, r5
   32522:	f8df 830c 	ldr.w	r8, [pc, #780]	; 32830 <pdn_interface_pdn_id_get+0x6a8>
   32526:	f008 f9ff 	bl	3a928 <sniprintf>
   3252a:	4628      	mov	r0, r5
   3252c:	f8d8 9000 	ldr.w	r9, [r8]
   32530:	2700      	movs	r7, #0
   32532:	f7ea fdf7 	bl	1d124 <strlen>
   32536:	4629      	mov	r1, r5
   32538:	4602      	mov	r2, r0
   3253a:	463b      	mov	r3, r7
   3253c:	4648      	mov	r0, r9
   3253e:	9701      	str	r7, [sp, #4]
   32540:	9700      	str	r7, [sp, #0]
   32542:	f7fc f8af 	bl	2e6a4 <at_interface_write>
   32546:	4681      	mov	r9, r0
   32548:	4628      	mov	r0, r5
   3254a:	f7ea fdeb 	bl	1d124 <strlen>
   3254e:	4548      	cmp	r0, r9
   32550:	f040 81e9 	bne.w	32926 <pdn_interface_pdn_id_get+0x79e>
   32554:	463b      	mov	r3, r7
   32556:	f44f 7280 	mov.w	r2, #256	; 0x100
   3255a:	e9cd 7700 	strd	r7, r7, [sp]
   3255e:	4629      	mov	r1, r5
   32560:	f8d8 0000 	ldr.w	r0, [r8]
   32564:	f7fc f986 	bl	2e874 <at_interface_read>
   32568:	4607      	mov	r7, r0
   3256a:	48b0      	ldr	r0, [pc, #704]	; (3282c <pdn_interface_pdn_id_get+0x6a4>)
   3256c:	f7ea fdda 	bl	1d124 <strlen>
   32570:	4287      	cmp	r7, r0
   32572:	4602      	mov	r2, r0
   32574:	f2c0 81c7 	blt.w	32906 <pdn_interface_pdn_id_get+0x77e>
   32578:	4629      	mov	r1, r5
   3257a:	48ac      	ldr	r0, [pc, #688]	; (3282c <pdn_interface_pdn_id_get+0x6a4>)
   3257c:	f00c fd9e 	bl	3f0bc <strncmp>
   32580:	2800      	cmp	r0, #0
   32582:	f040 81c0 	bne.w	32906 <pdn_interface_pdn_id_get+0x77e>
   32586:	4629      	mov	r1, r5
   32588:	4630      	mov	r0, r6
   3258a:	f7ff f92b 	bl	317e4 <pdn_id_get_parser>
   3258e:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   32592:	6858      	ldr	r0, [r3, #4]
   32594:	e643      	b.n	3221e <pdn_interface_pdn_id_get+0x96>
   32596:	4628      	mov	r0, r5
   32598:	f7ea fdc4 	bl	1d124 <strlen>
   3259c:	4606      	mov	r6, r0
   3259e:	6920      	ldr	r0, [r4, #16]
   325a0:	300c      	adds	r0, #12
   325a2:	f7ea fdbf 	bl	1d124 <strlen>
   325a6:	4286      	cmp	r6, r0
   325a8:	f47f aeab 	bne.w	32302 <pdn_interface_pdn_id_get+0x17a>
   325ac:	6921      	ldr	r1, [r4, #16]
   325ae:	4628      	mov	r0, r5
   325b0:	310c      	adds	r1, #12
   325b2:	f7ea fdad 	bl	1d110 <strcmp>
   325b6:	2800      	cmp	r0, #0
   325b8:	f47f aea3 	bne.w	32302 <pdn_interface_pdn_id_get+0x17a>
   325bc:	6923      	ldr	r3, [r4, #16]
   325be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   325c0:	07d2      	lsls	r2, r2, #31
   325c2:	f57f ae9e 	bpl.w	32302 <pdn_interface_pdn_id_get+0x17a>
   325c6:	2604      	movs	r6, #4
   325c8:	e799      	b.n	324fe <pdn_interface_pdn_id_get+0x376>
   325ca:	4628      	mov	r0, r5
   325cc:	f7ea fdaa 	bl	1d124 <strlen>
   325d0:	4606      	mov	r6, r0
   325d2:	6960      	ldr	r0, [r4, #20]
   325d4:	300c      	adds	r0, #12
   325d6:	f7ea fda5 	bl	1d124 <strlen>
   325da:	4286      	cmp	r6, r0
   325dc:	f47f ae97 	bne.w	3230e <pdn_interface_pdn_id_get+0x186>
   325e0:	6961      	ldr	r1, [r4, #20]
   325e2:	4628      	mov	r0, r5
   325e4:	310c      	adds	r1, #12
   325e6:	f7ea fd93 	bl	1d110 <strcmp>
   325ea:	2800      	cmp	r0, #0
   325ec:	f47f ae8f 	bne.w	3230e <pdn_interface_pdn_id_get+0x186>
   325f0:	6963      	ldr	r3, [r4, #20]
   325f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   325f4:	07d7      	lsls	r7, r2, #31
   325f6:	f57f ae8a 	bpl.w	3230e <pdn_interface_pdn_id_get+0x186>
   325fa:	2605      	movs	r6, #5
   325fc:	e77f      	b.n	324fe <pdn_interface_pdn_id_get+0x376>
   325fe:	4628      	mov	r0, r5
   32600:	f7ea fd90 	bl	1d124 <strlen>
   32604:	4606      	mov	r6, r0
   32606:	69a0      	ldr	r0, [r4, #24]
   32608:	300c      	adds	r0, #12
   3260a:	f7ea fd8b 	bl	1d124 <strlen>
   3260e:	4286      	cmp	r6, r0
   32610:	f47f ae83 	bne.w	3231a <pdn_interface_pdn_id_get+0x192>
   32614:	69a1      	ldr	r1, [r4, #24]
   32616:	4628      	mov	r0, r5
   32618:	310c      	adds	r1, #12
   3261a:	f7ea fd79 	bl	1d110 <strcmp>
   3261e:	2800      	cmp	r0, #0
   32620:	f47f ae7b 	bne.w	3231a <pdn_interface_pdn_id_get+0x192>
   32624:	69a3      	ldr	r3, [r4, #24]
   32626:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   32628:	07d6      	lsls	r6, r2, #31
   3262a:	f57f ae76 	bpl.w	3231a <pdn_interface_pdn_id_get+0x192>
   3262e:	2606      	movs	r6, #6
   32630:	e765      	b.n	324fe <pdn_interface_pdn_id_get+0x376>
   32632:	4628      	mov	r0, r5
   32634:	f7ea fd76 	bl	1d124 <strlen>
   32638:	4607      	mov	r7, r0
   3263a:	68e0      	ldr	r0, [r4, #12]
   3263c:	300c      	adds	r0, #12
   3263e:	f7ea fd71 	bl	1d124 <strlen>
   32642:	4287      	cmp	r7, r0
   32644:	f47f ae05 	bne.w	32252 <pdn_interface_pdn_id_get+0xca>
   32648:	68e1      	ldr	r1, [r4, #12]
   3264a:	4628      	mov	r0, r5
   3264c:	310c      	adds	r1, #12
   3264e:	f7ea fd5f 	bl	1d110 <strcmp>
   32652:	2800      	cmp	r0, #0
   32654:	f47f adfd 	bne.w	32252 <pdn_interface_pdn_id_get+0xca>
   32658:	68e3      	ldr	r3, [r4, #12]
   3265a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3265c:	0791      	lsls	r1, r2, #30
   3265e:	f53f af4e 	bmi.w	324fe <pdn_interface_pdn_id_get+0x376>
   32662:	e5f6      	b.n	32252 <pdn_interface_pdn_id_get+0xca>
   32664:	4628      	mov	r0, r5
   32666:	f7ea fd5d 	bl	1d124 <strlen>
   3266a:	4606      	mov	r6, r0
   3266c:	6920      	ldr	r0, [r4, #16]
   3266e:	300c      	adds	r0, #12
   32670:	f7ea fd58 	bl	1d124 <strlen>
   32674:	4286      	cmp	r6, r0
   32676:	f47f adf2 	bne.w	3225e <pdn_interface_pdn_id_get+0xd6>
   3267a:	6921      	ldr	r1, [r4, #16]
   3267c:	4628      	mov	r0, r5
   3267e:	310c      	adds	r1, #12
   32680:	f7ea fd46 	bl	1d110 <strcmp>
   32684:	2800      	cmp	r0, #0
   32686:	f47f adea 	bne.w	3225e <pdn_interface_pdn_id_get+0xd6>
   3268a:	6923      	ldr	r3, [r4, #16]
   3268c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3268e:	0792      	lsls	r2, r2, #30
   32690:	d499      	bmi.n	325c6 <pdn_interface_pdn_id_get+0x43e>
   32692:	e5e4      	b.n	3225e <pdn_interface_pdn_id_get+0xd6>
   32694:	4628      	mov	r0, r5
   32696:	f7ea fd45 	bl	1d124 <strlen>
   3269a:	4606      	mov	r6, r0
   3269c:	6960      	ldr	r0, [r4, #20]
   3269e:	300c      	adds	r0, #12
   326a0:	f7ea fd40 	bl	1d124 <strlen>
   326a4:	4286      	cmp	r6, r0
   326a6:	f47f ade0 	bne.w	3226a <pdn_interface_pdn_id_get+0xe2>
   326aa:	6961      	ldr	r1, [r4, #20]
   326ac:	4628      	mov	r0, r5
   326ae:	310c      	adds	r1, #12
   326b0:	f7ea fd2e 	bl	1d110 <strcmp>
   326b4:	2800      	cmp	r0, #0
   326b6:	f47f add8 	bne.w	3226a <pdn_interface_pdn_id_get+0xe2>
   326ba:	6963      	ldr	r3, [r4, #20]
   326bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   326be:	0797      	lsls	r7, r2, #30
   326c0:	d49b      	bmi.n	325fa <pdn_interface_pdn_id_get+0x472>
   326c2:	e5d2      	b.n	3226a <pdn_interface_pdn_id_get+0xe2>
   326c4:	4628      	mov	r0, r5
   326c6:	f7ea fd2d 	bl	1d124 <strlen>
   326ca:	4606      	mov	r6, r0
   326cc:	69a0      	ldr	r0, [r4, #24]
   326ce:	300c      	adds	r0, #12
   326d0:	f7ea fd28 	bl	1d124 <strlen>
   326d4:	4286      	cmp	r6, r0
   326d6:	f47f adce 	bne.w	32276 <pdn_interface_pdn_id_get+0xee>
   326da:	69a1      	ldr	r1, [r4, #24]
   326dc:	4628      	mov	r0, r5
   326de:	310c      	adds	r1, #12
   326e0:	f7ea fd16 	bl	1d110 <strcmp>
   326e4:	2800      	cmp	r0, #0
   326e6:	f47f adc6 	bne.w	32276 <pdn_interface_pdn_id_get+0xee>
   326ea:	69a3      	ldr	r3, [r4, #24]
   326ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   326ee:	0796      	lsls	r6, r2, #30
   326f0:	d49d      	bmi.n	3262e <pdn_interface_pdn_id_get+0x4a6>
   326f2:	e5c0      	b.n	32276 <pdn_interface_pdn_id_get+0xee>
   326f4:	4628      	mov	r0, r5
   326f6:	f7ea fd15 	bl	1d124 <strlen>
   326fa:	4606      	mov	r6, r0
   326fc:	69e0      	ldr	r0, [r4, #28]
   326fe:	300c      	adds	r0, #12
   32700:	f7ea fd10 	bl	1d124 <strlen>
   32704:	4286      	cmp	r6, r0
   32706:	f47f adbc 	bne.w	32282 <pdn_interface_pdn_id_get+0xfa>
   3270a:	69e1      	ldr	r1, [r4, #28]
   3270c:	4628      	mov	r0, r5
   3270e:	310c      	adds	r1, #12
   32710:	f7ea fcfe 	bl	1d110 <strcmp>
   32714:	2800      	cmp	r0, #0
   32716:	f47f adb4 	bne.w	32282 <pdn_interface_pdn_id_get+0xfa>
   3271a:	69e3      	ldr	r3, [r4, #28]
   3271c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3271e:	0790      	lsls	r0, r2, #30
   32720:	f57f adaf 	bpl.w	32282 <pdn_interface_pdn_id_get+0xfa>
   32724:	2607      	movs	r6, #7
   32726:	e6ea      	b.n	324fe <pdn_interface_pdn_id_get+0x376>
   32728:	4628      	mov	r0, r5
   3272a:	f7ea fcfb 	bl	1d124 <strlen>
   3272e:	4606      	mov	r6, r0
   32730:	6a20      	ldr	r0, [r4, #32]
   32732:	300c      	adds	r0, #12
   32734:	f7ea fcf6 	bl	1d124 <strlen>
   32738:	4286      	cmp	r6, r0
   3273a:	f47f ada8 	bne.w	3228e <pdn_interface_pdn_id_get+0x106>
   3273e:	6a21      	ldr	r1, [r4, #32]
   32740:	4628      	mov	r0, r5
   32742:	310c      	adds	r1, #12
   32744:	f7ea fce4 	bl	1d110 <strcmp>
   32748:	2800      	cmp	r0, #0
   3274a:	f47f ada0 	bne.w	3228e <pdn_interface_pdn_id_get+0x106>
   3274e:	6a23      	ldr	r3, [r4, #32]
   32750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   32752:	0791      	lsls	r1, r2, #30
   32754:	f57f ad9b 	bpl.w	3228e <pdn_interface_pdn_id_get+0x106>
   32758:	2608      	movs	r6, #8
   3275a:	e6d0      	b.n	324fe <pdn_interface_pdn_id_get+0x376>
   3275c:	4628      	mov	r0, r5
   3275e:	f7ea fce1 	bl	1d124 <strlen>
   32762:	4606      	mov	r6, r0
   32764:	69e0      	ldr	r0, [r4, #28]
   32766:	300c      	adds	r0, #12
   32768:	f7ea fcdc 	bl	1d124 <strlen>
   3276c:	4286      	cmp	r6, r0
   3276e:	f47f adda 	bne.w	32326 <pdn_interface_pdn_id_get+0x19e>
   32772:	69e1      	ldr	r1, [r4, #28]
   32774:	4628      	mov	r0, r5
   32776:	310c      	adds	r1, #12
   32778:	f7ea fcca 	bl	1d110 <strcmp>
   3277c:	2800      	cmp	r0, #0
   3277e:	f47f add2 	bne.w	32326 <pdn_interface_pdn_id_get+0x19e>
   32782:	69e3      	ldr	r3, [r4, #28]
   32784:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   32786:	07d0      	lsls	r0, r2, #31
   32788:	d4cc      	bmi.n	32724 <pdn_interface_pdn_id_get+0x59c>
   3278a:	e5cc      	b.n	32326 <pdn_interface_pdn_id_get+0x19e>
   3278c:	4628      	mov	r0, r5
   3278e:	f7ea fcc9 	bl	1d124 <strlen>
   32792:	4606      	mov	r6, r0
   32794:	6a20      	ldr	r0, [r4, #32]
   32796:	300c      	adds	r0, #12
   32798:	f7ea fcc4 	bl	1d124 <strlen>
   3279c:	4286      	cmp	r6, r0
   3279e:	f47f adc8 	bne.w	32332 <pdn_interface_pdn_id_get+0x1aa>
   327a2:	6a21      	ldr	r1, [r4, #32]
   327a4:	4628      	mov	r0, r5
   327a6:	310c      	adds	r1, #12
   327a8:	f7ea fcb2 	bl	1d110 <strcmp>
   327ac:	2800      	cmp	r0, #0
   327ae:	f47f adc0 	bne.w	32332 <pdn_interface_pdn_id_get+0x1aa>
   327b2:	6a23      	ldr	r3, [r4, #32]
   327b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   327b6:	07d1      	lsls	r1, r2, #31
   327b8:	d4ce      	bmi.n	32758 <pdn_interface_pdn_id_get+0x5d0>
   327ba:	e5ba      	b.n	32332 <pdn_interface_pdn_id_get+0x1aa>
   327bc:	4628      	mov	r0, r5
   327be:	f7ea fcb1 	bl	1d124 <strlen>
   327c2:	4606      	mov	r6, r0
   327c4:	68a0      	ldr	r0, [r4, #8]
   327c6:	300c      	adds	r0, #12
   327c8:	f7ea fcac 	bl	1d124 <strlen>
   327cc:	4286      	cmp	r6, r0
   327ce:	f47f ad8c 	bne.w	322ea <pdn_interface_pdn_id_get+0x162>
   327d2:	68a1      	ldr	r1, [r4, #8]
   327d4:	4628      	mov	r0, r5
   327d6:	310c      	adds	r1, #12
   327d8:	f7ea fc9a 	bl	1d110 <strcmp>
   327dc:	2800      	cmp	r0, #0
   327de:	f47f ad84 	bne.w	322ea <pdn_interface_pdn_id_get+0x162>
   327e2:	68a3      	ldr	r3, [r4, #8]
   327e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   327e6:	07d0      	lsls	r0, r2, #31
   327e8:	f57f ad7f 	bpl.w	322ea <pdn_interface_pdn_id_get+0x162>
   327ec:	2602      	movs	r6, #2
   327ee:	e686      	b.n	324fe <pdn_interface_pdn_id_get+0x376>
   327f0:	4628      	mov	r0, r5
   327f2:	f7ea fc97 	bl	1d124 <strlen>
   327f6:	4606      	mov	r6, r0
   327f8:	68a0      	ldr	r0, [r4, #8]
   327fa:	300c      	adds	r0, #12
   327fc:	f7ea fc92 	bl	1d124 <strlen>
   32800:	4286      	cmp	r6, r0
   32802:	f47f ad20 	bne.w	32246 <pdn_interface_pdn_id_get+0xbe>
   32806:	68a1      	ldr	r1, [r4, #8]
   32808:	4628      	mov	r0, r5
   3280a:	310c      	adds	r1, #12
   3280c:	f7ea fc80 	bl	1d110 <strcmp>
   32810:	2800      	cmp	r0, #0
   32812:	f47f ad18 	bne.w	32246 <pdn_interface_pdn_id_get+0xbe>
   32816:	68a3      	ldr	r3, [r4, #8]
   32818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3281a:	0790      	lsls	r0, r2, #30
   3281c:	d4e6      	bmi.n	327ec <pdn_interface_pdn_id_get+0x664>
   3281e:	e512      	b.n	32246 <pdn_interface_pdn_id_get+0xbe>
   32820:	20024e6c 	.word	0x20024e6c
   32824:	00040ef4 	.word	0x00040ef4
   32828:	00040ef0 	.word	0x00040ef0
   3282c:	00040f04 	.word	0x00040f04
   32830:	20024e68 	.word	0x20024e68
   32834:	4628      	mov	r0, r5
   32836:	f7ea fc75 	bl	1d124 <strlen>
   3283a:	4606      	mov	r6, r0
   3283c:	6860      	ldr	r0, [r4, #4]
   3283e:	300c      	adds	r0, #12
   32840:	f7ea fc70 	bl	1d124 <strlen>
   32844:	4286      	cmp	r6, r0
   32846:	f47f acf8 	bne.w	3223a <pdn_interface_pdn_id_get+0xb2>
   3284a:	6861      	ldr	r1, [r4, #4]
   3284c:	4628      	mov	r0, r5
   3284e:	310c      	adds	r1, #12
   32850:	f7ea fc5e 	bl	1d110 <strcmp>
   32854:	2800      	cmp	r0, #0
   32856:	f47f acf0 	bne.w	3223a <pdn_interface_pdn_id_get+0xb2>
   3285a:	6863      	ldr	r3, [r4, #4]
   3285c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3285e:	0796      	lsls	r6, r2, #30
   32860:	f57f aceb 	bpl.w	3223a <pdn_interface_pdn_id_get+0xb2>
   32864:	2601      	movs	r6, #1
   32866:	e64a      	b.n	324fe <pdn_interface_pdn_id_get+0x376>
   32868:	4628      	mov	r0, r5
   3286a:	f7ea fc5b 	bl	1d124 <strlen>
   3286e:	4606      	mov	r6, r0
   32870:	6860      	ldr	r0, [r4, #4]
   32872:	300c      	adds	r0, #12
   32874:	f7ea fc56 	bl	1d124 <strlen>
   32878:	4286      	cmp	r6, r0
   3287a:	f47f ad30 	bne.w	322de <pdn_interface_pdn_id_get+0x156>
   3287e:	6861      	ldr	r1, [r4, #4]
   32880:	4628      	mov	r0, r5
   32882:	310c      	adds	r1, #12
   32884:	f7ea fc44 	bl	1d110 <strcmp>
   32888:	2800      	cmp	r0, #0
   3288a:	f47f ad28 	bne.w	322de <pdn_interface_pdn_id_get+0x156>
   3288e:	6863      	ldr	r3, [r4, #4]
   32890:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   32892:	07d6      	lsls	r6, r2, #31
   32894:	d4e6      	bmi.n	32864 <pdn_interface_pdn_id_get+0x6dc>
   32896:	e522      	b.n	322de <pdn_interface_pdn_id_get+0x156>
   32898:	4608      	mov	r0, r1
   3289a:	f7ea fc43 	bl	1d124 <strlen>
   3289e:	4606      	mov	r6, r0
   328a0:	6820      	ldr	r0, [r4, #0]
   328a2:	300c      	adds	r0, #12
   328a4:	f7ea fc3e 	bl	1d124 <strlen>
   328a8:	4286      	cmp	r6, r0
   328aa:	f47f acc0 	bne.w	3222e <pdn_interface_pdn_id_get+0xa6>
   328ae:	6821      	ldr	r1, [r4, #0]
   328b0:	4628      	mov	r0, r5
   328b2:	310c      	adds	r1, #12
   328b4:	f7ea fc2c 	bl	1d110 <strcmp>
   328b8:	4606      	mov	r6, r0
   328ba:	2800      	cmp	r0, #0
   328bc:	f47f acb7 	bne.w	3222e <pdn_interface_pdn_id_get+0xa6>
   328c0:	6823      	ldr	r3, [r4, #0]
   328c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   328c4:	0797      	lsls	r7, r2, #30
   328c6:	f53f ae1a 	bmi.w	324fe <pdn_interface_pdn_id_get+0x376>
   328ca:	e4b0      	b.n	3222e <pdn_interface_pdn_id_get+0xa6>
   328cc:	4608      	mov	r0, r1
   328ce:	f7ea fc29 	bl	1d124 <strlen>
   328d2:	4606      	mov	r6, r0
   328d4:	6820      	ldr	r0, [r4, #0]
   328d6:	300c      	adds	r0, #12
   328d8:	f7ea fc24 	bl	1d124 <strlen>
   328dc:	4286      	cmp	r6, r0
   328de:	f47f acf8 	bne.w	322d2 <pdn_interface_pdn_id_get+0x14a>
   328e2:	6821      	ldr	r1, [r4, #0]
   328e4:	4628      	mov	r0, r5
   328e6:	310c      	adds	r1, #12
   328e8:	f7ea fc12 	bl	1d110 <strcmp>
   328ec:	4606      	mov	r6, r0
   328ee:	2800      	cmp	r0, #0
   328f0:	f47f acef 	bne.w	322d2 <pdn_interface_pdn_id_get+0x14a>
   328f4:	6823      	ldr	r3, [r4, #0]
   328f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   328f8:	07d7      	lsls	r7, r2, #31
   328fa:	f53f ae00 	bmi.w	324fe <pdn_interface_pdn_id_get+0x376>
   328fe:	e4e8      	b.n	322d2 <pdn_interface_pdn_id_get+0x14a>
   32900:	f04f 30ff 	mov.w	r0, #4294967295
   32904:	4770      	bx	lr
   32906:	480b      	ldr	r0, [pc, #44]	; (32934 <pdn_interface_pdn_id_get+0x7ac>)
   32908:	f7ea fc0c 	bl	1d124 <strlen>
   3290c:	490a      	ldr	r1, [pc, #40]	; (32938 <pdn_interface_pdn_id_get+0x7b0>)
   3290e:	4602      	mov	r2, r0
   32910:	4808      	ldr	r0, [pc, #32]	; (32934 <pdn_interface_pdn_id_get+0x7ac>)
   32912:	f00c fbd3 	bl	3f0bc <strncmp>
   32916:	b930      	cbnz	r0, 32926 <pdn_interface_pdn_id_get+0x79e>
   32918:	2008      	movs	r0, #8
   3291a:	f7f4 f929 	bl	26b70 <bsd_os_errno_set>
   3291e:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   32922:	6858      	ldr	r0, [r3, #4]
   32924:	e47b      	b.n	3221e <pdn_interface_pdn_id_get+0x96>
   32926:	2005      	movs	r0, #5
   32928:	f7f4 f922 	bl	26b70 <bsd_os_errno_set>
   3292c:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   32930:	6858      	ldr	r0, [r3, #4]
   32932:	e474      	b.n	3221e <pdn_interface_pdn_id_get+0x96>
   32934:	00040f48 	.word	0x00040f48
   32938:	20024e6c 	.word	0x20024e6c

0003293c <linked_list_init>:
   3293c:	b128      	cbz	r0, 3294a <linked_list_init+0xe>
   3293e:	2300      	movs	r3, #0
   32940:	6003      	str	r3, [r0, #0]
   32942:	e9c0 3301 	strd	r3, r3, [r0, #4]
   32946:	4618      	mov	r0, r3
   32948:	4770      	bx	lr
   3294a:	2007      	movs	r0, #7
   3294c:	4770      	bx	lr
   3294e:	bf00      	nop

00032950 <linked_list_push>:
   32950:	6802      	ldr	r2, [r0, #0]
   32952:	4603      	mov	r3, r0
   32954:	3201      	adds	r2, #1
   32956:	d00e      	beq.n	32976 <linked_list_push+0x26>
   32958:	2200      	movs	r2, #0
   3295a:	600a      	str	r2, [r1, #0]
   3295c:	6802      	ldr	r2, [r0, #0]
   3295e:	b13a      	cbz	r2, 32970 <linked_list_push+0x20>
   32960:	6882      	ldr	r2, [r0, #8]
   32962:	6011      	str	r1, [r2, #0]
   32964:	6081      	str	r1, [r0, #8]
   32966:	681a      	ldr	r2, [r3, #0]
   32968:	2000      	movs	r0, #0
   3296a:	3201      	adds	r2, #1
   3296c:	601a      	str	r2, [r3, #0]
   3296e:	4770      	bx	lr
   32970:	e9c0 1101 	strd	r1, r1, [r0, #4]
   32974:	e7f7      	b.n	32966 <linked_list_push+0x16>
   32976:	2004      	movs	r0, #4
   32978:	4770      	bx	lr
   3297a:	bf00      	nop

0003297c <linked_list_pop>:
   3297c:	4603      	mov	r3, r0
   3297e:	6800      	ldr	r0, [r0, #0]
   32980:	b128      	cbz	r0, 3298e <linked_list_pop+0x12>
   32982:	6858      	ldr	r0, [r3, #4]
   32984:	681a      	ldr	r2, [r3, #0]
   32986:	6801      	ldr	r1, [r0, #0]
   32988:	3a01      	subs	r2, #1
   3298a:	6059      	str	r1, [r3, #4]
   3298c:	601a      	str	r2, [r3, #0]
   3298e:	4770      	bx	lr

00032990 <linked_list_peek>:
   32990:	6803      	ldr	r3, [r0, #0]
   32992:	b10b      	cbz	r3, 32998 <linked_list_peek+0x8>
   32994:	6840      	ldr	r0, [r0, #4]
   32996:	4770      	bx	lr
   32998:	4618      	mov	r0, r3
   3299a:	4770      	bx	lr

0003299c <linked_list_size_get>:
   3299c:	6800      	ldr	r0, [r0, #0]
   3299e:	4770      	bx	lr

000329a0 <linked_list_get_next>:
   329a0:	6800      	ldr	r0, [r0, #0]
   329a2:	4770      	bx	lr

000329a4 <nrf_socket>:
   329a4:	b570      	push	{r4, r5, r6, lr}
   329a6:	4604      	mov	r4, r0
   329a8:	460d      	mov	r5, r1
   329aa:	4616      	mov	r6, r2
   329ac:	f7fd fcd6 	bl	3035c <bsd_platform_af_method_table_get>
   329b0:	b130      	cbz	r0, 329c0 <nrf_socket+0x1c>
   329b2:	6803      	ldr	r3, [r0, #0]
   329b4:	4632      	mov	r2, r6
   329b6:	4629      	mov	r1, r5
   329b8:	4620      	mov	r0, r4
   329ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   329be:	4718      	bx	r3
   329c0:	f04f 30ff 	mov.w	r0, #4294967295
   329c4:	bd70      	pop	{r4, r5, r6, pc}
   329c6:	bf00      	nop

000329c8 <nrf_close>:
   329c8:	b510      	push	{r4, lr}
   329ca:	4604      	mov	r4, r0
   329cc:	f7fd fd1a 	bl	30404 <bsd_platform_fd_method_table_get>
   329d0:	b120      	cbz	r0, 329dc <nrf_close+0x14>
   329d2:	6843      	ldr	r3, [r0, #4]
   329d4:	4620      	mov	r0, r4
   329d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   329da:	4718      	bx	r3
   329dc:	f04f 30ff 	mov.w	r0, #4294967295
   329e0:	bd10      	pop	{r4, pc}
   329e2:	bf00      	nop

000329e4 <nrf_sendto>:
   329e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   329e8:	460d      	mov	r5, r1
   329ea:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   329ee:	4616      	mov	r6, r2
   329f0:	461f      	mov	r7, r3
   329f2:	4604      	mov	r4, r0
   329f4:	f7fd fd06 	bl	30404 <bsd_platform_fd_method_table_get>
   329f8:	b158      	cbz	r0, 32a12 <nrf_sendto+0x2e>
   329fa:	e9cd 8908 	strd	r8, r9, [sp, #32]
   329fe:	f8d0 e008 	ldr.w	lr, [r0, #8]
   32a02:	463b      	mov	r3, r7
   32a04:	4632      	mov	r2, r6
   32a06:	4629      	mov	r1, r5
   32a08:	4620      	mov	r0, r4
   32a0a:	46f4      	mov	ip, lr
   32a0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32a10:	4760      	bx	ip
   32a12:	f04f 30ff 	mov.w	r0, #4294967295
   32a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32a1a:	bf00      	nop

00032a1c <nrf_send>:
   32a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32a20:	b082      	sub	sp, #8
   32a22:	460e      	mov	r6, r1
   32a24:	4617      	mov	r7, r2
   32a26:	4698      	mov	r8, r3
   32a28:	4605      	mov	r5, r0
   32a2a:	f7fd fceb 	bl	30404 <bsd_platform_fd_method_table_get>
   32a2e:	b160      	cbz	r0, 32a4a <nrf_send+0x2e>
   32a30:	4604      	mov	r4, r0
   32a32:	2000      	movs	r0, #0
   32a34:	e9cd 0000 	strd	r0, r0, [sp]
   32a38:	4643      	mov	r3, r8
   32a3a:	463a      	mov	r2, r7
   32a3c:	4631      	mov	r1, r6
   32a3e:	4628      	mov	r0, r5
   32a40:	68a4      	ldr	r4, [r4, #8]
   32a42:	47a0      	blx	r4
   32a44:	b002      	add	sp, #8
   32a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32a4a:	f04f 30ff 	mov.w	r0, #4294967295
   32a4e:	e7f9      	b.n	32a44 <nrf_send+0x28>

00032a50 <nrf_write>:
   32a50:	b5f0      	push	{r4, r5, r6, r7, lr}
   32a52:	b083      	sub	sp, #12
   32a54:	460e      	mov	r6, r1
   32a56:	4617      	mov	r7, r2
   32a58:	4605      	mov	r5, r0
   32a5a:	f7fd fcd3 	bl	30404 <bsd_platform_fd_method_table_get>
   32a5e:	b150      	cbz	r0, 32a76 <nrf_write+0x26>
   32a60:	2300      	movs	r3, #0
   32a62:	4604      	mov	r4, r0
   32a64:	e9cd 3300 	strd	r3, r3, [sp]
   32a68:	463a      	mov	r2, r7
   32a6a:	4631      	mov	r1, r6
   32a6c:	4628      	mov	r0, r5
   32a6e:	68a4      	ldr	r4, [r4, #8]
   32a70:	47a0      	blx	r4
   32a72:	b003      	add	sp, #12
   32a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32a76:	f04f 30ff 	mov.w	r0, #4294967295
   32a7a:	e7fa      	b.n	32a72 <nrf_write+0x22>

00032a7c <nrf_recvfrom>:
   32a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32a80:	460d      	mov	r5, r1
   32a82:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   32a86:	4616      	mov	r6, r2
   32a88:	461f      	mov	r7, r3
   32a8a:	4604      	mov	r4, r0
   32a8c:	f7fd fcba 	bl	30404 <bsd_platform_fd_method_table_get>
   32a90:	b158      	cbz	r0, 32aaa <nrf_recvfrom+0x2e>
   32a92:	e9cd 8908 	strd	r8, r9, [sp, #32]
   32a96:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   32a9a:	463b      	mov	r3, r7
   32a9c:	4632      	mov	r2, r6
   32a9e:	4629      	mov	r1, r5
   32aa0:	4620      	mov	r0, r4
   32aa2:	46f4      	mov	ip, lr
   32aa4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32aa8:	4760      	bx	ip
   32aaa:	f04f 30ff 	mov.w	r0, #4294967295
   32aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32ab2:	bf00      	nop

00032ab4 <nrf_recv>:
   32ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32ab8:	b082      	sub	sp, #8
   32aba:	460e      	mov	r6, r1
   32abc:	4617      	mov	r7, r2
   32abe:	4698      	mov	r8, r3
   32ac0:	4605      	mov	r5, r0
   32ac2:	f7fd fc9f 	bl	30404 <bsd_platform_fd_method_table_get>
   32ac6:	b160      	cbz	r0, 32ae2 <nrf_recv+0x2e>
   32ac8:	4604      	mov	r4, r0
   32aca:	2000      	movs	r0, #0
   32acc:	e9cd 0000 	strd	r0, r0, [sp]
   32ad0:	4643      	mov	r3, r8
   32ad2:	463a      	mov	r2, r7
   32ad4:	4631      	mov	r1, r6
   32ad6:	4628      	mov	r0, r5
   32ad8:	68e4      	ldr	r4, [r4, #12]
   32ada:	47a0      	blx	r4
   32adc:	b002      	add	sp, #8
   32ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32ae2:	f04f 30ff 	mov.w	r0, #4294967295
   32ae6:	e7f9      	b.n	32adc <nrf_recv+0x28>

00032ae8 <nrf_read>:
   32ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   32aea:	b083      	sub	sp, #12
   32aec:	460e      	mov	r6, r1
   32aee:	4617      	mov	r7, r2
   32af0:	4605      	mov	r5, r0
   32af2:	f7fd fc87 	bl	30404 <bsd_platform_fd_method_table_get>
   32af6:	b150      	cbz	r0, 32b0e <nrf_read+0x26>
   32af8:	2300      	movs	r3, #0
   32afa:	4604      	mov	r4, r0
   32afc:	e9cd 3300 	strd	r3, r3, [sp]
   32b00:	463a      	mov	r2, r7
   32b02:	4631      	mov	r1, r6
   32b04:	4628      	mov	r0, r5
   32b06:	68e4      	ldr	r4, [r4, #12]
   32b08:	47a0      	blx	r4
   32b0a:	b003      	add	sp, #12
   32b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32b0e:	f04f 30ff 	mov.w	r0, #4294967295
   32b12:	e7fa      	b.n	32b0a <nrf_read+0x22>

00032b14 <nrf_connect>:
   32b14:	b570      	push	{r4, r5, r6, lr}
   32b16:	460d      	mov	r5, r1
   32b18:	4616      	mov	r6, r2
   32b1a:	4604      	mov	r4, r0
   32b1c:	f7fd fc72 	bl	30404 <bsd_platform_fd_method_table_get>
   32b20:	b130      	cbz	r0, 32b30 <nrf_connect+0x1c>
   32b22:	6943      	ldr	r3, [r0, #20]
   32b24:	4632      	mov	r2, r6
   32b26:	4629      	mov	r1, r5
   32b28:	4620      	mov	r0, r4
   32b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   32b2e:	4718      	bx	r3
   32b30:	f04f 30ff 	mov.w	r0, #4294967295
   32b34:	bd70      	pop	{r4, r5, r6, pc}
   32b36:	bf00      	nop

00032b38 <nrf_listen>:
   32b38:	b570      	push	{r4, r5, r6, lr}
   32b3a:	460d      	mov	r5, r1
   32b3c:	4604      	mov	r4, r0
   32b3e:	f7fd fc61 	bl	30404 <bsd_platform_fd_method_table_get>
   32b42:	b128      	cbz	r0, 32b50 <nrf_listen+0x18>
   32b44:	6983      	ldr	r3, [r0, #24]
   32b46:	4629      	mov	r1, r5
   32b48:	4620      	mov	r0, r4
   32b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   32b4e:	4718      	bx	r3
   32b50:	f04f 30ff 	mov.w	r0, #4294967295
   32b54:	bd70      	pop	{r4, r5, r6, pc}
   32b56:	bf00      	nop

00032b58 <nrf_accept>:
   32b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32b5c:	460d      	mov	r5, r1
   32b5e:	4616      	mov	r6, r2
   32b60:	4604      	mov	r4, r0
   32b62:	f7fd fc4f 	bl	30404 <bsd_platform_fd_method_table_get>
   32b66:	b140      	cbz	r0, 32b7a <nrf_accept+0x22>
   32b68:	69c7      	ldr	r7, [r0, #28]
   32b6a:	4632      	mov	r2, r6
   32b6c:	4629      	mov	r1, r5
   32b6e:	4620      	mov	r0, r4
   32b70:	46bc      	mov	ip, r7
   32b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   32b76:	2300      	movs	r3, #0
   32b78:	4760      	bx	ip
   32b7a:	f04f 30ff 	mov.w	r0, #4294967295
   32b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32b82:	bf00      	nop

00032b84 <nrf_bind>:
   32b84:	b570      	push	{r4, r5, r6, lr}
   32b86:	460d      	mov	r5, r1
   32b88:	4616      	mov	r6, r2
   32b8a:	4604      	mov	r4, r0
   32b8c:	f7fd fc3a 	bl	30404 <bsd_platform_fd_method_table_get>
   32b90:	b130      	cbz	r0, 32ba0 <nrf_bind+0x1c>
   32b92:	6903      	ldr	r3, [r0, #16]
   32b94:	4632      	mov	r2, r6
   32b96:	4629      	mov	r1, r5
   32b98:	4620      	mov	r0, r4
   32b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   32b9e:	4718      	bx	r3
   32ba0:	f04f 30ff 	mov.w	r0, #4294967295
   32ba4:	bd70      	pop	{r4, r5, r6, pc}
   32ba6:	bf00      	nop

00032ba8 <nrf_setsockopt>:
   32ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32bac:	f8dd 8018 	ldr.w	r8, [sp, #24]
   32bb0:	460d      	mov	r5, r1
   32bb2:	4616      	mov	r6, r2
   32bb4:	461f      	mov	r7, r3
   32bb6:	4604      	mov	r4, r0
   32bb8:	f7fd fc24 	bl	30404 <bsd_platform_fd_method_table_get>
   32bbc:	b158      	cbz	r0, 32bd6 <nrf_setsockopt+0x2e>
   32bbe:	f8cd 8018 	str.w	r8, [sp, #24]
   32bc2:	f8d0 e020 	ldr.w	lr, [r0, #32]
   32bc6:	463b      	mov	r3, r7
   32bc8:	4632      	mov	r2, r6
   32bca:	4629      	mov	r1, r5
   32bcc:	4620      	mov	r0, r4
   32bce:	46f4      	mov	ip, lr
   32bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   32bd4:	4760      	bx	ip
   32bd6:	f04f 30ff 	mov.w	r0, #4294967295
   32bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32bde:	bf00      	nop

00032be0 <nrf_getsockopt>:
   32be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32be4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   32be8:	460d      	mov	r5, r1
   32bea:	4616      	mov	r6, r2
   32bec:	461f      	mov	r7, r3
   32bee:	4604      	mov	r4, r0
   32bf0:	f7fd fc08 	bl	30404 <bsd_platform_fd_method_table_get>
   32bf4:	b158      	cbz	r0, 32c0e <nrf_getsockopt+0x2e>
   32bf6:	f8cd 8018 	str.w	r8, [sp, #24]
   32bfa:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   32bfe:	463b      	mov	r3, r7
   32c00:	4632      	mov	r2, r6
   32c02:	4629      	mov	r1, r5
   32c04:	4620      	mov	r0, r4
   32c06:	46f4      	mov	ip, lr
   32c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   32c0c:	4760      	bx	ip
   32c0e:	f04f 30ff 	mov.w	r0, #4294967295
   32c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32c16:	bf00      	nop

00032c18 <nrf_getaddrinfo>:
   32c18:	f7fd bc64 	b.w	304e4 <bsd_platform_getaddrinfo>

00032c1c <nrf_freeaddrinfo>:
   32c1c:	f7fd bc64 	b.w	304e8 <bsd_platform_freeaddrinfo>

00032c20 <nrf_poll>:
   32c20:	f7fd bc64 	b.w	304ec <bsd_platform_poll>

00032c24 <nrf_fcntl>:
   32c24:	f7fd bcbc 	b.w	305a0 <bsd_platform_fcntl>

00032c28 <at_client_evt_handler>:
   32c28:	b120      	cbz	r0, 32c34 <at_client_evt_handler+0xc>
   32c2a:	f850 1b08 	ldr.w	r1, [r0], #8
   32c2e:	0c09      	lsrs	r1, r1, #16
   32c30:	f7fb be80 	b.w	2e934 <rpc_at_event_handler>
   32c34:	4770      	bx	lr
   32c36:	bf00      	nop

00032c38 <rpc_at_client_init>:
   32c38:	4801      	ldr	r0, [pc, #4]	; (32c40 <rpc_at_client_init+0x8>)
   32c3a:	f001 bdf3 	b.w	34824 <rpc_client_register>
   32c3e:	bf00      	nop
   32c40:	00040f5c 	.word	0x00040f5c

00032c44 <rpc_at_client_request_alloc>:
   32c44:	b180      	cbz	r0, 32c68 <rpc_at_client_request_alloc+0x24>
   32c46:	2300      	movs	r3, #0
   32c48:	b510      	push	{r4, lr}
   32c4a:	b082      	sub	sp, #8
   32c4c:	aa02      	add	r2, sp, #8
   32c4e:	4604      	mov	r4, r0
   32c50:	f842 3d04 	str.w	r3, [r2, #-4]!
   32c54:	2003      	movs	r0, #3
   32c56:	f002 f81d 	bl	34c94 <rpc_message_alloc>
   32c5a:	b918      	cbnz	r0, 32c64 <rpc_at_client_request_alloc+0x20>
   32c5c:	9b01      	ldr	r3, [sp, #4]
   32c5e:	b10b      	cbz	r3, 32c64 <rpc_at_client_request_alloc+0x20>
   32c60:	3308      	adds	r3, #8
   32c62:	6023      	str	r3, [r4, #0]
   32c64:	b002      	add	sp, #8
   32c66:	bd10      	pop	{r4, pc}
   32c68:	200e      	movs	r0, #14
   32c6a:	4770      	bx	lr

00032c6c <rpc_at_client_request_send>:
   32c6c:	b150      	cbz	r0, 32c84 <rpc_at_client_request_send+0x18>
   32c6e:	4603      	mov	r3, r0
   32c70:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   32c74:	2003      	movs	r0, #3
   32c76:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   32c7a:	f843 1d08 	str.w	r1, [r3, #-8]!
   32c7e:	4619      	mov	r1, r3
   32c80:	f001 bff0 	b.w	34c64 <rpc_message_send>
   32c84:	200e      	movs	r0, #14
   32c86:	4770      	bx	lr

00032c88 <rpc_at_client_message_free>:
   32c88:	b120      	cbz	r0, 32c94 <rpc_at_client_message_free+0xc>
   32c8a:	f1a0 0108 	sub.w	r1, r0, #8
   32c8e:	2003      	movs	r0, #3
   32c90:	f002 b832 	b.w	34cf8 <rpc_message_free>
   32c94:	200e      	movs	r0, #14
   32c96:	4770      	bx	lr

00032c98 <rpc_at_client_data_free>:
   32c98:	b118      	cbz	r0, 32ca2 <rpc_at_client_data_free+0xa>
   32c9a:	4601      	mov	r1, r0
   32c9c:	2003      	movs	r0, #3
   32c9e:	f002 b93d 	b.w	34f1c <rpc_message_data_free>
   32ca2:	200e      	movs	r0, #14
   32ca4:	4770      	bx	lr
   32ca6:	bf00      	nop

00032ca8 <ip_recvd_packet_free_cb>:
   32ca8:	b510      	push	{r4, lr}
   32caa:	4604      	mov	r4, r0
   32cac:	6800      	ldr	r0, [r0, #0]
   32cae:	f7fc faff 	bl	2f2b0 <rpc_ip_client_data_free>
   32cb2:	68a0      	ldr	r0, [r4, #8]
   32cb4:	b118      	cbz	r0, 32cbe <ip_recvd_packet_free_cb+0x16>
   32cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32cba:	f7fc ba99 	b.w	2f1f0 <nrf_free>
   32cbe:	bd10      	pop	{r4, pc}

00032cc0 <rpc_error_to_nrf_bsd_error>:
   32cc0:	2810      	cmp	r0, #16
   32cc2:	bf9a      	itte	ls
   32cc4:	4b02      	ldrls	r3, [pc, #8]	; (32cd0 <rpc_error_to_nrf_bsd_error+0x10>)
   32cc6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   32cca:	202d      	movhi	r0, #45	; 0x2d
   32ccc:	4770      	bx	lr
   32cce:	bf00      	nop
   32cd0:	00040f6c 	.word	0x00040f6c

00032cd4 <ip_interface_request_create>:
   32cd4:	b570      	push	{r4, r5, r6, lr}
   32cd6:	2500      	movs	r5, #0
   32cd8:	b082      	sub	sp, #8
   32cda:	ac02      	add	r4, sp, #8
   32cdc:	f844 5d04 	str.w	r5, [r4, #-4]!
   32ce0:	4606      	mov	r6, r0
   32ce2:	460d      	mov	r5, r1
   32ce4:	4620      	mov	r0, r4
   32ce6:	4619      	mov	r1, r3
   32ce8:	4614      	mov	r4, r2
   32cea:	f7fc faaf 	bl	2f24c <rpc_ip_client_request_alloc>
   32cee:	b960      	cbnz	r0, 32d0a <ip_interface_request_create+0x36>
   32cf0:	9b01      	ldr	r3, [sp, #4]
   32cf2:	2208      	movs	r2, #8
   32cf4:	7258      	strb	r0, [r3, #9]
   32cf6:	7298      	strb	r0, [r3, #10]
   32cf8:	72d8      	strb	r0, [r3, #11]
   32cfa:	4618      	mov	r0, r3
   32cfc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   32d00:	60dc      	str	r4, [r3, #12]
   32d02:	611d      	str	r5, [r3, #16]
   32d04:	721a      	strb	r2, [r3, #8]
   32d06:	b002      	add	sp, #8
   32d08:	bd70      	pop	{r4, r5, r6, pc}
   32d0a:	9b01      	ldr	r3, [sp, #4]
   32d0c:	4618      	mov	r0, r3
   32d0e:	b002      	add	sp, #8
   32d10:	bd70      	pop	{r4, r5, r6, pc}
   32d12:	bf00      	nop

00032d14 <ip_interface_request_send>:
   32d14:	b570      	push	{r4, r5, r6, lr}
   32d16:	460c      	mov	r4, r1
   32d18:	4605      	mov	r5, r0
   32d1a:	4611      	mov	r1, r2
   32d1c:	4620      	mov	r0, r4
   32d1e:	461e      	mov	r6, r3
   32d20:	f7fc faa8 	bl	2f274 <rpc_ip_client_request_send>
   32d24:	b900      	cbnz	r0, 32d28 <ip_interface_request_send+0x14>
   32d26:	bd70      	pop	{r4, r5, r6, pc}
   32d28:	6820      	ldr	r0, [r4, #0]
   32d2a:	b108      	cbz	r0, 32d30 <ip_interface_request_send+0x1c>
   32d2c:	f7fc fac0 	bl	2f2b0 <rpc_ip_client_data_free>
   32d30:	4620      	mov	r0, r4
   32d32:	f7fc fab5 	bl	2f2a0 <rpc_ip_client_message_free>
   32d36:	602e      	str	r6, [r5, #0]
   32d38:	2023      	movs	r0, #35	; 0x23
   32d3a:	bd70      	pop	{r4, r5, r6, pc}

00032d3c <ip_interface_wait>:
   32d3c:	b538      	push	{r3, r4, r5, lr}
   32d3e:	4605      	mov	r5, r0
   32d40:	f001 fb98 	bl	34474 <interface_socket_wait>
   32d44:	4604      	mov	r4, r0
   32d46:	b108      	cbz	r0, 32d4c <ip_interface_wait+0x10>
   32d48:	4620      	mov	r0, r4
   32d4a:	bd38      	pop	{r3, r4, r5, pc}
   32d4c:	4628      	mov	r0, r5
   32d4e:	f001 fc05 	bl	3455c <interface_socket_from_handle_get>
   32d52:	2800      	cmp	r0, #0
   32d54:	d0f8      	beq.n	32d48 <ip_interface_wait+0xc>
   32d56:	6844      	ldr	r4, [r0, #4]
   32d58:	2c00      	cmp	r4, #0
   32d5a:	d0f5      	beq.n	32d48 <ip_interface_wait+0xc>
   32d5c:	2300      	movs	r3, #0
   32d5e:	6043      	str	r3, [r0, #4]
   32d60:	4620      	mov	r0, r4
   32d62:	bd38      	pop	{r3, r4, r5, pc}

00032d64 <ip_interface_init>:
   32d64:	b538      	push	{r3, r4, r5, lr}
   32d66:	2300      	movs	r3, #0
   32d68:	4d07      	ldr	r5, [pc, #28]	; (32d88 <ip_interface_init+0x24>)
   32d6a:	4c08      	ldr	r4, [pc, #32]	; (32d8c <ip_interface_init+0x28>)
   32d6c:	4619      	mov	r1, r3
   32d6e:	2224      	movs	r2, #36	; 0x24
   32d70:	4807      	ldr	r0, [pc, #28]	; (32d90 <ip_interface_init+0x2c>)
   32d72:	602b      	str	r3, [r5, #0]
   32d74:	6023      	str	r3, [r4, #0]
   32d76:	f00b ffc8 	bl	3ed0a <memset>
   32d7a:	f7fc fa61 	bl	2f240 <rpc_ip_client_init>
   32d7e:	3000      	adds	r0, #0
   32d80:	bf18      	it	ne
   32d82:	2001      	movne	r0, #1
   32d84:	4240      	negs	r0, r0
   32d86:	bd38      	pop	{r3, r4, r5, pc}
   32d88:	20024fa4 	.word	0x20024fa4
   32d8c:	20024fa0 	.word	0x20024fa0
   32d90:	20024fac 	.word	0x20024fac

00032d94 <ip_interface_open>:
   32d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32d98:	4606      	mov	r6, r0
   32d9a:	2000      	movs	r0, #0
   32d9c:	f026 0308 	bic.w	r3, r6, #8
   32da0:	b082      	sub	sp, #8
   32da2:	2b02      	cmp	r3, #2
   32da4:	460c      	mov	r4, r1
   32da6:	4617      	mov	r7, r2
   32da8:	9000      	str	r0, [sp, #0]
   32daa:	d002      	beq.n	32db2 <ip_interface_open+0x1e>
   32dac:	2e05      	cmp	r6, #5
   32dae:	f040 8084 	bne.w	32eba <ip_interface_open+0x126>
   32db2:	1e63      	subs	r3, r4, #1
   32db4:	2b02      	cmp	r3, #2
   32db6:	d85c      	bhi.n	32e72 <ip_interface_open+0xde>
   32db8:	2f00      	cmp	r7, #0
   32dba:	d154      	bne.n	32e66 <ip_interface_open+0xd2>
   32dbc:	2c01      	cmp	r4, #1
   32dbe:	d067      	beq.n	32e90 <ip_interface_open+0xfc>
   32dc0:	2c03      	cmp	r4, #3
   32dc2:	bf18      	it	ne
   32dc4:	2702      	movne	r7, #2
   32dc6:	4a48      	ldr	r2, [pc, #288]	; (32ee8 <ip_interface_open+0x154>)
   32dc8:	4621      	mov	r1, r4
   32dca:	4668      	mov	r0, sp
   32dcc:	f001 faa6 	bl	3431c <interface_socket_allocate>
   32dd0:	9b00      	ldr	r3, [sp, #0]
   32dd2:	4680      	mov	r8, r0
   32dd4:	2b00      	cmp	r3, #0
   32dd6:	d059      	beq.n	32e8c <ip_interface_open+0xf8>
   32dd8:	2100      	movs	r1, #0
   32dda:	a802      	add	r0, sp, #8
   32ddc:	f840 1d04 	str.w	r1, [r0, #-4]!
   32de0:	e9c3 6403 	strd	r6, r4, [r3, #12]
   32de4:	615f      	str	r7, [r3, #20]
   32de6:	f7fc fa31 	bl	2f24c <rpc_ip_client_request_alloc>
   32dea:	2800      	cmp	r0, #0
   32dec:	d14b      	bne.n	32e86 <ip_interface_open+0xf2>
   32dee:	f247 0201 	movw	r2, #28673	; 0x7001
   32df2:	f04f 33ff 	mov.w	r3, #4294967295
   32df6:	2108      	movs	r1, #8
   32df8:	9d01      	ldr	r5, [sp, #4]
   32dfa:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   32dfe:	60ea      	str	r2, [r5, #12]
   32e00:	7268      	strb	r0, [r5, #9]
   32e02:	72a8      	strb	r0, [r5, #10]
   32e04:	72e8      	strb	r0, [r5, #11]
   32e06:	7229      	strb	r1, [r5, #8]
   32e08:	742b      	strb	r3, [r5, #16]
   32e0a:	746b      	strb	r3, [r5, #17]
   32e0c:	74ab      	strb	r3, [r5, #18]
   32e0e:	74eb      	strb	r3, [r5, #19]
   32e10:	68ab      	ldr	r3, [r5, #8]
   32e12:	2e05      	cmp	r6, #5
   32e14:	f103 030c 	add.w	r3, r3, #12
   32e18:	60ab      	str	r3, [r5, #8]
   32e1a:	d003      	beq.n	32e24 <ip_interface_open+0x90>
   32e1c:	2e0a      	cmp	r6, #10
   32e1e:	bf14      	ite	ne
   32e20:	2601      	movne	r6, #1
   32e22:	2602      	moveq	r6, #2
   32e24:	616e      	str	r6, [r5, #20]
   32e26:	61ef      	str	r7, [r5, #28]
   32e28:	61ac      	str	r4, [r5, #24]
   32e2a:	f247 0101 	movw	r1, #28673	; 0x7001
   32e2e:	4628      	mov	r0, r5
   32e30:	9f00      	ldr	r7, [sp, #0]
   32e32:	f7fc fa1f 	bl	2f274 <rpc_ip_client_request_send>
   32e36:	4606      	mov	r6, r0
   32e38:	b360      	cbz	r0, 32e94 <ip_interface_open+0x100>
   32e3a:	6828      	ldr	r0, [r5, #0]
   32e3c:	b108      	cbz	r0, 32e42 <ip_interface_open+0xae>
   32e3e:	f7fc fa37 	bl	2f2b0 <rpc_ip_client_data_free>
   32e42:	4628      	mov	r0, r5
   32e44:	f7fc fa2c 	bl	2f2a0 <rpc_ip_client_message_free>
   32e48:	2301      	movs	r3, #1
   32e4a:	2523      	movs	r5, #35	; 0x23
   32e4c:	603b      	str	r3, [r7, #0]
   32e4e:	4640      	mov	r0, r8
   32e50:	f001 fac2 	bl	343d8 <interface_socket_free>
   32e54:	4628      	mov	r0, r5
   32e56:	f7f3 fe8b 	bl	26b70 <bsd_os_errno_set>
   32e5a:	f04f 38ff 	mov.w	r8, #4294967295
   32e5e:	4640      	mov	r0, r8
   32e60:	b002      	add	sp, #8
   32e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32e66:	2c01      	cmp	r4, #1
   32e68:	d009      	beq.n	32e7e <ip_interface_open+0xea>
   32e6a:	2c02      	cmp	r4, #2
   32e6c:	d109      	bne.n	32e82 <ip_interface_open+0xee>
   32e6e:	2f02      	cmp	r7, #2
   32e70:	d0a9      	beq.n	32dc6 <ip_interface_open+0x32>
   32e72:	2016      	movs	r0, #22
   32e74:	f7f3 fe7c 	bl	26b70 <bsd_os_errno_set>
   32e78:	f04f 38ff 	mov.w	r8, #4294967295
   32e7c:	e7ef      	b.n	32e5e <ip_interface_open+0xca>
   32e7e:	2f01      	cmp	r7, #1
   32e80:	d1f7      	bne.n	32e72 <ip_interface_open+0xde>
   32e82:	2702      	movs	r7, #2
   32e84:	e79f      	b.n	32dc6 <ip_interface_open+0x32>
   32e86:	9d01      	ldr	r5, [sp, #4]
   32e88:	2d00      	cmp	r5, #0
   32e8a:	d1c1      	bne.n	32e10 <ip_interface_open+0x7c>
   32e8c:	250c      	movs	r5, #12
   32e8e:	e7de      	b.n	32e4e <ip_interface_open+0xba>
   32e90:	4627      	mov	r7, r4
   32e92:	e798      	b.n	32dc6 <ip_interface_open+0x32>
   32e94:	f04f 33ff 	mov.w	r3, #4294967295
   32e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
   32e9c:	2102      	movs	r1, #2
   32e9e:	4640      	mov	r0, r8
   32ea0:	f001 fae8 	bl	34474 <interface_socket_wait>
   32ea4:	4605      	mov	r5, r0
   32ea6:	2800      	cmp	r0, #0
   32ea8:	d1d1      	bne.n	32e4e <ip_interface_open+0xba>
   32eaa:	4640      	mov	r0, r8
   32eac:	f001 fb56 	bl	3455c <interface_socket_from_handle_get>
   32eb0:	b148      	cbz	r0, 32ec6 <ip_interface_open+0x132>
   32eb2:	6845      	ldr	r5, [r0, #4]
   32eb4:	b13d      	cbz	r5, 32ec6 <ip_interface_open+0x132>
   32eb6:	6046      	str	r6, [r0, #4]
   32eb8:	e7c9      	b.n	32e4e <ip_interface_open+0xba>
   32eba:	202f      	movs	r0, #47	; 0x2f
   32ebc:	f7f3 fe58 	bl	26b70 <bsd_os_errno_set>
   32ec0:	f04f 38ff 	mov.w	r8, #4294967295
   32ec4:	e7cb      	b.n	32e5e <ip_interface_open+0xca>
   32ec6:	3c02      	subs	r4, #2
   32ec8:	2c01      	cmp	r4, #1
   32eca:	d8c8      	bhi.n	32e5e <ip_interface_open+0xca>
   32ecc:	4640      	mov	r0, r8
   32ece:	9b00      	ldr	r3, [sp, #0]
   32ed0:	681a      	ldr	r2, [r3, #0]
   32ed2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   32ed6:	601a      	str	r2, [r3, #0]
   32ed8:	681a      	ldr	r2, [r3, #0]
   32eda:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   32ede:	601a      	str	r2, [r3, #0]
   32ee0:	b002      	add	sp, #8
   32ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32ee6:	bf00      	nop
   32ee8:	00032ca9 	.word	0x00032ca9

00032eec <ip_interface_close>:
   32eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32ef0:	b082      	sub	sp, #8
   32ef2:	4606      	mov	r6, r0
   32ef4:	f001 fb32 	bl	3455c <interface_socket_from_handle_get>
   32ef8:	2800      	cmp	r0, #0
   32efa:	d063      	beq.n	32fc4 <ip_interface_close+0xd8>
   32efc:	4604      	mov	r4, r0
   32efe:	2100      	movs	r1, #0
   32f00:	a802      	add	r0, sp, #8
   32f02:	6827      	ldr	r7, [r4, #0]
   32f04:	f840 1d04 	str.w	r1, [r0, #-4]!
   32f08:	f8d4 8018 	ldr.w	r8, [r4, #24]
   32f0c:	f7fc f99e 	bl	2f24c <rpc_ip_client_request_alloc>
   32f10:	2800      	cmp	r0, #0
   32f12:	d13a      	bne.n	32f8a <ip_interface_close+0x9e>
   32f14:	f247 0309 	movw	r3, #28681	; 0x7009
   32f18:	2208      	movs	r2, #8
   32f1a:	9d01      	ldr	r5, [sp, #4]
   32f1c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   32f20:	60eb      	str	r3, [r5, #12]
   32f22:	f8c5 8010 	str.w	r8, [r5, #16]
   32f26:	7268      	strb	r0, [r5, #9]
   32f28:	72a8      	strb	r0, [r5, #10]
   32f2a:	72e8      	strb	r0, [r5, #11]
   32f2c:	722a      	strb	r2, [r5, #8]
   32f2e:	6823      	ldr	r3, [r4, #0]
   32f30:	f247 0109 	movw	r1, #28681	; 0x7009
   32f34:	0c1b      	lsrs	r3, r3, #16
   32f36:	041b      	lsls	r3, r3, #16
   32f38:	f043 030d 	orr.w	r3, r3, #13
   32f3c:	6023      	str	r3, [r4, #0]
   32f3e:	6823      	ldr	r3, [r4, #0]
   32f40:	4628      	mov	r0, r5
   32f42:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   32f46:	6023      	str	r3, [r4, #0]
   32f48:	6823      	ldr	r3, [r4, #0]
   32f4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   32f4e:	6023      	str	r3, [r4, #0]
   32f50:	f7fc f990 	bl	2f274 <rpc_ip_client_request_send>
   32f54:	bb40      	cbnz	r0, 32fa8 <ip_interface_close+0xbc>
   32f56:	f04f 33ff 	mov.w	r3, #4294967295
   32f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   32f5e:	210e      	movs	r1, #14
   32f60:	4630      	mov	r0, r6
   32f62:	f001 fa87 	bl	34474 <interface_socket_wait>
   32f66:	4604      	mov	r4, r0
   32f68:	b1a0      	cbz	r0, 32f94 <ip_interface_close+0xa8>
   32f6a:	4c17      	ldr	r4, [pc, #92]	; (32fc8 <ip_interface_close+0xdc>)
   32f6c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   32f70:	b120      	cbz	r0, 32f7c <ip_interface_close+0x90>
   32f72:	f7fc f995 	bl	2f2a0 <rpc_ip_client_message_free>
   32f76:	2300      	movs	r3, #0
   32f78:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   32f7c:	4630      	mov	r0, r6
   32f7e:	f001 fa2b 	bl	343d8 <interface_socket_free>
   32f82:	2000      	movs	r0, #0
   32f84:	b002      	add	sp, #8
   32f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32f8a:	9d01      	ldr	r5, [sp, #4]
   32f8c:	200c      	movs	r0, #12
   32f8e:	2d00      	cmp	r5, #0
   32f90:	d1cd      	bne.n	32f2e <ip_interface_close+0x42>
   32f92:	e012      	b.n	32fba <ip_interface_close+0xce>
   32f94:	4630      	mov	r0, r6
   32f96:	f001 fae1 	bl	3455c <interface_socket_from_handle_get>
   32f9a:	2800      	cmp	r0, #0
   32f9c:	d0e5      	beq.n	32f6a <ip_interface_close+0x7e>
   32f9e:	6843      	ldr	r3, [r0, #4]
   32fa0:	2b00      	cmp	r3, #0
   32fa2:	d0e2      	beq.n	32f6a <ip_interface_close+0x7e>
   32fa4:	6044      	str	r4, [r0, #4]
   32fa6:	e7e0      	b.n	32f6a <ip_interface_close+0x7e>
   32fa8:	6828      	ldr	r0, [r5, #0]
   32faa:	b108      	cbz	r0, 32fb0 <ip_interface_close+0xc4>
   32fac:	f7fc f980 	bl	2f2b0 <rpc_ip_client_data_free>
   32fb0:	4628      	mov	r0, r5
   32fb2:	f7fc f975 	bl	2f2a0 <rpc_ip_client_message_free>
   32fb6:	2023      	movs	r0, #35	; 0x23
   32fb8:	6027      	str	r7, [r4, #0]
   32fba:	f7f3 fdd9 	bl	26b70 <bsd_os_errno_set>
   32fbe:	f04f 30ff 	mov.w	r0, #4294967295
   32fc2:	e7df      	b.n	32f84 <ip_interface_close+0x98>
   32fc4:	2009      	movs	r0, #9
   32fc6:	e7f8      	b.n	32fba <ip_interface_close+0xce>
   32fc8:	20024fac 	.word	0x20024fac

00032fcc <ip_interface_sendto>:
   32fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32fd0:	2500      	movs	r5, #0
   32fd2:	b089      	sub	sp, #36	; 0x24
   32fd4:	9103      	str	r1, [sp, #12]
   32fd6:	4614      	mov	r4, r2
   32fd8:	9301      	str	r3, [sp, #4]
   32fda:	9507      	str	r5, [sp, #28]
   32fdc:	4607      	mov	r7, r0
   32fde:	9e12      	ldr	r6, [sp, #72]	; 0x48
   32fe0:	f001 fabc 	bl	3455c <interface_socket_from_handle_get>
   32fe4:	2800      	cmp	r0, #0
   32fe6:	f000 8124 	beq.w	33232 <ip_interface_sendto+0x266>
   32fea:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   32fee:	f300 8118 	bgt.w	33222 <ip_interface_sendto+0x256>
   32ff2:	6903      	ldr	r3, [r0, #16]
   32ff4:	4605      	mov	r5, r0
   32ff6:	2b01      	cmp	r3, #1
   32ff8:	f000 80d1 	beq.w	3319e <ip_interface_sendto+0x1d2>
   32ffc:	682a      	ldr	r2, [r5, #0]
   32ffe:	0390      	lsls	r0, r2, #14
   33000:	d423      	bmi.n	3304a <ip_interface_sendto+0x7e>
   33002:	682a      	ldr	r2, [r5, #0]
   33004:	0091      	lsls	r1, r2, #2
   33006:	d406      	bmi.n	33016 <ip_interface_sendto+0x4a>
   33008:	2b01      	cmp	r3, #1
   3300a:	f000 80ed 	beq.w	331e8 <ip_interface_sendto+0x21c>
   3300e:	682b      	ldr	r3, [r5, #0]
   33010:	031a      	lsls	r2, r3, #12
   33012:	f140 8102 	bpl.w	3321a <ip_interface_sendto+0x24e>
   33016:	682b      	ldr	r3, [r5, #0]
   33018:	031b      	lsls	r3, r3, #12
   3301a:	f140 8106 	bpl.w	3322a <ip_interface_sendto+0x25e>
   3301e:	68a8      	ldr	r0, [r5, #8]
   33020:	f8df 9218 	ldr.w	r9, [pc, #536]	; 3323c <ip_interface_sendto+0x270>
   33024:	2800      	cmp	r0, #0
   33026:	f040 8096 	bne.w	33156 <ip_interface_sendto+0x18a>
   3302a:	682b      	ldr	r3, [r5, #0]
   3302c:	0118      	lsls	r0, r3, #4
   3302e:	f140 8082 	bpl.w	33136 <ip_interface_sendto+0x16a>
   33032:	682b      	ldr	r3, [r5, #0]
   33034:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   33038:	602b      	str	r3, [r5, #0]
   3303a:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   3303e:	2800      	cmp	r0, #0
   33040:	d17c      	bne.n	3313c <ip_interface_sendto+0x170>
   33042:	4620      	mov	r0, r4
   33044:	b009      	add	sp, #36	; 0x24
   33046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3304a:	f247 0806 	movw	r8, #28678	; 0x7006
   3304e:	f04f 0a0c 	mov.w	sl, #12
   33052:	043b      	lsls	r3, r7, #16
   33054:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 3323c <ip_interface_sendto+0x270>
   33058:	9304      	str	r3, [sp, #16]
   3305a:	4621      	mov	r1, r4
   3305c:	a807      	add	r0, sp, #28
   3305e:	f7fc f8f5 	bl	2f24c <rpc_ip_client_request_alloc>
   33062:	2804      	cmp	r0, #4
   33064:	d0f9      	beq.n	3305a <ip_interface_sendto+0x8e>
   33066:	2800      	cmp	r0, #0
   33068:	d171      	bne.n	3314e <ip_interface_sendto+0x182>
   3306a:	9b07      	ldr	r3, [sp, #28]
   3306c:	f883 a008 	strb.w	sl, [r3, #8]
   33070:	7258      	strb	r0, [r3, #9]
   33072:	7298      	strb	r0, [r3, #10]
   33074:	72d8      	strb	r0, [r3, #11]
   33076:	b33e      	cbz	r6, 330c8 <ip_interface_sendto+0xfc>
   33078:	68ea      	ldr	r2, [r5, #12]
   3307a:	6871      	ldr	r1, [r6, #4]
   3307c:	428a      	cmp	r2, r1
   3307e:	d10a      	bne.n	33096 <ip_interface_sendto+0xca>
   33080:	2a02      	cmp	r2, #2
   33082:	f103 001c 	add.w	r0, r3, #28
   33086:	7831      	ldrb	r1, [r6, #0]
   33088:	f000 8090 	beq.w	331ac <ip_interface_sendto+0x1e0>
   3308c:	2a0a      	cmp	r2, #10
   3308e:	d102      	bne.n	33096 <ip_interface_sendto+0xca>
   33090:	2924      	cmp	r1, #36	; 0x24
   33092:	f000 80af 	beq.w	331f4 <ip_interface_sendto+0x228>
   33096:	6818      	ldr	r0, [r3, #0]
   33098:	b110      	cbz	r0, 330a0 <ip_interface_sendto+0xd4>
   3309a:	f7fc f909 	bl	2f2b0 <rpc_ip_client_data_free>
   3309e:	9b07      	ldr	r3, [sp, #28]
   330a0:	4618      	mov	r0, r3
   330a2:	f7fc f8fd 	bl	2f2a0 <rpc_ip_client_message_free>
   330a6:	2016      	movs	r0, #22
   330a8:	682b      	ldr	r3, [r5, #0]
   330aa:	031a      	lsls	r2, r3, #12
   330ac:	d453      	bmi.n	33156 <ip_interface_sendto+0x18a>
   330ae:	682b      	ldr	r3, [r5, #0]
   330b0:	b29b      	uxth	r3, r3
   330b2:	2b0d      	cmp	r3, #13
   330b4:	d0b6      	beq.n	33024 <ip_interface_sendto+0x58>
   330b6:	682b      	ldr	r3, [r5, #0]
   330b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   330bc:	602b      	str	r3, [r5, #0]
   330be:	682b      	ldr	r3, [r5, #0]
   330c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   330c4:	602b      	str	r3, [r5, #0]
   330c6:	e7ad      	b.n	33024 <ip_interface_sendto+0x58>
   330c8:	4642      	mov	r2, r8
   330ca:	9901      	ldr	r1, [sp, #4]
   330cc:	6159      	str	r1, [r3, #20]
   330ce:	69a9      	ldr	r1, [r5, #24]
   330d0:	9804      	ldr	r0, [sp, #16]
   330d2:	6119      	str	r1, [r3, #16]
   330d4:	9903      	ldr	r1, [sp, #12]
   330d6:	4302      	orrs	r2, r0
   330d8:	60da      	str	r2, [r3, #12]
   330da:	605c      	str	r4, [r3, #4]
   330dc:	b119      	cbz	r1, 330e6 <ip_interface_sendto+0x11a>
   330de:	6818      	ldr	r0, [r3, #0]
   330e0:	4622      	mov	r2, r4
   330e2:	f00b fdf2 	bl	3ecca <memcpy>
   330e6:	682b      	ldr	r3, [r5, #0]
   330e8:	4641      	mov	r1, r8
   330ea:	9305      	str	r3, [sp, #20]
   330ec:	682b      	ldr	r3, [r5, #0]
   330ee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   330f2:	602b      	str	r3, [r5, #0]
   330f4:	682b      	ldr	r3, [r5, #0]
   330f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   330fa:	602b      	str	r3, [r5, #0]
   330fc:	9b07      	ldr	r3, [sp, #28]
   330fe:	4618      	mov	r0, r3
   33100:	9302      	str	r3, [sp, #8]
   33102:	f7fc f8b7 	bl	2f274 <rpc_ip_client_request_send>
   33106:	9b02      	ldr	r3, [sp, #8]
   33108:	4683      	mov	fp, r0
   3310a:	bb58      	cbnz	r0, 33164 <ip_interface_sendto+0x198>
   3310c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   33110:	f04f 33ff 	mov.w	r3, #4294967295
   33114:	4611      	mov	r1, r2
   33116:	4638      	mov	r0, r7
   33118:	f001 f9ac 	bl	34474 <interface_socket_wait>
   3311c:	b370      	cbz	r0, 3317c <ip_interface_sendto+0x1b0>
   3311e:	682b      	ldr	r3, [r5, #0]
   33120:	0319      	lsls	r1, r3, #12
   33122:	d437      	bmi.n	33194 <ip_interface_sendto+0x1c8>
   33124:	280c      	cmp	r0, #12
   33126:	d1bf      	bne.n	330a8 <ip_interface_sendto+0xdc>
   33128:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   3312c:	2800      	cmp	r0, #0
   3312e:	d094      	beq.n	3305a <ip_interface_sendto+0x8e>
   33130:	f7fc f8b6 	bl	2f2a0 <rpc_ip_client_message_free>
   33134:	e791      	b.n	3305a <ip_interface_sendto+0x8e>
   33136:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   3313a:	6984      	ldr	r4, [r0, #24]
   3313c:	f7fc f8b0 	bl	2f2a0 <rpc_ip_client_message_free>
   33140:	2300      	movs	r3, #0
   33142:	4620      	mov	r0, r4
   33144:	f849 3027 	str.w	r3, [r9, r7, lsl #2]
   33148:	b009      	add	sp, #36	; 0x24
   3314a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3314e:	682b      	ldr	r3, [r5, #0]
   33150:	200c      	movs	r0, #12
   33152:	031a      	lsls	r2, r3, #12
   33154:	d5ab      	bpl.n	330ae <ip_interface_sendto+0xe2>
   33156:	f7f3 fd0b 	bl	26b70 <bsd_os_errno_set>
   3315a:	f04f 34ff 	mov.w	r4, #4294967295
   3315e:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   33162:	e76c      	b.n	3303e <ip_interface_sendto+0x72>
   33164:	6818      	ldr	r0, [r3, #0]
   33166:	469b      	mov	fp, r3
   33168:	b108      	cbz	r0, 3316e <ip_interface_sendto+0x1a2>
   3316a:	f7fc f8a1 	bl	2f2b0 <rpc_ip_client_data_free>
   3316e:	4658      	mov	r0, fp
   33170:	f7fc f896 	bl	2f2a0 <rpc_ip_client_message_free>
   33174:	9b05      	ldr	r3, [sp, #20]
   33176:	2023      	movs	r0, #35	; 0x23
   33178:	602b      	str	r3, [r5, #0]
   3317a:	e795      	b.n	330a8 <ip_interface_sendto+0xdc>
   3317c:	4638      	mov	r0, r7
   3317e:	f001 f9ed 	bl	3455c <interface_socket_from_handle_get>
   33182:	4603      	mov	r3, r0
   33184:	b1f0      	cbz	r0, 331c4 <ip_interface_sendto+0x1f8>
   33186:	6840      	ldr	r0, [r0, #4]
   33188:	b1e0      	cbz	r0, 331c4 <ip_interface_sendto+0x1f8>
   3318a:	f8c3 b004 	str.w	fp, [r3, #4]
   3318e:	682b      	ldr	r3, [r5, #0]
   33190:	0319      	lsls	r1, r3, #12
   33192:	d5c7      	bpl.n	33124 <ip_interface_sendto+0x158>
   33194:	68a8      	ldr	r0, [r5, #8]
   33196:	682b      	ldr	r3, [r5, #0]
   33198:	031e      	lsls	r6, r3, #12
   3319a:	d588      	bpl.n	330ae <ip_interface_sendto+0xe2>
   3319c:	e742      	b.n	33024 <ip_interface_sendto+0x58>
   3319e:	2e00      	cmp	r6, #0
   331a0:	f43f af2c 	beq.w	32ffc <ip_interface_sendto+0x30>
   331a4:	2016      	movs	r0, #22
   331a6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 3323c <ip_interface_sendto+0x270>
   331aa:	e7d4      	b.n	33156 <ip_interface_sendto+0x18a>
   331ac:	2910      	cmp	r1, #16
   331ae:	f47f af72 	bne.w	33096 <ip_interface_sendto+0xca>
   331b2:	2204      	movs	r2, #4
   331b4:	8931      	ldrh	r1, [r6, #8]
   331b6:	835a      	strh	r2, [r3, #26]
   331b8:	8319      	strh	r1, [r3, #24]
   331ba:	f106 010c 	add.w	r1, r6, #12
   331be:	f00b fd84 	bl	3ecca <memcpy>
   331c2:	e01e      	b.n	33202 <ip_interface_sendto+0x236>
   331c4:	682b      	ldr	r3, [r5, #0]
   331c6:	031b      	lsls	r3, r3, #12
   331c8:	f53f af2f 	bmi.w	3302a <ip_interface_sendto+0x5e>
   331cc:	682b      	ldr	r3, [r5, #0]
   331ce:	b29b      	uxth	r3, r3
   331d0:	2b0d      	cmp	r3, #13
   331d2:	f43f af2a 	beq.w	3302a <ip_interface_sendto+0x5e>
   331d6:	682b      	ldr	r3, [r5, #0]
   331d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   331dc:	602b      	str	r3, [r5, #0]
   331de:	682b      	ldr	r3, [r5, #0]
   331e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   331e4:	602b      	str	r3, [r5, #0]
   331e6:	e720      	b.n	3302a <ip_interface_sendto+0x5e>
   331e8:	682b      	ldr	r3, [r5, #0]
   331ea:	b29b      	uxth	r3, r3
   331ec:	2b05      	cmp	r3, #5
   331ee:	f47f af12 	bne.w	33016 <ip_interface_sendto+0x4a>
   331f2:	e70c      	b.n	3300e <ip_interface_sendto+0x42>
   331f4:	2210      	movs	r2, #16
   331f6:	8931      	ldrh	r1, [r6, #8]
   331f8:	835a      	strh	r2, [r3, #26]
   331fa:	8319      	strh	r1, [r3, #24]
   331fc:	18b1      	adds	r1, r6, r2
   331fe:	f00b fd64 	bl	3ecca <memcpy>
   33202:	f247 0207 	movw	r2, #28679	; 0x7007
   33206:	9b07      	ldr	r3, [sp, #28]
   33208:	4690      	mov	r8, r2
   3320a:	6899      	ldr	r1, [r3, #8]
   3320c:	8b58      	ldrh	r0, [r3, #26]
   3320e:	3104      	adds	r1, #4
   33210:	4401      	add	r1, r0
   33212:	9801      	ldr	r0, [sp, #4]
   33214:	6099      	str	r1, [r3, #8]
   33216:	6158      	str	r0, [r3, #20]
   33218:	e759      	b.n	330ce <ip_interface_sendto+0x102>
   3321a:	2023      	movs	r0, #35	; 0x23
   3321c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 3323c <ip_interface_sendto+0x270>
   33220:	e799      	b.n	33156 <ip_interface_sendto+0x18a>
   33222:	2028      	movs	r0, #40	; 0x28
   33224:	f8df 9014 	ldr.w	r9, [pc, #20]	; 3323c <ip_interface_sendto+0x270>
   33228:	e795      	b.n	33156 <ip_interface_sendto+0x18a>
   3322a:	2039      	movs	r0, #57	; 0x39
   3322c:	f8df 900c 	ldr.w	r9, [pc, #12]	; 3323c <ip_interface_sendto+0x270>
   33230:	e791      	b.n	33156 <ip_interface_sendto+0x18a>
   33232:	2009      	movs	r0, #9
   33234:	f8df 9004 	ldr.w	r9, [pc, #4]	; 3323c <ip_interface_sendto+0x270>
   33238:	e78d      	b.n	33156 <ip_interface_sendto+0x18a>
   3323a:	bf00      	nop
   3323c:	20024fac 	.word	0x20024fac

00033240 <ip_interface_recvfrom>:
   33240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33244:	b085      	sub	sp, #20
   33246:	2a00      	cmp	r2, #0
   33248:	f000 8110 	beq.w	3346c <ip_interface_recvfrom+0x22c>
   3324c:	468a      	mov	sl, r1
   3324e:	4699      	mov	r9, r3
   33250:	4607      	mov	r7, r0
   33252:	4616      	mov	r6, r2
   33254:	f001 f982 	bl	3455c <interface_socket_from_handle_get>
   33258:	4604      	mov	r4, r0
   3325a:	2800      	cmp	r0, #0
   3325c:	f000 810d 	beq.w	3347a <ip_interface_recvfrom+0x23a>
   33260:	6803      	ldr	r3, [r0, #0]
   33262:	02d9      	lsls	r1, r3, #11
   33264:	d565      	bpl.n	33332 <ip_interface_recvfrom+0xf2>
   33266:	f019 0f02 	tst.w	r9, #2
   3326a:	bf18      	it	ne
   3326c:	f04f 0800 	movne.w	r8, #0
   33270:	f04f 3bff 	mov.w	fp, #4294967295
   33274:	bf08      	it	eq
   33276:	6803      	ldreq	r3, [r0, #0]
   33278:	f009 0510 	and.w	r5, r9, #16
   3327c:	bf04      	itt	eq
   3327e:	f083 5880 	eoreq.w	r8, r3, #268435456	; 0x10000000
   33282:	f3c8 7800 	ubfxeq	r8, r8, #28, #1
   33286:	6823      	ldr	r3, [r4, #0]
   33288:	03da      	lsls	r2, r3, #15
   3328a:	d56d      	bpl.n	33368 <ip_interface_recvfrom+0x128>
   3328c:	6823      	ldr	r3, [r4, #0]
   3328e:	69e0      	ldr	r0, [r4, #28]
   33290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   33294:	6023      	str	r3, [r4, #0]
   33296:	6803      	ldr	r3, [r0, #0]
   33298:	68db      	ldr	r3, [r3, #12]
   3329a:	4798      	blx	r3
   3329c:	f1b0 3fff 	cmp.w	r0, #4294967295
   332a0:	4683      	mov	fp, r0
   332a2:	f000 8081 	beq.w	333a8 <ip_interface_recvfrom+0x168>
   332a6:	4286      	cmp	r6, r0
   332a8:	dd03      	ble.n	332b2 <ip_interface_recvfrom+0x72>
   332aa:	6923      	ldr	r3, [r4, #16]
   332ac:	2b01      	cmp	r3, #1
   332ae:	f000 80a7 	beq.w	33400 <ip_interface_recvfrom+0x1c0>
   332b2:	2500      	movs	r5, #0
   332b4:	69e0      	ldr	r0, [r4, #28]
   332b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   332b8:	b103      	cbz	r3, 332bc <ip_interface_recvfrom+0x7c>
   332ba:	681b      	ldr	r3, [r3, #0]
   332bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   332be:	e9cd a600 	strd	sl, r6, [sp]
   332c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   332c6:	6803      	ldr	r3, [r0, #0]
   332c8:	464a      	mov	r2, r9
   332ca:	689b      	ldr	r3, [r3, #8]
   332cc:	4669      	mov	r1, sp
   332ce:	4798      	blx	r3
   332d0:	4683      	mov	fp, r0
   332d2:	69e0      	ldr	r0, [r4, #28]
   332d4:	f1bb 3fff 	cmp.w	fp, #4294967295
   332d8:	6803      	ldr	r3, [r0, #0]
   332da:	bf18      	it	ne
   332dc:	2601      	movne	r6, #1
   332de:	68db      	ldr	r3, [r3, #12]
   332e0:	bf0a      	itet	eq
   332e2:	2600      	moveq	r6, #0
   332e4:	f04f 0800 	movne.w	r8, #0
   332e8:	f04f 0823 	moveq.w	r8, #35	; 0x23
   332ec:	4798      	blx	r3
   332ee:	3001      	adds	r0, #1
   332f0:	d135      	bne.n	3335e <ip_interface_recvfrom+0x11e>
   332f2:	2d00      	cmp	r5, #0
   332f4:	f000 80b6 	beq.w	33464 <ip_interface_recvfrom+0x224>
   332f8:	2e00      	cmp	r6, #0
   332fa:	f000 80a6 	beq.w	3344a <ip_interface_recvfrom+0x20a>
   332fe:	6823      	ldr	r3, [r4, #0]
   33300:	0319      	lsls	r1, r3, #12
   33302:	d506      	bpl.n	33312 <ip_interface_recvfrom+0xd2>
   33304:	6823      	ldr	r3, [r4, #0]
   33306:	b29b      	uxth	r3, r3
   33308:	2b0d      	cmp	r3, #13
   3330a:	d002      	beq.n	33312 <ip_interface_recvfrom+0xd2>
   3330c:	6923      	ldr	r3, [r4, #16]
   3330e:	2b01      	cmp	r3, #1
   33310:	d025      	beq.n	3335e <ip_interface_recvfrom+0x11e>
   33312:	6823      	ldr	r3, [r4, #0]
   33314:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   33318:	6823      	ldr	r3, [r4, #0]
   3331a:	f040 80b1 	bne.w	33480 <ip_interface_recvfrom+0x240>
   3331e:	031a      	lsls	r2, r3, #12
   33320:	d475      	bmi.n	3340e <ip_interface_recvfrom+0x1ce>
   33322:	f1b8 0f00 	cmp.w	r8, #0
   33326:	f040 808a 	bne.w	3343e <ip_interface_recvfrom+0x1fe>
   3332a:	4658      	mov	r0, fp
   3332c:	b005      	add	sp, #20
   3332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33332:	6803      	ldr	r3, [r0, #0]
   33334:	b29b      	uxth	r3, r3
   33336:	2b06      	cmp	r3, #6
   33338:	d073      	beq.n	33422 <ip_interface_recvfrom+0x1e2>
   3333a:	6803      	ldr	r3, [r0, #0]
   3333c:	b29b      	uxth	r3, r3
   3333e:	2b07      	cmp	r3, #7
   33340:	bf0c      	ite	eq
   33342:	f04f 0809 	moveq.w	r8, #9
   33346:	f04f 0839 	movne.w	r8, #57	; 0x39
   3334a:	69e0      	ldr	r0, [r4, #28]
   3334c:	6803      	ldr	r3, [r0, #0]
   3334e:	68db      	ldr	r3, [r3, #12]
   33350:	4798      	blx	r3
   33352:	f1b0 3fff 	cmp.w	r0, #4294967295
   33356:	4683      	mov	fp, r0
   33358:	d0db      	beq.n	33312 <ip_interface_recvfrom+0xd2>
   3335a:	f04f 3bff 	mov.w	fp, #4294967295
   3335e:	6823      	ldr	r3, [r4, #0]
   33360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   33364:	6023      	str	r3, [r4, #0]
   33366:	e7dc      	b.n	33322 <ip_interface_recvfrom+0xe2>
   33368:	f1b8 0f00 	cmp.w	r8, #0
   3336c:	f000 8081 	beq.w	33472 <ip_interface_recvfrom+0x232>
   33370:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   33374:	6a23      	ldr	r3, [r4, #32]
   33376:	4611      	mov	r1, r2
   33378:	2b00      	cmp	r3, #0
   3337a:	bf08      	it	eq
   3337c:	f04f 33ff 	moveq.w	r3, #4294967295
   33380:	4638      	mov	r0, r7
   33382:	f001 f877 	bl	34474 <interface_socket_wait>
   33386:	4680      	mov	r8, r0
   33388:	b358      	cbz	r0, 333e2 <ip_interface_recvfrom+0x1a2>
   3338a:	6823      	ldr	r3, [r4, #0]
   3338c:	69e0      	ldr	r0, [r4, #28]
   3338e:	031b      	lsls	r3, r3, #12
   33390:	d521      	bpl.n	333d6 <ip_interface_recvfrom+0x196>
   33392:	6823      	ldr	r3, [r4, #0]
   33394:	b29b      	uxth	r3, r3
   33396:	2b0d      	cmp	r3, #13
   33398:	d01d      	beq.n	333d6 <ip_interface_recvfrom+0x196>
   3339a:	6925      	ldr	r5, [r4, #16]
   3339c:	f1a5 0501 	sub.w	r5, r5, #1
   333a0:	fab5 f585 	clz	r5, r5
   333a4:	096d      	lsrs	r5, r5, #5
   333a6:	e786      	b.n	332b6 <ip_interface_recvfrom+0x76>
   333a8:	6823      	ldr	r3, [r4, #0]
   333aa:	0318      	lsls	r0, r3, #12
   333ac:	d5dc      	bpl.n	33368 <ip_interface_recvfrom+0x128>
   333ae:	6823      	ldr	r3, [r4, #0]
   333b0:	b29b      	uxth	r3, r3
   333b2:	2b0d      	cmp	r3, #13
   333b4:	d0d8      	beq.n	33368 <ip_interface_recvfrom+0x128>
   333b6:	6923      	ldr	r3, [r4, #16]
   333b8:	69e0      	ldr	r0, [r4, #28]
   333ba:	2b01      	cmp	r3, #1
   333bc:	d034      	beq.n	33428 <ip_interface_recvfrom+0x1e8>
   333be:	f04f 0839 	mov.w	r8, #57	; 0x39
   333c2:	6823      	ldr	r3, [r4, #0]
   333c4:	0c1b      	lsrs	r3, r3, #16
   333c6:	041b      	lsls	r3, r3, #16
   333c8:	f043 030d 	orr.w	r3, r3, #13
   333cc:	6023      	str	r3, [r4, #0]
   333ce:	6823      	ldr	r3, [r4, #0]
   333d0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   333d4:	6023      	str	r3, [r4, #0]
   333d6:	6803      	ldr	r3, [r0, #0]
   333d8:	68db      	ldr	r3, [r3, #12]
   333da:	4798      	blx	r3
   333dc:	3001      	adds	r0, #1
   333de:	d1be      	bne.n	3335e <ip_interface_recvfrom+0x11e>
   333e0:	e797      	b.n	33312 <ip_interface_recvfrom+0xd2>
   333e2:	4638      	mov	r0, r7
   333e4:	f001 f8ba 	bl	3455c <interface_socket_from_handle_get>
   333e8:	b138      	cbz	r0, 333fa <ip_interface_recvfrom+0x1ba>
   333ea:	f8d0 8004 	ldr.w	r8, [r0, #4]
   333ee:	f1b8 0f00 	cmp.w	r8, #0
   333f2:	d002      	beq.n	333fa <ip_interface_recvfrom+0x1ba>
   333f4:	2300      	movs	r3, #0
   333f6:	6043      	str	r3, [r0, #4]
   333f8:	e7c7      	b.n	3338a <ip_interface_recvfrom+0x14a>
   333fa:	f04f 0801 	mov.w	r8, #1
   333fe:	e742      	b.n	33286 <ip_interface_recvfrom+0x46>
   33400:	b11d      	cbz	r5, 3340a <ip_interface_recvfrom+0x1ca>
   33402:	6823      	ldr	r3, [r4, #0]
   33404:	00db      	lsls	r3, r3, #3
   33406:	d5b3      	bpl.n	33370 <ip_interface_recvfrom+0x130>
   33408:	e753      	b.n	332b2 <ip_interface_recvfrom+0x72>
   3340a:	69e0      	ldr	r0, [r4, #28]
   3340c:	e753      	b.n	332b6 <ip_interface_recvfrom+0x76>
   3340e:	6823      	ldr	r3, [r4, #0]
   33410:	b29b      	uxth	r3, r3
   33412:	2b0d      	cmp	r3, #13
   33414:	d185      	bne.n	33322 <ip_interface_recvfrom+0xe2>
   33416:	68a3      	ldr	r3, [r4, #8]
   33418:	2b00      	cmp	r3, #0
   3341a:	d082      	beq.n	33322 <ip_interface_recvfrom+0xe2>
   3341c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   33420:	e77f      	b.n	33322 <ip_interface_recvfrom+0xe2>
   33422:	f04f 0809 	mov.w	r8, #9
   33426:	e790      	b.n	3334a <ip_interface_recvfrom+0x10a>
   33428:	6803      	ldr	r3, [r0, #0]
   3342a:	68db      	ldr	r3, [r3, #12]
   3342c:	4798      	blx	r3
   3342e:	3001      	adds	r0, #1
   33430:	d00b      	beq.n	3344a <ip_interface_recvfrom+0x20a>
   33432:	f04f 0823 	mov.w	r8, #35	; 0x23
   33436:	6823      	ldr	r3, [r4, #0]
   33438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3343c:	6023      	str	r3, [r4, #0]
   3343e:	4640      	mov	r0, r8
   33440:	f7f3 fb96 	bl	26b70 <bsd_os_errno_set>
   33444:	f04f 3bff 	mov.w	fp, #4294967295
   33448:	e76f      	b.n	3332a <ip_interface_recvfrom+0xea>
   3344a:	6823      	ldr	r3, [r4, #0]
   3344c:	f04f 0b00 	mov.w	fp, #0
   33450:	0c1b      	lsrs	r3, r3, #16
   33452:	041b      	lsls	r3, r3, #16
   33454:	f043 030d 	orr.w	r3, r3, #13
   33458:	6023      	str	r3, [r4, #0]
   3345a:	6823      	ldr	r3, [r4, #0]
   3345c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   33460:	6023      	str	r3, [r4, #0]
   33462:	e762      	b.n	3332a <ip_interface_recvfrom+0xea>
   33464:	2e00      	cmp	r6, #0
   33466:	f47f af4a 	bne.w	332fe <ip_interface_recvfrom+0xbe>
   3346a:	e752      	b.n	33312 <ip_interface_recvfrom+0xd2>
   3346c:	f04f 0816 	mov.w	r8, #22
   33470:	e7e5      	b.n	3343e <ip_interface_recvfrom+0x1fe>
   33472:	f04f 0823 	mov.w	r8, #35	; 0x23
   33476:	69e0      	ldr	r0, [r4, #28]
   33478:	e7ad      	b.n	333d6 <ip_interface_recvfrom+0x196>
   3347a:	f04f 0809 	mov.w	r8, #9
   3347e:	e7de      	b.n	3343e <ip_interface_recvfrom+0x1fe>
   33480:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   33484:	6023      	str	r3, [r4, #0]
   33486:	6823      	ldr	r3, [r4, #0]
   33488:	f04f 0869 	mov.w	r8, #105	; 0x69
   3348c:	0c1b      	lsrs	r3, r3, #16
   3348e:	041b      	lsls	r3, r3, #16
   33490:	f043 030d 	orr.w	r3, r3, #13
   33494:	6023      	str	r3, [r4, #0]
   33496:	e7d2      	b.n	3343e <ip_interface_recvfrom+0x1fe>

00033498 <ip_interface_connect>:
   33498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3349c:	b082      	sub	sp, #8
   3349e:	2900      	cmp	r1, #0
   334a0:	d044      	beq.n	3352c <ip_interface_connect+0x94>
   334a2:	2a00      	cmp	r2, #0
   334a4:	d042      	beq.n	3352c <ip_interface_connect+0x94>
   334a6:	4606      	mov	r6, r0
   334a8:	460f      	mov	r7, r1
   334aa:	f001 f857 	bl	3455c <interface_socket_from_handle_get>
   334ae:	4605      	mov	r5, r0
   334b0:	2800      	cmp	r0, #0
   334b2:	f000 8096 	beq.w	335e2 <ip_interface_connect+0x14a>
   334b6:	6803      	ldr	r3, [r0, #0]
   334b8:	b29b      	uxth	r3, r3
   334ba:	2b02      	cmp	r3, #2
   334bc:	d004      	beq.n	334c8 <ip_interface_connect+0x30>
   334be:	6803      	ldr	r3, [r0, #0]
   334c0:	b29b      	uxth	r3, r3
   334c2:	2b04      	cmp	r3, #4
   334c4:	f040 808d 	bne.w	335e2 <ip_interface_connect+0x14a>
   334c8:	6829      	ldr	r1, [r5, #0]
   334ca:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   334ce:	f040 8084 	bne.w	335da <ip_interface_connect+0x142>
   334d2:	a802      	add	r0, sp, #8
   334d4:	f840 1d04 	str.w	r1, [r0, #-4]!
   334d8:	f8d5 8018 	ldr.w	r8, [r5, #24]
   334dc:	f7fb feb6 	bl	2f24c <rpc_ip_client_request_alloc>
   334e0:	bb70      	cbnz	r0, 33540 <ip_interface_connect+0xa8>
   334e2:	2108      	movs	r1, #8
   334e4:	0433      	lsls	r3, r6, #16
   334e6:	9c01      	ldr	r4, [sp, #4]
   334e8:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   334ec:	f042 0202 	orr.w	r2, r2, #2
   334f0:	60e2      	str	r2, [r4, #12]
   334f2:	f8c4 8010 	str.w	r8, [r4, #16]
   334f6:	7260      	strb	r0, [r4, #9]
   334f8:	72a0      	strb	r0, [r4, #10]
   334fa:	72e0      	strb	r0, [r4, #11]
   334fc:	7221      	strb	r1, [r4, #8]
   334fe:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   33502:	f043 0302 	orr.w	r3, r3, #2
   33506:	60e3      	str	r3, [r4, #12]
   33508:	68a3      	ldr	r3, [r4, #8]
   3350a:	69aa      	ldr	r2, [r5, #24]
   3350c:	3304      	adds	r3, #4
   3350e:	6122      	str	r2, [r4, #16]
   33510:	60a3      	str	r3, [r4, #8]
   33512:	68eb      	ldr	r3, [r5, #12]
   33514:	687a      	ldr	r2, [r7, #4]
   33516:	4293      	cmp	r3, r2
   33518:	d108      	bne.n	3352c <ip_interface_connect+0x94>
   3351a:	2b02      	cmp	r3, #2
   3351c:	f104 0018 	add.w	r0, r4, #24
   33520:	783a      	ldrb	r2, [r7, #0]
   33522:	d03a      	beq.n	3359a <ip_interface_connect+0x102>
   33524:	2b0a      	cmp	r3, #10
   33526:	d101      	bne.n	3352c <ip_interface_connect+0x94>
   33528:	2a24      	cmp	r2, #36	; 0x24
   3352a:	d00e      	beq.n	3354a <ip_interface_connect+0xb2>
   3352c:	2416      	movs	r4, #22
   3352e:	4620      	mov	r0, r4
   33530:	f7f3 fb1e 	bl	26b70 <bsd_os_errno_set>
   33534:	f04f 34ff 	mov.w	r4, #4294967295
   33538:	4620      	mov	r0, r4
   3353a:	b002      	add	sp, #8
   3353c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33540:	9c01      	ldr	r4, [sp, #4]
   33542:	2c00      	cmp	r4, #0
   33544:	d04f      	beq.n	335e6 <ip_interface_connect+0x14e>
   33546:	0433      	lsls	r3, r6, #16
   33548:	e7d9      	b.n	334fe <ip_interface_connect+0x66>
   3354a:	2210      	movs	r2, #16
   3354c:	893b      	ldrh	r3, [r7, #8]
   3354e:	18b9      	adds	r1, r7, r2
   33550:	82e2      	strh	r2, [r4, #22]
   33552:	82a3      	strh	r3, [r4, #20]
   33554:	f00b fbb9 	bl	3ecca <memcpy>
   33558:	68a3      	ldr	r3, [r4, #8]
   3355a:	8ae2      	ldrh	r2, [r4, #22]
   3355c:	f247 0102 	movw	r1, #28674	; 0x7002
   33560:	4413      	add	r3, r2
   33562:	60a3      	str	r3, [r4, #8]
   33564:	682f      	ldr	r7, [r5, #0]
   33566:	682b      	ldr	r3, [r5, #0]
   33568:	4620      	mov	r0, r4
   3356a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   3356e:	602b      	str	r3, [r5, #0]
   33570:	f7fb fe80 	bl	2f274 <rpc_ip_client_request_send>
   33574:	b9e0      	cbnz	r0, 335b0 <ip_interface_connect+0x118>
   33576:	682b      	ldr	r3, [r5, #0]
   33578:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   3357c:	d12f      	bne.n	335de <ip_interface_connect+0x146>
   3357e:	f04f 33ff 	mov.w	r3, #4294967295
   33582:	f64f 72ff 	movw	r2, #65535	; 0xffff
   33586:	2105      	movs	r1, #5
   33588:	4630      	mov	r0, r6
   3358a:	f000 ff73 	bl	34474 <interface_socket_wait>
   3358e:	4604      	mov	r4, r0
   33590:	b1c0      	cbz	r0, 335c4 <ip_interface_connect+0x12c>
   33592:	2c73      	cmp	r4, #115	; 0x73
   33594:	d0cb      	beq.n	3352e <ip_interface_connect+0x96>
   33596:	602f      	str	r7, [r5, #0]
   33598:	e7c9      	b.n	3352e <ip_interface_connect+0x96>
   3359a:	2a10      	cmp	r2, #16
   3359c:	d1c6      	bne.n	3352c <ip_interface_connect+0x94>
   3359e:	2204      	movs	r2, #4
   335a0:	893b      	ldrh	r3, [r7, #8]
   335a2:	f107 010c 	add.w	r1, r7, #12
   335a6:	82e2      	strh	r2, [r4, #22]
   335a8:	82a3      	strh	r3, [r4, #20]
   335aa:	f00b fb8e 	bl	3ecca <memcpy>
   335ae:	e7d3      	b.n	33558 <ip_interface_connect+0xc0>
   335b0:	6820      	ldr	r0, [r4, #0]
   335b2:	b108      	cbz	r0, 335b8 <ip_interface_connect+0x120>
   335b4:	f7fb fe7c 	bl	2f2b0 <rpc_ip_client_data_free>
   335b8:	4620      	mov	r0, r4
   335ba:	f7fb fe71 	bl	2f2a0 <rpc_ip_client_message_free>
   335be:	2423      	movs	r4, #35	; 0x23
   335c0:	602f      	str	r7, [r5, #0]
   335c2:	e7b4      	b.n	3352e <ip_interface_connect+0x96>
   335c4:	4630      	mov	r0, r6
   335c6:	f000 ffc9 	bl	3455c <interface_socket_from_handle_get>
   335ca:	2800      	cmp	r0, #0
   335cc:	d0b4      	beq.n	33538 <ip_interface_connect+0xa0>
   335ce:	6844      	ldr	r4, [r0, #4]
   335d0:	2c00      	cmp	r4, #0
   335d2:	d0b1      	beq.n	33538 <ip_interface_connect+0xa0>
   335d4:	f8c0 8004 	str.w	r8, [r0, #4]
   335d8:	e7db      	b.n	33592 <ip_interface_connect+0xfa>
   335da:	2472      	movs	r4, #114	; 0x72
   335dc:	e7a7      	b.n	3352e <ip_interface_connect+0x96>
   335de:	2473      	movs	r4, #115	; 0x73
   335e0:	e7a5      	b.n	3352e <ip_interface_connect+0x96>
   335e2:	2409      	movs	r4, #9
   335e4:	e7a3      	b.n	3352e <ip_interface_connect+0x96>
   335e6:	240c      	movs	r4, #12
   335e8:	e7a1      	b.n	3352e <ip_interface_connect+0x96>
   335ea:	bf00      	nop

000335ec <ip_interface_bind>:
   335ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   335f0:	b082      	sub	sp, #8
   335f2:	b389      	cbz	r1, 33658 <ip_interface_bind+0x6c>
   335f4:	b382      	cbz	r2, 33658 <ip_interface_bind+0x6c>
   335f6:	4607      	mov	r7, r0
   335f8:	460e      	mov	r6, r1
   335fa:	f000 ffaf 	bl	3455c <interface_socket_from_handle_get>
   335fe:	4605      	mov	r5, r0
   33600:	2800      	cmp	r0, #0
   33602:	d07b      	beq.n	336fc <ip_interface_bind+0x110>
   33604:	6803      	ldr	r3, [r0, #0]
   33606:	b29b      	uxth	r3, r3
   33608:	2b02      	cmp	r3, #2
   3360a:	d177      	bne.n	336fc <ip_interface_bind+0x110>
   3360c:	2100      	movs	r1, #0
   3360e:	a802      	add	r0, sp, #8
   33610:	f840 1d04 	str.w	r1, [r0, #-4]!
   33614:	f8d5 8018 	ldr.w	r8, [r5, #24]
   33618:	f7fb fe18 	bl	2f24c <rpc_ip_client_request_alloc>
   3361c:	bb30      	cbnz	r0, 3366c <ip_interface_bind+0x80>
   3361e:	f247 0305 	movw	r3, #28677	; 0x7005
   33622:	2208      	movs	r2, #8
   33624:	9c01      	ldr	r4, [sp, #4]
   33626:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   3362a:	60e3      	str	r3, [r4, #12]
   3362c:	f8c4 8010 	str.w	r8, [r4, #16]
   33630:	7260      	strb	r0, [r4, #9]
   33632:	72a0      	strb	r0, [r4, #10]
   33634:	72e0      	strb	r0, [r4, #11]
   33636:	7222      	strb	r2, [r4, #8]
   33638:	68a3      	ldr	r3, [r4, #8]
   3363a:	3304      	adds	r3, #4
   3363c:	60a3      	str	r3, [r4, #8]
   3363e:	68eb      	ldr	r3, [r5, #12]
   33640:	6872      	ldr	r2, [r6, #4]
   33642:	4293      	cmp	r3, r2
   33644:	d108      	bne.n	33658 <ip_interface_bind+0x6c>
   33646:	2b02      	cmp	r3, #2
   33648:	f104 0018 	add.w	r0, r4, #24
   3364c:	7832      	ldrb	r2, [r6, #0]
   3364e:	d03c      	beq.n	336ca <ip_interface_bind+0xde>
   33650:	2b0a      	cmp	r3, #10
   33652:	d101      	bne.n	33658 <ip_interface_bind+0x6c>
   33654:	2a24      	cmp	r2, #36	; 0x24
   33656:	d00e      	beq.n	33676 <ip_interface_bind+0x8a>
   33658:	2416      	movs	r4, #22
   3365a:	4620      	mov	r0, r4
   3365c:	f7f3 fa88 	bl	26b70 <bsd_os_errno_set>
   33660:	f04f 34ff 	mov.w	r4, #4294967295
   33664:	4620      	mov	r0, r4
   33666:	b002      	add	sp, #8
   33668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3366c:	9c01      	ldr	r4, [sp, #4]
   3366e:	2c00      	cmp	r4, #0
   33670:	d1e2      	bne.n	33638 <ip_interface_bind+0x4c>
   33672:	240c      	movs	r4, #12
   33674:	e7f1      	b.n	3365a <ip_interface_bind+0x6e>
   33676:	2210      	movs	r2, #16
   33678:	8933      	ldrh	r3, [r6, #8]
   3367a:	18b1      	adds	r1, r6, r2
   3367c:	82e2      	strh	r2, [r4, #22]
   3367e:	82a3      	strh	r3, [r4, #20]
   33680:	f00b fb23 	bl	3ecca <memcpy>
   33684:	68a3      	ldr	r3, [r4, #8]
   33686:	8ae2      	ldrh	r2, [r4, #22]
   33688:	f247 0105 	movw	r1, #28677	; 0x7005
   3368c:	4413      	add	r3, r2
   3368e:	60a3      	str	r3, [r4, #8]
   33690:	682b      	ldr	r3, [r5, #0]
   33692:	4620      	mov	r0, r4
   33694:	0c1b      	lsrs	r3, r3, #16
   33696:	041b      	lsls	r3, r3, #16
   33698:	f043 0303 	orr.w	r3, r3, #3
   3369c:	602b      	str	r3, [r5, #0]
   3369e:	682e      	ldr	r6, [r5, #0]
   336a0:	f7fb fde8 	bl	2f274 <rpc_ip_client_request_send>
   336a4:	4680      	mov	r8, r0
   336a6:	b9d8      	cbnz	r0, 336e0 <ip_interface_bind+0xf4>
   336a8:	f04f 33ff 	mov.w	r3, #4294967295
   336ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   336b0:	2104      	movs	r1, #4
   336b2:	4638      	mov	r0, r7
   336b4:	f000 fede 	bl	34474 <interface_socket_wait>
   336b8:	4604      	mov	r4, r0
   336ba:	b308      	cbz	r0, 33700 <ip_interface_bind+0x114>
   336bc:	682b      	ldr	r3, [r5, #0]
   336be:	0c1b      	lsrs	r3, r3, #16
   336c0:	041b      	lsls	r3, r3, #16
   336c2:	f043 0302 	orr.w	r3, r3, #2
   336c6:	602b      	str	r3, [r5, #0]
   336c8:	e7c7      	b.n	3365a <ip_interface_bind+0x6e>
   336ca:	2a10      	cmp	r2, #16
   336cc:	d1c4      	bne.n	33658 <ip_interface_bind+0x6c>
   336ce:	2204      	movs	r2, #4
   336d0:	8933      	ldrh	r3, [r6, #8]
   336d2:	f106 010c 	add.w	r1, r6, #12
   336d6:	82e2      	strh	r2, [r4, #22]
   336d8:	82a3      	strh	r3, [r4, #20]
   336da:	f00b faf6 	bl	3ecca <memcpy>
   336de:	e7d1      	b.n	33684 <ip_interface_bind+0x98>
   336e0:	6820      	ldr	r0, [r4, #0]
   336e2:	b108      	cbz	r0, 336e8 <ip_interface_bind+0xfc>
   336e4:	f7fb fde4 	bl	2f2b0 <rpc_ip_client_data_free>
   336e8:	0c36      	lsrs	r6, r6, #16
   336ea:	0436      	lsls	r6, r6, #16
   336ec:	4620      	mov	r0, r4
   336ee:	f046 0602 	orr.w	r6, r6, #2
   336f2:	f7fb fdd5 	bl	2f2a0 <rpc_ip_client_message_free>
   336f6:	2423      	movs	r4, #35	; 0x23
   336f8:	602e      	str	r6, [r5, #0]
   336fa:	e7ae      	b.n	3365a <ip_interface_bind+0x6e>
   336fc:	2409      	movs	r4, #9
   336fe:	e7ac      	b.n	3365a <ip_interface_bind+0x6e>
   33700:	4638      	mov	r0, r7
   33702:	f000 ff2b 	bl	3455c <interface_socket_from_handle_get>
   33706:	2800      	cmp	r0, #0
   33708:	d0ac      	beq.n	33664 <ip_interface_bind+0x78>
   3370a:	6844      	ldr	r4, [r0, #4]
   3370c:	2c00      	cmp	r4, #0
   3370e:	d0a9      	beq.n	33664 <ip_interface_bind+0x78>
   33710:	f8c0 8004 	str.w	r8, [r0, #4]
   33714:	e7d2      	b.n	336bc <ip_interface_bind+0xd0>
   33716:	bf00      	nop

00033718 <ip_interface_listen>:
   33718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3371c:	b082      	sub	sp, #8
   3371e:	4606      	mov	r6, r0
   33720:	f000 ff1c 	bl	3455c <interface_socket_from_handle_get>
   33724:	2800      	cmp	r0, #0
   33726:	d067      	beq.n	337f8 <ip_interface_listen+0xe0>
   33728:	6803      	ldr	r3, [r0, #0]
   3372a:	4605      	mov	r5, r0
   3372c:	b29b      	uxth	r3, r3
   3372e:	2b04      	cmp	r3, #4
   33730:	d162      	bne.n	337f8 <ip_interface_listen+0xe0>
   33732:	2100      	movs	r1, #0
   33734:	4a32      	ldr	r2, [pc, #200]	; (33800 <ip_interface_listen+0xe8>)
   33736:	4630      	mov	r0, r6
   33738:	f000 fe64 	bl	34404 <interface_socket_packet_handler_update>
   3373c:	4601      	mov	r1, r0
   3373e:	2800      	cmp	r0, #0
   33740:	d15c      	bne.n	337fc <ip_interface_listen+0xe4>
   33742:	a802      	add	r0, sp, #8
   33744:	f840 1d04 	str.w	r1, [r0, #-4]!
   33748:	69af      	ldr	r7, [r5, #24]
   3374a:	f7fb fd7f 	bl	2f24c <rpc_ip_client_request_alloc>
   3374e:	bba8      	cbnz	r0, 337bc <ip_interface_listen+0xa4>
   33750:	f247 0308 	movw	r3, #28680	; 0x7008
   33754:	2208      	movs	r2, #8
   33756:	9c01      	ldr	r4, [sp, #4]
   33758:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   3375c:	60e3      	str	r3, [r4, #12]
   3375e:	6127      	str	r7, [r4, #16]
   33760:	7260      	strb	r0, [r4, #9]
   33762:	72a0      	strb	r0, [r4, #10]
   33764:	72e0      	strb	r0, [r4, #11]
   33766:	7222      	strb	r2, [r4, #8]
   33768:	68a3      	ldr	r3, [r4, #8]
   3376a:	f247 0108 	movw	r1, #28680	; 0x7008
   3376e:	3304      	adds	r3, #4
   33770:	60a3      	str	r3, [r4, #8]
   33772:	682b      	ldr	r3, [r5, #0]
   33774:	4620      	mov	r0, r4
   33776:	0c1b      	lsrs	r3, r3, #16
   33778:	041b      	lsls	r3, r3, #16
   3377a:	f043 0306 	orr.w	r3, r3, #6
   3377e:	602b      	str	r3, [r5, #0]
   33780:	682f      	ldr	r7, [r5, #0]
   33782:	f7fb fd77 	bl	2f274 <rpc_ip_client_request_send>
   33786:	4680      	mov	r8, r0
   33788:	b9e8      	cbnz	r0, 337c6 <ip_interface_listen+0xae>
   3378a:	f04f 33ff 	mov.w	r3, #4294967295
   3378e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   33792:	2107      	movs	r1, #7
   33794:	4630      	mov	r0, r6
   33796:	f000 fe6d 	bl	34474 <interface_socket_wait>
   3379a:	4604      	mov	r4, r0
   3379c:	b308      	cbz	r0, 337e2 <ip_interface_listen+0xca>
   3379e:	682b      	ldr	r3, [r5, #0]
   337a0:	0c1b      	lsrs	r3, r3, #16
   337a2:	041b      	lsls	r3, r3, #16
   337a4:	f043 0304 	orr.w	r3, r3, #4
   337a8:	602b      	str	r3, [r5, #0]
   337aa:	4620      	mov	r0, r4
   337ac:	f7f3 f9e0 	bl	26b70 <bsd_os_errno_set>
   337b0:	f04f 34ff 	mov.w	r4, #4294967295
   337b4:	4620      	mov	r0, r4
   337b6:	b002      	add	sp, #8
   337b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   337bc:	9c01      	ldr	r4, [sp, #4]
   337be:	2c00      	cmp	r4, #0
   337c0:	d1d2      	bne.n	33768 <ip_interface_listen+0x50>
   337c2:	240c      	movs	r4, #12
   337c4:	e7f1      	b.n	337aa <ip_interface_listen+0x92>
   337c6:	6820      	ldr	r0, [r4, #0]
   337c8:	b108      	cbz	r0, 337ce <ip_interface_listen+0xb6>
   337ca:	f7fb fd71 	bl	2f2b0 <rpc_ip_client_data_free>
   337ce:	0c3f      	lsrs	r7, r7, #16
   337d0:	043f      	lsls	r7, r7, #16
   337d2:	4620      	mov	r0, r4
   337d4:	f047 0704 	orr.w	r7, r7, #4
   337d8:	f7fb fd62 	bl	2f2a0 <rpc_ip_client_message_free>
   337dc:	2423      	movs	r4, #35	; 0x23
   337de:	602f      	str	r7, [r5, #0]
   337e0:	e7e3      	b.n	337aa <ip_interface_listen+0x92>
   337e2:	4630      	mov	r0, r6
   337e4:	f000 feba 	bl	3455c <interface_socket_from_handle_get>
   337e8:	2800      	cmp	r0, #0
   337ea:	d0e3      	beq.n	337b4 <ip_interface_listen+0x9c>
   337ec:	6844      	ldr	r4, [r0, #4]
   337ee:	2c00      	cmp	r4, #0
   337f0:	d0e0      	beq.n	337b4 <ip_interface_listen+0x9c>
   337f2:	f8c0 8004 	str.w	r8, [r0, #4]
   337f6:	e7d2      	b.n	3379e <ip_interface_listen+0x86>
   337f8:	2409      	movs	r4, #9
   337fa:	e7d6      	b.n	337aa <ip_interface_listen+0x92>
   337fc:	2423      	movs	r4, #35	; 0x23
   337fe:	e7d4      	b.n	337aa <ip_interface_listen+0x92>
   33800:	00032ca9 	.word	0x00032ca9

00033804 <ip_interface_accept>:
   33804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33808:	2500      	movs	r5, #0
   3380a:	b085      	sub	sp, #20
   3380c:	460f      	mov	r7, r1
   3380e:	4690      	mov	r8, r2
   33810:	9502      	str	r5, [sp, #8]
   33812:	4606      	mov	r6, r0
   33814:	f000 fea2 	bl	3455c <interface_socket_from_handle_get>
   33818:	4604      	mov	r4, r0
   3381a:	2800      	cmp	r0, #0
   3381c:	f000 811c 	beq.w	33a58 <ip_interface_accept+0x254>
   33820:	6803      	ldr	r3, [r0, #0]
   33822:	b29b      	uxth	r3, r3
   33824:	2b07      	cmp	r3, #7
   33826:	d10a      	bne.n	3383e <ip_interface_accept+0x3a>
   33828:	6803      	ldr	r3, [r0, #0]
   3382a:	6805      	ldr	r5, [r0, #0]
   3382c:	00db      	lsls	r3, r3, #3
   3382e:	d416      	bmi.n	3385e <ip_interface_accept+0x5a>
   33830:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   33834:	d019      	beq.n	3386a <ip_interface_accept+0x66>
   33836:	6805      	ldr	r5, [r0, #0]
   33838:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   3383c:	d124      	bne.n	33888 <ip_interface_accept+0x84>
   3383e:	f04f 0909 	mov.w	r9, #9
   33842:	9b02      	ldr	r3, [sp, #8]
   33844:	b113      	cbz	r3, 3384c <ip_interface_accept+0x48>
   33846:	4628      	mov	r0, r5
   33848:	f000 fdc6 	bl	343d8 <interface_socket_free>
   3384c:	4648      	mov	r0, r9
   3384e:	f04f 39ff 	mov.w	r9, #4294967295
   33852:	f7f3 f98d 	bl	26b70 <bsd_os_errno_set>
   33856:	4648      	mov	r0, r9
   33858:	b005      	add	sp, #20
   3385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3385e:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   33862:	d16d      	bne.n	33940 <ip_interface_accept+0x13c>
   33864:	f04f 0923 	mov.w	r9, #35	; 0x23
   33868:	e7eb      	b.n	33842 <ip_interface_accept+0x3e>
   3386a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3386e:	f04f 33ff 	mov.w	r3, #4294967295
   33872:	4611      	mov	r1, r2
   33874:	4630      	mov	r0, r6
   33876:	f000 fdfd 	bl	34474 <interface_socket_wait>
   3387a:	4681      	mov	r9, r0
   3387c:	2800      	cmp	r0, #0
   3387e:	d07e      	beq.n	3397e <ip_interface_accept+0x17a>
   33880:	6825      	ldr	r5, [r4, #0]
   33882:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   33886:	d0dc      	beq.n	33842 <ip_interface_accept+0x3e>
   33888:	f04f 30ff 	mov.w	r0, #4294967295
   3388c:	2300      	movs	r3, #0
   3388e:	e9cd 0300 	strd	r0, r3, [sp]
   33892:	4a75      	ldr	r2, [pc, #468]	; (33a68 <ip_interface_accept+0x264>)
   33894:	6921      	ldr	r1, [r4, #16]
   33896:	a802      	add	r0, sp, #8
   33898:	f000 fd40 	bl	3431c <interface_socket_allocate>
   3389c:	9b02      	ldr	r3, [sp, #8]
   3389e:	4605      	mov	r5, r0
   338a0:	2b00      	cmp	r3, #0
   338a2:	f000 80dd 	beq.w	33a60 <ip_interface_accept+0x25c>
   338a6:	2100      	movs	r1, #0
   338a8:	6962      	ldr	r2, [r4, #20]
   338aa:	a804      	add	r0, sp, #16
   338ac:	615a      	str	r2, [r3, #20]
   338ae:	68e2      	ldr	r2, [r4, #12]
   338b0:	f840 1d04 	str.w	r1, [r0, #-4]!
   338b4:	60da      	str	r2, [r3, #12]
   338b6:	6922      	ldr	r2, [r4, #16]
   338b8:	611a      	str	r2, [r3, #16]
   338ba:	f8d4 9018 	ldr.w	r9, [r4, #24]
   338be:	f7fb fcc5 	bl	2f24c <rpc_ip_client_request_alloc>
   338c2:	2800      	cmp	r0, #0
   338c4:	d143      	bne.n	3394e <ip_interface_accept+0x14a>
   338c6:	f247 030c 	movw	r3, #28684	; 0x700c
   338ca:	2108      	movs	r1, #8
   338cc:	f8dd b00c 	ldr.w	fp, [sp, #12]
   338d0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   338d4:	f8cb 300c 	str.w	r3, [fp, #12]
   338d8:	f8cb 9010 	str.w	r9, [fp, #16]
   338dc:	f88b 0009 	strb.w	r0, [fp, #9]
   338e0:	f88b 000a 	strb.w	r0, [fp, #10]
   338e4:	f88b 000b 	strb.w	r0, [fp, #11]
   338e8:	f88b 1008 	strb.w	r1, [fp, #8]
   338ec:	6823      	ldr	r3, [r4, #0]
   338ee:	f247 010c 	movw	r1, #28684	; 0x700c
   338f2:	0c1b      	lsrs	r3, r3, #16
   338f4:	041b      	lsls	r3, r3, #16
   338f6:	f043 0308 	orr.w	r3, r3, #8
   338fa:	6023      	str	r3, [r4, #0]
   338fc:	4658      	mov	r0, fp
   338fe:	f8d4 9000 	ldr.w	r9, [r4]
   33902:	f7fb fcb7 	bl	2f274 <rpc_ip_client_request_send>
   33906:	4682      	mov	sl, r0
   33908:	bb48      	cbnz	r0, 3395e <ip_interface_accept+0x15a>
   3390a:	6822      	ldr	r2, [r4, #0]
   3390c:	9900      	ldr	r1, [sp, #0]
   3390e:	f04f 33ff 	mov.w	r3, #4294967295
   33912:	400a      	ands	r2, r1
   33914:	6022      	str	r2, [r4, #0]
   33916:	2109      	movs	r1, #9
   33918:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3391c:	4630      	mov	r0, r6
   3391e:	f000 fda9 	bl	34474 <interface_socket_wait>
   33922:	4681      	mov	r9, r0
   33924:	2800      	cmp	r0, #0
   33926:	f000 8085 	beq.w	33a34 <ip_interface_accept+0x230>
   3392a:	6823      	ldr	r3, [r4, #0]
   3392c:	9a01      	ldr	r2, [sp, #4]
   3392e:	431a      	orrs	r2, r3
   33930:	6022      	str	r2, [r4, #0]
   33932:	6823      	ldr	r3, [r4, #0]
   33934:	0c1b      	lsrs	r3, r3, #16
   33936:	041b      	lsls	r3, r3, #16
   33938:	f043 0307 	orr.w	r3, r3, #7
   3393c:	6023      	str	r3, [r4, #0]
   3393e:	e780      	b.n	33842 <ip_interface_accept+0x3e>
   33940:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   33944:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   33948:	e9cd 2300 	strd	r2, r3, [sp]
   3394c:	e7a1      	b.n	33892 <ip_interface_accept+0x8e>
   3394e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   33952:	f04f 090c 	mov.w	r9, #12
   33956:	f1bb 0f00 	cmp.w	fp, #0
   3395a:	d1c7      	bne.n	338ec <ip_interface_accept+0xe8>
   3395c:	e771      	b.n	33842 <ip_interface_accept+0x3e>
   3395e:	f8db 0000 	ldr.w	r0, [fp]
   33962:	b108      	cbz	r0, 33968 <ip_interface_accept+0x164>
   33964:	f7fb fca4 	bl	2f2b0 <rpc_ip_client_data_free>
   33968:	ea4f 4919 	mov.w	r9, r9, lsr #16
   3396c:	4658      	mov	r0, fp
   3396e:	ea4f 4909 	mov.w	r9, r9, lsl #16
   33972:	f7fb fc95 	bl	2f2a0 <rpc_ip_client_message_free>
   33976:	f049 0307 	orr.w	r3, r9, #7
   3397a:	6023      	str	r3, [r4, #0]
   3397c:	e772      	b.n	33864 <ip_interface_accept+0x60>
   3397e:	4630      	mov	r0, r6
   33980:	f000 fdec 	bl	3455c <interface_socket_from_handle_get>
   33984:	b130      	cbz	r0, 33994 <ip_interface_accept+0x190>
   33986:	f8d0 9004 	ldr.w	r9, [r0, #4]
   3398a:	f1b9 0f00 	cmp.w	r9, #0
   3398e:	d001      	beq.n	33994 <ip_interface_accept+0x190>
   33990:	6045      	str	r5, [r0, #4]
   33992:	e775      	b.n	33880 <ip_interface_accept+0x7c>
   33994:	6823      	ldr	r3, [r4, #0]
   33996:	03d9      	lsls	r1, r3, #15
   33998:	f53f af76 	bmi.w	33888 <ip_interface_accept+0x84>
   3399c:	4d33      	ldr	r5, [pc, #204]	; (33a6c <ip_interface_accept+0x268>)
   3399e:	9902      	ldr	r1, [sp, #8]
   339a0:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   339a4:	699b      	ldr	r3, [r3, #24]
   339a6:	618b      	str	r3, [r1, #24]
   339a8:	b147      	cbz	r7, 339bc <ip_interface_accept+0x1b8>
   339aa:	68cb      	ldr	r3, [r1, #12]
   339ac:	2b0a      	cmp	r3, #10
   339ae:	d024      	beq.n	339fa <ip_interface_accept+0x1f6>
   339b0:	2b02      	cmp	r3, #2
   339b2:	d103      	bne.n	339bc <ip_interface_accept+0x1b8>
   339b4:	f8d8 2000 	ldr.w	r2, [r8]
   339b8:	2a10      	cmp	r2, #16
   339ba:	d032      	beq.n	33a22 <ip_interface_accept+0x21e>
   339bc:	680a      	ldr	r2, [r1, #0]
   339be:	482c      	ldr	r0, [pc, #176]	; (33a70 <ip_interface_accept+0x26c>)
   339c0:	4002      	ands	r2, r0
   339c2:	f042 0205 	orr.w	r2, r2, #5
   339c6:	600a      	str	r2, [r1, #0]
   339c8:	9a02      	ldr	r2, [sp, #8]
   339ca:	6811      	ldr	r1, [r2, #0]
   339cc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   339d0:	6011      	str	r1, [r2, #0]
   339d2:	6811      	ldr	r1, [r2, #0]
   339d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   339d8:	6011      	str	r1, [r2, #0]
   339da:	6823      	ldr	r3, [r4, #0]
   339dc:	4003      	ands	r3, r0
   339de:	f043 0307 	orr.w	r3, r3, #7
   339e2:	6023      	str	r3, [r4, #0]
   339e4:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   339e8:	f7fb fc5a 	bl	2f2a0 <rpc_ip_client_message_free>
   339ec:	2300      	movs	r3, #0
   339ee:	4648      	mov	r0, r9
   339f0:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   339f4:	b005      	add	sp, #20
   339f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   339fa:	f8d8 2000 	ldr.w	r2, [r8]
   339fe:	2a24      	cmp	r2, #36	; 0x24
   33a00:	d1dc      	bne.n	339bc <ip_interface_accept+0x1b8>
   33a02:	703a      	strb	r2, [r7, #0]
   33a04:	2210      	movs	r2, #16
   33a06:	607b      	str	r3, [r7, #4]
   33a08:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   33a0c:	f107 0010 	add.w	r0, r7, #16
   33a10:	8b9b      	ldrh	r3, [r3, #28]
   33a12:	813b      	strh	r3, [r7, #8]
   33a14:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   33a18:	3120      	adds	r1, #32
   33a1a:	f00b f956 	bl	3ecca <memcpy>
   33a1e:	9902      	ldr	r1, [sp, #8]
   33a20:	e7cc      	b.n	339bc <ip_interface_accept+0x1b8>
   33a22:	703a      	strb	r2, [r7, #0]
   33a24:	607b      	str	r3, [r7, #4]
   33a26:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   33a2a:	f107 000c 	add.w	r0, r7, #12
   33a2e:	8b9b      	ldrh	r3, [r3, #28]
   33a30:	2204      	movs	r2, #4
   33a32:	e7ee      	b.n	33a12 <ip_interface_accept+0x20e>
   33a34:	4630      	mov	r0, r6
   33a36:	f000 fd91 	bl	3455c <interface_socket_from_handle_get>
   33a3a:	b138      	cbz	r0, 33a4c <ip_interface_accept+0x248>
   33a3c:	f8d0 9004 	ldr.w	r9, [r0, #4]
   33a40:	f1b9 0f00 	cmp.w	r9, #0
   33a44:	d002      	beq.n	33a4c <ip_interface_accept+0x248>
   33a46:	f8c0 a004 	str.w	sl, [r0, #4]
   33a4a:	e76e      	b.n	3392a <ip_interface_accept+0x126>
   33a4c:	6823      	ldr	r3, [r4, #0]
   33a4e:	9a01      	ldr	r2, [sp, #4]
   33a50:	46a9      	mov	r9, r5
   33a52:	4313      	orrs	r3, r2
   33a54:	6023      	str	r3, [r4, #0]
   33a56:	e7a1      	b.n	3399c <ip_interface_accept+0x198>
   33a58:	4605      	mov	r5, r0
   33a5a:	f04f 0909 	mov.w	r9, #9
   33a5e:	e6f0      	b.n	33842 <ip_interface_accept+0x3e>
   33a60:	f04f 090c 	mov.w	r9, #12
   33a64:	e6f2      	b.n	3384c <ip_interface_accept+0x48>
   33a66:	bf00      	nop
   33a68:	00032ca9 	.word	0x00032ca9
   33a6c:	20024fac 	.word	0x20024fac
   33a70:	ffff0000 	.word	0xffff0000

00033a74 <ip_interface_setopt>:
   33a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33a78:	2901      	cmp	r1, #1
   33a7a:	b084      	sub	sp, #16
   33a7c:	f040 809c 	bne.w	33bb8 <ip_interface_setopt+0x144>
   33a80:	460e      	mov	r6, r1
   33a82:	4690      	mov	r8, r2
   33a84:	461d      	mov	r5, r3
   33a86:	4607      	mov	r7, r0
   33a88:	f000 fd68 	bl	3455c <interface_socket_from_handle_get>
   33a8c:	4604      	mov	r4, r0
   33a8e:	2800      	cmp	r0, #0
   33a90:	f000 80a5 	beq.w	33bde <ip_interface_setopt+0x16a>
   33a94:	f1b8 0f19 	cmp.w	r8, #25
   33a98:	d16e      	bne.n	33b78 <ip_interface_setopt+0x104>
   33a9a:	2d00      	cmp	r5, #0
   33a9c:	f000 8092 	beq.w	33bc4 <ip_interface_setopt+0x150>
   33aa0:	4628      	mov	r0, r5
   33aa2:	f7e9 fb3f 	bl	1d124 <strlen>
   33aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   33aa8:	4298      	cmp	r0, r3
   33aaa:	f040 808b 	bne.w	33bc4 <ip_interface_setopt+0x150>
   33aae:	6823      	ldr	r3, [r4, #0]
   33ab0:	b29b      	uxth	r3, r3
   33ab2:	2b02      	cmp	r3, #2
   33ab4:	d173      	bne.n	33b9e <ip_interface_setopt+0x12a>
   33ab6:	4629      	mov	r1, r5
   33ab8:	68e0      	ldr	r0, [r4, #12]
   33aba:	f7fe fb65 	bl	32188 <pdn_interface_pdn_id_get>
   33abe:	9002      	str	r0, [sp, #8]
   33ac0:	3001      	adds	r0, #1
   33ac2:	bf08      	it	eq
   33ac4:	2516      	moveq	r5, #22
   33ac6:	d04e      	beq.n	33b66 <ip_interface_setopt+0xf2>
   33ac8:	6823      	ldr	r3, [r4, #0]
   33aca:	025b      	lsls	r3, r3, #9
   33acc:	d44a      	bmi.n	33b64 <ip_interface_setopt+0xf0>
   33ace:	6823      	ldr	r3, [r4, #0]
   33ad0:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   33ad4:	d146      	bne.n	33b64 <ip_interface_setopt+0xf0>
   33ad6:	6826      	ldr	r6, [r4, #0]
   33ad8:	6822      	ldr	r2, [r4, #0]
   33ada:	a804      	add	r0, sp, #16
   33adc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   33ae0:	6022      	str	r2, [r4, #0]
   33ae2:	2104      	movs	r1, #4
   33ae4:	f840 3d04 	str.w	r3, [r0, #-4]!
   33ae8:	f8d4 8018 	ldr.w	r8, [r4, #24]
   33aec:	f7fb fbae 	bl	2f24c <rpc_ip_client_request_alloc>
   33af0:	2800      	cmp	r0, #0
   33af2:	d14e      	bne.n	33b92 <ip_interface_setopt+0x11e>
   33af4:	f247 0203 	movw	r2, #28675	; 0x7003
   33af8:	2300      	movs	r3, #0
   33afa:	2108      	movs	r1, #8
   33afc:	9d03      	ldr	r5, [sp, #12]
   33afe:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   33b02:	60ea      	str	r2, [r5, #12]
   33b04:	f8c5 8010 	str.w	r8, [r5, #16]
   33b08:	7229      	strb	r1, [r5, #8]
   33b0a:	726b      	strb	r3, [r5, #9]
   33b0c:	72ab      	strb	r3, [r5, #10]
   33b0e:	72eb      	strb	r3, [r5, #11]
   33b10:	f04f 0c08 	mov.w	ip, #8
   33b14:	2300      	movs	r3, #0
   33b16:	2010      	movs	r0, #16
   33b18:	2130      	movs	r1, #48	; 0x30
   33b1a:	68aa      	ldr	r2, [r5, #8]
   33b1c:	756b      	strb	r3, [r5, #21]
   33b1e:	4462      	add	r2, ip
   33b20:	60aa      	str	r2, [r5, #8]
   33b22:	75ab      	strb	r3, [r5, #22]
   33b24:	75eb      	strb	r3, [r5, #23]
   33b26:	76ab      	strb	r3, [r5, #26]
   33b28:	76eb      	strb	r3, [r5, #27]
   33b2a:	f885 c014 	strb.w	ip, [r5, #20]
   33b2e:	7628      	strb	r0, [r5, #24]
   33b30:	7669      	strb	r1, [r5, #25]
   33b32:	2204      	movs	r2, #4
   33b34:	eb0d 010c 	add.w	r1, sp, ip
   33b38:	6828      	ldr	r0, [r5, #0]
   33b3a:	f00b f8c6 	bl	3ecca <memcpy>
   33b3e:	f247 0103 	movw	r1, #28675	; 0x7003
   33b42:	4628      	mov	r0, r5
   33b44:	f7fb fb96 	bl	2f274 <rpc_ip_client_request_send>
   33b48:	4680      	mov	r8, r0
   33b4a:	bb50      	cbnz	r0, 33ba2 <ip_interface_setopt+0x12e>
   33b4c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   33b50:	f04f 33ff 	mov.w	r3, #4294967295
   33b54:	4611      	mov	r1, r2
   33b56:	4638      	mov	r0, r7
   33b58:	f000 fc8c 	bl	34474 <interface_socket_wait>
   33b5c:	4605      	mov	r5, r0
   33b5e:	b398      	cbz	r0, 33bc8 <ip_interface_setopt+0x154>
   33b60:	6026      	str	r6, [r4, #0]
   33b62:	e000      	b.n	33b66 <ip_interface_setopt+0xf2>
   33b64:	2523      	movs	r5, #35	; 0x23
   33b66:	4628      	mov	r0, r5
   33b68:	f7f3 f802 	bl	26b70 <bsd_os_errno_set>
   33b6c:	f04f 35ff 	mov.w	r5, #4294967295
   33b70:	4628      	mov	r0, r5
   33b72:	b004      	add	sp, #16
   33b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   33b7a:	4642      	mov	r2, r8
   33b7c:	9300      	str	r3, [sp, #0]
   33b7e:	4631      	mov	r1, r6
   33b80:	462b      	mov	r3, r5
   33b82:	4638      	mov	r0, r7
   33b84:	f000 fd12 	bl	345ac <interface_socket_setopt>
   33b88:	4605      	mov	r5, r0
   33b8a:	4628      	mov	r0, r5
   33b8c:	b004      	add	sp, #16
   33b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33b92:	9d03      	ldr	r5, [sp, #12]
   33b94:	2d00      	cmp	r5, #0
   33b96:	d1bb      	bne.n	33b10 <ip_interface_setopt+0x9c>
   33b98:	6026      	str	r6, [r4, #0]
   33b9a:	250c      	movs	r5, #12
   33b9c:	e7e3      	b.n	33b66 <ip_interface_setopt+0xf2>
   33b9e:	2509      	movs	r5, #9
   33ba0:	e7e1      	b.n	33b66 <ip_interface_setopt+0xf2>
   33ba2:	6828      	ldr	r0, [r5, #0]
   33ba4:	b108      	cbz	r0, 33baa <ip_interface_setopt+0x136>
   33ba6:	f7fb fb83 	bl	2f2b0 <rpc_ip_client_data_free>
   33baa:	4628      	mov	r0, r5
   33bac:	f7fb fb78 	bl	2f2a0 <rpc_ip_client_message_free>
   33bb0:	2523      	movs	r5, #35	; 0x23
   33bb2:	6026      	str	r6, [r4, #0]
   33bb4:	6026      	str	r6, [r4, #0]
   33bb6:	e7d6      	b.n	33b66 <ip_interface_setopt+0xf2>
   33bb8:	202a      	movs	r0, #42	; 0x2a
   33bba:	f7f2 ffd9 	bl	26b70 <bsd_os_errno_set>
   33bbe:	f04f 35ff 	mov.w	r5, #4294967295
   33bc2:	e7d5      	b.n	33b70 <ip_interface_setopt+0xfc>
   33bc4:	250e      	movs	r5, #14
   33bc6:	e7ce      	b.n	33b66 <ip_interface_setopt+0xf2>
   33bc8:	4638      	mov	r0, r7
   33bca:	f000 fcc7 	bl	3455c <interface_socket_from_handle_get>
   33bce:	b120      	cbz	r0, 33bda <ip_interface_setopt+0x166>
   33bd0:	6845      	ldr	r5, [r0, #4]
   33bd2:	b115      	cbz	r5, 33bda <ip_interface_setopt+0x166>
   33bd4:	f8c0 8004 	str.w	r8, [r0, #4]
   33bd8:	e7c2      	b.n	33b60 <ip_interface_setopt+0xec>
   33bda:	6026      	str	r6, [r4, #0]
   33bdc:	e7c8      	b.n	33b70 <ip_interface_setopt+0xfc>
   33bde:	2009      	movs	r0, #9
   33be0:	f7f2 ffc6 	bl	26b70 <bsd_os_errno_set>
   33be4:	f04f 35ff 	mov.w	r5, #4294967295
   33be8:	e7c2      	b.n	33b70 <ip_interface_setopt+0xfc>
   33bea:	bf00      	nop

00033bec <ip_interface_getopt>:
   33bec:	f000 bd14 	b.w	34618 <interface_socket_getopt>

00033bf0 <ip_interface_getaddrinfo>:
   33bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33bf4:	f04f 0c00 	mov.w	ip, #0
   33bf8:	2401      	movs	r4, #1
   33bfa:	4e72      	ldr	r6, [pc, #456]	; (33dc4 <ip_interface_getaddrinfo+0x1d4>)
   33bfc:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 33dd0 <ip_interface_getaddrinfo+0x1e0>
   33c00:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 33dd4 <ip_interface_getaddrinfo+0x1e4>
   33c04:	b085      	sub	sp, #20
   33c06:	4607      	mov	r7, r0
   33c08:	4615      	mov	r5, r2
   33c0a:	9301      	str	r3, [sp, #4]
   33c0c:	f8a6 c000 	strh.w	ip, [r6]
   33c10:	f8ca 4000 	str.w	r4, [sl]
   33c14:	f8c9 4000 	str.w	r4, [r9]
   33c18:	b171      	cbz	r1, 33c38 <ip_interface_getaddrinfo+0x48>
   33c1a:	4608      	mov	r0, r1
   33c1c:	220a      	movs	r2, #10
   33c1e:	4661      	mov	r1, ip
   33c20:	f006 ff64 	bl	3aaec <strtol>
   33c24:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   33c28:	1e42      	subs	r2, r0, #1
   33c2a:	429a      	cmp	r2, r3
   33c2c:	f200 8083 	bhi.w	33d36 <ip_interface_getaddrinfo+0x146>
   33c30:	0203      	lsls	r3, r0, #8
   33c32:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   33c36:	8030      	strh	r0, [r6, #0]
   33c38:	f8df 819c 	ldr.w	r8, [pc, #412]	; 33dd8 <ip_interface_getaddrinfo+0x1e8>
   33c3c:	f8d8 3000 	ldr.w	r3, [r8]
   33c40:	2b00      	cmp	r3, #0
   33c42:	d174      	bne.n	33d2e <ip_interface_getaddrinfo+0x13e>
   33c44:	4a60      	ldr	r2, [pc, #384]	; (33dc8 <ip_interface_getaddrinfo+0x1d8>)
   33c46:	6013      	str	r3, [r2, #0]
   33c48:	4a60      	ldr	r2, [pc, #384]	; (33dcc <ip_interface_getaddrinfo+0x1dc>)
   33c4a:	6013      	str	r3, [r2, #0]
   33c4c:	2f00      	cmp	r7, #0
   33c4e:	d062      	beq.n	33d16 <ip_interface_getaddrinfo+0x126>
   33c50:	4638      	mov	r0, r7
   33c52:	f7e9 fa67 	bl	1d124 <strlen>
   33c56:	4683      	mov	fp, r0
   33c58:	b125      	cbz	r5, 33c64 <ip_interface_getaddrinfo+0x74>
   33c5a:	69ea      	ldr	r2, [r5, #28]
   33c5c:	b112      	cbz	r2, 33c64 <ip_interface_getaddrinfo+0x74>
   33c5e:	6851      	ldr	r1, [r2, #4]
   33c60:	2966      	cmp	r1, #102	; 0x66
   33c62:	d06c      	beq.n	33d3e <ip_interface_getaddrinfo+0x14e>
   33c64:	f04f 32ff 	mov.w	r2, #4294967295
   33c68:	2100      	movs	r1, #0
   33c6a:	ae04      	add	r6, sp, #16
   33c6c:	f846 1d04 	str.w	r1, [r6, #-4]!
   33c70:	4630      	mov	r0, r6
   33c72:	4659      	mov	r1, fp
   33c74:	9200      	str	r2, [sp, #0]
   33c76:	f7fb fae9 	bl	2f24c <rpc_ip_client_request_alloc>
   33c7a:	9a00      	ldr	r2, [sp, #0]
   33c7c:	2800      	cmp	r0, #0
   33c7e:	d14c      	bne.n	33d1a <ip_interface_getaddrinfo+0x12a>
   33c80:	f247 010d 	movw	r1, #28685	; 0x700d
   33c84:	f04f 0c08 	mov.w	ip, #8
   33c88:	9c03      	ldr	r4, [sp, #12]
   33c8a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   33c8e:	60e1      	str	r1, [r4, #12]
   33c90:	6122      	str	r2, [r4, #16]
   33c92:	7260      	strb	r0, [r4, #9]
   33c94:	72a0      	strb	r0, [r4, #10]
   33c96:	72e0      	strb	r0, [r4, #11]
   33c98:	f884 c008 	strb.w	ip, [r4, #8]
   33c9c:	2d00      	cmp	r5, #0
   33c9e:	d076      	beq.n	33d8e <ip_interface_getaddrinfo+0x19e>
   33ca0:	686a      	ldr	r2, [r5, #4]
   33ca2:	f022 0108 	bic.w	r1, r2, #8
   33ca6:	2902      	cmp	r1, #2
   33ca8:	d05c      	beq.n	33d64 <ip_interface_getaddrinfo+0x174>
   33caa:	2a05      	cmp	r2, #5
   33cac:	d178      	bne.n	33da0 <ip_interface_getaddrinfo+0x1b0>
   33cae:	68a9      	ldr	r1, [r5, #8]
   33cb0:	2902      	cmp	r1, #2
   33cb2:	f8c9 1000 	str.w	r1, [r9]
   33cb6:	d061      	beq.n	33d7c <ip_interface_getaddrinfo+0x18c>
   33cb8:	61a2      	str	r2, [r4, #24]
   33cba:	68ea      	ldr	r2, [r5, #12]
   33cbc:	6222      	str	r2, [r4, #32]
   33cbe:	68aa      	ldr	r2, [r5, #8]
   33cc0:	61e2      	str	r2, [r4, #28]
   33cc2:	682a      	ldr	r2, [r5, #0]
   33cc4:	6162      	str	r2, [r4, #20]
   33cc6:	68a2      	ldr	r2, [r4, #8]
   33cc8:	3210      	adds	r2, #16
   33cca:	60a2      	str	r2, [r4, #8]
   33ccc:	b12f      	cbz	r7, 33cda <ip_interface_getaddrinfo+0xea>
   33cce:	6820      	ldr	r0, [r4, #0]
   33cd0:	b118      	cbz	r0, 33cda <ip_interface_getaddrinfo+0xea>
   33cd2:	465a      	mov	r2, fp
   33cd4:	4639      	mov	r1, r7
   33cd6:	f00a fff8 	bl	3ecca <memcpy>
   33cda:	2301      	movs	r3, #1
   33cdc:	f247 010d 	movw	r1, #28685	; 0x700d
   33ce0:	4620      	mov	r0, r4
   33ce2:	f8c8 3000 	str.w	r3, [r8]
   33ce6:	f7fb fac5 	bl	2f274 <rpc_ip_client_request_send>
   33cea:	2800      	cmp	r0, #0
   33cec:	d156      	bne.n	33d9c <ip_interface_getaddrinfo+0x1ac>
   33cee:	f04f 33ff 	mov.w	r3, #4294967295
   33cf2:	9303      	str	r3, [sp, #12]
   33cf4:	4631      	mov	r1, r6
   33cf6:	4620      	mov	r0, r4
   33cf8:	f7f2 fea6 	bl	26a48 <bsd_os_timedwait>
   33cfc:	f8d8 3000 	ldr.w	r3, [r8]
   33d00:	2b01      	cmp	r3, #1
   33d02:	d0f7      	beq.n	33cf4 <ip_interface_getaddrinfo+0x104>
   33d04:	4b31      	ldr	r3, [pc, #196]	; (33dcc <ip_interface_getaddrinfo+0x1dc>)
   33d06:	6818      	ldr	r0, [r3, #0]
   33d08:	2800      	cmp	r0, #0
   33d0a:	d13b      	bne.n	33d84 <ip_interface_getaddrinfo+0x194>
   33d0c:	4b2e      	ldr	r3, [pc, #184]	; (33dc8 <ip_interface_getaddrinfo+0x1d8>)
   33d0e:	9a01      	ldr	r2, [sp, #4]
   33d10:	681b      	ldr	r3, [r3, #0]
   33d12:	6013      	str	r3, [r2, #0]
   33d14:	e00c      	b.n	33d30 <ip_interface_getaddrinfo+0x140>
   33d16:	46bb      	mov	fp, r7
   33d18:	e79e      	b.n	33c58 <ip_interface_getaddrinfo+0x68>
   33d1a:	9c03      	ldr	r4, [sp, #12]
   33d1c:	2c00      	cmp	r4, #0
   33d1e:	d1bd      	bne.n	33c9c <ip_interface_getaddrinfo+0xac>
   33d20:	200c      	movs	r0, #12
   33d22:	2300      	movs	r3, #0
   33d24:	f8c8 3000 	str.w	r3, [r8]
   33d28:	b005      	add	sp, #20
   33d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33d2e:	2073      	movs	r0, #115	; 0x73
   33d30:	b005      	add	sp, #20
   33d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33d36:	2016      	movs	r0, #22
   33d38:	b005      	add	sp, #20
   33d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33d3e:	6891      	ldr	r1, [r2, #8]
   33d40:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   33d44:	d18e      	bne.n	33c64 <ip_interface_getaddrinfo+0x74>
   33d46:	f240 2102 	movw	r1, #514	; 0x202
   33d4a:	68d0      	ldr	r0, [r2, #12]
   33d4c:	4288      	cmp	r0, r1
   33d4e:	d189      	bne.n	33c64 <ip_interface_getaddrinfo+0x74>
   33d50:	6991      	ldr	r1, [r2, #24]
   33d52:	2900      	cmp	r1, #0
   33d54:	d086      	beq.n	33c64 <ip_interface_getaddrinfo+0x74>
   33d56:	6868      	ldr	r0, [r5, #4]
   33d58:	f7fe fa16 	bl	32188 <pdn_interface_pdn_id_get>
   33d5c:	1c43      	adds	r3, r0, #1
   33d5e:	d081      	beq.n	33c64 <ip_interface_getaddrinfo+0x74>
   33d60:	4602      	mov	r2, r0
   33d62:	e781      	b.n	33c68 <ip_interface_getaddrinfo+0x78>
   33d64:	68a9      	ldr	r1, [r5, #8]
   33d66:	2902      	cmp	r1, #2
   33d68:	f8c9 1000 	str.w	r1, [r9]
   33d6c:	d006      	beq.n	33d7c <ip_interface_getaddrinfo+0x18c>
   33d6e:	2a05      	cmp	r2, #5
   33d70:	d0a2      	beq.n	33cb8 <ip_interface_getaddrinfo+0xc8>
   33d72:	2a0a      	cmp	r2, #10
   33d74:	bf14      	ite	ne
   33d76:	2201      	movne	r2, #1
   33d78:	2202      	moveq	r2, #2
   33d7a:	e79d      	b.n	33cb8 <ip_interface_getaddrinfo+0xc8>
   33d7c:	2102      	movs	r1, #2
   33d7e:	f8ca 1000 	str.w	r1, [sl]
   33d82:	e7f4      	b.n	33d6e <ip_interface_getaddrinfo+0x17e>
   33d84:	4b11      	ldr	r3, [pc, #68]	; (33dcc <ip_interface_getaddrinfo+0x1dc>)
   33d86:	6818      	ldr	r0, [r3, #0]
   33d88:	2800      	cmp	r0, #0
   33d8a:	d0d1      	beq.n	33d30 <ip_interface_getaddrinfo+0x140>
   33d8c:	e7c9      	b.n	33d22 <ip_interface_getaddrinfo+0x132>
   33d8e:	4629      	mov	r1, r5
   33d90:	2210      	movs	r2, #16
   33d92:	f104 0014 	add.w	r0, r4, #20
   33d96:	f00a ffb8 	bl	3ed0a <memset>
   33d9a:	e794      	b.n	33cc6 <ip_interface_getaddrinfo+0xd6>
   33d9c:	2023      	movs	r0, #35	; 0x23
   33d9e:	e7c0      	b.n	33d22 <ip_interface_getaddrinfo+0x132>
   33da0:	202f      	movs	r0, #47	; 0x2f
   33da2:	f7f2 fee5 	bl	26b70 <bsd_os_errno_set>
   33da6:	68a2      	ldr	r2, [r4, #8]
   33da8:	3210      	adds	r2, #16
   33daa:	60a2      	str	r2, [r4, #8]
   33dac:	b917      	cbnz	r7, 33db4 <ip_interface_getaddrinfo+0x1c4>
   33dae:	f04f 30ff 	mov.w	r0, #4294967295
   33db2:	e7b6      	b.n	33d22 <ip_interface_getaddrinfo+0x132>
   33db4:	6820      	ldr	r0, [r4, #0]
   33db6:	2800      	cmp	r0, #0
   33db8:	d0f9      	beq.n	33dae <ip_interface_getaddrinfo+0x1be>
   33dba:	465a      	mov	r2, fp
   33dbc:	4639      	mov	r1, r7
   33dbe:	f00a ff84 	bl	3ecca <memcpy>
   33dc2:	e7f4      	b.n	33dae <ip_interface_getaddrinfo+0x1be>
   33dc4:	20029498 	.word	0x20029498
   33dc8:	20024fa4 	.word	0x20024fa4
   33dcc:	20024f9c 	.word	0x20024f9c
   33dd0:	20024f94 	.word	0x20024f94
   33dd4:	20024f98 	.word	0x20024f98
   33dd8:	20024fa0 	.word	0x20024fa0

00033ddc <ip_interface_freeaddrinfo>:
   33ddc:	b538      	push	{r3, r4, r5, lr}
   33dde:	4c0b      	ldr	r4, [pc, #44]	; (33e0c <ip_interface_freeaddrinfo+0x30>)
   33de0:	6823      	ldr	r3, [r4, #0]
   33de2:	2b02      	cmp	r3, #2
   33de4:	d000      	beq.n	33de8 <ip_interface_freeaddrinfo+0xc>
   33de6:	bd38      	pop	{r3, r4, r5, pc}
   33de8:	b130      	cbz	r0, 33df8 <ip_interface_freeaddrinfo+0x1c>
   33dea:	4605      	mov	r5, r0
   33dec:	6940      	ldr	r0, [r0, #20]
   33dee:	f7fb f9ff 	bl	2f1f0 <nrf_free>
   33df2:	4628      	mov	r0, r5
   33df4:	f7fb f9fc 	bl	2f1f0 <nrf_free>
   33df8:	2300      	movs	r3, #0
   33dfa:	4a05      	ldr	r2, [pc, #20]	; (33e10 <ip_interface_freeaddrinfo+0x34>)
   33dfc:	4905      	ldr	r1, [pc, #20]	; (33e14 <ip_interface_freeaddrinfo+0x38>)
   33dfe:	6023      	str	r3, [r4, #0]
   33e00:	6013      	str	r3, [r2, #0]
   33e02:	6808      	ldr	r0, [r1, #0]
   33e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   33e08:	f7fb ba52 	b.w	2f2b0 <rpc_ip_client_data_free>
   33e0c:	20024fa0 	.word	0x20024fa0
   33e10:	20024f9c 	.word	0x20024f9c
   33e14:	20024fa8 	.word	0x20024fa8

00033e18 <rpc_ip_event_handler>:
   33e18:	f248 030d 	movw	r3, #32781	; 0x800d
   33e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33e20:	4299      	cmp	r1, r3
   33e22:	b089      	sub	sp, #36	; 0x24
   33e24:	4605      	mov	r5, r0
   33e26:	d062      	beq.n	33eee <rpc_ip_event_handler+0xd6>
   33e28:	f248 030f 	movw	r3, #32783	; 0x800f
   33e2c:	4299      	cmp	r1, r3
   33e2e:	460c      	mov	r4, r1
   33e30:	d04b      	beq.n	33eca <rpc_ip_event_handler+0xb2>
   33e32:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   33e36:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   33e3a:	68c0      	ldr	r0, [r0, #12]
   33e3c:	d07b      	beq.n	33f36 <rpc_ip_event_handler+0x11e>
   33e3e:	0c07      	lsrs	r7, r0, #16
   33e40:	4638      	mov	r0, r7
   33e42:	f000 fb8b 	bl	3455c <interface_socket_from_handle_get>
   33e46:	4606      	mov	r6, r0
   33e48:	2800      	cmp	r0, #0
   33e4a:	d05f      	beq.n	33f0c <rpc_ip_event_handler+0xf4>
   33e4c:	4601      	mov	r1, r0
   33e4e:	4623      	mov	r3, r4
   33e50:	462a      	mov	r2, r5
   33e52:	4638      	mov	r0, r7
   33e54:	f7fb fe6e 	bl	2fb34 <tls_rpc_ip_event_handler>
   33e58:	2800      	cmp	r0, #0
   33e5a:	d053      	beq.n	33f04 <rpc_ip_event_handler+0xec>
   33e5c:	f248 0307 	movw	r3, #32775	; 0x8007
   33e60:	429c      	cmp	r4, r3
   33e62:	d97c      	bls.n	33f5e <rpc_ip_event_handler+0x146>
   33e64:	f248 030c 	movw	r3, #32780	; 0x800c
   33e68:	429c      	cmp	r4, r3
   33e6a:	d068      	beq.n	33f3e <rpc_ip_event_handler+0x126>
   33e6c:	f240 8118 	bls.w	340a0 <rpc_ip_event_handler+0x288>
   33e70:	f249 0302 	movw	r3, #36866	; 0x9002
   33e74:	429c      	cmp	r4, r3
   33e76:	f000 8191 	beq.w	3419c <rpc_ip_event_handler+0x384>
   33e7a:	f249 0303 	movw	r3, #36867	; 0x9003
   33e7e:	429c      	cmp	r4, r3
   33e80:	f000 81a6 	beq.w	341d0 <rpc_ip_event_handler+0x3b8>
   33e84:	f249 0301 	movw	r3, #36865	; 0x9001
   33e88:	429c      	cmp	r4, r3
   33e8a:	d13f      	bne.n	33f0c <rpc_ip_event_handler+0xf4>
   33e8c:	6834      	ldr	r4, [r6, #0]
   33e8e:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   33e92:	f000 81be 	beq.w	34212 <rpc_ip_event_handler+0x3fa>
   33e96:	68ab      	ldr	r3, [r5, #8]
   33e98:	2b04      	cmp	r3, #4
   33e9a:	f200 81f4 	bhi.w	34286 <rpc_ip_event_handler+0x46e>
   33e9e:	2400      	movs	r4, #0
   33ea0:	4627      	mov	r7, r4
   33ea2:	6829      	ldr	r1, [r5, #0]
   33ea4:	686a      	ldr	r2, [r5, #4]
   33ea6:	e9cd 7406 	strd	r7, r4, [sp, #24]
   33eaa:	e9cd 1204 	strd	r1, r2, [sp, #16]
   33eae:	69f0      	ldr	r0, [r6, #28]
   33eb0:	a904      	add	r1, sp, #16
   33eb2:	6803      	ldr	r3, [r0, #0]
   33eb4:	685b      	ldr	r3, [r3, #4]
   33eb6:	4798      	blx	r3
   33eb8:	3001      	adds	r0, #1
   33eba:	f000 81d0 	beq.w	3425e <rpc_ip_event_handler+0x446>
   33ebe:	6833      	ldr	r3, [r6, #0]
   33ec0:	2000      	movs	r0, #0
   33ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   33ec6:	6033      	str	r3, [r6, #0]
   33ec8:	e00e      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   33eca:	6943      	ldr	r3, [r0, #20]
   33ecc:	2001      	movs	r0, #1
   33ece:	2b10      	cmp	r3, #16
   33ed0:	49b5      	ldr	r1, [pc, #724]	; (341a8 <rpc_ip_event_handler+0x390>)
   33ed2:	bf88      	it	hi
   33ed4:	222d      	movhi	r2, #45	; 0x2d
   33ed6:	7008      	strb	r0, [r1, #0]
   33ed8:	f04f 0000 	mov.w	r0, #0
   33edc:	bf9c      	itt	ls
   33ede:	4ab3      	ldrls	r2, [pc, #716]	; (341ac <rpc_ip_event_handler+0x394>)
   33ee0:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   33ee4:	4bb2      	ldr	r3, [pc, #712]	; (341b0 <rpc_ip_event_handler+0x398>)
   33ee6:	601a      	str	r2, [r3, #0]
   33ee8:	b009      	add	sp, #36	; 0x24
   33eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33eee:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 341c4 <rpc_ip_event_handler+0x3ac>
   33ef2:	6807      	ldr	r7, [r0, #0]
   33ef4:	f8d9 3000 	ldr.w	r3, [r9]
   33ef8:	2b01      	cmp	r3, #1
   33efa:	d00b      	beq.n	33f14 <rpc_ip_event_handler+0xfc>
   33efc:	b117      	cbz	r7, 33f04 <rpc_ip_event_handler+0xec>
   33efe:	4638      	mov	r0, r7
   33f00:	f7fb f9d6 	bl	2f2b0 <rpc_ip_client_data_free>
   33f04:	2000      	movs	r0, #0
   33f06:	b009      	add	sp, #36	; 0x24
   33f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33f0c:	6828      	ldr	r0, [r5, #0]
   33f0e:	2800      	cmp	r0, #0
   33f10:	d1f6      	bne.n	33f00 <rpc_ip_event_handler+0xe8>
   33f12:	e7f7      	b.n	33f04 <rpc_ip_event_handler+0xec>
   33f14:	6943      	ldr	r3, [r0, #20]
   33f16:	2b00      	cmp	r3, #0
   33f18:	d045      	beq.n	33fa6 <rpc_ip_event_handler+0x18e>
   33f1a:	2b10      	cmp	r3, #16
   33f1c:	bf96      	itet	ls
   33f1e:	4aa3      	ldrls	r2, [pc, #652]	; (341ac <rpc_ip_event_handler+0x394>)
   33f20:	232d      	movhi	r3, #45	; 0x2d
   33f22:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   33f26:	2202      	movs	r2, #2
   33f28:	49a2      	ldr	r1, [pc, #648]	; (341b4 <rpc_ip_event_handler+0x39c>)
   33f2a:	600b      	str	r3, [r1, #0]
   33f2c:	f8c9 2000 	str.w	r2, [r9]
   33f30:	2f00      	cmp	r7, #0
   33f32:	d1e4      	bne.n	33efe <rpc_ip_event_handler+0xe6>
   33f34:	e7e6      	b.n	33f04 <rpc_ip_event_handler+0xec>
   33f36:	f000 fabf 	bl	344b8 <interface_from_internal_id_search>
   33f3a:	4607      	mov	r7, r0
   33f3c:	e780      	b.n	33e40 <rpc_ip_event_handler+0x28>
   33f3e:	6833      	ldr	r3, [r6, #0]
   33f40:	b29b      	uxth	r3, r3
   33f42:	2b08      	cmp	r3, #8
   33f44:	d1de      	bne.n	33f04 <rpc_ip_event_handler+0xec>
   33f46:	696b      	ldr	r3, [r5, #20]
   33f48:	2b00      	cmp	r3, #0
   33f4a:	f000 818a 	beq.w	34262 <rpc_ip_event_handler+0x44a>
   33f4e:	2b10      	cmp	r3, #16
   33f50:	f200 815d 	bhi.w	3420e <rpc_ip_event_handler+0x3f6>
   33f54:	4a95      	ldr	r2, [pc, #596]	; (341ac <rpc_ip_event_handler+0x394>)
   33f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   33f5a:	6073      	str	r3, [r6, #4]
   33f5c:	e7d2      	b.n	33f04 <rpc_ip_event_handler+0xec>
   33f5e:	f248 0306 	movw	r3, #32774	; 0x8006
   33f62:	429c      	cmp	r4, r3
   33f64:	f080 8109 	bcs.w	3417a <rpc_ip_event_handler+0x362>
   33f68:	f248 0302 	movw	r3, #32770	; 0x8002
   33f6c:	429c      	cmp	r4, r3
   33f6e:	f000 80ec 	beq.w	3414a <rpc_ip_event_handler+0x332>
   33f72:	f240 80be 	bls.w	340f2 <rpc_ip_event_handler+0x2da>
   33f76:	f248 0303 	movw	r3, #32771	; 0x8003
   33f7a:	429c      	cmp	r4, r3
   33f7c:	f000 80ca 	beq.w	34114 <rpc_ip_event_handler+0x2fc>
   33f80:	f248 0305 	movw	r3, #32773	; 0x8005
   33f84:	429c      	cmp	r4, r3
   33f86:	d1c1      	bne.n	33f0c <rpc_ip_event_handler+0xf4>
   33f88:	6833      	ldr	r3, [r6, #0]
   33f8a:	b29b      	uxth	r3, r3
   33f8c:	2b03      	cmp	r3, #3
   33f8e:	d1b9      	bne.n	33f04 <rpc_ip_event_handler+0xec>
   33f90:	696b      	ldr	r3, [r5, #20]
   33f92:	2b00      	cmp	r3, #0
   33f94:	d1db      	bne.n	33f4e <rpc_ip_event_handler+0x136>
   33f96:	6833      	ldr	r3, [r6, #0]
   33f98:	2000      	movs	r0, #0
   33f9a:	0c1b      	lsrs	r3, r3, #16
   33f9c:	041b      	lsls	r3, r3, #16
   33f9e:	f043 0304 	orr.w	r3, r3, #4
   33fa2:	6033      	str	r3, [r6, #0]
   33fa4:	e7a0      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   33fa6:	4b84      	ldr	r3, [pc, #528]	; (341b8 <rpc_ip_event_handler+0x3a0>)
   33fa8:	601f      	str	r7, [r3, #0]
   33faa:	6984      	ldr	r4, [r0, #24]
   33fac:	0163      	lsls	r3, r4, #5
   33fae:	4618      	mov	r0, r3
   33fb0:	9303      	str	r3, [sp, #12]
   33fb2:	f7fb f913 	bl	2f1dc <nrf_malloc>
   33fb6:	9002      	str	r0, [sp, #8]
   33fb8:	2800      	cmp	r0, #0
   33fba:	f000 808a 	beq.w	340d2 <rpc_ip_event_handler+0x2ba>
   33fbe:	00e5      	lsls	r5, r4, #3
   33fc0:	1928      	adds	r0, r5, r4
   33fc2:	0080      	lsls	r0, r0, #2
   33fc4:	f7fb f90a 	bl	2f1dc <nrf_malloc>
   33fc8:	2800      	cmp	r0, #0
   33fca:	f000 811c 	beq.w	34206 <rpc_ip_event_handler+0x3ee>
   33fce:	2c00      	cmp	r4, #0
   33fd0:	d05e      	beq.n	34090 <rpc_ip_event_handler+0x278>
   33fd2:	3510      	adds	r5, #16
   33fd4:	1943      	adds	r3, r0, r5
   33fd6:	9301      	str	r3, [sp, #4]
   33fd8:	9b02      	ldr	r3, [sp, #8]
   33fda:	2404      	movs	r4, #4
   33fdc:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 341c8 <rpc_ip_event_handler+0x3b0>
   33fe0:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 341cc <rpc_ip_event_handler+0x3b4>
   33fe4:	f100 0810 	add.w	r8, r0, #16
   33fe8:	f103 0620 	add.w	r6, r3, #32
   33fec:	e01d      	b.n	3402a <rpc_ip_event_handler+0x212>
   33fee:	220a      	movs	r2, #10
   33ff0:	f848 2c0c 	str.w	r2, [r8, #-12]
   33ff4:	f04f 0224 	mov.w	r2, #36	; 0x24
   33ff8:	4640      	mov	r0, r8
   33ffa:	f808 2c10 	strb.w	r2, [r8, #-16]
   33ffe:	f828 3c08 	strh.w	r3, [r8, #-8]
   34002:	f856 2c10 	ldr.w	r2, [r6, #-16]
   34006:	f00a fe60 	bl	3ecca <memcpy>
   3400a:	f856 3c10 	ldr.w	r3, [r6, #-16]
   3400e:	f108 0808 	add.w	r8, r8, #8
   34012:	441c      	add	r4, r3
   34014:	193b      	adds	r3, r7, r4
   34016:	f846 3c08 	str.w	r3, [r6, #-8]
   3401a:	9b01      	ldr	r3, [sp, #4]
   3401c:	f846 6c04 	str.w	r6, [r6, #-4]
   34020:	4598      	cmp	r8, r3
   34022:	442c      	add	r4, r5
   34024:	f106 0620 	add.w	r6, r6, #32
   34028:	d02c      	beq.n	34084 <rpc_ip_event_handler+0x26c>
   3402a:	593b      	ldr	r3, [r7, r4]
   3402c:	193a      	adds	r2, r7, r4
   3402e:	f846 3c20 	str.w	r3, [r6, #-32]
   34032:	6853      	ldr	r3, [r2, #4]
   34034:	f8da 1000 	ldr.w	r1, [sl]
   34038:	2b02      	cmp	r3, #2
   3403a:	bf14      	ite	ne
   3403c:	2002      	movne	r0, #2
   3403e:	200a      	moveq	r0, #10
   34040:	f8db 3000 	ldr.w	r3, [fp]
   34044:	e946 0107 	strd	r0, r1, [r6, #-28]
   34048:	f846 3c14 	str.w	r3, [r6, #-20]
   3404c:	8a10      	ldrh	r0, [r2, #16]
   3404e:	f1a8 0310 	sub.w	r3, r8, #16
   34052:	f846 0c10 	str.w	r0, [r6, #-16]
   34056:	8a55      	ldrh	r5, [r2, #18]
   34058:	f846 3c0c 	str.w	r3, [r6, #-12]
   3405c:	4b57      	ldr	r3, [pc, #348]	; (341bc <rpc_ip_event_handler+0x3a4>)
   3405e:	3414      	adds	r4, #20
   34060:	2804      	cmp	r0, #4
   34062:	eb07 0104 	add.w	r1, r7, r4
   34066:	881b      	ldrh	r3, [r3, #0]
   34068:	d1c1      	bne.n	33fee <rpc_ip_event_handler+0x1d6>
   3406a:	2210      	movs	r2, #16
   3406c:	2002      	movs	r0, #2
   3406e:	f828 3c08 	strh.w	r3, [r8, #-8]
   34072:	f848 0c0c 	str.w	r0, [r8, #-12]
   34076:	f808 2c10 	strb.w	r2, [r8, #-16]
   3407a:	f856 2c10 	ldr.w	r2, [r6, #-16]
   3407e:	f1a8 0004 	sub.w	r0, r8, #4
   34082:	e7c0      	b.n	34006 <rpc_ip_event_handler+0x1ee>
   34084:	2200      	movs	r2, #0
   34086:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   3408a:	440b      	add	r3, r1
   3408c:	f843 2c04 	str.w	r2, [r3, #-4]
   34090:	2202      	movs	r2, #2
   34092:	4b4b      	ldr	r3, [pc, #300]	; (341c0 <rpc_ip_event_handler+0x3a8>)
   34094:	f8c9 2000 	str.w	r2, [r9]
   34098:	9a02      	ldr	r2, [sp, #8]
   3409a:	2000      	movs	r0, #0
   3409c:	601a      	str	r2, [r3, #0]
   3409e:	e723      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   340a0:	f248 0308 	movw	r3, #32776	; 0x8008
   340a4:	429c      	cmp	r4, r3
   340a6:	d041      	beq.n	3412c <rpc_ip_event_handler+0x314>
   340a8:	f248 0309 	movw	r3, #32777	; 0x8009
   340ac:	429c      	cmp	r4, r3
   340ae:	f47f af2d 	bne.w	33f0c <rpc_ip_event_handler+0xf4>
   340b2:	6833      	ldr	r3, [r6, #0]
   340b4:	b29b      	uxth	r3, r3
   340b6:	2b0d      	cmp	r3, #13
   340b8:	f47f af24 	bne.w	33f04 <rpc_ip_event_handler+0xec>
   340bc:	6968      	ldr	r0, [r5, #20]
   340be:	2800      	cmp	r0, #0
   340c0:	f000 80da 	beq.w	34278 <rpc_ip_event_handler+0x460>
   340c4:	2810      	cmp	r0, #16
   340c6:	f200 80a2 	bhi.w	3420e <rpc_ip_event_handler+0x3f6>
   340ca:	4b38      	ldr	r3, [pc, #224]	; (341ac <rpc_ip_event_handler+0x394>)
   340cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   340d0:	e743      	b.n	33f5a <rpc_ip_event_handler+0x142>
   340d2:	f7fb f88d 	bl	2f1f0 <nrf_free>
   340d6:	200c      	movs	r0, #12
   340d8:	2302      	movs	r3, #2
   340da:	4936      	ldr	r1, [pc, #216]	; (341b4 <rpc_ip_event_handler+0x39c>)
   340dc:	4a38      	ldr	r2, [pc, #224]	; (341c0 <rpc_ip_event_handler+0x3a8>)
   340de:	6008      	str	r0, [r1, #0]
   340e0:	682f      	ldr	r7, [r5, #0]
   340e2:	9902      	ldr	r1, [sp, #8]
   340e4:	f8c9 3000 	str.w	r3, [r9]
   340e8:	6011      	str	r1, [r2, #0]
   340ea:	2f00      	cmp	r7, #0
   340ec:	f47f af07 	bne.w	33efe <rpc_ip_event_handler+0xe6>
   340f0:	e708      	b.n	33f04 <rpc_ip_event_handler+0xec>
   340f2:	f248 0301 	movw	r3, #32769	; 0x8001
   340f6:	429c      	cmp	r4, r3
   340f8:	f47f af08 	bne.w	33f0c <rpc_ip_event_handler+0xf4>
   340fc:	6833      	ldr	r3, [r6, #0]
   340fe:	2b01      	cmp	r3, #1
   34100:	f47f af00 	bne.w	33f04 <rpc_ip_event_handler+0xec>
   34104:	6968      	ldr	r0, [r5, #20]
   34106:	2800      	cmp	r0, #0
   34108:	d1dc      	bne.n	340c4 <rpc_ip_event_handler+0x2ac>
   3410a:	2302      	movs	r3, #2
   3410c:	6033      	str	r3, [r6, #0]
   3410e:	69ab      	ldr	r3, [r5, #24]
   34110:	61b3      	str	r3, [r6, #24]
   34112:	e6e9      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   34114:	6833      	ldr	r3, [r6, #0]
   34116:	025b      	lsls	r3, r3, #9
   34118:	f57f aef4 	bpl.w	33f04 <rpc_ip_event_handler+0xec>
   3411c:	6968      	ldr	r0, [r5, #20]
   3411e:	2800      	cmp	r0, #0
   34120:	d1d0      	bne.n	340c4 <rpc_ip_event_handler+0x2ac>
   34122:	6833      	ldr	r3, [r6, #0]
   34124:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   34128:	6033      	str	r3, [r6, #0]
   3412a:	e6dd      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   3412c:	6833      	ldr	r3, [r6, #0]
   3412e:	b29b      	uxth	r3, r3
   34130:	2b06      	cmp	r3, #6
   34132:	f47f aee7 	bne.w	33f04 <rpc_ip_event_handler+0xec>
   34136:	6968      	ldr	r0, [r5, #20]
   34138:	2800      	cmp	r0, #0
   3413a:	d1c3      	bne.n	340c4 <rpc_ip_event_handler+0x2ac>
   3413c:	6833      	ldr	r3, [r6, #0]
   3413e:	0c1b      	lsrs	r3, r3, #16
   34140:	041b      	lsls	r3, r3, #16
   34142:	f043 0307 	orr.w	r3, r3, #7
   34146:	6033      	str	r3, [r6, #0]
   34148:	e6ce      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   3414a:	6833      	ldr	r3, [r6, #0]
   3414c:	0099      	lsls	r1, r3, #2
   3414e:	f57f aed9 	bpl.w	33f04 <rpc_ip_event_handler+0xec>
   34152:	6833      	ldr	r3, [r6, #0]
   34154:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   34158:	6033      	str	r3, [r6, #0]
   3415a:	6968      	ldr	r0, [r5, #20]
   3415c:	2800      	cmp	r0, #0
   3415e:	d066      	beq.n	3422e <rpc_ip_event_handler+0x416>
   34160:	2810      	cmp	r0, #16
   34162:	bf8e      	itee	hi
   34164:	232d      	movhi	r3, #45	; 0x2d
   34166:	4b11      	ldrls	r3, [pc, #68]	; (341ac <rpc_ip_event_handler+0x394>)
   34168:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   3416c:	2000      	movs	r0, #0
   3416e:	6073      	str	r3, [r6, #4]
   34170:	6833      	ldr	r3, [r6, #0]
   34172:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   34176:	6033      	str	r3, [r6, #0]
   34178:	e6b6      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   3417a:	6833      	ldr	r3, [r6, #0]
   3417c:	029a      	lsls	r2, r3, #10
   3417e:	f57f aec1 	bpl.w	33f04 <rpc_ip_event_handler+0xec>
   34182:	696b      	ldr	r3, [r5, #20]
   34184:	2b00      	cmp	r3, #0
   34186:	d061      	beq.n	3424c <rpc_ip_event_handler+0x434>
   34188:	2b6b      	cmp	r3, #107	; 0x6b
   3418a:	f47f aee0 	bne.w	33f4e <rpc_ip_event_handler+0x136>
   3418e:	6933      	ldr	r3, [r6, #16]
   34190:	2b01      	cmp	r3, #1
   34192:	d07c      	beq.n	3428e <rpc_ip_event_handler+0x476>
   34194:	230c      	movs	r3, #12
   34196:	2000      	movs	r0, #0
   34198:	6073      	str	r3, [r6, #4]
   3419a:	e6a5      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   3419c:	6833      	ldr	r3, [r6, #0]
   3419e:	b29b      	uxth	r3, r3
   341a0:	2b07      	cmp	r3, #7
   341a2:	f47f aeaf 	bne.w	33f04 <rpc_ip_event_handler+0xec>
   341a6:	e68a      	b.n	33ebe <rpc_ip_event_handler+0xa6>
   341a8:	2002b9ca 	.word	0x2002b9ca
   341ac:	00040f6c 	.word	0x00040f6c
   341b0:	20024fd0 	.word	0x20024fd0
   341b4:	20024f9c 	.word	0x20024f9c
   341b8:	20024fa8 	.word	0x20024fa8
   341bc:	20029498 	.word	0x20029498
   341c0:	20024fa4 	.word	0x20024fa4
   341c4:	20024fa0 	.word	0x20024fa0
   341c8:	20024f98 	.word	0x20024f98
   341cc:	20024f94 	.word	0x20024f94
   341d0:	6833      	ldr	r3, [r6, #0]
   341d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   341d6:	6033      	str	r3, [r6, #0]
   341d8:	6833      	ldr	r3, [r6, #0]
   341da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   341de:	6033      	str	r3, [r6, #0]
   341e0:	6833      	ldr	r3, [r6, #0]
   341e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   341e6:	6033      	str	r3, [r6, #0]
   341e8:	692b      	ldr	r3, [r5, #16]
   341ea:	2b6c      	cmp	r3, #108	; 0x6c
   341ec:	d016      	beq.n	3421c <rpc_ip_event_handler+0x404>
   341ee:	2b10      	cmp	r3, #16
   341f0:	bf8c      	ite	hi
   341f2:	232d      	movhi	r3, #45	; 0x2d
   341f4:	4a40      	ldrls	r2, [pc, #256]	; (342f8 <rpc_ip_event_handler+0x4e0>)
   341f6:	f04f 0000 	mov.w	r0, #0
   341fa:	bf98      	it	ls
   341fc:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   34200:	6073      	str	r3, [r6, #4]
   34202:	60b3      	str	r3, [r6, #8]
   34204:	e670      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   34206:	220c      	movs	r2, #12
   34208:	4b3c      	ldr	r3, [pc, #240]	; (342fc <rpc_ip_event_handler+0x4e4>)
   3420a:	601a      	str	r2, [r3, #0]
   3420c:	e740      	b.n	34090 <rpc_ip_event_handler+0x278>
   3420e:	232d      	movs	r3, #45	; 0x2d
   34210:	e6a3      	b.n	33f5a <rpc_ip_event_handler+0x142>
   34212:	6828      	ldr	r0, [r5, #0]
   34214:	f7fb f84c 	bl	2f2b0 <rpc_ip_client_data_free>
   34218:	4620      	mov	r0, r4
   3421a:	e665      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   3421c:	2239      	movs	r2, #57	; 0x39
   3421e:	6833      	ldr	r3, [r6, #0]
   34220:	2000      	movs	r0, #0
   34222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   34226:	6033      	str	r3, [r6, #0]
   34228:	6072      	str	r2, [r6, #4]
   3422a:	60b2      	str	r2, [r6, #8]
   3422c:	e65c      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   3422e:	6833      	ldr	r3, [r6, #0]
   34230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   34234:	6033      	str	r3, [r6, #0]
   34236:	6833      	ldr	r3, [r6, #0]
   34238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   3423c:	6033      	str	r3, [r6, #0]
   3423e:	6833      	ldr	r3, [r6, #0]
   34240:	0c1b      	lsrs	r3, r3, #16
   34242:	041b      	lsls	r3, r3, #16
   34244:	f043 0305 	orr.w	r3, r3, #5
   34248:	6033      	str	r3, [r6, #0]
   3424a:	e64d      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   3424c:	6833      	ldr	r3, [r6, #0]
   3424e:	4a2c      	ldr	r2, [pc, #176]	; (34300 <rpc_ip_event_handler+0x4e8>)
   34250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   34254:	6033      	str	r3, [r6, #0]
   34256:	2001      	movs	r0, #1
   34258:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
   3425c:	e644      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   3425e:	2002      	movs	r0, #2
   34260:	e642      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   34262:	4b27      	ldr	r3, [pc, #156]	; (34300 <rpc_ip_event_handler+0x4e8>)
   34264:	2001      	movs	r0, #1
   34266:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
   3426a:	6833      	ldr	r3, [r6, #0]
   3426c:	0c1b      	lsrs	r3, r3, #16
   3426e:	041b      	lsls	r3, r3, #16
   34270:	f043 0309 	orr.w	r3, r3, #9
   34274:	6033      	str	r3, [r6, #0]
   34276:	e637      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   34278:	6833      	ldr	r3, [r6, #0]
   3427a:	0c1b      	lsrs	r3, r3, #16
   3427c:	041b      	lsls	r3, r3, #16
   3427e:	f043 030e 	orr.w	r3, r3, #14
   34282:	6033      	str	r3, [r6, #0]
   34284:	e630      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   34286:	8a6c      	ldrh	r4, [r5, #18]
   34288:	b94c      	cbnz	r4, 3429e <rpc_ip_event_handler+0x486>
   3428a:	4627      	mov	r7, r4
   3428c:	e609      	b.n	33ea2 <rpc_ip_event_handler+0x8a>
   3428e:	220c      	movs	r2, #12
   34290:	6833      	ldr	r3, [r6, #0]
   34292:	2000      	movs	r0, #0
   34294:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   34298:	6033      	str	r3, [r6, #0]
   3429a:	6072      	str	r2, [r6, #4]
   3429c:	e624      	b.n	33ee8 <rpc_ip_event_handler+0xd0>
   3429e:	2024      	movs	r0, #36	; 0x24
   342a0:	f7fa ff9c 	bl	2f1dc <nrf_malloc>
   342a4:	4607      	mov	r7, r0
   342a6:	b318      	cbz	r0, 342f0 <rpc_ip_event_handler+0x4d8>
   342a8:	8a6a      	ldrh	r2, [r5, #18]
   342aa:	2a10      	cmp	r2, #16
   342ac:	d014      	beq.n	342d8 <rpc_ip_event_handler+0x4c0>
   342ae:	2a04      	cmp	r2, #4
   342b0:	d006      	beq.n	342c0 <rpc_ip_event_handler+0x4a8>
   342b2:	6828      	ldr	r0, [r5, #0]
   342b4:	f7fa fffc 	bl	2f2b0 <rpc_ip_client_data_free>
   342b8:	4638      	mov	r0, r7
   342ba:	f7fa ff99 	bl	2f1f0 <nrf_free>
   342be:	e621      	b.n	33f04 <rpc_ip_event_handler+0xec>
   342c0:	2302      	movs	r3, #2
   342c2:	2410      	movs	r4, #16
   342c4:	6043      	str	r3, [r0, #4]
   342c6:	7004      	strb	r4, [r0, #0]
   342c8:	8a2b      	ldrh	r3, [r5, #16]
   342ca:	f105 0114 	add.w	r1, r5, #20
   342ce:	8103      	strh	r3, [r0, #8]
   342d0:	300c      	adds	r0, #12
   342d2:	f00a fcfa 	bl	3ecca <memcpy>
   342d6:	e5e4      	b.n	33ea2 <rpc_ip_event_handler+0x8a>
   342d8:	230a      	movs	r3, #10
   342da:	2424      	movs	r4, #36	; 0x24
   342dc:	6043      	str	r3, [r0, #4]
   342de:	7004      	strb	r4, [r0, #0]
   342e0:	8a2b      	ldrh	r3, [r5, #16]
   342e2:	f105 0114 	add.w	r1, r5, #20
   342e6:	8103      	strh	r3, [r0, #8]
   342e8:	3010      	adds	r0, #16
   342ea:	f00a fcee 	bl	3ecca <memcpy>
   342ee:	e5d8      	b.n	33ea2 <rpc_ip_event_handler+0x8a>
   342f0:	6828      	ldr	r0, [r5, #0]
   342f2:	f7fa ffdd 	bl	2f2b0 <rpc_ip_client_data_free>
   342f6:	e605      	b.n	33f04 <rpc_ip_event_handler+0xec>
   342f8:	00040f6c 	.word	0x00040f6c
   342fc:	20024f9c 	.word	0x20024f9c
   34300:	20024fac 	.word	0x20024fac

00034304 <interface_init>:
   34304:	b508      	push	{r3, lr}
   34306:	f44f 72a2 	mov.w	r2, #324	; 0x144
   3430a:	2100      	movs	r1, #0
   3430c:	4802      	ldr	r0, [pc, #8]	; (34318 <interface_init+0x14>)
   3430e:	f00a fcfc 	bl	3ed0a <memset>
   34312:	2000      	movs	r0, #0
   34314:	bd08      	pop	{r3, pc}
   34316:	bf00      	nop
   34318:	2002b9cc 	.word	0x2002b9cc

0003431c <interface_socket_allocate>:
   3431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3431e:	4b2d      	ldr	r3, [pc, #180]	; (343d4 <interface_socket_allocate+0xb8>)
   34320:	4606      	mov	r6, r0
   34322:	681d      	ldr	r5, [r3, #0]
   34324:	4608      	mov	r0, r1
   34326:	b315      	cbz	r5, 3436e <interface_socket_allocate+0x52>
   34328:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   3432a:	2c00      	cmp	r4, #0
   3432c:	d043      	beq.n	343b6 <interface_socket_allocate+0x9a>
   3432e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   34330:	2c00      	cmp	r4, #0
   34332:	d042      	beq.n	343ba <interface_socket_allocate+0x9e>
   34334:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   34336:	2c00      	cmp	r4, #0
   34338:	d041      	beq.n	343be <interface_socket_allocate+0xa2>
   3433a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   3433e:	2900      	cmp	r1, #0
   34340:	d03f      	beq.n	343c2 <interface_socket_allocate+0xa6>
   34342:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   34346:	b189      	cbz	r1, 3436c <interface_socket_allocate+0x50>
   34348:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   3434c:	2900      	cmp	r1, #0
   3434e:	d03c      	beq.n	343ca <interface_socket_allocate+0xae>
   34350:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   34354:	2900      	cmp	r1, #0
   34356:	d03a      	beq.n	343ce <interface_socket_allocate+0xb2>
   34358:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3435c:	b399      	cbz	r1, 343c6 <interface_socket_allocate+0xaa>
   3435e:	f04f 35ff 	mov.w	r5, #4294967295
   34362:	200c      	movs	r0, #12
   34364:	f7f2 fc04 	bl	26b70 <bsd_os_errno_set>
   34368:	4628      	mov	r0, r5
   3436a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3436c:	2505      	movs	r5, #5
   3436e:	f04f 0c01 	mov.w	ip, #1
   34372:	f04f 37ff 	mov.w	r7, #4294967295
   34376:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   3437a:	00a4      	lsls	r4, r4, #2
   3437c:	f843 c004 	str.w	ip, [r3, r4]
   34380:	441c      	add	r4, r3
   34382:	4611      	mov	r1, r2
   34384:	61a7      	str	r7, [r4, #24]
   34386:	4622      	mov	r2, r4
   34388:	f001 ffee 	bl	36368 <packet_handler_create>
   3438c:	4603      	mov	r3, r0
   3438e:	61e0      	str	r0, [r4, #28]
   34390:	b158      	cbz	r0, 343aa <interface_socket_allocate+0x8e>
   34392:	681b      	ldr	r3, [r3, #0]
   34394:	681b      	ldr	r3, [r3, #0]
   34396:	4798      	blx	r3
   34398:	b910      	cbnz	r0, 343a0 <interface_socket_allocate+0x84>
   3439a:	6034      	str	r4, [r6, #0]
   3439c:	4628      	mov	r0, r5
   3439e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   343a0:	69e0      	ldr	r0, [r4, #28]
   343a2:	f002 f801 	bl	363a8 <packet_handler_delete>
   343a6:	2300      	movs	r3, #0
   343a8:	61e3      	str	r3, [r4, #28]
   343aa:	4620      	mov	r0, r4
   343ac:	2224      	movs	r2, #36	; 0x24
   343ae:	2100      	movs	r1, #0
   343b0:	f00a fcab 	bl	3ed0a <memset>
   343b4:	e7d3      	b.n	3435e <interface_socket_allocate+0x42>
   343b6:	2501      	movs	r5, #1
   343b8:	e7d9      	b.n	3436e <interface_socket_allocate+0x52>
   343ba:	2502      	movs	r5, #2
   343bc:	e7d7      	b.n	3436e <interface_socket_allocate+0x52>
   343be:	2503      	movs	r5, #3
   343c0:	e7d5      	b.n	3436e <interface_socket_allocate+0x52>
   343c2:	2504      	movs	r5, #4
   343c4:	e7d3      	b.n	3436e <interface_socket_allocate+0x52>
   343c6:	2508      	movs	r5, #8
   343c8:	e7d1      	b.n	3436e <interface_socket_allocate+0x52>
   343ca:	2506      	movs	r5, #6
   343cc:	e7cf      	b.n	3436e <interface_socket_allocate+0x52>
   343ce:	2507      	movs	r5, #7
   343d0:	e7cd      	b.n	3436e <interface_socket_allocate+0x52>
   343d2:	bf00      	nop
   343d4:	2002b9cc 	.word	0x2002b9cc

000343d8 <interface_socket_free>:
   343d8:	2808      	cmp	r0, #8
   343da:	d900      	bls.n	343de <interface_socket_free+0x6>
   343dc:	4770      	bx	lr
   343de:	b510      	push	{r4, lr}
   343e0:	4c07      	ldr	r4, [pc, #28]	; (34400 <interface_socket_free+0x28>)
   343e2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   343e6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   343ea:	69e0      	ldr	r0, [r4, #28]
   343ec:	b108      	cbz	r0, 343f2 <interface_socket_free+0x1a>
   343ee:	f001 ffdb 	bl	363a8 <packet_handler_delete>
   343f2:	4620      	mov	r0, r4
   343f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   343f8:	2224      	movs	r2, #36	; 0x24
   343fa:	2100      	movs	r1, #0
   343fc:	f00a bc85 	b.w	3ed0a <memset>
   34400:	2002b9cc 	.word	0x2002b9cc

00034404 <interface_socket_packet_handler_update>:
   34404:	2808      	cmp	r0, #8
   34406:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3440a:	d81e      	bhi.n	3444a <interface_socket_packet_handler_update+0x46>
   3440c:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   34410:	4e17      	ldr	r6, [pc, #92]	; (34470 <interface_socket_packet_handler_update+0x6c>)
   34412:	eb08 0300 	add.w	r3, r8, r0
   34416:	009b      	lsls	r3, r3, #2
   34418:	58f4      	ldr	r4, [r6, r3]
   3441a:	18f5      	adds	r5, r6, r3
   3441c:	b1ac      	cbz	r4, 3444a <interface_socket_packet_handler_update+0x46>
   3441e:	460b      	mov	r3, r1
   34420:	4604      	mov	r4, r0
   34422:	4611      	mov	r1, r2
   34424:	4618      	mov	r0, r3
   34426:	462a      	mov	r2, r5
   34428:	f8d5 901c 	ldr.w	r9, [r5, #28]
   3442c:	f001 ff9c 	bl	36368 <packet_handler_create>
   34430:	61e8      	str	r0, [r5, #28]
   34432:	b1d0      	cbz	r0, 3446a <interface_socket_packet_handler_update+0x66>
   34434:	6803      	ldr	r3, [r0, #0]
   34436:	681b      	ldr	r3, [r3, #0]
   34438:	4798      	blx	r3
   3443a:	4607      	mov	r7, r0
   3443c:	b948      	cbnz	r0, 34452 <interface_socket_packet_handler_update+0x4e>
   3443e:	4648      	mov	r0, r9
   34440:	f001 ffb2 	bl	363a8 <packet_handler_delete>
   34444:	4638      	mov	r0, r7
   34446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3444a:	2705      	movs	r7, #5
   3444c:	4638      	mov	r0, r7
   3444e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   34452:	69e8      	ldr	r0, [r5, #28]
   34454:	f001 ffa8 	bl	363a8 <packet_handler_delete>
   34458:	eb08 0004 	add.w	r0, r8, r4
   3445c:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   34460:	f8c6 901c 	str.w	r9, [r6, #28]
   34464:	4638      	mov	r0, r7
   34466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3446a:	2704      	movs	r7, #4
   3446c:	e7f4      	b.n	34458 <interface_socket_packet_handler_update+0x54>
   3446e:	bf00      	nop
   34470:	2002b9cc 	.word	0x2002b9cc

00034474 <interface_socket_wait>:
   34474:	b5f0      	push	{r4, r5, r6, r7, lr}
   34476:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   3447a:	4c0e      	ldr	r4, [pc, #56]	; (344b4 <interface_socket_wait+0x40>)
   3447c:	0080      	lsls	r0, r0, #2
   3447e:	5825      	ldr	r5, [r4, r0]
   34480:	b083      	sub	sp, #12
   34482:	4015      	ands	r5, r2
   34484:	428d      	cmp	r5, r1
   34486:	9301      	str	r3, [sp, #4]
   34488:	4404      	add	r4, r0
   3448a:	d010      	beq.n	344ae <interface_socket_wait+0x3a>
   3448c:	6863      	ldr	r3, [r4, #4]
   3448e:	b973      	cbnz	r3, 344ae <interface_socket_wait+0x3a>
   34490:	460f      	mov	r7, r1
   34492:	4616      	mov	r6, r2
   34494:	4625      	mov	r5, r4
   34496:	e006      	b.n	344a6 <interface_socket_wait+0x32>
   34498:	686b      	ldr	r3, [r5, #4]
   3449a:	b943      	cbnz	r3, 344ae <interface_socket_wait+0x3a>
   3449c:	a901      	add	r1, sp, #4
   3449e:	4620      	mov	r0, r4
   344a0:	f7f2 fad2 	bl	26a48 <bsd_os_timedwait>
   344a4:	b920      	cbnz	r0, 344b0 <interface_socket_wait+0x3c>
   344a6:	682b      	ldr	r3, [r5, #0]
   344a8:	4033      	ands	r3, r6
   344aa:	42bb      	cmp	r3, r7
   344ac:	d1f4      	bne.n	34498 <interface_socket_wait+0x24>
   344ae:	2000      	movs	r0, #0
   344b0:	b003      	add	sp, #12
   344b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   344b4:	2002b9cc 	.word	0x2002b9cc

000344b8 <interface_from_internal_id_search>:
   344b8:	4b27      	ldr	r3, [pc, #156]	; (34558 <interface_from_internal_id_search+0xa0>)
   344ba:	681a      	ldr	r2, [r3, #0]
   344bc:	b112      	cbz	r2, 344c4 <interface_from_internal_id_search+0xc>
   344be:	699a      	ldr	r2, [r3, #24]
   344c0:	4282      	cmp	r2, r0
   344c2:	d039      	beq.n	34538 <interface_from_internal_id_search+0x80>
   344c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   344c6:	b112      	cbz	r2, 344ce <interface_from_internal_id_search+0x16>
   344c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   344ca:	4282      	cmp	r2, r0
   344cc:	d036      	beq.n	3453c <interface_from_internal_id_search+0x84>
   344ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   344d0:	b112      	cbz	r2, 344d8 <interface_from_internal_id_search+0x20>
   344d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   344d4:	4282      	cmp	r2, r0
   344d6:	d033      	beq.n	34540 <interface_from_internal_id_search+0x88>
   344d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   344da:	b11a      	cbz	r2, 344e4 <interface_from_internal_id_search+0x2c>
   344dc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   344e0:	4282      	cmp	r2, r0
   344e2:	d02f      	beq.n	34544 <interface_from_internal_id_search+0x8c>
   344e4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   344e8:	b11a      	cbz	r2, 344f2 <interface_from_internal_id_search+0x3a>
   344ea:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   344ee:	4282      	cmp	r2, r0
   344f0:	d02a      	beq.n	34548 <interface_from_internal_id_search+0x90>
   344f2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   344f6:	b11a      	cbz	r2, 34500 <interface_from_internal_id_search+0x48>
   344f8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   344fc:	4282      	cmp	r2, r0
   344fe:	d025      	beq.n	3454c <interface_from_internal_id_search+0x94>
   34500:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   34504:	b11a      	cbz	r2, 3450e <interface_from_internal_id_search+0x56>
   34506:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   3450a:	4282      	cmp	r2, r0
   3450c:	d020      	beq.n	34550 <interface_from_internal_id_search+0x98>
   3450e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   34512:	b11a      	cbz	r2, 3451c <interface_from_internal_id_search+0x64>
   34514:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   34518:	4282      	cmp	r2, r0
   3451a:	d01b      	beq.n	34554 <interface_from_internal_id_search+0x9c>
   3451c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   34520:	b13a      	cbz	r2, 34532 <interface_from_internal_id_search+0x7a>
   34522:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   34526:	4283      	cmp	r3, r0
   34528:	bf14      	ite	ne
   3452a:	f04f 30ff 	movne.w	r0, #4294967295
   3452e:	2008      	moveq	r0, #8
   34530:	4770      	bx	lr
   34532:	f04f 30ff 	mov.w	r0, #4294967295
   34536:	4770      	bx	lr
   34538:	2000      	movs	r0, #0
   3453a:	4770      	bx	lr
   3453c:	2001      	movs	r0, #1
   3453e:	4770      	bx	lr
   34540:	2002      	movs	r0, #2
   34542:	4770      	bx	lr
   34544:	2003      	movs	r0, #3
   34546:	4770      	bx	lr
   34548:	2004      	movs	r0, #4
   3454a:	4770      	bx	lr
   3454c:	2005      	movs	r0, #5
   3454e:	4770      	bx	lr
   34550:	2006      	movs	r0, #6
   34552:	4770      	bx	lr
   34554:	2007      	movs	r0, #7
   34556:	4770      	bx	lr
   34558:	2002b9cc 	.word	0x2002b9cc

0003455c <interface_socket_from_handle_get>:
   3455c:	2808      	cmp	r0, #8
   3455e:	d807      	bhi.n	34570 <interface_socket_from_handle_get+0x14>
   34560:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   34564:	4b03      	ldr	r3, [pc, #12]	; (34574 <interface_socket_from_handle_get+0x18>)
   34566:	0080      	lsls	r0, r0, #2
   34568:	581a      	ldr	r2, [r3, r0]
   3456a:	b10a      	cbz	r2, 34570 <interface_socket_from_handle_get+0x14>
   3456c:	4418      	add	r0, r3
   3456e:	4770      	bx	lr
   34570:	2000      	movs	r0, #0
   34572:	4770      	bx	lr
   34574:	2002b9cc 	.word	0x2002b9cc

00034578 <interface_socket_event_get>:
   34578:	b119      	cbz	r1, 34582 <interface_socket_event_get+0xa>
   3457a:	2808      	cmp	r0, #8
   3457c:	d902      	bls.n	34584 <interface_socket_event_get+0xc>
   3457e:	2310      	movs	r3, #16
   34580:	600b      	str	r3, [r1, #0]
   34582:	4770      	bx	lr
   34584:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   34588:	4b07      	ldr	r3, [pc, #28]	; (345a8 <interface_socket_event_get+0x30>)
   3458a:	0080      	lsls	r0, r0, #2
   3458c:	581a      	ldr	r2, [r3, r0]
   3458e:	2a00      	cmp	r2, #0
   34590:	d0f5      	beq.n	3457e <interface_socket_event_get+0x6>
   34592:	581b      	ldr	r3, [r3, r0]
   34594:	0c1b      	lsrs	r3, r3, #16
   34596:	f003 020a 	and.w	r2, r3, #10
   3459a:	2a0a      	cmp	r2, #10
   3459c:	bf14      	ite	ne
   3459e:	f003 030f 	andne.w	r3, r3, #15
   345a2:	f003 030d 	andeq.w	r3, r3, #13
   345a6:	e7eb      	b.n	34580 <interface_socket_event_get+0x8>
   345a8:	2002b9cc 	.word	0x2002b9cc

000345ac <interface_socket_setopt>:
   345ac:	2808      	cmp	r0, #8
   345ae:	b570      	push	{r4, r5, r6, lr}
   345b0:	d827      	bhi.n	34602 <interface_socket_setopt+0x56>
   345b2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   345b6:	4c16      	ldr	r4, [pc, #88]	; (34610 <interface_socket_setopt+0x64>)
   345b8:	0080      	lsls	r0, r0, #2
   345ba:	5825      	ldr	r5, [r4, r0]
   345bc:	b30d      	cbz	r5, 34602 <interface_socket_setopt+0x56>
   345be:	2901      	cmp	r1, #1
   345c0:	d119      	bne.n	345f6 <interface_socket_setopt+0x4a>
   345c2:	2a14      	cmp	r2, #20
   345c4:	d117      	bne.n	345f6 <interface_socket_setopt+0x4a>
   345c6:	b183      	cbz	r3, 345ea <interface_socket_setopt+0x3e>
   345c8:	9a04      	ldr	r2, [sp, #16]
   345ca:	2a08      	cmp	r2, #8
   345cc:	d10d      	bne.n	345ea <interface_socket_setopt+0x3e>
   345ce:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   345d2:	685a      	ldr	r2, [r3, #4]
   345d4:	4e0f      	ldr	r6, [pc, #60]	; (34614 <interface_socket_setopt+0x68>)
   345d6:	6819      	ldr	r1, [r3, #0]
   345d8:	fba6 2302 	umull	r2, r3, r6, r2
   345dc:	099b      	lsrs	r3, r3, #6
   345de:	fb05 3301 	mla	r3, r5, r1, r3
   345e2:	4420      	add	r0, r4
   345e4:	6203      	str	r3, [r0, #32]
   345e6:	2000      	movs	r0, #0
   345e8:	bd70      	pop	{r4, r5, r6, pc}
   345ea:	2016      	movs	r0, #22
   345ec:	f7f2 fac0 	bl	26b70 <bsd_os_errno_set>
   345f0:	f04f 30ff 	mov.w	r0, #4294967295
   345f4:	bd70      	pop	{r4, r5, r6, pc}
   345f6:	202a      	movs	r0, #42	; 0x2a
   345f8:	f7f2 faba 	bl	26b70 <bsd_os_errno_set>
   345fc:	f04f 30ff 	mov.w	r0, #4294967295
   34600:	bd70      	pop	{r4, r5, r6, pc}
   34602:	2009      	movs	r0, #9
   34604:	f7f2 fab4 	bl	26b70 <bsd_os_errno_set>
   34608:	f04f 30ff 	mov.w	r0, #4294967295
   3460c:	bd70      	pop	{r4, r5, r6, pc}
   3460e:	bf00      	nop
   34610:	2002b9cc 	.word	0x2002b9cc
   34614:	10624dd3 	.word	0x10624dd3

00034618 <interface_socket_getopt>:
   34618:	b570      	push	{r4, r5, r6, lr}
   3461a:	2808      	cmp	r0, #8
   3461c:	9d04      	ldr	r5, [sp, #16]
   3461e:	d821      	bhi.n	34664 <interface_socket_getopt+0x4c>
   34620:	4c13      	ldr	r4, [pc, #76]	; (34670 <interface_socket_getopt+0x58>)
   34622:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   34626:	0080      	lsls	r0, r0, #2
   34628:	5826      	ldr	r6, [r4, r0]
   3462a:	4404      	add	r4, r0
   3462c:	b1d6      	cbz	r6, 34664 <interface_socket_getopt+0x4c>
   3462e:	2901      	cmp	r1, #1
   34630:	d112      	bne.n	34658 <interface_socket_getopt+0x40>
   34632:	2a04      	cmp	r2, #4
   34634:	d110      	bne.n	34658 <interface_socket_getopt+0x40>
   34636:	b14b      	cbz	r3, 3464c <interface_socket_getopt+0x34>
   34638:	b145      	cbz	r5, 3464c <interface_socket_getopt+0x34>
   3463a:	682a      	ldr	r2, [r5, #0]
   3463c:	2a04      	cmp	r2, #4
   3463e:	d105      	bne.n	3464c <interface_socket_getopt+0x34>
   34640:	2200      	movs	r2, #0
   34642:	6861      	ldr	r1, [r4, #4]
   34644:	4610      	mov	r0, r2
   34646:	6019      	str	r1, [r3, #0]
   34648:	6062      	str	r2, [r4, #4]
   3464a:	bd70      	pop	{r4, r5, r6, pc}
   3464c:	2016      	movs	r0, #22
   3464e:	f7f2 fa8f 	bl	26b70 <bsd_os_errno_set>
   34652:	f04f 30ff 	mov.w	r0, #4294967295
   34656:	bd70      	pop	{r4, r5, r6, pc}
   34658:	202a      	movs	r0, #42	; 0x2a
   3465a:	f7f2 fa89 	bl	26b70 <bsd_os_errno_set>
   3465e:	f04f 30ff 	mov.w	r0, #4294967295
   34662:	bd70      	pop	{r4, r5, r6, pc}
   34664:	2009      	movs	r0, #9
   34666:	f7f2 fa83 	bl	26b70 <bsd_os_errno_set>
   3466a:	f04f 30ff 	mov.w	r0, #4294967295
   3466e:	bd70      	pop	{r4, r5, r6, pc}
   34670:	2002b9cc 	.word	0x2002b9cc

00034674 <interface_shutdown>:
   34674:	4b18      	ldr	r3, [pc, #96]	; (346d8 <interface_shutdown+0x64>)
   34676:	681a      	ldr	r2, [r3, #0]
   34678:	b10a      	cbz	r2, 3467e <interface_shutdown+0xa>
   3467a:	2270      	movs	r2, #112	; 0x70
   3467c:	605a      	str	r2, [r3, #4]
   3467e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   34680:	b10a      	cbz	r2, 34686 <interface_shutdown+0x12>
   34682:	2270      	movs	r2, #112	; 0x70
   34684:	629a      	str	r2, [r3, #40]	; 0x28
   34686:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   34688:	b10a      	cbz	r2, 3468e <interface_shutdown+0x1a>
   3468a:	2270      	movs	r2, #112	; 0x70
   3468c:	64da      	str	r2, [r3, #76]	; 0x4c
   3468e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   34690:	b10a      	cbz	r2, 34696 <interface_shutdown+0x22>
   34692:	2270      	movs	r2, #112	; 0x70
   34694:	671a      	str	r2, [r3, #112]	; 0x70
   34696:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   3469a:	b112      	cbz	r2, 346a2 <interface_shutdown+0x2e>
   3469c:	2270      	movs	r2, #112	; 0x70
   3469e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   346a2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   346a6:	b112      	cbz	r2, 346ae <interface_shutdown+0x3a>
   346a8:	2270      	movs	r2, #112	; 0x70
   346aa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   346ae:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   346b2:	b112      	cbz	r2, 346ba <interface_shutdown+0x46>
   346b4:	2270      	movs	r2, #112	; 0x70
   346b6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
   346ba:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   346be:	b112      	cbz	r2, 346c6 <interface_shutdown+0x52>
   346c0:	2270      	movs	r2, #112	; 0x70
   346c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   346c6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   346ca:	b112      	cbz	r2, 346d2 <interface_shutdown+0x5e>
   346cc:	2270      	movs	r2, #112	; 0x70
   346ce:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   346d2:	2000      	movs	r0, #0
   346d4:	4770      	bx	lr
   346d6:	bf00      	nop
   346d8:	2002b9cc 	.word	0x2002b9cc

000346dc <interface_socket_fcntl>:
   346dc:	2808      	cmp	r0, #8
   346de:	b510      	push	{r4, lr}
   346e0:	d818      	bhi.n	34714 <interface_socket_fcntl+0x38>
   346e2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   346e6:	4c11      	ldr	r4, [pc, #68]	; (3472c <interface_socket_fcntl+0x50>)
   346e8:	0083      	lsls	r3, r0, #2
   346ea:	58e0      	ldr	r0, [r4, r3]
   346ec:	b190      	cbz	r0, 34714 <interface_socket_fcntl+0x38>
   346ee:	2901      	cmp	r1, #1
   346f0:	d005      	beq.n	346fe <interface_socket_fcntl+0x22>
   346f2:	2902      	cmp	r1, #2
   346f4:	d114      	bne.n	34720 <interface_socket_fcntl+0x44>
   346f6:	58e0      	ldr	r0, [r4, r3]
   346f8:	f3c0 7000 	ubfx	r0, r0, #28, #1
   346fc:	bd10      	pop	{r4, pc}
   346fe:	f012 0001 	ands.w	r0, r2, #1
   34702:	58e2      	ldr	r2, [r4, r3]
   34704:	bf1a      	itte	ne
   34706:	2000      	movne	r0, #0
   34708:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   3470c:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   34710:	50e2      	str	r2, [r4, r3]
   34712:	bd10      	pop	{r4, pc}
   34714:	2009      	movs	r0, #9
   34716:	f7f2 fa2b 	bl	26b70 <bsd_os_errno_set>
   3471a:	f04f 30ff 	mov.w	r0, #4294967295
   3471e:	bd10      	pop	{r4, pc}
   34720:	2016      	movs	r0, #22
   34722:	f7f2 fa25 	bl	26b70 <bsd_os_errno_set>
   34726:	f04f 30ff 	mov.w	r0, #4294967295
   3472a:	bd10      	pop	{r4, pc}
   3472c:	2002b9cc 	.word	0x2002b9cc

00034730 <bsd_os_application_irq_handler>:
   34730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34734:	4c33      	ldr	r4, [pc, #204]	; (34804 <bsd_os_application_irq_handler+0xd4>)
   34736:	f7f2 fb15 	bl	26d64 <bsd_os_application_irq_clear>
   3473a:	f04f 0803 	mov.w	r8, #3
   3473e:	4d32      	ldr	r5, [pc, #200]	; (34808 <bsd_os_application_irq_handler+0xd8>)
   34740:	4f32      	ldr	r7, [pc, #200]	; (3480c <bsd_os_application_irq_handler+0xdc>)
   34742:	f104 0680 	add.w	r6, r4, #128	; 0x80
   34746:	e004      	b.n	34752 <bsd_os_application_irq_handler+0x22>
   34748:	2b04      	cmp	r3, #4
   3474a:	d006      	beq.n	3475a <bsd_os_application_irq_handler+0x2a>
   3474c:	3408      	adds	r4, #8
   3474e:	42b4      	cmp	r4, r6
   34750:	d03b      	beq.n	347ca <bsd_os_application_irq_handler+0x9a>
   34752:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   34756:	2b02      	cmp	r3, #2
   34758:	d1f6      	bne.n	34748 <bsd_os_application_irq_handler+0x18>
   3475a:	6820      	ldr	r0, [r4, #0]
   3475c:	882a      	ldrh	r2, [r5, #0]
   3475e:	6803      	ldr	r3, [r0, #0]
   34760:	b29b      	uxth	r3, r3
   34762:	429a      	cmp	r2, r3
   34764:	d033      	beq.n	347ce <bsd_os_application_irq_handler+0x9e>
   34766:	8a2a      	ldrh	r2, [r5, #16]
   34768:	429a      	cmp	r2, r3
   3476a:	d032      	beq.n	347d2 <bsd_os_application_irq_handler+0xa2>
   3476c:	8c2a      	ldrh	r2, [r5, #32]
   3476e:	429a      	cmp	r2, r3
   34770:	d031      	beq.n	347d6 <bsd_os_application_irq_handler+0xa6>
   34772:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   34774:	429a      	cmp	r2, r3
   34776:	d030      	beq.n	347da <bsd_os_application_irq_handler+0xaa>
   34778:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   3477c:	429a      	cmp	r2, r3
   3477e:	d036      	beq.n	347ee <bsd_os_application_irq_handler+0xbe>
   34780:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   34784:	429a      	cmp	r2, r3
   34786:	d034      	beq.n	347f2 <bsd_os_application_irq_handler+0xc2>
   34788:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   3478c:	429a      	cmp	r2, r3
   3478e:	d032      	beq.n	347f6 <bsd_os_application_irq_handler+0xc6>
   34790:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   34794:	429a      	cmp	r2, r3
   34796:	d030      	beq.n	347fa <bsd_os_application_irq_handler+0xca>
   34798:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   3479c:	429a      	cmp	r2, r3
   3479e:	d02e      	beq.n	347fe <bsd_os_application_irq_handler+0xce>
   347a0:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   347a4:	429a      	cmp	r2, r3
   347a6:	bf08      	it	eq
   347a8:	2309      	moveq	r3, #9
   347aa:	d1cf      	bne.n	3474c <bsd_os_application_irq_handler+0x1c>
   347ac:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   347b0:	685a      	ldr	r2, [r3, #4]
   347b2:	68d9      	ldr	r1, [r3, #12]
   347b4:	4790      	blx	r2
   347b6:	b990      	cbnz	r0, 347de <bsd_os_application_irq_handler+0xae>
   347b8:	2201      	movs	r2, #1
   347ba:	6820      	ldr	r0, [r4, #0]
   347bc:	f804 2c04 	strb.w	r2, [r4, #-4]
   347c0:	68fb      	ldr	r3, [r7, #12]
   347c2:	3408      	adds	r4, #8
   347c4:	4798      	blx	r3
   347c6:	42b4      	cmp	r4, r6
   347c8:	d1c3      	bne.n	34752 <bsd_os_application_irq_handler+0x22>
   347ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   347ce:	2300      	movs	r3, #0
   347d0:	e7ec      	b.n	347ac <bsd_os_application_irq_handler+0x7c>
   347d2:	2301      	movs	r3, #1
   347d4:	e7ea      	b.n	347ac <bsd_os_application_irq_handler+0x7c>
   347d6:	2302      	movs	r3, #2
   347d8:	e7e8      	b.n	347ac <bsd_os_application_irq_handler+0x7c>
   347da:	2303      	movs	r3, #3
   347dc:	e7e6      	b.n	347ac <bsd_os_application_irq_handler+0x7c>
   347de:	2802      	cmp	r0, #2
   347e0:	bf0a      	itet	eq
   347e2:	2304      	moveq	r3, #4
   347e4:	f804 8c04 	strbne.w	r8, [r4, #-4]
   347e8:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   347ec:	e7ae      	b.n	3474c <bsd_os_application_irq_handler+0x1c>
   347ee:	2304      	movs	r3, #4
   347f0:	e7dc      	b.n	347ac <bsd_os_application_irq_handler+0x7c>
   347f2:	2305      	movs	r3, #5
   347f4:	e7da      	b.n	347ac <bsd_os_application_irq_handler+0x7c>
   347f6:	2306      	movs	r3, #6
   347f8:	e7d8      	b.n	347ac <bsd_os_application_irq_handler+0x7c>
   347fa:	2307      	movs	r3, #7
   347fc:	e7d6      	b.n	347ac <bsd_os_application_irq_handler+0x7c>
   347fe:	2308      	movs	r3, #8
   34800:	e7d4      	b.n	347ac <bsd_os_application_irq_handler+0x7c>
   34802:	bf00      	nop
   34804:	20025110 	.word	0x20025110
   34808:	20024fd4 	.word	0x20024fd4
   3480c:	20025074 	.word	0x20025074

00034810 <rpc_framework_init>:
   34810:	b508      	push	{r3, lr}
   34812:	22a0      	movs	r2, #160	; 0xa0
   34814:	2100      	movs	r1, #0
   34816:	4802      	ldr	r0, [pc, #8]	; (34820 <rpc_framework_init+0x10>)
   34818:	f00a fa77 	bl	3ed0a <memset>
   3481c:	2000      	movs	r0, #0
   3481e:	bd08      	pop	{r3, pc}
   34820:	20024fd4 	.word	0x20024fd4

00034824 <rpc_client_register>:
   34824:	8803      	ldrh	r3, [r0, #0]
   34826:	2b00      	cmp	r3, #0
   34828:	d045      	beq.n	348b6 <rpc_client_register+0x92>
   3482a:	6842      	ldr	r2, [r0, #4]
   3482c:	4601      	mov	r1, r0
   3482e:	2a00      	cmp	r2, #0
   34830:	d050      	beq.n	348d4 <rpc_client_register+0xb0>
   34832:	4a30      	ldr	r2, [pc, #192]	; (348f4 <rpc_client_register+0xd0>)
   34834:	8810      	ldrh	r0, [r2, #0]
   34836:	4283      	cmp	r3, r0
   34838:	d03d      	beq.n	348b6 <rpc_client_register+0x92>
   3483a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3483e:	8a14      	ldrh	r4, [r2, #16]
   34840:	42a3      	cmp	r3, r4
   34842:	d035      	beq.n	348b0 <rpc_client_register+0x8c>
   34844:	8c15      	ldrh	r5, [r2, #32]
   34846:	42ab      	cmp	r3, r5
   34848:	d032      	beq.n	348b0 <rpc_client_register+0x8c>
   3484a:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   3484c:	42b3      	cmp	r3, r6
   3484e:	d02f      	beq.n	348b0 <rpc_client_register+0x8c>
   34850:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   34854:	42bb      	cmp	r3, r7
   34856:	d02b      	beq.n	348b0 <rpc_client_register+0x8c>
   34858:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   3485c:	4563      	cmp	r3, ip
   3485e:	d027      	beq.n	348b0 <rpc_client_register+0x8c>
   34860:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   34864:	4573      	cmp	r3, lr
   34866:	d023      	beq.n	348b0 <rpc_client_register+0x8c>
   34868:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   3486c:	4543      	cmp	r3, r8
   3486e:	d01f      	beq.n	348b0 <rpc_client_register+0x8c>
   34870:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   34874:	454b      	cmp	r3, r9
   34876:	d01b      	beq.n	348b0 <rpc_client_register+0x8c>
   34878:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   3487c:	4553      	cmp	r3, sl
   3487e:	d017      	beq.n	348b0 <rpc_client_register+0x8c>
   34880:	b1e0      	cbz	r0, 348bc <rpc_client_register+0x98>
   34882:	b35c      	cbz	r4, 348dc <rpc_client_register+0xb8>
   34884:	b365      	cbz	r5, 348e0 <rpc_client_register+0xbc>
   34886:	b36e      	cbz	r6, 348e4 <rpc_client_register+0xc0>
   34888:	b377      	cbz	r7, 348e8 <rpc_client_register+0xc4>
   3488a:	f1bc 0f00 	cmp.w	ip, #0
   3488e:	d02d      	beq.n	348ec <rpc_client_register+0xc8>
   34890:	f1be 0f00 	cmp.w	lr, #0
   34894:	d020      	beq.n	348d8 <rpc_client_register+0xb4>
   34896:	f1b8 0f00 	cmp.w	r8, #0
   3489a:	d029      	beq.n	348f0 <rpc_client_register+0xcc>
   3489c:	f1b9 0f00 	cmp.w	r9, #0
   348a0:	d00b      	beq.n	348ba <rpc_client_register+0x96>
   348a2:	2009      	movs	r0, #9
   348a4:	f1ba 0f00 	cmp.w	sl, #0
   348a8:	d008      	beq.n	348bc <rpc_client_register+0x98>
   348aa:	2004      	movs	r0, #4
   348ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   348b0:	2007      	movs	r0, #7
   348b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   348b6:	2007      	movs	r0, #7
   348b8:	4770      	bx	lr
   348ba:	2008      	movs	r0, #8
   348bc:	0100      	lsls	r0, r0, #4
   348be:	5213      	strh	r3, [r2, r0]
   348c0:	684b      	ldr	r3, [r1, #4]
   348c2:	4402      	add	r2, r0
   348c4:	6053      	str	r3, [r2, #4]
   348c6:	688b      	ldr	r3, [r1, #8]
   348c8:	2000      	movs	r0, #0
   348ca:	6093      	str	r3, [r2, #8]
   348cc:	68cb      	ldr	r3, [r1, #12]
   348ce:	60d3      	str	r3, [r2, #12]
   348d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   348d4:	200e      	movs	r0, #14
   348d6:	4770      	bx	lr
   348d8:	2006      	movs	r0, #6
   348da:	e7ef      	b.n	348bc <rpc_client_register+0x98>
   348dc:	2001      	movs	r0, #1
   348de:	e7ed      	b.n	348bc <rpc_client_register+0x98>
   348e0:	2002      	movs	r0, #2
   348e2:	e7eb      	b.n	348bc <rpc_client_register+0x98>
   348e4:	2003      	movs	r0, #3
   348e6:	e7e9      	b.n	348bc <rpc_client_register+0x98>
   348e8:	2004      	movs	r0, #4
   348ea:	e7e7      	b.n	348bc <rpc_client_register+0x98>
   348ec:	2005      	movs	r0, #5
   348ee:	e7e5      	b.n	348bc <rpc_client_register+0x98>
   348f0:	2007      	movs	r0, #7
   348f2:	e7e3      	b.n	348bc <rpc_client_register+0x98>
   348f4:	20024fd4 	.word	0x20024fd4

000348f8 <rpc_transport_input>:
   348f8:	b538      	push	{r3, r4, r5, lr}
   348fa:	4a82      	ldr	r2, [pc, #520]	; (34b04 <rpc_transport_input+0x20c>)
   348fc:	680b      	ldr	r3, [r1, #0]
   348fe:	8810      	ldrh	r0, [r2, #0]
   34900:	b29b      	uxth	r3, r3
   34902:	4298      	cmp	r0, r3
   34904:	d027      	beq.n	34956 <rpc_transport_input+0x5e>
   34906:	8a10      	ldrh	r0, [r2, #16]
   34908:	4298      	cmp	r0, r3
   3490a:	d024      	beq.n	34956 <rpc_transport_input+0x5e>
   3490c:	8c10      	ldrh	r0, [r2, #32]
   3490e:	4298      	cmp	r0, r3
   34910:	d021      	beq.n	34956 <rpc_transport_input+0x5e>
   34912:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   34914:	4298      	cmp	r0, r3
   34916:	d01e      	beq.n	34956 <rpc_transport_input+0x5e>
   34918:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   3491c:	4298      	cmp	r0, r3
   3491e:	d01a      	beq.n	34956 <rpc_transport_input+0x5e>
   34920:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   34924:	4298      	cmp	r0, r3
   34926:	d016      	beq.n	34956 <rpc_transport_input+0x5e>
   34928:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   3492c:	4298      	cmp	r0, r3
   3492e:	d012      	beq.n	34956 <rpc_transport_input+0x5e>
   34930:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   34934:	4298      	cmp	r0, r3
   34936:	d00e      	beq.n	34956 <rpc_transport_input+0x5e>
   34938:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   3493c:	4298      	cmp	r0, r3
   3493e:	d00a      	beq.n	34956 <rpc_transport_input+0x5e>
   34940:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   34944:	429a      	cmp	r2, r3
   34946:	d006      	beq.n	34956 <rpc_transport_input+0x5e>
   34948:	6888      	ldr	r0, [r1, #8]
   3494a:	b118      	cbz	r0, 34954 <rpc_transport_input+0x5c>
   3494c:	4b6e      	ldr	r3, [pc, #440]	; (34b08 <rpc_transport_input+0x210>)
   3494e:	691b      	ldr	r3, [r3, #16]
   34950:	4798      	blx	r3
   34952:	2000      	movs	r0, #0
   34954:	bd38      	pop	{r3, r4, r5, pc}
   34956:	6888      	ldr	r0, [r1, #8]
   34958:	2800      	cmp	r0, #0
   3495a:	f000 8098 	beq.w	34a8e <rpc_transport_input+0x196>
   3495e:	4a6b      	ldr	r2, [pc, #428]	; (34b0c <rpc_transport_input+0x214>)
   34960:	6814      	ldr	r4, [r2, #0]
   34962:	2c00      	cmp	r4, #0
   34964:	d03c      	beq.n	349e0 <rpc_transport_input+0xe8>
   34966:	6894      	ldr	r4, [r2, #8]
   34968:	2c00      	cmp	r4, #0
   3496a:	f000 809a 	beq.w	34aa2 <rpc_transport_input+0x1aa>
   3496e:	6914      	ldr	r4, [r2, #16]
   34970:	2c00      	cmp	r4, #0
   34972:	f000 809a 	beq.w	34aaa <rpc_transport_input+0x1b2>
   34976:	6994      	ldr	r4, [r2, #24]
   34978:	2c00      	cmp	r4, #0
   3497a:	f000 809a 	beq.w	34ab2 <rpc_transport_input+0x1ba>
   3497e:	6a14      	ldr	r4, [r2, #32]
   34980:	2c00      	cmp	r4, #0
   34982:	f000 809a 	beq.w	34aba <rpc_transport_input+0x1c2>
   34986:	6a94      	ldr	r4, [r2, #40]	; 0x28
   34988:	2c00      	cmp	r4, #0
   3498a:	f000 8084 	beq.w	34a96 <rpc_transport_input+0x19e>
   3498e:	6b14      	ldr	r4, [r2, #48]	; 0x30
   34990:	2c00      	cmp	r4, #0
   34992:	f000 8098 	beq.w	34ac6 <rpc_transport_input+0x1ce>
   34996:	6b94      	ldr	r4, [r2, #56]	; 0x38
   34998:	2c00      	cmp	r4, #0
   3499a:	f000 8096 	beq.w	34aca <rpc_transport_input+0x1d2>
   3499e:	6c14      	ldr	r4, [r2, #64]	; 0x40
   349a0:	2c00      	cmp	r4, #0
   349a2:	f000 8096 	beq.w	34ad2 <rpc_transport_input+0x1da>
   349a6:	6c94      	ldr	r4, [r2, #72]	; 0x48
   349a8:	2c00      	cmp	r4, #0
   349aa:	f000 8096 	beq.w	34ada <rpc_transport_input+0x1e2>
   349ae:	6d14      	ldr	r4, [r2, #80]	; 0x50
   349b0:	2c00      	cmp	r4, #0
   349b2:	f000 8096 	beq.w	34ae2 <rpc_transport_input+0x1ea>
   349b6:	6d94      	ldr	r4, [r2, #88]	; 0x58
   349b8:	2c00      	cmp	r4, #0
   349ba:	f000 8098 	beq.w	34aee <rpc_transport_input+0x1f6>
   349be:	6e14      	ldr	r4, [r2, #96]	; 0x60
   349c0:	2c00      	cmp	r4, #0
   349c2:	f000 8098 	beq.w	34af6 <rpc_transport_input+0x1fe>
   349c6:	6e94      	ldr	r4, [r2, #104]	; 0x68
   349c8:	2c00      	cmp	r4, #0
   349ca:	f000 8096 	beq.w	34afa <rpc_transport_input+0x202>
   349ce:	6f14      	ldr	r4, [r2, #112]	; 0x70
   349d0:	2c00      	cmp	r4, #0
   349d2:	f000 8094 	beq.w	34afe <rpc_transport_input+0x206>
   349d6:	6f94      	ldr	r4, [r2, #120]	; 0x78
   349d8:	b10c      	cbz	r4, 349de <rpc_transport_input+0xe6>
   349da:	2001      	movs	r0, #1
   349dc:	bd38      	pop	{r3, r4, r5, pc}
   349de:	240f      	movs	r4, #15
   349e0:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   349e4:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   349e8:	80ab      	strh	r3, [r5, #4]
   349ea:	4b49      	ldr	r3, [pc, #292]	; (34b10 <rpc_transport_input+0x218>)
   349ec:	781a      	ldrb	r2, [r3, #0]
   349ee:	2a01      	cmp	r2, #1
   349f0:	d053      	beq.n	34a9a <rpc_transport_input+0x1a2>
   349f2:	7a1a      	ldrb	r2, [r3, #8]
   349f4:	2a01      	cmp	r2, #1
   349f6:	d041      	beq.n	34a7c <rpc_transport_input+0x184>
   349f8:	7c1a      	ldrb	r2, [r3, #16]
   349fa:	2a01      	cmp	r2, #1
   349fc:	d04f      	beq.n	34a9e <rpc_transport_input+0x1a6>
   349fe:	7e1a      	ldrb	r2, [r3, #24]
   34a00:	2a01      	cmp	r2, #1
   34a02:	d050      	beq.n	34aa6 <rpc_transport_input+0x1ae>
   34a04:	f893 2020 	ldrb.w	r2, [r3, #32]
   34a08:	2a01      	cmp	r2, #1
   34a0a:	d050      	beq.n	34aae <rpc_transport_input+0x1b6>
   34a0c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   34a10:	2a01      	cmp	r2, #1
   34a12:	d050      	beq.n	34ab6 <rpc_transport_input+0x1be>
   34a14:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   34a18:	2a01      	cmp	r2, #1
   34a1a:	d03a      	beq.n	34a92 <rpc_transport_input+0x19a>
   34a1c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   34a20:	2a01      	cmp	r2, #1
   34a22:	d04c      	beq.n	34abe <rpc_transport_input+0x1c6>
   34a24:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   34a28:	2a01      	cmp	r2, #1
   34a2a:	d04a      	beq.n	34ac2 <rpc_transport_input+0x1ca>
   34a2c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   34a30:	2a01      	cmp	r2, #1
   34a32:	d04c      	beq.n	34ace <rpc_transport_input+0x1d6>
   34a34:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   34a38:	2a01      	cmp	r2, #1
   34a3a:	d04c      	beq.n	34ad6 <rpc_transport_input+0x1de>
   34a3c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   34a40:	2a01      	cmp	r2, #1
   34a42:	d04c      	beq.n	34ade <rpc_transport_input+0x1e6>
   34a44:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   34a48:	2a01      	cmp	r2, #1
   34a4a:	d04c      	beq.n	34ae6 <rpc_transport_input+0x1ee>
   34a4c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   34a50:	2a01      	cmp	r2, #1
   34a52:	d04a      	beq.n	34aea <rpc_transport_input+0x1f2>
   34a54:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   34a58:	2a01      	cmp	r2, #1
   34a5a:	d04a      	beq.n	34af2 <rpc_transport_input+0x1fa>
   34a5c:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   34a60:	2a01      	cmp	r2, #1
   34a62:	d00a      	beq.n	34a7a <rpc_transport_input+0x182>
   34a64:	2c10      	cmp	r4, #16
   34a66:	d0b8      	beq.n	349da <rpc_transport_input+0xe2>
   34a68:	2200      	movs	r2, #0
   34a6a:	4b28      	ldr	r3, [pc, #160]	; (34b0c <rpc_transport_input+0x214>)
   34a6c:	2001      	movs	r0, #1
   34a6e:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   34a72:	808a      	strh	r2, [r1, #4]
   34a74:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   34a78:	bd38      	pop	{r3, r4, r5, pc}
   34a7a:	220f      	movs	r2, #15
   34a7c:	2402      	movs	r4, #2
   34a7e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   34a82:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   34a86:	6041      	str	r1, [r0, #4]
   34a88:	f7f2 f964 	bl	26d54 <bsd_os_application_irq_set>
   34a8c:	e7a5      	b.n	349da <rpc_transport_input+0xe2>
   34a8e:	2410      	movs	r4, #16
   34a90:	e7ab      	b.n	349ea <rpc_transport_input+0xf2>
   34a92:	2206      	movs	r2, #6
   34a94:	e7f2      	b.n	34a7c <rpc_transport_input+0x184>
   34a96:	2405      	movs	r4, #5
   34a98:	e7a2      	b.n	349e0 <rpc_transport_input+0xe8>
   34a9a:	2200      	movs	r2, #0
   34a9c:	e7ee      	b.n	34a7c <rpc_transport_input+0x184>
   34a9e:	2202      	movs	r2, #2
   34aa0:	e7ec      	b.n	34a7c <rpc_transport_input+0x184>
   34aa2:	2401      	movs	r4, #1
   34aa4:	e79c      	b.n	349e0 <rpc_transport_input+0xe8>
   34aa6:	2203      	movs	r2, #3
   34aa8:	e7e8      	b.n	34a7c <rpc_transport_input+0x184>
   34aaa:	2402      	movs	r4, #2
   34aac:	e798      	b.n	349e0 <rpc_transport_input+0xe8>
   34aae:	2204      	movs	r2, #4
   34ab0:	e7e4      	b.n	34a7c <rpc_transport_input+0x184>
   34ab2:	2403      	movs	r4, #3
   34ab4:	e794      	b.n	349e0 <rpc_transport_input+0xe8>
   34ab6:	2205      	movs	r2, #5
   34ab8:	e7e0      	b.n	34a7c <rpc_transport_input+0x184>
   34aba:	2404      	movs	r4, #4
   34abc:	e790      	b.n	349e0 <rpc_transport_input+0xe8>
   34abe:	2207      	movs	r2, #7
   34ac0:	e7dc      	b.n	34a7c <rpc_transport_input+0x184>
   34ac2:	2208      	movs	r2, #8
   34ac4:	e7da      	b.n	34a7c <rpc_transport_input+0x184>
   34ac6:	2406      	movs	r4, #6
   34ac8:	e78a      	b.n	349e0 <rpc_transport_input+0xe8>
   34aca:	2407      	movs	r4, #7
   34acc:	e788      	b.n	349e0 <rpc_transport_input+0xe8>
   34ace:	2209      	movs	r2, #9
   34ad0:	e7d4      	b.n	34a7c <rpc_transport_input+0x184>
   34ad2:	2408      	movs	r4, #8
   34ad4:	e784      	b.n	349e0 <rpc_transport_input+0xe8>
   34ad6:	220a      	movs	r2, #10
   34ad8:	e7d0      	b.n	34a7c <rpc_transport_input+0x184>
   34ada:	2409      	movs	r4, #9
   34adc:	e780      	b.n	349e0 <rpc_transport_input+0xe8>
   34ade:	220b      	movs	r2, #11
   34ae0:	e7cc      	b.n	34a7c <rpc_transport_input+0x184>
   34ae2:	240a      	movs	r4, #10
   34ae4:	e77c      	b.n	349e0 <rpc_transport_input+0xe8>
   34ae6:	220c      	movs	r2, #12
   34ae8:	e7c8      	b.n	34a7c <rpc_transport_input+0x184>
   34aea:	220d      	movs	r2, #13
   34aec:	e7c6      	b.n	34a7c <rpc_transport_input+0x184>
   34aee:	240b      	movs	r4, #11
   34af0:	e776      	b.n	349e0 <rpc_transport_input+0xe8>
   34af2:	220e      	movs	r2, #14
   34af4:	e7c2      	b.n	34a7c <rpc_transport_input+0x184>
   34af6:	240c      	movs	r4, #12
   34af8:	e772      	b.n	349e0 <rpc_transport_input+0xe8>
   34afa:	240d      	movs	r4, #13
   34afc:	e770      	b.n	349e0 <rpc_transport_input+0xe8>
   34afe:	240e      	movs	r4, #14
   34b00:	e76e      	b.n	349e0 <rpc_transport_input+0xe8>
   34b02:	bf00      	nop
   34b04:	20024fd4 	.word	0x20024fd4
   34b08:	20025074 	.word	0x20025074
   34b0c:	2002508c 	.word	0x2002508c
   34b10:	2002510c 	.word	0x2002510c

00034b14 <rpc_transport_register>:
   34b14:	b4f0      	push	{r4, r5, r6, r7}
   34b16:	2900      	cmp	r1, #0
   34b18:	d052      	beq.n	34bc0 <rpc_transport_register+0xac>
   34b1a:	2800      	cmp	r0, #0
   34b1c:	d050      	beq.n	34bc0 <rpc_transport_register+0xac>
   34b1e:	6883      	ldr	r3, [r0, #8]
   34b20:	2b00      	cmp	r3, #0
   34b22:	d04d      	beq.n	34bc0 <rpc_transport_register+0xac>
   34b24:	6903      	ldr	r3, [r0, #16]
   34b26:	2b00      	cmp	r3, #0
   34b28:	d04a      	beq.n	34bc0 <rpc_transport_register+0xac>
   34b2a:	6843      	ldr	r3, [r0, #4]
   34b2c:	2b00      	cmp	r3, #0
   34b2e:	d047      	beq.n	34bc0 <rpc_transport_register+0xac>
   34b30:	68c3      	ldr	r3, [r0, #12]
   34b32:	2b00      	cmp	r3, #0
   34b34:	d044      	beq.n	34bc0 <rpc_transport_register+0xac>
   34b36:	6803      	ldr	r3, [r0, #0]
   34b38:	2b00      	cmp	r3, #0
   34b3a:	d041      	beq.n	34bc0 <rpc_transport_register+0xac>
   34b3c:	6943      	ldr	r3, [r0, #20]
   34b3e:	2b00      	cmp	r3, #0
   34b40:	d03e      	beq.n	34bc0 <rpc_transport_register+0xac>
   34b42:	2601      	movs	r6, #1
   34b44:	2500      	movs	r5, #0
   34b46:	4604      	mov	r4, r0
   34b48:	460f      	mov	r7, r1
   34b4a:	4a1f      	ldr	r2, [pc, #124]	; (34bc8 <rpc_transport_register+0xb4>)
   34b4c:	4b1f      	ldr	r3, [pc, #124]	; (34bcc <rpc_transport_register+0xb8>)
   34b4e:	f8df c080 	ldr.w	ip, [pc, #128]	; 34bd0 <rpc_transport_register+0xbc>
   34b52:	7416      	strb	r6, [r2, #16]
   34b54:	7616      	strb	r6, [r2, #24]
   34b56:	f882 6020 	strb.w	r6, [r2, #32]
   34b5a:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   34b5e:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   34b62:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   34b66:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   34b6a:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   34b6e:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   34b72:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   34b76:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   34b7a:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   34b7e:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   34b82:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   34b86:	611d      	str	r5, [r3, #16]
   34b88:	619d      	str	r5, [r3, #24]
   34b8a:	621d      	str	r5, [r3, #32]
   34b8c:	629d      	str	r5, [r3, #40]	; 0x28
   34b8e:	631d      	str	r5, [r3, #48]	; 0x30
   34b90:	639d      	str	r5, [r3, #56]	; 0x38
   34b92:	641d      	str	r5, [r3, #64]	; 0x40
   34b94:	649d      	str	r5, [r3, #72]	; 0x48
   34b96:	651d      	str	r5, [r3, #80]	; 0x50
   34b98:	659d      	str	r5, [r3, #88]	; 0x58
   34b9a:	661d      	str	r5, [r3, #96]	; 0x60
   34b9c:	669d      	str	r5, [r3, #104]	; 0x68
   34b9e:	671d      	str	r5, [r3, #112]	; 0x70
   34ba0:	679d      	str	r5, [r3, #120]	; 0x78
   34ba2:	7016      	strb	r6, [r2, #0]
   34ba4:	7216      	strb	r6, [r2, #8]
   34ba6:	601d      	str	r5, [r3, #0]
   34ba8:	609d      	str	r5, [r3, #8]
   34baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   34bac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   34bb0:	e894 0003 	ldmia.w	r4, {r0, r1}
   34bb4:	e88c 0003 	stmia.w	ip, {r0, r1}
   34bb8:	603e      	str	r6, [r7, #0]
   34bba:	4628      	mov	r0, r5
   34bbc:	bcf0      	pop	{r4, r5, r6, r7}
   34bbe:	4770      	bx	lr
   34bc0:	250e      	movs	r5, #14
   34bc2:	4628      	mov	r0, r5
   34bc4:	bcf0      	pop	{r4, r5, r6, r7}
   34bc6:	4770      	bx	lr
   34bc8:	2002510c 	.word	0x2002510c
   34bcc:	2002508c 	.word	0x2002508c
   34bd0:	20025074 	.word	0x20025074

00034bd4 <rpc_transport_unregister>:
   34bd4:	2800      	cmp	r0, #0
   34bd6:	d03a      	beq.n	34c4e <rpc_transport_unregister+0x7a>
   34bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34bdc:	4680      	mov	r8, r0
   34bde:	4c1d      	ldr	r4, [pc, #116]	; (34c54 <rpc_transport_unregister+0x80>)
   34be0:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   34be4:	68a3      	ldr	r3, [r4, #8]
   34be6:	3410      	adds	r4, #16
   34be8:	b103      	cbz	r3, 34bec <rpc_transport_unregister+0x18>
   34bea:	4798      	blx	r3
   34bec:	42ac      	cmp	r4, r5
   34bee:	d1f9      	bne.n	34be4 <rpc_transport_unregister+0x10>
   34bf0:	f04f 0901 	mov.w	r9, #1
   34bf4:	2600      	movs	r6, #0
   34bf6:	4c18      	ldr	r4, [pc, #96]	; (34c58 <rpc_transport_unregister+0x84>)
   34bf8:	4d18      	ldr	r5, [pc, #96]	; (34c5c <rpc_transport_unregister+0x88>)
   34bfa:	f8df a064 	ldr.w	sl, [pc, #100]	; 34c60 <rpc_transport_unregister+0x8c>
   34bfe:	f104 0780 	add.w	r7, r4, #128	; 0x80
   34c02:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   34c06:	2b01      	cmp	r3, #1
   34c08:	d005      	beq.n	34c16 <rpc_transport_unregister+0x42>
   34c0a:	f8da 300c 	ldr.w	r3, [sl, #12]
   34c0e:	6820      	ldr	r0, [r4, #0]
   34c10:	4798      	blx	r3
   34c12:	f804 9c04 	strb.w	r9, [r4, #-4]
   34c16:	f855 0c04 	ldr.w	r0, [r5, #-4]
   34c1a:	3408      	adds	r4, #8
   34c1c:	b128      	cbz	r0, 34c2a <rpc_transport_unregister+0x56>
   34c1e:	f8da 3010 	ldr.w	r3, [sl, #16]
   34c22:	4798      	blx	r3
   34c24:	802e      	strh	r6, [r5, #0]
   34c26:	f845 6c04 	str.w	r6, [r5, #-4]
   34c2a:	42bc      	cmp	r4, r7
   34c2c:	f105 0508 	add.w	r5, r5, #8
   34c30:	d1e7      	bne.n	34c02 <rpc_transport_unregister+0x2e>
   34c32:	f8d8 0000 	ldr.w	r0, [r8]
   34c36:	2218      	movs	r2, #24
   34c38:	3801      	subs	r0, #1
   34c3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   34c3e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   34c42:	2100      	movs	r1, #0
   34c44:	f00a f861 	bl	3ed0a <memset>
   34c48:	2000      	movs	r0, #0
   34c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34c4e:	200e      	movs	r0, #14
   34c50:	4770      	bx	lr
   34c52:	bf00      	nop
   34c54:	20024fd4 	.word	0x20024fd4
   34c58:	20025110 	.word	0x20025110
   34c5c:	20025090 	.word	0x20025090
   34c60:	20025074 	.word	0x20025074

00034c64 <rpc_message_send>:
   34c64:	b168      	cbz	r0, 34c82 <rpc_message_send+0x1e>
   34c66:	b171      	cbz	r1, 34c86 <rpc_message_send+0x22>
   34c68:	4a09      	ldr	r2, [pc, #36]	; (34c90 <rpc_message_send+0x2c>)
   34c6a:	6853      	ldr	r3, [r2, #4]
   34c6c:	b16b      	cbz	r3, 34c8a <rpc_message_send+0x26>
   34c6e:	684b      	ldr	r3, [r1, #4]
   34c70:	8008      	strh	r0, [r1, #0]
   34c72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   34c76:	f043 0302 	orr.w	r3, r3, #2
   34c7a:	6812      	ldr	r2, [r2, #0]
   34c7c:	604b      	str	r3, [r1, #4]
   34c7e:	4608      	mov	r0, r1
   34c80:	4710      	bx	r2
   34c82:	2007      	movs	r0, #7
   34c84:	4770      	bx	lr
   34c86:	200e      	movs	r0, #14
   34c88:	4770      	bx	lr
   34c8a:	2008      	movs	r0, #8
   34c8c:	4770      	bx	lr
   34c8e:	bf00      	nop
   34c90:	20025074 	.word	0x20025074

00034c94 <rpc_message_alloc>:
   34c94:	b35a      	cbz	r2, 34cee <rpc_message_alloc+0x5a>
   34c96:	b330      	cbz	r0, 34ce6 <rpc_message_alloc+0x52>
   34c98:	2300      	movs	r3, #0
   34c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34c9e:	4f15      	ldr	r7, [pc, #84]	; (34cf4 <rpc_message_alloc+0x60>)
   34ca0:	6013      	str	r3, [r2, #0]
   34ca2:	687b      	ldr	r3, [r7, #4]
   34ca4:	b30b      	cbz	r3, 34cea <rpc_message_alloc+0x56>
   34ca6:	4615      	mov	r5, r2
   34ca8:	460c      	mov	r4, r1
   34caa:	4606      	mov	r6, r0
   34cac:	b959      	cbnz	r1, 34cc6 <rpc_message_alloc+0x32>
   34cae:	4798      	blx	r3
   34cb0:	4603      	mov	r3, r0
   34cb2:	b1a8      	cbz	r0, 34ce0 <rpc_message_alloc+0x4c>
   34cb4:	46a0      	mov	r8, r4
   34cb6:	60dc      	str	r4, [r3, #12]
   34cb8:	f8c3 8008 	str.w	r8, [r3, #8]
   34cbc:	801e      	strh	r6, [r3, #0]
   34cbe:	602b      	str	r3, [r5, #0]
   34cc0:	2000      	movs	r0, #0
   34cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34cc6:	68bb      	ldr	r3, [r7, #8]
   34cc8:	4608      	mov	r0, r1
   34cca:	4798      	blx	r3
   34ccc:	4680      	mov	r8, r0
   34cce:	b138      	cbz	r0, 34ce0 <rpc_message_alloc+0x4c>
   34cd0:	687b      	ldr	r3, [r7, #4]
   34cd2:	4798      	blx	r3
   34cd4:	4603      	mov	r3, r0
   34cd6:	2800      	cmp	r0, #0
   34cd8:	d1ed      	bne.n	34cb6 <rpc_message_alloc+0x22>
   34cda:	693b      	ldr	r3, [r7, #16]
   34cdc:	4640      	mov	r0, r8
   34cde:	4798      	blx	r3
   34ce0:	2004      	movs	r0, #4
   34ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34ce6:	2007      	movs	r0, #7
   34ce8:	4770      	bx	lr
   34cea:	2008      	movs	r0, #8
   34cec:	e7f9      	b.n	34ce2 <rpc_message_alloc+0x4e>
   34cee:	200e      	movs	r0, #14
   34cf0:	4770      	bx	lr
   34cf2:	bf00      	nop
   34cf4:	20025074 	.word	0x20025074

00034cf8 <rpc_message_free>:
   34cf8:	2800      	cmp	r0, #0
   34cfa:	f000 808c 	beq.w	34e16 <rpc_message_free+0x11e>
   34cfe:	2900      	cmp	r1, #0
   34d00:	f000 80e9 	beq.w	34ed6 <rpc_message_free+0x1de>
   34d04:	b538      	push	{r3, r4, r5, lr}
   34d06:	4a83      	ldr	r2, [pc, #524]	; (34f14 <rpc_message_free+0x21c>)
   34d08:	6853      	ldr	r3, [r2, #4]
   34d0a:	2b00      	cmp	r3, #0
   34d0c:	f000 8085 	beq.w	34e1a <rpc_message_free+0x122>
   34d10:	4c81      	ldr	r4, [pc, #516]	; (34f18 <rpc_message_free+0x220>)
   34d12:	4608      	mov	r0, r1
   34d14:	6863      	ldr	r3, [r4, #4]
   34d16:	4299      	cmp	r1, r3
   34d18:	f000 8085 	beq.w	34e26 <rpc_message_free+0x12e>
   34d1c:	68e3      	ldr	r3, [r4, #12]
   34d1e:	4298      	cmp	r0, r3
   34d20:	f000 808e 	beq.w	34e40 <rpc_message_free+0x148>
   34d24:	6963      	ldr	r3, [r4, #20]
   34d26:	4298      	cmp	r0, r3
   34d28:	f000 8090 	beq.w	34e4c <rpc_message_free+0x154>
   34d2c:	69e3      	ldr	r3, [r4, #28]
   34d2e:	4298      	cmp	r0, r3
   34d30:	f000 8092 	beq.w	34e58 <rpc_message_free+0x160>
   34d34:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34d36:	4298      	cmp	r0, r3
   34d38:	f000 8095 	beq.w	34e66 <rpc_message_free+0x16e>
   34d3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   34d3e:	4298      	cmp	r0, r3
   34d40:	f000 8098 	beq.w	34e74 <rpc_message_free+0x17c>
   34d44:	6b63      	ldr	r3, [r4, #52]	; 0x34
   34d46:	4298      	cmp	r0, r3
   34d48:	f000 809b 	beq.w	34e82 <rpc_message_free+0x18a>
   34d4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   34d4e:	4298      	cmp	r0, r3
   34d50:	f000 809e 	beq.w	34e90 <rpc_message_free+0x198>
   34d54:	6c63      	ldr	r3, [r4, #68]	; 0x44
   34d56:	4298      	cmp	r0, r3
   34d58:	f000 80a1 	beq.w	34e9e <rpc_message_free+0x1a6>
   34d5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   34d5e:	4298      	cmp	r0, r3
   34d60:	f000 80a4 	beq.w	34eac <rpc_message_free+0x1b4>
   34d64:	6d63      	ldr	r3, [r4, #84]	; 0x54
   34d66:	4298      	cmp	r0, r3
   34d68:	f000 80a7 	beq.w	34eba <rpc_message_free+0x1c2>
   34d6c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   34d6e:	4298      	cmp	r0, r3
   34d70:	f000 80aa 	beq.w	34ec8 <rpc_message_free+0x1d0>
   34d74:	6e63      	ldr	r3, [r4, #100]	; 0x64
   34d76:	4298      	cmp	r0, r3
   34d78:	f000 80af 	beq.w	34eda <rpc_message_free+0x1e2>
   34d7c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   34d7e:	4298      	cmp	r0, r3
   34d80:	f000 80b2 	beq.w	34ee8 <rpc_message_free+0x1f0>
   34d84:	6f63      	ldr	r3, [r4, #116]	; 0x74
   34d86:	4298      	cmp	r0, r3
   34d88:	f000 80b5 	beq.w	34ef6 <rpc_message_free+0x1fe>
   34d8c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   34d8e:	4283      	cmp	r3, r0
   34d90:	f000 80b8 	beq.w	34f04 <rpc_message_free+0x20c>
   34d94:	68d3      	ldr	r3, [r2, #12]
   34d96:	4798      	blx	r3
   34d98:	7823      	ldrb	r3, [r4, #0]
   34d9a:	2b04      	cmp	r3, #4
   34d9c:	d03f      	beq.n	34e1e <rpc_message_free+0x126>
   34d9e:	7a23      	ldrb	r3, [r4, #8]
   34da0:	2b04      	cmp	r3, #4
   34da2:	d03c      	beq.n	34e1e <rpc_message_free+0x126>
   34da4:	7c23      	ldrb	r3, [r4, #16]
   34da6:	2b04      	cmp	r3, #4
   34da8:	d039      	beq.n	34e1e <rpc_message_free+0x126>
   34daa:	7e23      	ldrb	r3, [r4, #24]
   34dac:	2b04      	cmp	r3, #4
   34dae:	d036      	beq.n	34e1e <rpc_message_free+0x126>
   34db0:	f894 3020 	ldrb.w	r3, [r4, #32]
   34db4:	2b04      	cmp	r3, #4
   34db6:	d032      	beq.n	34e1e <rpc_message_free+0x126>
   34db8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   34dbc:	2b04      	cmp	r3, #4
   34dbe:	d02e      	beq.n	34e1e <rpc_message_free+0x126>
   34dc0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   34dc4:	2b04      	cmp	r3, #4
   34dc6:	d02a      	beq.n	34e1e <rpc_message_free+0x126>
   34dc8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   34dcc:	2b04      	cmp	r3, #4
   34dce:	d026      	beq.n	34e1e <rpc_message_free+0x126>
   34dd0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   34dd4:	2b04      	cmp	r3, #4
   34dd6:	d022      	beq.n	34e1e <rpc_message_free+0x126>
   34dd8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   34ddc:	2b04      	cmp	r3, #4
   34dde:	d01e      	beq.n	34e1e <rpc_message_free+0x126>
   34de0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   34de4:	2b04      	cmp	r3, #4
   34de6:	d01a      	beq.n	34e1e <rpc_message_free+0x126>
   34de8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   34dec:	2b04      	cmp	r3, #4
   34dee:	d016      	beq.n	34e1e <rpc_message_free+0x126>
   34df0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   34df4:	2b04      	cmp	r3, #4
   34df6:	d012      	beq.n	34e1e <rpc_message_free+0x126>
   34df8:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   34dfc:	2b04      	cmp	r3, #4
   34dfe:	d00e      	beq.n	34e1e <rpc_message_free+0x126>
   34e00:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   34e04:	2b04      	cmp	r3, #4
   34e06:	d00a      	beq.n	34e1e <rpc_message_free+0x126>
   34e08:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   34e0c:	2b04      	cmp	r3, #4
   34e0e:	bf18      	it	ne
   34e10:	2000      	movne	r0, #0
   34e12:	d004      	beq.n	34e1e <rpc_message_free+0x126>
   34e14:	bd38      	pop	{r3, r4, r5, pc}
   34e16:	2007      	movs	r0, #7
   34e18:	4770      	bx	lr
   34e1a:	2008      	movs	r0, #8
   34e1c:	bd38      	pop	{r3, r4, r5, pc}
   34e1e:	f7f1 ff99 	bl	26d54 <bsd_os_application_irq_set>
   34e22:	2000      	movs	r0, #0
   34e24:	bd38      	pop	{r3, r4, r5, pc}
   34e26:	7821      	ldrb	r1, [r4, #0]
   34e28:	2903      	cmp	r1, #3
   34e2a:	f47f af77 	bne.w	34d1c <rpc_message_free+0x24>
   34e2e:	2100      	movs	r1, #0
   34e30:	2501      	movs	r5, #1
   34e32:	4618      	mov	r0, r3
   34e34:	68d2      	ldr	r2, [r2, #12]
   34e36:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   34e3a:	4790      	blx	r2
   34e3c:	2000      	movs	r0, #0
   34e3e:	bd38      	pop	{r3, r4, r5, pc}
   34e40:	7a21      	ldrb	r1, [r4, #8]
   34e42:	2903      	cmp	r1, #3
   34e44:	f47f af6e 	bne.w	34d24 <rpc_message_free+0x2c>
   34e48:	2101      	movs	r1, #1
   34e4a:	e7f1      	b.n	34e30 <rpc_message_free+0x138>
   34e4c:	7c21      	ldrb	r1, [r4, #16]
   34e4e:	2903      	cmp	r1, #3
   34e50:	f47f af6c 	bne.w	34d2c <rpc_message_free+0x34>
   34e54:	2102      	movs	r1, #2
   34e56:	e7eb      	b.n	34e30 <rpc_message_free+0x138>
   34e58:	7e21      	ldrb	r1, [r4, #24]
   34e5a:	2903      	cmp	r1, #3
   34e5c:	d0e8      	beq.n	34e30 <rpc_message_free+0x138>
   34e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34e60:	4298      	cmp	r0, r3
   34e62:	f47f af6b 	bne.w	34d3c <rpc_message_free+0x44>
   34e66:	f894 1020 	ldrb.w	r1, [r4, #32]
   34e6a:	2903      	cmp	r1, #3
   34e6c:	f47f af66 	bne.w	34d3c <rpc_message_free+0x44>
   34e70:	2104      	movs	r1, #4
   34e72:	e7dd      	b.n	34e30 <rpc_message_free+0x138>
   34e74:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   34e78:	2903      	cmp	r1, #3
   34e7a:	f47f af63 	bne.w	34d44 <rpc_message_free+0x4c>
   34e7e:	2105      	movs	r1, #5
   34e80:	e7d6      	b.n	34e30 <rpc_message_free+0x138>
   34e82:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   34e86:	2903      	cmp	r1, #3
   34e88:	f47f af60 	bne.w	34d4c <rpc_message_free+0x54>
   34e8c:	2106      	movs	r1, #6
   34e8e:	e7cf      	b.n	34e30 <rpc_message_free+0x138>
   34e90:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   34e94:	2903      	cmp	r1, #3
   34e96:	f47f af5d 	bne.w	34d54 <rpc_message_free+0x5c>
   34e9a:	2107      	movs	r1, #7
   34e9c:	e7c8      	b.n	34e30 <rpc_message_free+0x138>
   34e9e:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   34ea2:	2903      	cmp	r1, #3
   34ea4:	f47f af5a 	bne.w	34d5c <rpc_message_free+0x64>
   34ea8:	2108      	movs	r1, #8
   34eaa:	e7c1      	b.n	34e30 <rpc_message_free+0x138>
   34eac:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   34eb0:	2903      	cmp	r1, #3
   34eb2:	f47f af57 	bne.w	34d64 <rpc_message_free+0x6c>
   34eb6:	2109      	movs	r1, #9
   34eb8:	e7ba      	b.n	34e30 <rpc_message_free+0x138>
   34eba:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   34ebe:	2903      	cmp	r1, #3
   34ec0:	f47f af54 	bne.w	34d6c <rpc_message_free+0x74>
   34ec4:	210a      	movs	r1, #10
   34ec6:	e7b3      	b.n	34e30 <rpc_message_free+0x138>
   34ec8:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   34ecc:	2903      	cmp	r1, #3
   34ece:	f47f af51 	bne.w	34d74 <rpc_message_free+0x7c>
   34ed2:	210b      	movs	r1, #11
   34ed4:	e7ac      	b.n	34e30 <rpc_message_free+0x138>
   34ed6:	200e      	movs	r0, #14
   34ed8:	4770      	bx	lr
   34eda:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   34ede:	2903      	cmp	r1, #3
   34ee0:	f47f af4c 	bne.w	34d7c <rpc_message_free+0x84>
   34ee4:	210c      	movs	r1, #12
   34ee6:	e7a3      	b.n	34e30 <rpc_message_free+0x138>
   34ee8:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   34eec:	2903      	cmp	r1, #3
   34eee:	f47f af49 	bne.w	34d84 <rpc_message_free+0x8c>
   34ef2:	210d      	movs	r1, #13
   34ef4:	e79c      	b.n	34e30 <rpc_message_free+0x138>
   34ef6:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   34efa:	2903      	cmp	r1, #3
   34efc:	f47f af46 	bne.w	34d8c <rpc_message_free+0x94>
   34f00:	210e      	movs	r1, #14
   34f02:	e795      	b.n	34e30 <rpc_message_free+0x138>
   34f04:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   34f08:	2b03      	cmp	r3, #3
   34f0a:	f47f af43 	bne.w	34d94 <rpc_message_free+0x9c>
   34f0e:	4603      	mov	r3, r0
   34f10:	210f      	movs	r1, #15
   34f12:	e78d      	b.n	34e30 <rpc_message_free+0x138>
   34f14:	20025074 	.word	0x20025074
   34f18:	2002510c 	.word	0x2002510c

00034f1c <rpc_message_data_free>:
   34f1c:	2800      	cmp	r0, #0
   34f1e:	f000 8091 	beq.w	35044 <rpc_message_data_free+0x128>
   34f22:	2900      	cmp	r1, #0
   34f24:	f000 80e4 	beq.w	350f0 <rpc_message_data_free+0x1d4>
   34f28:	b538      	push	{r3, r4, r5, lr}
   34f2a:	4a81      	ldr	r2, [pc, #516]	; (35130 <rpc_message_data_free+0x214>)
   34f2c:	6853      	ldr	r3, [r2, #4]
   34f2e:	2b00      	cmp	r3, #0
   34f30:	f000 808a 	beq.w	35048 <rpc_message_data_free+0x12c>
   34f34:	4b7f      	ldr	r3, [pc, #508]	; (35134 <rpc_message_data_free+0x218>)
   34f36:	681c      	ldr	r4, [r3, #0]
   34f38:	42a1      	cmp	r1, r4
   34f3a:	f000 8087 	beq.w	3504c <rpc_message_data_free+0x130>
   34f3e:	689c      	ldr	r4, [r3, #8]
   34f40:	42a1      	cmp	r1, r4
   34f42:	f000 808f 	beq.w	35064 <rpc_message_data_free+0x148>
   34f46:	691c      	ldr	r4, [r3, #16]
   34f48:	42a1      	cmp	r1, r4
   34f4a:	f000 8091 	beq.w	35070 <rpc_message_data_free+0x154>
   34f4e:	699c      	ldr	r4, [r3, #24]
   34f50:	42a1      	cmp	r1, r4
   34f52:	f000 8093 	beq.w	3507c <rpc_message_data_free+0x160>
   34f56:	6a1c      	ldr	r4, [r3, #32]
   34f58:	42a1      	cmp	r1, r4
   34f5a:	f000 8095 	beq.w	35088 <rpc_message_data_free+0x16c>
   34f5e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   34f60:	42a1      	cmp	r1, r4
   34f62:	f000 8097 	beq.w	35094 <rpc_message_data_free+0x178>
   34f66:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   34f68:	42a1      	cmp	r1, r4
   34f6a:	f000 8099 	beq.w	350a0 <rpc_message_data_free+0x184>
   34f6e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   34f70:	42a1      	cmp	r1, r4
   34f72:	f000 809b 	beq.w	350ac <rpc_message_data_free+0x190>
   34f76:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   34f78:	42a1      	cmp	r1, r4
   34f7a:	f000 809d 	beq.w	350b8 <rpc_message_data_free+0x19c>
   34f7e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   34f80:	42a1      	cmp	r1, r4
   34f82:	f000 80a0 	beq.w	350c6 <rpc_message_data_free+0x1aa>
   34f86:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   34f88:	42a1      	cmp	r1, r4
   34f8a:	f000 80a3 	beq.w	350d4 <rpc_message_data_free+0x1b8>
   34f8e:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   34f90:	42a1      	cmp	r1, r4
   34f92:	f000 80a6 	beq.w	350e2 <rpc_message_data_free+0x1c6>
   34f96:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   34f98:	42a1      	cmp	r1, r4
   34f9a:	f000 80ab 	beq.w	350f4 <rpc_message_data_free+0x1d8>
   34f9e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   34fa0:	42a1      	cmp	r1, r4
   34fa2:	f000 80ae 	beq.w	35102 <rpc_message_data_free+0x1e6>
   34fa6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   34fa8:	42a1      	cmp	r1, r4
   34faa:	f000 80b1 	beq.w	35110 <rpc_message_data_free+0x1f4>
   34fae:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   34fb0:	428c      	cmp	r4, r1
   34fb2:	f000 80b4 	beq.w	3511e <rpc_message_data_free+0x202>
   34fb6:	6913      	ldr	r3, [r2, #16]
   34fb8:	4608      	mov	r0, r1
   34fba:	4798      	blx	r3
   34fbc:	4b5e      	ldr	r3, [pc, #376]	; (35138 <rpc_message_data_free+0x21c>)
   34fbe:	781a      	ldrb	r2, [r3, #0]
   34fc0:	2a04      	cmp	r2, #4
   34fc2:	d03b      	beq.n	3503c <rpc_message_data_free+0x120>
   34fc4:	7a1a      	ldrb	r2, [r3, #8]
   34fc6:	2a04      	cmp	r2, #4
   34fc8:	d038      	beq.n	3503c <rpc_message_data_free+0x120>
   34fca:	7c1a      	ldrb	r2, [r3, #16]
   34fcc:	2a04      	cmp	r2, #4
   34fce:	d035      	beq.n	3503c <rpc_message_data_free+0x120>
   34fd0:	7e1a      	ldrb	r2, [r3, #24]
   34fd2:	2a04      	cmp	r2, #4
   34fd4:	d032      	beq.n	3503c <rpc_message_data_free+0x120>
   34fd6:	f893 2020 	ldrb.w	r2, [r3, #32]
   34fda:	2a04      	cmp	r2, #4
   34fdc:	d02e      	beq.n	3503c <rpc_message_data_free+0x120>
   34fde:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   34fe2:	2a04      	cmp	r2, #4
   34fe4:	d02a      	beq.n	3503c <rpc_message_data_free+0x120>
   34fe6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   34fea:	2a04      	cmp	r2, #4
   34fec:	d026      	beq.n	3503c <rpc_message_data_free+0x120>
   34fee:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   34ff2:	2a04      	cmp	r2, #4
   34ff4:	d022      	beq.n	3503c <rpc_message_data_free+0x120>
   34ff6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   34ffa:	2a04      	cmp	r2, #4
   34ffc:	d01e      	beq.n	3503c <rpc_message_data_free+0x120>
   34ffe:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   35002:	2a04      	cmp	r2, #4
   35004:	d01a      	beq.n	3503c <rpc_message_data_free+0x120>
   35006:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   3500a:	2a04      	cmp	r2, #4
   3500c:	d016      	beq.n	3503c <rpc_message_data_free+0x120>
   3500e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   35012:	2a04      	cmp	r2, #4
   35014:	d012      	beq.n	3503c <rpc_message_data_free+0x120>
   35016:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   3501a:	2a04      	cmp	r2, #4
   3501c:	d00e      	beq.n	3503c <rpc_message_data_free+0x120>
   3501e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   35022:	2a04      	cmp	r2, #4
   35024:	d00a      	beq.n	3503c <rpc_message_data_free+0x120>
   35026:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   3502a:	2a04      	cmp	r2, #4
   3502c:	d006      	beq.n	3503c <rpc_message_data_free+0x120>
   3502e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   35032:	2b04      	cmp	r3, #4
   35034:	bf18      	it	ne
   35036:	2000      	movne	r0, #0
   35038:	d000      	beq.n	3503c <rpc_message_data_free+0x120>
   3503a:	bd38      	pop	{r3, r4, r5, pc}
   3503c:	f7f1 fe8a 	bl	26d54 <bsd_os_application_irq_set>
   35040:	2000      	movs	r0, #0
   35042:	bd38      	pop	{r3, r4, r5, pc}
   35044:	2007      	movs	r0, #7
   35046:	4770      	bx	lr
   35048:	2008      	movs	r0, #8
   3504a:	bd38      	pop	{r3, r4, r5, pc}
   3504c:	889c      	ldrh	r4, [r3, #4]
   3504e:	4284      	cmp	r4, r0
   35050:	f47f af75 	bne.w	34f3e <rpc_message_data_free+0x22>
   35054:	2400      	movs	r4, #0
   35056:	2000      	movs	r0, #0
   35058:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   3505c:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   35060:	80a8      	strh	r0, [r5, #4]
   35062:	e7a8      	b.n	34fb6 <rpc_message_data_free+0x9a>
   35064:	899c      	ldrh	r4, [r3, #12]
   35066:	4284      	cmp	r4, r0
   35068:	f47f af6d 	bne.w	34f46 <rpc_message_data_free+0x2a>
   3506c:	2401      	movs	r4, #1
   3506e:	e7f2      	b.n	35056 <rpc_message_data_free+0x13a>
   35070:	8a9c      	ldrh	r4, [r3, #20]
   35072:	4284      	cmp	r4, r0
   35074:	f47f af6b 	bne.w	34f4e <rpc_message_data_free+0x32>
   35078:	2402      	movs	r4, #2
   3507a:	e7ec      	b.n	35056 <rpc_message_data_free+0x13a>
   3507c:	8b9c      	ldrh	r4, [r3, #28]
   3507e:	4284      	cmp	r4, r0
   35080:	f47f af69 	bne.w	34f56 <rpc_message_data_free+0x3a>
   35084:	2403      	movs	r4, #3
   35086:	e7e6      	b.n	35056 <rpc_message_data_free+0x13a>
   35088:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   3508a:	4284      	cmp	r4, r0
   3508c:	f47f af67 	bne.w	34f5e <rpc_message_data_free+0x42>
   35090:	2404      	movs	r4, #4
   35092:	e7e0      	b.n	35056 <rpc_message_data_free+0x13a>
   35094:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   35096:	4284      	cmp	r4, r0
   35098:	f47f af65 	bne.w	34f66 <rpc_message_data_free+0x4a>
   3509c:	2405      	movs	r4, #5
   3509e:	e7da      	b.n	35056 <rpc_message_data_free+0x13a>
   350a0:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   350a2:	4284      	cmp	r4, r0
   350a4:	f47f af63 	bne.w	34f6e <rpc_message_data_free+0x52>
   350a8:	2406      	movs	r4, #6
   350aa:	e7d4      	b.n	35056 <rpc_message_data_free+0x13a>
   350ac:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   350ae:	4284      	cmp	r4, r0
   350b0:	f47f af61 	bne.w	34f76 <rpc_message_data_free+0x5a>
   350b4:	2407      	movs	r4, #7
   350b6:	e7ce      	b.n	35056 <rpc_message_data_free+0x13a>
   350b8:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   350bc:	4284      	cmp	r4, r0
   350be:	f47f af5e 	bne.w	34f7e <rpc_message_data_free+0x62>
   350c2:	2408      	movs	r4, #8
   350c4:	e7c7      	b.n	35056 <rpc_message_data_free+0x13a>
   350c6:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   350ca:	4284      	cmp	r4, r0
   350cc:	f47f af5b 	bne.w	34f86 <rpc_message_data_free+0x6a>
   350d0:	2409      	movs	r4, #9
   350d2:	e7c0      	b.n	35056 <rpc_message_data_free+0x13a>
   350d4:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   350d8:	4284      	cmp	r4, r0
   350da:	f47f af58 	bne.w	34f8e <rpc_message_data_free+0x72>
   350de:	240a      	movs	r4, #10
   350e0:	e7b9      	b.n	35056 <rpc_message_data_free+0x13a>
   350e2:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   350e6:	4284      	cmp	r4, r0
   350e8:	f47f af55 	bne.w	34f96 <rpc_message_data_free+0x7a>
   350ec:	240b      	movs	r4, #11
   350ee:	e7b2      	b.n	35056 <rpc_message_data_free+0x13a>
   350f0:	200e      	movs	r0, #14
   350f2:	4770      	bx	lr
   350f4:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   350f8:	4284      	cmp	r4, r0
   350fa:	f47f af50 	bne.w	34f9e <rpc_message_data_free+0x82>
   350fe:	240c      	movs	r4, #12
   35100:	e7a9      	b.n	35056 <rpc_message_data_free+0x13a>
   35102:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   35106:	4284      	cmp	r4, r0
   35108:	f47f af4d 	bne.w	34fa6 <rpc_message_data_free+0x8a>
   3510c:	240d      	movs	r4, #13
   3510e:	e7a2      	b.n	35056 <rpc_message_data_free+0x13a>
   35110:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   35114:	4284      	cmp	r4, r0
   35116:	f47f af4a 	bne.w	34fae <rpc_message_data_free+0x92>
   3511a:	240e      	movs	r4, #14
   3511c:	e79b      	b.n	35056 <rpc_message_data_free+0x13a>
   3511e:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   35122:	4284      	cmp	r4, r0
   35124:	bf08      	it	eq
   35126:	240f      	moveq	r4, #15
   35128:	f47f af45 	bne.w	34fb6 <rpc_message_data_free+0x9a>
   3512c:	e793      	b.n	35056 <rpc_message_data_free+0x13a>
   3512e:	bf00      	nop
   35130:	20025074 	.word	0x20025074
   35134:	2002508c 	.word	0x2002508c
   35138:	2002510c 	.word	0x2002510c

0003513c <packet_free_cb>:
   3513c:	b510      	push	{r4, lr}
   3513e:	4604      	mov	r4, r0
   35140:	b118      	cbz	r0, 3514a <packet_free_cb+0xe>
   35142:	6800      	ldr	r0, [r0, #0]
   35144:	b108      	cbz	r0, 3514a <packet_free_cb+0xe>
   35146:	f001 f829 	bl	3619c <rpc_gnss_client_data_free>
   3514a:	68a0      	ldr	r0, [r4, #8]
   3514c:	b118      	cbz	r0, 35156 <packet_free_cb+0x1a>
   3514e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35152:	f7fa b84d 	b.w	2f1f0 <nrf_free>
   35156:	bd10      	pop	{r4, pc}

00035158 <rpc_gnss_event_handler>:
   35158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3515c:	4b64      	ldr	r3, [pc, #400]	; (352f0 <rpc_gnss_event_handler+0x198>)
   3515e:	4606      	mov	r6, r0
   35160:	6800      	ldr	r0, [r0, #0]
   35162:	881b      	ldrh	r3, [r3, #0]
   35164:	6802      	ldr	r2, [r0, #0]
   35166:	4f63      	ldr	r7, [pc, #396]	; (352f4 <rpc_gnss_event_handler+0x19c>)
   35168:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   3516c:	b084      	sub	sp, #16
   3516e:	460d      	mov	r5, r1
   35170:	6038      	str	r0, [r7, #0]
   35172:	d038      	beq.n	351e6 <rpc_gnss_event_handler+0x8e>
   35174:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   35178:	33ff      	adds	r3, #255	; 0xff
   3517a:	b29b      	uxth	r3, r3
   3517c:	2b02      	cmp	r3, #2
   3517e:	d810      	bhi.n	351a2 <rpc_gnss_event_handler+0x4a>
   35180:	4c5d      	ldr	r4, [pc, #372]	; (352f8 <rpc_gnss_event_handler+0x1a0>)
   35182:	6823      	ldr	r3, [r4, #0]
   35184:	075a      	lsls	r2, r3, #29
   35186:	d410      	bmi.n	351aa <rpc_gnss_event_handler+0x52>
   35188:	6823      	ldr	r3, [r4, #0]
   3518a:	079b      	lsls	r3, r3, #30
   3518c:	d503      	bpl.n	35196 <rpc_gnss_event_handler+0x3e>
   3518e:	f244 0303 	movw	r3, #16387	; 0x4003
   35192:	429d      	cmp	r5, r3
   35194:	d009      	beq.n	351aa <rpc_gnss_event_handler+0x52>
   35196:	6830      	ldr	r0, [r6, #0]
   35198:	b118      	cbz	r0, 351a2 <rpc_gnss_event_handler+0x4a>
   3519a:	f000 ffff 	bl	3619c <rpc_gnss_client_data_free>
   3519e:	2300      	movs	r3, #0
   351a0:	603b      	str	r3, [r7, #0]
   351a2:	2000      	movs	r0, #0
   351a4:	b004      	add	sp, #16
   351a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   351aa:	2002      	movs	r0, #2
   351ac:	f7fa f816 	bl	2f1dc <nrf_malloc>
   351b0:	4680      	mov	r8, r0
   351b2:	2800      	cmp	r0, #0
   351b4:	f000 8093 	beq.w	352de <rpc_gnss_event_handler+0x186>
   351b8:	2302      	movs	r3, #2
   351ba:	8005      	strh	r5, [r0, #0]
   351bc:	6831      	ldr	r1, [r6, #0]
   351be:	6872      	ldr	r2, [r6, #4]
   351c0:	484e      	ldr	r0, [pc, #312]	; (352fc <rpc_gnss_event_handler+0x1a4>)
   351c2:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   351c6:	6800      	ldr	r0, [r0, #0]
   351c8:	9303      	str	r3, [sp, #12]
   351ca:	6803      	ldr	r3, [r0, #0]
   351cc:	4669      	mov	r1, sp
   351ce:	685b      	ldr	r3, [r3, #4]
   351d0:	4798      	blx	r3
   351d2:	3001      	adds	r0, #1
   351d4:	d070      	beq.n	352b8 <rpc_gnss_event_handler+0x160>
   351d6:	2000      	movs	r0, #0
   351d8:	6823      	ldr	r3, [r4, #0]
   351da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   351de:	6023      	str	r3, [r4, #0]
   351e0:	b004      	add	sp, #16
   351e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   351e6:	4c44      	ldr	r4, [pc, #272]	; (352f8 <rpc_gnss_event_handler+0x1a0>)
   351e8:	6823      	ldr	r3, [r4, #0]
   351ea:	01d9      	lsls	r1, r3, #7
   351ec:	d523      	bpl.n	35236 <rpc_gnss_event_handler+0xde>
   351ee:	f242 1302 	movw	r3, #8450	; 0x2102
   351f2:	429d      	cmp	r5, r3
   351f4:	d11f      	bne.n	35236 <rpc_gnss_event_handler+0xde>
   351f6:	6843      	ldr	r3, [r0, #4]
   351f8:	b91b      	cbnz	r3, 35202 <rpc_gnss_event_handler+0xaa>
   351fa:	6823      	ldr	r3, [r4, #0]
   351fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   35200:	6023      	str	r3, [r4, #0]
   35202:	6823      	ldr	r3, [r4, #0]
   35204:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   35208:	6023      	str	r3, [r4, #0]
   3520a:	6823      	ldr	r3, [r4, #0]
   3520c:	025a      	lsls	r2, r3, #9
   3520e:	d430      	bmi.n	35272 <rpc_gnss_event_handler+0x11a>
   35210:	f242 0305 	movw	r3, #8197	; 0x2005
   35214:	429d      	cmp	r5, r3
   35216:	d12c      	bne.n	35272 <rpc_gnss_event_handler+0x11a>
   35218:	6823      	ldr	r3, [r4, #0]
   3521a:	0299      	lsls	r1, r3, #10
   3521c:	d529      	bpl.n	35272 <rpc_gnss_event_handler+0x11a>
   3521e:	6843      	ldr	r3, [r0, #4]
   35220:	2b00      	cmp	r3, #0
   35222:	d157      	bne.n	352d4 <rpc_gnss_event_handler+0x17c>
   35224:	6823      	ldr	r3, [r4, #0]
   35226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   3522a:	6023      	str	r3, [r4, #0]
   3522c:	6823      	ldr	r3, [r4, #0]
   3522e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   35232:	6023      	str	r3, [r4, #0]
   35234:	e01d      	b.n	35272 <rpc_gnss_event_handler+0x11a>
   35236:	6823      	ldr	r3, [r4, #0]
   35238:	025b      	lsls	r3, r3, #9
   3523a:	d50e      	bpl.n	3525a <rpc_gnss_event_handler+0x102>
   3523c:	f242 1303 	movw	r3, #8451	; 0x2103
   35240:	429d      	cmp	r5, r3
   35242:	d10a      	bne.n	3525a <rpc_gnss_event_handler+0x102>
   35244:	6843      	ldr	r3, [r0, #4]
   35246:	b91b      	cbnz	r3, 35250 <rpc_gnss_event_handler+0xf8>
   35248:	6823      	ldr	r3, [r4, #0]
   3524a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   3524e:	6023      	str	r3, [r4, #0]
   35250:	6823      	ldr	r3, [r4, #0]
   35252:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   35256:	6023      	str	r3, [r4, #0]
   35258:	e00b      	b.n	35272 <rpc_gnss_event_handler+0x11a>
   3525a:	f242 0301 	movw	r3, #8193	; 0x2001
   3525e:	429d      	cmp	r5, r3
   35260:	d10c      	bne.n	3527c <rpc_gnss_event_handler+0x124>
   35262:	6843      	ldr	r3, [r0, #4]
   35264:	b92b      	cbnz	r3, 35272 <rpc_gnss_event_handler+0x11a>
   35266:	6823      	ldr	r3, [r4, #0]
   35268:	0c1b      	lsrs	r3, r3, #16
   3526a:	041b      	lsls	r3, r3, #16
   3526c:	f043 0302 	orr.w	r3, r3, #2
   35270:	6023      	str	r3, [r4, #0]
   35272:	f000 ff93 	bl	3619c <rpc_gnss_client_data_free>
   35276:	2300      	movs	r3, #0
   35278:	603b      	str	r3, [r7, #0]
   3527a:	e77b      	b.n	35174 <rpc_gnss_event_handler+0x1c>
   3527c:	f242 0304 	movw	r3, #8196	; 0x2004
   35280:	429d      	cmp	r5, r3
   35282:	d1c5      	bne.n	35210 <rpc_gnss_event_handler+0xb8>
   35284:	6843      	ldr	r3, [r0, #4]
   35286:	b993      	cbnz	r3, 352ae <rpc_gnss_event_handler+0x156>
   35288:	6823      	ldr	r3, [r4, #0]
   3528a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   3528e:	6023      	str	r3, [r4, #0]
   35290:	6823      	ldr	r3, [r4, #0]
   35292:	b29b      	uxth	r3, r3
   35294:	2b03      	cmp	r3, #3
   35296:	6823      	ldr	r3, [r4, #0]
   35298:	d016      	beq.n	352c8 <rpc_gnss_event_handler+0x170>
   3529a:	b29b      	uxth	r3, r3
   3529c:	2b04      	cmp	r3, #4
   3529e:	d1d7      	bne.n	35250 <rpc_gnss_event_handler+0xf8>
   352a0:	6823      	ldr	r3, [r4, #0]
   352a2:	0c1b      	lsrs	r3, r3, #16
   352a4:	041b      	lsls	r3, r3, #16
   352a6:	f043 0302 	orr.w	r3, r3, #2
   352aa:	6023      	str	r3, [r4, #0]
   352ac:	e7d0      	b.n	35250 <rpc_gnss_event_handler+0xf8>
   352ae:	6823      	ldr	r3, [r4, #0]
   352b0:	b29b      	uxth	r3, r3
   352b2:	2b03      	cmp	r3, #3
   352b4:	d1cc      	bne.n	35250 <rpc_gnss_event_handler+0xf8>
   352b6:	e7f3      	b.n	352a0 <rpc_gnss_event_handler+0x148>
   352b8:	4640      	mov	r0, r8
   352ba:	f7f9 ff99 	bl	2f1f0 <nrf_free>
   352be:	6830      	ldr	r0, [r6, #0]
   352c0:	2800      	cmp	r0, #0
   352c2:	f47f af6a 	bne.w	3519a <rpc_gnss_event_handler+0x42>
   352c6:	e76c      	b.n	351a2 <rpc_gnss_event_handler+0x4a>
   352c8:	0c1b      	lsrs	r3, r3, #16
   352ca:	041b      	lsls	r3, r3, #16
   352cc:	f043 0304 	orr.w	r3, r3, #4
   352d0:	6023      	str	r3, [r4, #0]
   352d2:	e7bd      	b.n	35250 <rpc_gnss_event_handler+0xf8>
   352d4:	6823      	ldr	r3, [r4, #0]
   352d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   352da:	6023      	str	r3, [r4, #0]
   352dc:	e7c9      	b.n	35272 <rpc_gnss_event_handler+0x11a>
   352de:	6830      	ldr	r0, [r6, #0]
   352e0:	2800      	cmp	r0, #0
   352e2:	f43f af5e 	beq.w	351a2 <rpc_gnss_event_handler+0x4a>
   352e6:	f000 ff59 	bl	3619c <rpc_gnss_client_data_free>
   352ea:	f8c7 8000 	str.w	r8, [r7]
   352ee:	e758      	b.n	351a2 <rpc_gnss_event_handler+0x4a>
   352f0:	2002949a 	.word	0x2002949a
   352f4:	20025190 	.word	0x20025190
   352f8:	2002518c 	.word	0x2002518c
   352fc:	20025194 	.word	0x20025194

00035300 <gnss_interface_write>:
   35300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35304:	4a75      	ldr	r2, [pc, #468]	; (354dc <gnss_interface_write+0x1dc>)
   35306:	b09f      	sub	sp, #124	; 0x7c
   35308:	4290      	cmp	r0, r2
   3530a:	9d26      	ldr	r5, [sp, #152]	; 0x98
   3530c:	f040 80d4 	bne.w	354b8 <gnss_interface_write+0x1b8>
   35310:	2900      	cmp	r1, #0
   35312:	f000 80c9 	beq.w	354a8 <gnss_interface_write+0x1a8>
   35316:	2d00      	cmp	r5, #0
   35318:	f000 80c6 	beq.w	354a8 <gnss_interface_write+0x1a8>
   3531c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   3531e:	2a02      	cmp	r2, #2
   35320:	f040 80c2 	bne.w	354a8 <gnss_interface_write+0x1a8>
   35324:	4c6e      	ldr	r4, [pc, #440]	; (354e0 <gnss_interface_write+0x1e0>)
   35326:	6822      	ldr	r2, [r4, #0]
   35328:	b292      	uxth	r2, r2
   3532a:	2a02      	cmp	r2, #2
   3532c:	d004      	beq.n	35338 <gnss_interface_write+0x38>
   3532e:	6822      	ldr	r2, [r4, #0]
   35330:	b292      	uxth	r2, r2
   35332:	2a04      	cmp	r2, #4
   35334:	f040 80c6 	bne.w	354c4 <gnss_interface_write+0x1c4>
   35338:	0798      	lsls	r0, r3, #30
   3533a:	f100 80c9 	bmi.w	354d0 <gnss_interface_write+0x1d0>
   3533e:	6820      	ldr	r0, [r4, #0]
   35340:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   35344:	d065      	beq.n	35412 <gnss_interface_write+0x112>
   35346:	6822      	ldr	r2, [r4, #0]
   35348:	882b      	ldrh	r3, [r5, #0]
   3534a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   3534e:	6022      	str	r2, [r4, #0]
   35350:	6822      	ldr	r2, [r4, #0]
   35352:	3b01      	subs	r3, #1
   35354:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   35358:	6022      	str	r2, [r4, #0]
   3535a:	2b07      	cmp	r3, #7
   3535c:	f200 80a4 	bhi.w	354a8 <gnss_interface_write+0x1a8>
   35360:	e8df f003 	tbb	[pc, r3]
   35364:	696e7378 	.word	0x696e7378
   35368:	045f5a64 	.word	0x045f5a64
   3536c:	4608      	mov	r0, r1
   3536e:	a902      	add	r1, sp, #8
   35370:	f000 fec8 	bl	36104 <rpc_gnss_serialize_integrity>
   35374:	2172      	movs	r1, #114	; 0x72
   35376:	4668      	mov	r0, sp
   35378:	f000 fede 	bl	36138 <rpc_gnss_client_request_alloc>
   3537c:	4605      	mov	r5, r0
   3537e:	9800      	ldr	r0, [sp, #0]
   35380:	2d00      	cmp	r5, #0
   35382:	d16c      	bne.n	3545e <gnss_interface_write+0x15e>
   35384:	2800      	cmp	r0, #0
   35386:	d071      	beq.n	3546c <gnss_interface_write+0x16c>
   35388:	f241 0605 	movw	r6, #4101	; 0x1005
   3538c:	f04f 0c49 	mov.w	ip, #73	; 0x49
   35390:	2272      	movs	r2, #114	; 0x72
   35392:	f04f 0e76 	mov.w	lr, #118	; 0x76
   35396:	f04f 0943 	mov.w	r9, #67	; 0x43
   3539a:	f04f 0854 	mov.w	r8, #84	; 0x54
   3539e:	4f51      	ldr	r7, [pc, #324]	; (354e4 <gnss_interface_write+0x1e4>)
   353a0:	a91e      	add	r1, sp, #120	; 0x78
   353a2:	883b      	ldrh	r3, [r7, #0]
   353a4:	f880 c00f 	strb.w	ip, [r0, #15]
   353a8:	3301      	adds	r3, #1
   353aa:	b29b      	uxth	r3, r3
   353ac:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   353b0:	f841 cd74 	str.w	ip, [r1, #-116]!
   353b4:	7145      	strb	r5, [r0, #5]
   353b6:	7185      	strb	r5, [r0, #6]
   353b8:	71c5      	strb	r5, [r0, #7]
   353ba:	7205      	strb	r5, [r0, #8]
   353bc:	7245      	strb	r5, [r0, #9]
   353be:	7285      	strb	r5, [r0, #10]
   353c0:	72c5      	strb	r5, [r0, #11]
   353c2:	7102      	strb	r2, [r0, #4]
   353c4:	f880 900c 	strb.w	r9, [r0, #12]
   353c8:	f880 800d 	strb.w	r8, [r0, #13]
   353cc:	f880 e00e 	strb.w	lr, [r0, #14]
   353d0:	6800      	ldr	r0, [r0, #0]
   353d2:	803b      	strh	r3, [r7, #0]
   353d4:	f009 fc79 	bl	3ecca <memcpy>
   353d8:	4b43      	ldr	r3, [pc, #268]	; (354e8 <gnss_interface_write+0x1e8>)
   353da:	4631      	mov	r1, r6
   353dc:	9800      	ldr	r0, [sp, #0]
   353de:	601d      	str	r5, [r3, #0]
   353e0:	f000 febe 	bl	36160 <rpc_gnss_client_request_send>
   353e4:	2800      	cmp	r0, #0
   353e6:	d148      	bne.n	3547a <gnss_interface_write+0x17a>
   353e8:	6823      	ldr	r3, [r4, #0]
   353ea:	0299      	lsls	r1, r3, #10
   353ec:	d50d      	bpl.n	3540a <gnss_interface_write+0x10a>
   353ee:	4e3f      	ldr	r6, [pc, #252]	; (354ec <gnss_interface_write+0x1ec>)
   353f0:	4d3a      	ldr	r5, [pc, #232]	; (354dc <gnss_interface_write+0x1dc>)
   353f2:	e001      	b.n	353f8 <gnss_interface_write+0xf8>
   353f4:	2800      	cmp	r0, #0
   353f6:	d150      	bne.n	3549a <gnss_interface_write+0x19a>
   353f8:	4631      	mov	r1, r6
   353fa:	4628      	mov	r0, r5
   353fc:	f7f1 fb24 	bl	26a48 <bsd_os_timedwait>
   35400:	6823      	ldr	r3, [r4, #0]
   35402:	029a      	lsls	r2, r3, #10
   35404:	d4f6      	bmi.n	353f4 <gnss_interface_write+0xf4>
   35406:	2800      	cmp	r0, #0
   35408:	d147      	bne.n	3549a <gnss_interface_write+0x19a>
   3540a:	6823      	ldr	r3, [r4, #0]
   3540c:	039b      	lsls	r3, r3, #14
   3540e:	d53f      	bpl.n	35490 <gnss_interface_write+0x190>
   35410:	2000      	movs	r0, #0
   35412:	b01f      	add	sp, #124	; 0x7c
   35414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35418:	4608      	mov	r0, r1
   3541a:	a902      	add	r1, sp, #8
   3541c:	f000 fe2a 	bl	36074 <rpc_gnss_serialize_time_and_sv_tow>
   35420:	e7a8      	b.n	35374 <gnss_interface_write+0x74>
   35422:	4608      	mov	r0, r1
   35424:	a902      	add	r1, sp, #8
   35426:	f000 fe4d 	bl	360c4 <rpc_gnss_serialize_location>
   3542a:	e7a3      	b.n	35374 <gnss_interface_write+0x74>
   3542c:	4608      	mov	r0, r1
   3542e:	a902      	add	r1, sp, #8
   35430:	f000 fe06 	bl	36040 <rpc_gnss_serialize_nequick>
   35434:	e79e      	b.n	35374 <gnss_interface_write+0x74>
   35436:	4608      	mov	r0, r1
   35438:	a902      	add	r1, sp, #8
   3543a:	f000 fddd 	bl	35ff8 <rpc_gnss_serialize_klob>
   3543e:	e799      	b.n	35374 <gnss_interface_write+0x74>
   35440:	4608      	mov	r0, r1
   35442:	a902      	add	r1, sp, #8
   35444:	f000 fda6 	bl	35f94 <rpc_gnss_serialize_alm>
   35448:	e794      	b.n	35374 <gnss_interface_write+0x74>
   3544a:	4608      	mov	r0, r1
   3544c:	a902      	add	r1, sp, #8
   3544e:	f000 fd4f 	bl	35ef0 <rpc_gnss_serialize_ephe>
   35452:	e78f      	b.n	35374 <gnss_interface_write+0x74>
   35454:	4608      	mov	r0, r1
   35456:	a902      	add	r1, sp, #8
   35458:	f000 fd28 	bl	35eac <rpc_gnss_serialize_utc>
   3545c:	e78a      	b.n	35374 <gnss_interface_write+0x74>
   3545e:	b128      	cbz	r0, 3546c <gnss_interface_write+0x16c>
   35460:	6803      	ldr	r3, [r0, #0]
   35462:	b11b      	cbz	r3, 3546c <gnss_interface_write+0x16c>
   35464:	4618      	mov	r0, r3
   35466:	f000 fe99 	bl	3619c <rpc_gnss_client_data_free>
   3546a:	9800      	ldr	r0, [sp, #0]
   3546c:	f000 fe8e 	bl	3618c <rpc_gnss_client_message_free>
   35470:	2023      	movs	r0, #35	; 0x23
   35472:	f7f1 fb7d 	bl	26b70 <bsd_os_errno_set>
   35476:	f04f 30ff 	mov.w	r0, #4294967295
   3547a:	6823      	ldr	r3, [r4, #0]
   3547c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   35480:	6023      	str	r3, [r4, #0]
   35482:	6823      	ldr	r3, [r4, #0]
   35484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   35488:	6023      	str	r3, [r4, #0]
   3548a:	b01f      	add	sp, #124	; 0x7c
   3548c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35490:	2005      	movs	r0, #5
   35492:	6823      	ldr	r3, [r4, #0]
   35494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   35498:	6023      	str	r3, [r4, #0]
   3549a:	f7f1 fb69 	bl	26b70 <bsd_os_errno_set>
   3549e:	f04f 30ff 	mov.w	r0, #4294967295
   354a2:	b01f      	add	sp, #124	; 0x7c
   354a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   354a8:	2016      	movs	r0, #22
   354aa:	f7f1 fb61 	bl	26b70 <bsd_os_errno_set>
   354ae:	f04f 30ff 	mov.w	r0, #4294967295
   354b2:	b01f      	add	sp, #124	; 0x7c
   354b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   354b8:	2009      	movs	r0, #9
   354ba:	f7f1 fb59 	bl	26b70 <bsd_os_errno_set>
   354be:	f04f 30ff 	mov.w	r0, #4294967295
   354c2:	e7a6      	b.n	35412 <gnss_interface_write+0x112>
   354c4:	2039      	movs	r0, #57	; 0x39
   354c6:	f7f1 fb53 	bl	26b70 <bsd_os_errno_set>
   354ca:	f04f 30ff 	mov.w	r0, #4294967295
   354ce:	e7a0      	b.n	35412 <gnss_interface_write+0x112>
   354d0:	202d      	movs	r0, #45	; 0x2d
   354d2:	f7f1 fb4d 	bl	26b70 <bsd_os_errno_set>
   354d6:	f04f 30ff 	mov.w	r0, #4294967295
   354da:	e79a      	b.n	35412 <gnss_interface_write+0x112>
   354dc:	49765443 	.word	0x49765443
   354e0:	2002518c 	.word	0x2002518c
   354e4:	2002949a 	.word	0x2002949a
   354e8:	20025190 	.word	0x20025190
   354ec:	2003156c 	.word	0x2003156c

000354f0 <gnss_interface_read>:
   354f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   354f4:	4c4a      	ldr	r4, [pc, #296]	; (35620 <gnss_interface_read+0x130>)
   354f6:	b0b7      	sub	sp, #220	; 0xdc
   354f8:	42a0      	cmp	r0, r4
   354fa:	f040 81ec 	bne.w	358d6 <gnss_interface_read+0x3e6>
   354fe:	4688      	mov	r8, r1
   35500:	2900      	cmp	r1, #0
   35502:	f000 81e2 	beq.w	358ca <gnss_interface_read+0x3da>
   35506:	2ad7      	cmp	r2, #215	; 0xd7
   35508:	f240 81df 	bls.w	358ca <gnss_interface_read+0x3da>
   3550c:	4d45      	ldr	r5, [pc, #276]	; (35624 <gnss_interface_read+0x134>)
   3550e:	4699      	mov	r9, r3
   35510:	682b      	ldr	r3, [r5, #0]
   35512:	b29b      	uxth	r3, r3
   35514:	2b04      	cmp	r3, #4
   35516:	d004      	beq.n	35522 <gnss_interface_read+0x32>
   35518:	682b      	ldr	r3, [r5, #0]
   3551a:	b29b      	uxth	r3, r3
   3551c:	2b02      	cmp	r3, #2
   3551e:	f040 81e0 	bne.w	358e2 <gnss_interface_read+0x3f2>
   35522:	2102      	movs	r1, #2
   35524:	20b6      	movs	r0, #182	; 0xb6
   35526:	2400      	movs	r4, #0
   35528:	682b      	ldr	r3, [r5, #0]
   3552a:	f10d 020e 	add.w	r2, sp, #14
   3552e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   35532:	602b      	str	r3, [r5, #0]
   35534:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 3562c <gnss_interface_read+0x13c>
   35538:	ab08      	add	r3, sp, #32
   3553a:	4f3b      	ldr	r7, [pc, #236]	; (35628 <gnss_interface_read+0x138>)
   3553c:	4e38      	ldr	r6, [pc, #224]	; (35620 <gnss_interface_read+0x130>)
   3553e:	9005      	str	r0, [sp, #20]
   35540:	9107      	str	r1, [sp, #28]
   35542:	9304      	str	r3, [sp, #16]
   35544:	9206      	str	r2, [sp, #24]
   35546:	ea09 0b01 	and.w	fp, r9, r1
   3554a:	f8da 0000 	ldr.w	r0, [sl]
   3554e:	464a      	mov	r2, r9
   35550:	6803      	ldr	r3, [r0, #0]
   35552:	a904      	add	r1, sp, #16
   35554:	689b      	ldr	r3, [r3, #8]
   35556:	4798      	blx	r3
   35558:	2800      	cmp	r0, #0
   3555a:	da11      	bge.n	35580 <gnss_interface_read+0x90>
   3555c:	f1bb 0f00 	cmp.w	fp, #0
   35560:	d138      	bne.n	355d4 <gnss_interface_read+0xe4>
   35562:	682b      	ldr	r3, [r5, #0]
   35564:	03d8      	lsls	r0, r3, #15
   35566:	d4f0      	bmi.n	3554a <gnss_interface_read+0x5a>
   35568:	b10c      	cbz	r4, 3556e <gnss_interface_read+0x7e>
   3556a:	e7ee      	b.n	3554a <gnss_interface_read+0x5a>
   3556c:	b930      	cbnz	r0, 3557c <gnss_interface_read+0x8c>
   3556e:	4639      	mov	r1, r7
   35570:	4630      	mov	r0, r6
   35572:	f7f1 fa69 	bl	26a48 <bsd_os_timedwait>
   35576:	682b      	ldr	r3, [r5, #0]
   35578:	03d9      	lsls	r1, r3, #15
   3557a:	d5f7      	bpl.n	3556c <gnss_interface_read+0x7c>
   3557c:	4604      	mov	r4, r0
   3557e:	e7e4      	b.n	3554a <gnss_interface_read+0x5a>
   35580:	f244 0202 	movw	r2, #16386	; 0x4002
   35584:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   35588:	4293      	cmp	r3, r2
   3558a:	d039      	beq.n	35600 <gnss_interface_read+0x110>
   3558c:	f244 0201 	movw	r2, #16385	; 0x4001
   35590:	4293      	cmp	r3, r2
   35592:	d04d      	beq.n	35630 <gnss_interface_read+0x140>
   35594:	f244 0203 	movw	r2, #16387	; 0x4003
   35598:	4293      	cmp	r3, r2
   3559a:	f040 8196 	bne.w	358ca <gnss_interface_read+0x3da>
   3559e:	2203      	movs	r2, #3
   355a0:	2414      	movs	r4, #20
   355a2:	9b08      	ldr	r3, [sp, #32]
   355a4:	f888 2000 	strb.w	r2, [r8]
   355a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   355aa:	f8c8 3008 	str.w	r3, [r8, #8]
   355ae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   355b2:	e9c8 2303 	strd	r2, r3, [r8, #12]
   355b6:	f8da 0000 	ldr.w	r0, [sl]
   355ba:	6803      	ldr	r3, [r0, #0]
   355bc:	68db      	ldr	r3, [r3, #12]
   355be:	4798      	blx	r3
   355c0:	2800      	cmp	r0, #0
   355c2:	dd03      	ble.n	355cc <gnss_interface_read+0xdc>
   355c4:	682b      	ldr	r3, [r5, #0]
   355c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   355ca:	602b      	str	r3, [r5, #0]
   355cc:	4620      	mov	r0, r4
   355ce:	b037      	add	sp, #220	; 0xdc
   355d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   355d4:	1c42      	adds	r2, r0, #1
   355d6:	4603      	mov	r3, r0
   355d8:	d1d2      	bne.n	35580 <gnss_interface_read+0x90>
   355da:	b93c      	cbnz	r4, 355ec <gnss_interface_read+0xfc>
   355dc:	461c      	mov	r4, r3
   355de:	2023      	movs	r0, #35	; 0x23
   355e0:	f7f1 fac6 	bl	26b70 <bsd_os_errno_set>
   355e4:	4620      	mov	r0, r4
   355e6:	b037      	add	sp, #220	; 0xdc
   355e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   355ec:	9001      	str	r0, [sp, #4]
   355ee:	4620      	mov	r0, r4
   355f0:	f7f1 fabe 	bl	26b70 <bsd_os_errno_set>
   355f4:	9b01      	ldr	r3, [sp, #4]
   355f6:	461c      	mov	r4, r3
   355f8:	4620      	mov	r0, r4
   355fa:	b037      	add	sp, #220	; 0xdc
   355fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35600:	a808      	add	r0, sp, #32
   35602:	f7e7 fd8f 	bl	1d124 <strlen>
   35606:	2302      	movs	r3, #2
   35608:	1c44      	adds	r4, r0, #1
   3560a:	b2a4      	uxth	r4, r4
   3560c:	f808 3b08 	strb.w	r3, [r8], #8
   35610:	4622      	mov	r2, r4
   35612:	a908      	add	r1, sp, #32
   35614:	4640      	mov	r0, r8
   35616:	f009 fb58 	bl	3ecca <memcpy>
   3561a:	3408      	adds	r4, #8
   3561c:	e7cb      	b.n	355b6 <gnss_interface_read+0xc6>
   3561e:	bf00      	nop
   35620:	49765443 	.word	0x49765443
   35624:	2002518c 	.word	0x2002518c
   35628:	2003156c 	.word	0x2003156c
   3562c:	20025194 	.word	0x20025194
   35630:	2401      	movs	r4, #1
   35632:	a809      	add	r0, sp, #36	; 0x24
   35634:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   35636:	e9c8 0102 	strd	r0, r1, [r8, #8]
   3563a:	e9c8 2304 	strd	r2, r3, [r8, #16]
   3563e:	990d      	ldr	r1, [sp, #52]	; 0x34
   35640:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   35642:	f888 4000 	strb.w	r4, [r8]
   35646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   35648:	f8c8 1018 	str.w	r1, [r8, #24]
   3564c:	9910      	ldr	r1, [sp, #64]	; 0x40
   3564e:	f8c8 201c 	str.w	r2, [r8, #28]
   35652:	f8c8 3020 	str.w	r3, [r8, #32]
   35656:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   3565a:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   3565e:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   35662:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   35666:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   3566a:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   3566e:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   35672:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   35676:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   3567a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   3567e:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   35682:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   35686:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   3568a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   3568e:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   35692:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   35696:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   3569a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   3569e:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   356a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   356a4:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   356a8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   356ac:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   356b0:	f3c3 210f 	ubfx	r1, r3, #8, #16
   356b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   356b6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   356ba:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   356be:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   356c2:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   356c6:	f3c3 230f 	ubfx	r3, r3, #8, #16
   356ca:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   356ce:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   356d2:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   356d6:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   356da:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   356de:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   356e2:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   356e6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   356ea:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   356ee:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   356f2:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   356f6:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   356fa:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   356fe:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   35702:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   35706:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   3570a:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   3570e:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   35712:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   35716:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   3571a:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   3571e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   35722:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   35726:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   3572a:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   3572e:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   35732:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   35736:	9a22      	ldr	r2, [sp, #136]	; 0x88
   35738:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   3573c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   35740:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   35744:	f3c2 220f 	ubfx	r2, r2, #8, #16
   35748:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   3574c:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   35750:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   35754:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   35758:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   3575c:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   35760:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   35764:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   35768:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   3576c:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   35770:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   35774:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   35778:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   3577c:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   35780:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   35784:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   35788:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   3578c:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   35790:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   35794:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   35798:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   3579c:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   357a0:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   357a4:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   357a8:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   357ac:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   357b0:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   357b4:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   357b8:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   357bc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   357be:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   357c2:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   357c6:	f3c3 210f 	ubfx	r1, r3, #8, #16
   357ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   357cc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   357d0:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   357d4:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   357d8:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   357dc:	f3c3 230f 	ubfx	r3, r3, #8, #16
   357e0:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   357e4:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   357e8:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   357ec:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   357f0:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   357f4:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   357f8:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   357fc:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   35800:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   35804:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   35808:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   3580c:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   35810:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   35814:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   35818:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   3581c:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   35820:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   35824:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   35828:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   3582c:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   35830:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   35834:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   35838:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   3583c:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   35840:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   35844:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   35848:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   3584c:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   35850:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   35852:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   35856:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   3585a:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   3585e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   35862:	f3c2 220f 	ubfx	r2, r2, #8, #16
   35866:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   3586a:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   3586e:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   35872:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   35876:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   3587a:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   3587e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   35882:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   35886:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   3588a:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   3588e:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   35892:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   35896:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   3589a:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   3589e:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   358a2:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   358a6:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   358aa:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   358ae:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   358b2:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   358b6:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   358ba:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   358be:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   358c2:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   358c6:	24d8      	movs	r4, #216	; 0xd8
   358c8:	e675      	b.n	355b6 <gnss_interface_read+0xc6>
   358ca:	2016      	movs	r0, #22
   358cc:	f7f1 f950 	bl	26b70 <bsd_os_errno_set>
   358d0:	f04f 34ff 	mov.w	r4, #4294967295
   358d4:	e67a      	b.n	355cc <gnss_interface_read+0xdc>
   358d6:	2009      	movs	r0, #9
   358d8:	f7f1 f94a 	bl	26b70 <bsd_os_errno_set>
   358dc:	f04f 34ff 	mov.w	r4, #4294967295
   358e0:	e674      	b.n	355cc <gnss_interface_read+0xdc>
   358e2:	2039      	movs	r0, #57	; 0x39
   358e4:	f7f1 f944 	bl	26b70 <bsd_os_errno_set>
   358e8:	f04f 34ff 	mov.w	r4, #4294967295
   358ec:	e66e      	b.n	355cc <gnss_interface_read+0xdc>
   358ee:	bf00      	nop

000358f0 <gnss_interface_setopt>:
   358f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   358f4:	f241 1402 	movw	r4, #4354	; 0x1102
   358f8:	4222      	tst	r2, r4
   358fa:	b086      	sub	sp, #24
   358fc:	4d9c      	ldr	r5, [pc, #624]	; (35b70 <gnss_interface_setopt+0x280>)
   358fe:	d004      	beq.n	3590a <gnss_interface_setopt+0x1a>
   35900:	682c      	ldr	r4, [r5, #0]
   35902:	b2a4      	uxth	r4, r4
   35904:	2c02      	cmp	r4, #2
   35906:	f040 8104 	bne.w	35b12 <gnss_interface_setopt+0x222>
   3590a:	682c      	ldr	r4, [r5, #0]
   3590c:	0264      	lsls	r4, r4, #9
   3590e:	f100 8128 	bmi.w	35b62 <gnss_interface_setopt+0x272>
   35912:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   35916:	f040 811e 	bne.w	35b56 <gnss_interface_setopt+0x266>
   3591a:	4996      	ldr	r1, [pc, #600]	; (35b74 <gnss_interface_setopt+0x284>)
   3591c:	4288      	cmp	r0, r1
   3591e:	f040 8114 	bne.w	35b4a <gnss_interface_setopt+0x25a>
   35922:	3a01      	subs	r2, #1
   35924:	2a08      	cmp	r2, #8
   35926:	f200 80ec 	bhi.w	35b02 <gnss_interface_setopt+0x212>
   3592a:	e8df f012 	tbh	[pc, r2, lsl #1]
   3592e:	0075      	.short	0x0075
   35930:	00c200d8 	.word	0x00c200d8
   35934:	008100cc 	.word	0x008100cc
   35938:	0098008c 	.word	0x0098008c
   3593c:	000900af 	.word	0x000900af
   35940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   35942:	2a01      	cmp	r2, #1
   35944:	f040 80dd 	bne.w	35b02 <gnss_interface_setopt+0x212>
   35948:	f241 1603 	movw	r6, #4355	; 0x1103
   3594c:	2240      	movs	r2, #64	; 0x40
   3594e:	4637      	mov	r7, r6
   35950:	781b      	ldrb	r3, [r3, #0]
   35952:	9202      	str	r2, [sp, #8]
   35954:	f88d 3015 	strb.w	r3, [sp, #21]
   35958:	682b      	ldr	r3, [r5, #0]
   3595a:	2112      	movs	r1, #18
   3595c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   35960:	4668      	mov	r0, sp
   35962:	602b      	str	r3, [r5, #0]
   35964:	f000 fbe8 	bl	36138 <rpc_gnss_client_request_alloc>
   35968:	4604      	mov	r4, r0
   3596a:	9800      	ldr	r0, [sp, #0]
   3596c:	2c00      	cmp	r4, #0
   3596e:	f040 80d6 	bne.w	35b1e <gnss_interface_setopt+0x22e>
   35972:	2800      	cmp	r0, #0
   35974:	f000 80da 	beq.w	35b2c <gnss_interface_setopt+0x23c>
   35978:	2212      	movs	r2, #18
   3597a:	f04f 0876 	mov.w	r8, #118	; 0x76
   3597e:	f04f 0e49 	mov.w	lr, #73	; 0x49
   35982:	f04f 0a43 	mov.w	sl, #67	; 0x43
   35986:	f04f 0954 	mov.w	r9, #84	; 0x54
   3598a:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 35b7c <gnss_interface_setopt+0x28c>
   3598e:	a906      	add	r1, sp, #24
   35990:	f8bc 3000 	ldrh.w	r3, [ip]
   35994:	f880 800e 	strb.w	r8, [r0, #14]
   35998:	3301      	adds	r3, #1
   3599a:	b29b      	uxth	r3, r3
   3599c:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   359a0:	f841 6d14 	str.w	r6, [r1, #-20]!
   359a4:	7144      	strb	r4, [r0, #5]
   359a6:	7184      	strb	r4, [r0, #6]
   359a8:	71c4      	strb	r4, [r0, #7]
   359aa:	7204      	strb	r4, [r0, #8]
   359ac:	7244      	strb	r4, [r0, #9]
   359ae:	7284      	strb	r4, [r0, #10]
   359b0:	72c4      	strb	r4, [r0, #11]
   359b2:	7102      	strb	r2, [r0, #4]
   359b4:	f880 a00c 	strb.w	sl, [r0, #12]
   359b8:	f880 900d 	strb.w	r9, [r0, #13]
   359bc:	f880 e00f 	strb.w	lr, [r0, #15]
   359c0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 35b80 <gnss_interface_setopt+0x290>
   359c4:	6800      	ldr	r0, [r0, #0]
   359c6:	f8ac 3000 	strh.w	r3, [ip]
   359ca:	f009 f97e 	bl	3ecca <memcpy>
   359ce:	4639      	mov	r1, r7
   359d0:	9800      	ldr	r0, [sp, #0]
   359d2:	f8c8 4000 	str.w	r4, [r8]
   359d6:	f000 fbc3 	bl	36160 <rpc_gnss_client_request_send>
   359da:	2800      	cmp	r0, #0
   359dc:	f040 80ab 	bne.w	35b36 <gnss_interface_setopt+0x246>
   359e0:	4f65      	ldr	r7, [pc, #404]	; (35b78 <gnss_interface_setopt+0x288>)
   359e2:	4e64      	ldr	r6, [pc, #400]	; (35b74 <gnss_interface_setopt+0x284>)
   359e4:	4639      	mov	r1, r7
   359e6:	4630      	mov	r0, r6
   359e8:	f7f1 f82e 	bl	26a48 <bsd_os_timedwait>
   359ec:	682c      	ldr	r4, [r5, #0]
   359ee:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   359f2:	d1f7      	bne.n	359e4 <gnss_interface_setopt+0xf4>
   359f4:	f8d8 0000 	ldr.w	r0, [r8]
   359f8:	b118      	cbz	r0, 35a02 <gnss_interface_setopt+0x112>
   359fa:	f000 fbcf 	bl	3619c <rpc_gnss_client_data_free>
   359fe:	f8c8 4000 	str.w	r4, [r8]
   35a02:	682b      	ldr	r3, [r5, #0]
   35a04:	021b      	lsls	r3, r3, #8
   35a06:	d576      	bpl.n	35af6 <gnss_interface_setopt+0x206>
   35a08:	2000      	movs	r0, #0
   35a0a:	682b      	ldr	r3, [r5, #0]
   35a0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   35a10:	602b      	str	r3, [r5, #0]
   35a12:	b006      	add	sp, #24
   35a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   35a18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   35a1a:	2a02      	cmp	r2, #2
   35a1c:	d171      	bne.n	35b02 <gnss_interface_setopt+0x212>
   35a1e:	2208      	movs	r2, #8
   35a20:	f241 1603 	movw	r6, #4355	; 0x1103
   35a24:	881b      	ldrh	r3, [r3, #0]
   35a26:	9202      	str	r2, [sp, #8]
   35a28:	f8ad 300f 	strh.w	r3, [sp, #15]
   35a2c:	4637      	mov	r7, r6
   35a2e:	e793      	b.n	35958 <gnss_interface_setopt+0x68>
   35a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   35a32:	2a01      	cmp	r2, #1
   35a34:	d165      	bne.n	35b02 <gnss_interface_setopt+0x212>
   35a36:	f241 1603 	movw	r6, #4355	; 0x1103
   35a3a:	781b      	ldrb	r3, [r3, #0]
   35a3c:	9202      	str	r2, [sp, #8]
   35a3e:	f88d 300c 	strb.w	r3, [sp, #12]
   35a42:	4637      	mov	r7, r6
   35a44:	e788      	b.n	35958 <gnss_interface_setopt+0x68>
   35a46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   35a48:	2a01      	cmp	r2, #1
   35a4a:	d15a      	bne.n	35b02 <gnss_interface_setopt+0x212>
   35a4c:	2202      	movs	r2, #2
   35a4e:	f241 1603 	movw	r6, #4355	; 0x1103
   35a52:	781b      	ldrb	r3, [r3, #0]
   35a54:	9202      	str	r2, [sp, #8]
   35a56:	f88d 300d 	strb.w	r3, [sp, #13]
   35a5a:	4637      	mov	r7, r6
   35a5c:	e77c      	b.n	35958 <gnss_interface_setopt+0x68>
   35a5e:	682a      	ldr	r2, [r5, #0]
   35a60:	b292      	uxth	r2, r2
   35a62:	2a02      	cmp	r2, #2
   35a64:	d155      	bne.n	35b12 <gnss_interface_setopt+0x222>
   35a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   35a68:	2a04      	cmp	r2, #4
   35a6a:	d14a      	bne.n	35b02 <gnss_interface_setopt+0x212>
   35a6c:	2101      	movs	r1, #1
   35a6e:	f241 0604 	movw	r6, #4100	; 0x1004
   35a72:	682a      	ldr	r2, [r5, #0]
   35a74:	6818      	ldr	r0, [r3, #0]
   35a76:	0c13      	lsrs	r3, r2, #16
   35a78:	041b      	lsls	r3, r3, #16
   35a7a:	f043 0303 	orr.w	r3, r3, #3
   35a7e:	f8cd 0009 	str.w	r0, [sp, #9]
   35a82:	602b      	str	r3, [r5, #0]
   35a84:	f88d 1008 	strb.w	r1, [sp, #8]
   35a88:	4637      	mov	r7, r6
   35a8a:	e765      	b.n	35958 <gnss_interface_setopt+0x68>
   35a8c:	682b      	ldr	r3, [r5, #0]
   35a8e:	b29b      	uxth	r3, r3
   35a90:	2b04      	cmp	r3, #4
   35a92:	d13e      	bne.n	35b12 <gnss_interface_setopt+0x222>
   35a94:	2300      	movs	r3, #0
   35a96:	f241 0604 	movw	r6, #4100	; 0x1004
   35a9a:	f88d 3008 	strb.w	r3, [sp, #8]
   35a9e:	f88d 3009 	strb.w	r3, [sp, #9]
   35aa2:	f88d 300a 	strb.w	r3, [sp, #10]
   35aa6:	f88d 300b 	strb.w	r3, [sp, #11]
   35aaa:	f88d 300c 	strb.w	r3, [sp, #12]
   35aae:	4637      	mov	r7, r6
   35ab0:	e752      	b.n	35958 <gnss_interface_setopt+0x68>
   35ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   35ab4:	2a01      	cmp	r2, #1
   35ab6:	d124      	bne.n	35b02 <gnss_interface_setopt+0x212>
   35ab8:	781b      	ldrb	r3, [r3, #0]
   35aba:	2b01      	cmp	r3, #1
   35abc:	d121      	bne.n	35b02 <gnss_interface_setopt+0x212>
   35abe:	f241 1603 	movw	r6, #4355	; 0x1103
   35ac2:	4637      	mov	r7, r6
   35ac4:	e748      	b.n	35958 <gnss_interface_setopt+0x68>
   35ac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   35ac8:	2a02      	cmp	r2, #2
   35aca:	d11a      	bne.n	35b02 <gnss_interface_setopt+0x212>
   35acc:	2220      	movs	r2, #32
   35ace:	f241 1603 	movw	r6, #4355	; 0x1103
   35ad2:	881b      	ldrh	r3, [r3, #0]
   35ad4:	9202      	str	r2, [sp, #8]
   35ad6:	f8ad 3013 	strh.w	r3, [sp, #19]
   35ada:	4637      	mov	r7, r6
   35adc:	e73c      	b.n	35958 <gnss_interface_setopt+0x68>
   35ade:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   35ae0:	2a02      	cmp	r2, #2
   35ae2:	d10e      	bne.n	35b02 <gnss_interface_setopt+0x212>
   35ae4:	2210      	movs	r2, #16
   35ae6:	f241 1603 	movw	r6, #4355	; 0x1103
   35aea:	881b      	ldrh	r3, [r3, #0]
   35aec:	9202      	str	r2, [sp, #8]
   35aee:	f8ad 3011 	strh.w	r3, [sp, #17]
   35af2:	4637      	mov	r7, r6
   35af4:	e730      	b.n	35958 <gnss_interface_setopt+0x68>
   35af6:	200e      	movs	r0, #14
   35af8:	f7f1 f83a 	bl	26b70 <bsd_os_errno_set>
   35afc:	f04f 30ff 	mov.w	r0, #4294967295
   35b00:	e783      	b.n	35a0a <gnss_interface_setopt+0x11a>
   35b02:	2016      	movs	r0, #22
   35b04:	f7f1 f834 	bl	26b70 <bsd_os_errno_set>
   35b08:	f04f 30ff 	mov.w	r0, #4294967295
   35b0c:	b006      	add	sp, #24
   35b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   35b12:	200e      	movs	r0, #14
   35b14:	f7f1 f82c 	bl	26b70 <bsd_os_errno_set>
   35b18:	f04f 30ff 	mov.w	r0, #4294967295
   35b1c:	e779      	b.n	35a12 <gnss_interface_setopt+0x122>
   35b1e:	b128      	cbz	r0, 35b2c <gnss_interface_setopt+0x23c>
   35b20:	6803      	ldr	r3, [r0, #0]
   35b22:	b11b      	cbz	r3, 35b2c <gnss_interface_setopt+0x23c>
   35b24:	4618      	mov	r0, r3
   35b26:	f000 fb39 	bl	3619c <rpc_gnss_client_data_free>
   35b2a:	9800      	ldr	r0, [sp, #0]
   35b2c:	f000 fb2e 	bl	3618c <rpc_gnss_client_message_free>
   35b30:	2023      	movs	r0, #35	; 0x23
   35b32:	f7f1 f81d 	bl	26b70 <bsd_os_errno_set>
   35b36:	682b      	ldr	r3, [r5, #0]
   35b38:	200e      	movs	r0, #14
   35b3a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   35b3e:	602b      	str	r3, [r5, #0]
   35b40:	f7f1 f816 	bl	26b70 <bsd_os_errno_set>
   35b44:	f04f 30ff 	mov.w	r0, #4294967295
   35b48:	e763      	b.n	35a12 <gnss_interface_setopt+0x122>
   35b4a:	2009      	movs	r0, #9
   35b4c:	f7f1 f810 	bl	26b70 <bsd_os_errno_set>
   35b50:	f04f 30ff 	mov.w	r0, #4294967295
   35b54:	e75d      	b.n	35a12 <gnss_interface_setopt+0x122>
   35b56:	202a      	movs	r0, #42	; 0x2a
   35b58:	f7f1 f80a 	bl	26b70 <bsd_os_errno_set>
   35b5c:	f04f 30ff 	mov.w	r0, #4294967295
   35b60:	e757      	b.n	35a12 <gnss_interface_setopt+0x122>
   35b62:	2073      	movs	r0, #115	; 0x73
   35b64:	f7f1 f804 	bl	26b70 <bsd_os_errno_set>
   35b68:	f04f 30ff 	mov.w	r0, #4294967295
   35b6c:	e751      	b.n	35a12 <gnss_interface_setopt+0x122>
   35b6e:	bf00      	nop
   35b70:	2002518c 	.word	0x2002518c
   35b74:	49765443 	.word	0x49765443
   35b78:	2003156c 	.word	0x2003156c
   35b7c:	2002949a 	.word	0x2002949a
   35b80:	20025190 	.word	0x20025190

00035b84 <gnss_interface_getopt>:
   35b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35b88:	4c81      	ldr	r4, [pc, #516]	; (35d90 <gnss_interface_getopt+0x20c>)
   35b8a:	b087      	sub	sp, #28
   35b8c:	6825      	ldr	r5, [r4, #0]
   35b8e:	4698      	mov	r8, r3
   35b90:	b2ad      	uxth	r5, r5
   35b92:	2d02      	cmp	r5, #2
   35b94:	9b10      	ldr	r3, [sp, #64]	; 0x40
   35b96:	f040 80dd 	bne.w	35d54 <gnss_interface_getopt+0x1d0>
   35b9a:	6825      	ldr	r5, [r4, #0]
   35b9c:	03ee      	lsls	r6, r5, #15
   35b9e:	f100 80eb 	bmi.w	35d78 <gnss_interface_getopt+0x1f4>
   35ba2:	6825      	ldr	r5, [r4, #0]
   35ba4:	01ed      	lsls	r5, r5, #7
   35ba6:	f100 80ed 	bmi.w	35d84 <gnss_interface_getopt+0x200>
   35baa:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   35bae:	f040 80d7 	bne.w	35d60 <gnss_interface_getopt+0x1dc>
   35bb2:	4978      	ldr	r1, [pc, #480]	; (35d94 <gnss_interface_getopt+0x210>)
   35bb4:	4288      	cmp	r0, r1
   35bb6:	f040 80d9 	bne.w	35d6c <gnss_interface_getopt+0x1e8>
   35bba:	f1b8 0f00 	cmp.w	r8, #0
   35bbe:	d00b      	beq.n	35bd8 <gnss_interface_getopt+0x54>
   35bc0:	b153      	cbz	r3, 35bd8 <gnss_interface_getopt+0x54>
   35bc2:	1e57      	subs	r7, r2, #1
   35bc4:	2f05      	cmp	r7, #5
   35bc6:	d807      	bhi.n	35bd8 <gnss_interface_getopt+0x54>
   35bc8:	e8df f007 	tbb	[pc, r7]
   35bcc:	0f030f0f 	.word	0x0f030f0f
   35bd0:	0303      	.short	0x0303
   35bd2:	681b      	ldr	r3, [r3, #0]
   35bd4:	2b01      	cmp	r3, #1
   35bd6:	d00b      	beq.n	35bf0 <gnss_interface_getopt+0x6c>
   35bd8:	2016      	movs	r0, #22
   35bda:	f7f0 ffc9 	bl	26b70 <bsd_os_errno_set>
   35bde:	f04f 35ff 	mov.w	r5, #4294967295
   35be2:	4628      	mov	r0, r5
   35be4:	b007      	add	sp, #28
   35be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35bea:	681b      	ldr	r3, [r3, #0]
   35bec:	2b02      	cmp	r3, #2
   35bee:	d1f3      	bne.n	35bd8 <gnss_interface_getopt+0x54>
   35bf0:	6823      	ldr	r3, [r4, #0]
   35bf2:	2212      	movs	r2, #18
   35bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   35bf8:	2100      	movs	r1, #0
   35bfa:	a801      	add	r0, sp, #4
   35bfc:	6023      	str	r3, [r4, #0]
   35bfe:	f009 f884 	bl	3ed0a <memset>
   35c02:	2112      	movs	r1, #18
   35c04:	4668      	mov	r0, sp
   35c06:	f000 fa97 	bl	36138 <rpc_gnss_client_request_alloc>
   35c0a:	4605      	mov	r5, r0
   35c0c:	9800      	ldr	r0, [sp, #0]
   35c0e:	2d00      	cmp	r5, #0
   35c10:	f040 808a 	bne.w	35d28 <gnss_interface_getopt+0x1a4>
   35c14:	2800      	cmp	r0, #0
   35c16:	f000 808e 	beq.w	35d36 <gnss_interface_getopt+0x1b2>
   35c1a:	f241 1602 	movw	r6, #4354	; 0x1102
   35c1e:	f04f 0e49 	mov.w	lr, #73	; 0x49
   35c22:	2212      	movs	r2, #18
   35c24:	f04f 0976 	mov.w	r9, #118	; 0x76
   35c28:	f04f 0b43 	mov.w	fp, #67	; 0x43
   35c2c:	f04f 0a54 	mov.w	sl, #84	; 0x54
   35c30:	f8df c168 	ldr.w	ip, [pc, #360]	; 35d9c <gnss_interface_getopt+0x218>
   35c34:	f880 e00f 	strb.w	lr, [r0, #15]
   35c38:	f8bc 3000 	ldrh.w	r3, [ip]
   35c3c:	f880 900e 	strb.w	r9, [r0, #14]
   35c40:	3301      	adds	r3, #1
   35c42:	b29b      	uxth	r3, r3
   35c44:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   35c48:	f8cd e004 	str.w	lr, [sp, #4]
   35c4c:	7145      	strb	r5, [r0, #5]
   35c4e:	7185      	strb	r5, [r0, #6]
   35c50:	71c5      	strb	r5, [r0, #7]
   35c52:	7205      	strb	r5, [r0, #8]
   35c54:	7245      	strb	r5, [r0, #9]
   35c56:	7285      	strb	r5, [r0, #10]
   35c58:	72c5      	strb	r5, [r0, #11]
   35c5a:	a901      	add	r1, sp, #4
   35c5c:	7102      	strb	r2, [r0, #4]
   35c5e:	f880 b00c 	strb.w	fp, [r0, #12]
   35c62:	f880 a00d 	strb.w	sl, [r0, #13]
   35c66:	f8df 9138 	ldr.w	r9, [pc, #312]	; 35da0 <gnss_interface_getopt+0x21c>
   35c6a:	6800      	ldr	r0, [r0, #0]
   35c6c:	f8ac 3000 	strh.w	r3, [ip]
   35c70:	f009 f82b 	bl	3ecca <memcpy>
   35c74:	4631      	mov	r1, r6
   35c76:	9800      	ldr	r0, [sp, #0]
   35c78:	f8c9 5000 	str.w	r5, [r9]
   35c7c:	f000 fa70 	bl	36160 <rpc_gnss_client_request_send>
   35c80:	2800      	cmp	r0, #0
   35c82:	d15d      	bne.n	35d40 <gnss_interface_getopt+0x1bc>
   35c84:	4e44      	ldr	r6, [pc, #272]	; (35d98 <gnss_interface_getopt+0x214>)
   35c86:	4d43      	ldr	r5, [pc, #268]	; (35d94 <gnss_interface_getopt+0x210>)
   35c88:	4631      	mov	r1, r6
   35c8a:	4628      	mov	r0, r5
   35c8c:	f7f0 fedc 	bl	26a48 <bsd_os_timedwait>
   35c90:	6823      	ldr	r3, [r4, #0]
   35c92:	01db      	lsls	r3, r3, #7
   35c94:	d4f8      	bmi.n	35c88 <gnss_interface_getopt+0x104>
   35c96:	f8d9 0000 	ldr.w	r0, [r9]
   35c9a:	b1d8      	cbz	r0, 35cd4 <gnss_interface_getopt+0x150>
   35c9c:	6825      	ldr	r5, [r4, #0]
   35c9e:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   35ca2:	d00f      	beq.n	35cc4 <gnss_interface_getopt+0x140>
   35ca4:	2f05      	cmp	r7, #5
   35ca6:	d837      	bhi.n	35d18 <gnss_interface_getopt+0x194>
   35ca8:	e8df f007 	tbb	[pc, r7]
   35cac:	2b26201a 	.word	0x2b26201a
   35cb0:	0331      	.short	0x0331
   35cb2:	2500      	movs	r5, #0
   35cb4:	7b43      	ldrb	r3, [r0, #13]
   35cb6:	f888 3000 	strb.w	r3, [r8]
   35cba:	f000 fa6f 	bl	3619c <rpc_gnss_client_data_free>
   35cbe:	2300      	movs	r3, #0
   35cc0:	f8c9 3000 	str.w	r3, [r9]
   35cc4:	6823      	ldr	r3, [r4, #0]
   35cc6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   35cca:	6023      	str	r3, [r4, #0]
   35ccc:	4628      	mov	r0, r5
   35cce:	b007      	add	sp, #28
   35cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35cd4:	6823      	ldr	r3, [r4, #0]
   35cd6:	4605      	mov	r5, r0
   35cd8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   35cdc:	6023      	str	r3, [r4, #0]
   35cde:	e7f5      	b.n	35ccc <gnss_interface_getopt+0x148>
   35ce0:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   35ce4:	2500      	movs	r5, #0
   35ce6:	f8a8 3000 	strh.w	r3, [r8]
   35cea:	e7e6      	b.n	35cba <gnss_interface_getopt+0x136>
   35cec:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   35cf0:	2500      	movs	r5, #0
   35cf2:	f8a8 3000 	strh.w	r3, [r8]
   35cf6:	e7e0      	b.n	35cba <gnss_interface_getopt+0x136>
   35cf8:	7b83      	ldrb	r3, [r0, #14]
   35cfa:	2500      	movs	r5, #0
   35cfc:	f888 3000 	strb.w	r3, [r8]
   35d00:	e7db      	b.n	35cba <gnss_interface_getopt+0x136>
   35d02:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   35d06:	2500      	movs	r5, #0
   35d08:	f8a8 3000 	strh.w	r3, [r8]
   35d0c:	e7d5      	b.n	35cba <gnss_interface_getopt+0x136>
   35d0e:	7b03      	ldrb	r3, [r0, #12]
   35d10:	2500      	movs	r5, #0
   35d12:	f888 3000 	strb.w	r3, [r8]
   35d16:	e7d0      	b.n	35cba <gnss_interface_getopt+0x136>
   35d18:	2016      	movs	r0, #22
   35d1a:	f7f0 ff29 	bl	26b70 <bsd_os_errno_set>
   35d1e:	f04f 35ff 	mov.w	r5, #4294967295
   35d22:	f8d9 0000 	ldr.w	r0, [r9]
   35d26:	e7c8      	b.n	35cba <gnss_interface_getopt+0x136>
   35d28:	b128      	cbz	r0, 35d36 <gnss_interface_getopt+0x1b2>
   35d2a:	6803      	ldr	r3, [r0, #0]
   35d2c:	b11b      	cbz	r3, 35d36 <gnss_interface_getopt+0x1b2>
   35d2e:	4618      	mov	r0, r3
   35d30:	f000 fa34 	bl	3619c <rpc_gnss_client_data_free>
   35d34:	9800      	ldr	r0, [sp, #0]
   35d36:	f000 fa29 	bl	3618c <rpc_gnss_client_message_free>
   35d3a:	2023      	movs	r0, #35	; 0x23
   35d3c:	f7f0 ff18 	bl	26b70 <bsd_os_errno_set>
   35d40:	6823      	ldr	r3, [r4, #0]
   35d42:	200e      	movs	r0, #14
   35d44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   35d48:	6023      	str	r3, [r4, #0]
   35d4a:	f04f 35ff 	mov.w	r5, #4294967295
   35d4e:	f7f0 ff0f 	bl	26b70 <bsd_os_errno_set>
   35d52:	e746      	b.n	35be2 <gnss_interface_getopt+0x5e>
   35d54:	200e      	movs	r0, #14
   35d56:	f7f0 ff0b 	bl	26b70 <bsd_os_errno_set>
   35d5a:	f04f 35ff 	mov.w	r5, #4294967295
   35d5e:	e740      	b.n	35be2 <gnss_interface_getopt+0x5e>
   35d60:	202a      	movs	r0, #42	; 0x2a
   35d62:	f7f0 ff05 	bl	26b70 <bsd_os_errno_set>
   35d66:	f04f 35ff 	mov.w	r5, #4294967295
   35d6a:	e73a      	b.n	35be2 <gnss_interface_getopt+0x5e>
   35d6c:	2009      	movs	r0, #9
   35d6e:	f7f0 feff 	bl	26b70 <bsd_os_errno_set>
   35d72:	f04f 35ff 	mov.w	r5, #4294967295
   35d76:	e734      	b.n	35be2 <gnss_interface_getopt+0x5e>
   35d78:	2005      	movs	r0, #5
   35d7a:	f7f0 fef9 	bl	26b70 <bsd_os_errno_set>
   35d7e:	f04f 35ff 	mov.w	r5, #4294967295
   35d82:	e72e      	b.n	35be2 <gnss_interface_getopt+0x5e>
   35d84:	2073      	movs	r0, #115	; 0x73
   35d86:	f7f0 fef3 	bl	26b70 <bsd_os_errno_set>
   35d8a:	f04f 35ff 	mov.w	r5, #4294967295
   35d8e:	e728      	b.n	35be2 <gnss_interface_getopt+0x5e>
   35d90:	2002518c 	.word	0x2002518c
   35d94:	49765443 	.word	0x49765443
   35d98:	2003156c 	.word	0x2003156c
   35d9c:	2002949a 	.word	0x2002949a
   35da0:	20025190 	.word	0x20025190

00035da4 <gnss_interface_init>:
   35da4:	2100      	movs	r1, #0
   35da6:	b538      	push	{r3, r4, r5, lr}
   35da8:	4c09      	ldr	r4, [pc, #36]	; (35dd0 <gnss_interface_init+0x2c>)
   35daa:	4d0a      	ldr	r5, [pc, #40]	; (35dd4 <gnss_interface_init+0x30>)
   35dac:	6822      	ldr	r2, [r4, #0]
   35dae:	480a      	ldr	r0, [pc, #40]	; (35dd8 <gnss_interface_init+0x34>)
   35db0:	4b0a      	ldr	r3, [pc, #40]	; (35ddc <gnss_interface_init+0x38>)
   35db2:	402a      	ands	r2, r5
   35db4:	6022      	str	r2, [r4, #0]
   35db6:	8001      	strh	r1, [r0, #0]
   35db8:	6019      	str	r1, [r3, #0]
   35dba:	f000 f9b7 	bl	3612c <rpc_gnss_client_init>
   35dbe:	b928      	cbnz	r0, 35dcc <gnss_interface_init+0x28>
   35dc0:	6823      	ldr	r3, [r4, #0]
   35dc2:	402b      	ands	r3, r5
   35dc4:	f043 0301 	orr.w	r3, r3, #1
   35dc8:	6023      	str	r3, [r4, #0]
   35dca:	bd38      	pop	{r3, r4, r5, pc}
   35dcc:	2003      	movs	r0, #3
   35dce:	bd38      	pop	{r3, r4, r5, pc}
   35dd0:	2002518c 	.word	0x2002518c
   35dd4:	ffff0000 	.word	0xffff0000
   35dd8:	2002949a 	.word	0x2002949a
   35ddc:	20025190 	.word	0x20025190

00035de0 <gnss_interface_open>:
   35de0:	2801      	cmp	r0, #1
   35de2:	b510      	push	{r4, lr}
   35de4:	d120      	bne.n	35e28 <gnss_interface_open+0x48>
   35de6:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   35dea:	d11d      	bne.n	35e28 <gnss_interface_open+0x48>
   35dec:	2902      	cmp	r1, #2
   35dee:	d11b      	bne.n	35e28 <gnss_interface_open+0x48>
   35df0:	4c13      	ldr	r4, [pc, #76]	; (35e40 <gnss_interface_open+0x60>)
   35df2:	6823      	ldr	r3, [r4, #0]
   35df4:	b29b      	uxth	r3, r3
   35df6:	2b01      	cmp	r3, #1
   35df8:	d11c      	bne.n	35e34 <gnss_interface_open+0x54>
   35dfa:	6823      	ldr	r3, [r4, #0]
   35dfc:	4608      	mov	r0, r1
   35dfe:	0c1b      	lsrs	r3, r3, #16
   35e00:	041b      	lsls	r3, r3, #16
   35e02:	f043 0302 	orr.w	r3, r3, #2
   35e06:	2200      	movs	r2, #0
   35e08:	490e      	ldr	r1, [pc, #56]	; (35e44 <gnss_interface_open+0x64>)
   35e0a:	6023      	str	r3, [r4, #0]
   35e0c:	f000 faac 	bl	36368 <packet_handler_create>
   35e10:	4a0d      	ldr	r2, [pc, #52]	; (35e48 <gnss_interface_open+0x68>)
   35e12:	6010      	str	r0, [r2, #0]
   35e14:	b170      	cbz	r0, 35e34 <gnss_interface_open+0x54>
   35e16:	6823      	ldr	r3, [r4, #0]
   35e18:	6802      	ldr	r2, [r0, #0]
   35e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   35e1e:	6812      	ldr	r2, [r2, #0]
   35e20:	6023      	str	r3, [r4, #0]
   35e22:	4790      	blx	r2
   35e24:	4809      	ldr	r0, [pc, #36]	; (35e4c <gnss_interface_open+0x6c>)
   35e26:	bd10      	pop	{r4, pc}
   35e28:	2016      	movs	r0, #22
   35e2a:	f7f0 fea1 	bl	26b70 <bsd_os_errno_set>
   35e2e:	f04f 30ff 	mov.w	r0, #4294967295
   35e32:	bd10      	pop	{r4, pc}
   35e34:	200e      	movs	r0, #14
   35e36:	f7f0 fe9b 	bl	26b70 <bsd_os_errno_set>
   35e3a:	f04f 30ff 	mov.w	r0, #4294967295
   35e3e:	bd10      	pop	{r4, pc}
   35e40:	2002518c 	.word	0x2002518c
   35e44:	0003513d 	.word	0x0003513d
   35e48:	20025194 	.word	0x20025194
   35e4c:	49765443 	.word	0x49765443

00035e50 <gnss_interface_close>:
   35e50:	b530      	push	{r4, r5, lr}
   35e52:	4b13      	ldr	r3, [pc, #76]	; (35ea0 <gnss_interface_close+0x50>)
   35e54:	b083      	sub	sp, #12
   35e56:	4298      	cmp	r0, r3
   35e58:	d11c      	bne.n	35e94 <gnss_interface_close+0x44>
   35e5a:	4c12      	ldr	r4, [pc, #72]	; (35ea4 <gnss_interface_close+0x54>)
   35e5c:	6823      	ldr	r3, [r4, #0]
   35e5e:	b29b      	uxth	r3, r3
   35e60:	2b04      	cmp	r3, #4
   35e62:	d00f      	beq.n	35e84 <gnss_interface_close+0x34>
   35e64:	4d10      	ldr	r5, [pc, #64]	; (35ea8 <gnss_interface_close+0x58>)
   35e66:	6828      	ldr	r0, [r5, #0]
   35e68:	b118      	cbz	r0, 35e72 <gnss_interface_close+0x22>
   35e6a:	f000 fa9d 	bl	363a8 <packet_handler_delete>
   35e6e:	2300      	movs	r3, #0
   35e70:	602b      	str	r3, [r5, #0]
   35e72:	2000      	movs	r0, #0
   35e74:	6823      	ldr	r3, [r4, #0]
   35e76:	0c1b      	lsrs	r3, r3, #16
   35e78:	041b      	lsls	r3, r3, #16
   35e7a:	f043 0301 	orr.w	r3, r3, #1
   35e7e:	6023      	str	r3, [r4, #0]
   35e80:	b003      	add	sp, #12
   35e82:	bd30      	pop	{r4, r5, pc}
   35e84:	2300      	movs	r3, #0
   35e86:	2208      	movs	r2, #8
   35e88:	9300      	str	r3, [sp, #0]
   35e8a:	f44f 7101 	mov.w	r1, #516	; 0x204
   35e8e:	f7fc fe8b 	bl	32ba8 <nrf_setsockopt>
   35e92:	e7e7      	b.n	35e64 <gnss_interface_close+0x14>
   35e94:	2009      	movs	r0, #9
   35e96:	f7f0 fe6b 	bl	26b70 <bsd_os_errno_set>
   35e9a:	f04f 30ff 	mov.w	r0, #4294967295
   35e9e:	e7ef      	b.n	35e80 <gnss_interface_close+0x30>
   35ea0:	49765443 	.word	0x49765443
   35ea4:	2002518c 	.word	0x2002518c
   35ea8:	20025194 	.word	0x20025194

00035eac <rpc_gnss_serialize_utc>:
   35eac:	4603      	mov	r3, r0
   35eae:	b1d8      	cbz	r0, 35ee8 <rpc_gnss_serialize_utc+0x3c>
   35eb0:	b1d1      	cbz	r1, 35ee8 <rpc_gnss_serialize_utc+0x3c>
   35eb2:	2000      	movs	r0, #0
   35eb4:	2201      	movs	r2, #1
   35eb6:	7048      	strb	r0, [r1, #1]
   35eb8:	700a      	strb	r2, [r1, #0]
   35eba:	685a      	ldr	r2, [r3, #4]
   35ebc:	2010      	movs	r0, #16
   35ebe:	f8c1 2006 	str.w	r2, [r1, #6]
   35ec2:	681a      	ldr	r2, [r3, #0]
   35ec4:	f8c1 2002 	str.w	r2, [r1, #2]
   35ec8:	f993 200a 	ldrsb.w	r2, [r3, #10]
   35ecc:	730a      	strb	r2, [r1, #12]
   35ece:	f993 200d 	ldrsb.w	r2, [r3, #13]
   35ed2:	73ca      	strb	r2, [r1, #15]
   35ed4:	f993 200c 	ldrsb.w	r2, [r3, #12]
   35ed8:	738a      	strb	r2, [r1, #14]
   35eda:	7a1a      	ldrb	r2, [r3, #8]
   35edc:	728a      	strb	r2, [r1, #10]
   35ede:	7ada      	ldrb	r2, [r3, #11]
   35ee0:	734a      	strb	r2, [r1, #13]
   35ee2:	7a5b      	ldrb	r3, [r3, #9]
   35ee4:	72cb      	strb	r3, [r1, #11]
   35ee6:	4770      	bx	lr
   35ee8:	f04f 30ff 	mov.w	r0, #4294967295
   35eec:	4770      	bx	lr
   35eee:	bf00      	nop

00035ef0 <rpc_gnss_serialize_ephe>:
   35ef0:	4603      	mov	r3, r0
   35ef2:	2800      	cmp	r0, #0
   35ef4:	d04b      	beq.n	35f8e <rpc_gnss_serialize_ephe+0x9e>
   35ef6:	2900      	cmp	r1, #0
   35ef8:	d049      	beq.n	35f8e <rpc_gnss_serialize_ephe+0x9e>
   35efa:	2000      	movs	r0, #0
   35efc:	2202      	movs	r2, #2
   35efe:	7048      	strb	r0, [r1, #1]
   35f00:	700a      	strb	r2, [r1, #0]
   35f02:	68da      	ldr	r2, [r3, #12]
   35f04:	2040      	movs	r0, #64	; 0x40
   35f06:	f8c1 200b 	str.w	r2, [r1, #11]
   35f0a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   35f0e:	f8a1 2009 	strh.w	r2, [r1, #9]
   35f12:	f993 2006 	ldrsb.w	r2, [r3, #6]
   35f16:	720a      	strb	r2, [r1, #8]
   35f18:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   35f1c:	878a      	strh	r2, [r1, #60]	; 0x3c
   35f1e:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   35f22:	86ca      	strh	r2, [r1, #54]	; 0x36
   35f24:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   35f28:	874a      	strh	r2, [r1, #58]	; 0x3a
   35f2a:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   35f2e:	868a      	strh	r2, [r1, #52]	; 0x34
   35f30:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   35f34:	87ca      	strh	r2, [r1, #62]	; 0x3e
   35f36:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   35f3a:	870a      	strh	r2, [r1, #56]	; 0x38
   35f3c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   35f40:	830a      	strh	r2, [r1, #24]
   35f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   35f44:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   35f48:	7c9a      	ldrb	r2, [r3, #18]
   35f4a:	744a      	strb	r2, [r1, #17]
   35f4c:	785a      	ldrb	r2, [r3, #1]
   35f4e:	70ca      	strb	r2, [r1, #3]
   35f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   35f52:	62ca      	str	r2, [r1, #44]	; 0x2c
   35f54:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   35f58:	84ca      	strh	r2, [r1, #38]	; 0x26
   35f5a:	885a      	ldrh	r2, [r3, #2]
   35f5c:	808a      	strh	r2, [r1, #4]
   35f5e:	6a1a      	ldr	r2, [r3, #32]
   35f60:	f8c1 201a 	str.w	r2, [r1, #26]
   35f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   35f66:	630a      	str	r2, [r1, #48]	; 0x30
   35f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   35f6a:	f8c1 201e 	str.w	r2, [r1, #30]
   35f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   35f70:	628a      	str	r2, [r1, #40]	; 0x28
   35f72:	781a      	ldrb	r2, [r3, #0]
   35f74:	708a      	strb	r2, [r1, #2]
   35f76:	f993 2010 	ldrsb.w	r2, [r3, #16]
   35f7a:	73ca      	strb	r2, [r1, #15]
   35f7c:	889a      	ldrh	r2, [r3, #4]
   35f7e:	80ca      	strh	r2, [r1, #6]
   35f80:	8a9a      	ldrh	r2, [r3, #20]
   35f82:	824a      	strh	r2, [r1, #18]
   35f84:	7c5a      	ldrb	r2, [r3, #17]
   35f86:	740a      	strb	r2, [r1, #16]
   35f88:	699b      	ldr	r3, [r3, #24]
   35f8a:	614b      	str	r3, [r1, #20]
   35f8c:	4770      	bx	lr
   35f8e:	f04f 30ff 	mov.w	r0, #4294967295
   35f92:	4770      	bx	lr

00035f94 <rpc_gnss_serialize_alm>:
   35f94:	4603      	mov	r3, r0
   35f96:	b360      	cbz	r0, 35ff2 <rpc_gnss_serialize_alm+0x5e>
   35f98:	b359      	cbz	r1, 35ff2 <rpc_gnss_serialize_alm+0x5e>
   35f9a:	2000      	movs	r0, #0
   35f9c:	2203      	movs	r2, #3
   35f9e:	7048      	strb	r0, [r1, #1]
   35fa0:	700a      	strb	r2, [r1, #0]
   35fa2:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   35fa6:	2021      	movs	r0, #33	; 0x21
   35fa8:	f8a1 201d 	strh.w	r2, [r1, #29]
   35fac:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   35fb0:	f8a1 201f 	strh.w	r2, [r1, #31]
   35fb4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   35fb8:	810a      	strh	r2, [r1, #8]
   35fba:	889a      	ldrh	r2, [r3, #4]
   35fbc:	80ca      	strh	r2, [r1, #6]
   35fbe:	78da      	ldrb	r2, [r3, #3]
   35fc0:	714a      	strb	r2, [r1, #5]
   35fc2:	699a      	ldr	r2, [r3, #24]
   35fc4:	f8c1 2019 	str.w	r2, [r1, #25]
   35fc8:	691a      	ldr	r2, [r3, #16]
   35fca:	f8c1 2011 	str.w	r2, [r1, #17]
   35fce:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   35fd2:	814a      	strh	r2, [r1, #10]
   35fd4:	68da      	ldr	r2, [r3, #12]
   35fd6:	f8c1 200d 	str.w	r2, [r1, #13]
   35fda:	7a9a      	ldrb	r2, [r3, #10]
   35fdc:	730a      	strb	r2, [r1, #12]
   35fde:	781a      	ldrb	r2, [r3, #0]
   35fe0:	708a      	strb	r2, [r1, #2]
   35fe2:	789a      	ldrb	r2, [r3, #2]
   35fe4:	710a      	strb	r2, [r1, #4]
   35fe6:	695a      	ldr	r2, [r3, #20]
   35fe8:	f8c1 2015 	str.w	r2, [r1, #21]
   35fec:	785b      	ldrb	r3, [r3, #1]
   35fee:	70cb      	strb	r3, [r1, #3]
   35ff0:	4770      	bx	lr
   35ff2:	f04f 30ff 	mov.w	r0, #4294967295
   35ff6:	4770      	bx	lr

00035ff8 <rpc_gnss_serialize_klob>:
   35ff8:	4603      	mov	r3, r0
   35ffa:	b1f0      	cbz	r0, 3603a <rpc_gnss_serialize_klob+0x42>
   35ffc:	b1e9      	cbz	r1, 3603a <rpc_gnss_serialize_klob+0x42>
   35ffe:	2000      	movs	r0, #0
   36000:	2204      	movs	r2, #4
   36002:	7048      	strb	r0, [r1, #1]
   36004:	700a      	strb	r2, [r1, #0]
   36006:	f993 2000 	ldrsb.w	r2, [r3]
   3600a:	200a      	movs	r0, #10
   3600c:	708a      	strb	r2, [r1, #2]
   3600e:	f993 2001 	ldrsb.w	r2, [r3, #1]
   36012:	70ca      	strb	r2, [r1, #3]
   36014:	f993 2002 	ldrsb.w	r2, [r3, #2]
   36018:	710a      	strb	r2, [r1, #4]
   3601a:	f993 2003 	ldrsb.w	r2, [r3, #3]
   3601e:	714a      	strb	r2, [r1, #5]
   36020:	f993 2004 	ldrsb.w	r2, [r3, #4]
   36024:	718a      	strb	r2, [r1, #6]
   36026:	f993 2005 	ldrsb.w	r2, [r3, #5]
   3602a:	71ca      	strb	r2, [r1, #7]
   3602c:	f993 2006 	ldrsb.w	r2, [r3, #6]
   36030:	720a      	strb	r2, [r1, #8]
   36032:	f993 3007 	ldrsb.w	r3, [r3, #7]
   36036:	724b      	strb	r3, [r1, #9]
   36038:	4770      	bx	lr
   3603a:	f04f 30ff 	mov.w	r0, #4294967295
   3603e:	4770      	bx	lr

00036040 <rpc_gnss_serialize_nequick>:
   36040:	4603      	mov	r3, r0
   36042:	b198      	cbz	r0, 3606c <rpc_gnss_serialize_nequick+0x2c>
   36044:	b191      	cbz	r1, 3606c <rpc_gnss_serialize_nequick+0x2c>
   36046:	2000      	movs	r0, #0
   36048:	2205      	movs	r2, #5
   3604a:	7048      	strb	r0, [r1, #1]
   3604c:	700a      	strb	r2, [r1, #0]
   3604e:	f9b3 2000 	ldrsh.w	r2, [r3]
   36052:	200a      	movs	r0, #10
   36054:	804a      	strh	r2, [r1, #2]
   36056:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   3605a:	808a      	strh	r2, [r1, #4]
   3605c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   36060:	80ca      	strh	r2, [r1, #6]
   36062:	799a      	ldrb	r2, [r3, #6]
   36064:	720a      	strb	r2, [r1, #8]
   36066:	79db      	ldrb	r3, [r3, #7]
   36068:	724b      	strb	r3, [r1, #9]
   3606a:	4770      	bx	lr
   3606c:	f04f 30ff 	mov.w	r0, #4294967295
   36070:	4770      	bx	lr
   36072:	bf00      	nop

00036074 <rpc_gnss_serialize_time_and_sv_tow>:
   36074:	b310      	cbz	r0, 360bc <rpc_gnss_serialize_time_and_sv_tow+0x48>
   36076:	b309      	cbz	r1, 360bc <rpc_gnss_serialize_time_and_sv_tow+0x48>
   36078:	b470      	push	{r4, r5, r6}
   3607a:	2500      	movs	r5, #0
   3607c:	2606      	movs	r6, #6
   3607e:	460c      	mov	r4, r1
   36080:	704d      	strb	r5, [r1, #1]
   36082:	700e      	strb	r6, [r1, #0]
   36084:	462b      	mov	r3, r5
   36086:	8805      	ldrh	r5, [r0, #0]
   36088:	4602      	mov	r2, r0
   3608a:	804d      	strh	r5, [r1, #2]
   3608c:	68c5      	ldr	r5, [r0, #12]
   3608e:	f8c1 500a 	str.w	r5, [r1, #10]
   36092:	8905      	ldrh	r5, [r0, #8]
   36094:	810d      	strh	r5, [r1, #8]
   36096:	6840      	ldr	r0, [r0, #4]
   36098:	6048      	str	r0, [r1, #4]
   3609a:	8a15      	ldrh	r5, [r2, #16]
   3609c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   360a0:	4408      	add	r0, r1
   360a2:	81c5      	strh	r5, [r0, #14]
   360a4:	7c90      	ldrb	r0, [r2, #18]
   360a6:	3301      	adds	r3, #1
   360a8:	2b20      	cmp	r3, #32
   360aa:	7420      	strb	r0, [r4, #16]
   360ac:	f102 0204 	add.w	r2, r2, #4
   360b0:	f104 0403 	add.w	r4, r4, #3
   360b4:	d1f1      	bne.n	3609a <rpc_gnss_serialize_time_and_sv_tow+0x26>
   360b6:	206e      	movs	r0, #110	; 0x6e
   360b8:	bc70      	pop	{r4, r5, r6}
   360ba:	4770      	bx	lr
   360bc:	f04f 30ff 	mov.w	r0, #4294967295
   360c0:	4770      	bx	lr
   360c2:	bf00      	nop

000360c4 <rpc_gnss_serialize_location>:
   360c4:	4603      	mov	r3, r0
   360c6:	b1c8      	cbz	r0, 360fc <rpc_gnss_serialize_location+0x38>
   360c8:	b1c1      	cbz	r1, 360fc <rpc_gnss_serialize_location+0x38>
   360ca:	2000      	movs	r0, #0
   360cc:	2207      	movs	r2, #7
   360ce:	7048      	strb	r0, [r1, #1]
   360d0:	700a      	strb	r2, [r1, #0]
   360d2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   360d6:	2011      	movs	r0, #17
   360d8:	814a      	strh	r2, [r1, #10]
   360da:	7b9a      	ldrb	r2, [r3, #14]
   360dc:	740a      	strb	r2, [r1, #16]
   360de:	681a      	ldr	r2, [r3, #0]
   360e0:	f8c1 2002 	str.w	r2, [r1, #2]
   360e4:	685a      	ldr	r2, [r3, #4]
   360e6:	f8c1 2006 	str.w	r2, [r1, #6]
   360ea:	7b1a      	ldrb	r2, [r3, #12]
   360ec:	738a      	strb	r2, [r1, #14]
   360ee:	7b5a      	ldrb	r2, [r3, #13]
   360f0:	73ca      	strb	r2, [r1, #15]
   360f2:	7a9a      	ldrb	r2, [r3, #10]
   360f4:	730a      	strb	r2, [r1, #12]
   360f6:	7adb      	ldrb	r3, [r3, #11]
   360f8:	734b      	strb	r3, [r1, #13]
   360fa:	4770      	bx	lr
   360fc:	f04f 30ff 	mov.w	r0, #4294967295
   36100:	4770      	bx	lr
   36102:	bf00      	nop

00036104 <rpc_gnss_serialize_integrity>:
   36104:	b148      	cbz	r0, 3611a <rpc_gnss_serialize_integrity+0x16>
   36106:	b141      	cbz	r1, 3611a <rpc_gnss_serialize_integrity+0x16>
   36108:	2200      	movs	r2, #0
   3610a:	2308      	movs	r3, #8
   3610c:	704a      	strb	r2, [r1, #1]
   3610e:	700b      	strb	r3, [r1, #0]
   36110:	6803      	ldr	r3, [r0, #0]
   36112:	2006      	movs	r0, #6
   36114:	f8c1 3002 	str.w	r3, [r1, #2]
   36118:	4770      	bx	lr
   3611a:	f04f 30ff 	mov.w	r0, #4294967295
   3611e:	4770      	bx	lr

00036120 <gnss_client_event_handler>:
   36120:	f850 1b08 	ldr.w	r1, [r0], #8
   36124:	0c09      	lsrs	r1, r1, #16
   36126:	f7ff b817 	b.w	35158 <rpc_gnss_event_handler>
   3612a:	bf00      	nop

0003612c <rpc_gnss_client_init>:
   3612c:	4801      	ldr	r0, [pc, #4]	; (36134 <rpc_gnss_client_init+0x8>)
   3612e:	f7fe bb79 	b.w	34824 <rpc_client_register>
   36132:	bf00      	nop
   36134:	00040fb0 	.word	0x00040fb0

00036138 <rpc_gnss_client_request_alloc>:
   36138:	2300      	movs	r3, #0
   3613a:	b510      	push	{r4, lr}
   3613c:	b082      	sub	sp, #8
   3613e:	9301      	str	r3, [sp, #4]
   36140:	b158      	cbz	r0, 3615a <rpc_gnss_client_request_alloc+0x22>
   36142:	4604      	mov	r4, r0
   36144:	aa01      	add	r2, sp, #4
   36146:	2007      	movs	r0, #7
   36148:	f7fe fda4 	bl	34c94 <rpc_message_alloc>
   3614c:	b918      	cbnz	r0, 36156 <rpc_gnss_client_request_alloc+0x1e>
   3614e:	9b01      	ldr	r3, [sp, #4]
   36150:	b10b      	cbz	r3, 36156 <rpc_gnss_client_request_alloc+0x1e>
   36152:	3308      	adds	r3, #8
   36154:	6023      	str	r3, [r4, #0]
   36156:	b002      	add	sp, #8
   36158:	bd10      	pop	{r4, pc}
   3615a:	2007      	movs	r0, #7
   3615c:	b002      	add	sp, #8
   3615e:	bd10      	pop	{r4, pc}

00036160 <rpc_gnss_client_request_send>:
   36160:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   36164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   36168:	d10b      	bne.n	36182 <rpc_gnss_client_request_send+0x22>
   3616a:	b160      	cbz	r0, 36186 <rpc_gnss_client_request_send+0x26>
   3616c:	4603      	mov	r3, r0
   3616e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   36172:	2007      	movs	r0, #7
   36174:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   36178:	f843 1d08 	str.w	r1, [r3, #-8]!
   3617c:	4619      	mov	r1, r3
   3617e:	f7fe bd71 	b.w	34c64 <rpc_message_send>
   36182:	200f      	movs	r0, #15
   36184:	4770      	bx	lr
   36186:	2007      	movs	r0, #7
   36188:	4770      	bx	lr
   3618a:	bf00      	nop

0003618c <rpc_gnss_client_message_free>:
   3618c:	b120      	cbz	r0, 36198 <rpc_gnss_client_message_free+0xc>
   3618e:	f1a0 0108 	sub.w	r1, r0, #8
   36192:	2007      	movs	r0, #7
   36194:	f7fe bdb0 	b.w	34cf8 <rpc_message_free>
   36198:	2007      	movs	r0, #7
   3619a:	4770      	bx	lr

0003619c <rpc_gnss_client_data_free>:
   3619c:	b118      	cbz	r0, 361a6 <rpc_gnss_client_data_free+0xa>
   3619e:	4601      	mov	r1, r0
   361a0:	2007      	movs	r0, #7
   361a2:	f7fe bebb 	b.w	34f1c <rpc_message_data_free>
   361a6:	2007      	movs	r0, #7
   361a8:	4770      	bx	lr
   361aa:	bf00      	nop

000361ac <datagram_handler_init>:
   361ac:	b510      	push	{r4, lr}
   361ae:	4604      	mov	r4, r0
   361b0:	200c      	movs	r0, #12
   361b2:	f7f9 f813 	bl	2f1dc <nrf_malloc>
   361b6:	60e0      	str	r0, [r4, #12]
   361b8:	b118      	cbz	r0, 361c2 <datagram_handler_init+0x16>
   361ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   361be:	f7fc bbbd 	b.w	3293c <linked_list_init>
   361c2:	2004      	movs	r0, #4
   361c4:	bd10      	pop	{r4, pc}
   361c6:	bf00      	nop

000361c8 <datagram_handler_put>:
   361c8:	b570      	push	{r4, r5, r6, lr}
   361ca:	4606      	mov	r6, r0
   361cc:	2014      	movs	r0, #20
   361ce:	460d      	mov	r5, r1
   361d0:	f7f9 f804 	bl	2f1dc <nrf_malloc>
   361d4:	b178      	cbz	r0, 361f6 <datagram_handler_put+0x2e>
   361d6:	682b      	ldr	r3, [r5, #0]
   361d8:	4604      	mov	r4, r0
   361da:	6043      	str	r3, [r0, #4]
   361dc:	686b      	ldr	r3, [r5, #4]
   361de:	4601      	mov	r1, r0
   361e0:	6083      	str	r3, [r0, #8]
   361e2:	68eb      	ldr	r3, [r5, #12]
   361e4:	60c3      	str	r3, [r0, #12]
   361e6:	68ab      	ldr	r3, [r5, #8]
   361e8:	6103      	str	r3, [r0, #16]
   361ea:	68f0      	ldr	r0, [r6, #12]
   361ec:	f7fc fbb0 	bl	32950 <linked_list_push>
   361f0:	b920      	cbnz	r0, 361fc <datagram_handler_put+0x34>
   361f2:	6868      	ldr	r0, [r5, #4]
   361f4:	bd70      	pop	{r4, r5, r6, pc}
   361f6:	f04f 30ff 	mov.w	r0, #4294967295
   361fa:	bd70      	pop	{r4, r5, r6, pc}
   361fc:	4620      	mov	r0, r4
   361fe:	f7f8 fff7 	bl	2f1f0 <nrf_free>
   36202:	f04f 30ff 	mov.w	r0, #4294967295
   36206:	bd70      	pop	{r4, r5, r6, pc}

00036208 <datagram_handler_get>:
   36208:	b5f0      	push	{r4, r5, r6, r7, lr}
   3620a:	4606      	mov	r6, r0
   3620c:	b085      	sub	sp, #20
   3620e:	68c0      	ldr	r0, [r0, #12]
   36210:	460c      	mov	r4, r1
   36212:	4617      	mov	r7, r2
   36214:	f7fc fbbc 	bl	32990 <linked_list_peek>
   36218:	2800      	cmp	r0, #0
   3621a:	d037      	beq.n	3628c <datagram_handler_get+0x84>
   3621c:	6882      	ldr	r2, [r0, #8]
   3621e:	4605      	mov	r5, r0
   36220:	e9d4 0300 	ldrd	r0, r3, [r4]
   36224:	429a      	cmp	r2, r3
   36226:	bf28      	it	cs
   36228:	461a      	movcs	r2, r3
   3622a:	6062      	str	r2, [r4, #4]
   3622c:	b110      	cbz	r0, 36234 <datagram_handler_get+0x2c>
   3622e:	6869      	ldr	r1, [r5, #4]
   36230:	f008 fd4b 	bl	3ecca <memcpy>
   36234:	68a0      	ldr	r0, [r4, #8]
   36236:	b118      	cbz	r0, 36240 <datagram_handler_get+0x38>
   36238:	692b      	ldr	r3, [r5, #16]
   3623a:	b10b      	cbz	r3, 36240 <datagram_handler_get+0x38>
   3623c:	68ea      	ldr	r2, [r5, #12]
   3623e:	b9e2      	cbnz	r2, 3627a <datagram_handler_get+0x72>
   36240:	2300      	movs	r3, #0
   36242:	60e3      	str	r3, [r4, #12]
   36244:	073b      	lsls	r3, r7, #28
   36246:	d502      	bpl.n	3624e <datagram_handler_get+0x46>
   36248:	6860      	ldr	r0, [r4, #4]
   3624a:	b005      	add	sp, #20
   3624c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3624e:	68f0      	ldr	r0, [r6, #12]
   36250:	f7fc fb94 	bl	3297c <linked_list_pop>
   36254:	4605      	mov	r5, r0
   36256:	2800      	cmp	r0, #0
   36258:	d0f6      	beq.n	36248 <datagram_handler_get+0x40>
   3625a:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   3625e:	6902      	ldr	r2, [r0, #16]
   36260:	9300      	str	r3, [sp, #0]
   36262:	68c3      	ldr	r3, [r0, #12]
   36264:	e9cd 1201 	strd	r1, r2, [sp, #4]
   36268:	9303      	str	r3, [sp, #12]
   3626a:	4668      	mov	r0, sp
   3626c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   36270:	4798      	blx	r3
   36272:	4628      	mov	r0, r5
   36274:	f7f8 ffbc 	bl	2f1f0 <nrf_free>
   36278:	e7e6      	b.n	36248 <datagram_handler_get+0x40>
   3627a:	68e3      	ldr	r3, [r4, #12]
   3627c:	429a      	cmp	r2, r3
   3627e:	bf28      	it	cs
   36280:	461a      	movcs	r2, r3
   36282:	60e2      	str	r2, [r4, #12]
   36284:	6929      	ldr	r1, [r5, #16]
   36286:	f008 fd20 	bl	3ecca <memcpy>
   3628a:	e7db      	b.n	36244 <datagram_handler_get+0x3c>
   3628c:	f04f 30ff 	mov.w	r0, #4294967295
   36290:	e7db      	b.n	3624a <datagram_handler_get+0x42>
   36292:	bf00      	nop

00036294 <datagram_handler_available>:
   36294:	b508      	push	{r3, lr}
   36296:	68c0      	ldr	r0, [r0, #12]
   36298:	f7fc fb7a 	bl	32990 <linked_list_peek>
   3629c:	b108      	cbz	r0, 362a2 <datagram_handler_available+0xe>
   3629e:	6880      	ldr	r0, [r0, #8]
   362a0:	bd08      	pop	{r3, pc}
   362a2:	f04f 30ff 	mov.w	r0, #4294967295
   362a6:	bd08      	pop	{r3, pc}

000362a8 <datagram_handler_flush>:
   362a8:	b530      	push	{r4, r5, lr}
   362aa:	4605      	mov	r5, r0
   362ac:	68c0      	ldr	r0, [r0, #12]
   362ae:	b085      	sub	sp, #20
   362b0:	b9a8      	cbnz	r0, 362de <datagram_handler_flush+0x36>
   362b2:	e01a      	b.n	362ea <datagram_handler_flush+0x42>
   362b4:	68e8      	ldr	r0, [r5, #12]
   362b6:	f7fc fb61 	bl	3297c <linked_list_pop>
   362ba:	4604      	mov	r4, r0
   362bc:	b170      	cbz	r0, 362dc <datagram_handler_flush+0x34>
   362be:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   362c2:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   362c6:	e9cd 0100 	strd	r0, r1, [sp]
   362ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
   362ce:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   362d2:	4668      	mov	r0, sp
   362d4:	4798      	blx	r3
   362d6:	4620      	mov	r0, r4
   362d8:	f7f8 ff8a 	bl	2f1f0 <nrf_free>
   362dc:	68e8      	ldr	r0, [r5, #12]
   362de:	f7fc fb5d 	bl	3299c <linked_list_size_get>
   362e2:	2800      	cmp	r0, #0
   362e4:	d1e6      	bne.n	362b4 <datagram_handler_flush+0xc>
   362e6:	b005      	add	sp, #20
   362e8:	bd30      	pop	{r4, r5, pc}
   362ea:	2008      	movs	r0, #8
   362ec:	b005      	add	sp, #20
   362ee:	bd30      	pop	{r4, r5, pc}

000362f0 <datagram_handler_free>:
   362f0:	b530      	push	{r4, r5, lr}
   362f2:	4605      	mov	r5, r0
   362f4:	68c0      	ldr	r0, [r0, #12]
   362f6:	b085      	sub	sp, #20
   362f8:	b9a0      	cbnz	r0, 36324 <datagram_handler_free+0x34>
   362fa:	e01c      	b.n	36336 <datagram_handler_free+0x46>
   362fc:	f7fc fb3e 	bl	3297c <linked_list_pop>
   36300:	4604      	mov	r4, r0
   36302:	b170      	cbz	r0, 36322 <datagram_handler_free+0x32>
   36304:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   36308:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3630c:	e9cd 0100 	strd	r0, r1, [sp]
   36310:	e9cd 2302 	strd	r2, r3, [sp, #8]
   36314:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   36318:	4668      	mov	r0, sp
   3631a:	4798      	blx	r3
   3631c:	4620      	mov	r0, r4
   3631e:	f7f8 ff67 	bl	2f1f0 <nrf_free>
   36322:	68e8      	ldr	r0, [r5, #12]
   36324:	f7fc fb3a 	bl	3299c <linked_list_size_get>
   36328:	4604      	mov	r4, r0
   3632a:	68e8      	ldr	r0, [r5, #12]
   3632c:	2c00      	cmp	r4, #0
   3632e:	d1e5      	bne.n	362fc <datagram_handler_free+0xc>
   36330:	f7f8 ff5e 	bl	2f1f0 <nrf_free>
   36334:	60ec      	str	r4, [r5, #12]
   36336:	b005      	add	sp, #20
   36338:	bd30      	pop	{r4, r5, pc}
   3633a:	bf00      	nop

0003633c <null_handler_init>:
   3633c:	2000      	movs	r0, #0
   3633e:	4770      	bx	lr

00036340 <null_handler_put>:
   36340:	b510      	push	{r4, lr}
   36342:	460c      	mov	r4, r1
   36344:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   36348:	4620      	mov	r0, r4
   3634a:	4798      	blx	r3
   3634c:	6860      	ldr	r0, [r4, #4]
   3634e:	bd10      	pop	{r4, pc}

00036350 <null_handler_get>:
   36350:	f04f 30ff 	mov.w	r0, #4294967295
   36354:	4770      	bx	lr
   36356:	bf00      	nop

00036358 <null_handler_available>:
   36358:	f04f 30ff 	mov.w	r0, #4294967295
   3635c:	4770      	bx	lr
   3635e:	bf00      	nop

00036360 <null_handler_flush>:
   36360:	2000      	movs	r0, #0
   36362:	4770      	bx	lr

00036364 <null_handler_free>:
   36364:	4770      	bx	lr
   36366:	bf00      	nop

00036368 <packet_handler_create>:
   36368:	2801      	cmp	r0, #1
   3636a:	b538      	push	{r3, r4, r5, lr}
   3636c:	460d      	mov	r5, r1
   3636e:	4614      	mov	r4, r2
   36370:	d00d      	beq.n	3638e <packet_handler_create+0x26>
   36372:	db11      	blt.n	36398 <packet_handler_create+0x30>
   36374:	2803      	cmp	r0, #3
   36376:	dc0f      	bgt.n	36398 <packet_handler_create+0x30>
   36378:	2010      	movs	r0, #16
   3637a:	f7f8 ff2f 	bl	2f1dc <nrf_malloc>
   3637e:	2218      	movs	r2, #24
   36380:	b120      	cbz	r0, 3638c <packet_handler_create+0x24>
   36382:	4b08      	ldr	r3, [pc, #32]	; (363a4 <packet_handler_create+0x3c>)
   36384:	6045      	str	r5, [r0, #4]
   36386:	4413      	add	r3, r2
   36388:	6084      	str	r4, [r0, #8]
   3638a:	6003      	str	r3, [r0, #0]
   3638c:	bd38      	pop	{r3, r4, r5, pc}
   3638e:	2014      	movs	r0, #20
   36390:	f7f8 ff24 	bl	2f1dc <nrf_malloc>
   36394:	2230      	movs	r2, #48	; 0x30
   36396:	e7f3      	b.n	36380 <packet_handler_create+0x18>
   36398:	200c      	movs	r0, #12
   3639a:	f7f8 ff1f 	bl	2f1dc <nrf_malloc>
   3639e:	2200      	movs	r2, #0
   363a0:	e7ee      	b.n	36380 <packet_handler_create+0x18>
   363a2:	bf00      	nop
   363a4:	00040fc0 	.word	0x00040fc0

000363a8 <packet_handler_delete>:
   363a8:	b510      	push	{r4, lr}
   363aa:	4604      	mov	r4, r0
   363ac:	6803      	ldr	r3, [r0, #0]
   363ae:	691b      	ldr	r3, [r3, #16]
   363b0:	4798      	blx	r3
   363b2:	6823      	ldr	r3, [r4, #0]
   363b4:	4620      	mov	r0, r4
   363b6:	695b      	ldr	r3, [r3, #20]
   363b8:	4798      	blx	r3
   363ba:	4620      	mov	r0, r4
   363bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   363c0:	f7f8 bf16 	b.w	2f1f0 <nrf_free>

000363c4 <stream_handler_init>:
   363c4:	b510      	push	{r4, lr}
   363c6:	4604      	mov	r4, r0
   363c8:	200c      	movs	r0, #12
   363ca:	f7f8 ff07 	bl	2f1dc <nrf_malloc>
   363ce:	60e0      	str	r0, [r4, #12]
   363d0:	b128      	cbz	r0, 363de <stream_handler_init+0x1a>
   363d2:	2300      	movs	r3, #0
   363d4:	6123      	str	r3, [r4, #16]
   363d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   363da:	f7fc baaf 	b.w	3293c <linked_list_init>
   363de:	2004      	movs	r0, #4
   363e0:	bd10      	pop	{r4, pc}
   363e2:	bf00      	nop

000363e4 <stream_handler_put>:
   363e4:	b570      	push	{r4, r5, r6, lr}
   363e6:	4606      	mov	r6, r0
   363e8:	2014      	movs	r0, #20
   363ea:	460d      	mov	r5, r1
   363ec:	f7f8 fef6 	bl	2f1dc <nrf_malloc>
   363f0:	b178      	cbz	r0, 36412 <stream_handler_put+0x2e>
   363f2:	682b      	ldr	r3, [r5, #0]
   363f4:	4604      	mov	r4, r0
   363f6:	6043      	str	r3, [r0, #4]
   363f8:	686b      	ldr	r3, [r5, #4]
   363fa:	4601      	mov	r1, r0
   363fc:	6083      	str	r3, [r0, #8]
   363fe:	68eb      	ldr	r3, [r5, #12]
   36400:	60c3      	str	r3, [r0, #12]
   36402:	68ab      	ldr	r3, [r5, #8]
   36404:	6103      	str	r3, [r0, #16]
   36406:	68f0      	ldr	r0, [r6, #12]
   36408:	f7fc faa2 	bl	32950 <linked_list_push>
   3640c:	b920      	cbnz	r0, 36418 <stream_handler_put+0x34>
   3640e:	6868      	ldr	r0, [r5, #4]
   36410:	bd70      	pop	{r4, r5, r6, pc}
   36412:	f04f 30ff 	mov.w	r0, #4294967295
   36416:	bd70      	pop	{r4, r5, r6, pc}
   36418:	4620      	mov	r0, r4
   3641a:	f7f8 fee9 	bl	2f1f0 <nrf_free>
   3641e:	f04f 30ff 	mov.w	r0, #4294967295
   36422:	bd70      	pop	{r4, r5, r6, pc}

00036424 <stream_handler_get>:
   36424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36428:	4682      	mov	sl, r0
   3642a:	b087      	sub	sp, #28
   3642c:	68c0      	ldr	r0, [r0, #12]
   3642e:	4689      	mov	r9, r1
   36430:	4693      	mov	fp, r2
   36432:	f7fc faad 	bl	32990 <linked_list_peek>
   36436:	2800      	cmp	r0, #0
   36438:	d072      	beq.n	36520 <stream_handler_get+0xfc>
   3643a:	4605      	mov	r5, r0
   3643c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   36440:	b120      	cbz	r0, 3644c <stream_handler_get+0x28>
   36442:	692b      	ldr	r3, [r5, #16]
   36444:	b113      	cbz	r3, 3644c <stream_handler_get+0x28>
   36446:	68ea      	ldr	r2, [r5, #12]
   36448:	2a00      	cmp	r2, #0
   3644a:	d15c      	bne.n	36506 <stream_handler_get+0xe2>
   3644c:	2300      	movs	r3, #0
   3644e:	f8c9 300c 	str.w	r3, [r9, #12]
   36452:	f8d9 2000 	ldr.w	r2, [r9]
   36456:	f8d9 8004 	ldr.w	r8, [r9, #4]
   3645a:	f8da 1010 	ldr.w	r1, [sl, #16]
   3645e:	9201      	str	r2, [sp, #4]
   36460:	f1b8 0f00 	cmp.w	r8, #0
   36464:	d05a      	beq.n	3651c <stream_handler_get+0xf8>
   36466:	f00b 0308 	and.w	r3, fp, #8
   3646a:	2400      	movs	r4, #0
   3646c:	9300      	str	r3, [sp, #0]
   3646e:	e010      	b.n	36492 <stream_handler_get+0x6e>
   36470:	f8da 3010 	ldr.w	r3, [sl, #16]
   36474:	443b      	add	r3, r7
   36476:	f8ca 3010 	str.w	r3, [sl, #16]
   3647a:	4628      	mov	r0, r5
   3647c:	f7fc fa90 	bl	329a0 <linked_list_get_next>
   36480:	443c      	add	r4, r7
   36482:	4605      	mov	r5, r0
   36484:	2800      	cmp	r0, #0
   36486:	d038      	beq.n	364fa <stream_handler_get+0xd6>
   36488:	45a0      	cmp	r8, r4
   3648a:	d936      	bls.n	364fa <stream_handler_get+0xd6>
   3648c:	2100      	movs	r1, #0
   3648e:	f8d9 2000 	ldr.w	r2, [r9]
   36492:	68ae      	ldr	r6, [r5, #8]
   36494:	eba8 0b04 	sub.w	fp, r8, r4
   36498:	1a76      	subs	r6, r6, r1
   3649a:	455e      	cmp	r6, fp
   3649c:	4637      	mov	r7, r6
   3649e:	bf28      	it	cs
   364a0:	465f      	movcs	r7, fp
   364a2:	b132      	cbz	r2, 364b2 <stream_handler_get+0x8e>
   364a4:	6868      	ldr	r0, [r5, #4]
   364a6:	9b01      	ldr	r3, [sp, #4]
   364a8:	4401      	add	r1, r0
   364aa:	463a      	mov	r2, r7
   364ac:	1918      	adds	r0, r3, r4
   364ae:	f008 fc0c 	bl	3ecca <memcpy>
   364b2:	9b00      	ldr	r3, [sp, #0]
   364b4:	2b00      	cmp	r3, #0
   364b6:	d1e0      	bne.n	3647a <stream_handler_get+0x56>
   364b8:	455e      	cmp	r6, fp
   364ba:	d8d9      	bhi.n	36470 <stream_handler_get+0x4c>
   364bc:	f8da 000c 	ldr.w	r0, [sl, #12]
   364c0:	f7fc fa5c 	bl	3297c <linked_list_pop>
   364c4:	4606      	mov	r6, r0
   364c6:	b170      	cbz	r0, 364e6 <stream_handler_get+0xc2>
   364c8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   364cc:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   364d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   364d4:	e9cd 1004 	strd	r1, r0, [sp, #16]
   364d8:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   364dc:	a802      	add	r0, sp, #8
   364de:	4798      	blx	r3
   364e0:	4630      	mov	r0, r6
   364e2:	f7f8 fe85 	bl	2f1f0 <nrf_free>
   364e6:	2300      	movs	r3, #0
   364e8:	4628      	mov	r0, r5
   364ea:	f8ca 3010 	str.w	r3, [sl, #16]
   364ee:	f7fc fa57 	bl	329a0 <linked_list_get_next>
   364f2:	443c      	add	r4, r7
   364f4:	4605      	mov	r5, r0
   364f6:	2800      	cmp	r0, #0
   364f8:	d1c6      	bne.n	36488 <stream_handler_get+0x64>
   364fa:	4620      	mov	r0, r4
   364fc:	f8c9 4004 	str.w	r4, [r9, #4]
   36500:	b007      	add	sp, #28
   36502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36506:	f8d9 300c 	ldr.w	r3, [r9, #12]
   3650a:	429a      	cmp	r2, r3
   3650c:	bf28      	it	cs
   3650e:	461a      	movcs	r2, r3
   36510:	f8c9 200c 	str.w	r2, [r9, #12]
   36514:	6929      	ldr	r1, [r5, #16]
   36516:	f008 fbd8 	bl	3ecca <memcpy>
   3651a:	e79a      	b.n	36452 <stream_handler_get+0x2e>
   3651c:	4644      	mov	r4, r8
   3651e:	e7ec      	b.n	364fa <stream_handler_get+0xd6>
   36520:	f04f 30ff 	mov.w	r0, #4294967295
   36524:	e7ec      	b.n	36500 <stream_handler_get+0xdc>
   36526:	bf00      	nop

00036528 <stream_handler_available>:
   36528:	b510      	push	{r4, lr}
   3652a:	4604      	mov	r4, r0
   3652c:	68c0      	ldr	r0, [r0, #12]
   3652e:	f7fc fa2f 	bl	32990 <linked_list_peek>
   36532:	b150      	cbz	r0, 3654a <stream_handler_available+0x22>
   36534:	6924      	ldr	r4, [r4, #16]
   36536:	4264      	negs	r4, r4
   36538:	6883      	ldr	r3, [r0, #8]
   3653a:	441c      	add	r4, r3
   3653c:	f7fc fa30 	bl	329a0 <linked_list_get_next>
   36540:	2800      	cmp	r0, #0
   36542:	d1f9      	bne.n	36538 <stream_handler_available+0x10>
   36544:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   36548:	bd10      	pop	{r4, pc}
   3654a:	f04f 30ff 	mov.w	r0, #4294967295
   3654e:	bd10      	pop	{r4, pc}

00036550 <stream_handler_flush>:
   36550:	b530      	push	{r4, r5, lr}
   36552:	4605      	mov	r5, r0
   36554:	68c0      	ldr	r0, [r0, #12]
   36556:	b085      	sub	sp, #20
   36558:	b9a8      	cbnz	r0, 36586 <stream_handler_flush+0x36>
   3655a:	e01a      	b.n	36592 <stream_handler_flush+0x42>
   3655c:	68e8      	ldr	r0, [r5, #12]
   3655e:	f7fc fa0d 	bl	3297c <linked_list_pop>
   36562:	4604      	mov	r4, r0
   36564:	b170      	cbz	r0, 36584 <stream_handler_flush+0x34>
   36566:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   3656a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3656e:	e9cd 0100 	strd	r0, r1, [sp]
   36572:	e9cd 2302 	strd	r2, r3, [sp, #8]
   36576:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3657a:	4668      	mov	r0, sp
   3657c:	4798      	blx	r3
   3657e:	4620      	mov	r0, r4
   36580:	f7f8 fe36 	bl	2f1f0 <nrf_free>
   36584:	68e8      	ldr	r0, [r5, #12]
   36586:	f7fc fa09 	bl	3299c <linked_list_size_get>
   3658a:	2800      	cmp	r0, #0
   3658c:	d1e6      	bne.n	3655c <stream_handler_flush+0xc>
   3658e:	b005      	add	sp, #20
   36590:	bd30      	pop	{r4, r5, pc}
   36592:	2008      	movs	r0, #8
   36594:	b005      	add	sp, #20
   36596:	bd30      	pop	{r4, r5, pc}

00036598 <stream_handler_free>:
   36598:	b530      	push	{r4, r5, lr}
   3659a:	4605      	mov	r5, r0
   3659c:	68c0      	ldr	r0, [r0, #12]
   3659e:	b085      	sub	sp, #20
   365a0:	b9a0      	cbnz	r0, 365cc <stream_handler_free+0x34>
   365a2:	e01c      	b.n	365de <stream_handler_free+0x46>
   365a4:	f7fc f9ea 	bl	3297c <linked_list_pop>
   365a8:	4604      	mov	r4, r0
   365aa:	b170      	cbz	r0, 365ca <stream_handler_free+0x32>
   365ac:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   365b0:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   365b4:	e9cd 0100 	strd	r0, r1, [sp]
   365b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   365bc:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   365c0:	4668      	mov	r0, sp
   365c2:	4798      	blx	r3
   365c4:	4620      	mov	r0, r4
   365c6:	f7f8 fe13 	bl	2f1f0 <nrf_free>
   365ca:	68e8      	ldr	r0, [r5, #12]
   365cc:	f7fc f9e6 	bl	3299c <linked_list_size_get>
   365d0:	4604      	mov	r4, r0
   365d2:	68e8      	ldr	r0, [r5, #12]
   365d4:	2c00      	cmp	r4, #0
   365d6:	d1e5      	bne.n	365a4 <stream_handler_free+0xc>
   365d8:	f7f8 fe0a 	bl	2f1f0 <nrf_free>
   365dc:	60ec      	str	r4, [r5, #12]
   365de:	b005      	add	sp, #20
   365e0:	bd30      	pop	{r4, r5, pc}
   365e2:	bf00      	nop

000365e4 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   365e4:	4a07      	ldr	r2, [pc, #28]	; (36604 <SystemInit+0x20>)
   365e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   365ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   365ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   365f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   365f6:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   365fa:	4b03      	ldr	r3, [pc, #12]	; (36608 <SystemInit+0x24>)
   365fc:	4a03      	ldr	r2, [pc, #12]	; (3660c <SystemInit+0x28>)
   365fe:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   36600:	4770      	bx	lr
   36602:	bf00      	nop
   36604:	e000ed00 	.word	0xe000ed00
   36608:	20031570 	.word	0x20031570
   3660c:	03d09000 	.word	0x03d09000

00036610 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   36610:	4a04      	ldr	r2, [pc, #16]	; (36624 <nvmc_word_write+0x14>)
   36612:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   36616:	07db      	lsls	r3, r3, #31
   36618:	d5fb      	bpl.n	36612 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   3661a:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   3661c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   36620:	4770      	bx	lr
   36622:	bf00      	nop
   36624:	40039000 	.word	0x40039000

00036628 <nrfx_nvmc_page_erase>:
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   36628:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   3662c:	b508      	push	{r3, lr}
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   3662e:	d305      	bcc.n	3663c <nrfx_nvmc_page_erase+0x14>
   36630:	4b0d      	ldr	r3, [pc, #52]	; (36668 <nrfx_nvmc_page_erase+0x40>)
   36632:	4a0e      	ldr	r2, [pc, #56]	; (3666c <nrfx_nvmc_page_erase+0x44>)
   36634:	21dd      	movs	r1, #221	; 0xdd
   36636:	480e      	ldr	r0, [pc, #56]	; (36670 <nrfx_nvmc_page_erase+0x48>)
   36638:	f003 fbb8 	bl	39dac <__assert_func>
    return !(addr % flash_page_size_get());
   3663c:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   36640:	b97b      	cbnz	r3, 36662 <nrfx_nvmc_page_erase+0x3a>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   36642:	2202      	movs	r2, #2
   36644:	4b0b      	ldr	r3, [pc, #44]	; (36674 <nrfx_nvmc_page_erase+0x4c>)
   36646:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   3664a:	f04f 32ff 	mov.w	r2, #4294967295
   3664e:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   36650:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   36654:	07d2      	lsls	r2, r2, #31
   36656:	d5fb      	bpl.n	36650 <nrfx_nvmc_page_erase+0x28>
    p_reg->CONFIGNS = (uint32_t)mode;
   36658:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   3665a:	4807      	ldr	r0, [pc, #28]	; (36678 <nrfx_nvmc_page_erase+0x50>)
   3665c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   36660:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   36662:	4806      	ldr	r0, [pc, #24]	; (3667c <nrfx_nvmc_page_erase+0x54>)
   36664:	e7fc      	b.n	36660 <nrfx_nvmc_page_erase+0x38>
   36666:	bf00      	nop
   36668:	0004645c 	.word	0x0004645c
   3666c:	00046432 	.word	0x00046432
   36670:	000464c9 	.word	0x000464c9
   36674:	40039000 	.word	0x40039000
   36678:	0bad0000 	.word	0x0bad0000
   3667c:	0bad000a 	.word	0x0bad000a

00036680 <nrfx_nvmc_word_write>:
    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   36680:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   36684:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   36686:	d306      	bcc.n	36696 <nrfx_nvmc_word_write+0x16>
   36688:	f240 114d 	movw	r1, #333	; 0x14d
   3668c:	4b0a      	ldr	r3, [pc, #40]	; (366b8 <nrfx_nvmc_word_write+0x38>)
   3668e:	4a0b      	ldr	r2, [pc, #44]	; (366bc <nrfx_nvmc_word_write+0x3c>)
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   36690:	480b      	ldr	r0, [pc, #44]	; (366c0 <nrfx_nvmc_word_write+0x40>)
   36692:	f003 fb8b 	bl	39dac <__assert_func>
   36696:	f010 0403 	ands.w	r4, r0, #3
   3669a:	d004      	beq.n	366a6 <nrfx_nvmc_word_write+0x26>
   3669c:	4b09      	ldr	r3, [pc, #36]	; (366c4 <nrfx_nvmc_word_write+0x44>)
   3669e:	4a07      	ldr	r2, [pc, #28]	; (366bc <nrfx_nvmc_word_write+0x3c>)
   366a0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   366a4:	e7f4      	b.n	36690 <nrfx_nvmc_word_write+0x10>
   366a6:	2301      	movs	r3, #1
   366a8:	4d07      	ldr	r5, [pc, #28]	; (366c8 <nrfx_nvmc_word_write+0x48>)
   366aa:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   366ae:	f7ff ffaf 	bl	36610 <nvmc_word_write>
   366b2:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   366b6:	bd38      	pop	{r3, r4, r5, pc}
   366b8:	0004645c 	.word	0x0004645c
   366bc:	00046447 	.word	0x00046447
   366c0:	000464c9 	.word	0x000464c9
   366c4:	00046480 	.word	0x00046480
   366c8:	40039000 	.word	0x40039000

000366cc <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   366cc:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   366ce:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   366d0:	4b08      	ldr	r3, [pc, #32]	; (366f4 <z_sys_device_do_config_level+0x28>)
   366d2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   366d6:	3001      	adds	r0, #1
   366d8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   366dc:	42a5      	cmp	r5, r4
   366de:	d800      	bhi.n	366e2 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   366e0:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   366e2:	6823      	ldr	r3, [r4, #0]
   366e4:	4620      	mov	r0, r4
   366e6:	685b      	ldr	r3, [r3, #4]
   366e8:	4798      	blx	r3
		if (retval != 0) {
   366ea:	b100      	cbz	r0, 366ee <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   366ec:	6066      	str	r6, [r4, #4]
								info++) {
   366ee:	340c      	adds	r4, #12
   366f0:	e7f4      	b.n	366dc <z_sys_device_do_config_level+0x10>
   366f2:	bf00      	nop
   366f4:	00041008 	.word	0x00041008

000366f8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   366f8:	4b10      	ldr	r3, [pc, #64]	; (3673c <z_impl_device_get_binding+0x44>)
{
   366fa:	b570      	push	{r4, r5, r6, lr}
   366fc:	4605      	mov	r5, r0
   366fe:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   36700:	4c0f      	ldr	r4, [pc, #60]	; (36740 <z_impl_device_get_binding+0x48>)
   36702:	429c      	cmp	r4, r3
   36704:	d104      	bne.n	36710 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   36706:	4c0e      	ldr	r4, [pc, #56]	; (36740 <z_impl_device_get_binding+0x48>)
   36708:	42b4      	cmp	r4, r6
   3670a:	d109      	bne.n	36720 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   3670c:	2400      	movs	r4, #0
   3670e:	e012      	b.n	36736 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   36710:	6862      	ldr	r2, [r4, #4]
   36712:	b11a      	cbz	r2, 3671c <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   36714:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   36716:	6812      	ldr	r2, [r2, #0]
   36718:	42aa      	cmp	r2, r5
   3671a:	d00c      	beq.n	36736 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   3671c:	340c      	adds	r4, #12
   3671e:	e7f0      	b.n	36702 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   36720:	6863      	ldr	r3, [r4, #4]
   36722:	b90b      	cbnz	r3, 36728 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   36724:	340c      	adds	r4, #12
   36726:	e7ef      	b.n	36708 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   36728:	6823      	ldr	r3, [r4, #0]
   3672a:	4628      	mov	r0, r5
   3672c:	6819      	ldr	r1, [r3, #0]
   3672e:	f7e6 fcef 	bl	1d110 <strcmp>
   36732:	2800      	cmp	r0, #0
   36734:	d1f6      	bne.n	36724 <z_impl_device_get_binding+0x2c>
}
   36736:	4620      	mov	r0, r4
   36738:	bd70      	pop	{r4, r5, r6, pc}
   3673a:	bf00      	nop
   3673c:	20031860 	.word	0x20031860
   36740:	20031758 	.word	0x20031758

00036744 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   36744:	4b01      	ldr	r3, [pc, #4]	; (3674c <z_impl_z_errno+0x8>)
   36746:	6898      	ldr	r0, [r3, #8]
}
   36748:	3054      	adds	r0, #84	; 0x54
   3674a:	4770      	bx	lr
   3674c:	20029368 	.word	0x20029368

00036750 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   36750:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   36754:	4605      	mov	r5, r0
   36756:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   36758:	f002 f8ca 	bl	388f0 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   3675c:	2301      	movs	r3, #1
   3675e:	4606      	mov	r6, r0
   36760:	f04f 0000 	mov.w	r0, #0
   36764:	2200      	movs	r2, #0
   36766:	f363 0007 	bfi	r0, r3, #0, #8
   3676a:	4c2b      	ldr	r4, [pc, #172]	; (36818 <z_fatal_error+0xc8>)
   3676c:	4b2b      	ldr	r3, [pc, #172]	; (3681c <z_fatal_error+0xcc>)
   3676e:	2d04      	cmp	r5, #4
   36770:	eba4 0403 	sub.w	r4, r4, r3
   36774:	bf98      	it	ls
   36776:	4b2a      	ldrls	r3, [pc, #168]	; (36820 <z_fatal_error+0xd0>)
   36778:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   3677c:	bf94      	ite	ls
   3677e:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   36782:	4b28      	ldrhi	r3, [pc, #160]	; (36824 <z_fatal_error+0xd4>)
   36784:	9200      	str	r2, [sp, #0]
   36786:	f364 108f 	bfi	r0, r4, #6, #10
   3678a:	462a      	mov	r2, r5
   3678c:	4926      	ldr	r1, [pc, #152]	; (36828 <z_fatal_error+0xd8>)
   3678e:	f005 ff78 	bl	3c682 <log_string_sync>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   36792:	f8d8 301c 	ldr.w	r3, [r8, #28]
   36796:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   3679a:	b14b      	cbz	r3, 367b0 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
   3679c:	f04f 0000 	mov.w	r0, #0
   367a0:	2301      	movs	r3, #1
   367a2:	f363 0007 	bfi	r0, r3, #0, #8
   367a6:	f364 108f 	bfi	r0, r4, #6, #10
   367aa:	4920      	ldr	r1, [pc, #128]	; (3682c <z_fatal_error+0xdc>)
   367ac:	f005 ff69 	bl	3c682 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   367b0:	f04f 0700 	mov.w	r7, #0
   367b4:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   367b6:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   367b8:	f363 0707 	bfi	r7, r3, #0, #8
   367bc:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   367c0:	f008 f97a 	bl	3eab8 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   367c4:	b328      	cbz	r0, 36812 <z_fatal_error+0xc2>
   367c6:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   367c8:	4b19      	ldr	r3, [pc, #100]	; (36830 <z_fatal_error+0xe0>)
   367ca:	2a00      	cmp	r2, #0
   367cc:	bf08      	it	eq
   367ce:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   367d0:	f005 ff69 	bl	3c6a6 <log_strdup>
   367d4:	4632      	mov	r2, r6
   367d6:	4603      	mov	r3, r0
   367d8:	4916      	ldr	r1, [pc, #88]	; (36834 <z_fatal_error+0xe4>)
   367da:	4638      	mov	r0, r7
   367dc:	f005 ff51 	bl	3c682 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   367e0:	4641      	mov	r1, r8
   367e2:	4628      	mov	r0, r5
   367e4:	f7ea f8e8 	bl	209b8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   367e8:	2d04      	cmp	r5, #4
   367ea:	d10c      	bne.n	36806 <z_fatal_error+0xb6>
   367ec:	4912      	ldr	r1, [pc, #72]	; (36838 <z_fatal_error+0xe8>)
   367ee:	2387      	movs	r3, #135	; 0x87
   367f0:	4a12      	ldr	r2, [pc, #72]	; (3683c <z_fatal_error+0xec>)
   367f2:	4813      	ldr	r0, [pc, #76]	; (36840 <z_fatal_error+0xf0>)
   367f4:	f005 feee 	bl	3c5d4 <printk>
   367f8:	4812      	ldr	r0, [pc, #72]	; (36844 <z_fatal_error+0xf4>)
   367fa:	f005 feeb 	bl	3c5d4 <printk>
   367fe:	2187      	movs	r1, #135	; 0x87
   36800:	480e      	ldr	r0, [pc, #56]	; (3683c <z_fatal_error+0xec>)
   36802:	f005 ff2d 	bl	3c660 <assert_post_action>
	z_impl_k_thread_abort(thread);
   36806:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   36808:	b002      	add	sp, #8
   3680a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3680e:	f7ed bfe7 	b.w	247e0 <z_impl_k_thread_abort>
		thread_name = "unknown";
   36812:	4807      	ldr	r0, [pc, #28]	; (36830 <z_fatal_error+0xe0>)
   36814:	e7dc      	b.n	367d0 <z_fatal_error+0x80>
   36816:	bf00      	nop
   36818:	000403c4 	.word	0x000403c4
   3681c:	000402cc 	.word	0x000402cc
   36820:	00041020 	.word	0x00041020
   36824:	00046557 	.word	0x00046557
   36828:	0004656d 	.word	0x0004656d
   3682c:	00046595 	.word	0x00046595
   36830:	00046565 	.word	0x00046565
   36834:	000465b6 	.word	0x000465b6
   36838:	000465e9 	.word	0x000465e9
   3683c:	000465ce 	.word	0x000465ce
   36840:	00041757 	.word	0x00041757
   36844:	00046606 	.word	0x00046606

00036848 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   36848:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   3684a:	4d0b      	ldr	r5, [pc, #44]	; (36878 <idle+0x30>)
	__asm__ volatile(
   3684c:	f04f 0220 	mov.w	r2, #32
   36850:	f3ef 8311 	mrs	r3, BASEPRI
   36854:	f382 8811 	msr	BASEPRI, r2
   36858:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   3685c:	f002 fdbc 	bl	393d8 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   36860:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   36862:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   36864:	2802      	cmp	r0, #2
   36866:	bfd8      	it	le
   36868:	4608      	movle	r0, r1
   3686a:	f002 fdfd 	bl	39468 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   3686e:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   36870:	f7ed fac8 	bl	23e04 <arch_cpu_idle>
   36874:	e7ea      	b.n	3684c <idle+0x4>
   36876:	bf00      	nop
   36878:	20029368 	.word	0x20029368

0003687c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   3687c:	4802      	ldr	r0, [pc, #8]	; (36888 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   3687e:	4a03      	ldr	r2, [pc, #12]	; (3688c <z_bss_zero+0x10>)
   36880:	2100      	movs	r1, #0
   36882:	1a12      	subs	r2, r2, r0
   36884:	f008 ba41 	b.w	3ed0a <memset>
   36888:	20020000 	.word	0x20020000
   3688c:	2002bb20 	.word	0x2002bb20

00036890 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   36890:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   36892:	4806      	ldr	r0, [pc, #24]	; (368ac <z_data_copy+0x1c>)
   36894:	4a06      	ldr	r2, [pc, #24]	; (368b0 <z_data_copy+0x20>)
   36896:	4907      	ldr	r1, [pc, #28]	; (368b4 <z_data_copy+0x24>)
   36898:	1a12      	subs	r2, r2, r0
   3689a:	f008 fa16 	bl	3ecca <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   3689e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   368a2:	4a05      	ldr	r2, [pc, #20]	; (368b8 <z_data_copy+0x28>)
   368a4:	4905      	ldr	r1, [pc, #20]	; (368bc <z_data_copy+0x2c>)
   368a6:	4806      	ldr	r0, [pc, #24]	; (368c0 <z_data_copy+0x30>)
   368a8:	f008 ba0f 	b.w	3ecca <memcpy>
   368ac:	20030fa0 	.word	0x20030fa0
   368b0:	2003199c 	.word	0x2003199c
   368b4:	00046df8 	.word	0x00046df8
   368b8:	00000000 	.word	0x00000000
   368bc:	00046df8 	.word	0x00046df8
   368c0:	20020000 	.word	0x20020000

000368c4 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   368c4:	2201      	movs	r2, #1
{
   368c6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   368c8:	4b0b      	ldr	r3, [pc, #44]	; (368f8 <bg_thread_main+0x34>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   368ca:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   368cc:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   368ce:	f7ff fefd 	bl	366cc <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   368d2:	4a0a      	ldr	r2, [pc, #40]	; (368fc <bg_thread_main+0x38>)
   368d4:	490a      	ldr	r1, [pc, #40]	; (36900 <bg_thread_main+0x3c>)
   368d6:	480b      	ldr	r0, [pc, #44]	; (36904 <bg_thread_main+0x40>)
   368d8:	f005 fe7c 	bl	3c5d4 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   368dc:	2003      	movs	r0, #3
   368de:	f7ff fef5 	bl	366cc <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   368e2:	f002 f9db 	bl	38c9c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   368e6:	f7ea fd15 	bl	21314 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   368ea:	4a07      	ldr	r2, [pc, #28]	; (36908 <bg_thread_main+0x44>)
   368ec:	7b13      	ldrb	r3, [r2, #12]
   368ee:	f023 0301 	bic.w	r3, r3, #1
   368f2:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   368f4:	bd08      	pop	{r3, pc}
   368f6:	bf00      	nop
   368f8:	2002b9cb 	.word	0x2002b9cb
   368fc:	00043121 	.word	0x00043121
   36900:	0004663b 	.word	0x0004663b
   36904:	00046658 	.word	0x00046658
   36908:	20025248 	.word	0x20025248

0003690c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   3690c:	b580      	push	{r7, lr}
   3690e:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   36910:	f7ec fa36 	bl	22d80 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   36914:	4b35      	ldr	r3, [pc, #212]	; (369ec <z_cstart+0xe0>)
   36916:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   3691a:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   3691e:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   36922:	2400      	movs	r4, #0
   36924:	23e0      	movs	r3, #224	; 0xe0
   36926:	4d32      	ldr	r5, [pc, #200]	; (369f0 <z_cstart+0xe4>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   36928:	2701      	movs	r7, #1
   3692a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   3692e:	77ec      	strb	r4, [r5, #31]
   36930:	762c      	strb	r4, [r5, #24]
   36932:	766c      	strb	r4, [r5, #25]
   36934:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   36936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   36938:	4e2e      	ldr	r6, [pc, #184]	; (369f4 <z_cstart+0xe8>)
   3693a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   3693e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   36940:	f7ed ff24 	bl	2478c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   36944:	f7ed fa58 	bl	23df8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   36948:	f04f 33ff 	mov.w	r3, #4294967295
   3694c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   3694e:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   36950:	ab06      	add	r3, sp, #24
   36952:	22b0      	movs	r2, #176	; 0xb0
   36954:	4621      	mov	r1, r4
   36956:	4618      	mov	r0, r3
   36958:	f008 f9d7 	bl	3ed0a <memset>
	_current = &dummy_thread;
   3695c:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   3695e:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   36960:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   36964:	f7ff feb2 	bl	366cc <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   36968:	4638      	mov	r0, r7
   3696a:	f7ff feaf 	bl	366cc <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   3696e:	4d22      	ldr	r5, [pc, #136]	; (369f8 <z_cstart+0xec>)
	z_sched_init();
   36970:	f001 fe34 	bl	385dc <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   36974:	4b21      	ldr	r3, [pc, #132]	; (369fc <z_cstart+0xf0>)
   36976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3697a:	e9cd 7304 	strd	r7, r3, [sp, #16]
   3697e:	e9cd 4402 	strd	r4, r4, [sp, #8]
   36982:	4b1f      	ldr	r3, [pc, #124]	; (36a00 <z_cstart+0xf4>)
   36984:	e9cd 4400 	strd	r4, r4, [sp]
   36988:	491e      	ldr	r1, [pc, #120]	; (36a04 <z_cstart+0xf8>)
   3698a:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   3698c:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   3698e:	f002 f89b 	bl	38ac8 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   36992:	7b6b      	ldrb	r3, [r5, #13]
   36994:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   36998:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3699c:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3699e:	d104      	bne.n	369aa <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   369a0:	69ab      	ldr	r3, [r5, #24]
   369a2:	b913      	cbnz	r3, 369aa <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
   369a4:	4628      	mov	r0, r5
   369a6:	f001 f913 	bl	37bd0 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   369aa:	4b17      	ldr	r3, [pc, #92]	; (36a08 <z_cstart+0xfc>)
   369ac:	2201      	movs	r2, #1
   369ae:	9305      	str	r3, [sp, #20]
   369b0:	230f      	movs	r3, #15
   369b2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   369b6:	2300      	movs	r3, #0
   369b8:	4d14      	ldr	r5, [pc, #80]	; (36a0c <z_cstart+0x100>)
   369ba:	e9cd 3301 	strd	r3, r3, [sp, #4]
   369be:	9300      	str	r3, [sp, #0]
   369c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   369c4:	4b12      	ldr	r3, [pc, #72]	; (36a10 <z_cstart+0x104>)
   369c6:	4913      	ldr	r1, [pc, #76]	; (36a14 <z_cstart+0x108>)
   369c8:	4628      	mov	r0, r5
   369ca:	f002 f87d 	bl	38ac8 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   369ce:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   369d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   369d4:	f023 0304 	bic.w	r3, r3, #4
   369d8:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   369da:	4b0f      	ldr	r3, [pc, #60]	; (36a18 <z_cstart+0x10c>)
   369dc:	4909      	ldr	r1, [pc, #36]	; (36a04 <z_cstart+0xf8>)
	list->tail = (sys_dnode_t *)list;
   369de:	e9c6 3306 	strd	r3, r3, [r6, #24]
   369e2:	4805      	ldr	r0, [pc, #20]	; (369f8 <z_cstart+0xec>)
   369e4:	4b06      	ldr	r3, [pc, #24]	; (36a00 <z_cstart+0xf4>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   369e6:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   369e8:	f7ed fafc 	bl	23fe4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   369ec:	2002ea60 	.word	0x2002ea60
   369f0:	e000ed00 	.word	0xe000ed00
   369f4:	20029368 	.word	0x20029368
   369f8:	20025248 	.word	0x20025248
   369fc:	00046682 	.word	0x00046682
   36a00:	000368c5 	.word	0x000368c5
   36a04:	2002c920 	.word	0x2002c920
   36a08:	00046687 	.word	0x00046687
   36a0c:	20025198 	.word	0x20025198
   36a10:	00036849 	.word	0x00036849
   36a14:	2002e920 	.word	0x2002e920
   36a18:	20029380 	.word	0x20029380

00036a1c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   36a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   36a20:	4d16      	ldr	r5, [pc, #88]	; (36a7c <init_mem_slab_module+0x60>)
   36a22:	4c17      	ldr	r4, [pc, #92]	; (36a80 <init_mem_slab_module+0x64>)
   36a24:	46a8      	mov	r8, r5
   36a26:	4e17      	ldr	r6, [pc, #92]	; (36a84 <init_mem_slab_module+0x68>)
   36a28:	42ac      	cmp	r4, r5
   36a2a:	d90c      	bls.n	36a46 <init_mem_slab_module+0x2a>
   36a2c:	4916      	ldr	r1, [pc, #88]	; (36a88 <init_mem_slab_module+0x6c>)
   36a2e:	2342      	movs	r3, #66	; 0x42
   36a30:	4632      	mov	r2, r6
   36a32:	4816      	ldr	r0, [pc, #88]	; (36a8c <init_mem_slab_module+0x70>)
   36a34:	f005 fdce 	bl	3c5d4 <printk>
   36a38:	4815      	ldr	r0, [pc, #84]	; (36a90 <init_mem_slab_module+0x74>)
   36a3a:	f005 fdcb 	bl	3c5d4 <printk>
   36a3e:	2142      	movs	r1, #66	; 0x42
   36a40:	4630      	mov	r0, r6
   36a42:	f005 fe0d 	bl	3c660 <assert_post_action>
   36a46:	4544      	cmp	r4, r8
   36a48:	d302      	bcc.n	36a50 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   36a4a:	2000      	movs	r0, #0
	return rc;
}
   36a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   36a50:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   36a54:	ea42 0301 	orr.w	r3, r2, r1
   36a58:	f013 0303 	ands.w	r3, r3, #3
   36a5c:	d10b      	bne.n	36a76 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   36a5e:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   36a60:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   36a62:	4283      	cmp	r3, r0
   36a64:	d101      	bne.n	36a6a <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   36a66:	341c      	adds	r4, #28
   36a68:	e7de      	b.n	36a28 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   36a6a:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   36a6c:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   36a6e:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   36a70:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   36a72:	440a      	add	r2, r1
   36a74:	e7f5      	b.n	36a62 <init_mem_slab_module+0x46>
		return -EINVAL;
   36a76:	f06f 0015 	mvn.w	r0, #21
	return rc;
   36a7a:	e7e7      	b.n	36a4c <init_mem_slab_module+0x30>
   36a7c:	2003187c 	.word	0x2003187c
   36a80:	20031860 	.word	0x20031860
   36a84:	0004668c 	.word	0x0004668c
   36a88:	000466aa 	.word	0x000466aa
   36a8c:	00041757 	.word	0x00041757
   36a90:	000466c7 	.word	0x000466c7

00036a94 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   36a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36a96:	4604      	mov	r4, r0
   36a98:	460d      	mov	r5, r1
   36a9a:	4616      	mov	r6, r2
   36a9c:	f04f 0320 	mov.w	r3, #32
   36aa0:	f3ef 8711 	mrs	r7, BASEPRI
   36aa4:	f383 8811 	msr	BASEPRI, r3
   36aa8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36aac:	4823      	ldr	r0, [pc, #140]	; (36b3c <k_mem_slab_alloc+0xa8>)
   36aae:	f002 f823 	bl	38af8 <z_spin_lock_valid>
   36ab2:	b968      	cbnz	r0, 36ad0 <k_mem_slab_alloc+0x3c>
   36ab4:	234a      	movs	r3, #74	; 0x4a
   36ab6:	4a22      	ldr	r2, [pc, #136]	; (36b40 <k_mem_slab_alloc+0xac>)
   36ab8:	4922      	ldr	r1, [pc, #136]	; (36b44 <k_mem_slab_alloc+0xb0>)
   36aba:	4823      	ldr	r0, [pc, #140]	; (36b48 <k_mem_slab_alloc+0xb4>)
   36abc:	f005 fd8a 	bl	3c5d4 <printk>
   36ac0:	491e      	ldr	r1, [pc, #120]	; (36b3c <k_mem_slab_alloc+0xa8>)
   36ac2:	4822      	ldr	r0, [pc, #136]	; (36b4c <k_mem_slab_alloc+0xb8>)
   36ac4:	f005 fd86 	bl	3c5d4 <printk>
   36ac8:	214a      	movs	r1, #74	; 0x4a
   36aca:	481d      	ldr	r0, [pc, #116]	; (36b40 <k_mem_slab_alloc+0xac>)
   36acc:	f005 fdc8 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   36ad0:	481a      	ldr	r0, [pc, #104]	; (36b3c <k_mem_slab_alloc+0xa8>)
   36ad2:	f002 f82f 	bl	38b34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   36ad6:	6963      	ldr	r3, [r4, #20]
   36ad8:	b1eb      	cbz	r3, 36b16 <k_mem_slab_alloc+0x82>
		/* take a free block */
		*mem = slab->free_list;
   36ada:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   36adc:	681b      	ldr	r3, [r3, #0]
   36ade:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   36ae0:	69a3      	ldr	r3, [r4, #24]
   36ae2:	3301      	adds	r3, #1
   36ae4:	61a3      	str	r3, [r4, #24]
		result = 0;
   36ae6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36ae8:	4814      	ldr	r0, [pc, #80]	; (36b3c <k_mem_slab_alloc+0xa8>)
   36aea:	f002 f813 	bl	38b14 <z_spin_unlock_valid>
   36aee:	b968      	cbnz	r0, 36b0c <k_mem_slab_alloc+0x78>
   36af0:	235d      	movs	r3, #93	; 0x5d
   36af2:	4a13      	ldr	r2, [pc, #76]	; (36b40 <k_mem_slab_alloc+0xac>)
   36af4:	4916      	ldr	r1, [pc, #88]	; (36b50 <k_mem_slab_alloc+0xbc>)
   36af6:	4814      	ldr	r0, [pc, #80]	; (36b48 <k_mem_slab_alloc+0xb4>)
   36af8:	f005 fd6c 	bl	3c5d4 <printk>
   36afc:	490f      	ldr	r1, [pc, #60]	; (36b3c <k_mem_slab_alloc+0xa8>)
   36afe:	4815      	ldr	r0, [pc, #84]	; (36b54 <k_mem_slab_alloc+0xc0>)
   36b00:	f005 fd68 	bl	3c5d4 <printk>
   36b04:	215d      	movs	r1, #93	; 0x5d
   36b06:	480e      	ldr	r0, [pc, #56]	; (36b40 <k_mem_slab_alloc+0xac>)
   36b08:	f005 fdaa 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   36b0c:	f387 8811 	msr	BASEPRI, r7
   36b10:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   36b14:	e010      	b.n	36b38 <k_mem_slab_alloc+0xa4>
	} else if (timeout == K_NO_WAIT) {
   36b16:	b91e      	cbnz	r6, 36b20 <k_mem_slab_alloc+0x8c>
		*mem = NULL;
   36b18:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   36b1a:	f06f 040b 	mvn.w	r4, #11
   36b1e:	e7e3      	b.n	36ae8 <k_mem_slab_alloc+0x54>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   36b20:	4622      	mov	r2, r4
   36b22:	4633      	mov	r3, r6
   36b24:	4639      	mov	r1, r7
   36b26:	4805      	ldr	r0, [pc, #20]	; (36b3c <k_mem_slab_alloc+0xa8>)
   36b28:	f001 fc0c 	bl	38344 <z_pend_curr>
		if (result == 0) {
   36b2c:	4604      	mov	r4, r0
   36b2e:	b918      	cbnz	r0, 36b38 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   36b30:	4b09      	ldr	r3, [pc, #36]	; (36b58 <k_mem_slab_alloc+0xc4>)
   36b32:	689b      	ldr	r3, [r3, #8]
   36b34:	695b      	ldr	r3, [r3, #20]
   36b36:	602b      	str	r3, [r5, #0]
}
   36b38:	4620      	mov	r0, r4
   36b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36b3c:	200252f8 	.word	0x200252f8
   36b40:	00042269 	.word	0x00042269
   36b44:	00042288 	.word	0x00042288
   36b48:	00041757 	.word	0x00041757
   36b4c:	0004229d 	.word	0x0004229d
   36b50:	000422b5 	.word	0x000422b5
   36b54:	000422cc 	.word	0x000422cc
   36b58:	20029368 	.word	0x20029368

00036b5c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   36b5c:	b570      	push	{r4, r5, r6, lr}
   36b5e:	4604      	mov	r4, r0
   36b60:	460d      	mov	r5, r1
	__asm__ volatile(
   36b62:	f04f 0320 	mov.w	r3, #32
   36b66:	f3ef 8611 	mrs	r6, BASEPRI
   36b6a:	f383 8811 	msr	BASEPRI, r3
   36b6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36b72:	4824      	ldr	r0, [pc, #144]	; (36c04 <k_mem_slab_free+0xa8>)
   36b74:	f001 ffc0 	bl	38af8 <z_spin_lock_valid>
   36b78:	b968      	cbnz	r0, 36b96 <k_mem_slab_free+0x3a>
   36b7a:	234a      	movs	r3, #74	; 0x4a
   36b7c:	4a22      	ldr	r2, [pc, #136]	; (36c08 <k_mem_slab_free+0xac>)
   36b7e:	4923      	ldr	r1, [pc, #140]	; (36c0c <k_mem_slab_free+0xb0>)
   36b80:	4823      	ldr	r0, [pc, #140]	; (36c10 <k_mem_slab_free+0xb4>)
   36b82:	f005 fd27 	bl	3c5d4 <printk>
   36b86:	491f      	ldr	r1, [pc, #124]	; (36c04 <k_mem_slab_free+0xa8>)
   36b88:	4822      	ldr	r0, [pc, #136]	; (36c14 <k_mem_slab_free+0xb8>)
   36b8a:	f005 fd23 	bl	3c5d4 <printk>
   36b8e:	214a      	movs	r1, #74	; 0x4a
   36b90:	481d      	ldr	r0, [pc, #116]	; (36c08 <k_mem_slab_free+0xac>)
   36b92:	f005 fd65 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   36b96:	481b      	ldr	r0, [pc, #108]	; (36c04 <k_mem_slab_free+0xa8>)
   36b98:	f001 ffcc 	bl	38b34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   36b9c:	4620      	mov	r0, r4
   36b9e:	f001 fc8d 	bl	384bc <z_unpend_first_thread>

	if (pending_thread != NULL) {
   36ba2:	b180      	cbz	r0, 36bc6 <k_mem_slab_free+0x6a>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   36ba4:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   36ba6:	682a      	ldr	r2, [r5, #0]
   36ba8:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   36baa:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   36bac:	7b42      	ldrb	r2, [r0, #13]
   36bae:	06d2      	lsls	r2, r2, #27
   36bb0:	d103      	bne.n	36bba <k_mem_slab_free+0x5e>
	if (z_is_thread_ready(thread)) {
   36bb2:	6983      	ldr	r3, [r0, #24]
   36bb4:	b90b      	cbnz	r3, 36bba <k_mem_slab_free+0x5e>
		z_add_thread_to_ready_q(thread);
   36bb6:	f001 f80b 	bl	37bd0 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   36bba:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   36bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   36bc0:	4810      	ldr	r0, [pc, #64]	; (36c04 <k_mem_slab_free+0xa8>)
   36bc2:	f000 be1b 	b.w	377fc <z_reschedule>
		**(char ***)mem = slab->free_list;
   36bc6:	682b      	ldr	r3, [r5, #0]
   36bc8:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36bca:	480e      	ldr	r0, [pc, #56]	; (36c04 <k_mem_slab_free+0xa8>)
   36bcc:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   36bce:	682b      	ldr	r3, [r5, #0]
   36bd0:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   36bd2:	69a3      	ldr	r3, [r4, #24]
   36bd4:	3b01      	subs	r3, #1
   36bd6:	61a3      	str	r3, [r4, #24]
   36bd8:	f001 ff9c 	bl	38b14 <z_spin_unlock_valid>
   36bdc:	b968      	cbnz	r0, 36bfa <k_mem_slab_free+0x9e>
   36bde:	235d      	movs	r3, #93	; 0x5d
   36be0:	4a09      	ldr	r2, [pc, #36]	; (36c08 <k_mem_slab_free+0xac>)
   36be2:	490d      	ldr	r1, [pc, #52]	; (36c18 <k_mem_slab_free+0xbc>)
   36be4:	480a      	ldr	r0, [pc, #40]	; (36c10 <k_mem_slab_free+0xb4>)
   36be6:	f005 fcf5 	bl	3c5d4 <printk>
   36bea:	4906      	ldr	r1, [pc, #24]	; (36c04 <k_mem_slab_free+0xa8>)
   36bec:	480b      	ldr	r0, [pc, #44]	; (36c1c <k_mem_slab_free+0xc0>)
   36bee:	f005 fcf1 	bl	3c5d4 <printk>
   36bf2:	215d      	movs	r1, #93	; 0x5d
   36bf4:	4804      	ldr	r0, [pc, #16]	; (36c08 <k_mem_slab_free+0xac>)
   36bf6:	f005 fd33 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   36bfa:	f386 8811 	msr	BASEPRI, r6
   36bfe:	f3bf 8f6f 	isb	sy
}
   36c02:	bd70      	pop	{r4, r5, r6, pc}
   36c04:	200252f8 	.word	0x200252f8
   36c08:	00042269 	.word	0x00042269
   36c0c:	00042288 	.word	0x00042288
   36c10:	00041757 	.word	0x00041757
   36c14:	0004229d 	.word	0x0004229d
   36c18:	000422b5 	.word	0x000422b5
   36c1c:	000422cc 	.word	0x000422cc

00036c20 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   36c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   36c22:	4d10      	ldr	r5, [pc, #64]	; (36c64 <init_static_pools+0x44>)
   36c24:	4c10      	ldr	r4, [pc, #64]	; (36c68 <init_static_pools+0x48>)
   36c26:	462f      	mov	r7, r5
   36c28:	4e10      	ldr	r6, [pc, #64]	; (36c6c <init_static_pools+0x4c>)
   36c2a:	42ac      	cmp	r4, r5
   36c2c:	d90c      	bls.n	36c48 <init_static_pools+0x28>
   36c2e:	4910      	ldr	r1, [pc, #64]	; (36c70 <init_static_pools+0x50>)
   36c30:	2328      	movs	r3, #40	; 0x28
   36c32:	4632      	mov	r2, r6
   36c34:	480f      	ldr	r0, [pc, #60]	; (36c74 <init_static_pools+0x54>)
   36c36:	f005 fccd 	bl	3c5d4 <printk>
   36c3a:	480f      	ldr	r0, [pc, #60]	; (36c78 <init_static_pools+0x58>)
   36c3c:	f005 fcca 	bl	3c5d4 <printk>
   36c40:	2128      	movs	r1, #40	; 0x28
   36c42:	4630      	mov	r0, r6
   36c44:	f005 fd0c 	bl	3c660 <assert_post_action>
   36c48:	42bc      	cmp	r4, r7
   36c4a:	d301      	bcc.n	36c50 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   36c4c:	2000      	movs	r0, #0
   36c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   36c50:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   36c54:	4620      	mov	r0, r4
   36c56:	e9c4 3305 	strd	r3, r3, [r4, #20]
   36c5a:	f005 fa43 	bl	3c0e4 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   36c5e:	341c      	adds	r4, #28
   36c60:	e7e3      	b.n	36c2a <init_static_pools+0xa>
   36c62:	bf00      	nop
   36c64:	20031898 	.word	0x20031898
   36c68:	2003187c 	.word	0x2003187c
   36c6c:	000466e6 	.word	0x000466e6
   36c70:	00046703 	.word	0x00046703
   36c74:	00041757 	.word	0x00041757
   36c78:	000466c7 	.word	0x000466c7

00036c7c <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   36c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36c80:	4607      	mov	r7, r0
   36c82:	b085      	sub	sp, #20
   36c84:	460d      	mov	r5, r1
   36c86:	4692      	mov	sl, r2
   36c88:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   36c8a:	f3ef 8305 	mrs	r3, IPSR
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   36c8e:	2b00      	cmp	r3, #0
   36c90:	d048      	beq.n	36d24 <k_mem_pool_alloc+0xa8>
   36c92:	2c00      	cmp	r4, #0
   36c94:	d139      	bne.n	36d0a <k_mem_pool_alloc+0x8e>
	s64_t end = 0;
   36c96:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   36c9a:	4b26      	ldr	r3, [pc, #152]	; (36d34 <k_mem_pool_alloc+0xb8>)
   36c9c:	4e26      	ldr	r6, [pc, #152]	; (36d38 <k_mem_pool_alloc+0xbc>)
   36c9e:	1afb      	subs	r3, r7, r3
   36ca0:	109b      	asrs	r3, r3, #2
   36ca2:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   36ca4:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   36ca8:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   36caa:	ab03      	add	r3, sp, #12
   36cac:	aa02      	add	r2, sp, #8
   36cae:	9500      	str	r5, [sp, #0]
   36cb0:	4651      	mov	r1, sl
   36cb2:	4638      	mov	r0, r7
   36cb4:	f005 fa5c 	bl	3c170 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   36cb8:	796b      	ldrb	r3, [r5, #5]
   36cba:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   36cbc:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   36cbe:	f362 0303 	bfi	r3, r2, #0, #4
   36cc2:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   36cc4:	686b      	ldr	r3, [r5, #4]
   36cc6:	9a03      	ldr	r2, [sp, #12]
   36cc8:	f362 331f 	bfi	r3, r2, #12, #20
   36ccc:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   36cce:	b1c8      	cbz	r0, 36d04 <k_mem_pool_alloc+0x88>
   36cd0:	b1c4      	cbz	r4, 36d04 <k_mem_pool_alloc+0x88>
   36cd2:	f110 0f0c 	cmn.w	r0, #12
   36cd6:	d115      	bne.n	36d04 <k_mem_pool_alloc+0x88>
	__asm__ volatile(
   36cd8:	f04f 0320 	mov.w	r3, #32
   36cdc:	f3ef 8011 	mrs	r0, BASEPRI
   36ce0:	f383 8811 	msr	BASEPRI, r3
   36ce4:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   36ce8:	4622      	mov	r2, r4
   36cea:	4659      	mov	r1, fp
   36cec:	f001 fad0 	bl	38290 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   36cf0:	1c63      	adds	r3, r4, #1
   36cf2:	d0da      	beq.n	36caa <k_mem_pool_alloc+0x2e>
	return z_impl_k_uptime_get();
   36cf4:	f007 ff63 	bl	3ebbe <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   36cf8:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   36cfc:	2c00      	cmp	r4, #0
   36cfe:	dcd4      	bgt.n	36caa <k_mem_pool_alloc+0x2e>
				break;
			}
		}
	}

	return -EAGAIN;
   36d00:	f06f 000a 	mvn.w	r0, #10
}
   36d04:	b005      	add	sp, #20
   36d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   36d0a:	490c      	ldr	r1, [pc, #48]	; (36d3c <k_mem_pool_alloc+0xc0>)
   36d0c:	2337      	movs	r3, #55	; 0x37
   36d0e:	4a0c      	ldr	r2, [pc, #48]	; (36d40 <k_mem_pool_alloc+0xc4>)
   36d10:	480c      	ldr	r0, [pc, #48]	; (36d44 <k_mem_pool_alloc+0xc8>)
   36d12:	f005 fc5f 	bl	3c5d4 <printk>
   36d16:	480c      	ldr	r0, [pc, #48]	; (36d48 <k_mem_pool_alloc+0xcc>)
   36d18:	f005 fc5c 	bl	3c5d4 <printk>
   36d1c:	2137      	movs	r1, #55	; 0x37
   36d1e:	4808      	ldr	r0, [pc, #32]	; (36d40 <k_mem_pool_alloc+0xc4>)
   36d20:	f005 fc9e 	bl	3c660 <assert_post_action>
	if (timeout > 0) {
   36d24:	2c00      	cmp	r4, #0
   36d26:	ddb6      	ble.n	36c96 <k_mem_pool_alloc+0x1a>
   36d28:	f007 ff49 	bl	3ebbe <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   36d2c:	eb10 0804 	adds.w	r8, r0, r4
   36d30:	e7b3      	b.n	36c9a <k_mem_pool_alloc+0x1e>
   36d32:	bf00      	nop
   36d34:	2003187c 	.word	0x2003187c
   36d38:	b6db6db7 	.word	0xb6db6db7
   36d3c:	0004671d 	.word	0x0004671d
   36d40:	000466e6 	.word	0x000466e6
   36d44:	00041757 	.word	0x00041757
   36d48:	0004311f 	.word	0x0004311f

00036d4c <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   36d4c:	b570      	push	{r4, r5, r6, lr}
   36d4e:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   36d50:	6802      	ldr	r2, [r0, #0]
   36d52:	7841      	ldrb	r1, [r0, #1]
   36d54:	4d24      	ldr	r5, [pc, #144]	; (36de8 <k_mem_pool_free_id+0x9c>)
   36d56:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   36d5a:	00a4      	lsls	r4, r4, #2
   36d5c:	0b12      	lsrs	r2, r2, #12
   36d5e:	f001 010f 	and.w	r1, r1, #15
   36d62:	1928      	adds	r0, r5, r4
   36d64:	f7eb fe94 	bl	22a90 <z_sys_mem_pool_block_free>
   36d68:	f04f 0320 	mov.w	r3, #32
   36d6c:	f3ef 8611 	mrs	r6, BASEPRI
   36d70:	f383 8811 	msr	BASEPRI, r3
   36d74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36d78:	481c      	ldr	r0, [pc, #112]	; (36dec <k_mem_pool_free_id+0xa0>)
   36d7a:	f001 febd 	bl	38af8 <z_spin_lock_valid>
   36d7e:	b968      	cbnz	r0, 36d9c <k_mem_pool_free_id+0x50>
   36d80:	234a      	movs	r3, #74	; 0x4a
   36d82:	4a1b      	ldr	r2, [pc, #108]	; (36df0 <k_mem_pool_free_id+0xa4>)
   36d84:	491b      	ldr	r1, [pc, #108]	; (36df4 <k_mem_pool_free_id+0xa8>)
   36d86:	481c      	ldr	r0, [pc, #112]	; (36df8 <k_mem_pool_free_id+0xac>)
   36d88:	f005 fc24 	bl	3c5d4 <printk>
   36d8c:	4917      	ldr	r1, [pc, #92]	; (36dec <k_mem_pool_free_id+0xa0>)
   36d8e:	481b      	ldr	r0, [pc, #108]	; (36dfc <k_mem_pool_free_id+0xb0>)
   36d90:	f005 fc20 	bl	3c5d4 <printk>
   36d94:	214a      	movs	r1, #74	; 0x4a
   36d96:	4816      	ldr	r0, [pc, #88]	; (36df0 <k_mem_pool_free_id+0xa4>)
   36d98:	f005 fc62 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   36d9c:	4813      	ldr	r0, [pc, #76]	; (36dec <k_mem_pool_free_id+0xa0>)
   36d9e:	f001 fec9 	bl	38b34 <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   36da2:	f104 0014 	add.w	r0, r4, #20
   36da6:	4428      	add	r0, r5
   36da8:	f007 fe57 	bl	3ea5a <z_unpend_all>

	if (need_sched != 0) {
   36dac:	b128      	cbz	r0, 36dba <k_mem_pool_free_id+0x6e>
		z_reschedule(&lock, key);
   36dae:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   36db0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   36db4:	480d      	ldr	r0, [pc, #52]	; (36dec <k_mem_pool_free_id+0xa0>)
   36db6:	f000 bd21 	b.w	377fc <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36dba:	480c      	ldr	r0, [pc, #48]	; (36dec <k_mem_pool_free_id+0xa0>)
   36dbc:	f001 feaa 	bl	38b14 <z_spin_unlock_valid>
   36dc0:	b968      	cbnz	r0, 36dde <k_mem_pool_free_id+0x92>
   36dc2:	235d      	movs	r3, #93	; 0x5d
   36dc4:	4a0a      	ldr	r2, [pc, #40]	; (36df0 <k_mem_pool_free_id+0xa4>)
   36dc6:	490e      	ldr	r1, [pc, #56]	; (36e00 <k_mem_pool_free_id+0xb4>)
   36dc8:	480b      	ldr	r0, [pc, #44]	; (36df8 <k_mem_pool_free_id+0xac>)
   36dca:	f005 fc03 	bl	3c5d4 <printk>
   36dce:	4907      	ldr	r1, [pc, #28]	; (36dec <k_mem_pool_free_id+0xa0>)
   36dd0:	480c      	ldr	r0, [pc, #48]	; (36e04 <k_mem_pool_free_id+0xb8>)
   36dd2:	f005 fbff 	bl	3c5d4 <printk>
   36dd6:	215d      	movs	r1, #93	; 0x5d
   36dd8:	4805      	ldr	r0, [pc, #20]	; (36df0 <k_mem_pool_free_id+0xa4>)
   36dda:	f005 fc41 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   36dde:	f386 8811 	msr	BASEPRI, r6
   36de2:	f3bf 8f6f 	isb	sy
}
   36de6:	bd70      	pop	{r4, r5, r6, pc}
   36de8:	2003187c 	.word	0x2003187c
   36dec:	20029360 	.word	0x20029360
   36df0:	00042269 	.word	0x00042269
   36df4:	00042288 	.word	0x00042288
   36df8:	00041757 	.word	0x00041757
   36dfc:	0004229d 	.word	0x0004229d
   36e00:	000422b5 	.word	0x000422b5
   36e04:	000422cc 	.word	0x000422cc

00036e08 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   36e08:	4601      	mov	r1, r0
   36e0a:	4801      	ldr	r0, [pc, #4]	; (36e10 <k_malloc+0x8>)
   36e0c:	f007 bda9 	b.w	3e962 <k_mem_pool_malloc>
   36e10:	2003187c 	.word	0x2003187c

00036e14 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   36e14:	b510      	push	{r4, lr}
   36e16:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   36e18:	f007 fe45 	bl	3eaa6 <k_is_in_isr>
   36e1c:	b948      	cbnz	r0, 36e32 <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   36e1e:	4b06      	ldr	r3, [pc, #24]	; (36e38 <z_thread_malloc+0x24>)
   36e20:	689b      	ldr	r3, [r3, #8]
   36e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	}

	if (pool) {
   36e24:	b13b      	cbz	r3, 36e36 <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   36e26:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   36e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   36e2c:	4618      	mov	r0, r3
   36e2e:	f007 bd98 	b.w	3e962 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   36e32:	4b02      	ldr	r3, [pc, #8]	; (36e3c <z_thread_malloc+0x28>)
   36e34:	e7f7      	b.n	36e26 <z_thread_malloc+0x12>
}
   36e36:	bd10      	pop	{r4, pc}
   36e38:	20029368 	.word	0x20029368
   36e3c:	2003187c 	.word	0x2003187c

00036e40 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   36e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36e44:	4604      	mov	r4, r0
   36e46:	4688      	mov	r8, r1
   36e48:	4616      	mov	r6, r2
   36e4a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   36e4e:	b16b      	cbz	r3, 36e6c <z_impl_k_msgq_put+0x2c>
   36e50:	b162      	cbz	r2, 36e6c <z_impl_k_msgq_put+0x2c>
   36e52:	4941      	ldr	r1, [pc, #260]	; (36f58 <z_impl_k_msgq_put+0x118>)
   36e54:	2376      	movs	r3, #118	; 0x76
   36e56:	4a41      	ldr	r2, [pc, #260]	; (36f5c <z_impl_k_msgq_put+0x11c>)
   36e58:	4841      	ldr	r0, [pc, #260]	; (36f60 <z_impl_k_msgq_put+0x120>)
   36e5a:	f005 fbbb 	bl	3c5d4 <printk>
   36e5e:	4841      	ldr	r0, [pc, #260]	; (36f64 <z_impl_k_msgq_put+0x124>)
   36e60:	f005 fbb8 	bl	3c5d4 <printk>
   36e64:	2176      	movs	r1, #118	; 0x76
   36e66:	483d      	ldr	r0, [pc, #244]	; (36f5c <z_impl_k_msgq_put+0x11c>)
   36e68:	f005 fbfa 	bl	3c660 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   36e6c:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   36e70:	f04f 0320 	mov.w	r3, #32
   36e74:	f3ef 8711 	mrs	r7, BASEPRI
   36e78:	f383 8811 	msr	BASEPRI, r3
   36e7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36e80:	4628      	mov	r0, r5
   36e82:	f001 fe39 	bl	38af8 <z_spin_lock_valid>
   36e86:	b968      	cbnz	r0, 36ea4 <z_impl_k_msgq_put+0x64>
   36e88:	234a      	movs	r3, #74	; 0x4a
   36e8a:	4a37      	ldr	r2, [pc, #220]	; (36f68 <z_impl_k_msgq_put+0x128>)
   36e8c:	4937      	ldr	r1, [pc, #220]	; (36f6c <z_impl_k_msgq_put+0x12c>)
   36e8e:	4834      	ldr	r0, [pc, #208]	; (36f60 <z_impl_k_msgq_put+0x120>)
   36e90:	f005 fba0 	bl	3c5d4 <printk>
   36e94:	4629      	mov	r1, r5
   36e96:	4836      	ldr	r0, [pc, #216]	; (36f70 <z_impl_k_msgq_put+0x130>)
   36e98:	f005 fb9c 	bl	3c5d4 <printk>
   36e9c:	214a      	movs	r1, #74	; 0x4a
   36e9e:	4832      	ldr	r0, [pc, #200]	; (36f68 <z_impl_k_msgq_put+0x128>)
   36ea0:	f005 fbde 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   36ea4:	4628      	mov	r0, r5
   36ea6:	f001 fe45 	bl	38b34 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   36eaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
   36eac:	6923      	ldr	r3, [r4, #16]
   36eae:	429a      	cmp	r2, r3
   36eb0:	d242      	bcs.n	36f38 <z_impl_k_msgq_put+0xf8>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   36eb2:	4620      	mov	r0, r4
   36eb4:	f001 fb02 	bl	384bc <z_unpend_first_thread>
		if (pending_thread != NULL) {
   36eb8:	68e2      	ldr	r2, [r4, #12]
   36eba:	4606      	mov	r6, r0
   36ebc:	4641      	mov	r1, r8
   36ebe:	b1a0      	cbz	r0, 36eea <z_impl_k_msgq_put+0xaa>
   36ec0:	6940      	ldr	r0, [r0, #20]
   36ec2:	f007 ff02 	bl	3ecca <memcpy>
   36ec6:	2300      	movs	r3, #0
   36ec8:	66b3      	str	r3, [r6, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   36eca:	7b73      	ldrb	r3, [r6, #13]
   36ecc:	06db      	lsls	r3, r3, #27
   36ece:	d104      	bne.n	36eda <z_impl_k_msgq_put+0x9a>
	if (z_is_thread_ready(thread)) {
   36ed0:	69b3      	ldr	r3, [r6, #24]
   36ed2:	b913      	cbnz	r3, 36eda <z_impl_k_msgq_put+0x9a>
		z_add_thread_to_ready_q(thread);
   36ed4:	4630      	mov	r0, r6
   36ed6:	f000 fe7b 	bl	37bd0 <z_add_thread_to_ready_q>
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   36eda:	4639      	mov	r1, r7
   36edc:	4628      	mov	r0, r5
   36ede:	f000 fc8d 	bl	377fc <z_reschedule>
			return 0;
   36ee2:	2400      	movs	r4, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   36ee4:	4620      	mov	r0, r4
   36ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36eea:	6a20      	ldr	r0, [r4, #32]
   36eec:	f007 feed 	bl	3ecca <memcpy>
			msgq->write_ptr += msgq->msg_size;
   36ef0:	6a23      	ldr	r3, [r4, #32]
   36ef2:	68e2      	ldr	r2, [r4, #12]
   36ef4:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   36ef6:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   36ef8:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   36efa:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   36efc:	bf04      	itt	eq
   36efe:	6963      	ldreq	r3, [r4, #20]
   36f00:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   36f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36f04:	3301      	adds	r3, #1
   36f06:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   36f08:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36f0a:	4628      	mov	r0, r5
   36f0c:	f001 fe02 	bl	38b14 <z_spin_unlock_valid>
   36f10:	b968      	cbnz	r0, 36f2e <z_impl_k_msgq_put+0xee>
   36f12:	235d      	movs	r3, #93	; 0x5d
   36f14:	4a14      	ldr	r2, [pc, #80]	; (36f68 <z_impl_k_msgq_put+0x128>)
   36f16:	4917      	ldr	r1, [pc, #92]	; (36f74 <z_impl_k_msgq_put+0x134>)
   36f18:	4811      	ldr	r0, [pc, #68]	; (36f60 <z_impl_k_msgq_put+0x120>)
   36f1a:	f005 fb5b 	bl	3c5d4 <printk>
   36f1e:	4629      	mov	r1, r5
   36f20:	4815      	ldr	r0, [pc, #84]	; (36f78 <z_impl_k_msgq_put+0x138>)
   36f22:	f005 fb57 	bl	3c5d4 <printk>
   36f26:	215d      	movs	r1, #93	; 0x5d
   36f28:	480f      	ldr	r0, [pc, #60]	; (36f68 <z_impl_k_msgq_put+0x128>)
   36f2a:	f005 fb99 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   36f2e:	f387 8811 	msr	BASEPRI, r7
   36f32:	f3bf 8f6f 	isb	sy
	return result;
   36f36:	e7d5      	b.n	36ee4 <z_impl_k_msgq_put+0xa4>
	} else if (timeout == K_NO_WAIT) {
   36f38:	b15e      	cbz	r6, 36f52 <z_impl_k_msgq_put+0x112>
		_current->base.swap_data = data;
   36f3a:	4b10      	ldr	r3, [pc, #64]	; (36f7c <z_impl_k_msgq_put+0x13c>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36f3c:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   36f3e:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36f40:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   36f42:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36f46:	4628      	mov	r0, r5
   36f48:	4633      	mov	r3, r6
}
   36f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36f4e:	f001 b9f9 	b.w	38344 <z_pend_curr>
		result = -ENOMSG;
   36f52:	f06f 0422 	mvn.w	r4, #34	; 0x22
   36f56:	e7d8      	b.n	36f0a <z_impl_k_msgq_put+0xca>
   36f58:	0004675c 	.word	0x0004675c
   36f5c:	00046741 	.word	0x00046741
   36f60:	00041757 	.word	0x00041757
   36f64:	0004311f 	.word	0x0004311f
   36f68:	00042269 	.word	0x00042269
   36f6c:	00042288 	.word	0x00042288
   36f70:	0004229d 	.word	0x0004229d
   36f74:	000422b5 	.word	0x000422b5
   36f78:	000422cc 	.word	0x000422cc
   36f7c:	20029368 	.word	0x20029368

00036f80 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   36f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36f84:	4604      	mov	r4, r0
   36f86:	4688      	mov	r8, r1
   36f88:	4615      	mov	r5, r2
   36f8a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   36f8e:	b16b      	cbz	r3, 36fac <z_impl_k_msgq_get+0x2c>
   36f90:	b162      	cbz	r2, 36fac <z_impl_k_msgq_get+0x2c>
   36f92:	4947      	ldr	r1, [pc, #284]	; (370b0 <z_impl_k_msgq_get+0x130>)
   36f94:	23c1      	movs	r3, #193	; 0xc1
   36f96:	4a47      	ldr	r2, [pc, #284]	; (370b4 <z_impl_k_msgq_get+0x134>)
   36f98:	4847      	ldr	r0, [pc, #284]	; (370b8 <z_impl_k_msgq_get+0x138>)
   36f9a:	f005 fb1b 	bl	3c5d4 <printk>
   36f9e:	4847      	ldr	r0, [pc, #284]	; (370bc <z_impl_k_msgq_get+0x13c>)
   36fa0:	f005 fb18 	bl	3c5d4 <printk>
   36fa4:	21c1      	movs	r1, #193	; 0xc1
   36fa6:	4843      	ldr	r0, [pc, #268]	; (370b4 <z_impl_k_msgq_get+0x134>)
   36fa8:	f005 fb5a 	bl	3c660 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   36fac:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   36fb0:	f04f 0320 	mov.w	r3, #32
   36fb4:	f3ef 8711 	mrs	r7, BASEPRI
   36fb8:	f383 8811 	msr	BASEPRI, r3
   36fbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36fc0:	4630      	mov	r0, r6
   36fc2:	f001 fd99 	bl	38af8 <z_spin_lock_valid>
   36fc6:	b968      	cbnz	r0, 36fe4 <z_impl_k_msgq_get+0x64>
   36fc8:	234a      	movs	r3, #74	; 0x4a
   36fca:	4a3d      	ldr	r2, [pc, #244]	; (370c0 <z_impl_k_msgq_get+0x140>)
   36fcc:	493d      	ldr	r1, [pc, #244]	; (370c4 <z_impl_k_msgq_get+0x144>)
   36fce:	483a      	ldr	r0, [pc, #232]	; (370b8 <z_impl_k_msgq_get+0x138>)
   36fd0:	f005 fb00 	bl	3c5d4 <printk>
   36fd4:	4631      	mov	r1, r6
   36fd6:	483c      	ldr	r0, [pc, #240]	; (370c8 <z_impl_k_msgq_get+0x148>)
   36fd8:	f005 fafc 	bl	3c5d4 <printk>
   36fdc:	214a      	movs	r1, #74	; 0x4a
   36fde:	4838      	ldr	r0, [pc, #224]	; (370c0 <z_impl_k_msgq_get+0x140>)
   36fe0:	f005 fb3e 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   36fe4:	4630      	mov	r0, r6
   36fe6:	f001 fda5 	bl	38b34 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   36fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36fec:	2b00      	cmp	r3, #0
   36fee:	d039      	beq.n	37064 <z_impl_k_msgq_get+0xe4>
   36ff0:	68e2      	ldr	r2, [r4, #12]
   36ff2:	69e1      	ldr	r1, [r4, #28]
   36ff4:	4640      	mov	r0, r8
   36ff6:	f007 fe68 	bl	3ecca <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   36ffa:	69e3      	ldr	r3, [r4, #28]
   36ffc:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   36ffe:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   37000:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   37002:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   37004:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   37006:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   37008:	bf04      	itt	eq
   3700a:	6963      	ldreq	r3, [r4, #20]
   3700c:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   3700e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   37010:	3b01      	subs	r3, #1
   37012:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   37014:	f001 fa52 	bl	384bc <z_unpend_first_thread>
		if (pending_thread != NULL) {
   37018:	4605      	mov	r5, r0
   3701a:	2800      	cmp	r0, #0
   3701c:	d031      	beq.n	37082 <z_impl_k_msgq_get+0x102>
   3701e:	68e2      	ldr	r2, [r4, #12]
   37020:	6941      	ldr	r1, [r0, #20]
   37022:	6a20      	ldr	r0, [r4, #32]
   37024:	f007 fe51 	bl	3ecca <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   37028:	6a23      	ldr	r3, [r4, #32]
   3702a:	68e2      	ldr	r2, [r4, #12]
   3702c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3702e:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   37030:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   37032:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   37034:	bf04      	itt	eq
   37036:	6963      	ldreq	r3, [r4, #20]
   37038:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   3703a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3703c:	3301      	adds	r3, #1
   3703e:	6263      	str	r3, [r4, #36]	; 0x24
   37040:	2300      	movs	r3, #0
   37042:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   37044:	7b6b      	ldrb	r3, [r5, #13]
   37046:	06db      	lsls	r3, r3, #27
   37048:	d104      	bne.n	37054 <z_impl_k_msgq_get+0xd4>
	if (z_is_thread_ready(thread)) {
   3704a:	69ab      	ldr	r3, [r5, #24]
   3704c:	b913      	cbnz	r3, 37054 <z_impl_k_msgq_get+0xd4>
		z_add_thread_to_ready_q(thread);
   3704e:	4628      	mov	r0, r5
   37050:	f000 fdbe 	bl	37bd0 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   37054:	4639      	mov	r1, r7
   37056:	4630      	mov	r0, r6
   37058:	f000 fbd0 	bl	377fc <z_reschedule>
			return 0;
   3705c:	2500      	movs	r5, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3705e:	4628      	mov	r0, r5
   37060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   37064:	b15d      	cbz	r5, 3707e <z_impl_k_msgq_get+0xfe>
		_current->base.swap_data = data;
   37066:	4b19      	ldr	r3, [pc, #100]	; (370cc <z_impl_k_msgq_get+0x14c>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   37068:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   3706a:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3706c:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   3706e:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   37072:	4630      	mov	r0, r6
   37074:	462b      	mov	r3, r5
}
   37076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3707a:	f001 b963 	b.w	38344 <z_pend_curr>
		result = -ENOMSG;
   3707e:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37082:	4630      	mov	r0, r6
   37084:	f001 fd46 	bl	38b14 <z_spin_unlock_valid>
   37088:	b968      	cbnz	r0, 370a6 <z_impl_k_msgq_get+0x126>
   3708a:	235d      	movs	r3, #93	; 0x5d
   3708c:	4a0c      	ldr	r2, [pc, #48]	; (370c0 <z_impl_k_msgq_get+0x140>)
   3708e:	4910      	ldr	r1, [pc, #64]	; (370d0 <z_impl_k_msgq_get+0x150>)
   37090:	4809      	ldr	r0, [pc, #36]	; (370b8 <z_impl_k_msgq_get+0x138>)
   37092:	f005 fa9f 	bl	3c5d4 <printk>
   37096:	4631      	mov	r1, r6
   37098:	480e      	ldr	r0, [pc, #56]	; (370d4 <z_impl_k_msgq_get+0x154>)
   3709a:	f005 fa9b 	bl	3c5d4 <printk>
   3709e:	215d      	movs	r1, #93	; 0x5d
   370a0:	4807      	ldr	r0, [pc, #28]	; (370c0 <z_impl_k_msgq_get+0x140>)
   370a2:	f005 fadd 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   370a6:	f387 8811 	msr	BASEPRI, r7
   370aa:	f3bf 8f6f 	isb	sy
	return result;
   370ae:	e7d6      	b.n	3705e <z_impl_k_msgq_get+0xde>
   370b0:	0004675c 	.word	0x0004675c
   370b4:	00046741 	.word	0x00046741
   370b8:	00041757 	.word	0x00041757
   370bc:	0004311f 	.word	0x0004311f
   370c0:	00042269 	.word	0x00042269
   370c4:	00042288 	.word	0x00042288
   370c8:	0004229d 	.word	0x0004229d
   370cc:	20029368 	.word	0x20029368
   370d0:	000422b5 	.word	0x000422b5
   370d4:	000422cc 	.word	0x000422cc

000370d8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   370d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   370da:	4604      	mov	r4, r0
   370dc:	460e      	mov	r6, r1
	__asm__ volatile(
   370de:	f04f 0320 	mov.w	r3, #32
   370e2:	f3ef 8511 	mrs	r5, BASEPRI
   370e6:	f383 8811 	msr	BASEPRI, r3
   370ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   370ee:	4861      	ldr	r0, [pc, #388]	; (37274 <z_impl_k_mutex_lock+0x19c>)
   370f0:	f001 fd02 	bl	38af8 <z_spin_lock_valid>
   370f4:	b968      	cbnz	r0, 37112 <z_impl_k_mutex_lock+0x3a>
   370f6:	234a      	movs	r3, #74	; 0x4a
   370f8:	4a5f      	ldr	r2, [pc, #380]	; (37278 <z_impl_k_mutex_lock+0x1a0>)
   370fa:	4960      	ldr	r1, [pc, #384]	; (3727c <z_impl_k_mutex_lock+0x1a4>)
   370fc:	4860      	ldr	r0, [pc, #384]	; (37280 <z_impl_k_mutex_lock+0x1a8>)
   370fe:	f005 fa69 	bl	3c5d4 <printk>
   37102:	495c      	ldr	r1, [pc, #368]	; (37274 <z_impl_k_mutex_lock+0x19c>)
   37104:	485f      	ldr	r0, [pc, #380]	; (37284 <z_impl_k_mutex_lock+0x1ac>)
   37106:	f005 fa65 	bl	3c5d4 <printk>
   3710a:	214a      	movs	r1, #74	; 0x4a
   3710c:	485a      	ldr	r0, [pc, #360]	; (37278 <z_impl_k_mutex_lock+0x1a0>)
   3710e:	f005 faa7 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   37112:	4858      	ldr	r0, [pc, #352]	; (37274 <z_impl_k_mutex_lock+0x19c>)
   37114:	f001 fd0e 	bl	38b34 <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   37118:	68e3      	ldr	r3, [r4, #12]
   3711a:	4a5b      	ldr	r2, [pc, #364]	; (37288 <z_impl_k_mutex_lock+0x1b0>)
   3711c:	b1f3      	cbz	r3, 3715c <z_impl_k_mutex_lock+0x84>
   3711e:	68a0      	ldr	r0, [r4, #8]
   37120:	6891      	ldr	r1, [r2, #8]
   37122:	4288      	cmp	r0, r1
   37124:	d03a      	beq.n	3719c <z_impl_k_mutex_lock+0xc4>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   37126:	2e00      	cmp	r6, #0
   37128:	d13a      	bne.n	371a0 <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3712a:	4852      	ldr	r0, [pc, #328]	; (37274 <z_impl_k_mutex_lock+0x19c>)
   3712c:	f001 fcf2 	bl	38b14 <z_spin_unlock_valid>
   37130:	b968      	cbnz	r0, 3714e <z_impl_k_mutex_lock+0x76>
   37132:	235d      	movs	r3, #93	; 0x5d
   37134:	4a50      	ldr	r2, [pc, #320]	; (37278 <z_impl_k_mutex_lock+0x1a0>)
   37136:	4955      	ldr	r1, [pc, #340]	; (3728c <z_impl_k_mutex_lock+0x1b4>)
   37138:	4851      	ldr	r0, [pc, #324]	; (37280 <z_impl_k_mutex_lock+0x1a8>)
   3713a:	f005 fa4b 	bl	3c5d4 <printk>
   3713e:	494d      	ldr	r1, [pc, #308]	; (37274 <z_impl_k_mutex_lock+0x19c>)
   37140:	4853      	ldr	r0, [pc, #332]	; (37290 <z_impl_k_mutex_lock+0x1b8>)
   37142:	f005 fa47 	bl	3c5d4 <printk>
   37146:	215d      	movs	r1, #93	; 0x5d
   37148:	484b      	ldr	r0, [pc, #300]	; (37278 <z_impl_k_mutex_lock+0x1a0>)
   3714a:	f005 fa89 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   3714e:	f385 8811 	msr	BASEPRI, r5
   37152:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   37156:	f06f 000f 	mvn.w	r0, #15
   3715a:	e01e      	b.n	3719a <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   3715c:	6891      	ldr	r1, [r2, #8]
   3715e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   37162:	3301      	adds	r3, #1
   37164:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   37166:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   37168:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   3716a:	60a3      	str	r3, [r4, #8]
   3716c:	4841      	ldr	r0, [pc, #260]	; (37274 <z_impl_k_mutex_lock+0x19c>)
   3716e:	f001 fcd1 	bl	38b14 <z_spin_unlock_valid>
   37172:	b968      	cbnz	r0, 37190 <z_impl_k_mutex_lock+0xb8>
   37174:	235d      	movs	r3, #93	; 0x5d
   37176:	4a40      	ldr	r2, [pc, #256]	; (37278 <z_impl_k_mutex_lock+0x1a0>)
   37178:	4944      	ldr	r1, [pc, #272]	; (3728c <z_impl_k_mutex_lock+0x1b4>)
   3717a:	4841      	ldr	r0, [pc, #260]	; (37280 <z_impl_k_mutex_lock+0x1a8>)
   3717c:	f005 fa2a 	bl	3c5d4 <printk>
   37180:	493c      	ldr	r1, [pc, #240]	; (37274 <z_impl_k_mutex_lock+0x19c>)
   37182:	4843      	ldr	r0, [pc, #268]	; (37290 <z_impl_k_mutex_lock+0x1b8>)
   37184:	f005 fa26 	bl	3c5d4 <printk>
   37188:	215d      	movs	r1, #93	; 0x5d
   3718a:	483b      	ldr	r0, [pc, #236]	; (37278 <z_impl_k_mutex_lock+0x1a0>)
   3718c:	f005 fa68 	bl	3c660 <assert_post_action>
   37190:	f385 8811 	msr	BASEPRI, r5
   37194:	f3bf 8f6f 	isb	sy
		return 0;
   37198:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   3719a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   3719c:	6921      	ldr	r1, [r4, #16]
   3719e:	e7e0      	b.n	37162 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   371a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   371a4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   371a8:	4299      	cmp	r1, r3
   371aa:	bfa8      	it	ge
   371ac:	4619      	movge	r1, r3
   371ae:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   371b2:	4299      	cmp	r1, r3
   371b4:	da40      	bge.n	37238 <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   371b6:	f001 f8f3 	bl	383a0 <z_set_prio>
   371ba:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   371bc:	4633      	mov	r3, r6
   371be:	4622      	mov	r2, r4
   371c0:	4629      	mov	r1, r5
   371c2:	482c      	ldr	r0, [pc, #176]	; (37274 <z_impl_k_mutex_lock+0x19c>)
   371c4:	f001 f8be 	bl	38344 <z_pend_curr>
	if (got_mutex == 0) {
   371c8:	2800      	cmp	r0, #0
   371ca:	d0e6      	beq.n	3719a <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   371cc:	f04f 0320 	mov.w	r3, #32
   371d0:	f3ef 8511 	mrs	r5, BASEPRI
   371d4:	f383 8811 	msr	BASEPRI, r3
   371d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   371dc:	4825      	ldr	r0, [pc, #148]	; (37274 <z_impl_k_mutex_lock+0x19c>)
   371de:	f001 fc8b 	bl	38af8 <z_spin_lock_valid>
   371e2:	b968      	cbnz	r0, 37200 <z_impl_k_mutex_lock+0x128>
   371e4:	234a      	movs	r3, #74	; 0x4a
   371e6:	4a24      	ldr	r2, [pc, #144]	; (37278 <z_impl_k_mutex_lock+0x1a0>)
   371e8:	4924      	ldr	r1, [pc, #144]	; (3727c <z_impl_k_mutex_lock+0x1a4>)
   371ea:	4825      	ldr	r0, [pc, #148]	; (37280 <z_impl_k_mutex_lock+0x1a8>)
   371ec:	f005 f9f2 	bl	3c5d4 <printk>
   371f0:	4920      	ldr	r1, [pc, #128]	; (37274 <z_impl_k_mutex_lock+0x19c>)
   371f2:	4824      	ldr	r0, [pc, #144]	; (37284 <z_impl_k_mutex_lock+0x1ac>)
   371f4:	f005 f9ee 	bl	3c5d4 <printk>
   371f8:	214a      	movs	r1, #74	; 0x4a
   371fa:	481f      	ldr	r0, [pc, #124]	; (37278 <z_impl_k_mutex_lock+0x1a0>)
   371fc:	f005 fa30 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   37200:	481c      	ldr	r0, [pc, #112]	; (37274 <z_impl_k_mutex_lock+0x19c>)
   37202:	f001 fc97 	bl	38b34 <z_spin_lock_set_owner>
	return list->head == list;
   37206:	6823      	ldr	r3, [r4, #0]
   37208:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3720a:	429c      	cmp	r4, r3
   3720c:	d007      	beq.n	3721e <z_impl_k_mutex_lock+0x146>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   3720e:	b133      	cbz	r3, 3721e <z_impl_k_mutex_lock+0x146>
   37210:	f993 300e 	ldrsb.w	r3, [r3, #14]
   37214:	4299      	cmp	r1, r3
   37216:	bfa8      	it	ge
   37218:	4619      	movge	r1, r3
   3721a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3721e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   37220:	f990 300e 	ldrsb.w	r3, [r0, #14]
   37224:	4299      	cmp	r1, r3
   37226:	d109      	bne.n	3723c <z_impl_k_mutex_lock+0x164>
	if (resched) {
   37228:	b16f      	cbz	r7, 37246 <z_impl_k_mutex_lock+0x16e>
		z_reschedule(&lock, key);
   3722a:	4629      	mov	r1, r5
   3722c:	4811      	ldr	r0, [pc, #68]	; (37274 <z_impl_k_mutex_lock+0x19c>)
   3722e:	f000 fae5 	bl	377fc <z_reschedule>
	return -EAGAIN;
   37232:	f06f 000a 	mvn.w	r0, #10
   37236:	e7b0      	b.n	3719a <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   37238:	2700      	movs	r7, #0
   3723a:	e7bf      	b.n	371bc <z_impl_k_mutex_lock+0xe4>
		return z_set_prio(mutex->owner, new_prio);
   3723c:	f001 f8b0 	bl	383a0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   37240:	2800      	cmp	r0, #0
   37242:	d1f2      	bne.n	3722a <z_impl_k_mutex_lock+0x152>
   37244:	e7f0      	b.n	37228 <z_impl_k_mutex_lock+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37246:	480b      	ldr	r0, [pc, #44]	; (37274 <z_impl_k_mutex_lock+0x19c>)
   37248:	f001 fc64 	bl	38b14 <z_spin_unlock_valid>
   3724c:	b968      	cbnz	r0, 3726a <z_impl_k_mutex_lock+0x192>
   3724e:	235d      	movs	r3, #93	; 0x5d
   37250:	4a09      	ldr	r2, [pc, #36]	; (37278 <z_impl_k_mutex_lock+0x1a0>)
   37252:	490e      	ldr	r1, [pc, #56]	; (3728c <z_impl_k_mutex_lock+0x1b4>)
   37254:	480a      	ldr	r0, [pc, #40]	; (37280 <z_impl_k_mutex_lock+0x1a8>)
   37256:	f005 f9bd 	bl	3c5d4 <printk>
   3725a:	4906      	ldr	r1, [pc, #24]	; (37274 <z_impl_k_mutex_lock+0x19c>)
   3725c:	480c      	ldr	r0, [pc, #48]	; (37290 <z_impl_k_mutex_lock+0x1b8>)
   3725e:	f005 f9b9 	bl	3c5d4 <printk>
   37262:	215d      	movs	r1, #93	; 0x5d
   37264:	4804      	ldr	r0, [pc, #16]	; (37278 <z_impl_k_mutex_lock+0x1a0>)
   37266:	f005 f9fb 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   3726a:	f385 8811 	msr	BASEPRI, r5
   3726e:	f3bf 8f6f 	isb	sy
   37272:	e7de      	b.n	37232 <z_impl_k_mutex_lock+0x15a>
   37274:	20029364 	.word	0x20029364
   37278:	00042269 	.word	0x00042269
   3727c:	00042288 	.word	0x00042288
   37280:	00041757 	.word	0x00041757
   37284:	0004229d 	.word	0x0004229d
   37288:	20029368 	.word	0x20029368
   3728c:	000422b5 	.word	0x000422b5
   37290:	000422cc 	.word	0x000422cc

00037294 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   37294:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   37296:	6883      	ldr	r3, [r0, #8]
{
   37298:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   3729a:	2b00      	cmp	r3, #0
   3729c:	f000 8096 	beq.w	373cc <z_impl_k_mutex_unlock+0x138>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   372a0:	4d4d      	ldr	r5, [pc, #308]	; (373d8 <z_impl_k_mutex_unlock+0x144>)
   372a2:	68aa      	ldr	r2, [r5, #8]
   372a4:	4293      	cmp	r3, r2
   372a6:	f040 8094 	bne.w	373d2 <z_impl_k_mutex_unlock+0x13e>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   372aa:	68c3      	ldr	r3, [r0, #12]
   372ac:	b94b      	cbnz	r3, 372c2 <z_impl_k_mutex_unlock+0x2e>
   372ae:	494b      	ldr	r1, [pc, #300]	; (373dc <z_impl_k_mutex_unlock+0x148>)
   372b0:	484b      	ldr	r0, [pc, #300]	; (373e0 <z_impl_k_mutex_unlock+0x14c>)
   372b2:	23e5      	movs	r3, #229	; 0xe5
   372b4:	4a4b      	ldr	r2, [pc, #300]	; (373e4 <z_impl_k_mutex_unlock+0x150>)
   372b6:	f005 f98d 	bl	3c5d4 <printk>
   372ba:	21e5      	movs	r1, #229	; 0xe5
   372bc:	4849      	ldr	r0, [pc, #292]	; (373e4 <z_impl_k_mutex_unlock+0x150>)
   372be:	f005 f9cf 	bl	3c660 <assert_post_action>
   372c2:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   372c6:	b173      	cbz	r3, 372e6 <z_impl_k_mutex_unlock+0x52>
   372c8:	4947      	ldr	r1, [pc, #284]	; (373e8 <z_impl_k_mutex_unlock+0x154>)
   372ca:	f240 130d 	movw	r3, #269	; 0x10d
   372ce:	4a47      	ldr	r2, [pc, #284]	; (373ec <z_impl_k_mutex_unlock+0x158>)
   372d0:	4843      	ldr	r0, [pc, #268]	; (373e0 <z_impl_k_mutex_unlock+0x14c>)
   372d2:	f005 f97f 	bl	3c5d4 <printk>
   372d6:	4846      	ldr	r0, [pc, #280]	; (373f0 <z_impl_k_mutex_unlock+0x15c>)
   372d8:	f005 f97c 	bl	3c5d4 <printk>
   372dc:	f240 110d 	movw	r1, #269	; 0x10d
   372e0:	4842      	ldr	r0, [pc, #264]	; (373ec <z_impl_k_mutex_unlock+0x158>)
   372e2:	f005 f9bd 	bl	3c660 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   372e6:	68ab      	ldr	r3, [r5, #8]
   372e8:	7bdb      	ldrb	r3, [r3, #15]
   372ea:	2b01      	cmp	r3, #1
   372ec:	d10e      	bne.n	3730c <z_impl_k_mutex_unlock+0x78>
   372ee:	4941      	ldr	r1, [pc, #260]	; (373f4 <z_impl_k_mutex_unlock+0x160>)
   372f0:	f44f 7387 	mov.w	r3, #270	; 0x10e
   372f4:	4a3d      	ldr	r2, [pc, #244]	; (373ec <z_impl_k_mutex_unlock+0x158>)
   372f6:	483a      	ldr	r0, [pc, #232]	; (373e0 <z_impl_k_mutex_unlock+0x14c>)
   372f8:	f005 f96c 	bl	3c5d4 <printk>
   372fc:	483c      	ldr	r0, [pc, #240]	; (373f0 <z_impl_k_mutex_unlock+0x15c>)
   372fe:	f005 f969 	bl	3c5d4 <printk>
   37302:	f44f 7187 	mov.w	r1, #270	; 0x10e
   37306:	4839      	ldr	r0, [pc, #228]	; (373ec <z_impl_k_mutex_unlock+0x158>)
   37308:	f005 f9aa 	bl	3c660 <assert_post_action>

	--_current->base.sched_locked;
   3730c:	68aa      	ldr	r2, [r5, #8]
   3730e:	7bd3      	ldrb	r3, [r2, #15]
   37310:	3b01      	subs	r3, #1
   37312:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   37314:	68e3      	ldr	r3, [r4, #12]
   37316:	2b01      	cmp	r3, #1
   37318:	d005      	beq.n	37326 <z_impl_k_mutex_unlock+0x92>
		mutex->lock_count--;
   3731a:	3b01      	subs	r3, #1
   3731c:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   3731e:	f000 fbdb 	bl	37ad8 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   37322:	2000      	movs	r0, #0
}
   37324:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   37326:	f04f 0320 	mov.w	r3, #32
   3732a:	f3ef 8511 	mrs	r5, BASEPRI
   3732e:	f383 8811 	msr	BASEPRI, r3
   37332:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37336:	4830      	ldr	r0, [pc, #192]	; (373f8 <z_impl_k_mutex_unlock+0x164>)
   37338:	f001 fbde 	bl	38af8 <z_spin_lock_valid>
   3733c:	b968      	cbnz	r0, 3735a <z_impl_k_mutex_unlock+0xc6>
   3733e:	234a      	movs	r3, #74	; 0x4a
   37340:	4a2e      	ldr	r2, [pc, #184]	; (373fc <z_impl_k_mutex_unlock+0x168>)
   37342:	492f      	ldr	r1, [pc, #188]	; (37400 <z_impl_k_mutex_unlock+0x16c>)
   37344:	4826      	ldr	r0, [pc, #152]	; (373e0 <z_impl_k_mutex_unlock+0x14c>)
   37346:	f005 f945 	bl	3c5d4 <printk>
   3734a:	492b      	ldr	r1, [pc, #172]	; (373f8 <z_impl_k_mutex_unlock+0x164>)
   3734c:	482d      	ldr	r0, [pc, #180]	; (37404 <z_impl_k_mutex_unlock+0x170>)
   3734e:	f005 f941 	bl	3c5d4 <printk>
   37352:	214a      	movs	r1, #74	; 0x4a
   37354:	4829      	ldr	r0, [pc, #164]	; (373fc <z_impl_k_mutex_unlock+0x168>)
   37356:	f005 f983 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   3735a:	4827      	ldr	r0, [pc, #156]	; (373f8 <z_impl_k_mutex_unlock+0x164>)
   3735c:	f001 fbea 	bl	38b34 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   37360:	68a0      	ldr	r0, [r4, #8]
   37362:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   37364:	f990 300e 	ldrsb.w	r3, [r0, #14]
   37368:	4299      	cmp	r1, r3
   3736a:	d001      	beq.n	37370 <z_impl_k_mutex_unlock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   3736c:	f001 f818 	bl	383a0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   37370:	4620      	mov	r0, r4
   37372:	f001 f8a3 	bl	384bc <z_unpend_first_thread>
	mutex->owner = new_owner;
   37376:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   37378:	b180      	cbz	r0, 3739c <z_impl_k_mutex_unlock+0x108>
		mutex->owner_orig_prio = new_owner->base.prio;
   3737a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   3737e:	6122      	str	r2, [r4, #16]
   37380:	2200      	movs	r2, #0
   37382:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   37384:	7b42      	ldrb	r2, [r0, #13]
   37386:	06d2      	lsls	r2, r2, #27
   37388:	d103      	bne.n	37392 <z_impl_k_mutex_unlock+0xfe>
	if (z_is_thread_ready(thread)) {
   3738a:	6983      	ldr	r3, [r0, #24]
   3738c:	b90b      	cbnz	r3, 37392 <z_impl_k_mutex_unlock+0xfe>
		z_add_thread_to_ready_q(thread);
   3738e:	f000 fc1f 	bl	37bd0 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   37392:	4629      	mov	r1, r5
   37394:	4818      	ldr	r0, [pc, #96]	; (373f8 <z_impl_k_mutex_unlock+0x164>)
   37396:	f000 fa31 	bl	377fc <z_reschedule>
   3739a:	e7c0      	b.n	3731e <z_impl_k_mutex_unlock+0x8a>
		mutex->lock_count = 0U;
   3739c:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3739e:	4816      	ldr	r0, [pc, #88]	; (373f8 <z_impl_k_mutex_unlock+0x164>)
   373a0:	f001 fbb8 	bl	38b14 <z_spin_unlock_valid>
   373a4:	b968      	cbnz	r0, 373c2 <z_impl_k_mutex_unlock+0x12e>
   373a6:	235d      	movs	r3, #93	; 0x5d
   373a8:	4a14      	ldr	r2, [pc, #80]	; (373fc <z_impl_k_mutex_unlock+0x168>)
   373aa:	4917      	ldr	r1, [pc, #92]	; (37408 <z_impl_k_mutex_unlock+0x174>)
   373ac:	480c      	ldr	r0, [pc, #48]	; (373e0 <z_impl_k_mutex_unlock+0x14c>)
   373ae:	f005 f911 	bl	3c5d4 <printk>
   373b2:	4911      	ldr	r1, [pc, #68]	; (373f8 <z_impl_k_mutex_unlock+0x164>)
   373b4:	4815      	ldr	r0, [pc, #84]	; (3740c <z_impl_k_mutex_unlock+0x178>)
   373b6:	f005 f90d 	bl	3c5d4 <printk>
   373ba:	215d      	movs	r1, #93	; 0x5d
   373bc:	480f      	ldr	r0, [pc, #60]	; (373fc <z_impl_k_mutex_unlock+0x168>)
   373be:	f005 f94f 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   373c2:	f385 8811 	msr	BASEPRI, r5
   373c6:	f3bf 8f6f 	isb	sy
   373ca:	e7a8      	b.n	3731e <z_impl_k_mutex_unlock+0x8a>
		return -EINVAL;
   373cc:	f06f 0015 	mvn.w	r0, #21
   373d0:	e7a8      	b.n	37324 <z_impl_k_mutex_unlock+0x90>
		return -EPERM;
   373d2:	f04f 30ff 	mov.w	r0, #4294967295
   373d6:	e7a5      	b.n	37324 <z_impl_k_mutex_unlock+0x90>
   373d8:	20029368 	.word	0x20029368
   373dc:	00046799 	.word	0x00046799
   373e0:	00041757 	.word	0x00041757
   373e4:	0004677e 	.word	0x0004677e
   373e8:	000467d4 	.word	0x000467d4
   373ec:	000467b0 	.word	0x000467b0
   373f0:	0004311f 	.word	0x0004311f
   373f4:	000467e6 	.word	0x000467e6
   373f8:	20029364 	.word	0x20029364
   373fc:	00042269 	.word	0x00042269
   37400:	00042288 	.word	0x00042288
   37404:	0004229d 	.word	0x0004229d
   37408:	000422b5 	.word	0x000422b5
   3740c:	000422cc 	.word	0x000422cc

00037410 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   37410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   37414:	4604      	mov	r4, r0
   37416:	460e      	mov	r6, r1
   37418:	4690      	mov	r8, r2
   3741a:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3741c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   37420:	f04f 0320 	mov.w	r3, #32
   37424:	f3ef 8711 	mrs	r7, BASEPRI
   37428:	f383 8811 	msr	BASEPRI, r3
   3742c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37430:	4628      	mov	r0, r5
   37432:	f001 fb61 	bl	38af8 <z_spin_lock_valid>
   37436:	b968      	cbnz	r0, 37454 <queue_insert+0x44>
   37438:	234a      	movs	r3, #74	; 0x4a
   3743a:	4a33      	ldr	r2, [pc, #204]	; (37508 <queue_insert+0xf8>)
   3743c:	4933      	ldr	r1, [pc, #204]	; (3750c <queue_insert+0xfc>)
   3743e:	4834      	ldr	r0, [pc, #208]	; (37510 <queue_insert+0x100>)
   37440:	f005 f8c8 	bl	3c5d4 <printk>
   37444:	4629      	mov	r1, r5
   37446:	4833      	ldr	r0, [pc, #204]	; (37514 <queue_insert+0x104>)
   37448:	f005 f8c4 	bl	3c5d4 <printk>
   3744c:	214a      	movs	r1, #74	; 0x4a
   3744e:	482e      	ldr	r0, [pc, #184]	; (37508 <queue_insert+0xf8>)
   37450:	f005 f906 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   37454:	4628      	mov	r0, r5
   37456:	f001 fb6d 	bl	38b34 <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   3745a:	f1b9 0f00 	cmp.w	r9, #0
   3745e:	d02d      	beq.n	374bc <queue_insert+0xac>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   37460:	2008      	movs	r0, #8
   37462:	f7ff fcd7 	bl	36e14 <z_thread_malloc>
		if (anode == NULL) {
   37466:	b9c8      	cbnz	r0, 3749c <queue_insert+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37468:	4628      	mov	r0, r5
   3746a:	f001 fb53 	bl	38b14 <z_spin_unlock_valid>
   3746e:	b968      	cbnz	r0, 3748c <queue_insert+0x7c>
   37470:	235d      	movs	r3, #93	; 0x5d
   37472:	4a25      	ldr	r2, [pc, #148]	; (37508 <queue_insert+0xf8>)
   37474:	4928      	ldr	r1, [pc, #160]	; (37518 <queue_insert+0x108>)
   37476:	4826      	ldr	r0, [pc, #152]	; (37510 <queue_insert+0x100>)
   37478:	f005 f8ac 	bl	3c5d4 <printk>
   3747c:	4629      	mov	r1, r5
   3747e:	4827      	ldr	r0, [pc, #156]	; (3751c <queue_insert+0x10c>)
   37480:	f005 f8a8 	bl	3c5d4 <printk>
   37484:	215d      	movs	r1, #93	; 0x5d
   37486:	4820      	ldr	r0, [pc, #128]	; (37508 <queue_insert+0xf8>)
   37488:	f005 f8ea 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   3748c:	f387 8811 	msr	BASEPRI, r7
   37490:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   37494:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   37498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   3749c:	2301      	movs	r3, #1
		anode->data = data;
   3749e:	f8c0 8004 	str.w	r8, [r0, #4]
   374a2:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   374a4:	6803      	ldr	r3, [r0, #0]
   374a6:	f003 0203 	and.w	r2, r3, #3
   374aa:	b95e      	cbnz	r6, 374c4 <queue_insert+0xb4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   374ac:	6823      	ldr	r3, [r4, #0]
   374ae:	4313      	orrs	r3, r2
   374b0:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   374b2:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   374b4:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   374b6:	b973      	cbnz	r3, 374d6 <queue_insert+0xc6>
	list->tail = node;
   374b8:	6060      	str	r0, [r4, #4]
   374ba:	e00c      	b.n	374d6 <queue_insert+0xc6>
	node->next_and_flags = flags;
   374bc:	f8c8 9000 	str.w	r9, [r8]
   374c0:	4640      	mov	r0, r8
   374c2:	e7ef      	b.n	374a4 <queue_insert+0x94>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   374c4:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   374c6:	f033 0303 	bics.w	r3, r3, #3
   374ca:	d115      	bne.n	374f8 <queue_insert+0xe8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   374cc:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   374ce:	6862      	ldr	r2, [r4, #4]
   374d0:	b962      	cbnz	r2, 374ec <queue_insert+0xdc>
	list->head = node;
   374d2:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   374d6:	2104      	movs	r1, #4
   374d8:	f104 000c 	add.w	r0, r4, #12
   374dc:	f007 fbc6 	bl	3ec6c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   374e0:	4628      	mov	r0, r5
   374e2:	4639      	mov	r1, r7
   374e4:	f000 f98a 	bl	377fc <z_reschedule>
	return 0;
   374e8:	2000      	movs	r0, #0
   374ea:	e7d5      	b.n	37498 <queue_insert+0x88>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   374ec:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   374ee:	f003 0303 	and.w	r3, r3, #3
   374f2:	4303      	orrs	r3, r0
   374f4:	6013      	str	r3, [r2, #0]
   374f6:	e7df      	b.n	374b8 <queue_insert+0xa8>
   374f8:	4313      	orrs	r3, r2
   374fa:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   374fc:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   374fe:	f003 0303 	and.w	r3, r3, #3
   37502:	4318      	orrs	r0, r3
   37504:	6030      	str	r0, [r6, #0]
   37506:	e7e6      	b.n	374d6 <queue_insert+0xc6>
   37508:	00042269 	.word	0x00042269
   3750c:	00042288 	.word	0x00042288
   37510:	00041757 	.word	0x00041757
   37514:	0004229d 	.word	0x0004229d
   37518:	000422b5 	.word	0x000422b5
   3751c:	000422cc 	.word	0x000422cc

00037520 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   37520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37524:	4606      	mov	r6, r0
   37526:	b089      	sub	sp, #36	; 0x24
   37528:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3752a:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   3752e:	f04f 0320 	mov.w	r3, #32
   37532:	f3ef 8811 	mrs	r8, BASEPRI
   37536:	f383 8811 	msr	BASEPRI, r3
   3753a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3753e:	4620      	mov	r0, r4
   37540:	f001 fada 	bl	38af8 <z_spin_lock_valid>
   37544:	b968      	cbnz	r0, 37562 <z_impl_k_queue_get+0x42>
   37546:	234a      	movs	r3, #74	; 0x4a
   37548:	4a5f      	ldr	r2, [pc, #380]	; (376c8 <z_impl_k_queue_get+0x1a8>)
   3754a:	4960      	ldr	r1, [pc, #384]	; (376cc <z_impl_k_queue_get+0x1ac>)
   3754c:	4860      	ldr	r0, [pc, #384]	; (376d0 <z_impl_k_queue_get+0x1b0>)
   3754e:	f005 f841 	bl	3c5d4 <printk>
   37552:	4621      	mov	r1, r4
   37554:	485f      	ldr	r0, [pc, #380]	; (376d4 <z_impl_k_queue_get+0x1b4>)
   37556:	f005 f83d 	bl	3c5d4 <printk>
   3755a:	214a      	movs	r1, #74	; 0x4a
   3755c:	485a      	ldr	r0, [pc, #360]	; (376c8 <z_impl_k_queue_get+0x1a8>)
   3755e:	f005 f87f 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   37562:	4620      	mov	r0, r4
   37564:	f001 fae6 	bl	38b34 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   37568:	6835      	ldr	r5, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   3756a:	b335      	cbz	r5, 375ba <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3756c:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3756e:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   37570:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   37574:	4295      	cmp	r5, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   37576:	4628      	mov	r0, r5
	list->head = node;
   37578:	6033      	str	r3, [r6, #0]
	list->tail = node;
   3757a:	bf08      	it	eq
   3757c:	6073      	streq	r3, [r6, #4]
   3757e:	2101      	movs	r1, #1
   37580:	f007 fa23 	bl	3e9ca <z_queue_node_peek>
   37584:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37586:	4620      	mov	r0, r4
   37588:	f001 fac4 	bl	38b14 <z_spin_unlock_valid>
   3758c:	b968      	cbnz	r0, 375aa <z_impl_k_queue_get+0x8a>
   3758e:	235d      	movs	r3, #93	; 0x5d
   37590:	4a4d      	ldr	r2, [pc, #308]	; (376c8 <z_impl_k_queue_get+0x1a8>)
   37592:	4951      	ldr	r1, [pc, #324]	; (376d8 <z_impl_k_queue_get+0x1b8>)
   37594:	484e      	ldr	r0, [pc, #312]	; (376d0 <z_impl_k_queue_get+0x1b0>)
   37596:	f005 f81d 	bl	3c5d4 <printk>
   3759a:	4621      	mov	r1, r4
   3759c:	484f      	ldr	r0, [pc, #316]	; (376dc <z_impl_k_queue_get+0x1bc>)
   3759e:	f005 f819 	bl	3c5d4 <printk>
   375a2:	215d      	movs	r1, #93	; 0x5d
   375a4:	4848      	ldr	r0, [pc, #288]	; (376c8 <z_impl_k_queue_get+0x1a8>)
   375a6:	f005 f85b 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   375aa:	f388 8811 	msr	BASEPRI, r8
   375ae:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   375b2:	4628      	mov	r0, r5
   375b4:	b009      	add	sp, #36	; 0x24
   375b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   375ba:	4620      	mov	r0, r4
	if (timeout == K_NO_WAIT) {
   375bc:	2f00      	cmp	r7, #0
   375be:	d0e3      	beq.n	37588 <z_impl_k_queue_get+0x68>
   375c0:	f001 faa8 	bl	38b14 <z_spin_unlock_valid>
   375c4:	b968      	cbnz	r0, 375e2 <z_impl_k_queue_get+0xc2>
   375c6:	235d      	movs	r3, #93	; 0x5d
   375c8:	4a3f      	ldr	r2, [pc, #252]	; (376c8 <z_impl_k_queue_get+0x1a8>)
   375ca:	4943      	ldr	r1, [pc, #268]	; (376d8 <z_impl_k_queue_get+0x1b8>)
   375cc:	4840      	ldr	r0, [pc, #256]	; (376d0 <z_impl_k_queue_get+0x1b0>)
   375ce:	f005 f801 	bl	3c5d4 <printk>
   375d2:	4621      	mov	r1, r4
   375d4:	4841      	ldr	r0, [pc, #260]	; (376dc <z_impl_k_queue_get+0x1bc>)
   375d6:	f004 fffd 	bl	3c5d4 <printk>
   375da:	215d      	movs	r1, #93	; 0x5d
   375dc:	483a      	ldr	r0, [pc, #232]	; (376c8 <z_impl_k_queue_get+0x1a8>)
   375de:	f005 f83f 	bl	3c660 <assert_post_action>
   375e2:	f388 8811 	msr	BASEPRI, r8
   375e6:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   375ea:	2200      	movs	r2, #0
   375ec:	4633      	mov	r3, r6
   375ee:	2104      	movs	r1, #4
   375f0:	a803      	add	r0, sp, #12
   375f2:	f002 fa79 	bl	39ae8 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   375f6:	1c7a      	adds	r2, r7, #1
   375f8:	d002      	beq.n	37600 <z_impl_k_queue_get+0xe0>
   375fa:	f007 fae0 	bl	3ebbe <z_impl_k_uptime_get>
   375fe:	4683      	mov	fp, r0
{
   37600:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37604:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 376c8 <z_impl_k_queue_get+0x1a8>
   37608:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 376d0 <z_impl_k_queue_get+0x1b0>
		event.state = K_POLL_STATE_NOT_READY;
   3760c:	9b06      	ldr	r3, [sp, #24]
   3760e:	f36f 3310 	bfc	r3, #12, #5
   37612:	9306      	str	r3, [sp, #24]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   37614:	2101      	movs	r1, #1
   37616:	eba7 0209 	sub.w	r2, r7, r9
   3761a:	a803      	add	r0, sp, #12
   3761c:	f002 fab6 	bl	39b8c <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   37620:	b118      	cbz	r0, 3762a <z_impl_k_queue_get+0x10a>
   37622:	300b      	adds	r0, #11
   37624:	d001      	beq.n	3762a <z_impl_k_queue_get+0x10a>
			return NULL;
   37626:	2500      	movs	r5, #0
   37628:	e7c3      	b.n	375b2 <z_impl_k_queue_get+0x92>
	__asm__ volatile(
   3762a:	f04f 0320 	mov.w	r3, #32
   3762e:	f3ef 8211 	mrs	r2, BASEPRI
   37632:	f383 8811 	msr	BASEPRI, r3
   37636:	f3bf 8f6f 	isb	sy
   3763a:	4620      	mov	r0, r4
   3763c:	9201      	str	r2, [sp, #4]
   3763e:	f001 fa5b 	bl	38af8 <z_spin_lock_valid>
   37642:	b968      	cbnz	r0, 37660 <z_impl_k_queue_get+0x140>
   37644:	234a      	movs	r3, #74	; 0x4a
   37646:	4642      	mov	r2, r8
   37648:	4920      	ldr	r1, [pc, #128]	; (376cc <z_impl_k_queue_get+0x1ac>)
   3764a:	4650      	mov	r0, sl
   3764c:	f004 ffc2 	bl	3c5d4 <printk>
   37650:	4621      	mov	r1, r4
   37652:	4820      	ldr	r0, [pc, #128]	; (376d4 <z_impl_k_queue_get+0x1b4>)
   37654:	f004 ffbe 	bl	3c5d4 <printk>
   37658:	214a      	movs	r1, #74	; 0x4a
   3765a:	4640      	mov	r0, r8
   3765c:	f005 f800 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   37660:	4620      	mov	r0, r4
   37662:	f001 fa67 	bl	38b34 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   37666:	6830      	ldr	r0, [r6, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   37668:	b138      	cbz	r0, 3767a <z_impl_k_queue_get+0x15a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3766a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3766c:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3766e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   37672:	4290      	cmp	r0, r2
	list->head = node;
   37674:	6033      	str	r3, [r6, #0]
	list->tail = node;
   37676:	bf08      	it	eq
   37678:	6073      	streq	r3, [r6, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   3767a:	2101      	movs	r1, #1
   3767c:	f007 f9a5 	bl	3e9ca <z_queue_node_peek>
   37680:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37682:	4620      	mov	r0, r4
   37684:	f001 fa46 	bl	38b14 <z_spin_unlock_valid>
   37688:	b968      	cbnz	r0, 376a6 <z_impl_k_queue_get+0x186>
   3768a:	235d      	movs	r3, #93	; 0x5d
   3768c:	4642      	mov	r2, r8
   3768e:	4912      	ldr	r1, [pc, #72]	; (376d8 <z_impl_k_queue_get+0x1b8>)
   37690:	4650      	mov	r0, sl
   37692:	f004 ff9f 	bl	3c5d4 <printk>
   37696:	4621      	mov	r1, r4
   37698:	4810      	ldr	r0, [pc, #64]	; (376dc <z_impl_k_queue_get+0x1bc>)
   3769a:	f004 ff9b 	bl	3c5d4 <printk>
   3769e:	215d      	movs	r1, #93	; 0x5d
   376a0:	4640      	mov	r0, r8
   376a2:	f004 ffdd 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   376a6:	9b01      	ldr	r3, [sp, #4]
   376a8:	f383 8811 	msr	BASEPRI, r3
   376ac:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   376b0:	2d00      	cmp	r5, #0
   376b2:	f47f af7e 	bne.w	375b2 <z_impl_k_queue_get+0x92>
   376b6:	1c7b      	adds	r3, r7, #1
   376b8:	d0a8      	beq.n	3760c <z_impl_k_queue_get+0xec>
	return z_impl_k_uptime_get();
   376ba:	f007 fa80 	bl	3ebbe <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   376be:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   376c2:	454f      	cmp	r7, r9
   376c4:	daa2      	bge.n	3760c <z_impl_k_queue_get+0xec>
   376c6:	e7ae      	b.n	37626 <z_impl_k_queue_get+0x106>
   376c8:	00042269 	.word	0x00042269
   376cc:	00042288 	.word	0x00042288
   376d0:	00041757 	.word	0x00041757
   376d4:	0004229d 	.word	0x0004229d
   376d8:	000422b5 	.word	0x000422b5
   376dc:	000422cc 	.word	0x000422cc

000376e0 <pended_on.isra.17>:
	}
}

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   376e0:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   376e2:	b510      	push	{r4, lr}
   376e4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   376e6:	b95b      	cbnz	r3, 37700 <pended_on.isra.17+0x20>
   376e8:	4906      	ldr	r1, [pc, #24]	; (37704 <pended_on.isra.17+0x24>)
   376ea:	4807      	ldr	r0, [pc, #28]	; (37708 <pended_on.isra.17+0x28>)
   376ec:	f240 139d 	movw	r3, #413	; 0x19d
   376f0:	4a06      	ldr	r2, [pc, #24]	; (3770c <pended_on.isra.17+0x2c>)
   376f2:	f004 ff6f 	bl	3c5d4 <printk>
   376f6:	f240 119d 	movw	r1, #413	; 0x19d
   376fa:	4804      	ldr	r0, [pc, #16]	; (3770c <pended_on.isra.17+0x2c>)
   376fc:	f004 ffb0 	bl	3c660 <assert_post_action>

	return thread->base.pended_on;
}
   37700:	6820      	ldr	r0, [r4, #0]
   37702:	bd10      	pop	{r4, pc}
   37704:	00046887 	.word	0x00046887
   37708:	00041757 	.word	0x00041757
   3770c:	0004686c 	.word	0x0004686c

00037710 <z_reset_time_slice>:
{
   37710:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   37712:	4c08      	ldr	r4, [pc, #32]	; (37734 <z_reset_time_slice+0x24>)
   37714:	6823      	ldr	r3, [r4, #0]
   37716:	b15b      	cbz	r3, 37730 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   37718:	f7ec fa4c 	bl	23bb4 <z_clock_elapsed>
   3771c:	6823      	ldr	r3, [r4, #0]
   3771e:	4a06      	ldr	r2, [pc, #24]	; (37738 <z_reset_time_slice+0x28>)
   37720:	4418      	add	r0, r3
   37722:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   37724:	2100      	movs	r1, #0
}
   37726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   3772a:	4618      	mov	r0, r3
   3772c:	f001 be9c 	b.w	39468 <z_set_timeout_expiry>
}
   37730:	bd10      	pop	{r4, pc}
   37732:	bf00      	nop
   37734:	200293a8 	.word	0x200293a8
   37738:	20029368 	.word	0x20029368

0003773c <k_sched_time_slice_set>:
{
   3773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3773e:	4607      	mov	r7, r0
   37740:	460d      	mov	r5, r1
	__asm__ volatile(
   37742:	f04f 0320 	mov.w	r3, #32
   37746:	f3ef 8411 	mrs	r4, BASEPRI
   3774a:	f383 8811 	msr	BASEPRI, r3
   3774e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37752:	4820      	ldr	r0, [pc, #128]	; (377d4 <k_sched_time_slice_set+0x98>)
   37754:	f001 f9d0 	bl	38af8 <z_spin_lock_valid>
   37758:	b968      	cbnz	r0, 37776 <k_sched_time_slice_set+0x3a>
   3775a:	234a      	movs	r3, #74	; 0x4a
   3775c:	4a1e      	ldr	r2, [pc, #120]	; (377d8 <k_sched_time_slice_set+0x9c>)
   3775e:	491f      	ldr	r1, [pc, #124]	; (377dc <k_sched_time_slice_set+0xa0>)
   37760:	481f      	ldr	r0, [pc, #124]	; (377e0 <k_sched_time_slice_set+0xa4>)
   37762:	f004 ff37 	bl	3c5d4 <printk>
   37766:	491b      	ldr	r1, [pc, #108]	; (377d4 <k_sched_time_slice_set+0x98>)
   37768:	481e      	ldr	r0, [pc, #120]	; (377e4 <k_sched_time_slice_set+0xa8>)
   3776a:	f004 ff33 	bl	3c5d4 <printk>
   3776e:	214a      	movs	r1, #74	; 0x4a
   37770:	4819      	ldr	r0, [pc, #100]	; (377d8 <k_sched_time_slice_set+0x9c>)
   37772:	f004 ff75 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   37776:	4817      	ldr	r0, [pc, #92]	; (377d4 <k_sched_time_slice_set+0x98>)
   37778:	f001 f9dc 	bl	38b34 <z_spin_lock_set_owner>
			return (u32_t)((t * to_hz + off) / from_hz);
   3777c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   37780:	2200      	movs	r2, #0
   37782:	f240 30e7 	movw	r0, #999	; 0x3e7
   37786:	2100      	movs	r1, #0
   37788:	4b17      	ldr	r3, [pc, #92]	; (377e8 <k_sched_time_slice_set+0xac>)
   3778a:	fbe6 0107 	umlal	r0, r1, r6, r7
   3778e:	611a      	str	r2, [r3, #16]
   37790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   37794:	2300      	movs	r3, #0
   37796:	f7e5 faf1 	bl	1cd7c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   3779a:	4b14      	ldr	r3, [pc, #80]	; (377ec <k_sched_time_slice_set+0xb0>)
   3779c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   3779e:	4b14      	ldr	r3, [pc, #80]	; (377f0 <k_sched_time_slice_set+0xb4>)
   377a0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   377a2:	f7ff ffb5 	bl	37710 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   377a6:	480b      	ldr	r0, [pc, #44]	; (377d4 <k_sched_time_slice_set+0x98>)
   377a8:	f001 f9b4 	bl	38b14 <z_spin_unlock_valid>
   377ac:	b968      	cbnz	r0, 377ca <k_sched_time_slice_set+0x8e>
   377ae:	235d      	movs	r3, #93	; 0x5d
   377b0:	4a09      	ldr	r2, [pc, #36]	; (377d8 <k_sched_time_slice_set+0x9c>)
   377b2:	4910      	ldr	r1, [pc, #64]	; (377f4 <k_sched_time_slice_set+0xb8>)
   377b4:	480a      	ldr	r0, [pc, #40]	; (377e0 <k_sched_time_slice_set+0xa4>)
   377b6:	f004 ff0d 	bl	3c5d4 <printk>
   377ba:	4906      	ldr	r1, [pc, #24]	; (377d4 <k_sched_time_slice_set+0x98>)
   377bc:	480e      	ldr	r0, [pc, #56]	; (377f8 <k_sched_time_slice_set+0xbc>)
   377be:	f004 ff09 	bl	3c5d4 <printk>
   377c2:	215d      	movs	r1, #93	; 0x5d
   377c4:	4804      	ldr	r0, [pc, #16]	; (377d8 <k_sched_time_slice_set+0x9c>)
   377c6:	f004 ff4b 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   377ca:	f384 8811 	msr	BASEPRI, r4
   377ce:	f3bf 8f6f 	isb	sy
}
   377d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   377d4:	200293a0 	.word	0x200293a0
   377d8:	00042269 	.word	0x00042269
   377dc:	00042288 	.word	0x00042288
   377e0:	00041757 	.word	0x00041757
   377e4:	0004229d 	.word	0x0004229d
   377e8:	20029368 	.word	0x20029368
   377ec:	200293a8 	.word	0x200293a8
   377f0:	200293a4 	.word	0x200293a4
   377f4:	000422b5 	.word	0x000422b5
   377f8:	000422cc 	.word	0x000422cc

000377fc <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   377fc:	b538      	push	{r3, r4, r5, lr}
   377fe:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   37800:	460d      	mov	r5, r1
   37802:	b9c1      	cbnz	r1, 37836 <z_reschedule+0x3a>
   37804:	f3ef 8305 	mrs	r3, IPSR
   37808:	b9ab      	cbnz	r3, 37836 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3780a:	f001 f983 	bl	38b14 <z_spin_unlock_valid>
   3780e:	b968      	cbnz	r0, 3782c <z_reschedule+0x30>
   37810:	2374      	movs	r3, #116	; 0x74
   37812:	4a14      	ldr	r2, [pc, #80]	; (37864 <z_reschedule+0x68>)
   37814:	4914      	ldr	r1, [pc, #80]	; (37868 <z_reschedule+0x6c>)
   37816:	4815      	ldr	r0, [pc, #84]	; (3786c <z_reschedule+0x70>)
   37818:	f004 fedc 	bl	3c5d4 <printk>
   3781c:	4621      	mov	r1, r4
   3781e:	4814      	ldr	r0, [pc, #80]	; (37870 <z_reschedule+0x74>)
   37820:	f004 fed8 	bl	3c5d4 <printk>
   37824:	2174      	movs	r1, #116	; 0x74
   37826:	480f      	ldr	r0, [pc, #60]	; (37864 <z_reschedule+0x68>)
   37828:	f004 ff1a 	bl	3c660 <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   3782c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   37830:	2000      	movs	r0, #0
   37832:	f7ec bb1b 	b.w	23e6c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37836:	4620      	mov	r0, r4
   37838:	f001 f96c 	bl	38b14 <z_spin_unlock_valid>
   3783c:	b968      	cbnz	r0, 3785a <z_reschedule+0x5e>
   3783e:	235d      	movs	r3, #93	; 0x5d
   37840:	4a08      	ldr	r2, [pc, #32]	; (37864 <z_reschedule+0x68>)
   37842:	4909      	ldr	r1, [pc, #36]	; (37868 <z_reschedule+0x6c>)
   37844:	4809      	ldr	r0, [pc, #36]	; (3786c <z_reschedule+0x70>)
   37846:	f004 fec5 	bl	3c5d4 <printk>
   3784a:	4621      	mov	r1, r4
   3784c:	4808      	ldr	r0, [pc, #32]	; (37870 <z_reschedule+0x74>)
   3784e:	f004 fec1 	bl	3c5d4 <printk>
   37852:	215d      	movs	r1, #93	; 0x5d
   37854:	4803      	ldr	r0, [pc, #12]	; (37864 <z_reschedule+0x68>)
   37856:	f004 ff03 	bl	3c660 <assert_post_action>
   3785a:	f385 8811 	msr	BASEPRI, r5
   3785e:	f3bf 8f6f 	isb	sy
   37862:	bd38      	pop	{r3, r4, r5, pc}
   37864:	00042269 	.word	0x00042269
   37868:	000422b5 	.word	0x000422b5
   3786c:	00041757 	.word	0x00041757
   37870:	000422cc 	.word	0x000422cc

00037874 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   37874:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   37876:	f04f 0320 	mov.w	r3, #32
   3787a:	f3ef 8511 	mrs	r5, BASEPRI
   3787e:	f383 8811 	msr	BASEPRI, r3
   37882:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37886:	482b      	ldr	r0, [pc, #172]	; (37934 <k_sched_lock+0xc0>)
   37888:	f001 f936 	bl	38af8 <z_spin_lock_valid>
   3788c:	b968      	cbnz	r0, 378aa <k_sched_lock+0x36>
   3788e:	234a      	movs	r3, #74	; 0x4a
   37890:	4a29      	ldr	r2, [pc, #164]	; (37938 <k_sched_lock+0xc4>)
   37892:	492a      	ldr	r1, [pc, #168]	; (3793c <k_sched_lock+0xc8>)
   37894:	482a      	ldr	r0, [pc, #168]	; (37940 <k_sched_lock+0xcc>)
   37896:	f004 fe9d 	bl	3c5d4 <printk>
   3789a:	4926      	ldr	r1, [pc, #152]	; (37934 <k_sched_lock+0xc0>)
   3789c:	4829      	ldr	r0, [pc, #164]	; (37944 <k_sched_lock+0xd0>)
   3789e:	f004 fe99 	bl	3c5d4 <printk>
   378a2:	214a      	movs	r1, #74	; 0x4a
   378a4:	4824      	ldr	r0, [pc, #144]	; (37938 <k_sched_lock+0xc4>)
   378a6:	f004 fedb 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   378aa:	4822      	ldr	r0, [pc, #136]	; (37934 <k_sched_lock+0xc0>)
   378ac:	f001 f942 	bl	38b34 <z_spin_lock_set_owner>
   378b0:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   378b4:	b173      	cbz	r3, 378d4 <k_sched_lock+0x60>
   378b6:	4924      	ldr	r1, [pc, #144]	; (37948 <k_sched_lock+0xd4>)
   378b8:	f240 130d 	movw	r3, #269	; 0x10d
   378bc:	4a23      	ldr	r2, [pc, #140]	; (3794c <k_sched_lock+0xd8>)
   378be:	4820      	ldr	r0, [pc, #128]	; (37940 <k_sched_lock+0xcc>)
   378c0:	f004 fe88 	bl	3c5d4 <printk>
   378c4:	4822      	ldr	r0, [pc, #136]	; (37950 <k_sched_lock+0xdc>)
   378c6:	f004 fe85 	bl	3c5d4 <printk>
   378ca:	f240 110d 	movw	r1, #269	; 0x10d
   378ce:	481f      	ldr	r0, [pc, #124]	; (3794c <k_sched_lock+0xd8>)
   378d0:	f004 fec6 	bl	3c660 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   378d4:	4c1f      	ldr	r4, [pc, #124]	; (37954 <k_sched_lock+0xe0>)
   378d6:	68a2      	ldr	r2, [r4, #8]
   378d8:	7bd2      	ldrb	r2, [r2, #15]
   378da:	2a01      	cmp	r2, #1
   378dc:	d10e      	bne.n	378fc <k_sched_lock+0x88>
   378de:	491e      	ldr	r1, [pc, #120]	; (37958 <k_sched_lock+0xe4>)
   378e0:	f44f 7387 	mov.w	r3, #270	; 0x10e
   378e4:	4a19      	ldr	r2, [pc, #100]	; (3794c <k_sched_lock+0xd8>)
   378e6:	4816      	ldr	r0, [pc, #88]	; (37940 <k_sched_lock+0xcc>)
   378e8:	f004 fe74 	bl	3c5d4 <printk>
   378ec:	4818      	ldr	r0, [pc, #96]	; (37950 <k_sched_lock+0xdc>)
   378ee:	f004 fe71 	bl	3c5d4 <printk>
   378f2:	f44f 7187 	mov.w	r1, #270	; 0x10e
   378f6:	4815      	ldr	r0, [pc, #84]	; (3794c <k_sched_lock+0xd8>)
   378f8:	f004 feb2 	bl	3c660 <assert_post_action>
	--_current->base.sched_locked;
   378fc:	68a2      	ldr	r2, [r4, #8]
   378fe:	7bd3      	ldrb	r3, [r2, #15]
   37900:	3b01      	subs	r3, #1
   37902:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37904:	480b      	ldr	r0, [pc, #44]	; (37934 <k_sched_lock+0xc0>)
   37906:	f001 f905 	bl	38b14 <z_spin_unlock_valid>
   3790a:	b968      	cbnz	r0, 37928 <k_sched_lock+0xb4>
   3790c:	235d      	movs	r3, #93	; 0x5d
   3790e:	4a0a      	ldr	r2, [pc, #40]	; (37938 <k_sched_lock+0xc4>)
   37910:	4912      	ldr	r1, [pc, #72]	; (3795c <k_sched_lock+0xe8>)
   37912:	480b      	ldr	r0, [pc, #44]	; (37940 <k_sched_lock+0xcc>)
   37914:	f004 fe5e 	bl	3c5d4 <printk>
   37918:	4906      	ldr	r1, [pc, #24]	; (37934 <k_sched_lock+0xc0>)
   3791a:	4811      	ldr	r0, [pc, #68]	; (37960 <k_sched_lock+0xec>)
   3791c:	f004 fe5a 	bl	3c5d4 <printk>
   37920:	215d      	movs	r1, #93	; 0x5d
   37922:	4805      	ldr	r0, [pc, #20]	; (37938 <k_sched_lock+0xc4>)
   37924:	f004 fe9c 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   37928:	f385 8811 	msr	BASEPRI, r5
   3792c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   37930:	bd38      	pop	{r3, r4, r5, pc}
   37932:	bf00      	nop
   37934:	200293a0 	.word	0x200293a0
   37938:	00042269 	.word	0x00042269
   3793c:	00042288 	.word	0x00042288
   37940:	00041757 	.word	0x00041757
   37944:	0004229d 	.word	0x0004229d
   37948:	000467d4 	.word	0x000467d4
   3794c:	000467b0 	.word	0x000467b0
   37950:	0004311f 	.word	0x0004311f
   37954:	20029368 	.word	0x20029368
   37958:	000467e6 	.word	0x000467e6
   3795c:	000422b5 	.word	0x000422b5
   37960:	000422cc 	.word	0x000422cc

00037964 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   37964:	4b11      	ldr	r3, [pc, #68]	; (379ac <z_priq_dumb_remove+0x48>)
{
   37966:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   37968:	f103 0228 	add.w	r2, r3, #40	; 0x28
   3796c:	4282      	cmp	r2, r0
{
   3796e:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   37970:	d105      	bne.n	3797e <z_priq_dumb_remove+0x1a>
   37972:	689b      	ldr	r3, [r3, #8]
   37974:	428b      	cmp	r3, r1
   37976:	d102      	bne.n	3797e <z_priq_dumb_remove+0x1a>
   37978:	7b4b      	ldrb	r3, [r1, #13]
   3797a:	06db      	lsls	r3, r3, #27
   3797c:	d115      	bne.n	379aa <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3797e:	4b0c      	ldr	r3, [pc, #48]	; (379b0 <z_priq_dumb_remove+0x4c>)
   37980:	429c      	cmp	r4, r3
   37982:	d10b      	bne.n	3799c <z_priq_dumb_remove+0x38>
   37984:	490b      	ldr	r1, [pc, #44]	; (379b4 <z_priq_dumb_remove+0x50>)
   37986:	480c      	ldr	r0, [pc, #48]	; (379b8 <z_priq_dumb_remove+0x54>)
   37988:	f44f 7346 	mov.w	r3, #792	; 0x318
   3798c:	4a0b      	ldr	r2, [pc, #44]	; (379bc <z_priq_dumb_remove+0x58>)
   3798e:	f004 fe21 	bl	3c5d4 <printk>
   37992:	f44f 7146 	mov.w	r1, #792	; 0x318
   37996:	4809      	ldr	r0, [pc, #36]	; (379bc <z_priq_dumb_remove+0x58>)
   37998:	f004 fe62 	bl	3c660 <assert_post_action>
	node->prev->next = node->next;
   3799c:	e9d4 3200 	ldrd	r3, r2, [r4]
   379a0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   379a2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   379a4:	2300      	movs	r3, #0
	node->prev = NULL;
   379a6:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   379aa:	bd10      	pop	{r4, pc}
   379ac:	20029368 	.word	0x20029368
   379b0:	20025198 	.word	0x20025198
   379b4:	000468bd 	.word	0x000468bd
   379b8:	00041757 	.word	0x00041757
   379bc:	0004686c 	.word	0x0004686c

000379c0 <z_unpend_thread>:
{
   379c0:	b538      	push	{r3, r4, r5, lr}
   379c2:	4604      	mov	r4, r0
	__asm__ volatile(
   379c4:	f04f 0320 	mov.w	r3, #32
   379c8:	f3ef 8511 	mrs	r5, BASEPRI
   379cc:	f383 8811 	msr	BASEPRI, r3
   379d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   379d4:	481e      	ldr	r0, [pc, #120]	; (37a50 <z_unpend_thread+0x90>)
   379d6:	f001 f88f 	bl	38af8 <z_spin_lock_valid>
   379da:	b968      	cbnz	r0, 379f8 <z_unpend_thread+0x38>
   379dc:	234a      	movs	r3, #74	; 0x4a
   379de:	4a1d      	ldr	r2, [pc, #116]	; (37a54 <z_unpend_thread+0x94>)
   379e0:	491d      	ldr	r1, [pc, #116]	; (37a58 <z_unpend_thread+0x98>)
   379e2:	481e      	ldr	r0, [pc, #120]	; (37a5c <z_unpend_thread+0x9c>)
   379e4:	f004 fdf6 	bl	3c5d4 <printk>
   379e8:	4919      	ldr	r1, [pc, #100]	; (37a50 <z_unpend_thread+0x90>)
   379ea:	481d      	ldr	r0, [pc, #116]	; (37a60 <z_unpend_thread+0xa0>)
   379ec:	f004 fdf2 	bl	3c5d4 <printk>
   379f0:	214a      	movs	r1, #74	; 0x4a
   379f2:	4818      	ldr	r0, [pc, #96]	; (37a54 <z_unpend_thread+0x94>)
   379f4:	f004 fe34 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   379f8:	4815      	ldr	r0, [pc, #84]	; (37a50 <z_unpend_thread+0x90>)
   379fa:	f001 f89b 	bl	38b34 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   379fe:	f104 0008 	add.w	r0, r4, #8
   37a02:	f7ff fe6d 	bl	376e0 <pended_on.isra.17>
   37a06:	4621      	mov	r1, r4
   37a08:	f7ff ffac 	bl	37964 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   37a0c:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37a0e:	4810      	ldr	r0, [pc, #64]	; (37a50 <z_unpend_thread+0x90>)
   37a10:	f023 0302 	bic.w	r3, r3, #2
   37a14:	7363      	strb	r3, [r4, #13]
   37a16:	f001 f87d 	bl	38b14 <z_spin_unlock_valid>
   37a1a:	b968      	cbnz	r0, 37a38 <z_unpend_thread+0x78>
   37a1c:	235d      	movs	r3, #93	; 0x5d
   37a1e:	4a0d      	ldr	r2, [pc, #52]	; (37a54 <z_unpend_thread+0x94>)
   37a20:	4910      	ldr	r1, [pc, #64]	; (37a64 <z_unpend_thread+0xa4>)
   37a22:	480e      	ldr	r0, [pc, #56]	; (37a5c <z_unpend_thread+0x9c>)
   37a24:	f004 fdd6 	bl	3c5d4 <printk>
   37a28:	4909      	ldr	r1, [pc, #36]	; (37a50 <z_unpend_thread+0x90>)
   37a2a:	480f      	ldr	r0, [pc, #60]	; (37a68 <z_unpend_thread+0xa8>)
   37a2c:	f004 fdd2 	bl	3c5d4 <printk>
   37a30:	215d      	movs	r1, #93	; 0x5d
   37a32:	4808      	ldr	r0, [pc, #32]	; (37a54 <z_unpend_thread+0x94>)
   37a34:	f004 fe14 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   37a38:	f385 8811 	msr	BASEPRI, r5
   37a3c:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   37a40:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   37a42:	f104 0018 	add.w	r0, r4, #24
   37a46:	60a3      	str	r3, [r4, #8]
}
   37a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   37a4c:	f001 bc16 	b.w	3927c <z_abort_timeout>
   37a50:	200293a0 	.word	0x200293a0
   37a54:	00042269 	.word	0x00042269
   37a58:	00042288 	.word	0x00042288
   37a5c:	00041757 	.word	0x00041757
   37a60:	0004229d 	.word	0x0004229d
   37a64:	000422b5 	.word	0x000422b5
   37a68:	000422cc 	.word	0x000422cc

00037a6c <update_cache>:
{
   37a6c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   37a6e:	4c15      	ldr	r4, [pc, #84]	; (37ac4 <update_cache+0x58>)
{
   37a70:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   37a72:	f104 0028 	add.w	r0, r4, #40	; 0x28
   37a76:	f006 ffea 	bl	3ea4e <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   37a7a:	4605      	mov	r5, r0
   37a7c:	b900      	cbnz	r0, 37a80 <update_cache+0x14>
   37a7e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   37a80:	b9ca      	cbnz	r2, 37ab6 <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   37a82:	68a3      	ldr	r3, [r4, #8]
   37a84:	b963      	cbnz	r3, 37aa0 <update_cache+0x34>
   37a86:	4910      	ldr	r1, [pc, #64]	; (37ac8 <update_cache+0x5c>)
   37a88:	237e      	movs	r3, #126	; 0x7e
   37a8a:	4a10      	ldr	r2, [pc, #64]	; (37acc <update_cache+0x60>)
   37a8c:	4810      	ldr	r0, [pc, #64]	; (37ad0 <update_cache+0x64>)
   37a8e:	f004 fda1 	bl	3c5d4 <printk>
   37a92:	4810      	ldr	r0, [pc, #64]	; (37ad4 <update_cache+0x68>)
   37a94:	f004 fd9e 	bl	3c5d4 <printk>
   37a98:	217e      	movs	r1, #126	; 0x7e
   37a9a:	480c      	ldr	r0, [pc, #48]	; (37acc <update_cache+0x60>)
   37a9c:	f004 fde0 	bl	3c660 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   37aa0:	68a3      	ldr	r3, [r4, #8]
   37aa2:	7b5a      	ldrb	r2, [r3, #13]
   37aa4:	06d2      	lsls	r2, r2, #27
   37aa6:	d106      	bne.n	37ab6 <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   37aa8:	69aa      	ldr	r2, [r5, #24]
   37aaa:	b922      	cbnz	r2, 37ab6 <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(thread)) {
   37aac:	89da      	ldrh	r2, [r3, #14]
   37aae:	2a7f      	cmp	r2, #127	; 0x7f
   37ab0:	d901      	bls.n	37ab6 <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   37ab2:	6263      	str	r3, [r4, #36]	; 0x24
}
   37ab4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   37ab6:	68a3      	ldr	r3, [r4, #8]
   37ab8:	42ab      	cmp	r3, r5
   37aba:	d001      	beq.n	37ac0 <update_cache+0x54>
			z_reset_time_slice();
   37abc:	f7ff fe28 	bl	37710 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   37ac0:	6265      	str	r5, [r4, #36]	; 0x24
}
   37ac2:	e7f7      	b.n	37ab4 <update_cache+0x48>
   37ac4:	20029368 	.word	0x20029368
   37ac8:	0004689e 	.word	0x0004689e
   37acc:	0004686c 	.word	0x0004686c
   37ad0:	00041757 	.word	0x00041757
   37ad4:	0004311f 	.word	0x0004311f

00037ad8 <k_sched_unlock>:
{
   37ad8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   37ada:	4c31      	ldr	r4, [pc, #196]	; (37ba0 <k_sched_unlock+0xc8>)
   37adc:	68a2      	ldr	r2, [r4, #8]
   37ade:	7bd2      	ldrb	r2, [r2, #15]
   37ae0:	b972      	cbnz	r2, 37b00 <k_sched_unlock+0x28>
   37ae2:	4930      	ldr	r1, [pc, #192]	; (37ba4 <k_sched_unlock+0xcc>)
   37ae4:	f240 23ad 	movw	r3, #685	; 0x2ad
   37ae8:	4a2f      	ldr	r2, [pc, #188]	; (37ba8 <k_sched_unlock+0xd0>)
   37aea:	4830      	ldr	r0, [pc, #192]	; (37bac <k_sched_unlock+0xd4>)
   37aec:	f004 fd72 	bl	3c5d4 <printk>
   37af0:	482f      	ldr	r0, [pc, #188]	; (37bb0 <k_sched_unlock+0xd8>)
   37af2:	f004 fd6f 	bl	3c5d4 <printk>
   37af6:	f240 21ad 	movw	r1, #685	; 0x2ad
   37afa:	482b      	ldr	r0, [pc, #172]	; (37ba8 <k_sched_unlock+0xd0>)
   37afc:	f004 fdb0 	bl	3c660 <assert_post_action>
   37b00:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   37b04:	b173      	cbz	r3, 37b24 <k_sched_unlock+0x4c>
   37b06:	492b      	ldr	r1, [pc, #172]	; (37bb4 <k_sched_unlock+0xdc>)
   37b08:	f240 23ae 	movw	r3, #686	; 0x2ae
   37b0c:	4a26      	ldr	r2, [pc, #152]	; (37ba8 <k_sched_unlock+0xd0>)
   37b0e:	4827      	ldr	r0, [pc, #156]	; (37bac <k_sched_unlock+0xd4>)
   37b10:	f004 fd60 	bl	3c5d4 <printk>
   37b14:	4826      	ldr	r0, [pc, #152]	; (37bb0 <k_sched_unlock+0xd8>)
   37b16:	f004 fd5d 	bl	3c5d4 <printk>
   37b1a:	f240 21ae 	movw	r1, #686	; 0x2ae
   37b1e:	4822      	ldr	r0, [pc, #136]	; (37ba8 <k_sched_unlock+0xd0>)
   37b20:	f004 fd9e 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   37b24:	f04f 0320 	mov.w	r3, #32
   37b28:	f3ef 8511 	mrs	r5, BASEPRI
   37b2c:	f383 8811 	msr	BASEPRI, r3
   37b30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37b34:	4820      	ldr	r0, [pc, #128]	; (37bb8 <k_sched_unlock+0xe0>)
   37b36:	f000 ffdf 	bl	38af8 <z_spin_lock_valid>
   37b3a:	b968      	cbnz	r0, 37b58 <k_sched_unlock+0x80>
   37b3c:	234a      	movs	r3, #74	; 0x4a
   37b3e:	4a1f      	ldr	r2, [pc, #124]	; (37bbc <k_sched_unlock+0xe4>)
   37b40:	491f      	ldr	r1, [pc, #124]	; (37bc0 <k_sched_unlock+0xe8>)
   37b42:	481a      	ldr	r0, [pc, #104]	; (37bac <k_sched_unlock+0xd4>)
   37b44:	f004 fd46 	bl	3c5d4 <printk>
   37b48:	491b      	ldr	r1, [pc, #108]	; (37bb8 <k_sched_unlock+0xe0>)
   37b4a:	481e      	ldr	r0, [pc, #120]	; (37bc4 <k_sched_unlock+0xec>)
   37b4c:	f004 fd42 	bl	3c5d4 <printk>
   37b50:	214a      	movs	r1, #74	; 0x4a
   37b52:	481a      	ldr	r0, [pc, #104]	; (37bbc <k_sched_unlock+0xe4>)
   37b54:	f004 fd84 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   37b58:	4817      	ldr	r0, [pc, #92]	; (37bb8 <k_sched_unlock+0xe0>)
   37b5a:	f000 ffeb 	bl	38b34 <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   37b5e:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   37b60:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   37b62:	7bd3      	ldrb	r3, [r2, #15]
   37b64:	3301      	adds	r3, #1
   37b66:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   37b68:	f7ff ff80 	bl	37a6c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37b6c:	4812      	ldr	r0, [pc, #72]	; (37bb8 <k_sched_unlock+0xe0>)
   37b6e:	f000 ffd1 	bl	38b14 <z_spin_unlock_valid>
   37b72:	b968      	cbnz	r0, 37b90 <k_sched_unlock+0xb8>
   37b74:	235d      	movs	r3, #93	; 0x5d
   37b76:	4a11      	ldr	r2, [pc, #68]	; (37bbc <k_sched_unlock+0xe4>)
   37b78:	4913      	ldr	r1, [pc, #76]	; (37bc8 <k_sched_unlock+0xf0>)
   37b7a:	480c      	ldr	r0, [pc, #48]	; (37bac <k_sched_unlock+0xd4>)
   37b7c:	f004 fd2a 	bl	3c5d4 <printk>
   37b80:	490d      	ldr	r1, [pc, #52]	; (37bb8 <k_sched_unlock+0xe0>)
   37b82:	4812      	ldr	r0, [pc, #72]	; (37bcc <k_sched_unlock+0xf4>)
   37b84:	f004 fd26 	bl	3c5d4 <printk>
   37b88:	215d      	movs	r1, #93	; 0x5d
   37b8a:	480c      	ldr	r0, [pc, #48]	; (37bbc <k_sched_unlock+0xe4>)
   37b8c:	f004 fd68 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   37b90:	f385 8811 	msr	BASEPRI, r5
   37b94:	f3bf 8f6f 	isb	sy
}
   37b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   37b9c:	f006 bf4d 	b.w	3ea3a <z_reschedule_unlocked>
   37ba0:	20029368 	.word	0x20029368
   37ba4:	0004680e 	.word	0x0004680e
   37ba8:	0004686c 	.word	0x0004686c
   37bac:	00041757 	.word	0x00041757
   37bb0:	0004311f 	.word	0x0004311f
   37bb4:	000467d4 	.word	0x000467d4
   37bb8:	200293a0 	.word	0x200293a0
   37bbc:	00042269 	.word	0x00042269
   37bc0:	00042288 	.word	0x00042288
   37bc4:	0004229d 	.word	0x0004229d
   37bc8:	000422b5 	.word	0x000422b5
   37bcc:	000422cc 	.word	0x000422cc

00037bd0 <z_add_thread_to_ready_q>:
{
   37bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37bd2:	4604      	mov	r4, r0
	__asm__ volatile(
   37bd4:	f04f 0320 	mov.w	r3, #32
   37bd8:	f3ef 8511 	mrs	r5, BASEPRI
   37bdc:	f383 8811 	msr	BASEPRI, r3
   37be0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37be4:	482f      	ldr	r0, [pc, #188]	; (37ca4 <z_add_thread_to_ready_q+0xd4>)
   37be6:	f000 ff87 	bl	38af8 <z_spin_lock_valid>
   37bea:	b968      	cbnz	r0, 37c08 <z_add_thread_to_ready_q+0x38>
   37bec:	234a      	movs	r3, #74	; 0x4a
   37bee:	4a2e      	ldr	r2, [pc, #184]	; (37ca8 <z_add_thread_to_ready_q+0xd8>)
   37bf0:	492e      	ldr	r1, [pc, #184]	; (37cac <z_add_thread_to_ready_q+0xdc>)
   37bf2:	482f      	ldr	r0, [pc, #188]	; (37cb0 <z_add_thread_to_ready_q+0xe0>)
   37bf4:	f004 fcee 	bl	3c5d4 <printk>
   37bf8:	492a      	ldr	r1, [pc, #168]	; (37ca4 <z_add_thread_to_ready_q+0xd4>)
   37bfa:	482e      	ldr	r0, [pc, #184]	; (37cb4 <z_add_thread_to_ready_q+0xe4>)
   37bfc:	f004 fcea 	bl	3c5d4 <printk>
   37c00:	214a      	movs	r1, #74	; 0x4a
   37c02:	4829      	ldr	r0, [pc, #164]	; (37ca8 <z_add_thread_to_ready_q+0xd8>)
   37c04:	f004 fd2c 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   37c08:	4826      	ldr	r0, [pc, #152]	; (37ca4 <z_add_thread_to_ready_q+0xd4>)
   37c0a:	f000 ff93 	bl	38b34 <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37c0e:	4b2a      	ldr	r3, [pc, #168]	; (37cb8 <z_add_thread_to_ready_q+0xe8>)
   37c10:	429c      	cmp	r4, r3
   37c12:	d10b      	bne.n	37c2c <z_add_thread_to_ready_q+0x5c>
   37c14:	4929      	ldr	r1, [pc, #164]	; (37cbc <z_add_thread_to_ready_q+0xec>)
   37c16:	4826      	ldr	r0, [pc, #152]	; (37cb0 <z_add_thread_to_ready_q+0xe0>)
   37c18:	f240 3302 	movw	r3, #770	; 0x302
   37c1c:	4a28      	ldr	r2, [pc, #160]	; (37cc0 <z_add_thread_to_ready_q+0xf0>)
   37c1e:	f004 fcd9 	bl	3c5d4 <printk>
   37c22:	f240 3102 	movw	r1, #770	; 0x302
   37c26:	4826      	ldr	r0, [pc, #152]	; (37cc0 <z_add_thread_to_ready_q+0xf0>)
   37c28:	f004 fd1a 	bl	3c660 <assert_post_action>
	return list->head == list;
   37c2c:	4a25      	ldr	r2, [pc, #148]	; (37cc4 <z_add_thread_to_ready_q+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37c2e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   37c32:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   37c36:	428b      	cmp	r3, r1
   37c38:	d02e      	beq.n	37c98 <z_add_thread_to_ready_q+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37c3a:	b36b      	cbz	r3, 37c98 <z_add_thread_to_ready_q+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   37c3c:	f994 600e 	ldrsb.w	r6, [r4, #14]
   37c40:	f993 700e 	ldrsb.w	r7, [r3, #14]
   37c44:	42b7      	cmp	r7, r6
   37c46:	dd22      	ble.n	37c8e <z_add_thread_to_ready_q+0xbe>
	node->prev = successor->prev;
   37c48:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   37c4a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   37c4e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   37c50:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   37c52:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   37c54:	2000      	movs	r0, #0
   37c56:	f063 037f 	orn	r3, r3, #127	; 0x7f
   37c5a:	7363      	strb	r3, [r4, #13]
   37c5c:	f7ff ff06 	bl	37a6c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37c60:	4810      	ldr	r0, [pc, #64]	; (37ca4 <z_add_thread_to_ready_q+0xd4>)
   37c62:	f000 ff57 	bl	38b14 <z_spin_unlock_valid>
   37c66:	b968      	cbnz	r0, 37c84 <z_add_thread_to_ready_q+0xb4>
   37c68:	235d      	movs	r3, #93	; 0x5d
   37c6a:	4a0f      	ldr	r2, [pc, #60]	; (37ca8 <z_add_thread_to_ready_q+0xd8>)
   37c6c:	4916      	ldr	r1, [pc, #88]	; (37cc8 <z_add_thread_to_ready_q+0xf8>)
   37c6e:	4810      	ldr	r0, [pc, #64]	; (37cb0 <z_add_thread_to_ready_q+0xe0>)
   37c70:	f004 fcb0 	bl	3c5d4 <printk>
   37c74:	490b      	ldr	r1, [pc, #44]	; (37ca4 <z_add_thread_to_ready_q+0xd4>)
   37c76:	4815      	ldr	r0, [pc, #84]	; (37ccc <z_add_thread_to_ready_q+0xfc>)
   37c78:	f004 fcac 	bl	3c5d4 <printk>
   37c7c:	215d      	movs	r1, #93	; 0x5d
   37c7e:	480a      	ldr	r0, [pc, #40]	; (37ca8 <z_add_thread_to_ready_q+0xd8>)
   37c80:	f004 fcee 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   37c84:	f385 8811 	msr	BASEPRI, r5
   37c88:	f3bf 8f6f 	isb	sy
}
   37c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   37c8e:	4298      	cmp	r0, r3
   37c90:	d002      	beq.n	37c98 <z_add_thread_to_ready_q+0xc8>
   37c92:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37c94:	2b00      	cmp	r3, #0
   37c96:	d1d3      	bne.n	37c40 <z_add_thread_to_ready_q+0x70>
	node->prev = list->tail;
   37c98:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   37c9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   37c9e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   37ca0:	62d4      	str	r4, [r2, #44]	; 0x2c
   37ca2:	e7d6      	b.n	37c52 <z_add_thread_to_ready_q+0x82>
   37ca4:	200293a0 	.word	0x200293a0
   37ca8:	00042269 	.word	0x00042269
   37cac:	00042288 	.word	0x00042288
   37cb0:	00041757 	.word	0x00041757
   37cb4:	0004229d 	.word	0x0004229d
   37cb8:	20025198 	.word	0x20025198
   37cbc:	000468bd 	.word	0x000468bd
   37cc0:	0004686c 	.word	0x0004686c
   37cc4:	20029368 	.word	0x20029368
   37cc8:	000422b5 	.word	0x000422b5
   37ccc:	000422cc 	.word	0x000422cc

00037cd0 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   37cd0:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   37cd4:	b570      	push	{r4, r5, r6, lr}
   37cd6:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   37cd8:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   37cdc:	2b00      	cmp	r3, #0
   37cde:	d042      	beq.n	37d66 <z_thread_timeout+0x96>
	__asm__ volatile(
   37ce0:	f04f 0320 	mov.w	r3, #32
   37ce4:	f3ef 8611 	mrs	r6, BASEPRI
   37ce8:	f383 8811 	msr	BASEPRI, r3
   37cec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37cf0:	4825      	ldr	r0, [pc, #148]	; (37d88 <z_thread_timeout+0xb8>)
   37cf2:	f000 ff01 	bl	38af8 <z_spin_lock_valid>
   37cf6:	b968      	cbnz	r0, 37d14 <z_thread_timeout+0x44>
   37cf8:	234a      	movs	r3, #74	; 0x4a
   37cfa:	4a24      	ldr	r2, [pc, #144]	; (37d8c <z_thread_timeout+0xbc>)
   37cfc:	4924      	ldr	r1, [pc, #144]	; (37d90 <z_thread_timeout+0xc0>)
   37cfe:	4825      	ldr	r0, [pc, #148]	; (37d94 <z_thread_timeout+0xc4>)
   37d00:	f004 fc68 	bl	3c5d4 <printk>
   37d04:	4920      	ldr	r1, [pc, #128]	; (37d88 <z_thread_timeout+0xb8>)
   37d06:	4824      	ldr	r0, [pc, #144]	; (37d98 <z_thread_timeout+0xc8>)
   37d08:	f004 fc64 	bl	3c5d4 <printk>
   37d0c:	214a      	movs	r1, #74	; 0x4a
   37d0e:	481f      	ldr	r0, [pc, #124]	; (37d8c <z_thread_timeout+0xbc>)
   37d10:	f004 fca6 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   37d14:	481c      	ldr	r0, [pc, #112]	; (37d88 <z_thread_timeout+0xb8>)
   37d16:	f000 ff0d 	bl	38b34 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   37d1a:	f1a4 0010 	sub.w	r0, r4, #16
   37d1e:	f7ff fcdf 	bl	376e0 <pended_on.isra.17>
   37d22:	4629      	mov	r1, r5
   37d24:	f7ff fe1e 	bl	37964 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   37d28:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37d2c:	4816      	ldr	r0, [pc, #88]	; (37d88 <z_thread_timeout+0xb8>)
   37d2e:	f023 0302 	bic.w	r3, r3, #2
   37d32:	f804 3c0b 	strb.w	r3, [r4, #-11]
   37d36:	f000 feed 	bl	38b14 <z_spin_unlock_valid>
   37d3a:	b968      	cbnz	r0, 37d58 <z_thread_timeout+0x88>
   37d3c:	235d      	movs	r3, #93	; 0x5d
   37d3e:	4a13      	ldr	r2, [pc, #76]	; (37d8c <z_thread_timeout+0xbc>)
   37d40:	4916      	ldr	r1, [pc, #88]	; (37d9c <z_thread_timeout+0xcc>)
   37d42:	4814      	ldr	r0, [pc, #80]	; (37d94 <z_thread_timeout+0xc4>)
   37d44:	f004 fc46 	bl	3c5d4 <printk>
   37d48:	490f      	ldr	r1, [pc, #60]	; (37d88 <z_thread_timeout+0xb8>)
   37d4a:	4815      	ldr	r0, [pc, #84]	; (37da0 <z_thread_timeout+0xd0>)
   37d4c:	f004 fc42 	bl	3c5d4 <printk>
   37d50:	215d      	movs	r1, #93	; 0x5d
   37d52:	480e      	ldr	r0, [pc, #56]	; (37d8c <z_thread_timeout+0xbc>)
   37d54:	f004 fc84 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   37d58:	f386 8811 	msr	BASEPRI, r6
   37d5c:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   37d60:	2300      	movs	r3, #0
   37d62:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   37d66:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   37d6a:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   37d6c:	f023 0314 	bic.w	r3, r3, #20
   37d70:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   37d74:	f006 fe43 	bl	3e9fe <z_is_thread_ready>
   37d78:	b120      	cbz	r0, 37d84 <z_thread_timeout+0xb4>
		z_add_thread_to_ready_q(thread);
   37d7a:	4628      	mov	r0, r5
}
   37d7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   37d80:	f7ff bf26 	b.w	37bd0 <z_add_thread_to_ready_q>
   37d84:	bd70      	pop	{r4, r5, r6, pc}
   37d86:	bf00      	nop
   37d88:	200293a0 	.word	0x200293a0
   37d8c:	00042269 	.word	0x00042269
   37d90:	00042288 	.word	0x00042288
   37d94:	00041757 	.word	0x00041757
   37d98:	0004229d 	.word	0x0004229d
   37d9c:	000422b5 	.word	0x000422b5
   37da0:	000422cc 	.word	0x000422cc

00037da4 <z_move_thread_to_end_of_prio_q>:
{
   37da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37da6:	4604      	mov	r4, r0
	__asm__ volatile(
   37da8:	f04f 0320 	mov.w	r3, #32
   37dac:	f3ef 8511 	mrs	r5, BASEPRI
   37db0:	f383 8811 	msr	BASEPRI, r3
   37db4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37db8:	4835      	ldr	r0, [pc, #212]	; (37e90 <z_move_thread_to_end_of_prio_q+0xec>)
   37dba:	f000 fe9d 	bl	38af8 <z_spin_lock_valid>
   37dbe:	b968      	cbnz	r0, 37ddc <z_move_thread_to_end_of_prio_q+0x38>
   37dc0:	234a      	movs	r3, #74	; 0x4a
   37dc2:	4a34      	ldr	r2, [pc, #208]	; (37e94 <z_move_thread_to_end_of_prio_q+0xf0>)
   37dc4:	4934      	ldr	r1, [pc, #208]	; (37e98 <z_move_thread_to_end_of_prio_q+0xf4>)
   37dc6:	4835      	ldr	r0, [pc, #212]	; (37e9c <z_move_thread_to_end_of_prio_q+0xf8>)
   37dc8:	f004 fc04 	bl	3c5d4 <printk>
   37dcc:	4930      	ldr	r1, [pc, #192]	; (37e90 <z_move_thread_to_end_of_prio_q+0xec>)
   37dce:	4834      	ldr	r0, [pc, #208]	; (37ea0 <z_move_thread_to_end_of_prio_q+0xfc>)
   37dd0:	f004 fc00 	bl	3c5d4 <printk>
   37dd4:	214a      	movs	r1, #74	; 0x4a
   37dd6:	482f      	ldr	r0, [pc, #188]	; (37e94 <z_move_thread_to_end_of_prio_q+0xf0>)
   37dd8:	f004 fc42 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   37ddc:	482c      	ldr	r0, [pc, #176]	; (37e90 <z_move_thread_to_end_of_prio_q+0xec>)
   37dde:	f000 fea9 	bl	38b34 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   37de2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   37de6:	2b00      	cmp	r3, #0
   37de8:	da03      	bge.n	37df2 <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   37dea:	4621      	mov	r1, r4
   37dec:	482d      	ldr	r0, [pc, #180]	; (37ea4 <z_move_thread_to_end_of_prio_q+0x100>)
   37dee:	f7ff fdb9 	bl	37964 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37df2:	4b2d      	ldr	r3, [pc, #180]	; (37ea8 <z_move_thread_to_end_of_prio_q+0x104>)
   37df4:	429c      	cmp	r4, r3
   37df6:	d10b      	bne.n	37e10 <z_move_thread_to_end_of_prio_q+0x6c>
   37df8:	492c      	ldr	r1, [pc, #176]	; (37eac <z_move_thread_to_end_of_prio_q+0x108>)
   37dfa:	4828      	ldr	r0, [pc, #160]	; (37e9c <z_move_thread_to_end_of_prio_q+0xf8>)
   37dfc:	f240 3302 	movw	r3, #770	; 0x302
   37e00:	4a2b      	ldr	r2, [pc, #172]	; (37eb0 <z_move_thread_to_end_of_prio_q+0x10c>)
   37e02:	f004 fbe7 	bl	3c5d4 <printk>
   37e06:	f240 3102 	movw	r1, #770	; 0x302
   37e0a:	4829      	ldr	r0, [pc, #164]	; (37eb0 <z_move_thread_to_end_of_prio_q+0x10c>)
   37e0c:	f004 fc28 	bl	3c660 <assert_post_action>
	return list->head == list;
   37e10:	4a28      	ldr	r2, [pc, #160]	; (37eb4 <z_move_thread_to_end_of_prio_q+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37e12:	f102 0128 	add.w	r1, r2, #40	; 0x28
   37e16:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   37e1a:	428b      	cmp	r3, r1
   37e1c:	d032      	beq.n	37e84 <z_move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37e1e:	2b00      	cmp	r3, #0
   37e20:	d030      	beq.n	37e84 <z_move_thread_to_end_of_prio_q+0xe0>
	if (thread_1->base.prio < thread_2->base.prio) {
   37e22:	f994 600e 	ldrsb.w	r6, [r4, #14]
   37e26:	f993 700e 	ldrsb.w	r7, [r3, #14]
   37e2a:	42b7      	cmp	r7, r6
   37e2c:	dd25      	ble.n	37e7a <z_move_thread_to_end_of_prio_q+0xd6>
	node->prev = successor->prev;
   37e2e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   37e30:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   37e34:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   37e36:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   37e38:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   37e3a:	6890      	ldr	r0, [r2, #8]
   37e3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   37e40:	7363      	strb	r3, [r4, #13]
   37e42:	1b03      	subs	r3, r0, r4
   37e44:	4258      	negs	r0, r3
   37e46:	4158      	adcs	r0, r3
   37e48:	f7ff fe10 	bl	37a6c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37e4c:	4810      	ldr	r0, [pc, #64]	; (37e90 <z_move_thread_to_end_of_prio_q+0xec>)
   37e4e:	f000 fe61 	bl	38b14 <z_spin_unlock_valid>
   37e52:	b968      	cbnz	r0, 37e70 <z_move_thread_to_end_of_prio_q+0xcc>
   37e54:	235d      	movs	r3, #93	; 0x5d
   37e56:	4a0f      	ldr	r2, [pc, #60]	; (37e94 <z_move_thread_to_end_of_prio_q+0xf0>)
   37e58:	4917      	ldr	r1, [pc, #92]	; (37eb8 <z_move_thread_to_end_of_prio_q+0x114>)
   37e5a:	4810      	ldr	r0, [pc, #64]	; (37e9c <z_move_thread_to_end_of_prio_q+0xf8>)
   37e5c:	f004 fbba 	bl	3c5d4 <printk>
   37e60:	490b      	ldr	r1, [pc, #44]	; (37e90 <z_move_thread_to_end_of_prio_q+0xec>)
   37e62:	4816      	ldr	r0, [pc, #88]	; (37ebc <z_move_thread_to_end_of_prio_q+0x118>)
   37e64:	f004 fbb6 	bl	3c5d4 <printk>
   37e68:	215d      	movs	r1, #93	; 0x5d
   37e6a:	480a      	ldr	r0, [pc, #40]	; (37e94 <z_move_thread_to_end_of_prio_q+0xf0>)
   37e6c:	f004 fbf8 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   37e70:	f385 8811 	msr	BASEPRI, r5
   37e74:	f3bf 8f6f 	isb	sy
}
   37e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   37e7a:	4298      	cmp	r0, r3
   37e7c:	d002      	beq.n	37e84 <z_move_thread_to_end_of_prio_q+0xe0>
   37e7e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37e80:	2b00      	cmp	r3, #0
   37e82:	d1d0      	bne.n	37e26 <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = list->tail;
   37e84:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   37e88:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   37e8a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   37e8c:	62d4      	str	r4, [r2, #44]	; 0x2c
   37e8e:	e7d3      	b.n	37e38 <z_move_thread_to_end_of_prio_q+0x94>
   37e90:	200293a0 	.word	0x200293a0
   37e94:	00042269 	.word	0x00042269
   37e98:	00042288 	.word	0x00042288
   37e9c:	00041757 	.word	0x00041757
   37ea0:	0004229d 	.word	0x0004229d
   37ea4:	20029390 	.word	0x20029390
   37ea8:	20025198 	.word	0x20025198
   37eac:	000468bd 	.word	0x000468bd
   37eb0:	0004686c 	.word	0x0004686c
   37eb4:	20029368 	.word	0x20029368
   37eb8:	000422b5 	.word	0x000422b5
   37ebc:	000422cc 	.word	0x000422cc

00037ec0 <z_time_slice>:
	if (pending_current == _current) {
   37ec0:	4a15      	ldr	r2, [pc, #84]	; (37f18 <z_time_slice+0x58>)
   37ec2:	4916      	ldr	r1, [pc, #88]	; (37f1c <z_time_slice+0x5c>)
{
   37ec4:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   37ec6:	680c      	ldr	r4, [r1, #0]
   37ec8:	6893      	ldr	r3, [r2, #8]
   37eca:	42a3      	cmp	r3, r4
   37ecc:	4614      	mov	r4, r2
   37ece:	d103      	bne.n	37ed8 <z_time_slice+0x18>
}
   37ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   37ed4:	f7ff bc1c 	b.w	37710 <z_reset_time_slice>
	pending_current = NULL;
   37ed8:	2500      	movs	r5, #0
   37eda:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   37edc:	4910      	ldr	r1, [pc, #64]	; (37f20 <z_time_slice+0x60>)
   37ede:	6809      	ldr	r1, [r1, #0]
   37ee0:	b1b9      	cbz	r1, 37f12 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   37ee2:	89d9      	ldrh	r1, [r3, #14]
   37ee4:	297f      	cmp	r1, #127	; 0x7f
   37ee6:	d814      	bhi.n	37f12 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   37ee8:	490e      	ldr	r1, [pc, #56]	; (37f24 <z_time_slice+0x64>)
   37eea:	f993 500e 	ldrsb.w	r5, [r3, #14]
   37eee:	6809      	ldr	r1, [r1, #0]
   37ef0:	428d      	cmp	r5, r1
   37ef2:	db0e      	blt.n	37f12 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   37ef4:	490c      	ldr	r1, [pc, #48]	; (37f28 <z_time_slice+0x68>)
   37ef6:	428b      	cmp	r3, r1
   37ef8:	d00b      	beq.n	37f12 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   37efa:	6999      	ldr	r1, [r3, #24]
   37efc:	b949      	cbnz	r1, 37f12 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   37efe:	6911      	ldr	r1, [r2, #16]
   37f00:	4281      	cmp	r1, r0
   37f02:	dc03      	bgt.n	37f0c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   37f04:	4618      	mov	r0, r3
   37f06:	f7ff ff4d 	bl	37da4 <z_move_thread_to_end_of_prio_q>
   37f0a:	e7e1      	b.n	37ed0 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   37f0c:	1a09      	subs	r1, r1, r0
   37f0e:	6111      	str	r1, [r2, #16]
}
   37f10:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   37f12:	2300      	movs	r3, #0
   37f14:	6123      	str	r3, [r4, #16]
   37f16:	e7fb      	b.n	37f10 <z_time_slice+0x50>
   37f18:	20029368 	.word	0x20029368
   37f1c:	2002939c 	.word	0x2002939c
   37f20:	200293a8 	.word	0x200293a8
   37f24:	200293a4 	.word	0x200293a4
   37f28:	20025198 	.word	0x20025198

00037f2c <z_thread_single_suspend>:
{
   37f2c:	b570      	push	{r4, r5, r6, lr}
   37f2e:	4604      	mov	r4, r0
   37f30:	3018      	adds	r0, #24
   37f32:	f001 f9a3 	bl	3927c <z_abort_timeout>
	__asm__ volatile(
   37f36:	f04f 0320 	mov.w	r3, #32
   37f3a:	f3ef 8611 	mrs	r6, BASEPRI
   37f3e:	f383 8811 	msr	BASEPRI, r3
   37f42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37f46:	4825      	ldr	r0, [pc, #148]	; (37fdc <z_thread_single_suspend+0xb0>)
   37f48:	f000 fdd6 	bl	38af8 <z_spin_lock_valid>
   37f4c:	b968      	cbnz	r0, 37f6a <z_thread_single_suspend+0x3e>
   37f4e:	234a      	movs	r3, #74	; 0x4a
   37f50:	4a23      	ldr	r2, [pc, #140]	; (37fe0 <z_thread_single_suspend+0xb4>)
   37f52:	4924      	ldr	r1, [pc, #144]	; (37fe4 <z_thread_single_suspend+0xb8>)
   37f54:	4824      	ldr	r0, [pc, #144]	; (37fe8 <z_thread_single_suspend+0xbc>)
   37f56:	f004 fb3d 	bl	3c5d4 <printk>
   37f5a:	4920      	ldr	r1, [pc, #128]	; (37fdc <z_thread_single_suspend+0xb0>)
   37f5c:	4823      	ldr	r0, [pc, #140]	; (37fec <z_thread_single_suspend+0xc0>)
   37f5e:	f004 fb39 	bl	3c5d4 <printk>
   37f62:	214a      	movs	r1, #74	; 0x4a
   37f64:	481e      	ldr	r0, [pc, #120]	; (37fe0 <z_thread_single_suspend+0xb4>)
   37f66:	f004 fb7b 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   37f6a:	481c      	ldr	r0, [pc, #112]	; (37fdc <z_thread_single_suspend+0xb0>)
   37f6c:	f000 fde2 	bl	38b34 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   37f70:	f994 300d 	ldrsb.w	r3, [r4, #13]
   37f74:	2b00      	cmp	r3, #0
   37f76:	da07      	bge.n	37f88 <z_thread_single_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   37f78:	4621      	mov	r1, r4
   37f7a:	481d      	ldr	r0, [pc, #116]	; (37ff0 <z_thread_single_suspend+0xc4>)
   37f7c:	f7ff fcf2 	bl	37964 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   37f80:	7b63      	ldrb	r3, [r4, #13]
   37f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   37f86:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   37f88:	4d1a      	ldr	r5, [pc, #104]	; (37ff4 <z_thread_single_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   37f8a:	7b63      	ldrb	r3, [r4, #13]
   37f8c:	68a8      	ldr	r0, [r5, #8]
   37f8e:	f043 0310 	orr.w	r3, r3, #16
   37f92:	7363      	strb	r3, [r4, #13]
   37f94:	1b03      	subs	r3, r0, r4
   37f96:	4258      	negs	r0, r3
   37f98:	4158      	adcs	r0, r3
   37f9a:	f7ff fd67 	bl	37a6c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37f9e:	480f      	ldr	r0, [pc, #60]	; (37fdc <z_thread_single_suspend+0xb0>)
   37fa0:	f000 fdb8 	bl	38b14 <z_spin_unlock_valid>
   37fa4:	b968      	cbnz	r0, 37fc2 <z_thread_single_suspend+0x96>
   37fa6:	235d      	movs	r3, #93	; 0x5d
   37fa8:	4a0d      	ldr	r2, [pc, #52]	; (37fe0 <z_thread_single_suspend+0xb4>)
   37faa:	4913      	ldr	r1, [pc, #76]	; (37ff8 <z_thread_single_suspend+0xcc>)
   37fac:	480e      	ldr	r0, [pc, #56]	; (37fe8 <z_thread_single_suspend+0xbc>)
   37fae:	f004 fb11 	bl	3c5d4 <printk>
   37fb2:	490a      	ldr	r1, [pc, #40]	; (37fdc <z_thread_single_suspend+0xb0>)
   37fb4:	4811      	ldr	r0, [pc, #68]	; (37ffc <z_thread_single_suspend+0xd0>)
   37fb6:	f004 fb0d 	bl	3c5d4 <printk>
   37fba:	215d      	movs	r1, #93	; 0x5d
   37fbc:	4808      	ldr	r0, [pc, #32]	; (37fe0 <z_thread_single_suspend+0xb4>)
   37fbe:	f004 fb4f 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   37fc2:	f386 8811 	msr	BASEPRI, r6
   37fc6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   37fca:	68ab      	ldr	r3, [r5, #8]
   37fcc:	42a3      	cmp	r3, r4
   37fce:	d103      	bne.n	37fd8 <z_thread_single_suspend+0xac>
}
   37fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   37fd4:	f006 bd31 	b.w	3ea3a <z_reschedule_unlocked>
}
   37fd8:	bd70      	pop	{r4, r5, r6, pc}
   37fda:	bf00      	nop
   37fdc:	200293a0 	.word	0x200293a0
   37fe0:	00042269 	.word	0x00042269
   37fe4:	00042288 	.word	0x00042288
   37fe8:	00041757 	.word	0x00041757
   37fec:	0004229d 	.word	0x0004229d
   37ff0:	20029390 	.word	0x20029390
   37ff4:	20029368 	.word	0x20029368
   37ff8:	000422b5 	.word	0x000422b5
   37ffc:	000422cc 	.word	0x000422cc

00038000 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   38000:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   38002:	b570      	push	{r4, r5, r6, lr}
   38004:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   38006:	b103      	cbz	r3, 3800a <z_thread_single_abort+0xa>
		thread->fn_abort();
   38008:	4798      	blx	r3
   3800a:	f104 0018 	add.w	r0, r4, #24
   3800e:	f001 f935 	bl	3927c <z_abort_timeout>
	__asm__ volatile(
   38012:	f04f 0320 	mov.w	r3, #32
   38016:	f3ef 8511 	mrs	r5, BASEPRI
   3801a:	f383 8811 	msr	BASEPRI, r3
   3801e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38022:	482c      	ldr	r0, [pc, #176]	; (380d4 <z_thread_single_abort+0xd4>)
   38024:	f000 fd68 	bl	38af8 <z_spin_lock_valid>
   38028:	b968      	cbnz	r0, 38046 <z_thread_single_abort+0x46>
   3802a:	234a      	movs	r3, #74	; 0x4a
   3802c:	4a2a      	ldr	r2, [pc, #168]	; (380d8 <z_thread_single_abort+0xd8>)
   3802e:	492b      	ldr	r1, [pc, #172]	; (380dc <z_thread_single_abort+0xdc>)
   38030:	482b      	ldr	r0, [pc, #172]	; (380e0 <z_thread_single_abort+0xe0>)
   38032:	f004 facf 	bl	3c5d4 <printk>
   38036:	4927      	ldr	r1, [pc, #156]	; (380d4 <z_thread_single_abort+0xd4>)
   38038:	482a      	ldr	r0, [pc, #168]	; (380e4 <z_thread_single_abort+0xe4>)
   3803a:	f004 facb 	bl	3c5d4 <printk>
   3803e:	214a      	movs	r1, #74	; 0x4a
   38040:	4825      	ldr	r0, [pc, #148]	; (380d8 <z_thread_single_abort+0xd8>)
   38042:	f004 fb0d 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   38046:	4823      	ldr	r0, [pc, #140]	; (380d4 <z_thread_single_abort+0xd4>)
   38048:	f000 fd74 	bl	38b34 <z_spin_lock_set_owner>
		if (z_is_thread_ready(thread)) {
   3804c:	4620      	mov	r0, r4
   3804e:	f006 fcd6 	bl	3e9fe <z_is_thread_ready>
   38052:	4606      	mov	r6, r0
   38054:	b368      	cbz	r0, 380b2 <z_thread_single_abort+0xb2>
			if (z_is_thread_queued(thread)) {
   38056:	f994 300d 	ldrsb.w	r3, [r4, #13]
   3805a:	2b00      	cmp	r3, #0
   3805c:	da07      	bge.n	3806e <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
   3805e:	4621      	mov	r1, r4
   38060:	4821      	ldr	r0, [pc, #132]	; (380e8 <z_thread_single_abort+0xe8>)
   38062:	f7ff fc7f 	bl	37964 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   38066:	7b63      	ldrb	r3, [r4, #13]
   38068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3806c:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   3806e:	4b1f      	ldr	r3, [pc, #124]	; (380ec <z_thread_single_abort+0xec>)
   38070:	6898      	ldr	r0, [r3, #8]
   38072:	1b02      	subs	r2, r0, r4
   38074:	4250      	negs	r0, r2
   38076:	4150      	adcs	r0, r2
   38078:	f7ff fcf8 	bl	37a6c <update_cache>
		thread->base.thread_state |= mask;
   3807c:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3807e:	4815      	ldr	r0, [pc, #84]	; (380d4 <z_thread_single_abort+0xd4>)
   38080:	f043 0308 	orr.w	r3, r3, #8
   38084:	7363      	strb	r3, [r4, #13]
   38086:	f000 fd45 	bl	38b14 <z_spin_unlock_valid>
   3808a:	b968      	cbnz	r0, 380a8 <z_thread_single_abort+0xa8>
   3808c:	235d      	movs	r3, #93	; 0x5d
   3808e:	4a12      	ldr	r2, [pc, #72]	; (380d8 <z_thread_single_abort+0xd8>)
   38090:	4917      	ldr	r1, [pc, #92]	; (380f0 <z_thread_single_abort+0xf0>)
   38092:	4813      	ldr	r0, [pc, #76]	; (380e0 <z_thread_single_abort+0xe0>)
   38094:	f004 fa9e 	bl	3c5d4 <printk>
   38098:	490e      	ldr	r1, [pc, #56]	; (380d4 <z_thread_single_abort+0xd4>)
   3809a:	4816      	ldr	r0, [pc, #88]	; (380f4 <z_thread_single_abort+0xf4>)
   3809c:	f004 fa9a 	bl	3c5d4 <printk>
   380a0:	215d      	movs	r1, #93	; 0x5d
   380a2:	480d      	ldr	r0, [pc, #52]	; (380d8 <z_thread_single_abort+0xd8>)
   380a4:	f004 fadc 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   380a8:	f385 8811 	msr	BASEPRI, r5
   380ac:	f3bf 8f6f 	isb	sy
}
   380b0:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   380b2:	7b63      	ldrb	r3, [r4, #13]
   380b4:	079b      	lsls	r3, r3, #30
   380b6:	d5e1      	bpl.n	3807c <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
   380b8:	f104 0008 	add.w	r0, r4, #8
   380bc:	f7ff fb10 	bl	376e0 <pended_on.isra.17>
   380c0:	4621      	mov	r1, r4
   380c2:	f7ff fc4f 	bl	37964 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   380c6:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   380c8:	60a6      	str	r6, [r4, #8]
   380ca:	f023 0302 	bic.w	r3, r3, #2
   380ce:	7363      	strb	r3, [r4, #13]
   380d0:	e7d4      	b.n	3807c <z_thread_single_abort+0x7c>
   380d2:	bf00      	nop
   380d4:	200293a0 	.word	0x200293a0
   380d8:	00042269 	.word	0x00042269
   380dc:	00042288 	.word	0x00042288
   380e0:	00041757 	.word	0x00041757
   380e4:	0004229d 	.word	0x0004229d
   380e8:	20029390 	.word	0x20029390
   380ec:	20029368 	.word	0x20029368
   380f0:	000422b5 	.word	0x000422b5
   380f4:	000422cc 	.word	0x000422cc

000380f8 <z_remove_thread_from_ready_q>:
{
   380f8:	b538      	push	{r3, r4, r5, lr}
   380fa:	4604      	mov	r4, r0
	__asm__ volatile(
   380fc:	f04f 0320 	mov.w	r3, #32
   38100:	f3ef 8511 	mrs	r5, BASEPRI
   38104:	f383 8811 	msr	BASEPRI, r3
   38108:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3810c:	481f      	ldr	r0, [pc, #124]	; (3818c <z_remove_thread_from_ready_q+0x94>)
   3810e:	f000 fcf3 	bl	38af8 <z_spin_lock_valid>
   38112:	b968      	cbnz	r0, 38130 <z_remove_thread_from_ready_q+0x38>
   38114:	234a      	movs	r3, #74	; 0x4a
   38116:	4a1e      	ldr	r2, [pc, #120]	; (38190 <z_remove_thread_from_ready_q+0x98>)
   38118:	491e      	ldr	r1, [pc, #120]	; (38194 <z_remove_thread_from_ready_q+0x9c>)
   3811a:	481f      	ldr	r0, [pc, #124]	; (38198 <z_remove_thread_from_ready_q+0xa0>)
   3811c:	f004 fa5a 	bl	3c5d4 <printk>
   38120:	491a      	ldr	r1, [pc, #104]	; (3818c <z_remove_thread_from_ready_q+0x94>)
   38122:	481e      	ldr	r0, [pc, #120]	; (3819c <z_remove_thread_from_ready_q+0xa4>)
   38124:	f004 fa56 	bl	3c5d4 <printk>
   38128:	214a      	movs	r1, #74	; 0x4a
   3812a:	4819      	ldr	r0, [pc, #100]	; (38190 <z_remove_thread_from_ready_q+0x98>)
   3812c:	f004 fa98 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   38130:	4816      	ldr	r0, [pc, #88]	; (3818c <z_remove_thread_from_ready_q+0x94>)
   38132:	f000 fcff 	bl	38b34 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   38136:	f994 300d 	ldrsb.w	r3, [r4, #13]
   3813a:	2b00      	cmp	r3, #0
   3813c:	da07      	bge.n	3814e <z_remove_thread_from_ready_q+0x56>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   3813e:	4621      	mov	r1, r4
   38140:	4817      	ldr	r0, [pc, #92]	; (381a0 <z_remove_thread_from_ready_q+0xa8>)
   38142:	f7ff fc0f 	bl	37964 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   38146:	7b63      	ldrb	r3, [r4, #13]
   38148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3814c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   3814e:	4b15      	ldr	r3, [pc, #84]	; (381a4 <z_remove_thread_from_ready_q+0xac>)
   38150:	6898      	ldr	r0, [r3, #8]
   38152:	1b03      	subs	r3, r0, r4
   38154:	4258      	negs	r0, r3
   38156:	4158      	adcs	r0, r3
   38158:	f7ff fc88 	bl	37a6c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3815c:	480b      	ldr	r0, [pc, #44]	; (3818c <z_remove_thread_from_ready_q+0x94>)
   3815e:	f000 fcd9 	bl	38b14 <z_spin_unlock_valid>
   38162:	b968      	cbnz	r0, 38180 <z_remove_thread_from_ready_q+0x88>
   38164:	235d      	movs	r3, #93	; 0x5d
   38166:	4a0a      	ldr	r2, [pc, #40]	; (38190 <z_remove_thread_from_ready_q+0x98>)
   38168:	490f      	ldr	r1, [pc, #60]	; (381a8 <z_remove_thread_from_ready_q+0xb0>)
   3816a:	480b      	ldr	r0, [pc, #44]	; (38198 <z_remove_thread_from_ready_q+0xa0>)
   3816c:	f004 fa32 	bl	3c5d4 <printk>
   38170:	4906      	ldr	r1, [pc, #24]	; (3818c <z_remove_thread_from_ready_q+0x94>)
   38172:	480e      	ldr	r0, [pc, #56]	; (381ac <z_remove_thread_from_ready_q+0xb4>)
   38174:	f004 fa2e 	bl	3c5d4 <printk>
   38178:	215d      	movs	r1, #93	; 0x5d
   3817a:	4805      	ldr	r0, [pc, #20]	; (38190 <z_remove_thread_from_ready_q+0x98>)
   3817c:	f004 fa70 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   38180:	f385 8811 	msr	BASEPRI, r5
   38184:	f3bf 8f6f 	isb	sy
}
   38188:	bd38      	pop	{r3, r4, r5, pc}
   3818a:	bf00      	nop
   3818c:	200293a0 	.word	0x200293a0
   38190:	00042269 	.word	0x00042269
   38194:	00042288 	.word	0x00042288
   38198:	00041757 	.word	0x00041757
   3819c:	0004229d 	.word	0x0004229d
   381a0:	20029390 	.word	0x20029390
   381a4:	20029368 	.word	0x20029368
   381a8:	000422b5 	.word	0x000422b5
   381ac:	000422cc 	.word	0x000422cc

000381b0 <pend>:
{
   381b0:	b570      	push	{r4, r5, r6, lr}
   381b2:	4604      	mov	r4, r0
   381b4:	460d      	mov	r5, r1
   381b6:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   381b8:	f7ff ff9e 	bl	380f8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   381bc:	7b63      	ldrb	r3, [r4, #13]
   381be:	f043 0302 	orr.w	r3, r3, #2
   381c2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   381c4:	b1fd      	cbz	r5, 38206 <pend+0x56>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   381c6:	4b2b      	ldr	r3, [pc, #172]	; (38274 <pend+0xc4>)
		thread->base.pended_on = wait_q;
   381c8:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   381ca:	429c      	cmp	r4, r3
   381cc:	d10b      	bne.n	381e6 <pend+0x36>
   381ce:	492a      	ldr	r1, [pc, #168]	; (38278 <pend+0xc8>)
   381d0:	482a      	ldr	r0, [pc, #168]	; (3827c <pend+0xcc>)
   381d2:	f240 3302 	movw	r3, #770	; 0x302
   381d6:	4a2a      	ldr	r2, [pc, #168]	; (38280 <pend+0xd0>)
   381d8:	f004 f9fc 	bl	3c5d4 <printk>
   381dc:	f240 3102 	movw	r1, #770	; 0x302
   381e0:	4827      	ldr	r0, [pc, #156]	; (38280 <pend+0xd0>)
   381e2:	f004 fa3d 	bl	3c660 <assert_post_action>
	return list->head == list;
   381e6:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   381e8:	429d      	cmp	r5, r3
   381ea:	d03b      	beq.n	38264 <pend+0xb4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   381ec:	2b00      	cmp	r3, #0
   381ee:	d039      	beq.n	38264 <pend+0xb4>
	if (thread_1->base.prio < thread_2->base.prio) {
   381f0:	f994 200e 	ldrsb.w	r2, [r4, #14]
   381f4:	f993 100e 	ldrsb.w	r1, [r3, #14]
   381f8:	4291      	cmp	r1, r2
   381fa:	dd2d      	ble.n	38258 <pend+0xa8>
	node->prev = successor->prev;
   381fc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   381fe:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   38202:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   38204:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   38206:	1c73      	adds	r3, r6, #1
   38208:	d033      	beq.n	38272 <pend+0xc2>
		__ASSERT(timeout >= 0,
   3820a:	2e00      	cmp	r6, #0
   3820c:	da0e      	bge.n	3822c <pend+0x7c>
   3820e:	491d      	ldr	r1, [pc, #116]	; (38284 <pend+0xd4>)
   38210:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   38214:	4a1a      	ldr	r2, [pc, #104]	; (38280 <pend+0xd0>)
   38216:	4819      	ldr	r0, [pc, #100]	; (3827c <pend+0xcc>)
   38218:	f004 f9dc 	bl	3c5d4 <printk>
   3821c:	481a      	ldr	r0, [pc, #104]	; (38288 <pend+0xd8>)
   3821e:	f004 f9d9 	bl	3c5d4 <printk>
   38222:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   38226:	4816      	ldr	r0, [pc, #88]	; (38280 <pend+0xd0>)
   38228:	f004 fa1a 	bl	3c660 <assert_post_action>
   3822c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   38230:	f240 30e7 	movw	r0, #999	; 0x3e7
   38234:	2100      	movs	r1, #0
   38236:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   3823a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3823e:	fbc5 0106 	smlal	r0, r1, r5, r6
   38242:	2300      	movs	r3, #0
   38244:	f7e4 fd9a 	bl	1cd7c <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   38248:	4910      	ldr	r1, [pc, #64]	; (3828c <pend+0xdc>)
   3824a:	1c42      	adds	r2, r0, #1
   3824c:	f104 0018 	add.w	r0, r4, #24
}
   38250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   38254:	f000 bf6c 	b.w	39130 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   38258:	6869      	ldr	r1, [r5, #4]
   3825a:	428b      	cmp	r3, r1
   3825c:	d002      	beq.n	38264 <pend+0xb4>
   3825e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38260:	2b00      	cmp	r3, #0
   38262:	d1c7      	bne.n	381f4 <pend+0x44>
	node->prev = list->tail;
   38264:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   38266:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   38268:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   3826a:	686b      	ldr	r3, [r5, #4]
   3826c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3826e:	606c      	str	r4, [r5, #4]
   38270:	e7c9      	b.n	38206 <pend+0x56>
}
   38272:	bd70      	pop	{r4, r5, r6, pc}
   38274:	20025198 	.word	0x20025198
   38278:	000468bd 	.word	0x000468bd
   3827c:	00041757 	.word	0x00041757
   38280:	0004686c 	.word	0x0004686c
   38284:	00046836 	.word	0x00046836
   38288:	00046843 	.word	0x00046843
   3828c:	00037cd1 	.word	0x00037cd1

00038290 <z_pend_curr_irqlock>:
{
   38290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38292:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   38294:	4d22      	ldr	r5, [pc, #136]	; (38320 <z_pend_curr_irqlock+0x90>)
	pending_current = _current;
   38296:	4c23      	ldr	r4, [pc, #140]	; (38324 <z_pend_curr_irqlock+0x94>)
	pend(_current, wait_q, timeout);
   38298:	68a8      	ldr	r0, [r5, #8]
   3829a:	f7ff ff89 	bl	381b0 <pend>
	pending_current = _current;
   3829e:	68ab      	ldr	r3, [r5, #8]
   382a0:	4630      	mov	r0, r6
   382a2:	6023      	str	r3, [r4, #0]
   382a4:	f7eb fde2 	bl	23e6c <arch_swap>
   382a8:	4606      	mov	r6, r0
	__asm__ volatile(
   382aa:	f04f 0320 	mov.w	r3, #32
   382ae:	f3ef 8711 	mrs	r7, BASEPRI
   382b2:	f383 8811 	msr	BASEPRI, r3
   382b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   382ba:	481b      	ldr	r0, [pc, #108]	; (38328 <z_pend_curr_irqlock+0x98>)
   382bc:	f000 fc1c 	bl	38af8 <z_spin_lock_valid>
   382c0:	b968      	cbnz	r0, 382de <z_pend_curr_irqlock+0x4e>
   382c2:	234a      	movs	r3, #74	; 0x4a
   382c4:	4a19      	ldr	r2, [pc, #100]	; (3832c <z_pend_curr_irqlock+0x9c>)
   382c6:	491a      	ldr	r1, [pc, #104]	; (38330 <z_pend_curr_irqlock+0xa0>)
   382c8:	481a      	ldr	r0, [pc, #104]	; (38334 <z_pend_curr_irqlock+0xa4>)
   382ca:	f004 f983 	bl	3c5d4 <printk>
   382ce:	4916      	ldr	r1, [pc, #88]	; (38328 <z_pend_curr_irqlock+0x98>)
   382d0:	4819      	ldr	r0, [pc, #100]	; (38338 <z_pend_curr_irqlock+0xa8>)
   382d2:	f004 f97f 	bl	3c5d4 <printk>
   382d6:	214a      	movs	r1, #74	; 0x4a
   382d8:	4814      	ldr	r0, [pc, #80]	; (3832c <z_pend_curr_irqlock+0x9c>)
   382da:	f004 f9c1 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   382de:	4812      	ldr	r0, [pc, #72]	; (38328 <z_pend_curr_irqlock+0x98>)
   382e0:	f000 fc28 	bl	38b34 <z_spin_lock_set_owner>
		if (pending_current == _current) {
   382e4:	6823      	ldr	r3, [r4, #0]
   382e6:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   382e8:	480f      	ldr	r0, [pc, #60]	; (38328 <z_pend_curr_irqlock+0x98>)
   382ea:	429a      	cmp	r2, r3
			pending_current = NULL;
   382ec:	bf04      	itt	eq
   382ee:	2300      	moveq	r3, #0
   382f0:	6023      	streq	r3, [r4, #0]
   382f2:	f000 fc0f 	bl	38b14 <z_spin_unlock_valid>
   382f6:	b968      	cbnz	r0, 38314 <z_pend_curr_irqlock+0x84>
   382f8:	235d      	movs	r3, #93	; 0x5d
   382fa:	4a0c      	ldr	r2, [pc, #48]	; (3832c <z_pend_curr_irqlock+0x9c>)
   382fc:	490f      	ldr	r1, [pc, #60]	; (3833c <z_pend_curr_irqlock+0xac>)
   382fe:	480d      	ldr	r0, [pc, #52]	; (38334 <z_pend_curr_irqlock+0xa4>)
   38300:	f004 f968 	bl	3c5d4 <printk>
   38304:	4908      	ldr	r1, [pc, #32]	; (38328 <z_pend_curr_irqlock+0x98>)
   38306:	480e      	ldr	r0, [pc, #56]	; (38340 <z_pend_curr_irqlock+0xb0>)
   38308:	f004 f964 	bl	3c5d4 <printk>
   3830c:	215d      	movs	r1, #93	; 0x5d
   3830e:	4807      	ldr	r0, [pc, #28]	; (3832c <z_pend_curr_irqlock+0x9c>)
   38310:	f004 f9a6 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   38314:	f387 8811 	msr	BASEPRI, r7
   38318:	f3bf 8f6f 	isb	sy
}
   3831c:	4630      	mov	r0, r6
   3831e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38320:	20029368 	.word	0x20029368
   38324:	2002939c 	.word	0x2002939c
   38328:	200293a0 	.word	0x200293a0
   3832c:	00042269 	.word	0x00042269
   38330:	00042288 	.word	0x00042288
   38334:	00041757 	.word	0x00041757
   38338:	0004229d 	.word	0x0004229d
   3833c:	000422b5 	.word	0x000422b5
   38340:	000422cc 	.word	0x000422cc

00038344 <z_pend_curr>:
{
   38344:	b538      	push	{r3, r4, r5, lr}
   38346:	4604      	mov	r4, r0
   38348:	460d      	mov	r5, r1
   3834a:	4611      	mov	r1, r2
	pending_current = _current;
   3834c:	4a0e      	ldr	r2, [pc, #56]	; (38388 <z_pend_curr+0x44>)
   3834e:	6890      	ldr	r0, [r2, #8]
   38350:	4a0e      	ldr	r2, [pc, #56]	; (3838c <z_pend_curr+0x48>)
   38352:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   38354:	461a      	mov	r2, r3
   38356:	f7ff ff2b 	bl	381b0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3835a:	4620      	mov	r0, r4
   3835c:	f000 fbda 	bl	38b14 <z_spin_unlock_valid>
   38360:	b968      	cbnz	r0, 3837e <z_pend_curr+0x3a>
   38362:	2374      	movs	r3, #116	; 0x74
   38364:	4a0a      	ldr	r2, [pc, #40]	; (38390 <z_pend_curr+0x4c>)
   38366:	490b      	ldr	r1, [pc, #44]	; (38394 <z_pend_curr+0x50>)
   38368:	480b      	ldr	r0, [pc, #44]	; (38398 <z_pend_curr+0x54>)
   3836a:	f004 f933 	bl	3c5d4 <printk>
   3836e:	4621      	mov	r1, r4
   38370:	480a      	ldr	r0, [pc, #40]	; (3839c <z_pend_curr+0x58>)
   38372:	f004 f92f 	bl	3c5d4 <printk>
   38376:	2174      	movs	r1, #116	; 0x74
   38378:	4805      	ldr	r0, [pc, #20]	; (38390 <z_pend_curr+0x4c>)
   3837a:	f004 f971 	bl	3c660 <assert_post_action>
   3837e:	4628      	mov	r0, r5
}
   38380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   38384:	f7eb bd72 	b.w	23e6c <arch_swap>
   38388:	20029368 	.word	0x20029368
   3838c:	2002939c 	.word	0x2002939c
   38390:	00042269 	.word	0x00042269
   38394:	000422b5 	.word	0x000422b5
   38398:	00041757 	.word	0x00041757
   3839c:	000422cc 	.word	0x000422cc

000383a0 <z_set_prio>:
{
   383a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   383a2:	4604      	mov	r4, r0
   383a4:	460d      	mov	r5, r1
	__asm__ volatile(
   383a6:	f04f 0320 	mov.w	r3, #32
   383aa:	f3ef 8611 	mrs	r6, BASEPRI
   383ae:	f383 8811 	msr	BASEPRI, r3
   383b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   383b6:	4835      	ldr	r0, [pc, #212]	; (3848c <z_set_prio+0xec>)
   383b8:	f000 fb9e 	bl	38af8 <z_spin_lock_valid>
   383bc:	b968      	cbnz	r0, 383da <z_set_prio+0x3a>
   383be:	234a      	movs	r3, #74	; 0x4a
   383c0:	4a33      	ldr	r2, [pc, #204]	; (38490 <z_set_prio+0xf0>)
   383c2:	4934      	ldr	r1, [pc, #208]	; (38494 <z_set_prio+0xf4>)
   383c4:	4834      	ldr	r0, [pc, #208]	; (38498 <z_set_prio+0xf8>)
   383c6:	f004 f905 	bl	3c5d4 <printk>
   383ca:	4930      	ldr	r1, [pc, #192]	; (3848c <z_set_prio+0xec>)
   383cc:	4833      	ldr	r0, [pc, #204]	; (3849c <z_set_prio+0xfc>)
   383ce:	f004 f901 	bl	3c5d4 <printk>
   383d2:	214a      	movs	r1, #74	; 0x4a
   383d4:	482e      	ldr	r0, [pc, #184]	; (38490 <z_set_prio+0xf0>)
   383d6:	f004 f943 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   383da:	482c      	ldr	r0, [pc, #176]	; (3848c <z_set_prio+0xec>)
   383dc:	f000 fbaa 	bl	38b34 <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   383e0:	4620      	mov	r0, r4
   383e2:	f006 fb0c 	bl	3e9fe <z_is_thread_ready>
		if (need_sched) {
   383e6:	b26d      	sxtb	r5, r5
   383e8:	4607      	mov	r7, r0
   383ea:	2800      	cmp	r0, #0
   383ec:	d04c      	beq.n	38488 <z_set_prio+0xe8>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   383ee:	4621      	mov	r1, r4
   383f0:	482b      	ldr	r0, [pc, #172]	; (384a0 <z_set_prio+0x100>)
   383f2:	f7ff fab7 	bl	37964 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   383f6:	4b2b      	ldr	r3, [pc, #172]	; (384a4 <z_set_prio+0x104>)
				thread->base.prio = prio;
   383f8:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   383fa:	429c      	cmp	r4, r3
   383fc:	d10b      	bne.n	38416 <z_set_prio+0x76>
   383fe:	492a      	ldr	r1, [pc, #168]	; (384a8 <z_set_prio+0x108>)
   38400:	4825      	ldr	r0, [pc, #148]	; (38498 <z_set_prio+0xf8>)
   38402:	f240 3302 	movw	r3, #770	; 0x302
   38406:	4a29      	ldr	r2, [pc, #164]	; (384ac <z_set_prio+0x10c>)
   38408:	f004 f8e4 	bl	3c5d4 <printk>
   3840c:	f240 3102 	movw	r1, #770	; 0x302
   38410:	4826      	ldr	r0, [pc, #152]	; (384ac <z_set_prio+0x10c>)
   38412:	f004 f925 	bl	3c660 <assert_post_action>
	return list->head == list;
   38416:	4a26      	ldr	r2, [pc, #152]	; (384b0 <z_set_prio+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38418:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3841c:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   38420:	428b      	cmp	r3, r1
   38422:	d02b      	beq.n	3847c <z_set_prio+0xdc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38424:	b353      	cbz	r3, 3847c <z_set_prio+0xdc>
	if (thread_1->base.prio < thread_2->base.prio) {
   38426:	f994 500e 	ldrsb.w	r5, [r4, #14]
   3842a:	f993 c00e 	ldrsb.w	ip, [r3, #14]
   3842e:	45ac      	cmp	ip, r5
   38430:	dd1f      	ble.n	38472 <z_set_prio+0xd2>
	node->prev = successor->prev;
   38432:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   38434:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   38438:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3843a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   3843c:	2001      	movs	r0, #1
   3843e:	f7ff fb15 	bl	37a6c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38442:	4812      	ldr	r0, [pc, #72]	; (3848c <z_set_prio+0xec>)
   38444:	f000 fb66 	bl	38b14 <z_spin_unlock_valid>
   38448:	b968      	cbnz	r0, 38466 <z_set_prio+0xc6>
   3844a:	235d      	movs	r3, #93	; 0x5d
   3844c:	4a10      	ldr	r2, [pc, #64]	; (38490 <z_set_prio+0xf0>)
   3844e:	4919      	ldr	r1, [pc, #100]	; (384b4 <z_set_prio+0x114>)
   38450:	4811      	ldr	r0, [pc, #68]	; (38498 <z_set_prio+0xf8>)
   38452:	f004 f8bf 	bl	3c5d4 <printk>
   38456:	490d      	ldr	r1, [pc, #52]	; (3848c <z_set_prio+0xec>)
   38458:	4817      	ldr	r0, [pc, #92]	; (384b8 <z_set_prio+0x118>)
   3845a:	f004 f8bb 	bl	3c5d4 <printk>
   3845e:	215d      	movs	r1, #93	; 0x5d
   38460:	480b      	ldr	r0, [pc, #44]	; (38490 <z_set_prio+0xf0>)
   38462:	f004 f8fd 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   38466:	f386 8811 	msr	BASEPRI, r6
   3846a:	f3bf 8f6f 	isb	sy
}
   3846e:	4638      	mov	r0, r7
   38470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   38472:	4298      	cmp	r0, r3
   38474:	d002      	beq.n	3847c <z_set_prio+0xdc>
   38476:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38478:	2b00      	cmp	r3, #0
   3847a:	d1d6      	bne.n	3842a <z_set_prio+0x8a>
	node->prev = list->tail;
   3847c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   38480:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   38482:	601c      	str	r4, [r3, #0]
	list->tail = node;
   38484:	62d4      	str	r4, [r2, #44]	; 0x2c
   38486:	e7d9      	b.n	3843c <z_set_prio+0x9c>
			thread->base.prio = prio;
   38488:	73a5      	strb	r5, [r4, #14]
   3848a:	e7da      	b.n	38442 <z_set_prio+0xa2>
   3848c:	200293a0 	.word	0x200293a0
   38490:	00042269 	.word	0x00042269
   38494:	00042288 	.word	0x00042288
   38498:	00041757 	.word	0x00041757
   3849c:	0004229d 	.word	0x0004229d
   384a0:	20029390 	.word	0x20029390
   384a4:	20025198 	.word	0x20025198
   384a8:	000468bd 	.word	0x000468bd
   384ac:	0004686c 	.word	0x0004686c
   384b0:	20029368 	.word	0x20029368
   384b4:	000422b5 	.word	0x000422b5
   384b8:	000422cc 	.word	0x000422cc

000384bc <z_unpend_first_thread>:
{
   384bc:	b538      	push	{r3, r4, r5, lr}
   384be:	4604      	mov	r4, r0
	__asm__ volatile(
   384c0:	f04f 0320 	mov.w	r3, #32
   384c4:	f3ef 8511 	mrs	r5, BASEPRI
   384c8:	f383 8811 	msr	BASEPRI, r3
   384cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   384d0:	483b      	ldr	r0, [pc, #236]	; (385c0 <z_unpend_first_thread+0x104>)
   384d2:	f000 fb11 	bl	38af8 <z_spin_lock_valid>
   384d6:	b968      	cbnz	r0, 384f4 <z_unpend_first_thread+0x38>
   384d8:	234a      	movs	r3, #74	; 0x4a
   384da:	4a3a      	ldr	r2, [pc, #232]	; (385c4 <z_unpend_first_thread+0x108>)
   384dc:	493a      	ldr	r1, [pc, #232]	; (385c8 <z_unpend_first_thread+0x10c>)
   384de:	483b      	ldr	r0, [pc, #236]	; (385cc <z_unpend_first_thread+0x110>)
   384e0:	f004 f878 	bl	3c5d4 <printk>
   384e4:	4936      	ldr	r1, [pc, #216]	; (385c0 <z_unpend_first_thread+0x104>)
   384e6:	483a      	ldr	r0, [pc, #232]	; (385d0 <z_unpend_first_thread+0x114>)
   384e8:	f004 f874 	bl	3c5d4 <printk>
   384ec:	214a      	movs	r1, #74	; 0x4a
   384ee:	4835      	ldr	r0, [pc, #212]	; (385c4 <z_unpend_first_thread+0x108>)
   384f0:	f004 f8b6 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   384f4:	4832      	ldr	r0, [pc, #200]	; (385c0 <z_unpend_first_thread+0x104>)
   384f6:	f000 fb1d 	bl	38b34 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   384fa:	4620      	mov	r0, r4
   384fc:	f006 faa7 	bl	3ea4e <z_priq_dumb_best>
   38500:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38502:	482f      	ldr	r0, [pc, #188]	; (385c0 <z_unpend_first_thread+0x104>)
   38504:	f000 fb06 	bl	38b14 <z_spin_unlock_valid>
   38508:	b968      	cbnz	r0, 38526 <z_unpend_first_thread+0x6a>
   3850a:	235d      	movs	r3, #93	; 0x5d
   3850c:	4a2d      	ldr	r2, [pc, #180]	; (385c4 <z_unpend_first_thread+0x108>)
   3850e:	4931      	ldr	r1, [pc, #196]	; (385d4 <z_unpend_first_thread+0x118>)
   38510:	482e      	ldr	r0, [pc, #184]	; (385cc <z_unpend_first_thread+0x110>)
   38512:	f004 f85f 	bl	3c5d4 <printk>
   38516:	492a      	ldr	r1, [pc, #168]	; (385c0 <z_unpend_first_thread+0x104>)
   38518:	482f      	ldr	r0, [pc, #188]	; (385d8 <z_unpend_first_thread+0x11c>)
   3851a:	f004 f85b 	bl	3c5d4 <printk>
   3851e:	215d      	movs	r1, #93	; 0x5d
   38520:	4828      	ldr	r0, [pc, #160]	; (385c4 <z_unpend_first_thread+0x108>)
   38522:	f004 f89d 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   38526:	f385 8811 	msr	BASEPRI, r5
   3852a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   3852e:	2c00      	cmp	r4, #0
   38530:	d043      	beq.n	385ba <z_unpend_first_thread+0xfe>
	__asm__ volatile(
   38532:	f04f 0320 	mov.w	r3, #32
   38536:	f3ef 8511 	mrs	r5, BASEPRI
   3853a:	f383 8811 	msr	BASEPRI, r3
   3853e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38542:	481f      	ldr	r0, [pc, #124]	; (385c0 <z_unpend_first_thread+0x104>)
   38544:	f000 fad8 	bl	38af8 <z_spin_lock_valid>
   38548:	b968      	cbnz	r0, 38566 <z_unpend_first_thread+0xaa>
   3854a:	234a      	movs	r3, #74	; 0x4a
   3854c:	4a1d      	ldr	r2, [pc, #116]	; (385c4 <z_unpend_first_thread+0x108>)
   3854e:	491e      	ldr	r1, [pc, #120]	; (385c8 <z_unpend_first_thread+0x10c>)
   38550:	481e      	ldr	r0, [pc, #120]	; (385cc <z_unpend_first_thread+0x110>)
   38552:	f004 f83f 	bl	3c5d4 <printk>
   38556:	491a      	ldr	r1, [pc, #104]	; (385c0 <z_unpend_first_thread+0x104>)
   38558:	481d      	ldr	r0, [pc, #116]	; (385d0 <z_unpend_first_thread+0x114>)
   3855a:	f004 f83b 	bl	3c5d4 <printk>
   3855e:	214a      	movs	r1, #74	; 0x4a
   38560:	4818      	ldr	r0, [pc, #96]	; (385c4 <z_unpend_first_thread+0x108>)
   38562:	f004 f87d 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   38566:	4816      	ldr	r0, [pc, #88]	; (385c0 <z_unpend_first_thread+0x104>)
   38568:	f000 fae4 	bl	38b34 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3856c:	f104 0008 	add.w	r0, r4, #8
   38570:	f7ff f8b6 	bl	376e0 <pended_on.isra.17>
   38574:	4621      	mov	r1, r4
   38576:	f7ff f9f5 	bl	37964 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3857a:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3857c:	4810      	ldr	r0, [pc, #64]	; (385c0 <z_unpend_first_thread+0x104>)
   3857e:	f023 0302 	bic.w	r3, r3, #2
   38582:	7363      	strb	r3, [r4, #13]
   38584:	f000 fac6 	bl	38b14 <z_spin_unlock_valid>
   38588:	b968      	cbnz	r0, 385a6 <z_unpend_first_thread+0xea>
   3858a:	235d      	movs	r3, #93	; 0x5d
   3858c:	4a0d      	ldr	r2, [pc, #52]	; (385c4 <z_unpend_first_thread+0x108>)
   3858e:	4911      	ldr	r1, [pc, #68]	; (385d4 <z_unpend_first_thread+0x118>)
   38590:	480e      	ldr	r0, [pc, #56]	; (385cc <z_unpend_first_thread+0x110>)
   38592:	f004 f81f 	bl	3c5d4 <printk>
   38596:	490a      	ldr	r1, [pc, #40]	; (385c0 <z_unpend_first_thread+0x104>)
   38598:	480f      	ldr	r0, [pc, #60]	; (385d8 <z_unpend_first_thread+0x11c>)
   3859a:	f004 f81b 	bl	3c5d4 <printk>
   3859e:	215d      	movs	r1, #93	; 0x5d
   385a0:	4808      	ldr	r0, [pc, #32]	; (385c4 <z_unpend_first_thread+0x108>)
   385a2:	f004 f85d 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   385a6:	f385 8811 	msr	BASEPRI, r5
   385aa:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   385ae:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   385b0:	f104 0018 	add.w	r0, r4, #24
   385b4:	60a3      	str	r3, [r4, #8]
   385b6:	f000 fe61 	bl	3927c <z_abort_timeout>
}
   385ba:	4620      	mov	r0, r4
   385bc:	bd38      	pop	{r3, r4, r5, pc}
   385be:	bf00      	nop
   385c0:	200293a0 	.word	0x200293a0
   385c4:	00042269 	.word	0x00042269
   385c8:	00042288 	.word	0x00042288
   385cc:	00041757 	.word	0x00041757
   385d0:	0004229d 	.word	0x0004229d
   385d4:	000422b5 	.word	0x000422b5
   385d8:	000422cc 	.word	0x000422cc

000385dc <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   385dc:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   385de:	4b04      	ldr	r3, [pc, #16]	; (385f0 <z_sched_init+0x14>)
   385e0:	4608      	mov	r0, r1
   385e2:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   385e6:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   385ea:	f7ff b8a7 	b.w	3773c <k_sched_time_slice_set>
   385ee:	bf00      	nop
   385f0:	20029368 	.word	0x20029368

000385f4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   385f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   385f6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   385fa:	b173      	cbz	r3, 3861a <z_impl_k_yield+0x26>
   385fc:	4945      	ldr	r1, [pc, #276]	; (38714 <z_impl_k_yield+0x120>)
   385fe:	f240 430d 	movw	r3, #1037	; 0x40d
   38602:	4a45      	ldr	r2, [pc, #276]	; (38718 <z_impl_k_yield+0x124>)
   38604:	4845      	ldr	r0, [pc, #276]	; (3871c <z_impl_k_yield+0x128>)
   38606:	f003 ffe5 	bl	3c5d4 <printk>
   3860a:	4845      	ldr	r0, [pc, #276]	; (38720 <z_impl_k_yield+0x12c>)
   3860c:	f003 ffe2 	bl	3c5d4 <printk>
   38610:	f240 410d 	movw	r1, #1037	; 0x40d
   38614:	4840      	ldr	r0, [pc, #256]	; (38718 <z_impl_k_yield+0x124>)
   38616:	f004 f823 	bl	3c660 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   3861a:	4c42      	ldr	r4, [pc, #264]	; (38724 <z_impl_k_yield+0x130>)
   3861c:	4e42      	ldr	r6, [pc, #264]	; (38728 <z_impl_k_yield+0x134>)
   3861e:	68a2      	ldr	r2, [r4, #8]
   38620:	42b2      	cmp	r2, r6
   38622:	d05f      	beq.n	386e4 <z_impl_k_yield+0xf0>
	__asm__ volatile(
   38624:	f04f 0320 	mov.w	r3, #32
   38628:	f3ef 8711 	mrs	r7, BASEPRI
   3862c:	f383 8811 	msr	BASEPRI, r3
   38630:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38634:	483d      	ldr	r0, [pc, #244]	; (3872c <z_impl_k_yield+0x138>)
   38636:	f000 fa5f 	bl	38af8 <z_spin_lock_valid>
   3863a:	b968      	cbnz	r0, 38658 <z_impl_k_yield+0x64>
   3863c:	234a      	movs	r3, #74	; 0x4a
   3863e:	4a3c      	ldr	r2, [pc, #240]	; (38730 <z_impl_k_yield+0x13c>)
   38640:	493c      	ldr	r1, [pc, #240]	; (38734 <z_impl_k_yield+0x140>)
   38642:	4836      	ldr	r0, [pc, #216]	; (3871c <z_impl_k_yield+0x128>)
   38644:	f003 ffc6 	bl	3c5d4 <printk>
   38648:	4938      	ldr	r1, [pc, #224]	; (3872c <z_impl_k_yield+0x138>)
   3864a:	483b      	ldr	r0, [pc, #236]	; (38738 <z_impl_k_yield+0x144>)
   3864c:	f003 ffc2 	bl	3c5d4 <printk>
   38650:	214a      	movs	r1, #74	; 0x4a
   38652:	4837      	ldr	r0, [pc, #220]	; (38730 <z_impl_k_yield+0x13c>)
   38654:	f004 f804 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   38658:	4834      	ldr	r0, [pc, #208]	; (3872c <z_impl_k_yield+0x138>)
   3865a:	f000 fa6b 	bl	38b34 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   3865e:	68a1      	ldr	r1, [r4, #8]
   38660:	4836      	ldr	r0, [pc, #216]	; (3873c <z_impl_k_yield+0x148>)
   38662:	f7ff f97f 	bl	37964 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   38666:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38668:	42b5      	cmp	r5, r6
   3866a:	d10b      	bne.n	38684 <z_impl_k_yield+0x90>
   3866c:	4934      	ldr	r1, [pc, #208]	; (38740 <z_impl_k_yield+0x14c>)
   3866e:	482b      	ldr	r0, [pc, #172]	; (3871c <z_impl_k_yield+0x128>)
   38670:	f240 3302 	movw	r3, #770	; 0x302
   38674:	4a28      	ldr	r2, [pc, #160]	; (38718 <z_impl_k_yield+0x124>)
   38676:	f003 ffad 	bl	3c5d4 <printk>
   3867a:	f240 3102 	movw	r1, #770	; 0x302
   3867e:	4826      	ldr	r0, [pc, #152]	; (38718 <z_impl_k_yield+0x124>)
   38680:	f003 ffee 	bl	3c660 <assert_post_action>
	return list->head == list;
   38684:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38688:	4a2c      	ldr	r2, [pc, #176]	; (3873c <z_impl_k_yield+0x148>)
   3868a:	4293      	cmp	r3, r2
   3868c:	d03b      	beq.n	38706 <z_impl_k_yield+0x112>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3868e:	2b00      	cmp	r3, #0
   38690:	d039      	beq.n	38706 <z_impl_k_yield+0x112>
	if (thread_1->base.prio < thread_2->base.prio) {
   38692:	f995 000e 	ldrsb.w	r0, [r5, #14]
   38696:	f993 600e 	ldrsb.w	r6, [r3, #14]
   3869a:	4286      	cmp	r6, r0
   3869c:	dd2e      	ble.n	386fc <z_impl_k_yield+0x108>
	node->prev = successor->prev;
   3869e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   386a0:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   386a4:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   386a6:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   386a8:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   386aa:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   386ac:	7b53      	ldrb	r3, [r2, #13]
   386ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
   386b2:	7353      	strb	r3, [r2, #13]
   386b4:	f7ff f9da 	bl	37a6c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   386b8:	481c      	ldr	r0, [pc, #112]	; (3872c <z_impl_k_yield+0x138>)
   386ba:	f000 fa2b 	bl	38b14 <z_spin_unlock_valid>
   386be:	b968      	cbnz	r0, 386dc <z_impl_k_yield+0xe8>
   386c0:	235d      	movs	r3, #93	; 0x5d
   386c2:	4a1b      	ldr	r2, [pc, #108]	; (38730 <z_impl_k_yield+0x13c>)
   386c4:	491f      	ldr	r1, [pc, #124]	; (38744 <z_impl_k_yield+0x150>)
   386c6:	4815      	ldr	r0, [pc, #84]	; (3871c <z_impl_k_yield+0x128>)
   386c8:	f003 ff84 	bl	3c5d4 <printk>
   386cc:	4917      	ldr	r1, [pc, #92]	; (3872c <z_impl_k_yield+0x138>)
   386ce:	481e      	ldr	r0, [pc, #120]	; (38748 <z_impl_k_yield+0x154>)
   386d0:	f003 ff80 	bl	3c5d4 <printk>
   386d4:	215d      	movs	r1, #93	; 0x5d
   386d6:	4816      	ldr	r0, [pc, #88]	; (38730 <z_impl_k_yield+0x13c>)
   386d8:	f003 ffc2 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   386dc:	f387 8811 	msr	BASEPRI, r7
   386e0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   386e4:	f04f 0320 	mov.w	r3, #32
   386e8:	f3ef 8011 	mrs	r0, BASEPRI
   386ec:	f383 8811 	msr	BASEPRI, r3
   386f0:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   386f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   386f8:	f7eb bbb8 	b.w	23e6c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   386fc:	4299      	cmp	r1, r3
   386fe:	d002      	beq.n	38706 <z_impl_k_yield+0x112>
   38700:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38702:	2b00      	cmp	r3, #0
   38704:	d1c7      	bne.n	38696 <z_impl_k_yield+0xa2>
	node->prev = list->tail;
   38706:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   3870a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   3870c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3870e:	62e5      	str	r5, [r4, #44]	; 0x2c
   38710:	e7ca      	b.n	386a8 <z_impl_k_yield+0xb4>
   38712:	bf00      	nop
   38714:	000467d4 	.word	0x000467d4
   38718:	0004686c 	.word	0x0004686c
   3871c:	00041757 	.word	0x00041757
   38720:	0004311f 	.word	0x0004311f
   38724:	20029368 	.word	0x20029368
   38728:	20025198 	.word	0x20025198
   3872c:	200293a0 	.word	0x200293a0
   38730:	00042269 	.word	0x00042269
   38734:	00042288 	.word	0x00042288
   38738:	0004229d 	.word	0x0004229d
   3873c:	20029390 	.word	0x20029390
   38740:	000468bd 	.word	0x000468bd
   38744:	000422b5 	.word	0x000422b5
   38748:	000422cc 	.word	0x000422cc

0003874c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   3874c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3874e:	4604      	mov	r4, r0
   38750:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   38754:	b173      	cbz	r3, 38774 <z_tick_sleep+0x28>
   38756:	493b      	ldr	r1, [pc, #236]	; (38844 <z_tick_sleep+0xf8>)
   38758:	f240 432b 	movw	r3, #1067	; 0x42b
   3875c:	4a3a      	ldr	r2, [pc, #232]	; (38848 <z_tick_sleep+0xfc>)
   3875e:	483b      	ldr	r0, [pc, #236]	; (3884c <z_tick_sleep+0x100>)
   38760:	f003 ff38 	bl	3c5d4 <printk>
   38764:	483a      	ldr	r0, [pc, #232]	; (38850 <z_tick_sleep+0x104>)
   38766:	f003 ff35 	bl	3c5d4 <printk>
   3876a:	f240 412b 	movw	r1, #1067	; 0x42b
   3876e:	4836      	ldr	r0, [pc, #216]	; (38848 <z_tick_sleep+0xfc>)
   38770:	f003 ff76 	bl	3c660 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   38774:	b924      	cbnz	r4, 38780 <z_tick_sleep+0x34>
	z_impl_k_yield();
   38776:	f7ff ff3d 	bl	385f4 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   3877a:	4620      	mov	r0, r4
   3877c:	b003      	add	sp, #12
   3877e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   38780:	f006 fa19 	bl	3ebb6 <z_tick_get_32>
	struct k_spinlock local_lock = {};
   38784:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   38786:	1c66      	adds	r6, r4, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   38788:	1834      	adds	r4, r6, r0
	struct k_spinlock local_lock = {};
   3878a:	9301      	str	r3, [sp, #4]
   3878c:	f04f 0320 	mov.w	r3, #32
   38790:	f3ef 8711 	mrs	r7, BASEPRI
   38794:	f383 8811 	msr	BASEPRI, r3
   38798:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3879c:	a801      	add	r0, sp, #4
   3879e:	f000 f9ab 	bl	38af8 <z_spin_lock_valid>
   387a2:	b968      	cbnz	r0, 387c0 <z_tick_sleep+0x74>
   387a4:	234a      	movs	r3, #74	; 0x4a
   387a6:	4a2b      	ldr	r2, [pc, #172]	; (38854 <z_tick_sleep+0x108>)
   387a8:	492b      	ldr	r1, [pc, #172]	; (38858 <z_tick_sleep+0x10c>)
   387aa:	4828      	ldr	r0, [pc, #160]	; (3884c <z_tick_sleep+0x100>)
   387ac:	f003 ff12 	bl	3c5d4 <printk>
   387b0:	a901      	add	r1, sp, #4
   387b2:	482a      	ldr	r0, [pc, #168]	; (3885c <z_tick_sleep+0x110>)
   387b4:	f003 ff0e 	bl	3c5d4 <printk>
   387b8:	214a      	movs	r1, #74	; 0x4a
   387ba:	4826      	ldr	r0, [pc, #152]	; (38854 <z_tick_sleep+0x108>)
   387bc:	f003 ff50 	bl	3c660 <assert_post_action>
	pending_current = _current;
   387c0:	4d27      	ldr	r5, [pc, #156]	; (38860 <z_tick_sleep+0x114>)
	z_spin_lock_set_owner(l);
   387c2:	a801      	add	r0, sp, #4
   387c4:	f000 f9b6 	bl	38b34 <z_spin_lock_set_owner>
   387c8:	4b26      	ldr	r3, [pc, #152]	; (38864 <z_tick_sleep+0x118>)
   387ca:	68a8      	ldr	r0, [r5, #8]
   387cc:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   387ce:	f7ff fc93 	bl	380f8 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   387d2:	68a8      	ldr	r0, [r5, #8]
   387d4:	4632      	mov	r2, r6
   387d6:	3018      	adds	r0, #24
   387d8:	4923      	ldr	r1, [pc, #140]	; (38868 <z_tick_sleep+0x11c>)
   387da:	f000 fca9 	bl	39130 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   387de:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   387e0:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   387e2:	7b53      	ldrb	r3, [r2, #13]
   387e4:	f043 0310 	orr.w	r3, r3, #16
   387e8:	7353      	strb	r3, [r2, #13]
   387ea:	f000 f993 	bl	38b14 <z_spin_unlock_valid>
   387ee:	b968      	cbnz	r0, 3880c <z_tick_sleep+0xc0>
   387f0:	2374      	movs	r3, #116	; 0x74
   387f2:	4a18      	ldr	r2, [pc, #96]	; (38854 <z_tick_sleep+0x108>)
   387f4:	491d      	ldr	r1, [pc, #116]	; (3886c <z_tick_sleep+0x120>)
   387f6:	4815      	ldr	r0, [pc, #84]	; (3884c <z_tick_sleep+0x100>)
   387f8:	f003 feec 	bl	3c5d4 <printk>
   387fc:	a901      	add	r1, sp, #4
   387fe:	481c      	ldr	r0, [pc, #112]	; (38870 <z_tick_sleep+0x124>)
   38800:	f003 fee8 	bl	3c5d4 <printk>
   38804:	2174      	movs	r1, #116	; 0x74
   38806:	4813      	ldr	r0, [pc, #76]	; (38854 <z_tick_sleep+0x108>)
   38808:	f003 ff2a 	bl	3c660 <assert_post_action>
   3880c:	4638      	mov	r0, r7
   3880e:	f7eb fb2d 	bl	23e6c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   38812:	68ab      	ldr	r3, [r5, #8]
   38814:	7b5b      	ldrb	r3, [r3, #13]
   38816:	06db      	lsls	r3, r3, #27
   38818:	d50e      	bpl.n	38838 <z_tick_sleep+0xec>
   3881a:	4916      	ldr	r1, [pc, #88]	; (38874 <z_tick_sleep+0x128>)
   3881c:	f44f 6389 	mov.w	r3, #1096	; 0x448
   38820:	4a09      	ldr	r2, [pc, #36]	; (38848 <z_tick_sleep+0xfc>)
   38822:	480a      	ldr	r0, [pc, #40]	; (3884c <z_tick_sleep+0x100>)
   38824:	f003 fed6 	bl	3c5d4 <printk>
   38828:	4809      	ldr	r0, [pc, #36]	; (38850 <z_tick_sleep+0x104>)
   3882a:	f003 fed3 	bl	3c5d4 <printk>
   3882e:	f44f 6189 	mov.w	r1, #1096	; 0x448
   38832:	4805      	ldr	r0, [pc, #20]	; (38848 <z_tick_sleep+0xfc>)
   38834:	f003 ff14 	bl	3c660 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   38838:	f006 f9bd 	bl	3ebb6 <z_tick_get_32>
   3883c:	1a24      	subs	r4, r4, r0
   3883e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   38842:	e79a      	b.n	3877a <z_tick_sleep+0x2e>
   38844:	000467d4 	.word	0x000467d4
   38848:	0004686c 	.word	0x0004686c
   3884c:	00041757 	.word	0x00041757
   38850:	0004311f 	.word	0x0004311f
   38854:	00042269 	.word	0x00042269
   38858:	00042288 	.word	0x00042288
   3885c:	0004229d 	.word	0x0004229d
   38860:	20029368 	.word	0x20029368
   38864:	2002939c 	.word	0x2002939c
   38868:	00037cd1 	.word	0x00037cd1
   3886c:	000422b5 	.word	0x000422b5
   38870:	000422cc 	.word	0x000422cc
   38874:	000468de 	.word	0x000468de

00038878 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   38878:	b538      	push	{r3, r4, r5, lr}
   3887a:	4604      	mov	r4, r0
   3887c:	f3ef 8305 	mrs	r3, IPSR
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   38880:	b173      	cbz	r3, 388a0 <z_impl_k_sleep+0x28>
   38882:	4916      	ldr	r1, [pc, #88]	; (388dc <z_impl_k_sleep+0x64>)
   38884:	f240 4357 	movw	r3, #1111	; 0x457
   38888:	4a15      	ldr	r2, [pc, #84]	; (388e0 <z_impl_k_sleep+0x68>)
   3888a:	4816      	ldr	r0, [pc, #88]	; (388e4 <z_impl_k_sleep+0x6c>)
   3888c:	f003 fea2 	bl	3c5d4 <printk>
   38890:	4815      	ldr	r0, [pc, #84]	; (388e8 <z_impl_k_sleep+0x70>)
   38892:	f003 fe9f 	bl	3c5d4 <printk>
   38896:	f240 4157 	movw	r1, #1111	; 0x457
   3889a:	4811      	ldr	r0, [pc, #68]	; (388e0 <z_impl_k_sleep+0x68>)
   3889c:	f003 fee0 	bl	3c660 <assert_post_action>

	if (ms == K_FOREVER) {
   388a0:	1c63      	adds	r3, r4, #1
   388a2:	d105      	bne.n	388b0 <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   388a4:	4b11      	ldr	r3, [pc, #68]	; (388ec <z_impl_k_sleep+0x74>)
   388a6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   388a8:	f000 fa82 	bl	38db0 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   388ac:	4620      	mov	r0, r4
   388ae:	bd38      	pop	{r3, r4, r5, pc}
   388b0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   388b4:	f240 30e7 	movw	r0, #999	; 0x3e7
   388b8:	2100      	movs	r1, #0
   388ba:	2300      	movs	r3, #0
   388bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   388c0:	fbe5 0104 	umlal	r0, r1, r5, r4
   388c4:	f7e4 fa5a 	bl	1cd7c <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   388c8:	f7ff ff40 	bl	3874c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   388cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   388d0:	fb80 0103 	smull	r0, r1, r0, r3
   388d4:	0bc4      	lsrs	r4, r0, #15
   388d6:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   388da:	e7e7      	b.n	388ac <z_impl_k_sleep+0x34>
   388dc:	000467d4 	.word	0x000467d4
   388e0:	0004686c 	.word	0x0004686c
   388e4:	00041757 	.word	0x00041757
   388e8:	0004311f 	.word	0x0004311f
   388ec:	20029368 	.word	0x20029368

000388f0 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   388f0:	4b01      	ldr	r3, [pc, #4]	; (388f8 <z_impl_k_current_get+0x8>)
   388f2:	6898      	ldr	r0, [r3, #8]
   388f4:	4770      	bx	lr
   388f6:	bf00      	nop
   388f8:	20029368 	.word	0x20029368

000388fc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   388fc:	b570      	push	{r4, r5, r6, lr}
   388fe:	4604      	mov	r4, r0
   38900:	f04f 0320 	mov.w	r3, #32
   38904:	f3ef 8611 	mrs	r6, BASEPRI
   38908:	f383 8811 	msr	BASEPRI, r3
   3890c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38910:	481a      	ldr	r0, [pc, #104]	; (3897c <z_impl_k_sem_give+0x80>)
   38912:	f000 f8f1 	bl	38af8 <z_spin_lock_valid>
   38916:	b968      	cbnz	r0, 38934 <z_impl_k_sem_give+0x38>
   38918:	234a      	movs	r3, #74	; 0x4a
   3891a:	4a19      	ldr	r2, [pc, #100]	; (38980 <z_impl_k_sem_give+0x84>)
   3891c:	4919      	ldr	r1, [pc, #100]	; (38984 <z_impl_k_sem_give+0x88>)
   3891e:	481a      	ldr	r0, [pc, #104]	; (38988 <z_impl_k_sem_give+0x8c>)
   38920:	f003 fe58 	bl	3c5d4 <printk>
   38924:	4915      	ldr	r1, [pc, #84]	; (3897c <z_impl_k_sem_give+0x80>)
   38926:	4819      	ldr	r0, [pc, #100]	; (3898c <z_impl_k_sem_give+0x90>)
   38928:	f003 fe54 	bl	3c5d4 <printk>
   3892c:	214a      	movs	r1, #74	; 0x4a
   3892e:	4814      	ldr	r0, [pc, #80]	; (38980 <z_impl_k_sem_give+0x84>)
   38930:	f003 fe96 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   38934:	4811      	ldr	r0, [pc, #68]	; (3897c <z_impl_k_sem_give+0x80>)
   38936:	f000 f8fd 	bl	38b34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   3893a:	4620      	mov	r0, r4
   3893c:	f7ff fdbe 	bl	384bc <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   38940:	4605      	mov	r5, r0
   38942:	b170      	cbz	r0, 38962 <z_impl_k_sem_give+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   38944:	7b43      	ldrb	r3, [r0, #13]
   38946:	06db      	lsls	r3, r3, #27
   38948:	d103      	bne.n	38952 <z_impl_k_sem_give+0x56>
	if (z_is_thread_ready(thread)) {
   3894a:	6983      	ldr	r3, [r0, #24]
   3894c:	b90b      	cbnz	r3, 38952 <z_impl_k_sem_give+0x56>
		z_add_thread_to_ready_q(thread);
   3894e:	f7ff f93f 	bl	37bd0 <z_add_thread_to_ready_q>
   38952:	2300      	movs	r3, #0
   38954:	66ab      	str	r3, [r5, #104]	; 0x68
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   38956:	4631      	mov	r1, r6
}
   38958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   3895c:	4807      	ldr	r0, [pc, #28]	; (3897c <z_impl_k_sem_give+0x80>)
   3895e:	f7fe bf4d 	b.w	377fc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   38962:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   38966:	429a      	cmp	r2, r3
   38968:	bf18      	it	ne
   3896a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3896c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3896e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   38970:	f104 0010 	add.w	r0, r4, #16
   38974:	f006 f97a 	bl	3ec6c <z_handle_obj_poll_events>
   38978:	e7ed      	b.n	38956 <z_impl_k_sem_give+0x5a>
   3897a:	bf00      	nop
   3897c:	200293ac 	.word	0x200293ac
   38980:	00042269 	.word	0x00042269
   38984:	00042288 	.word	0x00042288
   38988:	00041757 	.word	0x00041757
   3898c:	0004229d 	.word	0x0004229d

00038990 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   38990:	b570      	push	{r4, r5, r6, lr}
   38992:	4605      	mov	r5, r0
   38994:	460e      	mov	r6, r1
   38996:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   3899a:	b16b      	cbz	r3, 389b8 <z_impl_k_sem_take+0x28>
   3899c:	b161      	cbz	r1, 389b8 <z_impl_k_sem_take+0x28>
   3899e:	4934      	ldr	r1, [pc, #208]	; (38a70 <z_impl_k_sem_take+0xe0>)
   389a0:	238c      	movs	r3, #140	; 0x8c
   389a2:	4a34      	ldr	r2, [pc, #208]	; (38a74 <z_impl_k_sem_take+0xe4>)
   389a4:	4834      	ldr	r0, [pc, #208]	; (38a78 <z_impl_k_sem_take+0xe8>)
   389a6:	f003 fe15 	bl	3c5d4 <printk>
   389aa:	4834      	ldr	r0, [pc, #208]	; (38a7c <z_impl_k_sem_take+0xec>)
   389ac:	f003 fe12 	bl	3c5d4 <printk>
   389b0:	218c      	movs	r1, #140	; 0x8c
   389b2:	4830      	ldr	r0, [pc, #192]	; (38a74 <z_impl_k_sem_take+0xe4>)
   389b4:	f003 fe54 	bl	3c660 <assert_post_action>
   389b8:	f04f 0320 	mov.w	r3, #32
   389bc:	f3ef 8411 	mrs	r4, BASEPRI
   389c0:	f383 8811 	msr	BASEPRI, r3
   389c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   389c8:	482d      	ldr	r0, [pc, #180]	; (38a80 <z_impl_k_sem_take+0xf0>)
   389ca:	f000 f895 	bl	38af8 <z_spin_lock_valid>
   389ce:	b968      	cbnz	r0, 389ec <z_impl_k_sem_take+0x5c>
   389d0:	234a      	movs	r3, #74	; 0x4a
   389d2:	4a2c      	ldr	r2, [pc, #176]	; (38a84 <z_impl_k_sem_take+0xf4>)
   389d4:	492c      	ldr	r1, [pc, #176]	; (38a88 <z_impl_k_sem_take+0xf8>)
   389d6:	4828      	ldr	r0, [pc, #160]	; (38a78 <z_impl_k_sem_take+0xe8>)
   389d8:	f003 fdfc 	bl	3c5d4 <printk>
   389dc:	4928      	ldr	r1, [pc, #160]	; (38a80 <z_impl_k_sem_take+0xf0>)
   389de:	482b      	ldr	r0, [pc, #172]	; (38a8c <z_impl_k_sem_take+0xfc>)
   389e0:	f003 fdf8 	bl	3c5d4 <printk>
   389e4:	214a      	movs	r1, #74	; 0x4a
   389e6:	4827      	ldr	r0, [pc, #156]	; (38a84 <z_impl_k_sem_take+0xf4>)
   389e8:	f003 fe3a 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   389ec:	4824      	ldr	r0, [pc, #144]	; (38a80 <z_impl_k_sem_take+0xf0>)
   389ee:	f000 f8a1 	bl	38b34 <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   389f2:	68ab      	ldr	r3, [r5, #8]
   389f4:	b1cb      	cbz	r3, 38a2a <z_impl_k_sem_take+0x9a>
		sem->count--;
   389f6:	3b01      	subs	r3, #1
   389f8:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   389fa:	4821      	ldr	r0, [pc, #132]	; (38a80 <z_impl_k_sem_take+0xf0>)
   389fc:	f000 f88a 	bl	38b14 <z_spin_unlock_valid>
   38a00:	b968      	cbnz	r0, 38a1e <z_impl_k_sem_take+0x8e>
   38a02:	235d      	movs	r3, #93	; 0x5d
   38a04:	4a1f      	ldr	r2, [pc, #124]	; (38a84 <z_impl_k_sem_take+0xf4>)
   38a06:	4922      	ldr	r1, [pc, #136]	; (38a90 <z_impl_k_sem_take+0x100>)
   38a08:	481b      	ldr	r0, [pc, #108]	; (38a78 <z_impl_k_sem_take+0xe8>)
   38a0a:	f003 fde3 	bl	3c5d4 <printk>
   38a0e:	491c      	ldr	r1, [pc, #112]	; (38a80 <z_impl_k_sem_take+0xf0>)
   38a10:	4820      	ldr	r0, [pc, #128]	; (38a94 <z_impl_k_sem_take+0x104>)
   38a12:	f003 fddf 	bl	3c5d4 <printk>
   38a16:	215d      	movs	r1, #93	; 0x5d
   38a18:	481a      	ldr	r0, [pc, #104]	; (38a84 <z_impl_k_sem_take+0xf4>)
   38a1a:	f003 fe21 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   38a1e:	f384 8811 	msr	BASEPRI, r4
   38a22:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   38a26:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   38a28:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   38a2a:	b9c6      	cbnz	r6, 38a5e <z_impl_k_sem_take+0xce>
   38a2c:	4814      	ldr	r0, [pc, #80]	; (38a80 <z_impl_k_sem_take+0xf0>)
   38a2e:	f000 f871 	bl	38b14 <z_spin_unlock_valid>
   38a32:	b968      	cbnz	r0, 38a50 <z_impl_k_sem_take+0xc0>
   38a34:	235d      	movs	r3, #93	; 0x5d
   38a36:	4a13      	ldr	r2, [pc, #76]	; (38a84 <z_impl_k_sem_take+0xf4>)
   38a38:	4915      	ldr	r1, [pc, #84]	; (38a90 <z_impl_k_sem_take+0x100>)
   38a3a:	480f      	ldr	r0, [pc, #60]	; (38a78 <z_impl_k_sem_take+0xe8>)
   38a3c:	f003 fdca 	bl	3c5d4 <printk>
   38a40:	490f      	ldr	r1, [pc, #60]	; (38a80 <z_impl_k_sem_take+0xf0>)
   38a42:	4814      	ldr	r0, [pc, #80]	; (38a94 <z_impl_k_sem_take+0x104>)
   38a44:	f003 fdc6 	bl	3c5d4 <printk>
   38a48:	215d      	movs	r1, #93	; 0x5d
   38a4a:	480e      	ldr	r0, [pc, #56]	; (38a84 <z_impl_k_sem_take+0xf4>)
   38a4c:	f003 fe08 	bl	3c660 <assert_post_action>
   38a50:	f384 8811 	msr	BASEPRI, r4
   38a54:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   38a58:	f06f 000f 	mvn.w	r0, #15
		goto out;
   38a5c:	e7e4      	b.n	38a28 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   38a5e:	4633      	mov	r3, r6
   38a60:	462a      	mov	r2, r5
   38a62:	4621      	mov	r1, r4
}
   38a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   38a68:	4805      	ldr	r0, [pc, #20]	; (38a80 <z_impl_k_sem_take+0xf0>)
   38a6a:	f7ff bc6b 	b.w	38344 <z_pend_curr>
   38a6e:	bf00      	nop
   38a70:	0004692f 	.word	0x0004692f
   38a74:	00046916 	.word	0x00046916
   38a78:	00041757 	.word	0x00041757
   38a7c:	0004311f 	.word	0x0004311f
   38a80:	200293ac 	.word	0x200293ac
   38a84:	00042269 	.word	0x00042269
   38a88:	00042288 	.word	0x00042288
   38a8c:	0004229d 	.word	0x0004229d
   38a90:	000422b5 	.word	0x000422b5
   38a94:	000422cc 	.word	0x000422cc

00038a98 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   38a98:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   38a9a:	4c08      	ldr	r4, [pc, #32]	; (38abc <k_sys_work_q_init+0x24>)
   38a9c:	f04f 33ff 	mov.w	r3, #4294967295
   38aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   38aa4:	4906      	ldr	r1, [pc, #24]	; (38ac0 <k_sys_work_q_init+0x28>)
   38aa6:	4620      	mov	r0, r4
   38aa8:	f000 fa08 	bl	38ebc <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   38aac:	4905      	ldr	r1, [pc, #20]	; (38ac4 <k_sys_work_q_init+0x2c>)
   38aae:	f104 0014 	add.w	r0, r4, #20
   38ab2:	f005 fffe 	bl	3eab2 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   38ab6:	2000      	movs	r0, #0
   38ab8:	bd10      	pop	{r4, pc}
   38aba:	bf00      	nop
   38abc:	200293b0 	.word	0x200293b0
   38ac0:	2002f260 	.word	0x2002f260
   38ac4:	0004695b 	.word	0x0004695b

00038ac8 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   38ac8:	b530      	push	{r4, r5, lr}
   38aca:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   38acc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   38ace:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   38ad0:	9504      	str	r5, [sp, #16]
   38ad2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   38ad4:	9503      	str	r5, [sp, #12]
   38ad6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   38ad8:	9502      	str	r5, [sp, #8]
   38ada:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   38adc:	9501      	str	r5, [sp, #4]
   38ade:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   38ae0:	9500      	str	r5, [sp, #0]
   38ae2:	f7eb fa2d 	bl	23f40 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   38ae6:	4b03      	ldr	r3, [pc, #12]	; (38af4 <z_setup_new_thread+0x2c>)
   38ae8:	689b      	ldr	r3, [r3, #8]
   38aea:	b103      	cbz	r3, 38aee <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   38aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   38aee:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   38af0:	b007      	add	sp, #28
   38af2:	bd30      	pop	{r4, r5, pc}
   38af4:	20029368 	.word	0x20029368

00038af8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   38af8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   38afa:	b138      	cbz	r0, 38b0c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   38afc:	4b04      	ldr	r3, [pc, #16]	; (38b10 <z_spin_lock_valid+0x18>)
   38afe:	f000 0003 	and.w	r0, r0, #3
   38b02:	7d1b      	ldrb	r3, [r3, #20]
   38b04:	1ac0      	subs	r0, r0, r3
   38b06:	bf18      	it	ne
   38b08:	2001      	movne	r0, #1
   38b0a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   38b0c:	2001      	movs	r0, #1
}
   38b0e:	4770      	bx	lr
   38b10:	20029368 	.word	0x20029368

00038b14 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   38b14:	4a06      	ldr	r2, [pc, #24]	; (38b30 <z_spin_unlock_valid+0x1c>)
   38b16:	7d11      	ldrb	r1, [r2, #20]
   38b18:	6893      	ldr	r3, [r2, #8]
   38b1a:	6802      	ldr	r2, [r0, #0]
   38b1c:	430b      	orrs	r3, r1
   38b1e:	429a      	cmp	r2, r3
   38b20:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   38b24:	bf06      	itte	eq
   38b26:	6003      	streq	r3, [r0, #0]
	return true;
   38b28:	2001      	moveq	r0, #1
		return false;
   38b2a:	4618      	movne	r0, r3
}
   38b2c:	4770      	bx	lr
   38b2e:	bf00      	nop
   38b30:	20029368 	.word	0x20029368

00038b34 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   38b34:	4a02      	ldr	r2, [pc, #8]	; (38b40 <z_spin_lock_set_owner+0xc>)
   38b36:	7d11      	ldrb	r1, [r2, #20]
   38b38:	6893      	ldr	r3, [r2, #8]
   38b3a:	430b      	orrs	r3, r1
   38b3c:	6003      	str	r3, [r0, #0]
}
   38b3e:	4770      	bx	lr
   38b40:	20029368 	.word	0x20029368

00038b44 <z_impl_k_thread_start>:
{
   38b44:	b538      	push	{r3, r4, r5, lr}
   38b46:	4604      	mov	r4, r0
	__asm__ volatile(
   38b48:	f04f 0320 	mov.w	r3, #32
   38b4c:	f3ef 8511 	mrs	r5, BASEPRI
   38b50:	f383 8811 	msr	BASEPRI, r3
   38b54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38b58:	481f      	ldr	r0, [pc, #124]	; (38bd8 <z_impl_k_thread_start+0x94>)
   38b5a:	f7ff ffcd 	bl	38af8 <z_spin_lock_valid>
   38b5e:	b968      	cbnz	r0, 38b7c <z_impl_k_thread_start+0x38>
   38b60:	234a      	movs	r3, #74	; 0x4a
   38b62:	4a1e      	ldr	r2, [pc, #120]	; (38bdc <z_impl_k_thread_start+0x98>)
   38b64:	491e      	ldr	r1, [pc, #120]	; (38be0 <z_impl_k_thread_start+0x9c>)
   38b66:	481f      	ldr	r0, [pc, #124]	; (38be4 <z_impl_k_thread_start+0xa0>)
   38b68:	f003 fd34 	bl	3c5d4 <printk>
   38b6c:	491a      	ldr	r1, [pc, #104]	; (38bd8 <z_impl_k_thread_start+0x94>)
   38b6e:	481e      	ldr	r0, [pc, #120]	; (38be8 <z_impl_k_thread_start+0xa4>)
   38b70:	f003 fd30 	bl	3c5d4 <printk>
   38b74:	214a      	movs	r1, #74	; 0x4a
   38b76:	4819      	ldr	r0, [pc, #100]	; (38bdc <z_impl_k_thread_start+0x98>)
   38b78:	f003 fd72 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   38b7c:	4816      	ldr	r0, [pc, #88]	; (38bd8 <z_impl_k_thread_start+0x94>)
   38b7e:	f7ff ffd9 	bl	38b34 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   38b82:	7b63      	ldrb	r3, [r4, #13]
   38b84:	075a      	lsls	r2, r3, #29
   38b86:	d416      	bmi.n	38bb6 <z_impl_k_thread_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38b88:	4813      	ldr	r0, [pc, #76]	; (38bd8 <z_impl_k_thread_start+0x94>)
   38b8a:	f7ff ffc3 	bl	38b14 <z_spin_unlock_valid>
   38b8e:	b968      	cbnz	r0, 38bac <z_impl_k_thread_start+0x68>
   38b90:	235d      	movs	r3, #93	; 0x5d
   38b92:	4a12      	ldr	r2, [pc, #72]	; (38bdc <z_impl_k_thread_start+0x98>)
   38b94:	4915      	ldr	r1, [pc, #84]	; (38bec <z_impl_k_thread_start+0xa8>)
   38b96:	4813      	ldr	r0, [pc, #76]	; (38be4 <z_impl_k_thread_start+0xa0>)
   38b98:	f003 fd1c 	bl	3c5d4 <printk>
   38b9c:	490e      	ldr	r1, [pc, #56]	; (38bd8 <z_impl_k_thread_start+0x94>)
   38b9e:	4814      	ldr	r0, [pc, #80]	; (38bf0 <z_impl_k_thread_start+0xac>)
   38ba0:	f003 fd18 	bl	3c5d4 <printk>
   38ba4:	215d      	movs	r1, #93	; 0x5d
   38ba6:	480d      	ldr	r0, [pc, #52]	; (38bdc <z_impl_k_thread_start+0x98>)
   38ba8:	f003 fd5a 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   38bac:	f385 8811 	msr	BASEPRI, r5
   38bb0:	f3bf 8f6f 	isb	sy
}
   38bb4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   38bb6:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   38bba:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   38bbe:	7362      	strb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   38bc0:	d104      	bne.n	38bcc <z_impl_k_thread_start+0x88>
	if (z_is_thread_ready(thread)) {
   38bc2:	69a3      	ldr	r3, [r4, #24]
   38bc4:	b913      	cbnz	r3, 38bcc <z_impl_k_thread_start+0x88>
		z_add_thread_to_ready_q(thread);
   38bc6:	4620      	mov	r0, r4
   38bc8:	f7ff f802 	bl	37bd0 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   38bcc:	4629      	mov	r1, r5
}
   38bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   38bd2:	4801      	ldr	r0, [pc, #4]	; (38bd8 <z_impl_k_thread_start+0x94>)
   38bd4:	f7fe be12 	b.w	377fc <z_reschedule>
   38bd8:	20029474 	.word	0x20029474
   38bdc:	00042269 	.word	0x00042269
   38be0:	00042288 	.word	0x00042288
   38be4:	00041757 	.word	0x00041757
   38be8:	0004229d 	.word	0x0004229d
   38bec:	000422b5 	.word	0x000422b5
   38bf0:	000422cc 	.word	0x000422cc

00038bf4 <z_impl_k_thread_create>:
{
   38bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38bf8:	b086      	sub	sp, #24
   38bfa:	4604      	mov	r4, r0
   38bfc:	460e      	mov	r6, r1
   38bfe:	4617      	mov	r7, r2
   38c00:	4698      	mov	r8, r3
   38c02:	9d11      	ldr	r5, [sp, #68]	; 0x44
   38c04:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   38c08:	b173      	cbz	r3, 38c28 <z_impl_k_thread_create+0x34>
   38c0a:	491f      	ldr	r1, [pc, #124]	; (38c88 <z_impl_k_thread_create+0x94>)
   38c0c:	f240 2357 	movw	r3, #599	; 0x257
   38c10:	4a1e      	ldr	r2, [pc, #120]	; (38c8c <z_impl_k_thread_create+0x98>)
   38c12:	481f      	ldr	r0, [pc, #124]	; (38c90 <z_impl_k_thread_create+0x9c>)
   38c14:	f003 fcde 	bl	3c5d4 <printk>
   38c18:	481e      	ldr	r0, [pc, #120]	; (38c94 <z_impl_k_thread_create+0xa0>)
   38c1a:	f003 fcdb 	bl	3c5d4 <printk>
   38c1e:	f240 2157 	movw	r1, #599	; 0x257
   38c22:	481a      	ldr	r0, [pc, #104]	; (38c8c <z_impl_k_thread_create+0x98>)
   38c24:	f003 fd1c 	bl	3c660 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   38c28:	2300      	movs	r3, #0
   38c2a:	9305      	str	r3, [sp, #20]
   38c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   38c2e:	463a      	mov	r2, r7
   38c30:	9304      	str	r3, [sp, #16]
   38c32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   38c34:	4631      	mov	r1, r6
   38c36:	9303      	str	r3, [sp, #12]
   38c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   38c3a:	4620      	mov	r0, r4
   38c3c:	9302      	str	r3, [sp, #8]
   38c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   38c40:	9301      	str	r3, [sp, #4]
   38c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   38c44:	9300      	str	r3, [sp, #0]
   38c46:	4643      	mov	r3, r8
   38c48:	f7ff ff3e 	bl	38ac8 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   38c4c:	1c6b      	adds	r3, r5, #1
   38c4e:	d003      	beq.n	38c58 <z_impl_k_thread_create+0x64>
	if (delay == 0) {
   38c50:	b935      	cbnz	r5, 38c60 <z_impl_k_thread_create+0x6c>
	z_impl_k_thread_start(thread);
   38c52:	4620      	mov	r0, r4
   38c54:	f7ff ff76 	bl	38b44 <z_impl_k_thread_start>
}
   38c58:	4620      	mov	r0, r4
   38c5a:	b006      	add	sp, #24
   38c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   38c60:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   38c64:	f240 30e7 	movw	r0, #999	; 0x3e7
   38c68:	2100      	movs	r1, #0
   38c6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   38c6e:	2300      	movs	r3, #0
   38c70:	fbe6 0105 	umlal	r0, r1, r6, r5
   38c74:	f7e4 f882 	bl	1cd7c <__aeabi_uldivmod>
   38c78:	4907      	ldr	r1, [pc, #28]	; (38c98 <z_impl_k_thread_create+0xa4>)
   38c7a:	1c42      	adds	r2, r0, #1
   38c7c:	f104 0018 	add.w	r0, r4, #24
   38c80:	f000 fa56 	bl	39130 <z_add_timeout>
   38c84:	e7e8      	b.n	38c58 <z_impl_k_thread_create+0x64>
   38c86:	bf00      	nop
   38c88:	000467d4 	.word	0x000467d4
   38c8c:	00046964 	.word	0x00046964
   38c90:	00041757 	.word	0x00041757
   38c94:	00046980 	.word	0x00046980
   38c98:	00037cd1 	.word	0x00037cd1

00038c9c <z_init_static_threads>:
{
   38c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   38ca0:	4f3c      	ldr	r7, [pc, #240]	; (38d94 <z_init_static_threads+0xf8>)
   38ca2:	4d3d      	ldr	r5, [pc, #244]	; (38d98 <z_init_static_threads+0xfc>)
   38ca4:	463e      	mov	r6, r7
   38ca6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 38da8 <z_init_static_threads+0x10c>
{
   38caa:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   38cac:	42bd      	cmp	r5, r7
   38cae:	d90e      	bls.n	38cce <z_init_static_threads+0x32>
   38cb0:	493a      	ldr	r1, [pc, #232]	; (38d9c <z_init_static_threads+0x100>)
   38cb2:	f240 23e7 	movw	r3, #743	; 0x2e7
   38cb6:	4642      	mov	r2, r8
   38cb8:	4839      	ldr	r0, [pc, #228]	; (38da0 <z_init_static_threads+0x104>)
   38cba:	f003 fc8b 	bl	3c5d4 <printk>
   38cbe:	4839      	ldr	r0, [pc, #228]	; (38da4 <z_init_static_threads+0x108>)
   38cc0:	f003 fc88 	bl	3c5d4 <printk>
   38cc4:	f240 21e7 	movw	r1, #743	; 0x2e7
   38cc8:	4640      	mov	r0, r8
   38cca:	f003 fcc9 	bl	3c660 <assert_post_action>
   38cce:	42b5      	cmp	r5, r6
   38cd0:	f105 0430 	add.w	r4, r5, #48	; 0x30
   38cd4:	d31f      	bcc.n	38d16 <z_init_static_threads+0x7a>
	k_sched_lock();
   38cd6:	f7fe fdcd 	bl	37874 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   38cda:	4c2f      	ldr	r4, [pc, #188]	; (38d98 <z_init_static_threads+0xfc>)
   38cdc:	4d32      	ldr	r5, [pc, #200]	; (38da8 <z_init_static_threads+0x10c>)
   38cde:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 38d9c <z_init_static_threads+0x100>
   38ce2:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 38da0 <z_init_static_threads+0x104>
   38ce6:	42b4      	cmp	r4, r6
   38ce8:	d90e      	bls.n	38d08 <z_init_static_threads+0x6c>
   38cea:	4641      	mov	r1, r8
   38cec:	f240 3306 	movw	r3, #774	; 0x306
   38cf0:	462a      	mov	r2, r5
   38cf2:	4648      	mov	r0, r9
   38cf4:	f003 fc6e 	bl	3c5d4 <printk>
   38cf8:	482a      	ldr	r0, [pc, #168]	; (38da4 <z_init_static_threads+0x108>)
   38cfa:	f003 fc6b 	bl	3c5d4 <printk>
   38cfe:	f240 3106 	movw	r1, #774	; 0x306
   38d02:	4628      	mov	r0, r5
   38d04:	f003 fcac 	bl	3c660 <assert_post_action>
   38d08:	42b4      	cmp	r4, r6
   38d0a:	d321      	bcc.n	38d50 <z_init_static_threads+0xb4>
}
   38d0c:	b007      	add	sp, #28
   38d0e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   38d12:	f7fe bee1 	b.w	37ad8 <k_sched_unlock>
		z_setup_new_thread(
   38d16:	f854 3c04 	ldr.w	r3, [r4, #-4]
   38d1a:	9305      	str	r3, [sp, #20]
   38d1c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   38d20:	9304      	str	r3, [sp, #16]
   38d22:	f854 3c14 	ldr.w	r3, [r4, #-20]
   38d26:	9303      	str	r3, [sp, #12]
   38d28:	f854 3c18 	ldr.w	r3, [r4, #-24]
   38d2c:	9302      	str	r3, [sp, #8]
   38d2e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   38d32:	9301      	str	r3, [sp, #4]
   38d34:	f854 3c20 	ldr.w	r3, [r4, #-32]
   38d38:	9300      	str	r3, [sp, #0]
   38d3a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   38d3e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   38d42:	f7ff fec1 	bl	38ac8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   38d46:	f854 3c30 	ldr.w	r3, [r4, #-48]
   38d4a:	64dd      	str	r5, [r3, #76]	; 0x4c
   38d4c:	4625      	mov	r5, r4
   38d4e:	e7ad      	b.n	38cac <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   38d50:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   38d54:	f1bc 3fff 	cmp.w	ip, #4294967295
   38d58:	d006      	beq.n	38d68 <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   38d5a:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   38d5c:	f1bc 0f00 	cmp.w	ip, #0
   38d60:	d104      	bne.n	38d6c <z_init_static_threads+0xd0>
   38d62:	4638      	mov	r0, r7
   38d64:	f7ff feee 	bl	38b44 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   38d68:	3430      	adds	r4, #48	; 0x30
   38d6a:	e7bc      	b.n	38ce6 <z_init_static_threads+0x4a>
   38d6c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   38d70:	f240 30e7 	movw	r0, #999	; 0x3e7
   38d74:	2100      	movs	r1, #0
   38d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   38d7a:	2300      	movs	r3, #0
   38d7c:	fbee 010c 	umlal	r0, r1, lr, ip
   38d80:	f7e3 fffc 	bl	1cd7c <__aeabi_uldivmod>
   38d84:	4909      	ldr	r1, [pc, #36]	; (38dac <z_init_static_threads+0x110>)
   38d86:	1c42      	adds	r2, r0, #1
   38d88:	f107 0018 	add.w	r0, r7, #24
   38d8c:	f000 f9d0 	bl	39130 <z_add_timeout>
   38d90:	e7ea      	b.n	38d68 <z_init_static_threads+0xcc>
   38d92:	bf00      	nop
   38d94:	20031860 	.word	0x20031860
   38d98:	20031860 	.word	0x20031860
   38d9c:	000469a5 	.word	0x000469a5
   38da0:	00041757 	.word	0x00041757
   38da4:	000466c7 	.word	0x000466c7
   38da8:	00046964 	.word	0x00046964
   38dac:	00037cd1 	.word	0x00037cd1

00038db0 <z_impl_k_thread_suspend>:
{
   38db0:	b538      	push	{r3, r4, r5, lr}
   38db2:	4605      	mov	r5, r0
	__asm__ volatile(
   38db4:	f04f 0320 	mov.w	r3, #32
   38db8:	f3ef 8411 	mrs	r4, BASEPRI
   38dbc:	f383 8811 	msr	BASEPRI, r3
   38dc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38dc4:	481c      	ldr	r0, [pc, #112]	; (38e38 <z_impl_k_thread_suspend+0x88>)
   38dc6:	f7ff fe97 	bl	38af8 <z_spin_lock_valid>
   38dca:	b968      	cbnz	r0, 38de8 <z_impl_k_thread_suspend+0x38>
   38dcc:	234a      	movs	r3, #74	; 0x4a
   38dce:	4a1b      	ldr	r2, [pc, #108]	; (38e3c <z_impl_k_thread_suspend+0x8c>)
   38dd0:	491b      	ldr	r1, [pc, #108]	; (38e40 <z_impl_k_thread_suspend+0x90>)
   38dd2:	481c      	ldr	r0, [pc, #112]	; (38e44 <z_impl_k_thread_suspend+0x94>)
   38dd4:	f003 fbfe 	bl	3c5d4 <printk>
   38dd8:	4917      	ldr	r1, [pc, #92]	; (38e38 <z_impl_k_thread_suspend+0x88>)
   38dda:	481b      	ldr	r0, [pc, #108]	; (38e48 <z_impl_k_thread_suspend+0x98>)
   38ddc:	f003 fbfa 	bl	3c5d4 <printk>
   38de0:	214a      	movs	r1, #74	; 0x4a
   38de2:	4816      	ldr	r0, [pc, #88]	; (38e3c <z_impl_k_thread_suspend+0x8c>)
   38de4:	f003 fc3c 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   38de8:	4813      	ldr	r0, [pc, #76]	; (38e38 <z_impl_k_thread_suspend+0x88>)
   38dea:	f7ff fea3 	bl	38b34 <z_spin_lock_set_owner>
	z_thread_single_suspend(thread);
   38dee:	4628      	mov	r0, r5
   38df0:	f7ff f89c 	bl	37f2c <z_thread_single_suspend>
	if (thread == _current) {
   38df4:	4b15      	ldr	r3, [pc, #84]	; (38e4c <z_impl_k_thread_suspend+0x9c>)
   38df6:	689b      	ldr	r3, [r3, #8]
   38df8:	42ab      	cmp	r3, r5
   38dfa:	d105      	bne.n	38e08 <z_impl_k_thread_suspend+0x58>
		z_reschedule(&lock, key);
   38dfc:	4621      	mov	r1, r4
}
   38dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   38e02:	480d      	ldr	r0, [pc, #52]	; (38e38 <z_impl_k_thread_suspend+0x88>)
   38e04:	f7fe bcfa 	b.w	377fc <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38e08:	480b      	ldr	r0, [pc, #44]	; (38e38 <z_impl_k_thread_suspend+0x88>)
   38e0a:	f7ff fe83 	bl	38b14 <z_spin_unlock_valid>
   38e0e:	b968      	cbnz	r0, 38e2c <z_impl_k_thread_suspend+0x7c>
   38e10:	235d      	movs	r3, #93	; 0x5d
   38e12:	4a0a      	ldr	r2, [pc, #40]	; (38e3c <z_impl_k_thread_suspend+0x8c>)
   38e14:	490e      	ldr	r1, [pc, #56]	; (38e50 <z_impl_k_thread_suspend+0xa0>)
   38e16:	480b      	ldr	r0, [pc, #44]	; (38e44 <z_impl_k_thread_suspend+0x94>)
   38e18:	f003 fbdc 	bl	3c5d4 <printk>
   38e1c:	4906      	ldr	r1, [pc, #24]	; (38e38 <z_impl_k_thread_suspend+0x88>)
   38e1e:	480d      	ldr	r0, [pc, #52]	; (38e54 <z_impl_k_thread_suspend+0xa4>)
   38e20:	f003 fbd8 	bl	3c5d4 <printk>
   38e24:	215d      	movs	r1, #93	; 0x5d
   38e26:	4805      	ldr	r0, [pc, #20]	; (38e3c <z_impl_k_thread_suspend+0x8c>)
   38e28:	f003 fc1a 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   38e2c:	f384 8811 	msr	BASEPRI, r4
   38e30:	f3bf 8f6f 	isb	sy
}
   38e34:	bd38      	pop	{r3, r4, r5, pc}
   38e36:	bf00      	nop
   38e38:	20029474 	.word	0x20029474
   38e3c:	00042269 	.word	0x00042269
   38e40:	00042288 	.word	0x00042288
   38e44:	00041757 	.word	0x00041757
   38e48:	0004229d 	.word	0x0004229d
   38e4c:	20029368 	.word	0x20029368
   38e50:	000422b5 	.word	0x000422b5
   38e54:	000422cc 	.word	0x000422cc

00038e58 <z_impl_k_thread_resume>:
{
   38e58:	b538      	push	{r3, r4, r5, lr}
   38e5a:	4605      	mov	r5, r0
	__asm__ volatile(
   38e5c:	f04f 0320 	mov.w	r3, #32
   38e60:	f3ef 8411 	mrs	r4, BASEPRI
   38e64:	f383 8811 	msr	BASEPRI, r3
   38e68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38e6c:	480e      	ldr	r0, [pc, #56]	; (38ea8 <z_impl_k_thread_resume+0x50>)
   38e6e:	f7ff fe43 	bl	38af8 <z_spin_lock_valid>
   38e72:	b968      	cbnz	r0, 38e90 <z_impl_k_thread_resume+0x38>
   38e74:	234a      	movs	r3, #74	; 0x4a
   38e76:	4a0d      	ldr	r2, [pc, #52]	; (38eac <z_impl_k_thread_resume+0x54>)
   38e78:	490d      	ldr	r1, [pc, #52]	; (38eb0 <z_impl_k_thread_resume+0x58>)
   38e7a:	480e      	ldr	r0, [pc, #56]	; (38eb4 <z_impl_k_thread_resume+0x5c>)
   38e7c:	f003 fbaa 	bl	3c5d4 <printk>
   38e80:	4909      	ldr	r1, [pc, #36]	; (38ea8 <z_impl_k_thread_resume+0x50>)
   38e82:	480d      	ldr	r0, [pc, #52]	; (38eb8 <z_impl_k_thread_resume+0x60>)
   38e84:	f003 fba6 	bl	3c5d4 <printk>
   38e88:	214a      	movs	r1, #74	; 0x4a
   38e8a:	4808      	ldr	r0, [pc, #32]	; (38eac <z_impl_k_thread_resume+0x54>)
   38e8c:	f003 fbe8 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   38e90:	4805      	ldr	r0, [pc, #20]	; (38ea8 <z_impl_k_thread_resume+0x50>)
   38e92:	f7ff fe4f 	bl	38b34 <z_spin_lock_set_owner>
	z_thread_single_resume(thread);
   38e96:	4628      	mov	r0, r5
   38e98:	f005 fe1f 	bl	3eada <z_thread_single_resume>
	z_reschedule(&lock, key);
   38e9c:	4621      	mov	r1, r4
}
   38e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   38ea2:	4801      	ldr	r0, [pc, #4]	; (38ea8 <z_impl_k_thread_resume+0x50>)
   38ea4:	f7fe bcaa 	b.w	377fc <z_reschedule>
   38ea8:	20029474 	.word	0x20029474
   38eac:	00042269 	.word	0x00042269
   38eb0:	00042288 	.word	0x00042288
   38eb4:	00041757 	.word	0x00041757
   38eb8:	0004229d 	.word	0x0004229d

00038ebc <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   38ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38ec0:	4605      	mov	r5, r0
   38ec2:	b086      	sub	sp, #24
   38ec4:	460e      	mov	r6, r1
   38ec6:	4617      	mov	r7, r2
   38ec8:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   38eca:	f005 fd8a 	bl	3e9e2 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   38ece:	f105 0414 	add.w	r4, r5, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   38ed2:	2000      	movs	r0, #0
   38ed4:	4b09      	ldr	r3, [pc, #36]	; (38efc <k_work_q_start+0x40>)
   38ed6:	e9cd 0004 	strd	r0, r0, [sp, #16]
   38eda:	e9cd 0802 	strd	r0, r8, [sp, #8]
   38ede:	e9cd 5000 	strd	r5, r0, [sp]
   38ee2:	463a      	mov	r2, r7
   38ee4:	4631      	mov	r1, r6
   38ee6:	4620      	mov	r0, r4
   38ee8:	f7ff fe84 	bl	38bf4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   38eec:	4620      	mov	r0, r4
   38eee:	4904      	ldr	r1, [pc, #16]	; (38f00 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   38ef0:	b006      	add	sp, #24
   38ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   38ef6:	f005 bddc 	b.w	3eab2 <z_impl_k_thread_name_set>
   38efa:	bf00      	nop
   38efc:	0003c62b 	.word	0x0003c62b
   38f00:	0004362b 	.word	0x0004362b

00038f04 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   38f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38f08:	4606      	mov	r6, r0
   38f0a:	460d      	mov	r5, r1
   38f0c:	4690      	mov	r8, r2
   38f0e:	f04f 0320 	mov.w	r3, #32
   38f12:	f3ef 8711 	mrs	r7, BASEPRI
   38f16:	f383 8811 	msr	BASEPRI, r3
   38f1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38f1e:	4837      	ldr	r0, [pc, #220]	; (38ffc <k_delayed_work_submit_to_queue+0xf8>)
   38f20:	f7ff fdea 	bl	38af8 <z_spin_lock_valid>
   38f24:	b968      	cbnz	r0, 38f42 <k_delayed_work_submit_to_queue+0x3e>
   38f26:	234a      	movs	r3, #74	; 0x4a
   38f28:	4a35      	ldr	r2, [pc, #212]	; (39000 <k_delayed_work_submit_to_queue+0xfc>)
   38f2a:	4936      	ldr	r1, [pc, #216]	; (39004 <k_delayed_work_submit_to_queue+0x100>)
   38f2c:	4836      	ldr	r0, [pc, #216]	; (39008 <k_delayed_work_submit_to_queue+0x104>)
   38f2e:	f003 fb51 	bl	3c5d4 <printk>
   38f32:	4932      	ldr	r1, [pc, #200]	; (38ffc <k_delayed_work_submit_to_queue+0xf8>)
   38f34:	4835      	ldr	r0, [pc, #212]	; (3900c <k_delayed_work_submit_to_queue+0x108>)
   38f36:	f003 fb4d 	bl	3c5d4 <printk>
   38f3a:	214a      	movs	r1, #74	; 0x4a
   38f3c:	4830      	ldr	r0, [pc, #192]	; (39000 <k_delayed_work_submit_to_queue+0xfc>)
   38f3e:	f003 fb8f 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   38f42:	482e      	ldr	r0, [pc, #184]	; (38ffc <k_delayed_work_submit_to_queue+0xf8>)
   38f44:	f7ff fdf6 	bl	38b34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   38f48:	69ec      	ldr	r4, [r5, #28]
   38f4a:	b1ec      	cbz	r4, 38f88 <k_delayed_work_submit_to_queue+0x84>
   38f4c:	42b4      	cmp	r4, r6
   38f4e:	d152      	bne.n	38ff6 <k_delayed_work_submit_to_queue+0xf2>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   38f50:	4628      	mov	r0, r5
   38f52:	f005 fde6 	bl	3eb22 <work_cancel>
		if (err < 0) {
   38f56:	1e04      	subs	r4, r0, #0
   38f58:	da18      	bge.n	38f8c <k_delayed_work_submit_to_queue+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38f5a:	4828      	ldr	r0, [pc, #160]	; (38ffc <k_delayed_work_submit_to_queue+0xf8>)
   38f5c:	f7ff fdda 	bl	38b14 <z_spin_unlock_valid>
   38f60:	b968      	cbnz	r0, 38f7e <k_delayed_work_submit_to_queue+0x7a>
   38f62:	235d      	movs	r3, #93	; 0x5d
   38f64:	4a26      	ldr	r2, [pc, #152]	; (39000 <k_delayed_work_submit_to_queue+0xfc>)
   38f66:	492a      	ldr	r1, [pc, #168]	; (39010 <k_delayed_work_submit_to_queue+0x10c>)
   38f68:	4827      	ldr	r0, [pc, #156]	; (39008 <k_delayed_work_submit_to_queue+0x104>)
   38f6a:	f003 fb33 	bl	3c5d4 <printk>
   38f6e:	4923      	ldr	r1, [pc, #140]	; (38ffc <k_delayed_work_submit_to_queue+0xf8>)
   38f70:	4828      	ldr	r0, [pc, #160]	; (39014 <k_delayed_work_submit_to_queue+0x110>)
   38f72:	f003 fb2f 	bl	3c5d4 <printk>
   38f76:	215d      	movs	r1, #93	; 0x5d
   38f78:	4821      	ldr	r0, [pc, #132]	; (39000 <k_delayed_work_submit_to_queue+0xfc>)
   38f7a:	f003 fb71 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   38f7e:	f387 8811 	msr	BASEPRI, r7
   38f82:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + k_ms_to_ticks_ceil32(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   38f86:	e020      	b.n	38fca <k_delayed_work_submit_to_queue+0xc6>
	if (work->work_q == work_q) {
   38f88:	2e00      	cmp	r6, #0
   38f8a:	d0e1      	beq.n	38f50 <k_delayed_work_submit_to_queue+0x4c>
	work->work_q = work_q;
   38f8c:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   38f8e:	f1b8 0f00 	cmp.w	r8, #0
   38f92:	d11d      	bne.n	38fd0 <k_delayed_work_submit_to_queue+0xcc>
   38f94:	4819      	ldr	r0, [pc, #100]	; (38ffc <k_delayed_work_submit_to_queue+0xf8>)
   38f96:	f7ff fdbd 	bl	38b14 <z_spin_unlock_valid>
   38f9a:	b968      	cbnz	r0, 38fb8 <k_delayed_work_submit_to_queue+0xb4>
   38f9c:	235d      	movs	r3, #93	; 0x5d
   38f9e:	4a18      	ldr	r2, [pc, #96]	; (39000 <k_delayed_work_submit_to_queue+0xfc>)
   38fa0:	491b      	ldr	r1, [pc, #108]	; (39010 <k_delayed_work_submit_to_queue+0x10c>)
   38fa2:	4819      	ldr	r0, [pc, #100]	; (39008 <k_delayed_work_submit_to_queue+0x104>)
   38fa4:	f003 fb16 	bl	3c5d4 <printk>
   38fa8:	4914      	ldr	r1, [pc, #80]	; (38ffc <k_delayed_work_submit_to_queue+0xf8>)
   38faa:	481a      	ldr	r0, [pc, #104]	; (39014 <k_delayed_work_submit_to_queue+0x110>)
   38fac:	f003 fb12 	bl	3c5d4 <printk>
   38fb0:	215d      	movs	r1, #93	; 0x5d
   38fb2:	4813      	ldr	r0, [pc, #76]	; (39000 <k_delayed_work_submit_to_queue+0xfc>)
   38fb4:	f003 fb54 	bl	3c660 <assert_post_action>
   38fb8:	f387 8811 	msr	BASEPRI, r7
   38fbc:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   38fc0:	4629      	mov	r1, r5
   38fc2:	4630      	mov	r0, r6
   38fc4:	f005 fd94 	bl	3eaf0 <k_work_submit_to_queue>
		return 0;
   38fc8:	2400      	movs	r4, #0
}
   38fca:	4620      	mov	r0, r4
   38fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38fd0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   38fd4:	f240 30e7 	movw	r0, #999	; 0x3e7
   38fd8:	2100      	movs	r1, #0
   38fda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   38fde:	2300      	movs	r3, #0
   38fe0:	fbe6 0108 	umlal	r0, r1, r6, r8
   38fe4:	f7e3 feca 	bl	1cd7c <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   38fe8:	490b      	ldr	r1, [pc, #44]	; (39018 <k_delayed_work_submit_to_queue+0x114>)
   38fea:	1c42      	adds	r2, r0, #1
   38fec:	f105 000c 	add.w	r0, r5, #12
   38ff0:	f000 f89e 	bl	39130 <z_add_timeout>
   38ff4:	e7b1      	b.n	38f5a <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   38ff6:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   38ffa:	e7ae      	b.n	38f5a <k_delayed_work_submit_to_queue+0x56>
   38ffc:	20029478 	.word	0x20029478
   39000:	00042269 	.word	0x00042269
   39004:	00042288 	.word	0x00042288
   39008:	00041757 	.word	0x00041757
   3900c:	0004229d 	.word	0x0004229d
   39010:	000422b5 	.word	0x000422b5
   39014:	000422cc 	.word	0x000422cc
   39018:	0003eb19 	.word	0x0003eb19

0003901c <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   3901c:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   3901e:	69c3      	ldr	r3, [r0, #28]
{
   39020:	4604      	mov	r4, r0
	if (!work->work_q) {
   39022:	2b00      	cmp	r3, #0
   39024:	d038      	beq.n	39098 <k_delayed_work_cancel+0x7c>
	__asm__ volatile(
   39026:	f04f 0320 	mov.w	r3, #32
   3902a:	f3ef 8511 	mrs	r5, BASEPRI
   3902e:	f383 8811 	msr	BASEPRI, r3
   39032:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39036:	481a      	ldr	r0, [pc, #104]	; (390a0 <k_delayed_work_cancel+0x84>)
   39038:	f7ff fd5e 	bl	38af8 <z_spin_lock_valid>
   3903c:	b968      	cbnz	r0, 3905a <k_delayed_work_cancel+0x3e>
   3903e:	234a      	movs	r3, #74	; 0x4a
   39040:	4a18      	ldr	r2, [pc, #96]	; (390a4 <k_delayed_work_cancel+0x88>)
   39042:	4919      	ldr	r1, [pc, #100]	; (390a8 <k_delayed_work_cancel+0x8c>)
   39044:	4819      	ldr	r0, [pc, #100]	; (390ac <k_delayed_work_cancel+0x90>)
   39046:	f003 fac5 	bl	3c5d4 <printk>
   3904a:	4915      	ldr	r1, [pc, #84]	; (390a0 <k_delayed_work_cancel+0x84>)
   3904c:	4818      	ldr	r0, [pc, #96]	; (390b0 <k_delayed_work_cancel+0x94>)
   3904e:	f003 fac1 	bl	3c5d4 <printk>
   39052:	214a      	movs	r1, #74	; 0x4a
   39054:	4813      	ldr	r0, [pc, #76]	; (390a4 <k_delayed_work_cancel+0x88>)
   39056:	f003 fb03 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   3905a:	4811      	ldr	r0, [pc, #68]	; (390a0 <k_delayed_work_cancel+0x84>)
   3905c:	f7ff fd6a 	bl	38b34 <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   39060:	4620      	mov	r0, r4
   39062:	f005 fd5e 	bl	3eb22 <work_cancel>
   39066:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39068:	480d      	ldr	r0, [pc, #52]	; (390a0 <k_delayed_work_cancel+0x84>)
   3906a:	f7ff fd53 	bl	38b14 <z_spin_unlock_valid>
   3906e:	b968      	cbnz	r0, 3908c <k_delayed_work_cancel+0x70>
   39070:	235d      	movs	r3, #93	; 0x5d
   39072:	4a0c      	ldr	r2, [pc, #48]	; (390a4 <k_delayed_work_cancel+0x88>)
   39074:	490f      	ldr	r1, [pc, #60]	; (390b4 <k_delayed_work_cancel+0x98>)
   39076:	480d      	ldr	r0, [pc, #52]	; (390ac <k_delayed_work_cancel+0x90>)
   39078:	f003 faac 	bl	3c5d4 <printk>
   3907c:	4908      	ldr	r1, [pc, #32]	; (390a0 <k_delayed_work_cancel+0x84>)
   3907e:	480e      	ldr	r0, [pc, #56]	; (390b8 <k_delayed_work_cancel+0x9c>)
   39080:	f003 faa8 	bl	3c5d4 <printk>
   39084:	215d      	movs	r1, #93	; 0x5d
   39086:	4807      	ldr	r0, [pc, #28]	; (390a4 <k_delayed_work_cancel+0x88>)
   39088:	f003 faea 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   3908c:	f385 8811 	msr	BASEPRI, r5
   39090:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   39094:	4620      	mov	r0, r4
   39096:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   39098:	f06f 0415 	mvn.w	r4, #21
   3909c:	e7fa      	b.n	39094 <k_delayed_work_cancel+0x78>
   3909e:	bf00      	nop
   390a0:	20029478 	.word	0x20029478
   390a4:	00042269 	.word	0x00042269
   390a8:	00042288 	.word	0x00042288
   390ac:	00041757 	.word	0x00041757
   390b0:	0004229d 	.word	0x0004229d
   390b4:	000422b5 	.word	0x000422b5
   390b8:	000422cc 	.word	0x000422cc

000390bc <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   390bc:	4b03      	ldr	r3, [pc, #12]	; (390cc <elapsed+0x10>)
   390be:	681b      	ldr	r3, [r3, #0]
   390c0:	b90b      	cbnz	r3, 390c6 <elapsed+0xa>
   390c2:	f7ea bd77 	b.w	23bb4 <z_clock_elapsed>
}
   390c6:	2000      	movs	r0, #0
   390c8:	4770      	bx	lr
   390ca:	bf00      	nop
   390cc:	2002947c 	.word	0x2002947c

000390d0 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   390d0:	6803      	ldr	r3, [r0, #0]
   390d2:	b140      	cbz	r0, 390e6 <remove_timeout+0x16>
   390d4:	4a07      	ldr	r2, [pc, #28]	; (390f4 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   390d6:	6852      	ldr	r2, [r2, #4]
   390d8:	4290      	cmp	r0, r2
   390da:	d004      	beq.n	390e6 <remove_timeout+0x16>
	if (next(t) != NULL) {
   390dc:	b11b      	cbz	r3, 390e6 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   390de:	689a      	ldr	r2, [r3, #8]
   390e0:	6881      	ldr	r1, [r0, #8]
   390e2:	440a      	add	r2, r1
   390e4:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   390e6:	6842      	ldr	r2, [r0, #4]
   390e8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   390ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   390ec:	2300      	movs	r3, #0
	node->prev = NULL;
   390ee:	e9c0 3300 	strd	r3, r3, [r0]
}
   390f2:	4770      	bx	lr
   390f4:	20031574 	.word	0x20031574

000390f8 <next_timeout>:
	return list->head == list;
   390f8:	4b0b      	ldr	r3, [pc, #44]	; (39128 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   390fa:	b510      	push	{r4, lr}
   390fc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   390fe:	429c      	cmp	r4, r3
   39100:	bf08      	it	eq
   39102:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   39104:	f7ff ffda 	bl	390bc <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   39108:	b154      	cbz	r4, 39120 <next_timeout+0x28>
   3910a:	68a3      	ldr	r3, [r4, #8]
   3910c:	1a18      	subs	r0, r3, r0
   3910e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   39112:	4b06      	ldr	r3, [pc, #24]	; (3912c <next_timeout+0x34>)
   39114:	691b      	ldr	r3, [r3, #16]
   39116:	b113      	cbz	r3, 3911e <next_timeout+0x26>
   39118:	4298      	cmp	r0, r3
   3911a:	bfa8      	it	ge
   3911c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   3911e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   39120:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   39124:	e7f5      	b.n	39112 <next_timeout+0x1a>
   39126:	bf00      	nop
   39128:	20031574 	.word	0x20031574
   3912c:	20029368 	.word	0x20029368

00039130 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   39130:	6803      	ldr	r3, [r0, #0]
{
   39132:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39136:	4604      	mov	r4, r0
   39138:	460e      	mov	r6, r1
   3913a:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3913c:	b163      	cbz	r3, 39158 <z_add_timeout+0x28>
   3913e:	4943      	ldr	r1, [pc, #268]	; (3924c <z_add_timeout+0x11c>)
   39140:	2358      	movs	r3, #88	; 0x58
   39142:	4a43      	ldr	r2, [pc, #268]	; (39250 <z_add_timeout+0x120>)
   39144:	4843      	ldr	r0, [pc, #268]	; (39254 <z_add_timeout+0x124>)
   39146:	f003 fa45 	bl	3c5d4 <printk>
   3914a:	4843      	ldr	r0, [pc, #268]	; (39258 <z_add_timeout+0x128>)
   3914c:	f003 fa42 	bl	3c5d4 <printk>
   39150:	2158      	movs	r1, #88	; 0x58
   39152:	483f      	ldr	r0, [pc, #252]	; (39250 <z_add_timeout+0x120>)
   39154:	f003 fa84 	bl	3c660 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   39158:	2d01      	cmp	r5, #1
   3915a:	bfb8      	it	lt
   3915c:	2501      	movlt	r5, #1
	to->fn = fn;
   3915e:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   39160:	f04f 0320 	mov.w	r3, #32
   39164:	f3ef 8811 	mrs	r8, BASEPRI
   39168:	f383 8811 	msr	BASEPRI, r3
   3916c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39170:	483a      	ldr	r0, [pc, #232]	; (3925c <z_add_timeout+0x12c>)
   39172:	f7ff fcc1 	bl	38af8 <z_spin_lock_valid>
   39176:	b968      	cbnz	r0, 39194 <z_add_timeout+0x64>
   39178:	234a      	movs	r3, #74	; 0x4a
   3917a:	4a39      	ldr	r2, [pc, #228]	; (39260 <z_add_timeout+0x130>)
   3917c:	4939      	ldr	r1, [pc, #228]	; (39264 <z_add_timeout+0x134>)
   3917e:	4835      	ldr	r0, [pc, #212]	; (39254 <z_add_timeout+0x124>)
   39180:	f003 fa28 	bl	3c5d4 <printk>
   39184:	4935      	ldr	r1, [pc, #212]	; (3925c <z_add_timeout+0x12c>)
   39186:	4838      	ldr	r0, [pc, #224]	; (39268 <z_add_timeout+0x138>)
   39188:	f003 fa24 	bl	3c5d4 <printk>
   3918c:	214a      	movs	r1, #74	; 0x4a
   3918e:	4834      	ldr	r0, [pc, #208]	; (39260 <z_add_timeout+0x130>)
   39190:	f003 fa66 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   39194:	4831      	ldr	r0, [pc, #196]	; (3925c <z_add_timeout+0x12c>)
   39196:	f7ff fccd 	bl	38b34 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   3919a:	f7ff ff8f 	bl	390bc <elapsed>
   3919e:	4428      	add	r0, r5
	return list->head == list;
   391a0:	4d32      	ldr	r5, [pc, #200]	; (3926c <z_add_timeout+0x13c>)
   391a2:	60a0      	str	r0, [r4, #8]
   391a4:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   391a6:	42ae      	cmp	r6, r5
   391a8:	d005      	beq.n	391b6 <z_add_timeout+0x86>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   391aa:	4f29      	ldr	r7, [pc, #164]	; (39250 <z_add_timeout+0x120>)
   391ac:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 39278 <z_add_timeout+0x148>
   391b0:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 39254 <z_add_timeout+0x124>
		for (t = first(); t != NULL; t = next(t)) {
   391b4:	b936      	cbnz	r6, 391c4 <z_add_timeout+0x94>
	node->prev = list->tail;
   391b6:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   391b8:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   391ba:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   391bc:	686b      	ldr	r3, [r5, #4]
   391be:	601c      	str	r4, [r3, #0]
	list->tail = node;
   391c0:	606c      	str	r4, [r5, #4]
   391c2:	e01a      	b.n	391fa <z_add_timeout+0xca>
			__ASSERT(t->dticks >= 0, "");
   391c4:	68b3      	ldr	r3, [r6, #8]
   391c6:	2b00      	cmp	r3, #0
   391c8:	da0c      	bge.n	391e4 <z_add_timeout+0xb4>
   391ca:	4649      	mov	r1, r9
   391cc:	2361      	movs	r3, #97	; 0x61
   391ce:	463a      	mov	r2, r7
   391d0:	4650      	mov	r0, sl
   391d2:	f003 f9ff 	bl	3c5d4 <printk>
   391d6:	4820      	ldr	r0, [pc, #128]	; (39258 <z_add_timeout+0x128>)
   391d8:	f003 f9fc 	bl	3c5d4 <printk>
   391dc:	2161      	movs	r1, #97	; 0x61
   391de:	4638      	mov	r0, r7
   391e0:	f003 fa3e 	bl	3c660 <assert_post_action>

			if (t->dticks > to->dticks) {
   391e4:	68b2      	ldr	r2, [r6, #8]
   391e6:	68a3      	ldr	r3, [r4, #8]
   391e8:	429a      	cmp	r2, r3
   391ea:	dd28      	ble.n	3923e <z_add_timeout+0x10e>
				t->dticks -= to->dticks;
   391ec:	1ad3      	subs	r3, r2, r3
   391ee:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   391f0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   391f2:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   391f6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   391f8:	6074      	str	r4, [r6, #4]
	return list->head == list;
   391fa:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   391fc:	42ab      	cmp	r3, r5
   391fe:	d006      	beq.n	3920e <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   39200:	429c      	cmp	r4, r3
   39202:	d104      	bne.n	3920e <z_add_timeout+0xde>
			z_clock_set_timeout(next_timeout(), false);
   39204:	f7ff ff78 	bl	390f8 <next_timeout>
   39208:	2100      	movs	r1, #0
   3920a:	f7ea fc45 	bl	23a98 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3920e:	4813      	ldr	r0, [pc, #76]	; (3925c <z_add_timeout+0x12c>)
   39210:	f7ff fc80 	bl	38b14 <z_spin_unlock_valid>
   39214:	b968      	cbnz	r0, 39232 <z_add_timeout+0x102>
   39216:	235d      	movs	r3, #93	; 0x5d
   39218:	4a11      	ldr	r2, [pc, #68]	; (39260 <z_add_timeout+0x130>)
   3921a:	4915      	ldr	r1, [pc, #84]	; (39270 <z_add_timeout+0x140>)
   3921c:	480d      	ldr	r0, [pc, #52]	; (39254 <z_add_timeout+0x124>)
   3921e:	f003 f9d9 	bl	3c5d4 <printk>
   39222:	490e      	ldr	r1, [pc, #56]	; (3925c <z_add_timeout+0x12c>)
   39224:	4813      	ldr	r0, [pc, #76]	; (39274 <z_add_timeout+0x144>)
   39226:	f003 f9d5 	bl	3c5d4 <printk>
   3922a:	215d      	movs	r1, #93	; 0x5d
   3922c:	480c      	ldr	r0, [pc, #48]	; (39260 <z_add_timeout+0x130>)
   3922e:	f003 fa17 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   39232:	f388 8811 	msr	BASEPRI, r8
   39236:	f3bf 8f6f 	isb	sy
		}
	}
}
   3923a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   3923e:	1a9b      	subs	r3, r3, r2
   39240:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   39242:	686b      	ldr	r3, [r5, #4]
   39244:	429e      	cmp	r6, r3
   39246:	d0b6      	beq.n	391b6 <z_add_timeout+0x86>
   39248:	6836      	ldr	r6, [r6, #0]
   3924a:	e7b3      	b.n	391b4 <z_add_timeout+0x84>
   3924c:	000469ef 	.word	0x000469ef
   39250:	000469d2 	.word	0x000469d2
   39254:	00041757 	.word	0x00041757
   39258:	0004311f 	.word	0x0004311f
   3925c:	20029480 	.word	0x20029480
   39260:	00042269 	.word	0x00042269
   39264:	00042288 	.word	0x00042288
   39268:	0004229d 	.word	0x0004229d
   3926c:	20031574 	.word	0x20031574
   39270:	000422b5 	.word	0x000422b5
   39274:	000422cc 	.word	0x000422cc
   39278:	00046a0f 	.word	0x00046a0f

0003927c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   3927c:	b538      	push	{r3, r4, r5, lr}
   3927e:	4604      	mov	r4, r0
	__asm__ volatile(
   39280:	f04f 0320 	mov.w	r3, #32
   39284:	f3ef 8511 	mrs	r5, BASEPRI
   39288:	f383 8811 	msr	BASEPRI, r3
   3928c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39290:	481a      	ldr	r0, [pc, #104]	; (392fc <z_abort_timeout+0x80>)
   39292:	f7ff fc31 	bl	38af8 <z_spin_lock_valid>
   39296:	b968      	cbnz	r0, 392b4 <z_abort_timeout+0x38>
   39298:	234a      	movs	r3, #74	; 0x4a
   3929a:	4a19      	ldr	r2, [pc, #100]	; (39300 <z_abort_timeout+0x84>)
   3929c:	4919      	ldr	r1, [pc, #100]	; (39304 <z_abort_timeout+0x88>)
   3929e:	481a      	ldr	r0, [pc, #104]	; (39308 <z_abort_timeout+0x8c>)
   392a0:	f003 f998 	bl	3c5d4 <printk>
   392a4:	4915      	ldr	r1, [pc, #84]	; (392fc <z_abort_timeout+0x80>)
   392a6:	4819      	ldr	r0, [pc, #100]	; (3930c <z_abort_timeout+0x90>)
   392a8:	f003 f994 	bl	3c5d4 <printk>
   392ac:	214a      	movs	r1, #74	; 0x4a
   392ae:	4814      	ldr	r0, [pc, #80]	; (39300 <z_abort_timeout+0x84>)
   392b0:	f003 f9d6 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   392b4:	4811      	ldr	r0, [pc, #68]	; (392fc <z_abort_timeout+0x80>)
   392b6:	f7ff fc3d 	bl	38b34 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   392ba:	6823      	ldr	r3, [r4, #0]
   392bc:	b1db      	cbz	r3, 392f6 <z_abort_timeout+0x7a>
			remove_timeout(to);
   392be:	4620      	mov	r0, r4
   392c0:	f7ff ff06 	bl	390d0 <remove_timeout>
			ret = 0;
   392c4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   392c6:	480d      	ldr	r0, [pc, #52]	; (392fc <z_abort_timeout+0x80>)
   392c8:	f7ff fc24 	bl	38b14 <z_spin_unlock_valid>
   392cc:	b968      	cbnz	r0, 392ea <z_abort_timeout+0x6e>
   392ce:	235d      	movs	r3, #93	; 0x5d
   392d0:	4a0b      	ldr	r2, [pc, #44]	; (39300 <z_abort_timeout+0x84>)
   392d2:	490f      	ldr	r1, [pc, #60]	; (39310 <z_abort_timeout+0x94>)
   392d4:	480c      	ldr	r0, [pc, #48]	; (39308 <z_abort_timeout+0x8c>)
   392d6:	f003 f97d 	bl	3c5d4 <printk>
   392da:	4908      	ldr	r1, [pc, #32]	; (392fc <z_abort_timeout+0x80>)
   392dc:	480d      	ldr	r0, [pc, #52]	; (39314 <z_abort_timeout+0x98>)
   392de:	f003 f979 	bl	3c5d4 <printk>
   392e2:	215d      	movs	r1, #93	; 0x5d
   392e4:	4806      	ldr	r0, [pc, #24]	; (39300 <z_abort_timeout+0x84>)
   392e6:	f003 f9bb 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   392ea:	f385 8811 	msr	BASEPRI, r5
   392ee:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   392f2:	4620      	mov	r0, r4
   392f4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   392f6:	f06f 0415 	mvn.w	r4, #21
   392fa:	e7e4      	b.n	392c6 <z_abort_timeout+0x4a>
   392fc:	20029480 	.word	0x20029480
   39300:	00042269 	.word	0x00042269
   39304:	00042288 	.word	0x00042288
   39308:	00041757 	.word	0x00041757
   3930c:	0004229d 	.word	0x0004229d
   39310:	000422b5 	.word	0x000422b5
   39314:	000422cc 	.word	0x000422cc

00039318 <z_timeout_remaining>:

s32_t z_timeout_remaining(struct _timeout *timeout)
{
   39318:	b570      	push	{r4, r5, r6, lr}
   3931a:	4605      	mov	r5, r0
	s32_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   3931c:	6800      	ldr	r0, [r0, #0]
   3931e:	2800      	cmp	r0, #0
   39320:	d03c      	beq.n	3939c <z_timeout_remaining+0x84>
	__asm__ volatile(
   39322:	f04f 0320 	mov.w	r3, #32
   39326:	f3ef 8611 	mrs	r6, BASEPRI
   3932a:	f383 8811 	msr	BASEPRI, r3
   3932e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39332:	4821      	ldr	r0, [pc, #132]	; (393b8 <z_timeout_remaining+0xa0>)
   39334:	f7ff fbe0 	bl	38af8 <z_spin_lock_valid>
   39338:	b968      	cbnz	r0, 39356 <z_timeout_remaining+0x3e>
   3933a:	234a      	movs	r3, #74	; 0x4a
   3933c:	4a1f      	ldr	r2, [pc, #124]	; (393bc <z_timeout_remaining+0xa4>)
   3933e:	4920      	ldr	r1, [pc, #128]	; (393c0 <z_timeout_remaining+0xa8>)
   39340:	4820      	ldr	r0, [pc, #128]	; (393c4 <z_timeout_remaining+0xac>)
   39342:	f003 f947 	bl	3c5d4 <printk>
   39346:	491c      	ldr	r1, [pc, #112]	; (393b8 <z_timeout_remaining+0xa0>)
   39348:	481f      	ldr	r0, [pc, #124]	; (393c8 <z_timeout_remaining+0xb0>)
   3934a:	f003 f943 	bl	3c5d4 <printk>
   3934e:	214a      	movs	r1, #74	; 0x4a
   39350:	481a      	ldr	r0, [pc, #104]	; (393bc <z_timeout_remaining+0xa4>)
   39352:	f003 f985 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   39356:	4818      	ldr	r0, [pc, #96]	; (393b8 <z_timeout_remaining+0xa0>)
   39358:	f7ff fbec 	bl	38b34 <z_spin_lock_set_owner>
	return list->head == list;
   3935c:	4a1b      	ldr	r2, [pc, #108]	; (393cc <z_timeout_remaining+0xb4>)
   3935e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39360:	4293      	cmp	r3, r2
   39362:	d026      	beq.n	393b2 <z_timeout_remaining+0x9a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   39364:	2400      	movs	r4, #0
   39366:	6852      	ldr	r2, [r2, #4]
		return 0;
	}

	LOCKED(&timeout_lock) {
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   39368:	b9cb      	cbnz	r3, 3939e <z_timeout_remaining+0x86>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3936a:	4813      	ldr	r0, [pc, #76]	; (393b8 <z_timeout_remaining+0xa0>)
   3936c:	f7ff fbd2 	bl	38b14 <z_spin_unlock_valid>
   39370:	b968      	cbnz	r0, 3938e <z_timeout_remaining+0x76>
   39372:	235d      	movs	r3, #93	; 0x5d
   39374:	4a11      	ldr	r2, [pc, #68]	; (393bc <z_timeout_remaining+0xa4>)
   39376:	4916      	ldr	r1, [pc, #88]	; (393d0 <z_timeout_remaining+0xb8>)
   39378:	4812      	ldr	r0, [pc, #72]	; (393c4 <z_timeout_remaining+0xac>)
   3937a:	f003 f92b 	bl	3c5d4 <printk>
   3937e:	490e      	ldr	r1, [pc, #56]	; (393b8 <z_timeout_remaining+0xa0>)
   39380:	4814      	ldr	r0, [pc, #80]	; (393d4 <z_timeout_remaining+0xbc>)
   39382:	f003 f927 	bl	3c5d4 <printk>
   39386:	215d      	movs	r1, #93	; 0x5d
   39388:	480c      	ldr	r0, [pc, #48]	; (393bc <z_timeout_remaining+0xa4>)
   3938a:	f003 f969 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   3938e:	f386 8811 	msr	BASEPRI, r6
   39392:	f3bf 8f6f 	isb	sy
				break;
			}
		}
	}

	return ticks - elapsed();
   39396:	f7ff fe91 	bl	390bc <elapsed>
   3939a:	1a20      	subs	r0, r4, r0
}
   3939c:	bd70      	pop	{r4, r5, r6, pc}
			ticks += t->dticks;
   3939e:	6899      	ldr	r1, [r3, #8]
			if (timeout == t) {
   393a0:	42ab      	cmp	r3, r5
			ticks += t->dticks;
   393a2:	440c      	add	r4, r1
			if (timeout == t) {
   393a4:	d0e1      	beq.n	3936a <z_timeout_remaining+0x52>
   393a6:	2b00      	cmp	r3, #0
   393a8:	d0df      	beq.n	3936a <z_timeout_remaining+0x52>
	return (node == list->tail) ? NULL : node->next;
   393aa:	4293      	cmp	r3, r2
   393ac:	d0dd      	beq.n	3936a <z_timeout_remaining+0x52>
   393ae:	681b      	ldr	r3, [r3, #0]
   393b0:	e7da      	b.n	39368 <z_timeout_remaining+0x50>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   393b2:	2400      	movs	r4, #0
   393b4:	e7d9      	b.n	3936a <z_timeout_remaining+0x52>
   393b6:	bf00      	nop
   393b8:	20029480 	.word	0x20029480
   393bc:	00042269 	.word	0x00042269
   393c0:	00042288 	.word	0x00042288
   393c4:	00041757 	.word	0x00041757
   393c8:	0004229d 	.word	0x0004229d
   393cc:	20031574 	.word	0x20031574
   393d0:	000422b5 	.word	0x000422b5
   393d4:	000422cc 	.word	0x000422cc

000393d8 <z_get_next_timeout_expiry>:

s32_t z_get_next_timeout_expiry(void)
{
   393d8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   393da:	f04f 0320 	mov.w	r3, #32
   393de:	f3ef 8511 	mrs	r5, BASEPRI
   393e2:	f383 8811 	msr	BASEPRI, r3
   393e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   393ea:	4818      	ldr	r0, [pc, #96]	; (3944c <z_get_next_timeout_expiry+0x74>)
   393ec:	f7ff fb84 	bl	38af8 <z_spin_lock_valid>
   393f0:	b968      	cbnz	r0, 3940e <z_get_next_timeout_expiry+0x36>
   393f2:	234a      	movs	r3, #74	; 0x4a
   393f4:	4a16      	ldr	r2, [pc, #88]	; (39450 <z_get_next_timeout_expiry+0x78>)
   393f6:	4917      	ldr	r1, [pc, #92]	; (39454 <z_get_next_timeout_expiry+0x7c>)
   393f8:	4817      	ldr	r0, [pc, #92]	; (39458 <z_get_next_timeout_expiry+0x80>)
   393fa:	f003 f8eb 	bl	3c5d4 <printk>
   393fe:	4913      	ldr	r1, [pc, #76]	; (3944c <z_get_next_timeout_expiry+0x74>)
   39400:	4816      	ldr	r0, [pc, #88]	; (3945c <z_get_next_timeout_expiry+0x84>)
   39402:	f003 f8e7 	bl	3c5d4 <printk>
   39406:	214a      	movs	r1, #74	; 0x4a
   39408:	4811      	ldr	r0, [pc, #68]	; (39450 <z_get_next_timeout_expiry+0x78>)
   3940a:	f003 f929 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   3940e:	480f      	ldr	r0, [pc, #60]	; (3944c <z_get_next_timeout_expiry+0x74>)
   39410:	f7ff fb90 	bl	38b34 <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   39414:	f7ff fe70 	bl	390f8 <next_timeout>
   39418:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3941a:	480c      	ldr	r0, [pc, #48]	; (3944c <z_get_next_timeout_expiry+0x74>)
   3941c:	f7ff fb7a 	bl	38b14 <z_spin_unlock_valid>
   39420:	b968      	cbnz	r0, 3943e <z_get_next_timeout_expiry+0x66>
   39422:	235d      	movs	r3, #93	; 0x5d
   39424:	4a0a      	ldr	r2, [pc, #40]	; (39450 <z_get_next_timeout_expiry+0x78>)
   39426:	490e      	ldr	r1, [pc, #56]	; (39460 <z_get_next_timeout_expiry+0x88>)
   39428:	480b      	ldr	r0, [pc, #44]	; (39458 <z_get_next_timeout_expiry+0x80>)
   3942a:	f003 f8d3 	bl	3c5d4 <printk>
   3942e:	4907      	ldr	r1, [pc, #28]	; (3944c <z_get_next_timeout_expiry+0x74>)
   39430:	480c      	ldr	r0, [pc, #48]	; (39464 <z_get_next_timeout_expiry+0x8c>)
   39432:	f003 f8cf 	bl	3c5d4 <printk>
   39436:	215d      	movs	r1, #93	; 0x5d
   39438:	4805      	ldr	r0, [pc, #20]	; (39450 <z_get_next_timeout_expiry+0x78>)
   3943a:	f003 f911 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   3943e:	f385 8811 	msr	BASEPRI, r5
   39442:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   39446:	4620      	mov	r0, r4
   39448:	bd38      	pop	{r3, r4, r5, pc}
   3944a:	bf00      	nop
   3944c:	20029480 	.word	0x20029480
   39450:	00042269 	.word	0x00042269
   39454:	00042288 	.word	0x00042288
   39458:	00041757 	.word	0x00041757
   3945c:	0004229d 	.word	0x0004229d
   39460:	000422b5 	.word	0x000422b5
   39464:	000422cc 	.word	0x000422cc

00039468 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   39468:	b570      	push	{r4, r5, r6, lr}
   3946a:	4604      	mov	r4, r0
   3946c:	460e      	mov	r6, r1
	__asm__ volatile(
   3946e:	f04f 0320 	mov.w	r3, #32
   39472:	f3ef 8511 	mrs	r5, BASEPRI
   39476:	f383 8811 	msr	BASEPRI, r3
   3947a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3947e:	481b      	ldr	r0, [pc, #108]	; (394ec <z_set_timeout_expiry+0x84>)
   39480:	f7ff fb3a 	bl	38af8 <z_spin_lock_valid>
   39484:	b968      	cbnz	r0, 394a2 <z_set_timeout_expiry+0x3a>
   39486:	234a      	movs	r3, #74	; 0x4a
   39488:	4a19      	ldr	r2, [pc, #100]	; (394f0 <z_set_timeout_expiry+0x88>)
   3948a:	491a      	ldr	r1, [pc, #104]	; (394f4 <z_set_timeout_expiry+0x8c>)
   3948c:	481a      	ldr	r0, [pc, #104]	; (394f8 <z_set_timeout_expiry+0x90>)
   3948e:	f003 f8a1 	bl	3c5d4 <printk>
   39492:	4916      	ldr	r1, [pc, #88]	; (394ec <z_set_timeout_expiry+0x84>)
   39494:	4819      	ldr	r0, [pc, #100]	; (394fc <z_set_timeout_expiry+0x94>)
   39496:	f003 f89d 	bl	3c5d4 <printk>
   3949a:	214a      	movs	r1, #74	; 0x4a
   3949c:	4814      	ldr	r0, [pc, #80]	; (394f0 <z_set_timeout_expiry+0x88>)
   3949e:	f003 f8df 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   394a2:	4812      	ldr	r0, [pc, #72]	; (394ec <z_set_timeout_expiry+0x84>)
   394a4:	f7ff fb46 	bl	38b34 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   394a8:	f7ff fe26 	bl	390f8 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   394ac:	2801      	cmp	r0, #1
   394ae:	dd05      	ble.n	394bc <z_set_timeout_expiry+0x54>
   394b0:	42a0      	cmp	r0, r4
   394b2:	dd03      	ble.n	394bc <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   394b4:	4631      	mov	r1, r6
   394b6:	4620      	mov	r0, r4
   394b8:	f7ea faee 	bl	23a98 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   394bc:	480b      	ldr	r0, [pc, #44]	; (394ec <z_set_timeout_expiry+0x84>)
   394be:	f7ff fb29 	bl	38b14 <z_spin_unlock_valid>
   394c2:	b968      	cbnz	r0, 394e0 <z_set_timeout_expiry+0x78>
   394c4:	235d      	movs	r3, #93	; 0x5d
   394c6:	4a0a      	ldr	r2, [pc, #40]	; (394f0 <z_set_timeout_expiry+0x88>)
   394c8:	490d      	ldr	r1, [pc, #52]	; (39500 <z_set_timeout_expiry+0x98>)
   394ca:	480b      	ldr	r0, [pc, #44]	; (394f8 <z_set_timeout_expiry+0x90>)
   394cc:	f003 f882 	bl	3c5d4 <printk>
   394d0:	4906      	ldr	r1, [pc, #24]	; (394ec <z_set_timeout_expiry+0x84>)
   394d2:	480c      	ldr	r0, [pc, #48]	; (39504 <z_set_timeout_expiry+0x9c>)
   394d4:	f003 f87e 	bl	3c5d4 <printk>
   394d8:	215d      	movs	r1, #93	; 0x5d
   394da:	4805      	ldr	r0, [pc, #20]	; (394f0 <z_set_timeout_expiry+0x88>)
   394dc:	f003 f8c0 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   394e0:	f385 8811 	msr	BASEPRI, r5
   394e4:	f3bf 8f6f 	isb	sy
		}
	}
}
   394e8:	bd70      	pop	{r4, r5, r6, pc}
   394ea:	bf00      	nop
   394ec:	20029480 	.word	0x20029480
   394f0:	00042269 	.word	0x00042269
   394f4:	00042288 	.word	0x00042288
   394f8:	00041757 	.word	0x00041757
   394fc:	0004229d 	.word	0x0004229d
   39500:	000422b5 	.word	0x000422b5
   39504:	000422cc 	.word	0x000422cc

00039508 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   39508:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   3950c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   3950e:	f7fe fcd7 	bl	37ec0 <z_time_slice>
	__asm__ volatile(
   39512:	f04f 0320 	mov.w	r3, #32
   39516:	f3ef 8511 	mrs	r5, BASEPRI
   3951a:	f383 8811 	msr	BASEPRI, r3
   3951e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39522:	4848      	ldr	r0, [pc, #288]	; (39644 <z_clock_announce+0x13c>)
   39524:	f7ff fae8 	bl	38af8 <z_spin_lock_valid>
   39528:	b968      	cbnz	r0, 39546 <z_clock_announce+0x3e>
   3952a:	234a      	movs	r3, #74	; 0x4a
   3952c:	4a46      	ldr	r2, [pc, #280]	; (39648 <z_clock_announce+0x140>)
   3952e:	4947      	ldr	r1, [pc, #284]	; (3964c <z_clock_announce+0x144>)
   39530:	4847      	ldr	r0, [pc, #284]	; (39650 <z_clock_announce+0x148>)
   39532:	f003 f84f 	bl	3c5d4 <printk>
   39536:	4943      	ldr	r1, [pc, #268]	; (39644 <z_clock_announce+0x13c>)
   39538:	4846      	ldr	r0, [pc, #280]	; (39654 <z_clock_announce+0x14c>)
   3953a:	f003 f84b 	bl	3c5d4 <printk>
   3953e:	214a      	movs	r1, #74	; 0x4a
   39540:	4841      	ldr	r0, [pc, #260]	; (39648 <z_clock_announce+0x140>)
   39542:	f003 f88d 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   39546:	4f44      	ldr	r7, [pc, #272]	; (39658 <z_clock_announce+0x150>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   39548:	4e44      	ldr	r6, [pc, #272]	; (3965c <z_clock_announce+0x154>)
   3954a:	46b9      	mov	r9, r7
   3954c:	483d      	ldr	r0, [pc, #244]	; (39644 <z_clock_announce+0x13c>)
	return list->head == list;
   3954e:	f8df 8118 	ldr.w	r8, [pc, #280]	; 39668 <z_clock_announce+0x160>
   39552:	f7ff faef 	bl	38b34 <z_spin_lock_set_owner>
   39556:	6034      	str	r4, [r6, #0]
   39558:	f8d8 4000 	ldr.w	r4, [r8]
   3955c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3955e:	4544      	cmp	r4, r8
   39560:	e9d7 bc00 	ldrd	fp, ip, [r7]
   39564:	d005      	beq.n	39572 <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   39566:	b124      	cbz	r4, 39572 <z_clock_announce+0x6a>
   39568:	68a3      	ldr	r3, [r4, #8]
   3956a:	4293      	cmp	r3, r2
   3956c:	dd26      	ble.n	395bc <z_clock_announce+0xb4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   3956e:	1a9b      	subs	r3, r3, r2
   39570:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   39572:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   39574:	eb1b 0002 	adds.w	r0, fp, r2
   39578:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   3957c:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   39580:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   39582:	f7ff fdb9 	bl	390f8 <next_timeout>
   39586:	4621      	mov	r1, r4
   39588:	f7ea fa86 	bl	23a98 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3958c:	482d      	ldr	r0, [pc, #180]	; (39644 <z_clock_announce+0x13c>)
   3958e:	f7ff fac1 	bl	38b14 <z_spin_unlock_valid>
   39592:	b968      	cbnz	r0, 395b0 <z_clock_announce+0xa8>
   39594:	235d      	movs	r3, #93	; 0x5d
   39596:	4a2c      	ldr	r2, [pc, #176]	; (39648 <z_clock_announce+0x140>)
   39598:	4931      	ldr	r1, [pc, #196]	; (39660 <z_clock_announce+0x158>)
   3959a:	482d      	ldr	r0, [pc, #180]	; (39650 <z_clock_announce+0x148>)
   3959c:	f003 f81a 	bl	3c5d4 <printk>
   395a0:	4928      	ldr	r1, [pc, #160]	; (39644 <z_clock_announce+0x13c>)
   395a2:	4830      	ldr	r0, [pc, #192]	; (39664 <z_clock_announce+0x15c>)
   395a4:	f003 f816 	bl	3c5d4 <printk>
   395a8:	215d      	movs	r1, #93	; 0x5d
   395aa:	4827      	ldr	r0, [pc, #156]	; (39648 <z_clock_announce+0x140>)
   395ac:	f003 f858 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   395b0:	f385 8811 	msr	BASEPRI, r5
   395b4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   395b8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   395bc:	eb1b 0003 	adds.w	r0, fp, r3
   395c0:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   395c4:	1ad3      	subs	r3, r2, r3
   395c6:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   395c8:	2300      	movs	r3, #0
		curr_tick += dt;
   395ca:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   395ce:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   395d0:	4620      	mov	r0, r4
   395d2:	f7ff fd7d 	bl	390d0 <remove_timeout>
   395d6:	481b      	ldr	r0, [pc, #108]	; (39644 <z_clock_announce+0x13c>)
   395d8:	f7ff fa9c 	bl	38b14 <z_spin_unlock_valid>
   395dc:	b968      	cbnz	r0, 395fa <z_clock_announce+0xf2>
   395de:	235d      	movs	r3, #93	; 0x5d
   395e0:	4a19      	ldr	r2, [pc, #100]	; (39648 <z_clock_announce+0x140>)
   395e2:	491f      	ldr	r1, [pc, #124]	; (39660 <z_clock_announce+0x158>)
   395e4:	481a      	ldr	r0, [pc, #104]	; (39650 <z_clock_announce+0x148>)
   395e6:	f002 fff5 	bl	3c5d4 <printk>
   395ea:	4916      	ldr	r1, [pc, #88]	; (39644 <z_clock_announce+0x13c>)
   395ec:	481d      	ldr	r0, [pc, #116]	; (39664 <z_clock_announce+0x15c>)
   395ee:	f002 fff1 	bl	3c5d4 <printk>
   395f2:	215d      	movs	r1, #93	; 0x5d
   395f4:	4814      	ldr	r0, [pc, #80]	; (39648 <z_clock_announce+0x140>)
   395f6:	f003 f833 	bl	3c660 <assert_post_action>
   395fa:	f385 8811 	msr	BASEPRI, r5
   395fe:	f3bf 8f6f 	isb	sy
		t->fn(t);
   39602:	68e3      	ldr	r3, [r4, #12]
   39604:	4620      	mov	r0, r4
   39606:	4798      	blx	r3
	__asm__ volatile(
   39608:	f04f 0320 	mov.w	r3, #32
   3960c:	f3ef 8511 	mrs	r5, BASEPRI
   39610:	f383 8811 	msr	BASEPRI, r3
   39614:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39618:	480a      	ldr	r0, [pc, #40]	; (39644 <z_clock_announce+0x13c>)
   3961a:	f7ff fa6d 	bl	38af8 <z_spin_lock_valid>
   3961e:	b968      	cbnz	r0, 3963c <z_clock_announce+0x134>
   39620:	234a      	movs	r3, #74	; 0x4a
   39622:	4a09      	ldr	r2, [pc, #36]	; (39648 <z_clock_announce+0x140>)
   39624:	4909      	ldr	r1, [pc, #36]	; (3964c <z_clock_announce+0x144>)
   39626:	480a      	ldr	r0, [pc, #40]	; (39650 <z_clock_announce+0x148>)
   39628:	f002 ffd4 	bl	3c5d4 <printk>
   3962c:	4905      	ldr	r1, [pc, #20]	; (39644 <z_clock_announce+0x13c>)
   3962e:	4809      	ldr	r0, [pc, #36]	; (39654 <z_clock_announce+0x14c>)
   39630:	f002 ffd0 	bl	3c5d4 <printk>
   39634:	214a      	movs	r1, #74	; 0x4a
   39636:	4804      	ldr	r0, [pc, #16]	; (39648 <z_clock_announce+0x140>)
   39638:	f003 f812 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   3963c:	4801      	ldr	r0, [pc, #4]	; (39644 <z_clock_announce+0x13c>)
   3963e:	f7ff fa79 	bl	38b34 <z_spin_lock_set_owner>
	return k;
   39642:	e789      	b.n	39558 <z_clock_announce+0x50>
   39644:	20029480 	.word	0x20029480
   39648:	00042269 	.word	0x00042269
   3964c:	00042288 	.word	0x00042288
   39650:	00041757 	.word	0x00041757
   39654:	0004229d 	.word	0x0004229d
   39658:	200237d0 	.word	0x200237d0
   3965c:	2002947c 	.word	0x2002947c
   39660:	000422b5 	.word	0x000422b5
   39664:	000422cc 	.word	0x000422cc
   39668:	20031574 	.word	0x20031574

0003966c <z_tick_get>:

s64_t z_tick_get(void)
{
   3966c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39670:	f04f 0320 	mov.w	r3, #32
   39674:	f3ef 8611 	mrs	r6, BASEPRI
   39678:	f383 8811 	msr	BASEPRI, r3
   3967c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39680:	481b      	ldr	r0, [pc, #108]	; (396f0 <z_tick_get+0x84>)
   39682:	f7ff fa39 	bl	38af8 <z_spin_lock_valid>
   39686:	b968      	cbnz	r0, 396a4 <z_tick_get+0x38>
   39688:	234a      	movs	r3, #74	; 0x4a
   3968a:	4a1a      	ldr	r2, [pc, #104]	; (396f4 <z_tick_get+0x88>)
   3968c:	491a      	ldr	r1, [pc, #104]	; (396f8 <z_tick_get+0x8c>)
   3968e:	481b      	ldr	r0, [pc, #108]	; (396fc <z_tick_get+0x90>)
   39690:	f002 ffa0 	bl	3c5d4 <printk>
   39694:	4916      	ldr	r1, [pc, #88]	; (396f0 <z_tick_get+0x84>)
   39696:	481a      	ldr	r0, [pc, #104]	; (39700 <z_tick_get+0x94>)
   39698:	f002 ff9c 	bl	3c5d4 <printk>
   3969c:	214a      	movs	r1, #74	; 0x4a
   3969e:	4815      	ldr	r0, [pc, #84]	; (396f4 <z_tick_get+0x88>)
   396a0:	f002 ffde 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   396a4:	4812      	ldr	r0, [pc, #72]	; (396f0 <z_tick_get+0x84>)
   396a6:	f7ff fa45 	bl	38b34 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   396aa:	f7ea fa83 	bl	23bb4 <z_clock_elapsed>
   396ae:	4b15      	ldr	r3, [pc, #84]	; (39704 <z_tick_get+0x98>)
   396b0:	e9d3 4500 	ldrd	r4, r5, [r3]
   396b4:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   396b6:	480e      	ldr	r0, [pc, #56]	; (396f0 <z_tick_get+0x84>)
   396b8:	f145 0800 	adc.w	r8, r5, #0
   396bc:	f7ff fa2a 	bl	38b14 <z_spin_unlock_valid>
   396c0:	b968      	cbnz	r0, 396de <z_tick_get+0x72>
   396c2:	235d      	movs	r3, #93	; 0x5d
   396c4:	4a0b      	ldr	r2, [pc, #44]	; (396f4 <z_tick_get+0x88>)
   396c6:	4910      	ldr	r1, [pc, #64]	; (39708 <z_tick_get+0x9c>)
   396c8:	480c      	ldr	r0, [pc, #48]	; (396fc <z_tick_get+0x90>)
   396ca:	f002 ff83 	bl	3c5d4 <printk>
   396ce:	4908      	ldr	r1, [pc, #32]	; (396f0 <z_tick_get+0x84>)
   396d0:	480e      	ldr	r0, [pc, #56]	; (3970c <z_tick_get+0xa0>)
   396d2:	f002 ff7f 	bl	3c5d4 <printk>
   396d6:	215d      	movs	r1, #93	; 0x5d
   396d8:	4806      	ldr	r0, [pc, #24]	; (396f4 <z_tick_get+0x88>)
   396da:	f002 ffc1 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   396de:	f386 8811 	msr	BASEPRI, r6
   396e2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   396e6:	4638      	mov	r0, r7
   396e8:	4641      	mov	r1, r8
   396ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   396ee:	bf00      	nop
   396f0:	20029480 	.word	0x20029480
   396f4:	00042269 	.word	0x00042269
   396f8:	00042288 	.word	0x00042288
   396fc:	00041757 	.word	0x00041757
   39700:	0004229d 	.word	0x0004229d
   39704:	200237d0 	.word	0x200237d0
   39708:	000422b5 	.word	0x000422b5
   3970c:	000422cc 	.word	0x000422cc

00039710 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   39710:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   39712:	6883      	ldr	r3, [r0, #8]
{
   39714:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   39716:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   39718:	b964      	cbnz	r4, 39734 <k_poll_poller_cb+0x24>
   3971a:	4915      	ldr	r1, [pc, #84]	; (39770 <k_poll_poller_cb+0x60>)
   3971c:	23e0      	movs	r3, #224	; 0xe0
   3971e:	4a15      	ldr	r2, [pc, #84]	; (39774 <k_poll_poller_cb+0x64>)
   39720:	4815      	ldr	r0, [pc, #84]	; (39778 <k_poll_poller_cb+0x68>)
   39722:	f002 ff57 	bl	3c5d4 <printk>
   39726:	4815      	ldr	r0, [pc, #84]	; (3977c <k_poll_poller_cb+0x6c>)
   39728:	f002 ff54 	bl	3c5d4 <printk>
   3972c:	21e0      	movs	r1, #224	; 0xe0
   3972e:	4811      	ldr	r0, [pc, #68]	; (39774 <k_poll_poller_cb+0x64>)
   39730:	f002 ff96 	bl	3c660 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   39734:	7b63      	ldrb	r3, [r4, #13]
   39736:	079a      	lsls	r2, r3, #30
   39738:	d401      	bmi.n	3973e <k_poll_poller_cb+0x2e>
		return 0;
   3973a:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   3973c:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   3973e:	6a23      	ldr	r3, [r4, #32]
   39740:	3302      	adds	r3, #2
   39742:	d012      	beq.n	3976a <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   39744:	4620      	mov	r0, r4
   39746:	f7fe f93b 	bl	379c0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3974a:	2d08      	cmp	r5, #8
   3974c:	bf0c      	ite	eq
   3974e:	f06f 0303 	mvneq.w	r3, #3
   39752:	2300      	movne	r3, #0
   39754:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   39756:	7b63      	ldrb	r3, [r4, #13]
   39758:	06db      	lsls	r3, r3, #27
   3975a:	d1ee      	bne.n	3973a <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   3975c:	69a5      	ldr	r5, [r4, #24]
   3975e:	2d00      	cmp	r5, #0
   39760:	d1eb      	bne.n	3973a <k_poll_poller_cb+0x2a>
		z_add_thread_to_ready_q(thread);
   39762:	4620      	mov	r0, r4
   39764:	f7fe fa34 	bl	37bd0 <z_add_thread_to_ready_q>
	return 0;
   39768:	e7e7      	b.n	3973a <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   3976a:	f06f 000a 	mvn.w	r0, #10
   3976e:	e7e5      	b.n	3973c <k_poll_poller_cb+0x2c>
   39770:	00046b85 	.word	0x00046b85
   39774:	00046b6b 	.word	0x00046b6b
   39778:	00041757 	.word	0x00041757
   3977c:	00046b9b 	.word	0x00046b9b

00039780 <clear_event_registrations>:
{
   39780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39784:	2414      	movs	r4, #20
   39786:	4680      	mov	r8, r0
   39788:	4617      	mov	r7, r2
	while (num_events--) {
   3978a:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   3978e:	4d48      	ldr	r5, [pc, #288]	; (398b0 <clear_event_registrations+0x130>)
   39790:	f8df 9158 	ldr.w	r9, [pc, #344]	; 398ec <clear_event_registrations+0x16c>
   39794:	4e47      	ldr	r6, [pc, #284]	; (398b4 <clear_event_registrations+0x134>)
	while (num_events--) {
   39796:	4544      	cmp	r4, r8
   39798:	d101      	bne.n	3979e <clear_event_registrations+0x1e>
}
   3979a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   3979e:	2300      	movs	r3, #0
   397a0:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   397a4:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   397a8:	f003 030f 	and.w	r3, r3, #15
   397ac:	2b04      	cmp	r3, #4
   397ae:	d83d      	bhi.n	3982c <clear_event_registrations+0xac>
   397b0:	e8df f003 	tbb	[pc, r3]
   397b4:	3c032d49 	.word	0x3c032d49
   397b8:	1e          	.byte	0x1e
   397b9:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   397ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
   397be:	b963      	cbnz	r3, 397da <clear_event_registrations+0x5a>
   397c0:	493d      	ldr	r1, [pc, #244]	; (398b8 <clear_event_registrations+0x138>)
   397c2:	2396      	movs	r3, #150	; 0x96
   397c4:	462a      	mov	r2, r5
   397c6:	4630      	mov	r0, r6
   397c8:	f002 ff04 	bl	3c5d4 <printk>
   397cc:	483b      	ldr	r0, [pc, #236]	; (398bc <clear_event_registrations+0x13c>)
   397ce:	f002 ff01 	bl	3c5d4 <printk>
   397d2:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   397d4:	4628      	mov	r0, r5
   397d6:	f002 ff43 	bl	3c660 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   397da:	f854 3c14 	ldr.w	r3, [r4, #-20]
   397de:	b393      	cbz	r3, 39846 <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   397e0:	f854 2c10 	ldr.w	r2, [r4, #-16]
   397e4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   397e6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   397e8:	2300      	movs	r3, #0
	node->prev = NULL;
   397ea:	e944 3305 	strd	r3, r3, [r4, #-20]
   397ee:	e02a      	b.n	39846 <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   397f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   397f4:	2b00      	cmp	r3, #0
   397f6:	d1f0      	bne.n	397da <clear_event_registrations+0x5a>
   397f8:	4931      	ldr	r1, [pc, #196]	; (398c0 <clear_event_registrations+0x140>)
   397fa:	239a      	movs	r3, #154	; 0x9a
   397fc:	462a      	mov	r2, r5
   397fe:	4630      	mov	r0, r6
   39800:	f002 fee8 	bl	3c5d4 <printk>
   39804:	482f      	ldr	r0, [pc, #188]	; (398c4 <clear_event_registrations+0x144>)
   39806:	f002 fee5 	bl	3c5d4 <printk>
   3980a:	219a      	movs	r1, #154	; 0x9a
   3980c:	e7e2      	b.n	397d4 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3980e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   39812:	2b00      	cmp	r3, #0
   39814:	d1e1      	bne.n	397da <clear_event_registrations+0x5a>
   39816:	492c      	ldr	r1, [pc, #176]	; (398c8 <clear_event_registrations+0x148>)
   39818:	239e      	movs	r3, #158	; 0x9e
   3981a:	462a      	mov	r2, r5
   3981c:	4630      	mov	r0, r6
   3981e:	f002 fed9 	bl	3c5d4 <printk>
   39822:	482a      	ldr	r0, [pc, #168]	; (398cc <clear_event_registrations+0x14c>)
   39824:	f002 fed6 	bl	3c5d4 <printk>
   39828:	219e      	movs	r1, #158	; 0x9e
   3982a:	e7d3      	b.n	397d4 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   3982c:	4649      	mov	r1, r9
   3982e:	23a5      	movs	r3, #165	; 0xa5
   39830:	462a      	mov	r2, r5
   39832:	4630      	mov	r0, r6
   39834:	f002 fece 	bl	3c5d4 <printk>
   39838:	4825      	ldr	r0, [pc, #148]	; (398d0 <clear_event_registrations+0x150>)
   3983a:	f002 fecb 	bl	3c5d4 <printk>
   3983e:	21a5      	movs	r1, #165	; 0xa5
   39840:	4628      	mov	r0, r5
   39842:	f002 ff0d 	bl	3c660 <assert_post_action>
   39846:	4823      	ldr	r0, [pc, #140]	; (398d4 <clear_event_registrations+0x154>)
   39848:	f7ff f964 	bl	38b14 <z_spin_unlock_valid>
   3984c:	b968      	cbnz	r0, 3986a <clear_event_registrations+0xea>
   3984e:	235d      	movs	r3, #93	; 0x5d
   39850:	4a21      	ldr	r2, [pc, #132]	; (398d8 <clear_event_registrations+0x158>)
   39852:	4922      	ldr	r1, [pc, #136]	; (398dc <clear_event_registrations+0x15c>)
   39854:	4630      	mov	r0, r6
   39856:	f002 febd 	bl	3c5d4 <printk>
   3985a:	491e      	ldr	r1, [pc, #120]	; (398d4 <clear_event_registrations+0x154>)
   3985c:	4820      	ldr	r0, [pc, #128]	; (398e0 <clear_event_registrations+0x160>)
   3985e:	f002 feb9 	bl	3c5d4 <printk>
   39862:	215d      	movs	r1, #93	; 0x5d
   39864:	481c      	ldr	r0, [pc, #112]	; (398d8 <clear_event_registrations+0x158>)
   39866:	f002 fefb 	bl	3c660 <assert_post_action>
   3986a:	f387 8811 	msr	BASEPRI, r7
   3986e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   39872:	f04f 0320 	mov.w	r3, #32
   39876:	f3ef 8711 	mrs	r7, BASEPRI
   3987a:	f383 8811 	msr	BASEPRI, r3
   3987e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39882:	4814      	ldr	r0, [pc, #80]	; (398d4 <clear_event_registrations+0x154>)
   39884:	f7ff f938 	bl	38af8 <z_spin_lock_valid>
   39888:	b968      	cbnz	r0, 398a6 <clear_event_registrations+0x126>
   3988a:	234a      	movs	r3, #74	; 0x4a
   3988c:	4a12      	ldr	r2, [pc, #72]	; (398d8 <clear_event_registrations+0x158>)
   3988e:	4915      	ldr	r1, [pc, #84]	; (398e4 <clear_event_registrations+0x164>)
   39890:	4630      	mov	r0, r6
   39892:	f002 fe9f 	bl	3c5d4 <printk>
   39896:	490f      	ldr	r1, [pc, #60]	; (398d4 <clear_event_registrations+0x154>)
   39898:	4813      	ldr	r0, [pc, #76]	; (398e8 <clear_event_registrations+0x168>)
   3989a:	f002 fe9b 	bl	3c5d4 <printk>
   3989e:	214a      	movs	r1, #74	; 0x4a
   398a0:	480d      	ldr	r0, [pc, #52]	; (398d8 <clear_event_registrations+0x158>)
   398a2:	f002 fedd 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   398a6:	480b      	ldr	r0, [pc, #44]	; (398d4 <clear_event_registrations+0x154>)
   398a8:	f7ff f944 	bl	38b34 <z_spin_lock_set_owner>
	return k;
   398ac:	3c14      	subs	r4, #20
   398ae:	e772      	b.n	39796 <clear_event_registrations+0x16>
   398b0:	00046b6b 	.word	0x00046b6b
   398b4:	00041757 	.word	0x00041757
   398b8:	00046a1e 	.word	0x00046a1e
   398bc:	00046a38 	.word	0x00046a38
   398c0:	00046a4d 	.word	0x00046a4d
   398c4:	00046a69 	.word	0x00046a69
   398c8:	00046a7a 	.word	0x00046a7a
   398cc:	00046a97 	.word	0x00046a97
   398d0:	00046aae 	.word	0x00046aae
   398d4:	20029484 	.word	0x20029484
   398d8:	00042269 	.word	0x00042269
   398dc:	000422b5 	.word	0x000422b5
   398e0:	000422cc 	.word	0x000422cc
   398e4:	00042288 	.word	0x00042288
   398e8:	0004229d 	.word	0x0004229d
   398ec:	00046834 	.word	0x00046834

000398f0 <register_events>:
{
   398f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   398f4:	2700      	movs	r7, #0
{
   398f6:	468a      	mov	sl, r1
   398f8:	4615      	mov	r5, r2
   398fa:	4604      	mov	r4, r0
	int events_registered = 0;
   398fc:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   398fe:	4e69      	ldr	r6, [pc, #420]	; (39aa4 <register_events+0x1b4>)
   39900:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 39ae4 <register_events+0x1f4>
{
   39904:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   39906:	4557      	cmp	r7, sl
   39908:	db03      	blt.n	39912 <register_events+0x22>
}
   3990a:	4648      	mov	r0, r9
   3990c:	b003      	add	sp, #12
   3990e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39912:	f04f 0320 	mov.w	r3, #32
   39916:	f3ef 8b11 	mrs	fp, BASEPRI
   3991a:	f383 8811 	msr	BASEPRI, r3
   3991e:	f3bf 8f6f 	isb	sy
   39922:	4630      	mov	r0, r6
   39924:	f7ff f8e8 	bl	38af8 <z_spin_lock_valid>
   39928:	b968      	cbnz	r0, 39946 <register_events+0x56>
   3992a:	234a      	movs	r3, #74	; 0x4a
   3992c:	4642      	mov	r2, r8
   3992e:	495e      	ldr	r1, [pc, #376]	; (39aa8 <register_events+0x1b8>)
   39930:	485e      	ldr	r0, [pc, #376]	; (39aac <register_events+0x1bc>)
   39932:	f002 fe4f 	bl	3c5d4 <printk>
   39936:	4631      	mov	r1, r6
   39938:	485d      	ldr	r0, [pc, #372]	; (39ab0 <register_events+0x1c0>)
   3993a:	f002 fe4b 	bl	3c5d4 <printk>
   3993e:	214a      	movs	r1, #74	; 0x4a
   39940:	4640      	mov	r0, r8
   39942:	f002 fe8d 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   39946:	4630      	mov	r0, r6
   39948:	f7ff f8f4 	bl	38b34 <z_spin_lock_set_owner>
	switch (event->type) {
   3994c:	7b63      	ldrb	r3, [r4, #13]
   3994e:	f003 030f 	and.w	r3, r3, #15
   39952:	2b04      	cmp	r3, #4
   39954:	d844      	bhi.n	399e0 <register_events+0xf0>
   39956:	e8df f003 	tbb	[pc, r3]
   3995a:	3d2d      	.short	0x3d2d
   3995c:	4303      	.short	0x4303
   3995e:	2a          	.byte	0x2a
   3995f:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   39960:	6923      	ldr	r3, [r4, #16]
   39962:	689b      	ldr	r3, [r3, #8]
   39964:	b333      	cbz	r3, 399b4 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   39966:	2202      	movs	r2, #2
	event->poller = NULL;
   39968:	2100      	movs	r1, #0
	event->state |= state;
   3996a:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   3996c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   3996e:	f3c3 3004 	ubfx	r0, r3, #12, #5
   39972:	4302      	orrs	r2, r0
   39974:	f362 3310 	bfi	r3, r2, #12, #5
   39978:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   3997a:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3997c:	4630      	mov	r0, r6
   3997e:	f7ff f8c9 	bl	38b14 <z_spin_unlock_valid>
   39982:	b968      	cbnz	r0, 399a0 <register_events+0xb0>
   39984:	235d      	movs	r3, #93	; 0x5d
   39986:	4642      	mov	r2, r8
   39988:	494a      	ldr	r1, [pc, #296]	; (39ab4 <register_events+0x1c4>)
   3998a:	4848      	ldr	r0, [pc, #288]	; (39aac <register_events+0x1bc>)
   3998c:	f002 fe22 	bl	3c5d4 <printk>
   39990:	4631      	mov	r1, r6
   39992:	4849      	ldr	r0, [pc, #292]	; (39ab8 <register_events+0x1c8>)
   39994:	f002 fe1e 	bl	3c5d4 <printk>
   39998:	215d      	movs	r1, #93	; 0x5d
   3999a:	4640      	mov	r0, r8
   3999c:	f002 fe60 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   399a0:	f38b 8811 	msr	BASEPRI, fp
   399a4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   399a8:	3701      	adds	r7, #1
   399aa:	3414      	adds	r4, #20
   399ac:	e7ab      	b.n	39906 <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   399ae:	6923      	ldr	r3, [r4, #16]
   399b0:	681b      	ldr	r3, [r3, #0]
   399b2:	bb33      	cbnz	r3, 39a02 <register_events+0x112>
		} else if (!just_check && poller->is_polling) {
   399b4:	9b01      	ldr	r3, [sp, #4]
   399b6:	2b00      	cmp	r3, #0
   399b8:	d1e0      	bne.n	3997c <register_events+0x8c>
   399ba:	782b      	ldrb	r3, [r5, #0]
   399bc:	2b00      	cmp	r3, #0
   399be:	d0dd      	beq.n	3997c <register_events+0x8c>
	switch (event->type) {
   399c0:	7b63      	ldrb	r3, [r4, #13]
   399c2:	f003 030f 	and.w	r3, r3, #15
   399c6:	2b04      	cmp	r3, #4
   399c8:	d85d      	bhi.n	39a86 <register_events+0x196>
   399ca:	e8df f003 	tbb	[pc, r3]
   399ce:	4931      	.short	0x4931
   399d0:	5c1c      	.short	0x5c1c
   399d2:	35          	.byte	0x35
   399d3:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   399d4:	6923      	ldr	r3, [r4, #16]
   399d6:	689b      	ldr	r3, [r3, #8]
   399d8:	2b00      	cmp	r3, #0
   399da:	d0eb      	beq.n	399b4 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   399dc:	2201      	movs	r2, #1
   399de:	e7c3      	b.n	39968 <register_events+0x78>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   399e0:	2350      	movs	r3, #80	; 0x50
   399e2:	4a36      	ldr	r2, [pc, #216]	; (39abc <register_events+0x1cc>)
   399e4:	4936      	ldr	r1, [pc, #216]	; (39ac0 <register_events+0x1d0>)
   399e6:	4831      	ldr	r0, [pc, #196]	; (39aac <register_events+0x1bc>)
   399e8:	f002 fdf4 	bl	3c5d4 <printk>
   399ec:	7b61      	ldrb	r1, [r4, #13]
   399ee:	4835      	ldr	r0, [pc, #212]	; (39ac4 <register_events+0x1d4>)
   399f0:	f001 010f 	and.w	r1, r1, #15
   399f4:	f002 fdee 	bl	3c5d4 <printk>
   399f8:	2150      	movs	r1, #80	; 0x50
   399fa:	4830      	ldr	r0, [pc, #192]	; (39abc <register_events+0x1cc>)
   399fc:	f002 fe30 	bl	3c660 <assert_post_action>
		break;
   39a00:	e7d8      	b.n	399b4 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   39a02:	2204      	movs	r2, #4
   39a04:	e7b0      	b.n	39968 <register_events+0x78>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   39a06:	6923      	ldr	r3, [r4, #16]
   39a08:	b963      	cbnz	r3, 39a24 <register_events+0x134>
   39a0a:	492f      	ldr	r1, [pc, #188]	; (39ac8 <register_events+0x1d8>)
   39a0c:	2375      	movs	r3, #117	; 0x75
   39a0e:	4a2b      	ldr	r2, [pc, #172]	; (39abc <register_events+0x1cc>)
   39a10:	4826      	ldr	r0, [pc, #152]	; (39aac <register_events+0x1bc>)
   39a12:	f002 fddf 	bl	3c5d4 <printk>
   39a16:	482d      	ldr	r0, [pc, #180]	; (39acc <register_events+0x1dc>)
   39a18:	f002 fddc 	bl	3c5d4 <printk>
   39a1c:	2175      	movs	r1, #117	; 0x75
   39a1e:	4827      	ldr	r0, [pc, #156]	; (39abc <register_events+0x1cc>)
   39a20:	f002 fe1e 	bl	3c660 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   39a24:	462a      	mov	r2, r5
   39a26:	4621      	mov	r1, r4
   39a28:	6920      	ldr	r0, [r4, #16]
   39a2a:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   39a2c:	f005 f8f0 	bl	3ec10 <add_event>
	event->poller = poller;
   39a30:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   39a32:	f109 0901 	add.w	r9, r9, #1
   39a36:	e7a1      	b.n	3997c <register_events+0x8c>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   39a38:	6923      	ldr	r3, [r4, #16]
   39a3a:	b963      	cbnz	r3, 39a56 <register_events+0x166>
   39a3c:	4924      	ldr	r1, [pc, #144]	; (39ad0 <register_events+0x1e0>)
   39a3e:	2379      	movs	r3, #121	; 0x79
   39a40:	4a1e      	ldr	r2, [pc, #120]	; (39abc <register_events+0x1cc>)
   39a42:	481a      	ldr	r0, [pc, #104]	; (39aac <register_events+0x1bc>)
   39a44:	f002 fdc6 	bl	3c5d4 <printk>
   39a48:	4822      	ldr	r0, [pc, #136]	; (39ad4 <register_events+0x1e4>)
   39a4a:	f002 fdc3 	bl	3c5d4 <printk>
   39a4e:	2179      	movs	r1, #121	; 0x79
   39a50:	481a      	ldr	r0, [pc, #104]	; (39abc <register_events+0x1cc>)
   39a52:	f002 fe05 	bl	3c660 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   39a56:	6920      	ldr	r0, [r4, #16]
   39a58:	462a      	mov	r2, r5
   39a5a:	4621      	mov	r1, r4
   39a5c:	300c      	adds	r0, #12
   39a5e:	e7e5      	b.n	39a2c <register_events+0x13c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   39a60:	6923      	ldr	r3, [r4, #16]
   39a62:	b963      	cbnz	r3, 39a7e <register_events+0x18e>
   39a64:	491c      	ldr	r1, [pc, #112]	; (39ad8 <register_events+0x1e8>)
   39a66:	237d      	movs	r3, #125	; 0x7d
   39a68:	4a14      	ldr	r2, [pc, #80]	; (39abc <register_events+0x1cc>)
   39a6a:	4810      	ldr	r0, [pc, #64]	; (39aac <register_events+0x1bc>)
   39a6c:	f002 fdb2 	bl	3c5d4 <printk>
   39a70:	481a      	ldr	r0, [pc, #104]	; (39adc <register_events+0x1ec>)
   39a72:	f002 fdaf 	bl	3c5d4 <printk>
   39a76:	217d      	movs	r1, #125	; 0x7d
   39a78:	4810      	ldr	r0, [pc, #64]	; (39abc <register_events+0x1cc>)
   39a7a:	f002 fdf1 	bl	3c660 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   39a7e:	462a      	mov	r2, r5
   39a80:	4621      	mov	r1, r4
   39a82:	6920      	ldr	r0, [r4, #16]
   39a84:	e7d2      	b.n	39a2c <register_events+0x13c>
		__ASSERT(false, "invalid event type\n");
   39a86:	2384      	movs	r3, #132	; 0x84
   39a88:	4a0c      	ldr	r2, [pc, #48]	; (39abc <register_events+0x1cc>)
   39a8a:	490d      	ldr	r1, [pc, #52]	; (39ac0 <register_events+0x1d0>)
   39a8c:	4807      	ldr	r0, [pc, #28]	; (39aac <register_events+0x1bc>)
   39a8e:	f002 fda1 	bl	3c5d4 <printk>
   39a92:	4813      	ldr	r0, [pc, #76]	; (39ae0 <register_events+0x1f0>)
   39a94:	f002 fd9e 	bl	3c5d4 <printk>
   39a98:	2184      	movs	r1, #132	; 0x84
   39a9a:	4808      	ldr	r0, [pc, #32]	; (39abc <register_events+0x1cc>)
   39a9c:	f002 fde0 	bl	3c660 <assert_post_action>
		break;
   39aa0:	e7c6      	b.n	39a30 <register_events+0x140>
   39aa2:	bf00      	nop
   39aa4:	20029484 	.word	0x20029484
   39aa8:	00042288 	.word	0x00042288
   39aac:	00041757 	.word	0x00041757
   39ab0:	0004229d 	.word	0x0004229d
   39ab4:	000422b5 	.word	0x000422b5
   39ab8:	000422cc 	.word	0x000422cc
   39abc:	00046b6b 	.word	0x00046b6b
   39ac0:	00046834 	.word	0x00046834
   39ac4:	00046bba 	.word	0x00046bba
   39ac8:	00046a1e 	.word	0x00046a1e
   39acc:	00046a38 	.word	0x00046a38
   39ad0:	00046a4d 	.word	0x00046a4d
   39ad4:	00046a69 	.word	0x00046a69
   39ad8:	00046a7a 	.word	0x00046a7a
   39adc:	00046a97 	.word	0x00046a97
   39ae0:	00046aae 	.word	0x00046aae
   39ae4:	00042269 	.word	0x00042269

00039ae8 <k_poll_event_init>:
{
   39ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39aea:	4604      	mov	r4, r0
   39aec:	460f      	mov	r7, r1
   39aee:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   39af0:	4616      	mov	r6, r2
   39af2:	b162      	cbz	r2, 39b0e <k_poll_event_init+0x26>
   39af4:	491c      	ldr	r1, [pc, #112]	; (39b68 <k_poll_event_init+0x80>)
   39af6:	232a      	movs	r3, #42	; 0x2a
   39af8:	4a1c      	ldr	r2, [pc, #112]	; (39b6c <k_poll_event_init+0x84>)
   39afa:	481d      	ldr	r0, [pc, #116]	; (39b70 <k_poll_event_init+0x88>)
   39afc:	f002 fd6a 	bl	3c5d4 <printk>
   39b00:	481c      	ldr	r0, [pc, #112]	; (39b74 <k_poll_event_init+0x8c>)
   39b02:	f002 fd67 	bl	3c5d4 <printk>
   39b06:	212a      	movs	r1, #42	; 0x2a
   39b08:	4818      	ldr	r0, [pc, #96]	; (39b6c <k_poll_event_init+0x84>)
   39b0a:	f002 fda9 	bl	3c660 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   39b0e:	2f0f      	cmp	r7, #15
   39b10:	d90c      	bls.n	39b2c <k_poll_event_init+0x44>
   39b12:	4919      	ldr	r1, [pc, #100]	; (39b78 <k_poll_event_init+0x90>)
   39b14:	232b      	movs	r3, #43	; 0x2b
   39b16:	4a15      	ldr	r2, [pc, #84]	; (39b6c <k_poll_event_init+0x84>)
   39b18:	4815      	ldr	r0, [pc, #84]	; (39b70 <k_poll_event_init+0x88>)
   39b1a:	f002 fd5b 	bl	3c5d4 <printk>
   39b1e:	4817      	ldr	r0, [pc, #92]	; (39b7c <k_poll_event_init+0x94>)
   39b20:	f002 fd58 	bl	3c5d4 <printk>
   39b24:	212b      	movs	r1, #43	; 0x2b
   39b26:	4811      	ldr	r0, [pc, #68]	; (39b6c <k_poll_event_init+0x84>)
   39b28:	f002 fd9a 	bl	3c660 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   39b2c:	b965      	cbnz	r5, 39b48 <k_poll_event_init+0x60>
   39b2e:	4914      	ldr	r1, [pc, #80]	; (39b80 <k_poll_event_init+0x98>)
   39b30:	232c      	movs	r3, #44	; 0x2c
   39b32:	4a0e      	ldr	r2, [pc, #56]	; (39b6c <k_poll_event_init+0x84>)
   39b34:	480e      	ldr	r0, [pc, #56]	; (39b70 <k_poll_event_init+0x88>)
   39b36:	f002 fd4d 	bl	3c5d4 <printk>
   39b3a:	4812      	ldr	r0, [pc, #72]	; (39b84 <k_poll_event_init+0x9c>)
   39b3c:	f002 fd4a 	bl	3c5d4 <printk>
   39b40:	212c      	movs	r1, #44	; 0x2c
   39b42:	480a      	ldr	r0, [pc, #40]	; (39b6c <k_poll_event_init+0x84>)
   39b44:	f002 fd8c 	bl	3c660 <assert_post_action>
	event->type = type;
   39b48:	7b63      	ldrb	r3, [r4, #13]
   39b4a:	f367 0303 	bfi	r3, r7, #0, #4
   39b4e:	7363      	strb	r3, [r4, #13]
	event->mode = mode;
   39b50:	7ba3      	ldrb	r3, [r4, #14]
   39b52:	f366 0341 	bfi	r3, r6, #1, #1
   39b56:	73a3      	strb	r3, [r4, #14]
	event->poller = NULL;
   39b58:	2300      	movs	r3, #0
	event->state = K_POLL_STATE_NOT_READY;
   39b5a:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   39b5c:	60a3      	str	r3, [r4, #8]
	event->state = K_POLL_STATE_NOT_READY;
   39b5e:	4b0a      	ldr	r3, [pc, #40]	; (39b88 <k_poll_event_init+0xa0>)
   39b60:	4013      	ands	r3, r2
	event->obj = obj;
   39b62:	e9c4 3503 	strd	r3, r5, [r4, #12]
}
   39b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39b68:	00046ac4 	.word	0x00046ac4
   39b6c:	00046b6b 	.word	0x00046b6b
   39b70:	00041757 	.word	0x00041757
   39b74:	00046ae4 	.word	0x00046ae4
   39b78:	00046b0a 	.word	0x00046b0a
   39b7c:	00046b2e 	.word	0x00046b2e
   39b80:	00046b3e 	.word	0x00046b3e
   39b84:	00046b51 	.word	0x00046b51
   39b88:	00020fff 	.word	0x00020fff

00039b8c <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   39b8c:	2301      	movs	r3, #1
{
   39b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
   39b90:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   39b92:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   39b96:	4b70      	ldr	r3, [pc, #448]	; (39d58 <z_impl_k_poll+0x1cc>)
{
   39b98:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   39b9a:	689b      	ldr	r3, [r3, #8]
{
   39b9c:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   39b9e:	9304      	str	r3, [sp, #16]
   39ba0:	4b6e      	ldr	r3, [pc, #440]	; (39d5c <z_impl_k_poll+0x1d0>)
{
   39ba2:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   39ba4:	9305      	str	r3, [sp, #20]
   39ba6:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   39baa:	b163      	cbz	r3, 39bc6 <z_impl_k_poll+0x3a>
   39bac:	496c      	ldr	r1, [pc, #432]	; (39d60 <z_impl_k_poll+0x1d4>)
   39bae:	23ff      	movs	r3, #255	; 0xff
   39bb0:	4a6c      	ldr	r2, [pc, #432]	; (39d64 <z_impl_k_poll+0x1d8>)
   39bb2:	486d      	ldr	r0, [pc, #436]	; (39d68 <z_impl_k_poll+0x1dc>)
   39bb4:	f002 fd0e 	bl	3c5d4 <printk>
   39bb8:	486c      	ldr	r0, [pc, #432]	; (39d6c <z_impl_k_poll+0x1e0>)
   39bba:	f002 fd0b 	bl	3c5d4 <printk>
   39bbe:	21ff      	movs	r1, #255	; 0xff
   39bc0:	4868      	ldr	r0, [pc, #416]	; (39d64 <z_impl_k_poll+0x1d8>)
   39bc2:	f002 fd4d 	bl	3c660 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   39bc6:	b974      	cbnz	r4, 39be6 <z_impl_k_poll+0x5a>
   39bc8:	4969      	ldr	r1, [pc, #420]	; (39d70 <z_impl_k_poll+0x1e4>)
   39bca:	f44f 7380 	mov.w	r3, #256	; 0x100
   39bce:	4a65      	ldr	r2, [pc, #404]	; (39d64 <z_impl_k_poll+0x1d8>)
   39bd0:	4865      	ldr	r0, [pc, #404]	; (39d68 <z_impl_k_poll+0x1dc>)
   39bd2:	f002 fcff 	bl	3c5d4 <printk>
   39bd6:	4867      	ldr	r0, [pc, #412]	; (39d74 <z_impl_k_poll+0x1e8>)
   39bd8:	f002 fcfc 	bl	3c5d4 <printk>
   39bdc:	f44f 7180 	mov.w	r1, #256	; 0x100
   39be0:	4860      	ldr	r0, [pc, #384]	; (39d64 <z_impl_k_poll+0x1d8>)
   39be2:	f002 fd3d 	bl	3c660 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   39be6:	2d00      	cmp	r5, #0
   39be8:	da0e      	bge.n	39c08 <z_impl_k_poll+0x7c>
   39bea:	4963      	ldr	r1, [pc, #396]	; (39d78 <z_impl_k_poll+0x1ec>)
   39bec:	f240 1301 	movw	r3, #257	; 0x101
   39bf0:	4a5c      	ldr	r2, [pc, #368]	; (39d64 <z_impl_k_poll+0x1d8>)
   39bf2:	485d      	ldr	r0, [pc, #372]	; (39d68 <z_impl_k_poll+0x1dc>)
   39bf4:	f002 fcee 	bl	3c5d4 <printk>
   39bf8:	4860      	ldr	r0, [pc, #384]	; (39d7c <z_impl_k_poll+0x1f0>)
   39bfa:	f002 fceb 	bl	3c5d4 <printk>
   39bfe:	f240 1101 	movw	r1, #257	; 0x101
   39c02:	4858      	ldr	r0, [pc, #352]	; (39d64 <z_impl_k_poll+0x1d8>)
   39c04:	f002 fd2c 	bl	3c660 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   39c08:	fab6 f386 	clz	r3, r6
   39c0c:	aa03      	add	r2, sp, #12
   39c0e:	095b      	lsrs	r3, r3, #5
   39c10:	4629      	mov	r1, r5
   39c12:	4620      	mov	r0, r4
   39c14:	f7ff fe6c 	bl	398f0 <register_events>
   39c18:	4607      	mov	r7, r0
	__asm__ volatile(
   39c1a:	f04f 0320 	mov.w	r3, #32
   39c1e:	f3ef 8511 	mrs	r5, BASEPRI
   39c22:	f383 8811 	msr	BASEPRI, r3
   39c26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39c2a:	4855      	ldr	r0, [pc, #340]	; (39d80 <z_impl_k_poll+0x1f4>)
   39c2c:	f7fe ff64 	bl	38af8 <z_spin_lock_valid>
   39c30:	b968      	cbnz	r0, 39c4e <z_impl_k_poll+0xc2>
   39c32:	234a      	movs	r3, #74	; 0x4a
   39c34:	4a53      	ldr	r2, [pc, #332]	; (39d84 <z_impl_k_poll+0x1f8>)
   39c36:	4954      	ldr	r1, [pc, #336]	; (39d88 <z_impl_k_poll+0x1fc>)
   39c38:	484b      	ldr	r0, [pc, #300]	; (39d68 <z_impl_k_poll+0x1dc>)
   39c3a:	f002 fccb 	bl	3c5d4 <printk>
   39c3e:	4950      	ldr	r1, [pc, #320]	; (39d80 <z_impl_k_poll+0x1f4>)
   39c40:	4852      	ldr	r0, [pc, #328]	; (39d8c <z_impl_k_poll+0x200>)
   39c42:	f002 fcc7 	bl	3c5d4 <printk>
   39c46:	214a      	movs	r1, #74	; 0x4a
   39c48:	484e      	ldr	r0, [pc, #312]	; (39d84 <z_impl_k_poll+0x1f8>)
   39c4a:	f002 fd09 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   39c4e:	484c      	ldr	r0, [pc, #304]	; (39d80 <z_impl_k_poll+0x1f4>)
   39c50:	f7fe ff70 	bl	38b34 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   39c54:	f89d 300c 	ldrb.w	r3, [sp, #12]
   39c58:	b9f3      	cbnz	r3, 39c98 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
   39c5a:	4620      	mov	r0, r4
   39c5c:	462a      	mov	r2, r5
   39c5e:	4639      	mov	r1, r7
   39c60:	f7ff fd8e 	bl	39780 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39c64:	4846      	ldr	r0, [pc, #280]	; (39d80 <z_impl_k_poll+0x1f4>)
   39c66:	f7fe ff55 	bl	38b14 <z_spin_unlock_valid>
   39c6a:	b968      	cbnz	r0, 39c88 <z_impl_k_poll+0xfc>
   39c6c:	235d      	movs	r3, #93	; 0x5d
   39c6e:	4a45      	ldr	r2, [pc, #276]	; (39d84 <z_impl_k_poll+0x1f8>)
   39c70:	4947      	ldr	r1, [pc, #284]	; (39d90 <z_impl_k_poll+0x204>)
   39c72:	483d      	ldr	r0, [pc, #244]	; (39d68 <z_impl_k_poll+0x1dc>)
   39c74:	f002 fcae 	bl	3c5d4 <printk>
   39c78:	4941      	ldr	r1, [pc, #260]	; (39d80 <z_impl_k_poll+0x1f4>)
   39c7a:	4846      	ldr	r0, [pc, #280]	; (39d94 <z_impl_k_poll+0x208>)
   39c7c:	f002 fcaa 	bl	3c5d4 <printk>
   39c80:	215d      	movs	r1, #93	; 0x5d
   39c82:	4840      	ldr	r0, [pc, #256]	; (39d84 <z_impl_k_poll+0x1f8>)
   39c84:	f002 fcec 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   39c88:	f385 8811 	msr	BASEPRI, r5
   39c8c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   39c90:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   39c92:	4628      	mov	r0, r5
   39c94:	b007      	add	sp, #28
   39c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   39c98:	2300      	movs	r3, #0
   39c9a:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   39c9e:	b9c6      	cbnz	r6, 39cd2 <z_impl_k_poll+0x146>
   39ca0:	4837      	ldr	r0, [pc, #220]	; (39d80 <z_impl_k_poll+0x1f4>)
   39ca2:	f7fe ff37 	bl	38b14 <z_spin_unlock_valid>
   39ca6:	b968      	cbnz	r0, 39cc4 <z_impl_k_poll+0x138>
   39ca8:	235d      	movs	r3, #93	; 0x5d
   39caa:	4a36      	ldr	r2, [pc, #216]	; (39d84 <z_impl_k_poll+0x1f8>)
   39cac:	4938      	ldr	r1, [pc, #224]	; (39d90 <z_impl_k_poll+0x204>)
   39cae:	482e      	ldr	r0, [pc, #184]	; (39d68 <z_impl_k_poll+0x1dc>)
   39cb0:	f002 fc90 	bl	3c5d4 <printk>
   39cb4:	4932      	ldr	r1, [pc, #200]	; (39d80 <z_impl_k_poll+0x1f4>)
   39cb6:	4837      	ldr	r0, [pc, #220]	; (39d94 <z_impl_k_poll+0x208>)
   39cb8:	f002 fc8c 	bl	3c5d4 <printk>
   39cbc:	215d      	movs	r1, #93	; 0x5d
   39cbe:	4831      	ldr	r0, [pc, #196]	; (39d84 <z_impl_k_poll+0x1f8>)
   39cc0:	f002 fcce 	bl	3c660 <assert_post_action>
   39cc4:	f385 8811 	msr	BASEPRI, r5
   39cc8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   39ccc:	f06f 050a 	mvn.w	r5, #10
   39cd0:	e7df      	b.n	39c92 <z_impl_k_poll+0x106>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   39cd2:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   39cd4:	4629      	mov	r1, r5
   39cd6:	4633      	mov	r3, r6
   39cd8:	4829      	ldr	r0, [pc, #164]	; (39d80 <z_impl_k_poll+0x1f4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   39cda:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   39cde:	f7fe fb31 	bl	38344 <z_pend_curr>
   39ce2:	4605      	mov	r5, r0
	__asm__ volatile(
   39ce4:	f04f 0320 	mov.w	r3, #32
   39ce8:	f3ef 8611 	mrs	r6, BASEPRI
   39cec:	f383 8811 	msr	BASEPRI, r3
   39cf0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39cf4:	4822      	ldr	r0, [pc, #136]	; (39d80 <z_impl_k_poll+0x1f4>)
   39cf6:	f7fe feff 	bl	38af8 <z_spin_lock_valid>
   39cfa:	b968      	cbnz	r0, 39d18 <z_impl_k_poll+0x18c>
   39cfc:	234a      	movs	r3, #74	; 0x4a
   39cfe:	4a21      	ldr	r2, [pc, #132]	; (39d84 <z_impl_k_poll+0x1f8>)
   39d00:	4921      	ldr	r1, [pc, #132]	; (39d88 <z_impl_k_poll+0x1fc>)
   39d02:	4819      	ldr	r0, [pc, #100]	; (39d68 <z_impl_k_poll+0x1dc>)
   39d04:	f002 fc66 	bl	3c5d4 <printk>
   39d08:	491d      	ldr	r1, [pc, #116]	; (39d80 <z_impl_k_poll+0x1f4>)
   39d0a:	4820      	ldr	r0, [pc, #128]	; (39d8c <z_impl_k_poll+0x200>)
   39d0c:	f002 fc62 	bl	3c5d4 <printk>
   39d10:	214a      	movs	r1, #74	; 0x4a
   39d12:	481c      	ldr	r0, [pc, #112]	; (39d84 <z_impl_k_poll+0x1f8>)
   39d14:	f002 fca4 	bl	3c660 <assert_post_action>
	z_spin_lock_set_owner(l);
   39d18:	4819      	ldr	r0, [pc, #100]	; (39d80 <z_impl_k_poll+0x1f4>)
   39d1a:	f7fe ff0b 	bl	38b34 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   39d1e:	4620      	mov	r0, r4
   39d20:	4632      	mov	r2, r6
   39d22:	4639      	mov	r1, r7
   39d24:	f7ff fd2c 	bl	39780 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39d28:	4815      	ldr	r0, [pc, #84]	; (39d80 <z_impl_k_poll+0x1f4>)
   39d2a:	f7fe fef3 	bl	38b14 <z_spin_unlock_valid>
   39d2e:	b968      	cbnz	r0, 39d4c <z_impl_k_poll+0x1c0>
   39d30:	235d      	movs	r3, #93	; 0x5d
   39d32:	4a14      	ldr	r2, [pc, #80]	; (39d84 <z_impl_k_poll+0x1f8>)
   39d34:	4916      	ldr	r1, [pc, #88]	; (39d90 <z_impl_k_poll+0x204>)
   39d36:	480c      	ldr	r0, [pc, #48]	; (39d68 <z_impl_k_poll+0x1dc>)
   39d38:	f002 fc4c 	bl	3c5d4 <printk>
   39d3c:	4910      	ldr	r1, [pc, #64]	; (39d80 <z_impl_k_poll+0x1f4>)
   39d3e:	4815      	ldr	r0, [pc, #84]	; (39d94 <z_impl_k_poll+0x208>)
   39d40:	f002 fc48 	bl	3c5d4 <printk>
   39d44:	215d      	movs	r1, #93	; 0x5d
   39d46:	480f      	ldr	r0, [pc, #60]	; (39d84 <z_impl_k_poll+0x1f8>)
   39d48:	f002 fc8a 	bl	3c660 <assert_post_action>
	__asm__ volatile(
   39d4c:	f386 8811 	msr	BASEPRI, r6
   39d50:	f3bf 8f6f 	isb	sy
	return swap_rc;
   39d54:	e79d      	b.n	39c92 <z_impl_k_poll+0x106>
   39d56:	bf00      	nop
   39d58:	20029368 	.word	0x20029368
   39d5c:	00039711 	.word	0x00039711
   39d60:	000467d4 	.word	0x000467d4
   39d64:	00046b6b 	.word	0x00046b6b
   39d68:	00041757 	.word	0x00041757
   39d6c:	0004311f 	.word	0x0004311f
   39d70:	00046bd7 	.word	0x00046bd7
   39d74:	00046bed 	.word	0x00046bed
   39d78:	00046bfc 	.word	0x00046bfc
   39d7c:	00046c0c 	.word	0x00046c0c
   39d80:	20029484 	.word	0x20029484
   39d84:	00042269 	.word	0x00042269
   39d88:	00042288 	.word	0x00042288
   39d8c:	0004229d 	.word	0x0004229d
   39d90:	000422b5 	.word	0x000422b5
   39d94:	000422cc 	.word	0x000422cc

00039d98 <fabs>:
   39d98:	ec51 0b10 	vmov	r0, r1, d0
   39d9c:	ee10 2a10 	vmov	r2, s0
   39da0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   39da4:	ec43 2b10 	vmov	d0, r2, r3
   39da8:	4770      	bx	lr
   39daa:	bf00      	nop

00039dac <__assert_func>:
   39dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   39dae:	461c      	mov	r4, r3
   39db0:	4b09      	ldr	r3, [pc, #36]	; (39dd8 <__assert_func+0x2c>)
   39db2:	4605      	mov	r5, r0
   39db4:	681b      	ldr	r3, [r3, #0]
   39db6:	68d8      	ldr	r0, [r3, #12]
   39db8:	b152      	cbz	r2, 39dd0 <__assert_func+0x24>
   39dba:	4b08      	ldr	r3, [pc, #32]	; (39ddc <__assert_func+0x30>)
   39dbc:	9100      	str	r1, [sp, #0]
   39dbe:	4908      	ldr	r1, [pc, #32]	; (39de0 <__assert_func+0x34>)
   39dc0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   39dc4:	462b      	mov	r3, r5
   39dc6:	4622      	mov	r2, r4
   39dc8:	f000 f80e 	bl	39de8 <fiprintf>
   39dcc:	f005 fa0a 	bl	3f1e4 <abort>
   39dd0:	4b04      	ldr	r3, [pc, #16]	; (39de4 <__assert_func+0x38>)
   39dd2:	461a      	mov	r2, r3
   39dd4:	e7f2      	b.n	39dbc <__assert_func+0x10>
   39dd6:	bf00      	nop
   39dd8:	2003157c 	.word	0x2003157c
   39ddc:	00046c19 	.word	0x00046c19
   39de0:	00046c26 	.word	0x00046c26
   39de4:	00043121 	.word	0x00043121

00039de8 <fiprintf>:
   39de8:	b40e      	push	{r1, r2, r3}
   39dea:	b503      	push	{r0, r1, lr}
   39dec:	ab03      	add	r3, sp, #12
   39dee:	4601      	mov	r1, r0
   39df0:	4805      	ldr	r0, [pc, #20]	; (39e08 <fiprintf+0x20>)
   39df2:	f853 2b04 	ldr.w	r2, [r3], #4
   39df6:	6800      	ldr	r0, [r0, #0]
   39df8:	9301      	str	r3, [sp, #4]
   39dfa:	f000 f8bf 	bl	39f7c <_vfiprintf_r>
   39dfe:	b002      	add	sp, #8
   39e00:	f85d eb04 	ldr.w	lr, [sp], #4
   39e04:	b003      	add	sp, #12
   39e06:	4770      	bx	lr
   39e08:	2003157c 	.word	0x2003157c

00039e0c <malloc>:
   39e0c:	4b02      	ldr	r3, [pc, #8]	; (39e18 <malloc+0xc>)
   39e0e:	4601      	mov	r1, r0
   39e10:	6818      	ldr	r0, [r3, #0]
   39e12:	f000 b859 	b.w	39ec8 <_malloc_r>
   39e16:	bf00      	nop
   39e18:	2003157c 	.word	0x2003157c

00039e1c <free>:
   39e1c:	4b02      	ldr	r3, [pc, #8]	; (39e28 <free+0xc>)
   39e1e:	4601      	mov	r1, r0
   39e20:	6818      	ldr	r0, [r3, #0]
   39e22:	f000 b803 	b.w	39e2c <_free_r>
   39e26:	bf00      	nop
   39e28:	2003157c 	.word	0x2003157c

00039e2c <_free_r>:
   39e2c:	b538      	push	{r3, r4, r5, lr}
   39e2e:	4605      	mov	r5, r0
   39e30:	2900      	cmp	r1, #0
   39e32:	d045      	beq.n	39ec0 <_free_r+0x94>
   39e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
   39e38:	1f0c      	subs	r4, r1, #4
   39e3a:	2b00      	cmp	r3, #0
   39e3c:	bfb8      	it	lt
   39e3e:	18e4      	addlt	r4, r4, r3
   39e40:	f001 fc08 	bl	3b654 <__malloc_lock>
   39e44:	4a1f      	ldr	r2, [pc, #124]	; (39ec4 <_free_r+0x98>)
   39e46:	6813      	ldr	r3, [r2, #0]
   39e48:	4610      	mov	r0, r2
   39e4a:	b933      	cbnz	r3, 39e5a <_free_r+0x2e>
   39e4c:	6063      	str	r3, [r4, #4]
   39e4e:	6014      	str	r4, [r2, #0]
   39e50:	4628      	mov	r0, r5
   39e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   39e56:	f001 bc03 	b.w	3b660 <__malloc_unlock>
   39e5a:	42a3      	cmp	r3, r4
   39e5c:	d90c      	bls.n	39e78 <_free_r+0x4c>
   39e5e:	6821      	ldr	r1, [r4, #0]
   39e60:	1862      	adds	r2, r4, r1
   39e62:	4293      	cmp	r3, r2
   39e64:	bf02      	ittt	eq
   39e66:	681a      	ldreq	r2, [r3, #0]
   39e68:	685b      	ldreq	r3, [r3, #4]
   39e6a:	1852      	addeq	r2, r2, r1
   39e6c:	6063      	str	r3, [r4, #4]
   39e6e:	bf08      	it	eq
   39e70:	6022      	streq	r2, [r4, #0]
   39e72:	6004      	str	r4, [r0, #0]
   39e74:	e7ec      	b.n	39e50 <_free_r+0x24>
   39e76:	4613      	mov	r3, r2
   39e78:	685a      	ldr	r2, [r3, #4]
   39e7a:	b10a      	cbz	r2, 39e80 <_free_r+0x54>
   39e7c:	42a2      	cmp	r2, r4
   39e7e:	d9fa      	bls.n	39e76 <_free_r+0x4a>
   39e80:	6819      	ldr	r1, [r3, #0]
   39e82:	1858      	adds	r0, r3, r1
   39e84:	42a0      	cmp	r0, r4
   39e86:	d10b      	bne.n	39ea0 <_free_r+0x74>
   39e88:	6820      	ldr	r0, [r4, #0]
   39e8a:	4401      	add	r1, r0
   39e8c:	1858      	adds	r0, r3, r1
   39e8e:	6019      	str	r1, [r3, #0]
   39e90:	4282      	cmp	r2, r0
   39e92:	d1dd      	bne.n	39e50 <_free_r+0x24>
   39e94:	6810      	ldr	r0, [r2, #0]
   39e96:	6852      	ldr	r2, [r2, #4]
   39e98:	4401      	add	r1, r0
   39e9a:	605a      	str	r2, [r3, #4]
   39e9c:	6019      	str	r1, [r3, #0]
   39e9e:	e7d7      	b.n	39e50 <_free_r+0x24>
   39ea0:	d902      	bls.n	39ea8 <_free_r+0x7c>
   39ea2:	230c      	movs	r3, #12
   39ea4:	602b      	str	r3, [r5, #0]
   39ea6:	e7d3      	b.n	39e50 <_free_r+0x24>
   39ea8:	6820      	ldr	r0, [r4, #0]
   39eaa:	1821      	adds	r1, r4, r0
   39eac:	428a      	cmp	r2, r1
   39eae:	bf02      	ittt	eq
   39eb0:	6811      	ldreq	r1, [r2, #0]
   39eb2:	6852      	ldreq	r2, [r2, #4]
   39eb4:	1809      	addeq	r1, r1, r0
   39eb6:	6062      	str	r2, [r4, #4]
   39eb8:	bf08      	it	eq
   39eba:	6021      	streq	r1, [r4, #0]
   39ebc:	605c      	str	r4, [r3, #4]
   39ebe:	e7c7      	b.n	39e50 <_free_r+0x24>
   39ec0:	bd38      	pop	{r3, r4, r5, pc}
   39ec2:	bf00      	nop
   39ec4:	20029488 	.word	0x20029488

00039ec8 <_malloc_r>:
   39ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39eca:	1ccd      	adds	r5, r1, #3
   39ecc:	4606      	mov	r6, r0
   39ece:	f025 0503 	bic.w	r5, r5, #3
   39ed2:	3508      	adds	r5, #8
   39ed4:	2d0c      	cmp	r5, #12
   39ed6:	bf38      	it	cc
   39ed8:	250c      	movcc	r5, #12
   39eda:	2d00      	cmp	r5, #0
   39edc:	db01      	blt.n	39ee2 <_malloc_r+0x1a>
   39ede:	42a9      	cmp	r1, r5
   39ee0:	d903      	bls.n	39eea <_malloc_r+0x22>
   39ee2:	230c      	movs	r3, #12
   39ee4:	6033      	str	r3, [r6, #0]
   39ee6:	2000      	movs	r0, #0
   39ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39eea:	f001 fbb3 	bl	3b654 <__malloc_lock>
   39eee:	4921      	ldr	r1, [pc, #132]	; (39f74 <_malloc_r+0xac>)
   39ef0:	680a      	ldr	r2, [r1, #0]
   39ef2:	4614      	mov	r4, r2
   39ef4:	b99c      	cbnz	r4, 39f1e <_malloc_r+0x56>
   39ef6:	4f20      	ldr	r7, [pc, #128]	; (39f78 <_malloc_r+0xb0>)
   39ef8:	683b      	ldr	r3, [r7, #0]
   39efa:	b923      	cbnz	r3, 39f06 <_malloc_r+0x3e>
   39efc:	4621      	mov	r1, r4
   39efe:	4630      	mov	r0, r6
   39f00:	f000 fd02 	bl	3a908 <_sbrk_r>
   39f04:	6038      	str	r0, [r7, #0]
   39f06:	4629      	mov	r1, r5
   39f08:	4630      	mov	r0, r6
   39f0a:	f000 fcfd 	bl	3a908 <_sbrk_r>
   39f0e:	1c43      	adds	r3, r0, #1
   39f10:	d123      	bne.n	39f5a <_malloc_r+0x92>
   39f12:	230c      	movs	r3, #12
   39f14:	4630      	mov	r0, r6
   39f16:	6033      	str	r3, [r6, #0]
   39f18:	f001 fba2 	bl	3b660 <__malloc_unlock>
   39f1c:	e7e3      	b.n	39ee6 <_malloc_r+0x1e>
   39f1e:	6823      	ldr	r3, [r4, #0]
   39f20:	1b5b      	subs	r3, r3, r5
   39f22:	d417      	bmi.n	39f54 <_malloc_r+0x8c>
   39f24:	2b0b      	cmp	r3, #11
   39f26:	d903      	bls.n	39f30 <_malloc_r+0x68>
   39f28:	6023      	str	r3, [r4, #0]
   39f2a:	441c      	add	r4, r3
   39f2c:	6025      	str	r5, [r4, #0]
   39f2e:	e004      	b.n	39f3a <_malloc_r+0x72>
   39f30:	6863      	ldr	r3, [r4, #4]
   39f32:	42a2      	cmp	r2, r4
   39f34:	bf0c      	ite	eq
   39f36:	600b      	streq	r3, [r1, #0]
   39f38:	6053      	strne	r3, [r2, #4]
   39f3a:	4630      	mov	r0, r6
   39f3c:	f001 fb90 	bl	3b660 <__malloc_unlock>
   39f40:	f104 000b 	add.w	r0, r4, #11
   39f44:	1d23      	adds	r3, r4, #4
   39f46:	f020 0007 	bic.w	r0, r0, #7
   39f4a:	1ac2      	subs	r2, r0, r3
   39f4c:	d0cc      	beq.n	39ee8 <_malloc_r+0x20>
   39f4e:	1a1b      	subs	r3, r3, r0
   39f50:	50a3      	str	r3, [r4, r2]
   39f52:	e7c9      	b.n	39ee8 <_malloc_r+0x20>
   39f54:	4622      	mov	r2, r4
   39f56:	6864      	ldr	r4, [r4, #4]
   39f58:	e7cc      	b.n	39ef4 <_malloc_r+0x2c>
   39f5a:	1cc4      	adds	r4, r0, #3
   39f5c:	f024 0403 	bic.w	r4, r4, #3
   39f60:	42a0      	cmp	r0, r4
   39f62:	d0e3      	beq.n	39f2c <_malloc_r+0x64>
   39f64:	1a21      	subs	r1, r4, r0
   39f66:	4630      	mov	r0, r6
   39f68:	f000 fcce 	bl	3a908 <_sbrk_r>
   39f6c:	3001      	adds	r0, #1
   39f6e:	d1dd      	bne.n	39f2c <_malloc_r+0x64>
   39f70:	e7cf      	b.n	39f12 <_malloc_r+0x4a>
   39f72:	bf00      	nop
   39f74:	20029488 	.word	0x20029488
   39f78:	2002948c 	.word	0x2002948c

00039f7c <_vfiprintf_r>:
   39f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39f80:	460d      	mov	r5, r1
   39f82:	b09d      	sub	sp, #116	; 0x74
   39f84:	4614      	mov	r4, r2
   39f86:	461e      	mov	r6, r3
   39f88:	4607      	mov	r7, r0
   39f8a:	b118      	cbz	r0, 39f94 <_vfiprintf_r+0x18>
   39f8c:	6983      	ldr	r3, [r0, #24]
   39f8e:	b90b      	cbnz	r3, 39f94 <_vfiprintf_r+0x18>
   39f90:	f001 f86a 	bl	3b068 <__sinit>
   39f94:	4b85      	ldr	r3, [pc, #532]	; (3a1ac <_vfiprintf_r+0x230>)
   39f96:	429d      	cmp	r5, r3
   39f98:	d11b      	bne.n	39fd2 <_vfiprintf_r+0x56>
   39f9a:	687d      	ldr	r5, [r7, #4]
   39f9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   39f9e:	07d9      	lsls	r1, r3, #31
   39fa0:	d405      	bmi.n	39fae <_vfiprintf_r+0x32>
   39fa2:	89ab      	ldrh	r3, [r5, #12]
   39fa4:	059a      	lsls	r2, r3, #22
   39fa6:	d402      	bmi.n	39fae <_vfiprintf_r+0x32>
   39fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   39faa:	f005 faea 	bl	3f582 <__retarget_lock_acquire_recursive>
   39fae:	89ab      	ldrh	r3, [r5, #12]
   39fb0:	071b      	lsls	r3, r3, #28
   39fb2:	d501      	bpl.n	39fb8 <_vfiprintf_r+0x3c>
   39fb4:	692b      	ldr	r3, [r5, #16]
   39fb6:	b9eb      	cbnz	r3, 39ff4 <_vfiprintf_r+0x78>
   39fb8:	4629      	mov	r1, r5
   39fba:	4638      	mov	r0, r7
   39fbc:	f000 feb0 	bl	3ad20 <__swsetup_r>
   39fc0:	b1c0      	cbz	r0, 39ff4 <_vfiprintf_r+0x78>
   39fc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   39fc4:	07d8      	lsls	r0, r3, #31
   39fc6:	d50e      	bpl.n	39fe6 <_vfiprintf_r+0x6a>
   39fc8:	f04f 30ff 	mov.w	r0, #4294967295
   39fcc:	b01d      	add	sp, #116	; 0x74
   39fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39fd2:	4b77      	ldr	r3, [pc, #476]	; (3a1b0 <_vfiprintf_r+0x234>)
   39fd4:	429d      	cmp	r5, r3
   39fd6:	d101      	bne.n	39fdc <_vfiprintf_r+0x60>
   39fd8:	68bd      	ldr	r5, [r7, #8]
   39fda:	e7df      	b.n	39f9c <_vfiprintf_r+0x20>
   39fdc:	4b75      	ldr	r3, [pc, #468]	; (3a1b4 <_vfiprintf_r+0x238>)
   39fde:	429d      	cmp	r5, r3
   39fe0:	bf08      	it	eq
   39fe2:	68fd      	ldreq	r5, [r7, #12]
   39fe4:	e7da      	b.n	39f9c <_vfiprintf_r+0x20>
   39fe6:	89ab      	ldrh	r3, [r5, #12]
   39fe8:	0599      	lsls	r1, r3, #22
   39fea:	d4ed      	bmi.n	39fc8 <_vfiprintf_r+0x4c>
   39fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
   39fee:	f005 fac9 	bl	3f584 <__retarget_lock_release_recursive>
   39ff2:	e7e9      	b.n	39fc8 <_vfiprintf_r+0x4c>
   39ff4:	2300      	movs	r3, #0
   39ff6:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 3a1b8 <_vfiprintf_r+0x23c>
   39ffa:	f04f 0a01 	mov.w	sl, #1
   39ffe:	9603      	str	r6, [sp, #12]
   3a000:	9309      	str	r3, [sp, #36]	; 0x24
   3a002:	2320      	movs	r3, #32
   3a004:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3a008:	2330      	movs	r3, #48	; 0x30
   3a00a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3a00e:	4623      	mov	r3, r4
   3a010:	461e      	mov	r6, r3
   3a012:	f813 2b01 	ldrb.w	r2, [r3], #1
   3a016:	b10a      	cbz	r2, 3a01c <_vfiprintf_r+0xa0>
   3a018:	2a25      	cmp	r2, #37	; 0x25
   3a01a:	d1f9      	bne.n	3a010 <_vfiprintf_r+0x94>
   3a01c:	ebb6 0b04 	subs.w	fp, r6, r4
   3a020:	d00b      	beq.n	3a03a <_vfiprintf_r+0xbe>
   3a022:	465b      	mov	r3, fp
   3a024:	4622      	mov	r2, r4
   3a026:	4629      	mov	r1, r5
   3a028:	4638      	mov	r0, r7
   3a02a:	f004 fe8d 	bl	3ed48 <__sfputs_r>
   3a02e:	3001      	adds	r0, #1
   3a030:	f000 80a3 	beq.w	3a17a <_vfiprintf_r+0x1fe>
   3a034:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a036:	445b      	add	r3, fp
   3a038:	9309      	str	r3, [sp, #36]	; 0x24
   3a03a:	7833      	ldrb	r3, [r6, #0]
   3a03c:	2b00      	cmp	r3, #0
   3a03e:	f000 809c 	beq.w	3a17a <_vfiprintf_r+0x1fe>
   3a042:	2300      	movs	r3, #0
   3a044:	f04f 32ff 	mov.w	r2, #4294967295
   3a048:	3601      	adds	r6, #1
   3a04a:	9304      	str	r3, [sp, #16]
   3a04c:	9307      	str	r3, [sp, #28]
   3a04e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3a052:	931a      	str	r3, [sp, #104]	; 0x68
   3a054:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3a058:	4634      	mov	r4, r6
   3a05a:	2205      	movs	r2, #5
   3a05c:	4856      	ldr	r0, [pc, #344]	; (3a1b8 <_vfiprintf_r+0x23c>)
   3a05e:	f814 1b01 	ldrb.w	r1, [r4], #1
   3a062:	f004 fe16 	bl	3ec92 <memchr>
   3a066:	9b04      	ldr	r3, [sp, #16]
   3a068:	b9c0      	cbnz	r0, 3a09c <_vfiprintf_r+0x120>
   3a06a:	06da      	lsls	r2, r3, #27
   3a06c:	bf44      	itt	mi
   3a06e:	2220      	movmi	r2, #32
   3a070:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3a074:	0718      	lsls	r0, r3, #28
   3a076:	bf44      	itt	mi
   3a078:	222b      	movmi	r2, #43	; 0x2b
   3a07a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3a07e:	7832      	ldrb	r2, [r6, #0]
   3a080:	2a2a      	cmp	r2, #42	; 0x2a
   3a082:	d013      	beq.n	3a0ac <_vfiprintf_r+0x130>
   3a084:	4634      	mov	r4, r6
   3a086:	9a07      	ldr	r2, [sp, #28]
   3a088:	2000      	movs	r0, #0
   3a08a:	260a      	movs	r6, #10
   3a08c:	4621      	mov	r1, r4
   3a08e:	f811 3b01 	ldrb.w	r3, [r1], #1
   3a092:	3b30      	subs	r3, #48	; 0x30
   3a094:	2b09      	cmp	r3, #9
   3a096:	d94b      	bls.n	3a130 <_vfiprintf_r+0x1b4>
   3a098:	b970      	cbnz	r0, 3a0b8 <_vfiprintf_r+0x13c>
   3a09a:	e014      	b.n	3a0c6 <_vfiprintf_r+0x14a>
   3a09c:	eba0 0009 	sub.w	r0, r0, r9
   3a0a0:	4626      	mov	r6, r4
   3a0a2:	fa0a f000 	lsl.w	r0, sl, r0
   3a0a6:	4318      	orrs	r0, r3
   3a0a8:	9004      	str	r0, [sp, #16]
   3a0aa:	e7d5      	b.n	3a058 <_vfiprintf_r+0xdc>
   3a0ac:	9a03      	ldr	r2, [sp, #12]
   3a0ae:	1d11      	adds	r1, r2, #4
   3a0b0:	6812      	ldr	r2, [r2, #0]
   3a0b2:	2a00      	cmp	r2, #0
   3a0b4:	9103      	str	r1, [sp, #12]
   3a0b6:	db01      	blt.n	3a0bc <_vfiprintf_r+0x140>
   3a0b8:	9207      	str	r2, [sp, #28]
   3a0ba:	e004      	b.n	3a0c6 <_vfiprintf_r+0x14a>
   3a0bc:	4252      	negs	r2, r2
   3a0be:	f043 0302 	orr.w	r3, r3, #2
   3a0c2:	9207      	str	r2, [sp, #28]
   3a0c4:	9304      	str	r3, [sp, #16]
   3a0c6:	7823      	ldrb	r3, [r4, #0]
   3a0c8:	2b2e      	cmp	r3, #46	; 0x2e
   3a0ca:	d10c      	bne.n	3a0e6 <_vfiprintf_r+0x16a>
   3a0cc:	7863      	ldrb	r3, [r4, #1]
   3a0ce:	2b2a      	cmp	r3, #42	; 0x2a
   3a0d0:	d133      	bne.n	3a13a <_vfiprintf_r+0x1be>
   3a0d2:	9b03      	ldr	r3, [sp, #12]
   3a0d4:	3402      	adds	r4, #2
   3a0d6:	1d1a      	adds	r2, r3, #4
   3a0d8:	681b      	ldr	r3, [r3, #0]
   3a0da:	2b00      	cmp	r3, #0
   3a0dc:	9203      	str	r2, [sp, #12]
   3a0de:	bfb8      	it	lt
   3a0e0:	f04f 33ff 	movlt.w	r3, #4294967295
   3a0e4:	9305      	str	r3, [sp, #20]
   3a0e6:	4e35      	ldr	r6, [pc, #212]	; (3a1bc <_vfiprintf_r+0x240>)
   3a0e8:	2203      	movs	r2, #3
   3a0ea:	7821      	ldrb	r1, [r4, #0]
   3a0ec:	4630      	mov	r0, r6
   3a0ee:	f004 fdd0 	bl	3ec92 <memchr>
   3a0f2:	b138      	cbz	r0, 3a104 <_vfiprintf_r+0x188>
   3a0f4:	2340      	movs	r3, #64	; 0x40
   3a0f6:	1b80      	subs	r0, r0, r6
   3a0f8:	3401      	adds	r4, #1
   3a0fa:	fa03 f000 	lsl.w	r0, r3, r0
   3a0fe:	9b04      	ldr	r3, [sp, #16]
   3a100:	4303      	orrs	r3, r0
   3a102:	9304      	str	r3, [sp, #16]
   3a104:	f814 1b01 	ldrb.w	r1, [r4], #1
   3a108:	2206      	movs	r2, #6
   3a10a:	482d      	ldr	r0, [pc, #180]	; (3a1c0 <_vfiprintf_r+0x244>)
   3a10c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3a110:	f004 fdbf 	bl	3ec92 <memchr>
   3a114:	2800      	cmp	r0, #0
   3a116:	d03f      	beq.n	3a198 <_vfiprintf_r+0x21c>
   3a118:	4b2a      	ldr	r3, [pc, #168]	; (3a1c4 <_vfiprintf_r+0x248>)
   3a11a:	bb13      	cbnz	r3, 3a162 <_vfiprintf_r+0x1e6>
   3a11c:	9b03      	ldr	r3, [sp, #12]
   3a11e:	3307      	adds	r3, #7
   3a120:	f023 0307 	bic.w	r3, r3, #7
   3a124:	3308      	adds	r3, #8
   3a126:	9303      	str	r3, [sp, #12]
   3a128:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a12a:	4443      	add	r3, r8
   3a12c:	9309      	str	r3, [sp, #36]	; 0x24
   3a12e:	e76e      	b.n	3a00e <_vfiprintf_r+0x92>
   3a130:	fb06 3202 	mla	r2, r6, r2, r3
   3a134:	2001      	movs	r0, #1
   3a136:	460c      	mov	r4, r1
   3a138:	e7a8      	b.n	3a08c <_vfiprintf_r+0x110>
   3a13a:	2300      	movs	r3, #0
   3a13c:	3401      	adds	r4, #1
   3a13e:	260a      	movs	r6, #10
   3a140:	4619      	mov	r1, r3
   3a142:	9305      	str	r3, [sp, #20]
   3a144:	4620      	mov	r0, r4
   3a146:	f810 2b01 	ldrb.w	r2, [r0], #1
   3a14a:	3a30      	subs	r2, #48	; 0x30
   3a14c:	2a09      	cmp	r2, #9
   3a14e:	d903      	bls.n	3a158 <_vfiprintf_r+0x1dc>
   3a150:	2b00      	cmp	r3, #0
   3a152:	d0c8      	beq.n	3a0e6 <_vfiprintf_r+0x16a>
   3a154:	9105      	str	r1, [sp, #20]
   3a156:	e7c6      	b.n	3a0e6 <_vfiprintf_r+0x16a>
   3a158:	fb06 2101 	mla	r1, r6, r1, r2
   3a15c:	2301      	movs	r3, #1
   3a15e:	4604      	mov	r4, r0
   3a160:	e7f0      	b.n	3a144 <_vfiprintf_r+0x1c8>
   3a162:	ab03      	add	r3, sp, #12
   3a164:	462a      	mov	r2, r5
   3a166:	a904      	add	r1, sp, #16
   3a168:	4638      	mov	r0, r7
   3a16a:	9300      	str	r3, [sp, #0]
   3a16c:	4b16      	ldr	r3, [pc, #88]	; (3a1c8 <_vfiprintf_r+0x24c>)
   3a16e:	f000 f82d 	bl	3a1cc <_printf_float>
   3a172:	f1b0 3fff 	cmp.w	r0, #4294967295
   3a176:	4680      	mov	r8, r0
   3a178:	d1d6      	bne.n	3a128 <_vfiprintf_r+0x1ac>
   3a17a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3a17c:	07d9      	lsls	r1, r3, #31
   3a17e:	d405      	bmi.n	3a18c <_vfiprintf_r+0x210>
   3a180:	89ab      	ldrh	r3, [r5, #12]
   3a182:	059a      	lsls	r2, r3, #22
   3a184:	d402      	bmi.n	3a18c <_vfiprintf_r+0x210>
   3a186:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3a188:	f005 f9fc 	bl	3f584 <__retarget_lock_release_recursive>
   3a18c:	89ab      	ldrh	r3, [r5, #12]
   3a18e:	065b      	lsls	r3, r3, #25
   3a190:	f53f af1a 	bmi.w	39fc8 <_vfiprintf_r+0x4c>
   3a194:	9809      	ldr	r0, [sp, #36]	; 0x24
   3a196:	e719      	b.n	39fcc <_vfiprintf_r+0x50>
   3a198:	ab03      	add	r3, sp, #12
   3a19a:	462a      	mov	r2, r5
   3a19c:	a904      	add	r1, sp, #16
   3a19e:	4638      	mov	r0, r7
   3a1a0:	9300      	str	r3, [sp, #0]
   3a1a2:	4b09      	ldr	r3, [pc, #36]	; (3a1c8 <_vfiprintf_r+0x24c>)
   3a1a4:	f000 fa3c 	bl	3a620 <_printf_i>
   3a1a8:	e7e3      	b.n	3a172 <_vfiprintf_r+0x1f6>
   3a1aa:	bf00      	nop
   3a1ac:	00041218 	.word	0x00041218
   3a1b0:	00041238 	.word	0x00041238
   3a1b4:	000411f8 	.word	0x000411f8
   3a1b8:	00046d56 	.word	0x00046d56
   3a1bc:	00046d5c 	.word	0x00046d5c
   3a1c0:	00046d60 	.word	0x00046d60
   3a1c4:	0003a1cd 	.word	0x0003a1cd
   3a1c8:	0003ed49 	.word	0x0003ed49

0003a1cc <_printf_float>:
   3a1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a1d0:	b08d      	sub	sp, #52	; 0x34
   3a1d2:	460c      	mov	r4, r1
   3a1d4:	4616      	mov	r6, r2
   3a1d6:	461f      	mov	r7, r3
   3a1d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   3a1dc:	4605      	mov	r5, r0
   3a1de:	f001 f9e3 	bl	3b5a8 <_localeconv_r>
   3a1e2:	6803      	ldr	r3, [r0, #0]
   3a1e4:	4618      	mov	r0, r3
   3a1e6:	9306      	str	r3, [sp, #24]
   3a1e8:	f7e2 ff9c 	bl	1d124 <strlen>
   3a1ec:	2300      	movs	r3, #0
   3a1ee:	9007      	str	r0, [sp, #28]
   3a1f0:	930a      	str	r3, [sp, #40]	; 0x28
   3a1f2:	f8d8 3000 	ldr.w	r3, [r8]
   3a1f6:	f894 a018 	ldrb.w	sl, [r4, #24]
   3a1fa:	3307      	adds	r3, #7
   3a1fc:	f8d4 b000 	ldr.w	fp, [r4]
   3a200:	f023 0307 	bic.w	r3, r3, #7
   3a204:	f103 0208 	add.w	r2, r3, #8
   3a208:	f8c8 2000 	str.w	r2, [r8]
   3a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
   3a210:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   3a214:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   3a218:	f04f 32ff 	mov.w	r2, #4294967295
   3a21c:	ed8d 7b04 	vstr	d7, [sp, #16]
   3a220:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
   3a224:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   3a228:	4640      	mov	r0, r8
   3a22a:	4ba6      	ldr	r3, [pc, #664]	; (3a4c4 <_printf_float+0x2f8>)
   3a22c:	4649      	mov	r1, r9
   3a22e:	f7e2 ff23 	bl	1d078 <__aeabi_dcmpun>
   3a232:	bb70      	cbnz	r0, 3a292 <_printf_float+0xc6>
   3a234:	f04f 32ff 	mov.w	r2, #4294967295
   3a238:	4ba2      	ldr	r3, [pc, #648]	; (3a4c4 <_printf_float+0x2f8>)
   3a23a:	4640      	mov	r0, r8
   3a23c:	4649      	mov	r1, r9
   3a23e:	f7e2 fd37 	bl	1ccb0 <__aeabi_dcmple>
   3a242:	bb30      	cbnz	r0, 3a292 <_printf_float+0xc6>
   3a244:	2200      	movs	r2, #0
   3a246:	2300      	movs	r3, #0
   3a248:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   3a24c:	f7e2 fd26 	bl	1cc9c <__aeabi_dcmplt>
   3a250:	b110      	cbz	r0, 3a258 <_printf_float+0x8c>
   3a252:	232d      	movs	r3, #45	; 0x2d
   3a254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a258:	4a9b      	ldr	r2, [pc, #620]	; (3a4c8 <_printf_float+0x2fc>)
   3a25a:	4b9c      	ldr	r3, [pc, #624]	; (3a4cc <_printf_float+0x300>)
   3a25c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   3a260:	bf94      	ite	ls
   3a262:	4690      	movls	r8, r2
   3a264:	4698      	movhi	r8, r3
   3a266:	f04f 0900 	mov.w	r9, #0
   3a26a:	2303      	movs	r3, #3
   3a26c:	f02b 0204 	bic.w	r2, fp, #4
   3a270:	6123      	str	r3, [r4, #16]
   3a272:	6022      	str	r2, [r4, #0]
   3a274:	9700      	str	r7, [sp, #0]
   3a276:	4633      	mov	r3, r6
   3a278:	aa0b      	add	r2, sp, #44	; 0x2c
   3a27a:	4621      	mov	r1, r4
   3a27c:	4628      	mov	r0, r5
   3a27e:	f004 fe05 	bl	3ee8c <_printf_common>
   3a282:	3001      	adds	r0, #1
   3a284:	f040 808c 	bne.w	3a3a0 <_printf_float+0x1d4>
   3a288:	f04f 30ff 	mov.w	r0, #4294967295
   3a28c:	b00d      	add	sp, #52	; 0x34
   3a28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3a296:	4610      	mov	r0, r2
   3a298:	4619      	mov	r1, r3
   3a29a:	f7e2 feed 	bl	1d078 <__aeabi_dcmpun>
   3a29e:	b140      	cbz	r0, 3a2b2 <_printf_float+0xe6>
   3a2a0:	9b05      	ldr	r3, [sp, #20]
   3a2a2:	4a8b      	ldr	r2, [pc, #556]	; (3a4d0 <_printf_float+0x304>)
   3a2a4:	2b00      	cmp	r3, #0
   3a2a6:	bfbc      	itt	lt
   3a2a8:	232d      	movlt	r3, #45	; 0x2d
   3a2aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   3a2ae:	4b89      	ldr	r3, [pc, #548]	; (3a4d4 <_printf_float+0x308>)
   3a2b0:	e7d4      	b.n	3a25c <_printf_float+0x90>
   3a2b2:	6863      	ldr	r3, [r4, #4]
   3a2b4:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
   3a2b8:	1c5a      	adds	r2, r3, #1
   3a2ba:	d13e      	bne.n	3a33a <_printf_float+0x16e>
   3a2bc:	2306      	movs	r3, #6
   3a2be:	6063      	str	r3, [r4, #4]
   3a2c0:	2300      	movs	r3, #0
   3a2c2:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   3a2c6:	6861      	ldr	r1, [r4, #4]
   3a2c8:	4628      	mov	r0, r5
   3a2ca:	9303      	str	r3, [sp, #12]
   3a2cc:	ab0a      	add	r3, sp, #40	; 0x28
   3a2ce:	6022      	str	r2, [r4, #0]
   3a2d0:	e9cd a301 	strd	sl, r3, [sp, #4]
   3a2d4:	ab09      	add	r3, sp, #36	; 0x24
   3a2d6:	ed9d 0b04 	vldr	d0, [sp, #16]
   3a2da:	9300      	str	r3, [sp, #0]
   3a2dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   3a2e0:	f004 fd44 	bl	3ed6c <__cvt>
   3a2e4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   3a2e8:	4680      	mov	r8, r0
   3a2ea:	9909      	ldr	r1, [sp, #36]	; 0x24
   3a2ec:	d108      	bne.n	3a300 <_printf_float+0x134>
   3a2ee:	1cc8      	adds	r0, r1, #3
   3a2f0:	db02      	blt.n	3a2f8 <_printf_float+0x12c>
   3a2f2:	6863      	ldr	r3, [r4, #4]
   3a2f4:	4299      	cmp	r1, r3
   3a2f6:	dd41      	ble.n	3a37c <_printf_float+0x1b0>
   3a2f8:	f1aa 0a02 	sub.w	sl, sl, #2
   3a2fc:	fa5f fa8a 	uxtb.w	sl, sl
   3a300:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   3a304:	d820      	bhi.n	3a348 <_printf_float+0x17c>
   3a306:	3901      	subs	r1, #1
   3a308:	4652      	mov	r2, sl
   3a30a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   3a30e:	9109      	str	r1, [sp, #36]	; 0x24
   3a310:	f004 fd89 	bl	3ee26 <__exponent>
   3a314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3a316:	4681      	mov	r9, r0
   3a318:	1813      	adds	r3, r2, r0
   3a31a:	2a01      	cmp	r2, #1
   3a31c:	6123      	str	r3, [r4, #16]
   3a31e:	dc02      	bgt.n	3a326 <_printf_float+0x15a>
   3a320:	6822      	ldr	r2, [r4, #0]
   3a322:	07d2      	lsls	r2, r2, #31
   3a324:	d501      	bpl.n	3a32a <_printf_float+0x15e>
   3a326:	3301      	adds	r3, #1
   3a328:	6123      	str	r3, [r4, #16]
   3a32a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   3a32e:	2b00      	cmp	r3, #0
   3a330:	d0a0      	beq.n	3a274 <_printf_float+0xa8>
   3a332:	232d      	movs	r3, #45	; 0x2d
   3a334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a338:	e79c      	b.n	3a274 <_printf_float+0xa8>
   3a33a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   3a33e:	d1bf      	bne.n	3a2c0 <_printf_float+0xf4>
   3a340:	2b00      	cmp	r3, #0
   3a342:	d1bd      	bne.n	3a2c0 <_printf_float+0xf4>
   3a344:	2301      	movs	r3, #1
   3a346:	e7ba      	b.n	3a2be <_printf_float+0xf2>
   3a348:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   3a34c:	d118      	bne.n	3a380 <_printf_float+0x1b4>
   3a34e:	2900      	cmp	r1, #0
   3a350:	6863      	ldr	r3, [r4, #4]
   3a352:	dd0b      	ble.n	3a36c <_printf_float+0x1a0>
   3a354:	6121      	str	r1, [r4, #16]
   3a356:	b913      	cbnz	r3, 3a35e <_printf_float+0x192>
   3a358:	6822      	ldr	r2, [r4, #0]
   3a35a:	07d0      	lsls	r0, r2, #31
   3a35c:	d502      	bpl.n	3a364 <_printf_float+0x198>
   3a35e:	3301      	adds	r3, #1
   3a360:	440b      	add	r3, r1
   3a362:	6123      	str	r3, [r4, #16]
   3a364:	65a1      	str	r1, [r4, #88]	; 0x58
   3a366:	f04f 0900 	mov.w	r9, #0
   3a36a:	e7de      	b.n	3a32a <_printf_float+0x15e>
   3a36c:	b913      	cbnz	r3, 3a374 <_printf_float+0x1a8>
   3a36e:	6822      	ldr	r2, [r4, #0]
   3a370:	07d2      	lsls	r2, r2, #31
   3a372:	d501      	bpl.n	3a378 <_printf_float+0x1ac>
   3a374:	3302      	adds	r3, #2
   3a376:	e7f4      	b.n	3a362 <_printf_float+0x196>
   3a378:	2301      	movs	r3, #1
   3a37a:	e7f2      	b.n	3a362 <_printf_float+0x196>
   3a37c:	f04f 0a67 	mov.w	sl, #103	; 0x67
   3a380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3a382:	4299      	cmp	r1, r3
   3a384:	db05      	blt.n	3a392 <_printf_float+0x1c6>
   3a386:	6823      	ldr	r3, [r4, #0]
   3a388:	6121      	str	r1, [r4, #16]
   3a38a:	07d8      	lsls	r0, r3, #31
   3a38c:	d5ea      	bpl.n	3a364 <_printf_float+0x198>
   3a38e:	1c4b      	adds	r3, r1, #1
   3a390:	e7e7      	b.n	3a362 <_printf_float+0x196>
   3a392:	2900      	cmp	r1, #0
   3a394:	bfd4      	ite	le
   3a396:	f1c1 0202 	rsble	r2, r1, #2
   3a39a:	2201      	movgt	r2, #1
   3a39c:	4413      	add	r3, r2
   3a39e:	e7e0      	b.n	3a362 <_printf_float+0x196>
   3a3a0:	6823      	ldr	r3, [r4, #0]
   3a3a2:	055a      	lsls	r2, r3, #21
   3a3a4:	d407      	bmi.n	3a3b6 <_printf_float+0x1ea>
   3a3a6:	6923      	ldr	r3, [r4, #16]
   3a3a8:	4642      	mov	r2, r8
   3a3aa:	4631      	mov	r1, r6
   3a3ac:	4628      	mov	r0, r5
   3a3ae:	47b8      	blx	r7
   3a3b0:	3001      	adds	r0, #1
   3a3b2:	d12b      	bne.n	3a40c <_printf_float+0x240>
   3a3b4:	e768      	b.n	3a288 <_printf_float+0xbc>
   3a3b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   3a3ba:	f240 80dc 	bls.w	3a576 <_printf_float+0x3aa>
   3a3be:	2200      	movs	r2, #0
   3a3c0:	2300      	movs	r3, #0
   3a3c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3a3c6:	f7e2 fc5f 	bl	1cc88 <__aeabi_dcmpeq>
   3a3ca:	2800      	cmp	r0, #0
   3a3cc:	d033      	beq.n	3a436 <_printf_float+0x26a>
   3a3ce:	2301      	movs	r3, #1
   3a3d0:	4a41      	ldr	r2, [pc, #260]	; (3a4d8 <_printf_float+0x30c>)
   3a3d2:	4631      	mov	r1, r6
   3a3d4:	4628      	mov	r0, r5
   3a3d6:	47b8      	blx	r7
   3a3d8:	3001      	adds	r0, #1
   3a3da:	f43f af55 	beq.w	3a288 <_printf_float+0xbc>
   3a3de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3a3e2:	429a      	cmp	r2, r3
   3a3e4:	db02      	blt.n	3a3ec <_printf_float+0x220>
   3a3e6:	6823      	ldr	r3, [r4, #0]
   3a3e8:	07d8      	lsls	r0, r3, #31
   3a3ea:	d50f      	bpl.n	3a40c <_printf_float+0x240>
   3a3ec:	4631      	mov	r1, r6
   3a3ee:	4628      	mov	r0, r5
   3a3f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3a3f4:	47b8      	blx	r7
   3a3f6:	3001      	adds	r0, #1
   3a3f8:	f43f af46 	beq.w	3a288 <_printf_float+0xbc>
   3a3fc:	f04f 0800 	mov.w	r8, #0
   3a400:	f104 091a 	add.w	r9, r4, #26
   3a404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3a406:	3b01      	subs	r3, #1
   3a408:	4543      	cmp	r3, r8
   3a40a:	dc09      	bgt.n	3a420 <_printf_float+0x254>
   3a40c:	6823      	ldr	r3, [r4, #0]
   3a40e:	079b      	lsls	r3, r3, #30
   3a410:	f100 8101 	bmi.w	3a616 <_printf_float+0x44a>
   3a414:	68e0      	ldr	r0, [r4, #12]
   3a416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3a418:	4298      	cmp	r0, r3
   3a41a:	bfb8      	it	lt
   3a41c:	4618      	movlt	r0, r3
   3a41e:	e735      	b.n	3a28c <_printf_float+0xc0>
   3a420:	2301      	movs	r3, #1
   3a422:	464a      	mov	r2, r9
   3a424:	4631      	mov	r1, r6
   3a426:	4628      	mov	r0, r5
   3a428:	47b8      	blx	r7
   3a42a:	3001      	adds	r0, #1
   3a42c:	f43f af2c 	beq.w	3a288 <_printf_float+0xbc>
   3a430:	f108 0801 	add.w	r8, r8, #1
   3a434:	e7e6      	b.n	3a404 <_printf_float+0x238>
   3a436:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a438:	2b00      	cmp	r3, #0
   3a43a:	dc2b      	bgt.n	3a494 <_printf_float+0x2c8>
   3a43c:	2301      	movs	r3, #1
   3a43e:	4a26      	ldr	r2, [pc, #152]	; (3a4d8 <_printf_float+0x30c>)
   3a440:	4631      	mov	r1, r6
   3a442:	4628      	mov	r0, r5
   3a444:	47b8      	blx	r7
   3a446:	3001      	adds	r0, #1
   3a448:	f43f af1e 	beq.w	3a288 <_printf_float+0xbc>
   3a44c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3a450:	4313      	orrs	r3, r2
   3a452:	d102      	bne.n	3a45a <_printf_float+0x28e>
   3a454:	6823      	ldr	r3, [r4, #0]
   3a456:	07d9      	lsls	r1, r3, #31
   3a458:	d5d8      	bpl.n	3a40c <_printf_float+0x240>
   3a45a:	4631      	mov	r1, r6
   3a45c:	4628      	mov	r0, r5
   3a45e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3a462:	47b8      	blx	r7
   3a464:	3001      	adds	r0, #1
   3a466:	f43f af0f 	beq.w	3a288 <_printf_float+0xbc>
   3a46a:	f04f 0900 	mov.w	r9, #0
   3a46e:	f104 0a1a 	add.w	sl, r4, #26
   3a472:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a474:	425b      	negs	r3, r3
   3a476:	454b      	cmp	r3, r9
   3a478:	dc01      	bgt.n	3a47e <_printf_float+0x2b2>
   3a47a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3a47c:	e794      	b.n	3a3a8 <_printf_float+0x1dc>
   3a47e:	2301      	movs	r3, #1
   3a480:	4652      	mov	r2, sl
   3a482:	4631      	mov	r1, r6
   3a484:	4628      	mov	r0, r5
   3a486:	47b8      	blx	r7
   3a488:	3001      	adds	r0, #1
   3a48a:	f43f aefd 	beq.w	3a288 <_printf_float+0xbc>
   3a48e:	f109 0901 	add.w	r9, r9, #1
   3a492:	e7ee      	b.n	3a472 <_printf_float+0x2a6>
   3a494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3a496:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3a498:	429a      	cmp	r2, r3
   3a49a:	bfa8      	it	ge
   3a49c:	461a      	movge	r2, r3
   3a49e:	2a00      	cmp	r2, #0
   3a4a0:	4691      	mov	r9, r2
   3a4a2:	dd07      	ble.n	3a4b4 <_printf_float+0x2e8>
   3a4a4:	4613      	mov	r3, r2
   3a4a6:	4631      	mov	r1, r6
   3a4a8:	4642      	mov	r2, r8
   3a4aa:	4628      	mov	r0, r5
   3a4ac:	47b8      	blx	r7
   3a4ae:	3001      	adds	r0, #1
   3a4b0:	f43f aeea 	beq.w	3a288 <_printf_float+0xbc>
   3a4b4:	f104 031a 	add.w	r3, r4, #26
   3a4b8:	f04f 0b00 	mov.w	fp, #0
   3a4bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3a4c0:	9304      	str	r3, [sp, #16]
   3a4c2:	e015      	b.n	3a4f0 <_printf_float+0x324>
   3a4c4:	7fefffff 	.word	0x7fefffff
   3a4c8:	00046d67 	.word	0x00046d67
   3a4cc:	000424a5 	.word	0x000424a5
   3a4d0:	00046d6b 	.word	0x00046d6b
   3a4d4:	00046d6f 	.word	0x00046d6f
   3a4d8:	00046834 	.word	0x00046834
   3a4dc:	2301      	movs	r3, #1
   3a4de:	9a04      	ldr	r2, [sp, #16]
   3a4e0:	4631      	mov	r1, r6
   3a4e2:	4628      	mov	r0, r5
   3a4e4:	47b8      	blx	r7
   3a4e6:	3001      	adds	r0, #1
   3a4e8:	f43f aece 	beq.w	3a288 <_printf_float+0xbc>
   3a4ec:	f10b 0b01 	add.w	fp, fp, #1
   3a4f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   3a4f4:	ebaa 0309 	sub.w	r3, sl, r9
   3a4f8:	455b      	cmp	r3, fp
   3a4fa:	dcef      	bgt.n	3a4dc <_printf_float+0x310>
   3a4fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3a500:	429a      	cmp	r2, r3
   3a502:	db1b      	blt.n	3a53c <_printf_float+0x370>
   3a504:	6823      	ldr	r3, [r4, #0]
   3a506:	07da      	lsls	r2, r3, #31
   3a508:	d418      	bmi.n	3a53c <_printf_float+0x370>
   3a50a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3a50e:	4592      	cmp	sl, r2
   3a510:	db1c      	blt.n	3a54c <_printf_float+0x380>
   3a512:	eba3 090a 	sub.w	r9, r3, sl
   3a516:	f1b9 0f00 	cmp.w	r9, #0
   3a51a:	dd08      	ble.n	3a52e <_printf_float+0x362>
   3a51c:	464b      	mov	r3, r9
   3a51e:	eb08 020a 	add.w	r2, r8, sl
   3a522:	4631      	mov	r1, r6
   3a524:	4628      	mov	r0, r5
   3a526:	47b8      	blx	r7
   3a528:	3001      	adds	r0, #1
   3a52a:	f43f aead 	beq.w	3a288 <_printf_float+0xbc>
   3a52e:	f04f 0800 	mov.w	r8, #0
   3a532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3a536:	f104 0a1a 	add.w	sl, r4, #26
   3a53a:	e014      	b.n	3a566 <_printf_float+0x39a>
   3a53c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3a540:	4631      	mov	r1, r6
   3a542:	4628      	mov	r0, r5
   3a544:	47b8      	blx	r7
   3a546:	3001      	adds	r0, #1
   3a548:	d1df      	bne.n	3a50a <_printf_float+0x33e>
   3a54a:	e69d      	b.n	3a288 <_printf_float+0xbc>
   3a54c:	eba3 0902 	sub.w	r9, r3, r2
   3a550:	e7e1      	b.n	3a516 <_printf_float+0x34a>
   3a552:	2301      	movs	r3, #1
   3a554:	4652      	mov	r2, sl
   3a556:	4631      	mov	r1, r6
   3a558:	4628      	mov	r0, r5
   3a55a:	47b8      	blx	r7
   3a55c:	3001      	adds	r0, #1
   3a55e:	f43f ae93 	beq.w	3a288 <_printf_float+0xbc>
   3a562:	f108 0801 	add.w	r8, r8, #1
   3a566:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3a56a:	1a9b      	subs	r3, r3, r2
   3a56c:	eba3 0309 	sub.w	r3, r3, r9
   3a570:	4543      	cmp	r3, r8
   3a572:	dcee      	bgt.n	3a552 <_printf_float+0x386>
   3a574:	e74a      	b.n	3a40c <_printf_float+0x240>
   3a576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3a578:	2a01      	cmp	r2, #1
   3a57a:	dc01      	bgt.n	3a580 <_printf_float+0x3b4>
   3a57c:	07db      	lsls	r3, r3, #31
   3a57e:	d537      	bpl.n	3a5f0 <_printf_float+0x424>
   3a580:	2301      	movs	r3, #1
   3a582:	4642      	mov	r2, r8
   3a584:	4631      	mov	r1, r6
   3a586:	4628      	mov	r0, r5
   3a588:	47b8      	blx	r7
   3a58a:	3001      	adds	r0, #1
   3a58c:	f43f ae7c 	beq.w	3a288 <_printf_float+0xbc>
   3a590:	4631      	mov	r1, r6
   3a592:	4628      	mov	r0, r5
   3a594:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3a598:	47b8      	blx	r7
   3a59a:	3001      	adds	r0, #1
   3a59c:	f43f ae74 	beq.w	3a288 <_printf_float+0xbc>
   3a5a0:	2200      	movs	r2, #0
   3a5a2:	2300      	movs	r3, #0
   3a5a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3a5a8:	f7e2 fb6e 	bl	1cc88 <__aeabi_dcmpeq>
   3a5ac:	b9d8      	cbnz	r0, 3a5e6 <_printf_float+0x41a>
   3a5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3a5b0:	f108 0201 	add.w	r2, r8, #1
   3a5b4:	3b01      	subs	r3, #1
   3a5b6:	4631      	mov	r1, r6
   3a5b8:	4628      	mov	r0, r5
   3a5ba:	47b8      	blx	r7
   3a5bc:	3001      	adds	r0, #1
   3a5be:	d10e      	bne.n	3a5de <_printf_float+0x412>
   3a5c0:	e662      	b.n	3a288 <_printf_float+0xbc>
   3a5c2:	2301      	movs	r3, #1
   3a5c4:	4652      	mov	r2, sl
   3a5c6:	4631      	mov	r1, r6
   3a5c8:	4628      	mov	r0, r5
   3a5ca:	47b8      	blx	r7
   3a5cc:	3001      	adds	r0, #1
   3a5ce:	f43f ae5b 	beq.w	3a288 <_printf_float+0xbc>
   3a5d2:	f108 0801 	add.w	r8, r8, #1
   3a5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3a5d8:	3b01      	subs	r3, #1
   3a5da:	4543      	cmp	r3, r8
   3a5dc:	dcf1      	bgt.n	3a5c2 <_printf_float+0x3f6>
   3a5de:	464b      	mov	r3, r9
   3a5e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
   3a5e4:	e6e1      	b.n	3a3aa <_printf_float+0x1de>
   3a5e6:	f04f 0800 	mov.w	r8, #0
   3a5ea:	f104 0a1a 	add.w	sl, r4, #26
   3a5ee:	e7f2      	b.n	3a5d6 <_printf_float+0x40a>
   3a5f0:	2301      	movs	r3, #1
   3a5f2:	4642      	mov	r2, r8
   3a5f4:	e7df      	b.n	3a5b6 <_printf_float+0x3ea>
   3a5f6:	2301      	movs	r3, #1
   3a5f8:	464a      	mov	r2, r9
   3a5fa:	4631      	mov	r1, r6
   3a5fc:	4628      	mov	r0, r5
   3a5fe:	47b8      	blx	r7
   3a600:	3001      	adds	r0, #1
   3a602:	f43f ae41 	beq.w	3a288 <_printf_float+0xbc>
   3a606:	f108 0801 	add.w	r8, r8, #1
   3a60a:	68e3      	ldr	r3, [r4, #12]
   3a60c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3a60e:	1a9b      	subs	r3, r3, r2
   3a610:	4543      	cmp	r3, r8
   3a612:	dcf0      	bgt.n	3a5f6 <_printf_float+0x42a>
   3a614:	e6fe      	b.n	3a414 <_printf_float+0x248>
   3a616:	f04f 0800 	mov.w	r8, #0
   3a61a:	f104 0919 	add.w	r9, r4, #25
   3a61e:	e7f4      	b.n	3a60a <_printf_float+0x43e>

0003a620 <_printf_i>:
   3a620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3a624:	4606      	mov	r6, r0
   3a626:	460c      	mov	r4, r1
   3a628:	f101 0043 	add.w	r0, r1, #67	; 0x43
   3a62c:	7e09      	ldrb	r1, [r1, #24]
   3a62e:	b085      	sub	sp, #20
   3a630:	4698      	mov	r8, r3
   3a632:	296e      	cmp	r1, #110	; 0x6e
   3a634:	4617      	mov	r7, r2
   3a636:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3a638:	f000 80ba 	beq.w	3a7b0 <_printf_i+0x190>
   3a63c:	d824      	bhi.n	3a688 <_printf_i+0x68>
   3a63e:	2963      	cmp	r1, #99	; 0x63
   3a640:	d039      	beq.n	3a6b6 <_printf_i+0x96>
   3a642:	d80a      	bhi.n	3a65a <_printf_i+0x3a>
   3a644:	2900      	cmp	r1, #0
   3a646:	f000 80c3 	beq.w	3a7d0 <_printf_i+0x1b0>
   3a64a:	2958      	cmp	r1, #88	; 0x58
   3a64c:	f000 8091 	beq.w	3a772 <_printf_i+0x152>
   3a650:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3a654:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   3a658:	e035      	b.n	3a6c6 <_printf_i+0xa6>
   3a65a:	2964      	cmp	r1, #100	; 0x64
   3a65c:	d001      	beq.n	3a662 <_printf_i+0x42>
   3a65e:	2969      	cmp	r1, #105	; 0x69
   3a660:	d1f6      	bne.n	3a650 <_printf_i+0x30>
   3a662:	6825      	ldr	r5, [r4, #0]
   3a664:	681a      	ldr	r2, [r3, #0]
   3a666:	f015 0f80 	tst.w	r5, #128	; 0x80
   3a66a:	f102 0104 	add.w	r1, r2, #4
   3a66e:	d02c      	beq.n	3a6ca <_printf_i+0xaa>
   3a670:	6812      	ldr	r2, [r2, #0]
   3a672:	6019      	str	r1, [r3, #0]
   3a674:	2a00      	cmp	r2, #0
   3a676:	da03      	bge.n	3a680 <_printf_i+0x60>
   3a678:	232d      	movs	r3, #45	; 0x2d
   3a67a:	4252      	negs	r2, r2
   3a67c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a680:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 3a840 <_printf_i+0x220>
   3a684:	230a      	movs	r3, #10
   3a686:	e03f      	b.n	3a708 <_printf_i+0xe8>
   3a688:	2973      	cmp	r1, #115	; 0x73
   3a68a:	f000 80a5 	beq.w	3a7d8 <_printf_i+0x1b8>
   3a68e:	d808      	bhi.n	3a6a2 <_printf_i+0x82>
   3a690:	296f      	cmp	r1, #111	; 0x6f
   3a692:	d021      	beq.n	3a6d8 <_printf_i+0xb8>
   3a694:	2970      	cmp	r1, #112	; 0x70
   3a696:	d1db      	bne.n	3a650 <_printf_i+0x30>
   3a698:	6822      	ldr	r2, [r4, #0]
   3a69a:	f042 0220 	orr.w	r2, r2, #32
   3a69e:	6022      	str	r2, [r4, #0]
   3a6a0:	e003      	b.n	3a6aa <_printf_i+0x8a>
   3a6a2:	2975      	cmp	r1, #117	; 0x75
   3a6a4:	d018      	beq.n	3a6d8 <_printf_i+0xb8>
   3a6a6:	2978      	cmp	r1, #120	; 0x78
   3a6a8:	d1d2      	bne.n	3a650 <_printf_i+0x30>
   3a6aa:	2278      	movs	r2, #120	; 0x78
   3a6ac:	f8df c194 	ldr.w	ip, [pc, #404]	; 3a844 <_printf_i+0x224>
   3a6b0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   3a6b4:	e061      	b.n	3a77a <_printf_i+0x15a>
   3a6b6:	681a      	ldr	r2, [r3, #0]
   3a6b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3a6bc:	1d11      	adds	r1, r2, #4
   3a6be:	6019      	str	r1, [r3, #0]
   3a6c0:	6813      	ldr	r3, [r2, #0]
   3a6c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   3a6c6:	2301      	movs	r3, #1
   3a6c8:	e093      	b.n	3a7f2 <_printf_i+0x1d2>
   3a6ca:	6812      	ldr	r2, [r2, #0]
   3a6cc:	f015 0f40 	tst.w	r5, #64	; 0x40
   3a6d0:	6019      	str	r1, [r3, #0]
   3a6d2:	bf18      	it	ne
   3a6d4:	b212      	sxthne	r2, r2
   3a6d6:	e7cd      	b.n	3a674 <_printf_i+0x54>
   3a6d8:	f8d4 c000 	ldr.w	ip, [r4]
   3a6dc:	681a      	ldr	r2, [r3, #0]
   3a6de:	f01c 0f80 	tst.w	ip, #128	; 0x80
   3a6e2:	f102 0504 	add.w	r5, r2, #4
   3a6e6:	601d      	str	r5, [r3, #0]
   3a6e8:	d001      	beq.n	3a6ee <_printf_i+0xce>
   3a6ea:	6812      	ldr	r2, [r2, #0]
   3a6ec:	e003      	b.n	3a6f6 <_printf_i+0xd6>
   3a6ee:	f01c 0f40 	tst.w	ip, #64	; 0x40
   3a6f2:	d0fa      	beq.n	3a6ea <_printf_i+0xca>
   3a6f4:	8812      	ldrh	r2, [r2, #0]
   3a6f6:	296f      	cmp	r1, #111	; 0x6f
   3a6f8:	f8df c144 	ldr.w	ip, [pc, #324]	; 3a840 <_printf_i+0x220>
   3a6fc:	bf0c      	ite	eq
   3a6fe:	2308      	moveq	r3, #8
   3a700:	230a      	movne	r3, #10
   3a702:	2100      	movs	r1, #0
   3a704:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   3a708:	6865      	ldr	r5, [r4, #4]
   3a70a:	2d00      	cmp	r5, #0
   3a70c:	60a5      	str	r5, [r4, #8]
   3a70e:	bfa2      	ittt	ge
   3a710:	6821      	ldrge	r1, [r4, #0]
   3a712:	f021 0104 	bicge.w	r1, r1, #4
   3a716:	6021      	strge	r1, [r4, #0]
   3a718:	b90a      	cbnz	r2, 3a71e <_printf_i+0xfe>
   3a71a:	2d00      	cmp	r5, #0
   3a71c:	d046      	beq.n	3a7ac <_printf_i+0x18c>
   3a71e:	4605      	mov	r5, r0
   3a720:	4293      	cmp	r3, r2
   3a722:	fbb2 f1f3 	udiv	r1, r2, r3
   3a726:	fb03 2e11 	mls	lr, r3, r1, r2
   3a72a:	f81c e00e 	ldrb.w	lr, [ip, lr]
   3a72e:	f805 ed01 	strb.w	lr, [r5, #-1]!
   3a732:	d939      	bls.n	3a7a8 <_printf_i+0x188>
   3a734:	2b08      	cmp	r3, #8
   3a736:	d10b      	bne.n	3a750 <_printf_i+0x130>
   3a738:	6823      	ldr	r3, [r4, #0]
   3a73a:	07da      	lsls	r2, r3, #31
   3a73c:	d508      	bpl.n	3a750 <_printf_i+0x130>
   3a73e:	6923      	ldr	r3, [r4, #16]
   3a740:	6862      	ldr	r2, [r4, #4]
   3a742:	429a      	cmp	r2, r3
   3a744:	bfde      	ittt	le
   3a746:	2330      	movle	r3, #48	; 0x30
   3a748:	f805 3c01 	strble.w	r3, [r5, #-1]
   3a74c:	f105 35ff 	addle.w	r5, r5, #4294967295
   3a750:	1b40      	subs	r0, r0, r5
   3a752:	6120      	str	r0, [r4, #16]
   3a754:	f8cd 8000 	str.w	r8, [sp]
   3a758:	463b      	mov	r3, r7
   3a75a:	aa03      	add	r2, sp, #12
   3a75c:	4621      	mov	r1, r4
   3a75e:	4630      	mov	r0, r6
   3a760:	f004 fb94 	bl	3ee8c <_printf_common>
   3a764:	3001      	adds	r0, #1
   3a766:	d149      	bne.n	3a7fc <_printf_i+0x1dc>
   3a768:	f04f 30ff 	mov.w	r0, #4294967295
   3a76c:	b005      	add	sp, #20
   3a76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3a772:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 3a840 <_printf_i+0x220>
   3a776:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   3a77a:	681d      	ldr	r5, [r3, #0]
   3a77c:	6821      	ldr	r1, [r4, #0]
   3a77e:	f855 2b04 	ldr.w	r2, [r5], #4
   3a782:	601d      	str	r5, [r3, #0]
   3a784:	060d      	lsls	r5, r1, #24
   3a786:	d50b      	bpl.n	3a7a0 <_printf_i+0x180>
   3a788:	07cd      	lsls	r5, r1, #31
   3a78a:	bf44      	itt	mi
   3a78c:	f041 0120 	orrmi.w	r1, r1, #32
   3a790:	6021      	strmi	r1, [r4, #0]
   3a792:	b91a      	cbnz	r2, 3a79c <_printf_i+0x17c>
   3a794:	6823      	ldr	r3, [r4, #0]
   3a796:	f023 0320 	bic.w	r3, r3, #32
   3a79a:	6023      	str	r3, [r4, #0]
   3a79c:	2310      	movs	r3, #16
   3a79e:	e7b0      	b.n	3a702 <_printf_i+0xe2>
   3a7a0:	064b      	lsls	r3, r1, #25
   3a7a2:	bf48      	it	mi
   3a7a4:	b292      	uxthmi	r2, r2
   3a7a6:	e7ef      	b.n	3a788 <_printf_i+0x168>
   3a7a8:	460a      	mov	r2, r1
   3a7aa:	e7b9      	b.n	3a720 <_printf_i+0x100>
   3a7ac:	4605      	mov	r5, r0
   3a7ae:	e7c1      	b.n	3a734 <_printf_i+0x114>
   3a7b0:	681a      	ldr	r2, [r3, #0]
   3a7b2:	f8d4 c000 	ldr.w	ip, [r4]
   3a7b6:	1d15      	adds	r5, r2, #4
   3a7b8:	6961      	ldr	r1, [r4, #20]
   3a7ba:	f01c 0f80 	tst.w	ip, #128	; 0x80
   3a7be:	601d      	str	r5, [r3, #0]
   3a7c0:	6813      	ldr	r3, [r2, #0]
   3a7c2:	d001      	beq.n	3a7c8 <_printf_i+0x1a8>
   3a7c4:	6019      	str	r1, [r3, #0]
   3a7c6:	e003      	b.n	3a7d0 <_printf_i+0x1b0>
   3a7c8:	f01c 0f40 	tst.w	ip, #64	; 0x40
   3a7cc:	d0fa      	beq.n	3a7c4 <_printf_i+0x1a4>
   3a7ce:	8019      	strh	r1, [r3, #0]
   3a7d0:	2300      	movs	r3, #0
   3a7d2:	4605      	mov	r5, r0
   3a7d4:	6123      	str	r3, [r4, #16]
   3a7d6:	e7bd      	b.n	3a754 <_printf_i+0x134>
   3a7d8:	681a      	ldr	r2, [r3, #0]
   3a7da:	1d11      	adds	r1, r2, #4
   3a7dc:	6019      	str	r1, [r3, #0]
   3a7de:	2100      	movs	r1, #0
   3a7e0:	6815      	ldr	r5, [r2, #0]
   3a7e2:	6862      	ldr	r2, [r4, #4]
   3a7e4:	4628      	mov	r0, r5
   3a7e6:	f004 fa54 	bl	3ec92 <memchr>
   3a7ea:	b108      	cbz	r0, 3a7f0 <_printf_i+0x1d0>
   3a7ec:	1b40      	subs	r0, r0, r5
   3a7ee:	6060      	str	r0, [r4, #4]
   3a7f0:	6863      	ldr	r3, [r4, #4]
   3a7f2:	6123      	str	r3, [r4, #16]
   3a7f4:	2300      	movs	r3, #0
   3a7f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a7fa:	e7ab      	b.n	3a754 <_printf_i+0x134>
   3a7fc:	6923      	ldr	r3, [r4, #16]
   3a7fe:	462a      	mov	r2, r5
   3a800:	4639      	mov	r1, r7
   3a802:	4630      	mov	r0, r6
   3a804:	47c0      	blx	r8
   3a806:	3001      	adds	r0, #1
   3a808:	d0ae      	beq.n	3a768 <_printf_i+0x148>
   3a80a:	6823      	ldr	r3, [r4, #0]
   3a80c:	079b      	lsls	r3, r3, #30
   3a80e:	d413      	bmi.n	3a838 <_printf_i+0x218>
   3a810:	68e0      	ldr	r0, [r4, #12]
   3a812:	9b03      	ldr	r3, [sp, #12]
   3a814:	4298      	cmp	r0, r3
   3a816:	bfb8      	it	lt
   3a818:	4618      	movlt	r0, r3
   3a81a:	e7a7      	b.n	3a76c <_printf_i+0x14c>
   3a81c:	2301      	movs	r3, #1
   3a81e:	464a      	mov	r2, r9
   3a820:	4639      	mov	r1, r7
   3a822:	4630      	mov	r0, r6
   3a824:	47c0      	blx	r8
   3a826:	3001      	adds	r0, #1
   3a828:	d09e      	beq.n	3a768 <_printf_i+0x148>
   3a82a:	3501      	adds	r5, #1
   3a82c:	68e3      	ldr	r3, [r4, #12]
   3a82e:	9a03      	ldr	r2, [sp, #12]
   3a830:	1a9b      	subs	r3, r3, r2
   3a832:	42ab      	cmp	r3, r5
   3a834:	dcf2      	bgt.n	3a81c <_printf_i+0x1fc>
   3a836:	e7eb      	b.n	3a810 <_printf_i+0x1f0>
   3a838:	2500      	movs	r5, #0
   3a83a:	f104 0919 	add.w	r9, r4, #25
   3a83e:	e7f5      	b.n	3a82c <_printf_i+0x20c>
   3a840:	00046d73 	.word	0x00046d73
   3a844:	00046d84 	.word	0x00046d84

0003a848 <srand>:
   3a848:	b538      	push	{r3, r4, r5, lr}
   3a84a:	4b0d      	ldr	r3, [pc, #52]	; (3a880 <srand+0x38>)
   3a84c:	4605      	mov	r5, r0
   3a84e:	681c      	ldr	r4, [r3, #0]
   3a850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3a852:	b97b      	cbnz	r3, 3a874 <srand+0x2c>
   3a854:	2018      	movs	r0, #24
   3a856:	f7ff fad9 	bl	39e0c <malloc>
   3a85a:	4a0a      	ldr	r2, [pc, #40]	; (3a884 <srand+0x3c>)
   3a85c:	4b0a      	ldr	r3, [pc, #40]	; (3a888 <srand+0x40>)
   3a85e:	63a0      	str	r0, [r4, #56]	; 0x38
   3a860:	e9c0 2300 	strd	r2, r3, [r0]
   3a864:	4b09      	ldr	r3, [pc, #36]	; (3a88c <srand+0x44>)
   3a866:	2201      	movs	r2, #1
   3a868:	6083      	str	r3, [r0, #8]
   3a86a:	230b      	movs	r3, #11
   3a86c:	8183      	strh	r3, [r0, #12]
   3a86e:	2300      	movs	r3, #0
   3a870:	e9c0 2304 	strd	r2, r3, [r0, #16]
   3a874:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3a876:	2200      	movs	r2, #0
   3a878:	611d      	str	r5, [r3, #16]
   3a87a:	615a      	str	r2, [r3, #20]
   3a87c:	bd38      	pop	{r3, r4, r5, pc}
   3a87e:	bf00      	nop
   3a880:	2003157c 	.word	0x2003157c
   3a884:	abcd330e 	.word	0xabcd330e
   3a888:	e66d1234 	.word	0xe66d1234
   3a88c:	0005deec 	.word	0x0005deec

0003a890 <rand>:
   3a890:	4b13      	ldr	r3, [pc, #76]	; (3a8e0 <rand+0x50>)
   3a892:	b510      	push	{r4, lr}
   3a894:	681c      	ldr	r4, [r3, #0]
   3a896:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3a898:	b97b      	cbnz	r3, 3a8ba <rand+0x2a>
   3a89a:	2018      	movs	r0, #24
   3a89c:	f7ff fab6 	bl	39e0c <malloc>
   3a8a0:	4a10      	ldr	r2, [pc, #64]	; (3a8e4 <rand+0x54>)
   3a8a2:	4b11      	ldr	r3, [pc, #68]	; (3a8e8 <rand+0x58>)
   3a8a4:	63a0      	str	r0, [r4, #56]	; 0x38
   3a8a6:	e9c0 2300 	strd	r2, r3, [r0]
   3a8aa:	4b10      	ldr	r3, [pc, #64]	; (3a8ec <rand+0x5c>)
   3a8ac:	2201      	movs	r2, #1
   3a8ae:	6083      	str	r3, [r0, #8]
   3a8b0:	230b      	movs	r3, #11
   3a8b2:	8183      	strh	r3, [r0, #12]
   3a8b4:	2300      	movs	r3, #0
   3a8b6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   3a8ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   3a8bc:	480c      	ldr	r0, [pc, #48]	; (3a8f0 <rand+0x60>)
   3a8be:	690a      	ldr	r2, [r1, #16]
   3a8c0:	694b      	ldr	r3, [r1, #20]
   3a8c2:	4c0c      	ldr	r4, [pc, #48]	; (3a8f4 <rand+0x64>)
   3a8c4:	4350      	muls	r0, r2
   3a8c6:	fb04 0003 	mla	r0, r4, r3, r0
   3a8ca:	fba2 3404 	umull	r3, r4, r2, r4
   3a8ce:	1c5a      	adds	r2, r3, #1
   3a8d0:	4404      	add	r4, r0
   3a8d2:	f144 0000 	adc.w	r0, r4, #0
   3a8d6:	e9c1 2004 	strd	r2, r0, [r1, #16]
   3a8da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   3a8de:	bd10      	pop	{r4, pc}
   3a8e0:	2003157c 	.word	0x2003157c
   3a8e4:	abcd330e 	.word	0xabcd330e
   3a8e8:	e66d1234 	.word	0xe66d1234
   3a8ec:	0005deec 	.word	0x0005deec
   3a8f0:	5851f42d 	.word	0x5851f42d
   3a8f4:	4c957f2d 	.word	0x4c957f2d

0003a8f8 <realloc>:
   3a8f8:	4b02      	ldr	r3, [pc, #8]	; (3a904 <realloc+0xc>)
   3a8fa:	460a      	mov	r2, r1
   3a8fc:	4601      	mov	r1, r0
   3a8fe:	6818      	ldr	r0, [r3, #0]
   3a900:	f005 b9d6 	b.w	3fcb0 <_realloc_r>
   3a904:	2003157c 	.word	0x2003157c

0003a908 <_sbrk_r>:
   3a908:	b538      	push	{r3, r4, r5, lr}
   3a90a:	2300      	movs	r3, #0
   3a90c:	4c05      	ldr	r4, [pc, #20]	; (3a924 <_sbrk_r+0x1c>)
   3a90e:	4605      	mov	r5, r0
   3a910:	4608      	mov	r0, r1
   3a912:	6023      	str	r3, [r4, #0]
   3a914:	f7ea fa38 	bl	24d88 <_sbrk>
   3a918:	1c43      	adds	r3, r0, #1
   3a91a:	d102      	bne.n	3a922 <_sbrk_r+0x1a>
   3a91c:	6823      	ldr	r3, [r4, #0]
   3a91e:	b103      	cbz	r3, 3a922 <_sbrk_r+0x1a>
   3a920:	602b      	str	r3, [r5, #0]
   3a922:	bd38      	pop	{r3, r4, r5, pc}
   3a924:	2002bb10 	.word	0x2002bb10

0003a928 <sniprintf>:
   3a928:	b40c      	push	{r2, r3}
   3a92a:	4b18      	ldr	r3, [pc, #96]	; (3a98c <sniprintf+0x64>)
   3a92c:	b530      	push	{r4, r5, lr}
   3a92e:	1e0c      	subs	r4, r1, #0
   3a930:	b09d      	sub	sp, #116	; 0x74
   3a932:	681d      	ldr	r5, [r3, #0]
   3a934:	da08      	bge.n	3a948 <sniprintf+0x20>
   3a936:	238b      	movs	r3, #139	; 0x8b
   3a938:	f04f 30ff 	mov.w	r0, #4294967295
   3a93c:	602b      	str	r3, [r5, #0]
   3a93e:	b01d      	add	sp, #116	; 0x74
   3a940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3a944:	b002      	add	sp, #8
   3a946:	4770      	bx	lr
   3a948:	f44f 7302 	mov.w	r3, #520	; 0x208
   3a94c:	9002      	str	r0, [sp, #8]
   3a94e:	9006      	str	r0, [sp, #24]
   3a950:	a902      	add	r1, sp, #8
   3a952:	f8ad 3014 	strh.w	r3, [sp, #20]
   3a956:	bf14      	ite	ne
   3a958:	f104 33ff 	addne.w	r3, r4, #4294967295
   3a95c:	4623      	moveq	r3, r4
   3a95e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3a960:	4628      	mov	r0, r5
   3a962:	9304      	str	r3, [sp, #16]
   3a964:	9307      	str	r3, [sp, #28]
   3a966:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3a96a:	f8ad 3016 	strh.w	r3, [sp, #22]
   3a96e:	ab21      	add	r3, sp, #132	; 0x84
   3a970:	9301      	str	r3, [sp, #4]
   3a972:	f000 ff3d 	bl	3b7f0 <_svfiprintf_r>
   3a976:	1c43      	adds	r3, r0, #1
   3a978:	bfbc      	itt	lt
   3a97a:	238b      	movlt	r3, #139	; 0x8b
   3a97c:	602b      	strlt	r3, [r5, #0]
   3a97e:	2c00      	cmp	r4, #0
   3a980:	d0dd      	beq.n	3a93e <sniprintf+0x16>
   3a982:	9b02      	ldr	r3, [sp, #8]
   3a984:	2200      	movs	r2, #0
   3a986:	701a      	strb	r2, [r3, #0]
   3a988:	e7d9      	b.n	3a93e <sniprintf+0x16>
   3a98a:	bf00      	nop
   3a98c:	2003157c 	.word	0x2003157c

0003a990 <siscanf>:
   3a990:	b40e      	push	{r1, r2, r3}
   3a992:	b530      	push	{r4, r5, lr}
   3a994:	b09c      	sub	sp, #112	; 0x70
   3a996:	f44f 7201 	mov.w	r2, #516	; 0x204
   3a99a:	ac1f      	add	r4, sp, #124	; 0x7c
   3a99c:	f8ad 2014 	strh.w	r2, [sp, #20]
   3a9a0:	9002      	str	r0, [sp, #8]
   3a9a2:	f854 5b04 	ldr.w	r5, [r4], #4
   3a9a6:	9006      	str	r0, [sp, #24]
   3a9a8:	f7e2 fbbc 	bl	1d124 <strlen>
   3a9ac:	4b0b      	ldr	r3, [pc, #44]	; (3a9dc <siscanf+0x4c>)
   3a9ae:	462a      	mov	r2, r5
   3a9b0:	9003      	str	r0, [sp, #12]
   3a9b2:	a902      	add	r1, sp, #8
   3a9b4:	930b      	str	r3, [sp, #44]	; 0x2c
   3a9b6:	2300      	movs	r3, #0
   3a9b8:	9007      	str	r0, [sp, #28]
   3a9ba:	930f      	str	r3, [sp, #60]	; 0x3c
   3a9bc:	9314      	str	r3, [sp, #80]	; 0x50
   3a9be:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3a9c2:	4807      	ldr	r0, [pc, #28]	; (3a9e0 <siscanf+0x50>)
   3a9c4:	f8ad 3016 	strh.w	r3, [sp, #22]
   3a9c8:	4623      	mov	r3, r4
   3a9ca:	6800      	ldr	r0, [r0, #0]
   3a9cc:	9401      	str	r4, [sp, #4]
   3a9ce:	f001 f807 	bl	3b9e0 <__ssvfiscanf_r>
   3a9d2:	b01c      	add	sp, #112	; 0x70
   3a9d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3a9d8:	b003      	add	sp, #12
   3a9da:	4770      	bx	lr
   3a9dc:	0003efd3 	.word	0x0003efd3
   3a9e0:	2003157c 	.word	0x2003157c

0003a9e4 <strtod>:
   3a9e4:	460a      	mov	r2, r1
   3a9e6:	4601      	mov	r1, r0
   3a9e8:	4802      	ldr	r0, [pc, #8]	; (3a9f4 <strtod+0x10>)
   3a9ea:	4b03      	ldr	r3, [pc, #12]	; (3a9f8 <strtod+0x14>)
   3a9ec:	6800      	ldr	r0, [r0, #0]
   3a9ee:	f7e4 b977 	b.w	1ece0 <_strtod_l>
   3a9f2:	bf00      	nop
   3a9f4:	2003157c 	.word	0x2003157c
   3a9f8:	200315e0 	.word	0x200315e0

0003a9fc <_strtol_l.isra.0>:
   3a9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3aa00:	4686      	mov	lr, r0
   3aa02:	4f39      	ldr	r7, [pc, #228]	; (3aae8 <_strtol_l.isra.0+0xec>)
   3aa04:	4608      	mov	r0, r1
   3aa06:	4605      	mov	r5, r0
   3aa08:	f815 4b01 	ldrb.w	r4, [r5], #1
   3aa0c:	5de6      	ldrb	r6, [r4, r7]
   3aa0e:	f016 0608 	ands.w	r6, r6, #8
   3aa12:	d135      	bne.n	3aa80 <_strtol_l.isra.0+0x84>
   3aa14:	2c2d      	cmp	r4, #45	; 0x2d
   3aa16:	d135      	bne.n	3aa84 <_strtol_l.isra.0+0x88>
   3aa18:	782c      	ldrb	r4, [r5, #0]
   3aa1a:	f04f 0801 	mov.w	r8, #1
   3aa1e:	1c85      	adds	r5, r0, #2
   3aa20:	2b00      	cmp	r3, #0
   3aa22:	d05c      	beq.n	3aade <_strtol_l.isra.0+0xe2>
   3aa24:	2b10      	cmp	r3, #16
   3aa26:	d109      	bne.n	3aa3c <_strtol_l.isra.0+0x40>
   3aa28:	2c30      	cmp	r4, #48	; 0x30
   3aa2a:	d107      	bne.n	3aa3c <_strtol_l.isra.0+0x40>
   3aa2c:	7828      	ldrb	r0, [r5, #0]
   3aa2e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3aa32:	2858      	cmp	r0, #88	; 0x58
   3aa34:	d14e      	bne.n	3aad4 <_strtol_l.isra.0+0xd8>
   3aa36:	786c      	ldrb	r4, [r5, #1]
   3aa38:	2310      	movs	r3, #16
   3aa3a:	3502      	adds	r5, #2
   3aa3c:	f1b8 0f00 	cmp.w	r8, #0
   3aa40:	f04f 0700 	mov.w	r7, #0
   3aa44:	bf14      	ite	ne
   3aa46:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   3aa4a:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   3aa4e:	4638      	mov	r0, r7
   3aa50:	fbbc f9f3 	udiv	r9, ip, r3
   3aa54:	fb03 ca19 	mls	sl, r3, r9, ip
   3aa58:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   3aa5c:	2e09      	cmp	r6, #9
   3aa5e:	d817      	bhi.n	3aa90 <_strtol_l.isra.0+0x94>
   3aa60:	4634      	mov	r4, r6
   3aa62:	42a3      	cmp	r3, r4
   3aa64:	dd23      	ble.n	3aaae <_strtol_l.isra.0+0xb2>
   3aa66:	1c7e      	adds	r6, r7, #1
   3aa68:	d007      	beq.n	3aa7a <_strtol_l.isra.0+0x7e>
   3aa6a:	4581      	cmp	r9, r0
   3aa6c:	d31c      	bcc.n	3aaa8 <_strtol_l.isra.0+0xac>
   3aa6e:	d101      	bne.n	3aa74 <_strtol_l.isra.0+0x78>
   3aa70:	45a2      	cmp	sl, r4
   3aa72:	db19      	blt.n	3aaa8 <_strtol_l.isra.0+0xac>
   3aa74:	fb00 4003 	mla	r0, r0, r3, r4
   3aa78:	2701      	movs	r7, #1
   3aa7a:	f815 4b01 	ldrb.w	r4, [r5], #1
   3aa7e:	e7eb      	b.n	3aa58 <_strtol_l.isra.0+0x5c>
   3aa80:	4628      	mov	r0, r5
   3aa82:	e7c0      	b.n	3aa06 <_strtol_l.isra.0+0xa>
   3aa84:	2c2b      	cmp	r4, #43	; 0x2b
   3aa86:	46b0      	mov	r8, r6
   3aa88:	bf04      	itt	eq
   3aa8a:	782c      	ldrbeq	r4, [r5, #0]
   3aa8c:	1c85      	addeq	r5, r0, #2
   3aa8e:	e7c7      	b.n	3aa20 <_strtol_l.isra.0+0x24>
   3aa90:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   3aa94:	2e19      	cmp	r6, #25
   3aa96:	d801      	bhi.n	3aa9c <_strtol_l.isra.0+0xa0>
   3aa98:	3c37      	subs	r4, #55	; 0x37
   3aa9a:	e7e2      	b.n	3aa62 <_strtol_l.isra.0+0x66>
   3aa9c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   3aaa0:	2e19      	cmp	r6, #25
   3aaa2:	d804      	bhi.n	3aaae <_strtol_l.isra.0+0xb2>
   3aaa4:	3c57      	subs	r4, #87	; 0x57
   3aaa6:	e7dc      	b.n	3aa62 <_strtol_l.isra.0+0x66>
   3aaa8:	f04f 37ff 	mov.w	r7, #4294967295
   3aaac:	e7e5      	b.n	3aa7a <_strtol_l.isra.0+0x7e>
   3aaae:	1c7b      	adds	r3, r7, #1
   3aab0:	d106      	bne.n	3aac0 <_strtol_l.isra.0+0xc4>
   3aab2:	2322      	movs	r3, #34	; 0x22
   3aab4:	4660      	mov	r0, ip
   3aab6:	f8ce 3000 	str.w	r3, [lr]
   3aaba:	b942      	cbnz	r2, 3aace <_strtol_l.isra.0+0xd2>
   3aabc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3aac0:	f1b8 0f00 	cmp.w	r8, #0
   3aac4:	d000      	beq.n	3aac8 <_strtol_l.isra.0+0xcc>
   3aac6:	4240      	negs	r0, r0
   3aac8:	2a00      	cmp	r2, #0
   3aaca:	d0f7      	beq.n	3aabc <_strtol_l.isra.0+0xc0>
   3aacc:	b107      	cbz	r7, 3aad0 <_strtol_l.isra.0+0xd4>
   3aace:	1e69      	subs	r1, r5, #1
   3aad0:	6011      	str	r1, [r2, #0]
   3aad2:	e7f3      	b.n	3aabc <_strtol_l.isra.0+0xc0>
   3aad4:	2430      	movs	r4, #48	; 0x30
   3aad6:	2b00      	cmp	r3, #0
   3aad8:	d1b0      	bne.n	3aa3c <_strtol_l.isra.0+0x40>
   3aada:	2308      	movs	r3, #8
   3aadc:	e7ae      	b.n	3aa3c <_strtol_l.isra.0+0x40>
   3aade:	2c30      	cmp	r4, #48	; 0x30
   3aae0:	d0a4      	beq.n	3aa2c <_strtol_l.isra.0+0x30>
   3aae2:	230a      	movs	r3, #10
   3aae4:	e7aa      	b.n	3aa3c <_strtol_l.isra.0+0x40>
   3aae6:	bf00      	nop
   3aae8:	00046c56 	.word	0x00046c56

0003aaec <strtol>:
   3aaec:	4613      	mov	r3, r2
   3aaee:	460a      	mov	r2, r1
   3aaf0:	4601      	mov	r1, r0
   3aaf2:	4802      	ldr	r0, [pc, #8]	; (3aafc <strtol+0x10>)
   3aaf4:	6800      	ldr	r0, [r0, #0]
   3aaf6:	f7ff bf81 	b.w	3a9fc <_strtol_l.isra.0>
   3aafa:	bf00      	nop
   3aafc:	2003157c 	.word	0x2003157c

0003ab00 <_strtoul_l.isra.0>:
   3ab00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3ab04:	4686      	mov	lr, r0
   3ab06:	4f37      	ldr	r7, [pc, #220]	; (3abe4 <_strtoul_l.isra.0+0xe4>)
   3ab08:	4608      	mov	r0, r1
   3ab0a:	4605      	mov	r5, r0
   3ab0c:	f815 4b01 	ldrb.w	r4, [r5], #1
   3ab10:	5de6      	ldrb	r6, [r4, r7]
   3ab12:	f016 0608 	ands.w	r6, r6, #8
   3ab16:	d131      	bne.n	3ab7c <_strtoul_l.isra.0+0x7c>
   3ab18:	2c2d      	cmp	r4, #45	; 0x2d
   3ab1a:	d131      	bne.n	3ab80 <_strtoul_l.isra.0+0x80>
   3ab1c:	782c      	ldrb	r4, [r5, #0]
   3ab1e:	f04f 0801 	mov.w	r8, #1
   3ab22:	1c85      	adds	r5, r0, #2
   3ab24:	2b00      	cmp	r3, #0
   3ab26:	d059      	beq.n	3abdc <_strtoul_l.isra.0+0xdc>
   3ab28:	2b10      	cmp	r3, #16
   3ab2a:	d109      	bne.n	3ab40 <_strtoul_l.isra.0+0x40>
   3ab2c:	2c30      	cmp	r4, #48	; 0x30
   3ab2e:	d107      	bne.n	3ab40 <_strtoul_l.isra.0+0x40>
   3ab30:	7828      	ldrb	r0, [r5, #0]
   3ab32:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3ab36:	2858      	cmp	r0, #88	; 0x58
   3ab38:	d14b      	bne.n	3abd2 <_strtoul_l.isra.0+0xd2>
   3ab3a:	786c      	ldrb	r4, [r5, #1]
   3ab3c:	2310      	movs	r3, #16
   3ab3e:	3502      	adds	r5, #2
   3ab40:	f04f 3cff 	mov.w	ip, #4294967295
   3ab44:	2600      	movs	r6, #0
   3ab46:	fbbc fcf3 	udiv	ip, ip, r3
   3ab4a:	fb03 f90c 	mul.w	r9, r3, ip
   3ab4e:	4630      	mov	r0, r6
   3ab50:	ea6f 0909 	mvn.w	r9, r9
   3ab54:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   3ab58:	2f09      	cmp	r7, #9
   3ab5a:	d817      	bhi.n	3ab8c <_strtoul_l.isra.0+0x8c>
   3ab5c:	463c      	mov	r4, r7
   3ab5e:	42a3      	cmp	r3, r4
   3ab60:	dd23      	ble.n	3abaa <_strtoul_l.isra.0+0xaa>
   3ab62:	2e00      	cmp	r6, #0
   3ab64:	db1e      	blt.n	3aba4 <_strtoul_l.isra.0+0xa4>
   3ab66:	4584      	cmp	ip, r0
   3ab68:	d31c      	bcc.n	3aba4 <_strtoul_l.isra.0+0xa4>
   3ab6a:	d101      	bne.n	3ab70 <_strtoul_l.isra.0+0x70>
   3ab6c:	45a1      	cmp	r9, r4
   3ab6e:	db19      	blt.n	3aba4 <_strtoul_l.isra.0+0xa4>
   3ab70:	fb00 4003 	mla	r0, r0, r3, r4
   3ab74:	2601      	movs	r6, #1
   3ab76:	f815 4b01 	ldrb.w	r4, [r5], #1
   3ab7a:	e7eb      	b.n	3ab54 <_strtoul_l.isra.0+0x54>
   3ab7c:	4628      	mov	r0, r5
   3ab7e:	e7c4      	b.n	3ab0a <_strtoul_l.isra.0+0xa>
   3ab80:	2c2b      	cmp	r4, #43	; 0x2b
   3ab82:	46b0      	mov	r8, r6
   3ab84:	bf04      	itt	eq
   3ab86:	782c      	ldrbeq	r4, [r5, #0]
   3ab88:	1c85      	addeq	r5, r0, #2
   3ab8a:	e7cb      	b.n	3ab24 <_strtoul_l.isra.0+0x24>
   3ab8c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   3ab90:	2f19      	cmp	r7, #25
   3ab92:	d801      	bhi.n	3ab98 <_strtoul_l.isra.0+0x98>
   3ab94:	3c37      	subs	r4, #55	; 0x37
   3ab96:	e7e2      	b.n	3ab5e <_strtoul_l.isra.0+0x5e>
   3ab98:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   3ab9c:	2f19      	cmp	r7, #25
   3ab9e:	d804      	bhi.n	3abaa <_strtoul_l.isra.0+0xaa>
   3aba0:	3c57      	subs	r4, #87	; 0x57
   3aba2:	e7dc      	b.n	3ab5e <_strtoul_l.isra.0+0x5e>
   3aba4:	f04f 36ff 	mov.w	r6, #4294967295
   3aba8:	e7e5      	b.n	3ab76 <_strtoul_l.isra.0+0x76>
   3abaa:	2e00      	cmp	r6, #0
   3abac:	da07      	bge.n	3abbe <_strtoul_l.isra.0+0xbe>
   3abae:	2322      	movs	r3, #34	; 0x22
   3abb0:	f04f 30ff 	mov.w	r0, #4294967295
   3abb4:	f8ce 3000 	str.w	r3, [lr]
   3abb8:	b942      	cbnz	r2, 3abcc <_strtoul_l.isra.0+0xcc>
   3abba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3abbe:	f1b8 0f00 	cmp.w	r8, #0
   3abc2:	d000      	beq.n	3abc6 <_strtoul_l.isra.0+0xc6>
   3abc4:	4240      	negs	r0, r0
   3abc6:	2a00      	cmp	r2, #0
   3abc8:	d0f7      	beq.n	3abba <_strtoul_l.isra.0+0xba>
   3abca:	b106      	cbz	r6, 3abce <_strtoul_l.isra.0+0xce>
   3abcc:	1e69      	subs	r1, r5, #1
   3abce:	6011      	str	r1, [r2, #0]
   3abd0:	e7f3      	b.n	3abba <_strtoul_l.isra.0+0xba>
   3abd2:	2430      	movs	r4, #48	; 0x30
   3abd4:	2b00      	cmp	r3, #0
   3abd6:	d1b3      	bne.n	3ab40 <_strtoul_l.isra.0+0x40>
   3abd8:	2308      	movs	r3, #8
   3abda:	e7b1      	b.n	3ab40 <_strtoul_l.isra.0+0x40>
   3abdc:	2c30      	cmp	r4, #48	; 0x30
   3abde:	d0a7      	beq.n	3ab30 <_strtoul_l.isra.0+0x30>
   3abe0:	230a      	movs	r3, #10
   3abe2:	e7ad      	b.n	3ab40 <_strtoul_l.isra.0+0x40>
   3abe4:	00046c56 	.word	0x00046c56

0003abe8 <strtoul>:
   3abe8:	4613      	mov	r3, r2
   3abea:	460a      	mov	r2, r1
   3abec:	4601      	mov	r1, r0
   3abee:	4802      	ldr	r0, [pc, #8]	; (3abf8 <strtoul+0x10>)
   3abf0:	6800      	ldr	r0, [r0, #0]
   3abf2:	f7ff bf85 	b.w	3ab00 <_strtoul_l.isra.0>
   3abf6:	bf00      	nop
   3abf8:	2003157c 	.word	0x2003157c

0003abfc <vsniprintf>:
   3abfc:	b507      	push	{r0, r1, r2, lr}
   3abfe:	9300      	str	r3, [sp, #0]
   3ac00:	4613      	mov	r3, r2
   3ac02:	460a      	mov	r2, r1
   3ac04:	4601      	mov	r1, r0
   3ac06:	4803      	ldr	r0, [pc, #12]	; (3ac14 <vsniprintf+0x18>)
   3ac08:	6800      	ldr	r0, [r0, #0]
   3ac0a:	f004 fabf 	bl	3f18c <_vsniprintf_r>
   3ac0e:	b003      	add	sp, #12
   3ac10:	f85d fb04 	ldr.w	pc, [sp], #4
   3ac14:	2003157c 	.word	0x2003157c

0003ac18 <_vsiprintf_r>:
   3ac18:	b500      	push	{lr}
   3ac1a:	b09b      	sub	sp, #108	; 0x6c
   3ac1c:	9100      	str	r1, [sp, #0]
   3ac1e:	9104      	str	r1, [sp, #16]
   3ac20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3ac24:	9105      	str	r1, [sp, #20]
   3ac26:	9102      	str	r1, [sp, #8]
   3ac28:	4905      	ldr	r1, [pc, #20]	; (3ac40 <_vsiprintf_r+0x28>)
   3ac2a:	9103      	str	r1, [sp, #12]
   3ac2c:	4669      	mov	r1, sp
   3ac2e:	f000 fddf 	bl	3b7f0 <_svfiprintf_r>
   3ac32:	9b00      	ldr	r3, [sp, #0]
   3ac34:	2200      	movs	r2, #0
   3ac36:	701a      	strb	r2, [r3, #0]
   3ac38:	b01b      	add	sp, #108	; 0x6c
   3ac3a:	f85d fb04 	ldr.w	pc, [sp], #4
   3ac3e:	bf00      	nop
   3ac40:	ffff0208 	.word	0xffff0208

0003ac44 <vsiprintf>:
   3ac44:	4613      	mov	r3, r2
   3ac46:	460a      	mov	r2, r1
   3ac48:	4601      	mov	r1, r0
   3ac4a:	4802      	ldr	r0, [pc, #8]	; (3ac54 <vsiprintf+0x10>)
   3ac4c:	6800      	ldr	r0, [r0, #0]
   3ac4e:	f7ff bfe3 	b.w	3ac18 <_vsiprintf_r>
   3ac52:	bf00      	nop
   3ac54:	2003157c 	.word	0x2003157c

0003ac58 <__swbuf_r>:
   3ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ac5a:	460e      	mov	r6, r1
   3ac5c:	4614      	mov	r4, r2
   3ac5e:	4605      	mov	r5, r0
   3ac60:	b118      	cbz	r0, 3ac6a <__swbuf_r+0x12>
   3ac62:	6983      	ldr	r3, [r0, #24]
   3ac64:	b90b      	cbnz	r3, 3ac6a <__swbuf_r+0x12>
   3ac66:	f000 f9ff 	bl	3b068 <__sinit>
   3ac6a:	4b21      	ldr	r3, [pc, #132]	; (3acf0 <__swbuf_r+0x98>)
   3ac6c:	429c      	cmp	r4, r3
   3ac6e:	d12b      	bne.n	3acc8 <__swbuf_r+0x70>
   3ac70:	686c      	ldr	r4, [r5, #4]
   3ac72:	69a3      	ldr	r3, [r4, #24]
   3ac74:	60a3      	str	r3, [r4, #8]
   3ac76:	89a3      	ldrh	r3, [r4, #12]
   3ac78:	071a      	lsls	r2, r3, #28
   3ac7a:	d52f      	bpl.n	3acdc <__swbuf_r+0x84>
   3ac7c:	6923      	ldr	r3, [r4, #16]
   3ac7e:	b36b      	cbz	r3, 3acdc <__swbuf_r+0x84>
   3ac80:	6923      	ldr	r3, [r4, #16]
   3ac82:	b2f6      	uxtb	r6, r6
   3ac84:	6820      	ldr	r0, [r4, #0]
   3ac86:	4637      	mov	r7, r6
   3ac88:	1ac0      	subs	r0, r0, r3
   3ac8a:	6963      	ldr	r3, [r4, #20]
   3ac8c:	4283      	cmp	r3, r0
   3ac8e:	dc04      	bgt.n	3ac9a <__swbuf_r+0x42>
   3ac90:	4621      	mov	r1, r4
   3ac92:	4628      	mov	r0, r5
   3ac94:	f000 f96a 	bl	3af6c <_fflush_r>
   3ac98:	bb30      	cbnz	r0, 3ace8 <__swbuf_r+0x90>
   3ac9a:	68a3      	ldr	r3, [r4, #8]
   3ac9c:	3001      	adds	r0, #1
   3ac9e:	3b01      	subs	r3, #1
   3aca0:	60a3      	str	r3, [r4, #8]
   3aca2:	6823      	ldr	r3, [r4, #0]
   3aca4:	1c5a      	adds	r2, r3, #1
   3aca6:	6022      	str	r2, [r4, #0]
   3aca8:	701e      	strb	r6, [r3, #0]
   3acaa:	6963      	ldr	r3, [r4, #20]
   3acac:	4283      	cmp	r3, r0
   3acae:	d004      	beq.n	3acba <__swbuf_r+0x62>
   3acb0:	89a3      	ldrh	r3, [r4, #12]
   3acb2:	07db      	lsls	r3, r3, #31
   3acb4:	d506      	bpl.n	3acc4 <__swbuf_r+0x6c>
   3acb6:	2e0a      	cmp	r6, #10
   3acb8:	d104      	bne.n	3acc4 <__swbuf_r+0x6c>
   3acba:	4621      	mov	r1, r4
   3acbc:	4628      	mov	r0, r5
   3acbe:	f000 f955 	bl	3af6c <_fflush_r>
   3acc2:	b988      	cbnz	r0, 3ace8 <__swbuf_r+0x90>
   3acc4:	4638      	mov	r0, r7
   3acc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3acc8:	4b0a      	ldr	r3, [pc, #40]	; (3acf4 <__swbuf_r+0x9c>)
   3acca:	429c      	cmp	r4, r3
   3accc:	d101      	bne.n	3acd2 <__swbuf_r+0x7a>
   3acce:	68ac      	ldr	r4, [r5, #8]
   3acd0:	e7cf      	b.n	3ac72 <__swbuf_r+0x1a>
   3acd2:	4b09      	ldr	r3, [pc, #36]	; (3acf8 <__swbuf_r+0xa0>)
   3acd4:	429c      	cmp	r4, r3
   3acd6:	bf08      	it	eq
   3acd8:	68ec      	ldreq	r4, [r5, #12]
   3acda:	e7ca      	b.n	3ac72 <__swbuf_r+0x1a>
   3acdc:	4621      	mov	r1, r4
   3acde:	4628      	mov	r0, r5
   3ace0:	f000 f81e 	bl	3ad20 <__swsetup_r>
   3ace4:	2800      	cmp	r0, #0
   3ace6:	d0cb      	beq.n	3ac80 <__swbuf_r+0x28>
   3ace8:	f04f 37ff 	mov.w	r7, #4294967295
   3acec:	e7ea      	b.n	3acc4 <__swbuf_r+0x6c>
   3acee:	bf00      	nop
   3acf0:	00041218 	.word	0x00041218
   3acf4:	00041238 	.word	0x00041238
   3acf8:	000411f8 	.word	0x000411f8

0003acfc <_write_r>:
   3acfc:	b538      	push	{r3, r4, r5, lr}
   3acfe:	4605      	mov	r5, r0
   3ad00:	4c06      	ldr	r4, [pc, #24]	; (3ad1c <_write_r+0x20>)
   3ad02:	4608      	mov	r0, r1
   3ad04:	4611      	mov	r1, r2
   3ad06:	2200      	movs	r2, #0
   3ad08:	6022      	str	r2, [r4, #0]
   3ad0a:	461a      	mov	r2, r3
   3ad0c:	f001 fe8a 	bl	3ca24 <_write>
   3ad10:	1c43      	adds	r3, r0, #1
   3ad12:	d102      	bne.n	3ad1a <_write_r+0x1e>
   3ad14:	6823      	ldr	r3, [r4, #0]
   3ad16:	b103      	cbz	r3, 3ad1a <_write_r+0x1e>
   3ad18:	602b      	str	r3, [r5, #0]
   3ad1a:	bd38      	pop	{r3, r4, r5, pc}
   3ad1c:	2002bb10 	.word	0x2002bb10

0003ad20 <__swsetup_r>:
   3ad20:	4b32      	ldr	r3, [pc, #200]	; (3adec <__swsetup_r+0xcc>)
   3ad22:	b570      	push	{r4, r5, r6, lr}
   3ad24:	681d      	ldr	r5, [r3, #0]
   3ad26:	4606      	mov	r6, r0
   3ad28:	460c      	mov	r4, r1
   3ad2a:	b125      	cbz	r5, 3ad36 <__swsetup_r+0x16>
   3ad2c:	69ab      	ldr	r3, [r5, #24]
   3ad2e:	b913      	cbnz	r3, 3ad36 <__swsetup_r+0x16>
   3ad30:	4628      	mov	r0, r5
   3ad32:	f000 f999 	bl	3b068 <__sinit>
   3ad36:	4b2e      	ldr	r3, [pc, #184]	; (3adf0 <__swsetup_r+0xd0>)
   3ad38:	429c      	cmp	r4, r3
   3ad3a:	d10f      	bne.n	3ad5c <__swsetup_r+0x3c>
   3ad3c:	686c      	ldr	r4, [r5, #4]
   3ad3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3ad42:	b29a      	uxth	r2, r3
   3ad44:	0715      	lsls	r5, r2, #28
   3ad46:	d42c      	bmi.n	3ada2 <__swsetup_r+0x82>
   3ad48:	06d0      	lsls	r0, r2, #27
   3ad4a:	d411      	bmi.n	3ad70 <__swsetup_r+0x50>
   3ad4c:	2209      	movs	r2, #9
   3ad4e:	6032      	str	r2, [r6, #0]
   3ad50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3ad54:	f04f 30ff 	mov.w	r0, #4294967295
   3ad58:	81a3      	strh	r3, [r4, #12]
   3ad5a:	e03e      	b.n	3adda <__swsetup_r+0xba>
   3ad5c:	4b25      	ldr	r3, [pc, #148]	; (3adf4 <__swsetup_r+0xd4>)
   3ad5e:	429c      	cmp	r4, r3
   3ad60:	d101      	bne.n	3ad66 <__swsetup_r+0x46>
   3ad62:	68ac      	ldr	r4, [r5, #8]
   3ad64:	e7eb      	b.n	3ad3e <__swsetup_r+0x1e>
   3ad66:	4b24      	ldr	r3, [pc, #144]	; (3adf8 <__swsetup_r+0xd8>)
   3ad68:	429c      	cmp	r4, r3
   3ad6a:	bf08      	it	eq
   3ad6c:	68ec      	ldreq	r4, [r5, #12]
   3ad6e:	e7e6      	b.n	3ad3e <__swsetup_r+0x1e>
   3ad70:	0751      	lsls	r1, r2, #29
   3ad72:	d512      	bpl.n	3ad9a <__swsetup_r+0x7a>
   3ad74:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3ad76:	b141      	cbz	r1, 3ad8a <__swsetup_r+0x6a>
   3ad78:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3ad7c:	4299      	cmp	r1, r3
   3ad7e:	d002      	beq.n	3ad86 <__swsetup_r+0x66>
   3ad80:	4630      	mov	r0, r6
   3ad82:	f7ff f853 	bl	39e2c <_free_r>
   3ad86:	2300      	movs	r3, #0
   3ad88:	6363      	str	r3, [r4, #52]	; 0x34
   3ad8a:	89a3      	ldrh	r3, [r4, #12]
   3ad8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   3ad90:	81a3      	strh	r3, [r4, #12]
   3ad92:	2300      	movs	r3, #0
   3ad94:	6063      	str	r3, [r4, #4]
   3ad96:	6923      	ldr	r3, [r4, #16]
   3ad98:	6023      	str	r3, [r4, #0]
   3ad9a:	89a3      	ldrh	r3, [r4, #12]
   3ad9c:	f043 0308 	orr.w	r3, r3, #8
   3ada0:	81a3      	strh	r3, [r4, #12]
   3ada2:	6923      	ldr	r3, [r4, #16]
   3ada4:	b94b      	cbnz	r3, 3adba <__swsetup_r+0x9a>
   3ada6:	89a3      	ldrh	r3, [r4, #12]
   3ada8:	f403 7320 	and.w	r3, r3, #640	; 0x280
   3adac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3adb0:	d003      	beq.n	3adba <__swsetup_r+0x9a>
   3adb2:	4621      	mov	r1, r4
   3adb4:	4630      	mov	r0, r6
   3adb6:	f000 fc0d 	bl	3b5d4 <__smakebuf_r>
   3adba:	89a2      	ldrh	r2, [r4, #12]
   3adbc:	f012 0301 	ands.w	r3, r2, #1
   3adc0:	d00c      	beq.n	3addc <__swsetup_r+0xbc>
   3adc2:	2300      	movs	r3, #0
   3adc4:	60a3      	str	r3, [r4, #8]
   3adc6:	6963      	ldr	r3, [r4, #20]
   3adc8:	425b      	negs	r3, r3
   3adca:	61a3      	str	r3, [r4, #24]
   3adcc:	6923      	ldr	r3, [r4, #16]
   3adce:	b953      	cbnz	r3, 3ade6 <__swsetup_r+0xc6>
   3add0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3add4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   3add8:	d1ba      	bne.n	3ad50 <__swsetup_r+0x30>
   3adda:	bd70      	pop	{r4, r5, r6, pc}
   3addc:	0792      	lsls	r2, r2, #30
   3adde:	bf58      	it	pl
   3ade0:	6963      	ldrpl	r3, [r4, #20]
   3ade2:	60a3      	str	r3, [r4, #8]
   3ade4:	e7f2      	b.n	3adcc <__swsetup_r+0xac>
   3ade6:	2000      	movs	r0, #0
   3ade8:	e7f7      	b.n	3adda <__swsetup_r+0xba>
   3adea:	bf00      	nop
   3adec:	2003157c 	.word	0x2003157c
   3adf0:	00041218 	.word	0x00041218
   3adf4:	00041238 	.word	0x00041238
   3adf8:	000411f8 	.word	0x000411f8

0003adfc <__chk_fail>:
   3adfc:	b500      	push	{lr}
   3adfe:	b08d      	sub	sp, #52	; 0x34
   3ae00:	4b0f      	ldr	r3, [pc, #60]	; (3ae40 <__chk_fail+0x44>)
   3ae02:	466a      	mov	r2, sp
   3ae04:	f103 0628 	add.w	r6, r3, #40	; 0x28
   3ae08:	4615      	mov	r5, r2
   3ae0a:	6818      	ldr	r0, [r3, #0]
   3ae0c:	3308      	adds	r3, #8
   3ae0e:	f853 1c04 	ldr.w	r1, [r3, #-4]
   3ae12:	4614      	mov	r4, r2
   3ae14:	42b3      	cmp	r3, r6
   3ae16:	c403      	stmia	r4!, {r0, r1}
   3ae18:	4622      	mov	r2, r4
   3ae1a:	d1f6      	bne.n	3ae0a <__chk_fail+0xe>
   3ae1c:	6818      	ldr	r0, [r3, #0]
   3ae1e:	889b      	ldrh	r3, [r3, #4]
   3ae20:	6020      	str	r0, [r4, #0]
   3ae22:	4628      	mov	r0, r5
   3ae24:	80a3      	strh	r3, [r4, #4]
   3ae26:	f7e2 f97d 	bl	1d124 <strlen>
   3ae2a:	4629      	mov	r1, r5
   3ae2c:	4602      	mov	r2, r0
   3ae2e:	2002      	movs	r0, #2
   3ae30:	f001 fdf8 	bl	3ca24 <_write>
   3ae34:	2006      	movs	r0, #6
   3ae36:	f001 f879 	bl	3bf2c <raise>
   3ae3a:	207f      	movs	r0, #127	; 0x7f
   3ae3c:	f7e9 ff9c 	bl	24d78 <_exit>
   3ae40:	00046d95 	.word	0x00046d95

0003ae44 <_close_r>:
   3ae44:	b538      	push	{r3, r4, r5, lr}
   3ae46:	2300      	movs	r3, #0
   3ae48:	4c05      	ldr	r4, [pc, #20]	; (3ae60 <_close_r+0x1c>)
   3ae4a:	4605      	mov	r5, r0
   3ae4c:	4608      	mov	r0, r1
   3ae4e:	6023      	str	r3, [r4, #0]
   3ae50:	f001 fdec 	bl	3ca2c <_close>
   3ae54:	1c43      	adds	r3, r0, #1
   3ae56:	d102      	bne.n	3ae5e <_close_r+0x1a>
   3ae58:	6823      	ldr	r3, [r4, #0]
   3ae5a:	b103      	cbz	r3, 3ae5e <_close_r+0x1a>
   3ae5c:	602b      	str	r3, [r5, #0]
   3ae5e:	bd38      	pop	{r3, r4, r5, pc}
   3ae60:	2002bb10 	.word	0x2002bb10

0003ae64 <__sflush_r>:
   3ae64:	898a      	ldrh	r2, [r1, #12]
   3ae66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ae6a:	4605      	mov	r5, r0
   3ae6c:	0710      	lsls	r0, r2, #28
   3ae6e:	460c      	mov	r4, r1
   3ae70:	d458      	bmi.n	3af24 <__sflush_r+0xc0>
   3ae72:	684b      	ldr	r3, [r1, #4]
   3ae74:	2b00      	cmp	r3, #0
   3ae76:	dc05      	bgt.n	3ae84 <__sflush_r+0x20>
   3ae78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3ae7a:	2b00      	cmp	r3, #0
   3ae7c:	dc02      	bgt.n	3ae84 <__sflush_r+0x20>
   3ae7e:	2000      	movs	r0, #0
   3ae80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ae84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3ae86:	2e00      	cmp	r6, #0
   3ae88:	d0f9      	beq.n	3ae7e <__sflush_r+0x1a>
   3ae8a:	2300      	movs	r3, #0
   3ae8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   3ae90:	682f      	ldr	r7, [r5, #0]
   3ae92:	602b      	str	r3, [r5, #0]
   3ae94:	d032      	beq.n	3aefc <__sflush_r+0x98>
   3ae96:	6d60      	ldr	r0, [r4, #84]	; 0x54
   3ae98:	89a3      	ldrh	r3, [r4, #12]
   3ae9a:	075a      	lsls	r2, r3, #29
   3ae9c:	d505      	bpl.n	3aeaa <__sflush_r+0x46>
   3ae9e:	6863      	ldr	r3, [r4, #4]
   3aea0:	1ac0      	subs	r0, r0, r3
   3aea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3aea4:	b10b      	cbz	r3, 3aeaa <__sflush_r+0x46>
   3aea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3aea8:	1ac0      	subs	r0, r0, r3
   3aeaa:	2300      	movs	r3, #0
   3aeac:	4602      	mov	r2, r0
   3aeae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3aeb0:	4628      	mov	r0, r5
   3aeb2:	6a21      	ldr	r1, [r4, #32]
   3aeb4:	47b0      	blx	r6
   3aeb6:	1c43      	adds	r3, r0, #1
   3aeb8:	89a3      	ldrh	r3, [r4, #12]
   3aeba:	d106      	bne.n	3aeca <__sflush_r+0x66>
   3aebc:	6829      	ldr	r1, [r5, #0]
   3aebe:	291d      	cmp	r1, #29
   3aec0:	d82c      	bhi.n	3af1c <__sflush_r+0xb8>
   3aec2:	4a29      	ldr	r2, [pc, #164]	; (3af68 <__sflush_r+0x104>)
   3aec4:	40ca      	lsrs	r2, r1
   3aec6:	07d6      	lsls	r6, r2, #31
   3aec8:	d528      	bpl.n	3af1c <__sflush_r+0xb8>
   3aeca:	2200      	movs	r2, #0
   3aecc:	04d9      	lsls	r1, r3, #19
   3aece:	6062      	str	r2, [r4, #4]
   3aed0:	6922      	ldr	r2, [r4, #16]
   3aed2:	6022      	str	r2, [r4, #0]
   3aed4:	d504      	bpl.n	3aee0 <__sflush_r+0x7c>
   3aed6:	1c42      	adds	r2, r0, #1
   3aed8:	d101      	bne.n	3aede <__sflush_r+0x7a>
   3aeda:	682b      	ldr	r3, [r5, #0]
   3aedc:	b903      	cbnz	r3, 3aee0 <__sflush_r+0x7c>
   3aede:	6560      	str	r0, [r4, #84]	; 0x54
   3aee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3aee2:	602f      	str	r7, [r5, #0]
   3aee4:	2900      	cmp	r1, #0
   3aee6:	d0ca      	beq.n	3ae7e <__sflush_r+0x1a>
   3aee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3aeec:	4299      	cmp	r1, r3
   3aeee:	d002      	beq.n	3aef6 <__sflush_r+0x92>
   3aef0:	4628      	mov	r0, r5
   3aef2:	f7fe ff9b 	bl	39e2c <_free_r>
   3aef6:	2000      	movs	r0, #0
   3aef8:	6360      	str	r0, [r4, #52]	; 0x34
   3aefa:	e7c1      	b.n	3ae80 <__sflush_r+0x1c>
   3aefc:	6a21      	ldr	r1, [r4, #32]
   3aefe:	2301      	movs	r3, #1
   3af00:	4628      	mov	r0, r5
   3af02:	47b0      	blx	r6
   3af04:	1c41      	adds	r1, r0, #1
   3af06:	d1c7      	bne.n	3ae98 <__sflush_r+0x34>
   3af08:	682b      	ldr	r3, [r5, #0]
   3af0a:	2b00      	cmp	r3, #0
   3af0c:	d0c4      	beq.n	3ae98 <__sflush_r+0x34>
   3af0e:	2b1d      	cmp	r3, #29
   3af10:	d001      	beq.n	3af16 <__sflush_r+0xb2>
   3af12:	2b16      	cmp	r3, #22
   3af14:	d101      	bne.n	3af1a <__sflush_r+0xb6>
   3af16:	602f      	str	r7, [r5, #0]
   3af18:	e7b1      	b.n	3ae7e <__sflush_r+0x1a>
   3af1a:	89a3      	ldrh	r3, [r4, #12]
   3af1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3af20:	81a3      	strh	r3, [r4, #12]
   3af22:	e7ad      	b.n	3ae80 <__sflush_r+0x1c>
   3af24:	690f      	ldr	r7, [r1, #16]
   3af26:	2f00      	cmp	r7, #0
   3af28:	d0a9      	beq.n	3ae7e <__sflush_r+0x1a>
   3af2a:	0793      	lsls	r3, r2, #30
   3af2c:	680e      	ldr	r6, [r1, #0]
   3af2e:	600f      	str	r7, [r1, #0]
   3af30:	bf0c      	ite	eq
   3af32:	694b      	ldreq	r3, [r1, #20]
   3af34:	2300      	movne	r3, #0
   3af36:	eba6 0807 	sub.w	r8, r6, r7
   3af3a:	608b      	str	r3, [r1, #8]
   3af3c:	f1b8 0f00 	cmp.w	r8, #0
   3af40:	dd9d      	ble.n	3ae7e <__sflush_r+0x1a>
   3af42:	4643      	mov	r3, r8
   3af44:	463a      	mov	r2, r7
   3af46:	6a21      	ldr	r1, [r4, #32]
   3af48:	4628      	mov	r0, r5
   3af4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3af4c:	47b0      	blx	r6
   3af4e:	2800      	cmp	r0, #0
   3af50:	dc06      	bgt.n	3af60 <__sflush_r+0xfc>
   3af52:	89a3      	ldrh	r3, [r4, #12]
   3af54:	f04f 30ff 	mov.w	r0, #4294967295
   3af58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3af5c:	81a3      	strh	r3, [r4, #12]
   3af5e:	e78f      	b.n	3ae80 <__sflush_r+0x1c>
   3af60:	4407      	add	r7, r0
   3af62:	eba8 0800 	sub.w	r8, r8, r0
   3af66:	e7e9      	b.n	3af3c <__sflush_r+0xd8>
   3af68:	20400001 	.word	0x20400001

0003af6c <_fflush_r>:
   3af6c:	b538      	push	{r3, r4, r5, lr}
   3af6e:	690b      	ldr	r3, [r1, #16]
   3af70:	4605      	mov	r5, r0
   3af72:	460c      	mov	r4, r1
   3af74:	b913      	cbnz	r3, 3af7c <_fflush_r+0x10>
   3af76:	2500      	movs	r5, #0
   3af78:	4628      	mov	r0, r5
   3af7a:	bd38      	pop	{r3, r4, r5, pc}
   3af7c:	b118      	cbz	r0, 3af86 <_fflush_r+0x1a>
   3af7e:	6983      	ldr	r3, [r0, #24]
   3af80:	b90b      	cbnz	r3, 3af86 <_fflush_r+0x1a>
   3af82:	f000 f871 	bl	3b068 <__sinit>
   3af86:	4b14      	ldr	r3, [pc, #80]	; (3afd8 <_fflush_r+0x6c>)
   3af88:	429c      	cmp	r4, r3
   3af8a:	d11b      	bne.n	3afc4 <_fflush_r+0x58>
   3af8c:	686c      	ldr	r4, [r5, #4]
   3af8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3af92:	2b00      	cmp	r3, #0
   3af94:	d0ef      	beq.n	3af76 <_fflush_r+0xa>
   3af96:	6e62      	ldr	r2, [r4, #100]	; 0x64
   3af98:	07d0      	lsls	r0, r2, #31
   3af9a:	d404      	bmi.n	3afa6 <_fflush_r+0x3a>
   3af9c:	0599      	lsls	r1, r3, #22
   3af9e:	d402      	bmi.n	3afa6 <_fflush_r+0x3a>
   3afa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3afa2:	f004 faee 	bl	3f582 <__retarget_lock_acquire_recursive>
   3afa6:	4628      	mov	r0, r5
   3afa8:	4621      	mov	r1, r4
   3afaa:	f7ff ff5b 	bl	3ae64 <__sflush_r>
   3afae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3afb0:	4605      	mov	r5, r0
   3afb2:	07da      	lsls	r2, r3, #31
   3afb4:	d4e0      	bmi.n	3af78 <_fflush_r+0xc>
   3afb6:	89a3      	ldrh	r3, [r4, #12]
   3afb8:	059b      	lsls	r3, r3, #22
   3afba:	d4dd      	bmi.n	3af78 <_fflush_r+0xc>
   3afbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3afbe:	f004 fae1 	bl	3f584 <__retarget_lock_release_recursive>
   3afc2:	e7d9      	b.n	3af78 <_fflush_r+0xc>
   3afc4:	4b05      	ldr	r3, [pc, #20]	; (3afdc <_fflush_r+0x70>)
   3afc6:	429c      	cmp	r4, r3
   3afc8:	d101      	bne.n	3afce <_fflush_r+0x62>
   3afca:	68ac      	ldr	r4, [r5, #8]
   3afcc:	e7df      	b.n	3af8e <_fflush_r+0x22>
   3afce:	4b04      	ldr	r3, [pc, #16]	; (3afe0 <_fflush_r+0x74>)
   3afd0:	429c      	cmp	r4, r3
   3afd2:	bf08      	it	eq
   3afd4:	68ec      	ldreq	r4, [r5, #12]
   3afd6:	e7da      	b.n	3af8e <_fflush_r+0x22>
   3afd8:	00041218 	.word	0x00041218
   3afdc:	00041238 	.word	0x00041238
   3afe0:	000411f8 	.word	0x000411f8

0003afe4 <std>:
   3afe4:	2300      	movs	r3, #0
   3afe6:	b510      	push	{r4, lr}
   3afe8:	4604      	mov	r4, r0
   3afea:	6083      	str	r3, [r0, #8]
   3afec:	8181      	strh	r1, [r0, #12]
   3afee:	4619      	mov	r1, r3
   3aff0:	6643      	str	r3, [r0, #100]	; 0x64
   3aff2:	81c2      	strh	r2, [r0, #14]
   3aff4:	2208      	movs	r2, #8
   3aff6:	6183      	str	r3, [r0, #24]
   3aff8:	e9c0 3300 	strd	r3, r3, [r0]
   3affc:	e9c0 3304 	strd	r3, r3, [r0, #16]
   3b000:	305c      	adds	r0, #92	; 0x5c
   3b002:	f003 fe82 	bl	3ed0a <memset>
   3b006:	4b05      	ldr	r3, [pc, #20]	; (3b01c <std+0x38>)
   3b008:	6224      	str	r4, [r4, #32]
   3b00a:	6263      	str	r3, [r4, #36]	; 0x24
   3b00c:	4b04      	ldr	r3, [pc, #16]	; (3b020 <std+0x3c>)
   3b00e:	62a3      	str	r3, [r4, #40]	; 0x28
   3b010:	4b04      	ldr	r3, [pc, #16]	; (3b024 <std+0x40>)
   3b012:	62e3      	str	r3, [r4, #44]	; 0x2c
   3b014:	4b04      	ldr	r3, [pc, #16]	; (3b028 <std+0x44>)
   3b016:	6323      	str	r3, [r4, #48]	; 0x30
   3b018:	bd10      	pop	{r4, pc}
   3b01a:	bf00      	nop
   3b01c:	0003efb1 	.word	0x0003efb1
   3b020:	0003efd7 	.word	0x0003efd7
   3b024:	0003f00f 	.word	0x0003f00f
   3b028:	0003f033 	.word	0x0003f033

0003b02c <_cleanup_r>:
   3b02c:	4901      	ldr	r1, [pc, #4]	; (3b034 <_cleanup_r+0x8>)
   3b02e:	f004 b984 	b.w	3f33a <_fwalk_reent>
   3b032:	bf00      	nop
   3b034:	0003af6d 	.word	0x0003af6d

0003b038 <__sfp_lock_acquire>:
   3b038:	4801      	ldr	r0, [pc, #4]	; (3b040 <__sfp_lock_acquire+0x8>)
   3b03a:	f004 baa2 	b.w	3f582 <__retarget_lock_acquire_recursive>
   3b03e:	bf00      	nop
   3b040:	2002bb1c 	.word	0x2002bb1c

0003b044 <__sfp_lock_release>:
   3b044:	4801      	ldr	r0, [pc, #4]	; (3b04c <__sfp_lock_release+0x8>)
   3b046:	f004 ba9d 	b.w	3f584 <__retarget_lock_release_recursive>
   3b04a:	bf00      	nop
   3b04c:	2002bb1c 	.word	0x2002bb1c

0003b050 <__sinit_lock_acquire>:
   3b050:	4801      	ldr	r0, [pc, #4]	; (3b058 <__sinit_lock_acquire+0x8>)
   3b052:	f004 ba96 	b.w	3f582 <__retarget_lock_acquire_recursive>
   3b056:	bf00      	nop
   3b058:	2002bb17 	.word	0x2002bb17

0003b05c <__sinit_lock_release>:
   3b05c:	4801      	ldr	r0, [pc, #4]	; (3b064 <__sinit_lock_release+0x8>)
   3b05e:	f004 ba91 	b.w	3f584 <__retarget_lock_release_recursive>
   3b062:	bf00      	nop
   3b064:	2002bb17 	.word	0x2002bb17

0003b068 <__sinit>:
   3b068:	b510      	push	{r4, lr}
   3b06a:	4604      	mov	r4, r0
   3b06c:	f7ff fff0 	bl	3b050 <__sinit_lock_acquire>
   3b070:	69a3      	ldr	r3, [r4, #24]
   3b072:	b11b      	cbz	r3, 3b07c <__sinit+0x14>
   3b074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3b078:	f7ff bff0 	b.w	3b05c <__sinit_lock_release>
   3b07c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   3b080:	6523      	str	r3, [r4, #80]	; 0x50
   3b082:	4620      	mov	r0, r4
   3b084:	4b12      	ldr	r3, [pc, #72]	; (3b0d0 <__sinit+0x68>)
   3b086:	4a13      	ldr	r2, [pc, #76]	; (3b0d4 <__sinit+0x6c>)
   3b088:	681b      	ldr	r3, [r3, #0]
   3b08a:	62a2      	str	r2, [r4, #40]	; 0x28
   3b08c:	42a3      	cmp	r3, r4
   3b08e:	bf04      	itt	eq
   3b090:	2301      	moveq	r3, #1
   3b092:	61a3      	streq	r3, [r4, #24]
   3b094:	f000 f820 	bl	3b0d8 <__sfp>
   3b098:	6060      	str	r0, [r4, #4]
   3b09a:	4620      	mov	r0, r4
   3b09c:	f000 f81c 	bl	3b0d8 <__sfp>
   3b0a0:	60a0      	str	r0, [r4, #8]
   3b0a2:	4620      	mov	r0, r4
   3b0a4:	f000 f818 	bl	3b0d8 <__sfp>
   3b0a8:	2200      	movs	r2, #0
   3b0aa:	60e0      	str	r0, [r4, #12]
   3b0ac:	2104      	movs	r1, #4
   3b0ae:	6860      	ldr	r0, [r4, #4]
   3b0b0:	f7ff ff98 	bl	3afe4 <std>
   3b0b4:	2201      	movs	r2, #1
   3b0b6:	2109      	movs	r1, #9
   3b0b8:	68a0      	ldr	r0, [r4, #8]
   3b0ba:	f7ff ff93 	bl	3afe4 <std>
   3b0be:	2202      	movs	r2, #2
   3b0c0:	2112      	movs	r1, #18
   3b0c2:	68e0      	ldr	r0, [r4, #12]
   3b0c4:	f7ff ff8e 	bl	3afe4 <std>
   3b0c8:	2301      	movs	r3, #1
   3b0ca:	61a3      	str	r3, [r4, #24]
   3b0cc:	e7d2      	b.n	3b074 <__sinit+0xc>
   3b0ce:	bf00      	nop
   3b0d0:	000411cc 	.word	0x000411cc
   3b0d4:	0003b02d 	.word	0x0003b02d

0003b0d8 <__sfp>:
   3b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b0da:	4607      	mov	r7, r0
   3b0dc:	f7ff ffac 	bl	3b038 <__sfp_lock_acquire>
   3b0e0:	4b1e      	ldr	r3, [pc, #120]	; (3b15c <__sfp+0x84>)
   3b0e2:	681e      	ldr	r6, [r3, #0]
   3b0e4:	69b3      	ldr	r3, [r6, #24]
   3b0e6:	b913      	cbnz	r3, 3b0ee <__sfp+0x16>
   3b0e8:	4630      	mov	r0, r6
   3b0ea:	f7ff ffbd 	bl	3b068 <__sinit>
   3b0ee:	3648      	adds	r6, #72	; 0x48
   3b0f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   3b0f4:	3b01      	subs	r3, #1
   3b0f6:	d503      	bpl.n	3b100 <__sfp+0x28>
   3b0f8:	6833      	ldr	r3, [r6, #0]
   3b0fa:	b30b      	cbz	r3, 3b140 <__sfp+0x68>
   3b0fc:	6836      	ldr	r6, [r6, #0]
   3b0fe:	e7f7      	b.n	3b0f0 <__sfp+0x18>
   3b100:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   3b104:	b9d5      	cbnz	r5, 3b13c <__sfp+0x64>
   3b106:	4b16      	ldr	r3, [pc, #88]	; (3b160 <__sfp+0x88>)
   3b108:	f104 0058 	add.w	r0, r4, #88	; 0x58
   3b10c:	6665      	str	r5, [r4, #100]	; 0x64
   3b10e:	60e3      	str	r3, [r4, #12]
   3b110:	f004 fa36 	bl	3f580 <__retarget_lock_init_recursive>
   3b114:	f7ff ff96 	bl	3b044 <__sfp_lock_release>
   3b118:	6025      	str	r5, [r4, #0]
   3b11a:	61a5      	str	r5, [r4, #24]
   3b11c:	2208      	movs	r2, #8
   3b11e:	4629      	mov	r1, r5
   3b120:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   3b124:	e9c4 5501 	strd	r5, r5, [r4, #4]
   3b128:	e9c4 5504 	strd	r5, r5, [r4, #16]
   3b12c:	f003 fded 	bl	3ed0a <memset>
   3b130:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   3b134:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   3b138:	4620      	mov	r0, r4
   3b13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b13c:	3468      	adds	r4, #104	; 0x68
   3b13e:	e7d9      	b.n	3b0f4 <__sfp+0x1c>
   3b140:	2104      	movs	r1, #4
   3b142:	4638      	mov	r0, r7
   3b144:	f004 f8e3 	bl	3f30e <__sfmoreglue>
   3b148:	4604      	mov	r4, r0
   3b14a:	6030      	str	r0, [r6, #0]
   3b14c:	2800      	cmp	r0, #0
   3b14e:	d1d5      	bne.n	3b0fc <__sfp+0x24>
   3b150:	f7ff ff78 	bl	3b044 <__sfp_lock_release>
   3b154:	230c      	movs	r3, #12
   3b156:	603b      	str	r3, [r7, #0]
   3b158:	e7ee      	b.n	3b138 <__sfp+0x60>
   3b15a:	bf00      	nop
   3b15c:	000411cc 	.word	0x000411cc
   3b160:	ffff0001 	.word	0xffff0001

0003b164 <__gethex>:
   3b164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b168:	b08b      	sub	sp, #44	; 0x2c
   3b16a:	468b      	mov	fp, r1
   3b16c:	4690      	mov	r8, r2
   3b16e:	9306      	str	r3, [sp, #24]
   3b170:	4bb5      	ldr	r3, [pc, #724]	; (3b448 <__gethex+0x2e4>)
   3b172:	9002      	str	r0, [sp, #8]
   3b174:	681b      	ldr	r3, [r3, #0]
   3b176:	4618      	mov	r0, r3
   3b178:	9303      	str	r3, [sp, #12]
   3b17a:	f7e1 ffd3 	bl	1d124 <strlen>
   3b17e:	9b03      	ldr	r3, [sp, #12]
   3b180:	f8db 2000 	ldr.w	r2, [fp]
   3b184:	4403      	add	r3, r0
   3b186:	9001      	str	r0, [sp, #4]
   3b188:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   3b18c:	9307      	str	r3, [sp, #28]
   3b18e:	1c93      	adds	r3, r2, #2
   3b190:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   3b194:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   3b198:	32fe      	adds	r2, #254	; 0xfe
   3b19a:	eb02 0a03 	add.w	sl, r2, r3
   3b19e:	461f      	mov	r7, r3
   3b1a0:	f813 0b01 	ldrb.w	r0, [r3], #1
   3b1a4:	2830      	cmp	r0, #48	; 0x30
   3b1a6:	d0f8      	beq.n	3b19a <__gethex+0x36>
   3b1a8:	f004 f91f 	bl	3f3ea <__hexdig_fun>
   3b1ac:	4604      	mov	r4, r0
   3b1ae:	2800      	cmp	r0, #0
   3b1b0:	d167      	bne.n	3b282 <__gethex+0x11e>
   3b1b2:	9a01      	ldr	r2, [sp, #4]
   3b1b4:	4638      	mov	r0, r7
   3b1b6:	9903      	ldr	r1, [sp, #12]
   3b1b8:	f003 ff80 	bl	3f0bc <strncmp>
   3b1bc:	4605      	mov	r5, r0
   3b1be:	2800      	cmp	r0, #0
   3b1c0:	d162      	bne.n	3b288 <__gethex+0x124>
   3b1c2:	9b01      	ldr	r3, [sp, #4]
   3b1c4:	5cf8      	ldrb	r0, [r7, r3]
   3b1c6:	18fe      	adds	r6, r7, r3
   3b1c8:	f004 f90f 	bl	3f3ea <__hexdig_fun>
   3b1cc:	2800      	cmp	r0, #0
   3b1ce:	d05d      	beq.n	3b28c <__gethex+0x128>
   3b1d0:	4633      	mov	r3, r6
   3b1d2:	7818      	ldrb	r0, [r3, #0]
   3b1d4:	461f      	mov	r7, r3
   3b1d6:	3301      	adds	r3, #1
   3b1d8:	2830      	cmp	r0, #48	; 0x30
   3b1da:	d0fa      	beq.n	3b1d2 <__gethex+0x6e>
   3b1dc:	f004 f905 	bl	3f3ea <__hexdig_fun>
   3b1e0:	fab0 f480 	clz	r4, r0
   3b1e4:	4635      	mov	r5, r6
   3b1e6:	f04f 0a01 	mov.w	sl, #1
   3b1ea:	0964      	lsrs	r4, r4, #5
   3b1ec:	463a      	mov	r2, r7
   3b1ee:	4616      	mov	r6, r2
   3b1f0:	3201      	adds	r2, #1
   3b1f2:	7830      	ldrb	r0, [r6, #0]
   3b1f4:	f004 f8f9 	bl	3f3ea <__hexdig_fun>
   3b1f8:	2800      	cmp	r0, #0
   3b1fa:	d1f8      	bne.n	3b1ee <__gethex+0x8a>
   3b1fc:	9a01      	ldr	r2, [sp, #4]
   3b1fe:	4630      	mov	r0, r6
   3b200:	9903      	ldr	r1, [sp, #12]
   3b202:	f003 ff5b 	bl	3f0bc <strncmp>
   3b206:	b950      	cbnz	r0, 3b21e <__gethex+0xba>
   3b208:	b955      	cbnz	r5, 3b220 <__gethex+0xbc>
   3b20a:	9b01      	ldr	r3, [sp, #4]
   3b20c:	18f5      	adds	r5, r6, r3
   3b20e:	462a      	mov	r2, r5
   3b210:	4616      	mov	r6, r2
   3b212:	3201      	adds	r2, #1
   3b214:	7830      	ldrb	r0, [r6, #0]
   3b216:	f004 f8e8 	bl	3f3ea <__hexdig_fun>
   3b21a:	2800      	cmp	r0, #0
   3b21c:	d1f8      	bne.n	3b210 <__gethex+0xac>
   3b21e:	b10d      	cbz	r5, 3b224 <__gethex+0xc0>
   3b220:	1bad      	subs	r5, r5, r6
   3b222:	00ad      	lsls	r5, r5, #2
   3b224:	7833      	ldrb	r3, [r6, #0]
   3b226:	2b50      	cmp	r3, #80	; 0x50
   3b228:	d001      	beq.n	3b22e <__gethex+0xca>
   3b22a:	2b70      	cmp	r3, #112	; 0x70
   3b22c:	d13c      	bne.n	3b2a8 <__gethex+0x144>
   3b22e:	7873      	ldrb	r3, [r6, #1]
   3b230:	2b2b      	cmp	r3, #43	; 0x2b
   3b232:	d02d      	beq.n	3b290 <__gethex+0x12c>
   3b234:	2b2d      	cmp	r3, #45	; 0x2d
   3b236:	d02f      	beq.n	3b298 <__gethex+0x134>
   3b238:	1c71      	adds	r1, r6, #1
   3b23a:	f04f 0900 	mov.w	r9, #0
   3b23e:	7808      	ldrb	r0, [r1, #0]
   3b240:	f004 f8d3 	bl	3f3ea <__hexdig_fun>
   3b244:	1e43      	subs	r3, r0, #1
   3b246:	b2db      	uxtb	r3, r3
   3b248:	2b18      	cmp	r3, #24
   3b24a:	d82d      	bhi.n	3b2a8 <__gethex+0x144>
   3b24c:	f1a0 0210 	sub.w	r2, r0, #16
   3b250:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   3b254:	f004 f8c9 	bl	3f3ea <__hexdig_fun>
   3b258:	1e43      	subs	r3, r0, #1
   3b25a:	b2db      	uxtb	r3, r3
   3b25c:	2b18      	cmp	r3, #24
   3b25e:	d91e      	bls.n	3b29e <__gethex+0x13a>
   3b260:	f1b9 0f00 	cmp.w	r9, #0
   3b264:	d000      	beq.n	3b268 <__gethex+0x104>
   3b266:	4252      	negs	r2, r2
   3b268:	4415      	add	r5, r2
   3b26a:	f8cb 1000 	str.w	r1, [fp]
   3b26e:	b1ec      	cbz	r4, 3b2ac <__gethex+0x148>
   3b270:	f1ba 0f00 	cmp.w	sl, #0
   3b274:	bf14      	ite	ne
   3b276:	2700      	movne	r7, #0
   3b278:	2706      	moveq	r7, #6
   3b27a:	4638      	mov	r0, r7
   3b27c:	b00b      	add	sp, #44	; 0x2c
   3b27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b282:	2400      	movs	r4, #0
   3b284:	4625      	mov	r5, r4
   3b286:	e7b1      	b.n	3b1ec <__gethex+0x88>
   3b288:	463e      	mov	r6, r7
   3b28a:	4625      	mov	r5, r4
   3b28c:	2401      	movs	r4, #1
   3b28e:	e7c9      	b.n	3b224 <__gethex+0xc0>
   3b290:	f04f 0900 	mov.w	r9, #0
   3b294:	1cb1      	adds	r1, r6, #2
   3b296:	e7d2      	b.n	3b23e <__gethex+0xda>
   3b298:	f04f 0901 	mov.w	r9, #1
   3b29c:	e7fa      	b.n	3b294 <__gethex+0x130>
   3b29e:	230a      	movs	r3, #10
   3b2a0:	fb03 0202 	mla	r2, r3, r2, r0
   3b2a4:	3a10      	subs	r2, #16
   3b2a6:	e7d3      	b.n	3b250 <__gethex+0xec>
   3b2a8:	4631      	mov	r1, r6
   3b2aa:	e7de      	b.n	3b26a <__gethex+0x106>
   3b2ac:	1bf3      	subs	r3, r6, r7
   3b2ae:	4621      	mov	r1, r4
   3b2b0:	3b01      	subs	r3, #1
   3b2b2:	2b07      	cmp	r3, #7
   3b2b4:	dc4f      	bgt.n	3b356 <__gethex+0x1f2>
   3b2b6:	9802      	ldr	r0, [sp, #8]
   3b2b8:	f04f 0b00 	mov.w	fp, #0
   3b2bc:	f004 f9b3 	bl	3f626 <_Balloc>
   3b2c0:	9b01      	ldr	r3, [sp, #4]
   3b2c2:	f100 0914 	add.w	r9, r0, #20
   3b2c6:	4604      	mov	r4, r0
   3b2c8:	f1c3 0301 	rsb	r3, r3, #1
   3b2cc:	46da      	mov	sl, fp
   3b2ce:	f8cd 9010 	str.w	r9, [sp, #16]
   3b2d2:	9308      	str	r3, [sp, #32]
   3b2d4:	42b7      	cmp	r7, r6
   3b2d6:	d341      	bcc.n	3b35c <__gethex+0x1f8>
   3b2d8:	9804      	ldr	r0, [sp, #16]
   3b2da:	f840 ab04 	str.w	sl, [r0], #4
   3b2de:	eba0 0009 	sub.w	r0, r0, r9
   3b2e2:	1080      	asrs	r0, r0, #2
   3b2e4:	0147      	lsls	r7, r0, #5
   3b2e6:	6120      	str	r0, [r4, #16]
   3b2e8:	4650      	mov	r0, sl
   3b2ea:	f004 fa62 	bl	3f7b2 <__hi0bits>
   3b2ee:	f8d8 6000 	ldr.w	r6, [r8]
   3b2f2:	1a3f      	subs	r7, r7, r0
   3b2f4:	42b7      	cmp	r7, r6
   3b2f6:	dd63      	ble.n	3b3c0 <__gethex+0x25c>
   3b2f8:	1bbf      	subs	r7, r7, r6
   3b2fa:	4620      	mov	r0, r4
   3b2fc:	4639      	mov	r1, r7
   3b2fe:	f004 fca8 	bl	3fc52 <__any_on>
   3b302:	4682      	mov	sl, r0
   3b304:	b1a8      	cbz	r0, 3b332 <__gethex+0x1ce>
   3b306:	1e7b      	subs	r3, r7, #1
   3b308:	f04f 0a01 	mov.w	sl, #1
   3b30c:	1159      	asrs	r1, r3, #5
   3b30e:	f003 021f 	and.w	r2, r3, #31
   3b312:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   3b316:	fa0a f202 	lsl.w	r2, sl, r2
   3b31a:	420a      	tst	r2, r1
   3b31c:	d009      	beq.n	3b332 <__gethex+0x1ce>
   3b31e:	4553      	cmp	r3, sl
   3b320:	dd05      	ble.n	3b32e <__gethex+0x1ca>
   3b322:	1eb9      	subs	r1, r7, #2
   3b324:	4620      	mov	r0, r4
   3b326:	f004 fc94 	bl	3fc52 <__any_on>
   3b32a:	2800      	cmp	r0, #0
   3b32c:	d145      	bne.n	3b3ba <__gethex+0x256>
   3b32e:	f04f 0a02 	mov.w	sl, #2
   3b332:	443d      	add	r5, r7
   3b334:	4639      	mov	r1, r7
   3b336:	4620      	mov	r0, r4
   3b338:	f004 f81d 	bl	3f376 <rshift>
   3b33c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3b340:	42ab      	cmp	r3, r5
   3b342:	da4b      	bge.n	3b3dc <__gethex+0x278>
   3b344:	4621      	mov	r1, r4
   3b346:	9802      	ldr	r0, [sp, #8]
   3b348:	f004 f9a1 	bl	3f68e <_Bfree>
   3b34c:	2300      	movs	r3, #0
   3b34e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3b350:	27a3      	movs	r7, #163	; 0xa3
   3b352:	6013      	str	r3, [r2, #0]
   3b354:	e791      	b.n	3b27a <__gethex+0x116>
   3b356:	3101      	adds	r1, #1
   3b358:	105b      	asrs	r3, r3, #1
   3b35a:	e7aa      	b.n	3b2b2 <__gethex+0x14e>
   3b35c:	1e73      	subs	r3, r6, #1
   3b35e:	9a07      	ldr	r2, [sp, #28]
   3b360:	9305      	str	r3, [sp, #20]
   3b362:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   3b366:	4293      	cmp	r3, r2
   3b368:	d017      	beq.n	3b39a <__gethex+0x236>
   3b36a:	f1bb 0f20 	cmp.w	fp, #32
   3b36e:	d106      	bne.n	3b37e <__gethex+0x21a>
   3b370:	9b04      	ldr	r3, [sp, #16]
   3b372:	f843 ab04 	str.w	sl, [r3], #4
   3b376:	f04f 0a00 	mov.w	sl, #0
   3b37a:	9304      	str	r3, [sp, #16]
   3b37c:	46d3      	mov	fp, sl
   3b37e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   3b382:	f004 f832 	bl	3f3ea <__hexdig_fun>
   3b386:	f000 000f 	and.w	r0, r0, #15
   3b38a:	9b05      	ldr	r3, [sp, #20]
   3b38c:	fa00 f00b 	lsl.w	r0, r0, fp
   3b390:	f10b 0b04 	add.w	fp, fp, #4
   3b394:	ea4a 0a00 	orr.w	sl, sl, r0
   3b398:	e00d      	b.n	3b3b6 <__gethex+0x252>
   3b39a:	9b05      	ldr	r3, [sp, #20]
   3b39c:	9a08      	ldr	r2, [sp, #32]
   3b39e:	4413      	add	r3, r2
   3b3a0:	42bb      	cmp	r3, r7
   3b3a2:	d3e2      	bcc.n	3b36a <__gethex+0x206>
   3b3a4:	4618      	mov	r0, r3
   3b3a6:	9a01      	ldr	r2, [sp, #4]
   3b3a8:	9903      	ldr	r1, [sp, #12]
   3b3aa:	9309      	str	r3, [sp, #36]	; 0x24
   3b3ac:	f003 fe86 	bl	3f0bc <strncmp>
   3b3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3b3b2:	2800      	cmp	r0, #0
   3b3b4:	d1d9      	bne.n	3b36a <__gethex+0x206>
   3b3b6:	461e      	mov	r6, r3
   3b3b8:	e78c      	b.n	3b2d4 <__gethex+0x170>
   3b3ba:	f04f 0a03 	mov.w	sl, #3
   3b3be:	e7b8      	b.n	3b332 <__gethex+0x1ce>
   3b3c0:	da09      	bge.n	3b3d6 <__gethex+0x272>
   3b3c2:	1bf7      	subs	r7, r6, r7
   3b3c4:	4621      	mov	r1, r4
   3b3c6:	9802      	ldr	r0, [sp, #8]
   3b3c8:	463a      	mov	r2, r7
   3b3ca:	1bed      	subs	r5, r5, r7
   3b3cc:	f004 fad9 	bl	3f982 <__lshift>
   3b3d0:	4604      	mov	r4, r0
   3b3d2:	f100 0914 	add.w	r9, r0, #20
   3b3d6:	f04f 0a00 	mov.w	sl, #0
   3b3da:	e7af      	b.n	3b33c <__gethex+0x1d8>
   3b3dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3b3e0:	42ab      	cmp	r3, r5
   3b3e2:	dd6d      	ble.n	3b4c0 <__gethex+0x35c>
   3b3e4:	1b5d      	subs	r5, r3, r5
   3b3e6:	42ae      	cmp	r6, r5
   3b3e8:	dc30      	bgt.n	3b44c <__gethex+0x2e8>
   3b3ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3b3ee:	2b02      	cmp	r3, #2
   3b3f0:	d022      	beq.n	3b438 <__gethex+0x2d4>
   3b3f2:	2b03      	cmp	r3, #3
   3b3f4:	d024      	beq.n	3b440 <__gethex+0x2dc>
   3b3f6:	2b01      	cmp	r3, #1
   3b3f8:	d115      	bne.n	3b426 <__gethex+0x2c2>
   3b3fa:	42ae      	cmp	r6, r5
   3b3fc:	d113      	bne.n	3b426 <__gethex+0x2c2>
   3b3fe:	2e01      	cmp	r6, #1
   3b400:	d10b      	bne.n	3b41a <__gethex+0x2b6>
   3b402:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3b406:	2762      	movs	r7, #98	; 0x62
   3b408:	9a06      	ldr	r2, [sp, #24]
   3b40a:	6013      	str	r3, [r2, #0]
   3b40c:	2301      	movs	r3, #1
   3b40e:	6123      	str	r3, [r4, #16]
   3b410:	f8c9 3000 	str.w	r3, [r9]
   3b414:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3b416:	601c      	str	r4, [r3, #0]
   3b418:	e72f      	b.n	3b27a <__gethex+0x116>
   3b41a:	1e71      	subs	r1, r6, #1
   3b41c:	4620      	mov	r0, r4
   3b41e:	f004 fc18 	bl	3fc52 <__any_on>
   3b422:	2800      	cmp	r0, #0
   3b424:	d1ed      	bne.n	3b402 <__gethex+0x29e>
   3b426:	4621      	mov	r1, r4
   3b428:	9802      	ldr	r0, [sp, #8]
   3b42a:	f004 f930 	bl	3f68e <_Bfree>
   3b42e:	2300      	movs	r3, #0
   3b430:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3b432:	2750      	movs	r7, #80	; 0x50
   3b434:	6013      	str	r3, [r2, #0]
   3b436:	e720      	b.n	3b27a <__gethex+0x116>
   3b438:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b43a:	2b00      	cmp	r3, #0
   3b43c:	d1f3      	bne.n	3b426 <__gethex+0x2c2>
   3b43e:	e7e0      	b.n	3b402 <__gethex+0x29e>
   3b440:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b442:	2b00      	cmp	r3, #0
   3b444:	d1dd      	bne.n	3b402 <__gethex+0x29e>
   3b446:	e7ee      	b.n	3b426 <__gethex+0x2c2>
   3b448:	00041258 	.word	0x00041258
   3b44c:	1e6f      	subs	r7, r5, #1
   3b44e:	f1ba 0f00 	cmp.w	sl, #0
   3b452:	d132      	bne.n	3b4ba <__gethex+0x356>
   3b454:	b127      	cbz	r7, 3b460 <__gethex+0x2fc>
   3b456:	4639      	mov	r1, r7
   3b458:	4620      	mov	r0, r4
   3b45a:	f004 fbfa 	bl	3fc52 <__any_on>
   3b45e:	4682      	mov	sl, r0
   3b460:	117a      	asrs	r2, r7, #5
   3b462:	2301      	movs	r3, #1
   3b464:	f007 071f 	and.w	r7, r7, #31
   3b468:	4629      	mov	r1, r5
   3b46a:	4620      	mov	r0, r4
   3b46c:	1b76      	subs	r6, r6, r5
   3b46e:	fa03 f707 	lsl.w	r7, r3, r7
   3b472:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
   3b476:	421f      	tst	r7, r3
   3b478:	f04f 0702 	mov.w	r7, #2
   3b47c:	bf18      	it	ne
   3b47e:	f04a 0a02 	orrne.w	sl, sl, #2
   3b482:	f003 ff78 	bl	3f376 <rshift>
   3b486:	f8d8 5004 	ldr.w	r5, [r8, #4]
   3b48a:	f1ba 0f00 	cmp.w	sl, #0
   3b48e:	d048      	beq.n	3b522 <__gethex+0x3be>
   3b490:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3b494:	2b02      	cmp	r3, #2
   3b496:	d015      	beq.n	3b4c4 <__gethex+0x360>
   3b498:	2b03      	cmp	r3, #3
   3b49a:	d017      	beq.n	3b4cc <__gethex+0x368>
   3b49c:	2b01      	cmp	r3, #1
   3b49e:	d109      	bne.n	3b4b4 <__gethex+0x350>
   3b4a0:	f01a 0f02 	tst.w	sl, #2
   3b4a4:	d006      	beq.n	3b4b4 <__gethex+0x350>
   3b4a6:	f8d9 3000 	ldr.w	r3, [r9]
   3b4aa:	ea4a 0a03 	orr.w	sl, sl, r3
   3b4ae:	f01a 0f01 	tst.w	sl, #1
   3b4b2:	d10e      	bne.n	3b4d2 <__gethex+0x36e>
   3b4b4:	f047 0710 	orr.w	r7, r7, #16
   3b4b8:	e033      	b.n	3b522 <__gethex+0x3be>
   3b4ba:	f04f 0a01 	mov.w	sl, #1
   3b4be:	e7cf      	b.n	3b460 <__gethex+0x2fc>
   3b4c0:	2701      	movs	r7, #1
   3b4c2:	e7e2      	b.n	3b48a <__gethex+0x326>
   3b4c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b4c6:	f1c3 0301 	rsb	r3, r3, #1
   3b4ca:	9315      	str	r3, [sp, #84]	; 0x54
   3b4cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b4ce:	2b00      	cmp	r3, #0
   3b4d0:	d0f0      	beq.n	3b4b4 <__gethex+0x350>
   3b4d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
   3b4d6:	f104 0314 	add.w	r3, r4, #20
   3b4da:	f04f 0c00 	mov.w	ip, #0
   3b4de:	ea4f 0a89 	mov.w	sl, r9, lsl #2
   3b4e2:	eb03 010a 	add.w	r1, r3, sl
   3b4e6:	4618      	mov	r0, r3
   3b4e8:	f853 2b04 	ldr.w	r2, [r3], #4
   3b4ec:	f1b2 3fff 	cmp.w	r2, #4294967295
   3b4f0:	d01c      	beq.n	3b52c <__gethex+0x3c8>
   3b4f2:	3201      	adds	r2, #1
   3b4f4:	6002      	str	r2, [r0, #0]
   3b4f6:	2f02      	cmp	r7, #2
   3b4f8:	f104 0314 	add.w	r3, r4, #20
   3b4fc:	d138      	bne.n	3b570 <__gethex+0x40c>
   3b4fe:	f8d8 2000 	ldr.w	r2, [r8]
   3b502:	3a01      	subs	r2, #1
   3b504:	42b2      	cmp	r2, r6
   3b506:	d10a      	bne.n	3b51e <__gethex+0x3ba>
   3b508:	1171      	asrs	r1, r6, #5
   3b50a:	2201      	movs	r2, #1
   3b50c:	f006 061f 	and.w	r6, r6, #31
   3b510:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   3b514:	fa02 f606 	lsl.w	r6, r2, r6
   3b518:	421e      	tst	r6, r3
   3b51a:	bf18      	it	ne
   3b51c:	4617      	movne	r7, r2
   3b51e:	f047 0720 	orr.w	r7, r7, #32
   3b522:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3b524:	601c      	str	r4, [r3, #0]
   3b526:	9b06      	ldr	r3, [sp, #24]
   3b528:	601d      	str	r5, [r3, #0]
   3b52a:	e6a6      	b.n	3b27a <__gethex+0x116>
   3b52c:	4299      	cmp	r1, r3
   3b52e:	f843 cc04 	str.w	ip, [r3, #-4]
   3b532:	d8d8      	bhi.n	3b4e6 <__gethex+0x382>
   3b534:	68a3      	ldr	r3, [r4, #8]
   3b536:	4599      	cmp	r9, r3
   3b538:	db12      	blt.n	3b560 <__gethex+0x3fc>
   3b53a:	6861      	ldr	r1, [r4, #4]
   3b53c:	9802      	ldr	r0, [sp, #8]
   3b53e:	3101      	adds	r1, #1
   3b540:	f004 f871 	bl	3f626 <_Balloc>
   3b544:	6922      	ldr	r2, [r4, #16]
   3b546:	4683      	mov	fp, r0
   3b548:	f104 010c 	add.w	r1, r4, #12
   3b54c:	3202      	adds	r2, #2
   3b54e:	300c      	adds	r0, #12
   3b550:	0092      	lsls	r2, r2, #2
   3b552:	f003 fbba 	bl	3ecca <memcpy>
   3b556:	4621      	mov	r1, r4
   3b558:	465c      	mov	r4, fp
   3b55a:	9802      	ldr	r0, [sp, #8]
   3b55c:	f004 f897 	bl	3f68e <_Bfree>
   3b560:	6923      	ldr	r3, [r4, #16]
   3b562:	1c5a      	adds	r2, r3, #1
   3b564:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   3b568:	6122      	str	r2, [r4, #16]
   3b56a:	2201      	movs	r2, #1
   3b56c:	615a      	str	r2, [r3, #20]
   3b56e:	e7c2      	b.n	3b4f6 <__gethex+0x392>
   3b570:	6922      	ldr	r2, [r4, #16]
   3b572:	454a      	cmp	r2, r9
   3b574:	dd0b      	ble.n	3b58e <__gethex+0x42a>
   3b576:	2101      	movs	r1, #1
   3b578:	4620      	mov	r0, r4
   3b57a:	f003 fefc 	bl	3f376 <rshift>
   3b57e:	3501      	adds	r5, #1
   3b580:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3b584:	42ab      	cmp	r3, r5
   3b586:	f6ff aedd 	blt.w	3b344 <__gethex+0x1e0>
   3b58a:	2701      	movs	r7, #1
   3b58c:	e7c7      	b.n	3b51e <__gethex+0x3ba>
   3b58e:	f016 061f 	ands.w	r6, r6, #31
   3b592:	d0fa      	beq.n	3b58a <__gethex+0x426>
   3b594:	449a      	add	sl, r3
   3b596:	f1c6 0620 	rsb	r6, r6, #32
   3b59a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
   3b59e:	f004 f908 	bl	3f7b2 <__hi0bits>
   3b5a2:	42b0      	cmp	r0, r6
   3b5a4:	dbe7      	blt.n	3b576 <__gethex+0x412>
   3b5a6:	e7f0      	b.n	3b58a <__gethex+0x426>

0003b5a8 <_localeconv_r>:
   3b5a8:	4800      	ldr	r0, [pc, #0]	; (3b5ac <_localeconv_r+0x4>)
   3b5aa:	4770      	bx	lr
   3b5ac:	200316d0 	.word	0x200316d0

0003b5b0 <_lseek_r>:
   3b5b0:	b538      	push	{r3, r4, r5, lr}
   3b5b2:	4605      	mov	r5, r0
   3b5b4:	4c06      	ldr	r4, [pc, #24]	; (3b5d0 <_lseek_r+0x20>)
   3b5b6:	4608      	mov	r0, r1
   3b5b8:	4611      	mov	r1, r2
   3b5ba:	2200      	movs	r2, #0
   3b5bc:	6022      	str	r2, [r4, #0]
   3b5be:	461a      	mov	r2, r3
   3b5c0:	f001 fa37 	bl	3ca32 <_lseek>
   3b5c4:	1c43      	adds	r3, r0, #1
   3b5c6:	d102      	bne.n	3b5ce <_lseek_r+0x1e>
   3b5c8:	6823      	ldr	r3, [r4, #0]
   3b5ca:	b103      	cbz	r3, 3b5ce <_lseek_r+0x1e>
   3b5cc:	602b      	str	r3, [r5, #0]
   3b5ce:	bd38      	pop	{r3, r4, r5, pc}
   3b5d0:	2002bb10 	.word	0x2002bb10

0003b5d4 <__smakebuf_r>:
   3b5d4:	898b      	ldrh	r3, [r1, #12]
   3b5d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3b5d8:	079d      	lsls	r5, r3, #30
   3b5da:	4606      	mov	r6, r0
   3b5dc:	460c      	mov	r4, r1
   3b5de:	d507      	bpl.n	3b5f0 <__smakebuf_r+0x1c>
   3b5e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
   3b5e4:	6023      	str	r3, [r4, #0]
   3b5e6:	6123      	str	r3, [r4, #16]
   3b5e8:	2301      	movs	r3, #1
   3b5ea:	6163      	str	r3, [r4, #20]
   3b5ec:	b002      	add	sp, #8
   3b5ee:	bd70      	pop	{r4, r5, r6, pc}
   3b5f0:	ab01      	add	r3, sp, #4
   3b5f2:	466a      	mov	r2, sp
   3b5f4:	f003 ffc7 	bl	3f586 <__swhatbuf_r>
   3b5f8:	9900      	ldr	r1, [sp, #0]
   3b5fa:	4605      	mov	r5, r0
   3b5fc:	4630      	mov	r0, r6
   3b5fe:	f7fe fc63 	bl	39ec8 <_malloc_r>
   3b602:	b948      	cbnz	r0, 3b618 <__smakebuf_r+0x44>
   3b604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3b608:	059a      	lsls	r2, r3, #22
   3b60a:	d4ef      	bmi.n	3b5ec <__smakebuf_r+0x18>
   3b60c:	f023 0303 	bic.w	r3, r3, #3
   3b610:	f043 0302 	orr.w	r3, r3, #2
   3b614:	81a3      	strh	r3, [r4, #12]
   3b616:	e7e3      	b.n	3b5e0 <__smakebuf_r+0xc>
   3b618:	4b0d      	ldr	r3, [pc, #52]	; (3b650 <__smakebuf_r+0x7c>)
   3b61a:	62b3      	str	r3, [r6, #40]	; 0x28
   3b61c:	89a3      	ldrh	r3, [r4, #12]
   3b61e:	6020      	str	r0, [r4, #0]
   3b620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3b624:	6120      	str	r0, [r4, #16]
   3b626:	81a3      	strh	r3, [r4, #12]
   3b628:	9b00      	ldr	r3, [sp, #0]
   3b62a:	6163      	str	r3, [r4, #20]
   3b62c:	9b01      	ldr	r3, [sp, #4]
   3b62e:	b15b      	cbz	r3, 3b648 <__smakebuf_r+0x74>
   3b630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3b634:	4630      	mov	r0, r6
   3b636:	f000 fca5 	bl	3bf84 <_isatty_r>
   3b63a:	b128      	cbz	r0, 3b648 <__smakebuf_r+0x74>
   3b63c:	89a3      	ldrh	r3, [r4, #12]
   3b63e:	f023 0303 	bic.w	r3, r3, #3
   3b642:	f043 0301 	orr.w	r3, r3, #1
   3b646:	81a3      	strh	r3, [r4, #12]
   3b648:	89a3      	ldrh	r3, [r4, #12]
   3b64a:	431d      	orrs	r5, r3
   3b64c:	81a5      	strh	r5, [r4, #12]
   3b64e:	e7cd      	b.n	3b5ec <__smakebuf_r+0x18>
   3b650:	0003b02d 	.word	0x0003b02d

0003b654 <__malloc_lock>:
   3b654:	4801      	ldr	r0, [pc, #4]	; (3b65c <__malloc_lock+0x8>)
   3b656:	f003 bf94 	b.w	3f582 <__retarget_lock_acquire_recursive>
   3b65a:	bf00      	nop
   3b65c:	2002bb18 	.word	0x2002bb18

0003b660 <__malloc_unlock>:
   3b660:	4801      	ldr	r0, [pc, #4]	; (3b668 <__malloc_unlock+0x8>)
   3b662:	f003 bf8f 	b.w	3f584 <__retarget_lock_release_recursive>
   3b666:	bf00      	nop
   3b668:	2002bb18 	.word	0x2002bb18

0003b66c <__pow5mult>:
   3b66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3b670:	4615      	mov	r5, r2
   3b672:	f012 0203 	ands.w	r2, r2, #3
   3b676:	4606      	mov	r6, r0
   3b678:	460f      	mov	r7, r1
   3b67a:	d007      	beq.n	3b68c <__pow5mult+0x20>
   3b67c:	3a01      	subs	r2, #1
   3b67e:	4c21      	ldr	r4, [pc, #132]	; (3b704 <__pow5mult+0x98>)
   3b680:	2300      	movs	r3, #0
   3b682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   3b686:	f004 f819 	bl	3f6bc <__multadd>
   3b68a:	4607      	mov	r7, r0
   3b68c:	10ad      	asrs	r5, r5, #2
   3b68e:	d035      	beq.n	3b6fc <__pow5mult+0x90>
   3b690:	6a74      	ldr	r4, [r6, #36]	; 0x24
   3b692:	b93c      	cbnz	r4, 3b6a4 <__pow5mult+0x38>
   3b694:	2010      	movs	r0, #16
   3b696:	f7fe fbb9 	bl	39e0c <malloc>
   3b69a:	6270      	str	r0, [r6, #36]	; 0x24
   3b69c:	6004      	str	r4, [r0, #0]
   3b69e:	60c4      	str	r4, [r0, #12]
   3b6a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3b6a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   3b6a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   3b6ac:	b94c      	cbnz	r4, 3b6c2 <__pow5mult+0x56>
   3b6ae:	f240 2171 	movw	r1, #625	; 0x271
   3b6b2:	4630      	mov	r0, r6
   3b6b4:	f004 f8cd 	bl	3f852 <__i2b>
   3b6b8:	2300      	movs	r3, #0
   3b6ba:	4604      	mov	r4, r0
   3b6bc:	f8c8 0008 	str.w	r0, [r8, #8]
   3b6c0:	6003      	str	r3, [r0, #0]
   3b6c2:	f04f 0800 	mov.w	r8, #0
   3b6c6:	07eb      	lsls	r3, r5, #31
   3b6c8:	d50a      	bpl.n	3b6e0 <__pow5mult+0x74>
   3b6ca:	4639      	mov	r1, r7
   3b6cc:	4622      	mov	r2, r4
   3b6ce:	4630      	mov	r0, r6
   3b6d0:	f004 f8c8 	bl	3f864 <__multiply>
   3b6d4:	4681      	mov	r9, r0
   3b6d6:	4639      	mov	r1, r7
   3b6d8:	4630      	mov	r0, r6
   3b6da:	464f      	mov	r7, r9
   3b6dc:	f003 ffd7 	bl	3f68e <_Bfree>
   3b6e0:	106d      	asrs	r5, r5, #1
   3b6e2:	d00b      	beq.n	3b6fc <__pow5mult+0x90>
   3b6e4:	6820      	ldr	r0, [r4, #0]
   3b6e6:	b938      	cbnz	r0, 3b6f8 <__pow5mult+0x8c>
   3b6e8:	4622      	mov	r2, r4
   3b6ea:	4621      	mov	r1, r4
   3b6ec:	4630      	mov	r0, r6
   3b6ee:	f004 f8b9 	bl	3f864 <__multiply>
   3b6f2:	6020      	str	r0, [r4, #0]
   3b6f4:	f8c0 8000 	str.w	r8, [r0]
   3b6f8:	4604      	mov	r4, r0
   3b6fa:	e7e4      	b.n	3b6c6 <__pow5mult+0x5a>
   3b6fc:	4638      	mov	r0, r7
   3b6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3b702:	bf00      	nop
   3b704:	00041264 	.word	0x00041264

0003b708 <__ulp>:
   3b708:	4b10      	ldr	r3, [pc, #64]	; (3b74c <__ulp+0x44>)
   3b70a:	ee10 2a90 	vmov	r2, s1
   3b70e:	401a      	ands	r2, r3
   3b710:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   3b714:	2b00      	cmp	r3, #0
   3b716:	dd04      	ble.n	3b722 <__ulp+0x1a>
   3b718:	2000      	movs	r0, #0
   3b71a:	4619      	mov	r1, r3
   3b71c:	ec41 0b10 	vmov	d0, r0, r1
   3b720:	4770      	bx	lr
   3b722:	425b      	negs	r3, r3
   3b724:	2000      	movs	r0, #0
   3b726:	2100      	movs	r1, #0
   3b728:	151b      	asrs	r3, r3, #20
   3b72a:	2b13      	cmp	r3, #19
   3b72c:	dc04      	bgt.n	3b738 <__ulp+0x30>
   3b72e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   3b732:	fa42 f103 	asr.w	r1, r2, r3
   3b736:	e7f1      	b.n	3b71c <__ulp+0x14>
   3b738:	3b14      	subs	r3, #20
   3b73a:	2b1e      	cmp	r3, #30
   3b73c:	bfd6      	itet	le
   3b73e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   3b742:	2301      	movgt	r3, #1
   3b744:	fa22 f303 	lsrle.w	r3, r2, r3
   3b748:	4618      	mov	r0, r3
   3b74a:	e7e7      	b.n	3b71c <__ulp+0x14>
   3b74c:	7ff00000 	.word	0x7ff00000

0003b750 <__b2d>:
   3b750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b752:	6905      	ldr	r5, [r0, #16]
   3b754:	f100 0714 	add.w	r7, r0, #20
   3b758:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   3b75c:	f855 4c04 	ldr.w	r4, [r5, #-4]
   3b760:	1f2e      	subs	r6, r5, #4
   3b762:	4620      	mov	r0, r4
   3b764:	f004 f825 	bl	3f7b2 <__hi0bits>
   3b768:	f1c0 0320 	rsb	r3, r0, #32
   3b76c:	280a      	cmp	r0, #10
   3b76e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 3b7ec <__b2d+0x9c>
   3b772:	600b      	str	r3, [r1, #0]
   3b774:	dc15      	bgt.n	3b7a2 <__b2d+0x52>
   3b776:	f1c0 0e0b 	rsb	lr, r0, #11
   3b77a:	42b7      	cmp	r7, r6
   3b77c:	f100 0015 	add.w	r0, r0, #21
   3b780:	fa24 f10e 	lsr.w	r1, r4, lr
   3b784:	fa04 f000 	lsl.w	r0, r4, r0
   3b788:	ea41 030c 	orr.w	r3, r1, ip
   3b78c:	bf34      	ite	cc
   3b78e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   3b792:	2100      	movcs	r1, #0
   3b794:	fa21 f10e 	lsr.w	r1, r1, lr
   3b798:	ea40 0201 	orr.w	r2, r0, r1
   3b79c:	ec43 2b10 	vmov	d0, r2, r3
   3b7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b7a2:	42b7      	cmp	r7, r6
   3b7a4:	bf3a      	itte	cc
   3b7a6:	f1a5 0608 	subcc.w	r6, r5, #8
   3b7aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   3b7ae:	2100      	movcs	r1, #0
   3b7b0:	380b      	subs	r0, #11
   3b7b2:	d017      	beq.n	3b7e4 <__b2d+0x94>
   3b7b4:	f1c0 0c20 	rsb	ip, r0, #32
   3b7b8:	fa04 f500 	lsl.w	r5, r4, r0
   3b7bc:	42be      	cmp	r6, r7
   3b7be:	fa01 f000 	lsl.w	r0, r1, r0
   3b7c2:	fa21 f40c 	lsr.w	r4, r1, ip
   3b7c6:	ea45 0504 	orr.w	r5, r5, r4
   3b7ca:	bf8c      	ite	hi
   3b7cc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   3b7d0:	2400      	movls	r4, #0
   3b7d2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   3b7d6:	fa24 f40c 	lsr.w	r4, r4, ip
   3b7da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   3b7de:	ea40 0204 	orr.w	r2, r0, r4
   3b7e2:	e7db      	b.n	3b79c <__b2d+0x4c>
   3b7e4:	ea44 030c 	orr.w	r3, r4, ip
   3b7e8:	460a      	mov	r2, r1
   3b7ea:	e7d7      	b.n	3b79c <__b2d+0x4c>
   3b7ec:	3ff00000 	.word	0x3ff00000

0003b7f0 <_svfiprintf_r>:
   3b7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b7f4:	461e      	mov	r6, r3
   3b7f6:	898b      	ldrh	r3, [r1, #12]
   3b7f8:	b09d      	sub	sp, #116	; 0x74
   3b7fa:	4607      	mov	r7, r0
   3b7fc:	061b      	lsls	r3, r3, #24
   3b7fe:	460d      	mov	r5, r1
   3b800:	4614      	mov	r4, r2
   3b802:	d50e      	bpl.n	3b822 <_svfiprintf_r+0x32>
   3b804:	690b      	ldr	r3, [r1, #16]
   3b806:	b963      	cbnz	r3, 3b822 <_svfiprintf_r+0x32>
   3b808:	2140      	movs	r1, #64	; 0x40
   3b80a:	f7fe fb5d 	bl	39ec8 <_malloc_r>
   3b80e:	6028      	str	r0, [r5, #0]
   3b810:	6128      	str	r0, [r5, #16]
   3b812:	b920      	cbnz	r0, 3b81e <_svfiprintf_r+0x2e>
   3b814:	230c      	movs	r3, #12
   3b816:	603b      	str	r3, [r7, #0]
   3b818:	f04f 30ff 	mov.w	r0, #4294967295
   3b81c:	e0c9      	b.n	3b9b2 <_svfiprintf_r+0x1c2>
   3b81e:	2340      	movs	r3, #64	; 0x40
   3b820:	616b      	str	r3, [r5, #20]
   3b822:	2300      	movs	r3, #0
   3b824:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 3b9cc <_svfiprintf_r+0x1dc>
   3b828:	f04f 0a01 	mov.w	sl, #1
   3b82c:	9603      	str	r6, [sp, #12]
   3b82e:	9309      	str	r3, [sp, #36]	; 0x24
   3b830:	2320      	movs	r3, #32
   3b832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3b836:	2330      	movs	r3, #48	; 0x30
   3b838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3b83c:	4623      	mov	r3, r4
   3b83e:	461e      	mov	r6, r3
   3b840:	f813 2b01 	ldrb.w	r2, [r3], #1
   3b844:	b10a      	cbz	r2, 3b84a <_svfiprintf_r+0x5a>
   3b846:	2a25      	cmp	r2, #37	; 0x25
   3b848:	d1f9      	bne.n	3b83e <_svfiprintf_r+0x4e>
   3b84a:	ebb6 0b04 	subs.w	fp, r6, r4
   3b84e:	d00b      	beq.n	3b868 <_svfiprintf_r+0x78>
   3b850:	465b      	mov	r3, fp
   3b852:	4622      	mov	r2, r4
   3b854:	4629      	mov	r1, r5
   3b856:	4638      	mov	r0, r7
   3b858:	f004 fa50 	bl	3fcfc <__ssputs_r>
   3b85c:	3001      	adds	r0, #1
   3b85e:	f000 80a3 	beq.w	3b9a8 <_svfiprintf_r+0x1b8>
   3b862:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3b864:	445b      	add	r3, fp
   3b866:	9309      	str	r3, [sp, #36]	; 0x24
   3b868:	7833      	ldrb	r3, [r6, #0]
   3b86a:	2b00      	cmp	r3, #0
   3b86c:	f000 809c 	beq.w	3b9a8 <_svfiprintf_r+0x1b8>
   3b870:	2300      	movs	r3, #0
   3b872:	f04f 32ff 	mov.w	r2, #4294967295
   3b876:	3601      	adds	r6, #1
   3b878:	9304      	str	r3, [sp, #16]
   3b87a:	9307      	str	r3, [sp, #28]
   3b87c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3b880:	931a      	str	r3, [sp, #104]	; 0x68
   3b882:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3b886:	4634      	mov	r4, r6
   3b888:	2205      	movs	r2, #5
   3b88a:	4850      	ldr	r0, [pc, #320]	; (3b9cc <_svfiprintf_r+0x1dc>)
   3b88c:	f814 1b01 	ldrb.w	r1, [r4], #1
   3b890:	f003 f9ff 	bl	3ec92 <memchr>
   3b894:	9b04      	ldr	r3, [sp, #16]
   3b896:	b9c0      	cbnz	r0, 3b8ca <_svfiprintf_r+0xda>
   3b898:	06d9      	lsls	r1, r3, #27
   3b89a:	bf44      	itt	mi
   3b89c:	2220      	movmi	r2, #32
   3b89e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3b8a2:	071a      	lsls	r2, r3, #28
   3b8a4:	bf44      	itt	mi
   3b8a6:	222b      	movmi	r2, #43	; 0x2b
   3b8a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3b8ac:	7832      	ldrb	r2, [r6, #0]
   3b8ae:	2a2a      	cmp	r2, #42	; 0x2a
   3b8b0:	d013      	beq.n	3b8da <_svfiprintf_r+0xea>
   3b8b2:	4634      	mov	r4, r6
   3b8b4:	9a07      	ldr	r2, [sp, #28]
   3b8b6:	2000      	movs	r0, #0
   3b8b8:	260a      	movs	r6, #10
   3b8ba:	4621      	mov	r1, r4
   3b8bc:	f811 3b01 	ldrb.w	r3, [r1], #1
   3b8c0:	3b30      	subs	r3, #48	; 0x30
   3b8c2:	2b09      	cmp	r3, #9
   3b8c4:	d94b      	bls.n	3b95e <_svfiprintf_r+0x16e>
   3b8c6:	b970      	cbnz	r0, 3b8e6 <_svfiprintf_r+0xf6>
   3b8c8:	e014      	b.n	3b8f4 <_svfiprintf_r+0x104>
   3b8ca:	eba0 0009 	sub.w	r0, r0, r9
   3b8ce:	4626      	mov	r6, r4
   3b8d0:	fa0a f000 	lsl.w	r0, sl, r0
   3b8d4:	4318      	orrs	r0, r3
   3b8d6:	9004      	str	r0, [sp, #16]
   3b8d8:	e7d5      	b.n	3b886 <_svfiprintf_r+0x96>
   3b8da:	9a03      	ldr	r2, [sp, #12]
   3b8dc:	1d11      	adds	r1, r2, #4
   3b8de:	6812      	ldr	r2, [r2, #0]
   3b8e0:	2a00      	cmp	r2, #0
   3b8e2:	9103      	str	r1, [sp, #12]
   3b8e4:	db01      	blt.n	3b8ea <_svfiprintf_r+0xfa>
   3b8e6:	9207      	str	r2, [sp, #28]
   3b8e8:	e004      	b.n	3b8f4 <_svfiprintf_r+0x104>
   3b8ea:	4252      	negs	r2, r2
   3b8ec:	f043 0302 	orr.w	r3, r3, #2
   3b8f0:	9207      	str	r2, [sp, #28]
   3b8f2:	9304      	str	r3, [sp, #16]
   3b8f4:	7823      	ldrb	r3, [r4, #0]
   3b8f6:	2b2e      	cmp	r3, #46	; 0x2e
   3b8f8:	d10c      	bne.n	3b914 <_svfiprintf_r+0x124>
   3b8fa:	7863      	ldrb	r3, [r4, #1]
   3b8fc:	2b2a      	cmp	r3, #42	; 0x2a
   3b8fe:	d133      	bne.n	3b968 <_svfiprintf_r+0x178>
   3b900:	9b03      	ldr	r3, [sp, #12]
   3b902:	3402      	adds	r4, #2
   3b904:	1d1a      	adds	r2, r3, #4
   3b906:	681b      	ldr	r3, [r3, #0]
   3b908:	2b00      	cmp	r3, #0
   3b90a:	9203      	str	r2, [sp, #12]
   3b90c:	bfb8      	it	lt
   3b90e:	f04f 33ff 	movlt.w	r3, #4294967295
   3b912:	9305      	str	r3, [sp, #20]
   3b914:	4e2e      	ldr	r6, [pc, #184]	; (3b9d0 <_svfiprintf_r+0x1e0>)
   3b916:	2203      	movs	r2, #3
   3b918:	7821      	ldrb	r1, [r4, #0]
   3b91a:	4630      	mov	r0, r6
   3b91c:	f003 f9b9 	bl	3ec92 <memchr>
   3b920:	b138      	cbz	r0, 3b932 <_svfiprintf_r+0x142>
   3b922:	2340      	movs	r3, #64	; 0x40
   3b924:	1b80      	subs	r0, r0, r6
   3b926:	3401      	adds	r4, #1
   3b928:	fa03 f000 	lsl.w	r0, r3, r0
   3b92c:	9b04      	ldr	r3, [sp, #16]
   3b92e:	4303      	orrs	r3, r0
   3b930:	9304      	str	r3, [sp, #16]
   3b932:	f814 1b01 	ldrb.w	r1, [r4], #1
   3b936:	2206      	movs	r2, #6
   3b938:	4826      	ldr	r0, [pc, #152]	; (3b9d4 <_svfiprintf_r+0x1e4>)
   3b93a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3b93e:	f003 f9a8 	bl	3ec92 <memchr>
   3b942:	2800      	cmp	r0, #0
   3b944:	d038      	beq.n	3b9b8 <_svfiprintf_r+0x1c8>
   3b946:	4b24      	ldr	r3, [pc, #144]	; (3b9d8 <_svfiprintf_r+0x1e8>)
   3b948:	bb13      	cbnz	r3, 3b990 <_svfiprintf_r+0x1a0>
   3b94a:	9b03      	ldr	r3, [sp, #12]
   3b94c:	3307      	adds	r3, #7
   3b94e:	f023 0307 	bic.w	r3, r3, #7
   3b952:	3308      	adds	r3, #8
   3b954:	9303      	str	r3, [sp, #12]
   3b956:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3b958:	4443      	add	r3, r8
   3b95a:	9309      	str	r3, [sp, #36]	; 0x24
   3b95c:	e76e      	b.n	3b83c <_svfiprintf_r+0x4c>
   3b95e:	fb06 3202 	mla	r2, r6, r2, r3
   3b962:	2001      	movs	r0, #1
   3b964:	460c      	mov	r4, r1
   3b966:	e7a8      	b.n	3b8ba <_svfiprintf_r+0xca>
   3b968:	2300      	movs	r3, #0
   3b96a:	3401      	adds	r4, #1
   3b96c:	260a      	movs	r6, #10
   3b96e:	4619      	mov	r1, r3
   3b970:	9305      	str	r3, [sp, #20]
   3b972:	4620      	mov	r0, r4
   3b974:	f810 2b01 	ldrb.w	r2, [r0], #1
   3b978:	3a30      	subs	r2, #48	; 0x30
   3b97a:	2a09      	cmp	r2, #9
   3b97c:	d903      	bls.n	3b986 <_svfiprintf_r+0x196>
   3b97e:	2b00      	cmp	r3, #0
   3b980:	d0c8      	beq.n	3b914 <_svfiprintf_r+0x124>
   3b982:	9105      	str	r1, [sp, #20]
   3b984:	e7c6      	b.n	3b914 <_svfiprintf_r+0x124>
   3b986:	fb06 2101 	mla	r1, r6, r1, r2
   3b98a:	2301      	movs	r3, #1
   3b98c:	4604      	mov	r4, r0
   3b98e:	e7f0      	b.n	3b972 <_svfiprintf_r+0x182>
   3b990:	ab03      	add	r3, sp, #12
   3b992:	462a      	mov	r2, r5
   3b994:	a904      	add	r1, sp, #16
   3b996:	4638      	mov	r0, r7
   3b998:	9300      	str	r3, [sp, #0]
   3b99a:	4b10      	ldr	r3, [pc, #64]	; (3b9dc <_svfiprintf_r+0x1ec>)
   3b99c:	f7fe fc16 	bl	3a1cc <_printf_float>
   3b9a0:	f1b0 3fff 	cmp.w	r0, #4294967295
   3b9a4:	4680      	mov	r8, r0
   3b9a6:	d1d6      	bne.n	3b956 <_svfiprintf_r+0x166>
   3b9a8:	89ab      	ldrh	r3, [r5, #12]
   3b9aa:	065b      	lsls	r3, r3, #25
   3b9ac:	f53f af34 	bmi.w	3b818 <_svfiprintf_r+0x28>
   3b9b0:	9809      	ldr	r0, [sp, #36]	; 0x24
   3b9b2:	b01d      	add	sp, #116	; 0x74
   3b9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b9b8:	ab03      	add	r3, sp, #12
   3b9ba:	462a      	mov	r2, r5
   3b9bc:	a904      	add	r1, sp, #16
   3b9be:	4638      	mov	r0, r7
   3b9c0:	9300      	str	r3, [sp, #0]
   3b9c2:	4b06      	ldr	r3, [pc, #24]	; (3b9dc <_svfiprintf_r+0x1ec>)
   3b9c4:	f7fe fe2c 	bl	3a620 <_printf_i>
   3b9c8:	e7ea      	b.n	3b9a0 <_svfiprintf_r+0x1b0>
   3b9ca:	bf00      	nop
   3b9cc:	00046d56 	.word	0x00046d56
   3b9d0:	00046d5c 	.word	0x00046d5c
   3b9d4:	00046d60 	.word	0x00046d60
   3b9d8:	0003a1cd 	.word	0x0003a1cd
   3b9dc:	0003fcfd 	.word	0x0003fcfd

0003b9e0 <__ssvfiscanf_r>:
   3b9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b9e4:	460c      	mov	r4, r1
   3b9e6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   3b9ea:	2100      	movs	r1, #0
   3b9ec:	4606      	mov	r6, r0
   3b9ee:	f10d 0804 	add.w	r8, sp, #4
   3b9f2:	4f9b      	ldr	r7, [pc, #620]	; (3bc60 <__ssvfiscanf_r+0x280>)
   3b9f4:	f8df 9274 	ldr.w	r9, [pc, #628]	; 3bc6c <__ssvfiscanf_r+0x28c>
   3b9f8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   3b9fc:	9300      	str	r3, [sp, #0]
   3b9fe:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   3ba02:	4998      	ldr	r1, [pc, #608]	; (3bc64 <__ssvfiscanf_r+0x284>)
   3ba04:	91a0      	str	r1, [sp, #640]	; 0x280
   3ba06:	4998      	ldr	r1, [pc, #608]	; (3bc68 <__ssvfiscanf_r+0x288>)
   3ba08:	91a1      	str	r1, [sp, #644]	; 0x284
   3ba0a:	f892 a000 	ldrb.w	sl, [r2]
   3ba0e:	f1ba 0f00 	cmp.w	sl, #0
   3ba12:	f000 8122 	beq.w	3bc5a <__ssvfiscanf_r+0x27a>
   3ba16:	f81a 3007 	ldrb.w	r3, [sl, r7]
   3ba1a:	1c55      	adds	r5, r2, #1
   3ba1c:	f013 0308 	ands.w	r3, r3, #8
   3ba20:	d019      	beq.n	3ba56 <__ssvfiscanf_r+0x76>
   3ba22:	6863      	ldr	r3, [r4, #4]
   3ba24:	2b00      	cmp	r3, #0
   3ba26:	dd0f      	ble.n	3ba48 <__ssvfiscanf_r+0x68>
   3ba28:	6823      	ldr	r3, [r4, #0]
   3ba2a:	781a      	ldrb	r2, [r3, #0]
   3ba2c:	5cba      	ldrb	r2, [r7, r2]
   3ba2e:	0712      	lsls	r2, r2, #28
   3ba30:	d401      	bmi.n	3ba36 <__ssvfiscanf_r+0x56>
   3ba32:	462a      	mov	r2, r5
   3ba34:	e7e9      	b.n	3ba0a <__ssvfiscanf_r+0x2a>
   3ba36:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3ba38:	3301      	adds	r3, #1
   3ba3a:	3201      	adds	r2, #1
   3ba3c:	6023      	str	r3, [r4, #0]
   3ba3e:	9245      	str	r2, [sp, #276]	; 0x114
   3ba40:	6862      	ldr	r2, [r4, #4]
   3ba42:	3a01      	subs	r2, #1
   3ba44:	6062      	str	r2, [r4, #4]
   3ba46:	e7ec      	b.n	3ba22 <__ssvfiscanf_r+0x42>
   3ba48:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3ba4a:	4621      	mov	r1, r4
   3ba4c:	4630      	mov	r0, r6
   3ba4e:	4798      	blx	r3
   3ba50:	2800      	cmp	r0, #0
   3ba52:	d0e9      	beq.n	3ba28 <__ssvfiscanf_r+0x48>
   3ba54:	e7ed      	b.n	3ba32 <__ssvfiscanf_r+0x52>
   3ba56:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   3ba5a:	d17f      	bne.n	3bb5c <__ssvfiscanf_r+0x17c>
   3ba5c:	9341      	str	r3, [sp, #260]	; 0x104
   3ba5e:	9343      	str	r3, [sp, #268]	; 0x10c
   3ba60:	7853      	ldrb	r3, [r2, #1]
   3ba62:	2b2a      	cmp	r3, #42	; 0x2a
   3ba64:	bf04      	itt	eq
   3ba66:	2310      	moveq	r3, #16
   3ba68:	1c95      	addeq	r5, r2, #2
   3ba6a:	f04f 020a 	mov.w	r2, #10
   3ba6e:	bf08      	it	eq
   3ba70:	9341      	streq	r3, [sp, #260]	; 0x104
   3ba72:	46ab      	mov	fp, r5
   3ba74:	f81b 1b01 	ldrb.w	r1, [fp], #1
   3ba78:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3ba7c:	2b09      	cmp	r3, #9
   3ba7e:	d921      	bls.n	3bac4 <__ssvfiscanf_r+0xe4>
   3ba80:	2203      	movs	r2, #3
   3ba82:	487a      	ldr	r0, [pc, #488]	; (3bc6c <__ssvfiscanf_r+0x28c>)
   3ba84:	f003 f905 	bl	3ec92 <memchr>
   3ba88:	b138      	cbz	r0, 3ba9a <__ssvfiscanf_r+0xba>
   3ba8a:	eba0 0309 	sub.w	r3, r0, r9
   3ba8e:	2001      	movs	r0, #1
   3ba90:	465d      	mov	r5, fp
   3ba92:	4098      	lsls	r0, r3
   3ba94:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3ba96:	4318      	orrs	r0, r3
   3ba98:	9041      	str	r0, [sp, #260]	; 0x104
   3ba9a:	f815 3b01 	ldrb.w	r3, [r5], #1
   3ba9e:	2b67      	cmp	r3, #103	; 0x67
   3baa0:	d848      	bhi.n	3bb34 <__ssvfiscanf_r+0x154>
   3baa2:	2b65      	cmp	r3, #101	; 0x65
   3baa4:	f080 809f 	bcs.w	3bbe6 <__ssvfiscanf_r+0x206>
   3baa8:	2b47      	cmp	r3, #71	; 0x47
   3baaa:	d812      	bhi.n	3bad2 <__ssvfiscanf_r+0xf2>
   3baac:	2b45      	cmp	r3, #69	; 0x45
   3baae:	f080 809a 	bcs.w	3bbe6 <__ssvfiscanf_r+0x206>
   3bab2:	2b00      	cmp	r3, #0
   3bab4:	d06b      	beq.n	3bb8e <__ssvfiscanf_r+0x1ae>
   3bab6:	2b25      	cmp	r3, #37	; 0x25
   3bab8:	d050      	beq.n	3bb5c <__ssvfiscanf_r+0x17c>
   3baba:	2303      	movs	r3, #3
   3babc:	9347      	str	r3, [sp, #284]	; 0x11c
   3babe:	230a      	movs	r3, #10
   3bac0:	9342      	str	r3, [sp, #264]	; 0x108
   3bac2:	e016      	b.n	3baf2 <__ssvfiscanf_r+0x112>
   3bac4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   3bac6:	465d      	mov	r5, fp
   3bac8:	fb02 1303 	mla	r3, r2, r3, r1
   3bacc:	3b30      	subs	r3, #48	; 0x30
   3bace:	9343      	str	r3, [sp, #268]	; 0x10c
   3bad0:	e7cf      	b.n	3ba72 <__ssvfiscanf_r+0x92>
   3bad2:	2b5b      	cmp	r3, #91	; 0x5b
   3bad4:	d067      	beq.n	3bba6 <__ssvfiscanf_r+0x1c6>
   3bad6:	d827      	bhi.n	3bb28 <__ssvfiscanf_r+0x148>
   3bad8:	2b58      	cmp	r3, #88	; 0x58
   3bada:	d1ee      	bne.n	3baba <__ssvfiscanf_r+0xda>
   3badc:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3bade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3bae2:	9241      	str	r2, [sp, #260]	; 0x104
   3bae4:	2210      	movs	r2, #16
   3bae6:	2b6f      	cmp	r3, #111	; 0x6f
   3bae8:	9242      	str	r2, [sp, #264]	; 0x108
   3baea:	bf34      	ite	cc
   3baec:	2303      	movcc	r3, #3
   3baee:	2304      	movcs	r3, #4
   3baf0:	9347      	str	r3, [sp, #284]	; 0x11c
   3baf2:	6863      	ldr	r3, [r4, #4]
   3baf4:	2b00      	cmp	r3, #0
   3baf6:	dd78      	ble.n	3bbea <__ssvfiscanf_r+0x20a>
   3baf8:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3bafa:	0659      	lsls	r1, r3, #25
   3bafc:	d404      	bmi.n	3bb08 <__ssvfiscanf_r+0x128>
   3bafe:	6823      	ldr	r3, [r4, #0]
   3bb00:	781a      	ldrb	r2, [r3, #0]
   3bb02:	5cba      	ldrb	r2, [r7, r2]
   3bb04:	0712      	lsls	r2, r2, #28
   3bb06:	d477      	bmi.n	3bbf8 <__ssvfiscanf_r+0x218>
   3bb08:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   3bb0a:	2b02      	cmp	r3, #2
   3bb0c:	f300 8087 	bgt.w	3bc1e <__ssvfiscanf_r+0x23e>
   3bb10:	466b      	mov	r3, sp
   3bb12:	4622      	mov	r2, r4
   3bb14:	a941      	add	r1, sp, #260	; 0x104
   3bb16:	4630      	mov	r0, r6
   3bb18:	f000 f8ac 	bl	3bc74 <_scanf_chars>
   3bb1c:	2801      	cmp	r0, #1
   3bb1e:	f000 809c 	beq.w	3bc5a <__ssvfiscanf_r+0x27a>
   3bb22:	2802      	cmp	r0, #2
   3bb24:	d185      	bne.n	3ba32 <__ssvfiscanf_r+0x52>
   3bb26:	e02f      	b.n	3bb88 <__ssvfiscanf_r+0x1a8>
   3bb28:	2b63      	cmp	r3, #99	; 0x63
   3bb2a:	d047      	beq.n	3bbbc <__ssvfiscanf_r+0x1dc>
   3bb2c:	2b64      	cmp	r3, #100	; 0x64
   3bb2e:	d1c4      	bne.n	3baba <__ssvfiscanf_r+0xda>
   3bb30:	220a      	movs	r2, #10
   3bb32:	e7d8      	b.n	3bae6 <__ssvfiscanf_r+0x106>
   3bb34:	2b70      	cmp	r3, #112	; 0x70
   3bb36:	d02d      	beq.n	3bb94 <__ssvfiscanf_r+0x1b4>
   3bb38:	d808      	bhi.n	3bb4c <__ssvfiscanf_r+0x16c>
   3bb3a:	2b6e      	cmp	r3, #110	; 0x6e
   3bb3c:	d044      	beq.n	3bbc8 <__ssvfiscanf_r+0x1e8>
   3bb3e:	d82e      	bhi.n	3bb9e <__ssvfiscanf_r+0x1be>
   3bb40:	2b69      	cmp	r3, #105	; 0x69
   3bb42:	d1ba      	bne.n	3baba <__ssvfiscanf_r+0xda>
   3bb44:	2300      	movs	r3, #0
   3bb46:	9342      	str	r3, [sp, #264]	; 0x108
   3bb48:	2303      	movs	r3, #3
   3bb4a:	e7d1      	b.n	3baf0 <__ssvfiscanf_r+0x110>
   3bb4c:	2b75      	cmp	r3, #117	; 0x75
   3bb4e:	d0ef      	beq.n	3bb30 <__ssvfiscanf_r+0x150>
   3bb50:	2b78      	cmp	r3, #120	; 0x78
   3bb52:	d0c3      	beq.n	3badc <__ssvfiscanf_r+0xfc>
   3bb54:	2b73      	cmp	r3, #115	; 0x73
   3bb56:	d1b0      	bne.n	3baba <__ssvfiscanf_r+0xda>
   3bb58:	2302      	movs	r3, #2
   3bb5a:	e7c9      	b.n	3baf0 <__ssvfiscanf_r+0x110>
   3bb5c:	6863      	ldr	r3, [r4, #4]
   3bb5e:	2b00      	cmp	r3, #0
   3bb60:	dd0c      	ble.n	3bb7c <__ssvfiscanf_r+0x19c>
   3bb62:	6823      	ldr	r3, [r4, #0]
   3bb64:	781a      	ldrb	r2, [r3, #0]
   3bb66:	4552      	cmp	r2, sl
   3bb68:	d177      	bne.n	3bc5a <__ssvfiscanf_r+0x27a>
   3bb6a:	3301      	adds	r3, #1
   3bb6c:	6862      	ldr	r2, [r4, #4]
   3bb6e:	6023      	str	r3, [r4, #0]
   3bb70:	3a01      	subs	r2, #1
   3bb72:	9b45      	ldr	r3, [sp, #276]	; 0x114
   3bb74:	6062      	str	r2, [r4, #4]
   3bb76:	3301      	adds	r3, #1
   3bb78:	9345      	str	r3, [sp, #276]	; 0x114
   3bb7a:	e75a      	b.n	3ba32 <__ssvfiscanf_r+0x52>
   3bb7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3bb7e:	4621      	mov	r1, r4
   3bb80:	4630      	mov	r0, r6
   3bb82:	4798      	blx	r3
   3bb84:	2800      	cmp	r0, #0
   3bb86:	d0ec      	beq.n	3bb62 <__ssvfiscanf_r+0x182>
   3bb88:	9844      	ldr	r0, [sp, #272]	; 0x110
   3bb8a:	2800      	cmp	r0, #0
   3bb8c:	d15b      	bne.n	3bc46 <__ssvfiscanf_r+0x266>
   3bb8e:	f04f 30ff 	mov.w	r0, #4294967295
   3bb92:	e05e      	b.n	3bc52 <__ssvfiscanf_r+0x272>
   3bb94:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3bb96:	f042 0220 	orr.w	r2, r2, #32
   3bb9a:	9241      	str	r2, [sp, #260]	; 0x104
   3bb9c:	e79e      	b.n	3badc <__ssvfiscanf_r+0xfc>
   3bb9e:	2308      	movs	r3, #8
   3bba0:	9342      	str	r3, [sp, #264]	; 0x108
   3bba2:	2304      	movs	r3, #4
   3bba4:	e7a4      	b.n	3baf0 <__ssvfiscanf_r+0x110>
   3bba6:	4629      	mov	r1, r5
   3bba8:	4640      	mov	r0, r8
   3bbaa:	f004 f95c 	bl	3fe66 <__sccl>
   3bbae:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3bbb0:	4605      	mov	r5, r0
   3bbb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3bbb6:	9341      	str	r3, [sp, #260]	; 0x104
   3bbb8:	2301      	movs	r3, #1
   3bbba:	e799      	b.n	3baf0 <__ssvfiscanf_r+0x110>
   3bbbc:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3bbbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3bbc2:	9341      	str	r3, [sp, #260]	; 0x104
   3bbc4:	2300      	movs	r3, #0
   3bbc6:	e793      	b.n	3baf0 <__ssvfiscanf_r+0x110>
   3bbc8:	9841      	ldr	r0, [sp, #260]	; 0x104
   3bbca:	06c3      	lsls	r3, r0, #27
   3bbcc:	f53f af31 	bmi.w	3ba32 <__ssvfiscanf_r+0x52>
   3bbd0:	9b00      	ldr	r3, [sp, #0]
   3bbd2:	07c0      	lsls	r0, r0, #31
   3bbd4:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3bbd6:	f103 0104 	add.w	r1, r3, #4
   3bbda:	9100      	str	r1, [sp, #0]
   3bbdc:	681b      	ldr	r3, [r3, #0]
   3bbde:	bf4c      	ite	mi
   3bbe0:	801a      	strhmi	r2, [r3, #0]
   3bbe2:	601a      	strpl	r2, [r3, #0]
   3bbe4:	e725      	b.n	3ba32 <__ssvfiscanf_r+0x52>
   3bbe6:	2305      	movs	r3, #5
   3bbe8:	e782      	b.n	3baf0 <__ssvfiscanf_r+0x110>
   3bbea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3bbec:	4621      	mov	r1, r4
   3bbee:	4630      	mov	r0, r6
   3bbf0:	4798      	blx	r3
   3bbf2:	2800      	cmp	r0, #0
   3bbf4:	d080      	beq.n	3baf8 <__ssvfiscanf_r+0x118>
   3bbf6:	e7c7      	b.n	3bb88 <__ssvfiscanf_r+0x1a8>
   3bbf8:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3bbfa:	3201      	adds	r2, #1
   3bbfc:	9245      	str	r2, [sp, #276]	; 0x114
   3bbfe:	6862      	ldr	r2, [r4, #4]
   3bc00:	3a01      	subs	r2, #1
   3bc02:	2a00      	cmp	r2, #0
   3bc04:	6062      	str	r2, [r4, #4]
   3bc06:	dd02      	ble.n	3bc0e <__ssvfiscanf_r+0x22e>
   3bc08:	3301      	adds	r3, #1
   3bc0a:	6023      	str	r3, [r4, #0]
   3bc0c:	e777      	b.n	3bafe <__ssvfiscanf_r+0x11e>
   3bc0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3bc10:	4621      	mov	r1, r4
   3bc12:	4630      	mov	r0, r6
   3bc14:	4798      	blx	r3
   3bc16:	2800      	cmp	r0, #0
   3bc18:	f43f af71 	beq.w	3bafe <__ssvfiscanf_r+0x11e>
   3bc1c:	e7b4      	b.n	3bb88 <__ssvfiscanf_r+0x1a8>
   3bc1e:	2b04      	cmp	r3, #4
   3bc20:	dc06      	bgt.n	3bc30 <__ssvfiscanf_r+0x250>
   3bc22:	466b      	mov	r3, sp
   3bc24:	4622      	mov	r2, r4
   3bc26:	a941      	add	r1, sp, #260	; 0x104
   3bc28:	4630      	mov	r0, r6
   3bc2a:	f000 f87b 	bl	3bd24 <_scanf_i>
   3bc2e:	e775      	b.n	3bb1c <__ssvfiscanf_r+0x13c>
   3bc30:	4b0f      	ldr	r3, [pc, #60]	; (3bc70 <__ssvfiscanf_r+0x290>)
   3bc32:	2b00      	cmp	r3, #0
   3bc34:	f43f aefd 	beq.w	3ba32 <__ssvfiscanf_r+0x52>
   3bc38:	466b      	mov	r3, sp
   3bc3a:	4622      	mov	r2, r4
   3bc3c:	a941      	add	r1, sp, #260	; 0x104
   3bc3e:	4630      	mov	r0, r6
   3bc40:	e000      	b.n	3bc44 <__ssvfiscanf_r+0x264>
   3bc42:	bf00      	nop
   3bc44:	e76a      	b.n	3bb1c <__ssvfiscanf_r+0x13c>
   3bc46:	89a3      	ldrh	r3, [r4, #12]
   3bc48:	f013 0f40 	tst.w	r3, #64	; 0x40
   3bc4c:	bf18      	it	ne
   3bc4e:	f04f 30ff 	movne.w	r0, #4294967295
   3bc52:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   3bc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bc5a:	9844      	ldr	r0, [sp, #272]	; 0x110
   3bc5c:	e7f9      	b.n	3bc52 <__ssvfiscanf_r+0x272>
   3bc5e:	bf00      	nop
   3bc60:	00046c56 	.word	0x00046c56
   3bc64:	0003fdb3 	.word	0x0003fdb3
   3bc68:	0003fe2d 	.word	0x0003fe2d
   3bc6c:	00046d5c 	.word	0x00046d5c
   3bc70:	00000000 	.word	0x00000000

0003bc74 <_scanf_chars>:
   3bc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3bc78:	4615      	mov	r5, r2
   3bc7a:	688a      	ldr	r2, [r1, #8]
   3bc7c:	4680      	mov	r8, r0
   3bc7e:	460c      	mov	r4, r1
   3bc80:	b932      	cbnz	r2, 3bc90 <_scanf_chars+0x1c>
   3bc82:	698a      	ldr	r2, [r1, #24]
   3bc84:	2a00      	cmp	r2, #0
   3bc86:	bf0c      	ite	eq
   3bc88:	2201      	moveq	r2, #1
   3bc8a:	f04f 32ff 	movne.w	r2, #4294967295
   3bc8e:	608a      	str	r2, [r1, #8]
   3bc90:	6822      	ldr	r2, [r4, #0]
   3bc92:	2700      	movs	r7, #0
   3bc94:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3bd20 <_scanf_chars+0xac>
   3bc98:	06d1      	lsls	r1, r2, #27
   3bc9a:	bf5f      	itttt	pl
   3bc9c:	681a      	ldrpl	r2, [r3, #0]
   3bc9e:	1d11      	addpl	r1, r2, #4
   3bca0:	6019      	strpl	r1, [r3, #0]
   3bca2:	6816      	ldrpl	r6, [r2, #0]
   3bca4:	69a0      	ldr	r0, [r4, #24]
   3bca6:	b188      	cbz	r0, 3bccc <_scanf_chars+0x58>
   3bca8:	2801      	cmp	r0, #1
   3bcaa:	d107      	bne.n	3bcbc <_scanf_chars+0x48>
   3bcac:	682b      	ldr	r3, [r5, #0]
   3bcae:	781a      	ldrb	r2, [r3, #0]
   3bcb0:	6963      	ldr	r3, [r4, #20]
   3bcb2:	5c9b      	ldrb	r3, [r3, r2]
   3bcb4:	b953      	cbnz	r3, 3bccc <_scanf_chars+0x58>
   3bcb6:	bb27      	cbnz	r7, 3bd02 <_scanf_chars+0x8e>
   3bcb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3bcbc:	2802      	cmp	r0, #2
   3bcbe:	d120      	bne.n	3bd02 <_scanf_chars+0x8e>
   3bcc0:	682b      	ldr	r3, [r5, #0]
   3bcc2:	781b      	ldrb	r3, [r3, #0]
   3bcc4:	f813 3009 	ldrb.w	r3, [r3, r9]
   3bcc8:	071b      	lsls	r3, r3, #28
   3bcca:	d41a      	bmi.n	3bd02 <_scanf_chars+0x8e>
   3bccc:	6823      	ldr	r3, [r4, #0]
   3bcce:	3701      	adds	r7, #1
   3bcd0:	06da      	lsls	r2, r3, #27
   3bcd2:	bf5e      	ittt	pl
   3bcd4:	682b      	ldrpl	r3, [r5, #0]
   3bcd6:	781b      	ldrbpl	r3, [r3, #0]
   3bcd8:	f806 3b01 	strbpl.w	r3, [r6], #1
   3bcdc:	682a      	ldr	r2, [r5, #0]
   3bcde:	686b      	ldr	r3, [r5, #4]
   3bce0:	3201      	adds	r2, #1
   3bce2:	3b01      	subs	r3, #1
   3bce4:	602a      	str	r2, [r5, #0]
   3bce6:	68a2      	ldr	r2, [r4, #8]
   3bce8:	606b      	str	r3, [r5, #4]
   3bcea:	3a01      	subs	r2, #1
   3bcec:	60a2      	str	r2, [r4, #8]
   3bcee:	b142      	cbz	r2, 3bd02 <_scanf_chars+0x8e>
   3bcf0:	2b00      	cmp	r3, #0
   3bcf2:	dcd7      	bgt.n	3bca4 <_scanf_chars+0x30>
   3bcf4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3bcf8:	4629      	mov	r1, r5
   3bcfa:	4640      	mov	r0, r8
   3bcfc:	4798      	blx	r3
   3bcfe:	2800      	cmp	r0, #0
   3bd00:	d0d0      	beq.n	3bca4 <_scanf_chars+0x30>
   3bd02:	6823      	ldr	r3, [r4, #0]
   3bd04:	f013 0310 	ands.w	r3, r3, #16
   3bd08:	d105      	bne.n	3bd16 <_scanf_chars+0xa2>
   3bd0a:	68e2      	ldr	r2, [r4, #12]
   3bd0c:	3201      	adds	r2, #1
   3bd0e:	60e2      	str	r2, [r4, #12]
   3bd10:	69a2      	ldr	r2, [r4, #24]
   3bd12:	b102      	cbz	r2, 3bd16 <_scanf_chars+0xa2>
   3bd14:	7033      	strb	r3, [r6, #0]
   3bd16:	6923      	ldr	r3, [r4, #16]
   3bd18:	2000      	movs	r0, #0
   3bd1a:	441f      	add	r7, r3
   3bd1c:	6127      	str	r7, [r4, #16]
   3bd1e:	e7cb      	b.n	3bcb8 <_scanf_chars+0x44>
   3bd20:	00046c56 	.word	0x00046c56

0003bd24 <_scanf_i>:
   3bd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bd28:	4699      	mov	r9, r3
   3bd2a:	b087      	sub	sp, #28
   3bd2c:	4b72      	ldr	r3, [pc, #456]	; (3bef8 <_scanf_i+0x1d4>)
   3bd2e:	460c      	mov	r4, r1
   3bd30:	4682      	mov	sl, r0
   3bd32:	4616      	mov	r6, r2
   3bd34:	4627      	mov	r7, r4
   3bd36:	f04f 0b00 	mov.w	fp, #0
   3bd3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   3bd3e:	ab03      	add	r3, sp, #12
   3bd40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   3bd44:	4b6d      	ldr	r3, [pc, #436]	; (3befc <_scanf_i+0x1d8>)
   3bd46:	69a1      	ldr	r1, [r4, #24]
   3bd48:	4a6d      	ldr	r2, [pc, #436]	; (3bf00 <_scanf_i+0x1dc>)
   3bd4a:	2903      	cmp	r1, #3
   3bd4c:	bf18      	it	ne
   3bd4e:	461a      	movne	r2, r3
   3bd50:	68a3      	ldr	r3, [r4, #8]
   3bd52:	9201      	str	r2, [sp, #4]
   3bd54:	1e5a      	subs	r2, r3, #1
   3bd56:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   3bd5a:	bf89      	itett	hi
   3bd5c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   3bd60:	f04f 0800 	movls.w	r8, #0
   3bd64:	eb03 0805 	addhi.w	r8, r3, r5
   3bd68:	f240 135d 	movwhi	r3, #349	; 0x15d
   3bd6c:	bf88      	it	hi
   3bd6e:	60a3      	strhi	r3, [r4, #8]
   3bd70:	f857 3b1c 	ldr.w	r3, [r7], #28
   3bd74:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   3bd78:	463d      	mov	r5, r7
   3bd7a:	6023      	str	r3, [r4, #0]
   3bd7c:	6831      	ldr	r1, [r6, #0]
   3bd7e:	ab03      	add	r3, sp, #12
   3bd80:	2202      	movs	r2, #2
   3bd82:	7809      	ldrb	r1, [r1, #0]
   3bd84:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   3bd88:	f002 ff83 	bl	3ec92 <memchr>
   3bd8c:	b328      	cbz	r0, 3bdda <_scanf_i+0xb6>
   3bd8e:	f1bb 0f01 	cmp.w	fp, #1
   3bd92:	d159      	bne.n	3be48 <_scanf_i+0x124>
   3bd94:	6862      	ldr	r2, [r4, #4]
   3bd96:	b92a      	cbnz	r2, 3bda4 <_scanf_i+0x80>
   3bd98:	6822      	ldr	r2, [r4, #0]
   3bd9a:	2308      	movs	r3, #8
   3bd9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3bda0:	6063      	str	r3, [r4, #4]
   3bda2:	6022      	str	r2, [r4, #0]
   3bda4:	6822      	ldr	r2, [r4, #0]
   3bda6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   3bdaa:	6022      	str	r2, [r4, #0]
   3bdac:	68a2      	ldr	r2, [r4, #8]
   3bdae:	1e51      	subs	r1, r2, #1
   3bdb0:	60a1      	str	r1, [r4, #8]
   3bdb2:	b192      	cbz	r2, 3bdda <_scanf_i+0xb6>
   3bdb4:	6832      	ldr	r2, [r6, #0]
   3bdb6:	1c51      	adds	r1, r2, #1
   3bdb8:	6031      	str	r1, [r6, #0]
   3bdba:	7812      	ldrb	r2, [r2, #0]
   3bdbc:	f805 2b01 	strb.w	r2, [r5], #1
   3bdc0:	6872      	ldr	r2, [r6, #4]
   3bdc2:	3a01      	subs	r2, #1
   3bdc4:	2a00      	cmp	r2, #0
   3bdc6:	6072      	str	r2, [r6, #4]
   3bdc8:	dc07      	bgt.n	3bdda <_scanf_i+0xb6>
   3bdca:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   3bdce:	4631      	mov	r1, r6
   3bdd0:	4650      	mov	r0, sl
   3bdd2:	4790      	blx	r2
   3bdd4:	2800      	cmp	r0, #0
   3bdd6:	f040 8085 	bne.w	3bee4 <_scanf_i+0x1c0>
   3bdda:	f10b 0b01 	add.w	fp, fp, #1
   3bdde:	f1bb 0f03 	cmp.w	fp, #3
   3bde2:	d1cb      	bne.n	3bd7c <_scanf_i+0x58>
   3bde4:	6863      	ldr	r3, [r4, #4]
   3bde6:	b90b      	cbnz	r3, 3bdec <_scanf_i+0xc8>
   3bde8:	230a      	movs	r3, #10
   3bdea:	6063      	str	r3, [r4, #4]
   3bdec:	6863      	ldr	r3, [r4, #4]
   3bdee:	f04f 0b00 	mov.w	fp, #0
   3bdf2:	4944      	ldr	r1, [pc, #272]	; (3bf04 <_scanf_i+0x1e0>)
   3bdf4:	6960      	ldr	r0, [r4, #20]
   3bdf6:	1ac9      	subs	r1, r1, r3
   3bdf8:	f004 f835 	bl	3fe66 <__sccl>
   3bdfc:	68a3      	ldr	r3, [r4, #8]
   3bdfe:	6822      	ldr	r2, [r4, #0]
   3be00:	2b00      	cmp	r3, #0
   3be02:	d03d      	beq.n	3be80 <_scanf_i+0x15c>
   3be04:	6831      	ldr	r1, [r6, #0]
   3be06:	6960      	ldr	r0, [r4, #20]
   3be08:	f891 c000 	ldrb.w	ip, [r1]
   3be0c:	f810 000c 	ldrb.w	r0, [r0, ip]
   3be10:	2800      	cmp	r0, #0
   3be12:	d035      	beq.n	3be80 <_scanf_i+0x15c>
   3be14:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   3be18:	d124      	bne.n	3be64 <_scanf_i+0x140>
   3be1a:	0510      	lsls	r0, r2, #20
   3be1c:	d522      	bpl.n	3be64 <_scanf_i+0x140>
   3be1e:	f10b 0b01 	add.w	fp, fp, #1
   3be22:	f1b8 0f00 	cmp.w	r8, #0
   3be26:	d003      	beq.n	3be30 <_scanf_i+0x10c>
   3be28:	3301      	adds	r3, #1
   3be2a:	f108 38ff 	add.w	r8, r8, #4294967295
   3be2e:	60a3      	str	r3, [r4, #8]
   3be30:	6873      	ldr	r3, [r6, #4]
   3be32:	3b01      	subs	r3, #1
   3be34:	2b00      	cmp	r3, #0
   3be36:	6073      	str	r3, [r6, #4]
   3be38:	dd1b      	ble.n	3be72 <_scanf_i+0x14e>
   3be3a:	6833      	ldr	r3, [r6, #0]
   3be3c:	3301      	adds	r3, #1
   3be3e:	6033      	str	r3, [r6, #0]
   3be40:	68a3      	ldr	r3, [r4, #8]
   3be42:	3b01      	subs	r3, #1
   3be44:	60a3      	str	r3, [r4, #8]
   3be46:	e7d9      	b.n	3bdfc <_scanf_i+0xd8>
   3be48:	f1bb 0f02 	cmp.w	fp, #2
   3be4c:	d1ae      	bne.n	3bdac <_scanf_i+0x88>
   3be4e:	6822      	ldr	r2, [r4, #0]
   3be50:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   3be54:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   3be58:	d1bf      	bne.n	3bdda <_scanf_i+0xb6>
   3be5a:	2310      	movs	r3, #16
   3be5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   3be60:	6063      	str	r3, [r4, #4]
   3be62:	e7a2      	b.n	3bdaa <_scanf_i+0x86>
   3be64:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   3be68:	6022      	str	r2, [r4, #0]
   3be6a:	780b      	ldrb	r3, [r1, #0]
   3be6c:	f805 3b01 	strb.w	r3, [r5], #1
   3be70:	e7de      	b.n	3be30 <_scanf_i+0x10c>
   3be72:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3be76:	4631      	mov	r1, r6
   3be78:	4650      	mov	r0, sl
   3be7a:	4798      	blx	r3
   3be7c:	2800      	cmp	r0, #0
   3be7e:	d0df      	beq.n	3be40 <_scanf_i+0x11c>
   3be80:	6823      	ldr	r3, [r4, #0]
   3be82:	05d9      	lsls	r1, r3, #23
   3be84:	d50d      	bpl.n	3bea2 <_scanf_i+0x17e>
   3be86:	42bd      	cmp	r5, r7
   3be88:	d909      	bls.n	3be9e <_scanf_i+0x17a>
   3be8a:	f105 38ff 	add.w	r8, r5, #4294967295
   3be8e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   3be92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   3be96:	4632      	mov	r2, r6
   3be98:	4645      	mov	r5, r8
   3be9a:	4650      	mov	r0, sl
   3be9c:	4798      	blx	r3
   3be9e:	42bd      	cmp	r5, r7
   3bea0:	d028      	beq.n	3bef4 <_scanf_i+0x1d0>
   3bea2:	6822      	ldr	r2, [r4, #0]
   3bea4:	f012 0210 	ands.w	r2, r2, #16
   3bea8:	d113      	bne.n	3bed2 <_scanf_i+0x1ae>
   3beaa:	702a      	strb	r2, [r5, #0]
   3beac:	4639      	mov	r1, r7
   3beae:	6863      	ldr	r3, [r4, #4]
   3beb0:	4650      	mov	r0, sl
   3beb2:	9e01      	ldr	r6, [sp, #4]
   3beb4:	47b0      	blx	r6
   3beb6:	f8d9 3000 	ldr.w	r3, [r9]
   3beba:	6821      	ldr	r1, [r4, #0]
   3bebc:	1d1a      	adds	r2, r3, #4
   3bebe:	f011 0f20 	tst.w	r1, #32
   3bec2:	f8c9 2000 	str.w	r2, [r9]
   3bec6:	681b      	ldr	r3, [r3, #0]
   3bec8:	d00f      	beq.n	3beea <_scanf_i+0x1c6>
   3beca:	6018      	str	r0, [r3, #0]
   3becc:	68e3      	ldr	r3, [r4, #12]
   3bece:	3301      	adds	r3, #1
   3bed0:	60e3      	str	r3, [r4, #12]
   3bed2:	1bed      	subs	r5, r5, r7
   3bed4:	2000      	movs	r0, #0
   3bed6:	44ab      	add	fp, r5
   3bed8:	6925      	ldr	r5, [r4, #16]
   3beda:	445d      	add	r5, fp
   3bedc:	6125      	str	r5, [r4, #16]
   3bede:	b007      	add	sp, #28
   3bee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bee4:	f04f 0b00 	mov.w	fp, #0
   3bee8:	e7ca      	b.n	3be80 <_scanf_i+0x15c>
   3beea:	07ca      	lsls	r2, r1, #31
   3beec:	bf4c      	ite	mi
   3beee:	8018      	strhmi	r0, [r3, #0]
   3bef0:	6018      	strpl	r0, [r3, #0]
   3bef2:	e7eb      	b.n	3becc <_scanf_i+0x1a8>
   3bef4:	2001      	movs	r0, #1
   3bef6:	e7f2      	b.n	3bede <_scanf_i+0x1ba>
   3bef8:	00040438 	.word	0x00040438
   3befc:	0003f189 	.word	0x0003f189
   3bf00:	0003f185 	.word	0x0003f185
   3bf04:	00046de6 	.word	0x00046de6

0003bf08 <_read_r>:
   3bf08:	b538      	push	{r3, r4, r5, lr}
   3bf0a:	4605      	mov	r5, r0
   3bf0c:	4c06      	ldr	r4, [pc, #24]	; (3bf28 <_read_r+0x20>)
   3bf0e:	4608      	mov	r0, r1
   3bf10:	4611      	mov	r1, r2
   3bf12:	2200      	movs	r2, #0
   3bf14:	6022      	str	r2, [r4, #0]
   3bf16:	461a      	mov	r2, r3
   3bf18:	f000 fd80 	bl	3ca1c <_read>
   3bf1c:	1c43      	adds	r3, r0, #1
   3bf1e:	d102      	bne.n	3bf26 <_read_r+0x1e>
   3bf20:	6823      	ldr	r3, [r4, #0]
   3bf22:	b103      	cbz	r3, 3bf26 <_read_r+0x1e>
   3bf24:	602b      	str	r3, [r5, #0]
   3bf26:	bd38      	pop	{r3, r4, r5, pc}
   3bf28:	2002bb10 	.word	0x2002bb10

0003bf2c <raise>:
   3bf2c:	4b02      	ldr	r3, [pc, #8]	; (3bf38 <raise+0xc>)
   3bf2e:	4601      	mov	r1, r0
   3bf30:	6818      	ldr	r0, [r3, #0]
   3bf32:	f003 bfc9 	b.w	3fec8 <_raise_r>
   3bf36:	bf00      	nop
   3bf38:	2003157c 	.word	0x2003157c

0003bf3c <_kill_r>:
   3bf3c:	b538      	push	{r3, r4, r5, lr}
   3bf3e:	2300      	movs	r3, #0
   3bf40:	4c06      	ldr	r4, [pc, #24]	; (3bf5c <_kill_r+0x20>)
   3bf42:	4605      	mov	r5, r0
   3bf44:	4608      	mov	r0, r1
   3bf46:	4611      	mov	r1, r2
   3bf48:	6023      	str	r3, [r4, #0]
   3bf4a:	f000 fd76 	bl	3ca3a <_kill>
   3bf4e:	1c43      	adds	r3, r0, #1
   3bf50:	d102      	bne.n	3bf58 <_kill_r+0x1c>
   3bf52:	6823      	ldr	r3, [r4, #0]
   3bf54:	b103      	cbz	r3, 3bf58 <_kill_r+0x1c>
   3bf56:	602b      	str	r3, [r5, #0]
   3bf58:	bd38      	pop	{r3, r4, r5, pc}
   3bf5a:	bf00      	nop
   3bf5c:	2002bb10 	.word	0x2002bb10

0003bf60 <_fstat_r>:
   3bf60:	b538      	push	{r3, r4, r5, lr}
   3bf62:	2300      	movs	r3, #0
   3bf64:	4c06      	ldr	r4, [pc, #24]	; (3bf80 <_fstat_r+0x20>)
   3bf66:	4605      	mov	r5, r0
   3bf68:	4608      	mov	r0, r1
   3bf6a:	4611      	mov	r1, r2
   3bf6c:	6023      	str	r3, [r4, #0]
   3bf6e:	f000 fd68 	bl	3ca42 <_fstat>
   3bf72:	1c43      	adds	r3, r0, #1
   3bf74:	d102      	bne.n	3bf7c <_fstat_r+0x1c>
   3bf76:	6823      	ldr	r3, [r4, #0]
   3bf78:	b103      	cbz	r3, 3bf7c <_fstat_r+0x1c>
   3bf7a:	602b      	str	r3, [r5, #0]
   3bf7c:	bd38      	pop	{r3, r4, r5, pc}
   3bf7e:	bf00      	nop
   3bf80:	2002bb10 	.word	0x2002bb10

0003bf84 <_isatty_r>:
   3bf84:	b538      	push	{r3, r4, r5, lr}
   3bf86:	2300      	movs	r3, #0
   3bf88:	4c05      	ldr	r4, [pc, #20]	; (3bfa0 <_isatty_r+0x1c>)
   3bf8a:	4605      	mov	r5, r0
   3bf8c:	4608      	mov	r0, r1
   3bf8e:	6023      	str	r3, [r4, #0]
   3bf90:	f000 fd51 	bl	3ca36 <_isatty>
   3bf94:	1c43      	adds	r3, r0, #1
   3bf96:	d102      	bne.n	3bf9e <_isatty_r+0x1a>
   3bf98:	6823      	ldr	r3, [r4, #0]
   3bf9a:	b103      	cbz	r3, 3bf9e <_isatty_r+0x1a>
   3bf9c:	602b      	str	r3, [r5, #0]
   3bf9e:	bd38      	pop	{r3, r4, r5, pc}
   3bfa0:	2002bb10 	.word	0x2002bb10

0003bfa4 <cloud_send>:
	if (backend == NULL || backend->api == NULL ||
   3bfa4:	b120      	cbz	r0, 3bfb0 <cloud_send+0xc>
   3bfa6:	6803      	ldr	r3, [r0, #0]
   3bfa8:	b113      	cbz	r3, 3bfb0 <cloud_send+0xc>
	    backend->api->send == NULL) {
   3bfaa:	691b      	ldr	r3, [r3, #16]
	if (backend == NULL || backend->api == NULL ||
   3bfac:	b103      	cbz	r3, 3bfb0 <cloud_send+0xc>
	return backend->api->send(backend, msg);
   3bfae:	4718      	bx	r3
}
   3bfb0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3bfb4:	4770      	bx	lr

0003bfb6 <atomic_set>:
   3bfb6:	e8d0 3fef 	ldaex	r3, [r0]
   3bfba:	e8c0 1fe2 	stlex	r2, r1, [r0]
   3bfbe:	2a00      	cmp	r2, #0
   3bfc0:	d1f9      	bne.n	3bfb6 <atomic_set>
}
   3bfc2:	4618      	mov	r0, r3
   3bfc4:	4770      	bx	lr

0003bfc6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3bfc6:	e8d0 0faf 	lda	r0, [r0]
}
   3bfca:	4770      	bx	lr

0003bfcc <cloud_reboot_handler>:
	error_handler(ERROR_CLOUD, -ETIMEDOUT);
   3bfcc:	f06f 0173 	mvn.w	r1, #115	; 0x73
   3bfd0:	2000      	movs	r0, #0
   3bfd2:	f7e4 bccb 	b.w	2096c <error_handler>

0003bfd6 <cloud_error_handler>:
	error_handler(ERROR_CLOUD, err);
   3bfd6:	4601      	mov	r1, r0
   3bfd8:	2000      	movs	r0, #0
   3bfda:	f7e4 bcc7 	b.w	2096c <error_handler>

0003bfde <bsd_recoverable_error_handler>:
{
   3bfde:	b508      	push	{r3, lr}
   3bfe0:	f7e6 ff4a 	bl	22e78 <z_impl_log_panic>
}
   3bfe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_reboot(0);
   3bfe8:	2000      	movs	r0, #0
   3bfea:	f7e7 baff 	b.w	235ec <sys_reboot>

0003bfee <sensor_channel_get>:
	return api->channel_get(dev, chan, val);
   3bfee:	6843      	ldr	r3, [r0, #4]
   3bff0:	68db      	ldr	r3, [r3, #12]
   3bff2:	4718      	bx	r3

0003bff4 <ui_led_set_color>:
}
   3bff4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3bff8:	4770      	bx	lr

0003bffa <json_value_string_compare>:
{
   3bffa:	b510      	push	{r4, lr}
   3bffc:	460c      	mov	r4, r1
	char *json_str = cJSON_GetStringValue(obj);
   3bffe:	f001 fd38 	bl	3da72 <cJSON_GetStringValue>
	if ((json_str == NULL) || (str == NULL)) {
   3c002:	b130      	cbz	r0, 3c012 <json_value_string_compare+0x18>
   3c004:	b134      	cbz	r4, 3c014 <json_value_string_compare+0x1a>
	return (strcmp(json_str, str) == 0);
   3c006:	4621      	mov	r1, r4
   3c008:	f7e1 f882 	bl	1d110 <strcmp>
   3c00c:	fab0 f080 	clz	r0, r0
   3c010:	0940      	lsrs	r0, r0, #5
}
   3c012:	bd10      	pop	{r4, pc}
		return false;
   3c014:	4620      	mov	r0, r4
   3c016:	e7fc      	b.n	3c012 <json_value_string_compare+0x18>

0003c018 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3c018:	b108      	cbz	r0, 3c01e <json_object_decode+0x6>
   3c01a:	f001 bcd9 	b.w	3d9d0 <cJSON_GetObjectItem>
}
   3c01e:	4770      	bx	lr

0003c020 <add_array_obj>:
{
   3c020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c024:	4681      	mov	r9, r0
   3c026:	4688      	mov	r8, r1
   3c028:	4617      	mov	r7, r2
	if ((obj == NULL) || (item_name == NULL)) {
   3c02a:	461e      	mov	r6, r3
   3c02c:	b32b      	cbz	r3, 3c07a <add_array_obj+0x5a>
	obj_to_add = cJSON_CreateArray();
   3c02e:	f7ea fc8d 	bl	2694c <cJSON_CreateArray>
	if (obj_to_add == NULL) {
   3c032:	4604      	mov	r4, r0
   3c034:	b1d0      	cbz	r0, 3c06c <add_array_obj+0x4c>
	for (u32_t cnt = 0; cnt < item_cnt; ++cnt) {
   3c036:	2500      	movs	r5, #0
   3c038:	4545      	cmp	r5, r8
   3c03a:	d10d      	bne.n	3c058 <add_array_obj+0x38>
	if (cJSON_GetArraySize(obj_to_add) == 0) {
   3c03c:	4620      	mov	r0, r4
   3c03e:	f001 fcbf 	bl	3d9c0 <cJSON_GetArraySize>
   3c042:	b908      	cbnz	r0, 3c048 <add_array_obj+0x28>
		obj_to_add->type = cJSON_NULL;
   3c044:	2304      	movs	r3, #4
   3c046:	60e3      	str	r3, [r4, #12]
	cJSON_AddItemToObject(obj, item_name, obj_to_add);
   3c048:	4630      	mov	r0, r6
   3c04a:	4622      	mov	r2, r4
   3c04c:	4639      	mov	r1, r7
   3c04e:	f001 fcce 	bl	3d9ee <cJSON_AddItemToObject>
	return 0;
   3c052:	2000      	movs	r0, #0
}
   3c054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (items[cnt] != NULL) {
   3c058:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   3c05c:	b158      	cbz	r0, 3c076 <add_array_obj+0x56>
			str = cJSON_CreateString(items[cnt]);
   3c05e:	f7ea fc5d 	bl	2691c <cJSON_CreateString>
			if (str == NULL) {
   3c062:	4601      	mov	r1, r0
				cJSON_Delete(obj_to_add);
   3c064:	4620      	mov	r0, r4
			if (str == NULL) {
   3c066:	b921      	cbnz	r1, 3c072 <add_array_obj+0x52>
				cJSON_Delete(obj_to_add);
   3c068:	f7ea fbb8 	bl	267dc <cJSON_Delete>
		return -ENOMEM;
   3c06c:	f06f 000b 	mvn.w	r0, #11
   3c070:	e7f0      	b.n	3c054 <add_array_obj+0x34>
			cJSON_AddItemToArray(obj_to_add, str);
   3c072:	f001 fcba 	bl	3d9ea <cJSON_AddItemToArray>
	for (u32_t cnt = 0; cnt < item_cnt; ++cnt) {
   3c076:	3501      	adds	r5, #1
   3c078:	e7de      	b.n	3c038 <add_array_obj+0x18>
		return -EINVAL;
   3c07a:	f06f 0015 	mvn.w	r0, #21
   3c07e:	e7e9      	b.n	3c054 <add_array_obj+0x34>

0003c080 <atomic_set>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3c080:	e8d0 3fef 	ldaex	r3, [r0]
   3c084:	e8c0 1fe2 	stlex	r2, r1, [r0]
   3c088:	2a00      	cmp	r2, #0
   3c08a:	d1f9      	bne.n	3c080 <atomic_set>
}
   3c08c:	4618      	mov	r0, r3
   3c08e:	4770      	bx	lr

0003c090 <env_sensors_get_air_quality>:
}
   3c090:	f04f 30ff 	mov.w	r0, #4294967295
   3c094:	4770      	bx	lr

0003c096 <get_bit_ptr>:
{
   3c096:	b570      	push	{r4, r5, r6, lr}
   3c098:	250c      	movs	r5, #12
   3c09a:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   3c09c:	f990 000b 	ldrsb.w	r0, [r0, #11]
   3c0a0:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   3c0a2:	4288      	cmp	r0, r1
	*word = &bitarray[bn / 32];
   3c0a4:	4610      	mov	r0, r2
   3c0a6:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   3c0aa:	bfb8      	it	lt
   3c0ac:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   3c0ae:	2a00      	cmp	r2, #0
   3c0b0:	bfb8      	it	lt
   3c0b2:	f102 001f 	addlt.w	r0, r2, #31
   3c0b6:	1140      	asrs	r0, r0, #5
   3c0b8:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   3c0bc:	6019      	str	r1, [r3, #0]
}
   3c0be:	f002 001f 	and.w	r0, r2, #31
   3c0c2:	bd70      	pop	{r4, r5, r6, pc}

0003c0c4 <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   3c0c4:	f04f 0320 	mov.w	r3, #32
   3c0c8:	f3ef 8011 	mrs	r0, BASEPRI
   3c0cc:	f383 8811 	msr	BASEPRI, r3
   3c0d0:	f3bf 8f6f 	isb	sy
}
   3c0d4:	4770      	bx	lr

0003c0d6 <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   3c0d6:	07c3      	lsls	r3, r0, #31
   3c0d8:	d503      	bpl.n	3c0e2 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   3c0da:	f381 8811 	msr	BASEPRI, r1
   3c0de:	f3bf 8f6f 	isb	sy
}
   3c0e2:	4770      	bx	lr

0003c0e4 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   3c0e4:	23ff      	movs	r3, #255	; 0xff
{
   3c0e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3c0ea:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   3c0ec:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3c0ee:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   3c0f0:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   3c0f2:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3c0f6:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   3c0f8:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3c0fa:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   3c0fe:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   3c102:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   3c104:	4598      	cmp	r8, r3
   3c106:	dc05      	bgt.n	3c114 <z_sys_mem_pool_base_init+0x30>
   3c108:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   3c10a:	4619      	mov	r1, r3
   3c10c:	428f      	cmp	r7, r1
   3c10e:	dc20      	bgt.n	3c152 <z_sys_mem_pool_base_init+0x6e>
}
   3c110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   3c114:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   3c118:	fb09 fe03 	mul.w	lr, r9, r3
   3c11c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   3c120:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   3c122:	eb0a 040e 	add.w	r4, sl, lr
   3c126:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   3c12a:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   3c12e:	d805      	bhi.n	3c13c <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   3c130:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   3c132:	0892      	lsrs	r2, r2, #2
   3c134:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   3c138:	3301      	adds	r3, #1
   3c13a:	e7e3      	b.n	3c104 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   3c13c:	f115 041f 	adds.w	r4, r5, #31
   3c140:	bf48      	it	mi
   3c142:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   3c146:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   3c148:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   3c14c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   3c150:	e7ef      	b.n	3c132 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   3c152:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   3c154:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   3c156:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   3c15a:	18ec      	adds	r4, r5, r3
	node->next = list;
   3c15c:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   3c160:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   3c162:	3101      	adds	r1, #1
   3c164:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   3c166:	6895      	ldr	r5, [r2, #8]
   3c168:	4433      	add	r3, r6
   3c16a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   3c16c:	6094      	str	r4, [r2, #8]
   3c16e:	e7cd      	b.n	3c10c <z_sys_mem_pool_base_init+0x28>

0003c170 <z_sys_mem_pool_block_alloc>:
{
   3c170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c174:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   3c176:	7a84      	ldrb	r4, [r0, #10]
{
   3c178:	af00      	add	r7, sp, #0
   3c17a:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   3c17e:	00a3      	lsls	r3, r4, #2
   3c180:	3307      	adds	r3, #7
   3c182:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   3c186:	ebad 0d03 	sub.w	sp, sp, r3
   3c18a:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   3c18c:	4653      	mov	r3, sl
   3c18e:	6842      	ldr	r2, [r0, #4]
{
   3c190:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   3c192:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   3c196:	2200      	movs	r2, #0
   3c198:	4294      	cmp	r4, r2
   3c19a:	f102 39ff 	add.w	r9, r2, #4294967295
   3c19e:	dd09      	ble.n	3c1b4 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   3c1a0:	b122      	cbz	r2, 3c1ac <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   3c1a2:	6818      	ldr	r0, [r3, #0]
   3c1a4:	0880      	lsrs	r0, r0, #2
   3c1a6:	f020 0003 	bic.w	r0, r0, #3
   3c1aa:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   3c1ac:	f853 0f04 	ldr.w	r0, [r3, #4]!
   3c1b0:	4288      	cmp	r0, r1
   3c1b2:	d208      	bcs.n	3c1c6 <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   3c1b4:	f1b9 3fff 	cmp.w	r9, #4294967295
   3c1b8:	d107      	bne.n	3c1ca <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   3c1ba:	2300      	movs	r3, #0
   3c1bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   3c1be:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   3c1c0:	f06f 000b 	mvn.w	r0, #11
   3c1c4:	e02c      	b.n	3c220 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   3c1c6:	3201      	adds	r2, #1
   3c1c8:	e7e6      	b.n	3c198 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   3c1ca:	7c28      	ldrb	r0, [r5, #16]
   3c1cc:	f010 0001 	ands.w	r0, r0, #1
   3c1d0:	d001      	beq.n	3c1d6 <z_sys_mem_pool_block_alloc+0x66>
   3c1d2:	f7ff ff77 	bl	3c0c4 <pool_irq_lock.isra.2.part.3>
   3c1d6:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   3c1d8:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   3c1da:	464e      	mov	r6, r9
   3c1dc:	68ea      	ldr	r2, [r5, #12]
   3c1de:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   3c1e2:	461a      	mov	r2, r3
   3c1e4:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   3c1e8:	4294      	cmp	r4, r2
   3c1ea:	d11d      	bne.n	3c228 <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   3c1ec:	3e01      	subs	r6, #1
   3c1ee:	1c72      	adds	r2, r6, #1
   3c1f0:	f1a3 030c 	sub.w	r3, r3, #12
   3c1f4:	d1f5      	bne.n	3c1e2 <z_sys_mem_pool_block_alloc+0x72>
   3c1f6:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   3c1f8:	4641      	mov	r1, r8
   3c1fa:	7c28      	ldrb	r0, [r5, #16]
   3c1fc:	f7ff ff6b 	bl	3c0d6 <pool_irq_unlock.isra.4>
	*data_p = data;
   3c200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   3c202:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   3c204:	2c00      	cmp	r4, #0
   3c206:	d0db      	beq.n	3c1c0 <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   3c208:	68bb      	ldr	r3, [r7, #8]
	return 0;
   3c20a:	2000      	movs	r0, #0
	*level_p = alloc_l;
   3c20c:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3c210:	682b      	ldr	r3, [r5, #0]
   3c212:	1ae4      	subs	r4, r4, r3
   3c214:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   3c218:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   3c21c:	687b      	ldr	r3, [r7, #4]
   3c21e:	601c      	str	r4, [r3, #0]
}
   3c220:	371c      	adds	r7, #28
   3c222:	46bd      	mov	sp, r7
   3c224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   3c228:	e9d4 3200 	ldrd	r3, r2, [r4]
   3c22c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3c22e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3c230:	2300      	movs	r3, #0
	node->prev = NULL;
   3c232:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3c236:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   3c238:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3c23c:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   3c23e:	f107 0b14 	add.w	fp, r7, #20
   3c242:	fb92 f2f1 	sdiv	r2, r2, r1
   3c246:	465b      	mov	r3, fp
   3c248:	4631      	mov	r1, r6
   3c24a:	4628      	mov	r0, r5
   3c24c:	f7ff ff23 	bl	3c096 <get_bit_ptr>
	*word |= (1<<bit);
   3c250:	2201      	movs	r2, #1
   3c252:	6979      	ldr	r1, [r7, #20]
   3c254:	fa02 f000 	lsl.w	r0, r2, r0
   3c258:	680b      	ldr	r3, [r1, #0]
   3c25a:	603a      	str	r2, [r7, #0]
   3c25c:	4303      	orrs	r3, r0
   3c25e:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   3c260:	454e      	cmp	r6, r9
   3c262:	dac9      	bge.n	3c1f8 <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3c264:	682a      	ldr	r2, [r5, #0]
   3c266:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   3c26a:	1aa2      	subs	r2, r4, r2
   3c26c:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   3c270:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   3c272:	465b      	mov	r3, fp
   3c274:	0092      	lsls	r2, r2, #2
   3c276:	4631      	mov	r1, r6
   3c278:	4628      	mov	r0, r5
   3c27a:	f7ff ff0c 	bl	3c096 <get_bit_ptr>
	*word |= (1<<bit);
   3c27e:	697a      	ldr	r2, [r7, #20]
   3c280:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   3c282:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   3c284:	fa03 f000 	lsl.w	r0, r3, r0
   3c288:	6813      	ldr	r3, [r2, #0]
   3c28a:	4303      	orrs	r3, r0
   3c28c:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   3c28e:	230c      	movs	r3, #12
   3c290:	2203      	movs	r2, #3
   3c292:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   3c296:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   3c29a:	f101 0e04 	add.w	lr, r1, #4
   3c29e:	1823      	adds	r3, r4, r0
   3c2a0:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   3c2a2:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   3c2a4:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   3c2a8:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   3c2aa:	688a      	ldr	r2, [r1, #8]
   3c2ac:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   3c2ae:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   3c2b0:	608b      	str	r3, [r1, #8]
   3c2b2:	3a01      	subs	r2, #1
   3c2b4:	4403      	add	r3, r0
   3c2b6:	60fa      	str	r2, [r7, #12]
   3c2b8:	d1f3      	bne.n	3c2a2 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   3c2ba:	4641      	mov	r1, r8
   3c2bc:	7c28      	ldrb	r0, [r5, #16]
   3c2be:	f7ff ff0a 	bl	3c0d6 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   3c2c2:	7c2b      	ldrb	r3, [r5, #16]
   3c2c4:	07db      	lsls	r3, r3, #31
   3c2c6:	d503      	bpl.n	3c2d0 <z_sys_mem_pool_block_alloc+0x160>
   3c2c8:	f7ff fefc 	bl	3c0c4 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   3c2cc:	4680      	mov	r8, r0
   3c2ce:	e7c7      	b.n	3c260 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   3c2d0:	68f8      	ldr	r0, [r7, #12]
   3c2d2:	e7fb      	b.n	3c2cc <z_sys_mem_pool_block_alloc+0x15c>

0003c2d4 <arch_printk_char_out>:
}
   3c2d4:	2000      	movs	r0, #0
   3c2d6:	4770      	bx	lr

0003c2d8 <print_err>:
{
   3c2d8:	b570      	push	{r4, r5, r6, lr}
   3c2da:	460d      	mov	r5, r1
   3c2dc:	4604      	mov	r4, r0
	out('E', ctx);
   3c2de:	2045      	movs	r0, #69	; 0x45
   3c2e0:	47a0      	blx	r4
	out('R', ctx);
   3c2e2:	4629      	mov	r1, r5
   3c2e4:	2052      	movs	r0, #82	; 0x52
   3c2e6:	47a0      	blx	r4
	out('R', ctx);
   3c2e8:	4629      	mov	r1, r5
   3c2ea:	4623      	mov	r3, r4
}
   3c2ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   3c2f0:	2052      	movs	r0, #82	; 0x52
   3c2f2:	4718      	bx	r3

0003c2f4 <z_vprintk>:
{
   3c2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   3c2f8:	f04f 0800 	mov.w	r8, #0
{
   3c2fc:	4606      	mov	r6, r0
   3c2fe:	460f      	mov	r7, r1
   3c300:	461c      	mov	r4, r3
	int min_width = -1;
   3c302:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
   3c306:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
   3c308:	4645      	mov	r5, r8
{
   3c30a:	b08b      	sub	sp, #44	; 0x2c
   3c30c:	9202      	str	r2, [sp, #8]
	while (*fmt) {
   3c30e:	9b02      	ldr	r3, [sp, #8]
   3c310:	7818      	ldrb	r0, [r3, #0]
   3c312:	b910      	cbnz	r0, 3c31a <z_vprintk+0x26>
}
   3c314:	b00b      	add	sp, #44	; 0x2c
   3c316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   3c31a:	b945      	cbnz	r5, 3c32e <z_vprintk+0x3a>
			if (*fmt != '%') {
   3c31c:	2825      	cmp	r0, #37	; 0x25
   3c31e:	f000 814b 	beq.w	3c5b8 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   3c322:	4639      	mov	r1, r7
   3c324:	47b0      	blx	r6
		++fmt;
   3c326:	9b02      	ldr	r3, [sp, #8]
   3c328:	3301      	adds	r3, #1
   3c32a:	9302      	str	r3, [sp, #8]
   3c32c:	e7ef      	b.n	3c30e <z_vprintk+0x1a>
			switch (*fmt) {
   3c32e:	2864      	cmp	r0, #100	; 0x64
   3c330:	d06d      	beq.n	3c40e <z_vprintk+0x11a>
   3c332:	d819      	bhi.n	3c368 <z_vprintk+0x74>
   3c334:	2839      	cmp	r0, #57	; 0x39
   3c336:	d80a      	bhi.n	3c34e <z_vprintk+0x5a>
   3c338:	2831      	cmp	r0, #49	; 0x31
   3c33a:	d25f      	bcs.n	3c3fc <z_vprintk+0x108>
   3c33c:	282d      	cmp	r0, #45	; 0x2d
   3c33e:	f000 8141 	beq.w	3c5c4 <z_vprintk+0x2d0>
   3c342:	2830      	cmp	r0, #48	; 0x30
   3c344:	d04b      	beq.n	3c3de <z_vprintk+0xea>
   3c346:	2825      	cmp	r0, #37	; 0x25
   3c348:	d107      	bne.n	3c35a <z_vprintk+0x66>
				out((int)'%', ctx);
   3c34a:	4639      	mov	r1, r7
   3c34c:	e132      	b.n	3c5b4 <z_vprintk+0x2c0>
			switch (*fmt) {
   3c34e:	2858      	cmp	r0, #88	; 0x58
   3c350:	f000 80bb 	beq.w	3c4ca <z_vprintk+0x1d6>
   3c354:	2863      	cmp	r0, #99	; 0x63
   3c356:	f000 812a 	beq.w	3c5ae <z_vprintk+0x2ba>
				out((int)'%', ctx);
   3c35a:	4639      	mov	r1, r7
   3c35c:	2025      	movs	r0, #37	; 0x25
   3c35e:	47b0      	blx	r6
				out((int)*fmt, ctx);
   3c360:	9b02      	ldr	r3, [sp, #8]
   3c362:	4639      	mov	r1, r7
   3c364:	7818      	ldrb	r0, [r3, #0]
   3c366:	e125      	b.n	3c5b4 <z_vprintk+0x2c0>
			switch (*fmt) {
   3c368:	2870      	cmp	r0, #112	; 0x70
   3c36a:	f000 80a4 	beq.w	3c4b6 <z_vprintk+0x1c2>
   3c36e:	d811      	bhi.n	3c394 <z_vprintk+0xa0>
   3c370:	2869      	cmp	r0, #105	; 0x69
   3c372:	d04c      	beq.n	3c40e <z_vprintk+0x11a>
   3c374:	286c      	cmp	r0, #108	; 0x6c
   3c376:	d105      	bne.n	3c384 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   3c378:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3c37c:	d12a      	bne.n	3c3d4 <z_vprintk+0xe0>
					length_mod = 'L';
   3c37e:	f04f 084c 	mov.w	r8, #76	; 0x4c
   3c382:	e7d0      	b.n	3c326 <z_vprintk+0x32>
			switch (*fmt) {
   3c384:	2868      	cmp	r0, #104	; 0x68
   3c386:	d1e8      	bne.n	3c35a <z_vprintk+0x66>
				if (*fmt == 'h' && length_mod == 'h') {
   3c388:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   3c38c:	d122      	bne.n	3c3d4 <z_vprintk+0xe0>
					length_mod = 'H';
   3c38e:	f04f 0848 	mov.w	r8, #72	; 0x48
   3c392:	e7c8      	b.n	3c326 <z_vprintk+0x32>
			switch (*fmt) {
   3c394:	2875      	cmp	r0, #117	; 0x75
   3c396:	d072      	beq.n	3c47e <z_vprintk+0x18a>
   3c398:	d818      	bhi.n	3c3cc <z_vprintk+0xd8>
   3c39a:	2873      	cmp	r0, #115	; 0x73
   3c39c:	d1dd      	bne.n	3c35a <z_vprintk+0x66>
				char *s = va_arg(ap, char *);
   3c39e:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   3c3a2:	46ab      	mov	fp, r5
   3c3a4:	465b      	mov	r3, fp
   3c3a6:	f81b 0b01 	ldrb.w	r0, [fp], #1
   3c3aa:	2800      	cmp	r0, #0
   3c3ac:	f040 80fc 	bne.w	3c5a8 <z_vprintk+0x2b4>
				if (padding == PAD_SPACE_AFTER) {
   3c3b0:	f1b9 0f03 	cmp.w	r9, #3
   3c3b4:	f040 810c 	bne.w	3c5d0 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   3c3b8:	1b5d      	subs	r5, r3, r5
   3c3ba:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   3c3be:	2d00      	cmp	r5, #0
   3c3c0:	dd49      	ble.n	3c456 <z_vprintk+0x162>
						out(' ', ctx);
   3c3c2:	4639      	mov	r1, r7
   3c3c4:	2020      	movs	r0, #32
   3c3c6:	47b0      	blx	r6
   3c3c8:	3d01      	subs	r5, #1
   3c3ca:	e7f8      	b.n	3c3be <z_vprintk+0xca>
			switch (*fmt) {
   3c3cc:	2878      	cmp	r0, #120	; 0x78
   3c3ce:	d07c      	beq.n	3c4ca <z_vprintk+0x1d6>
   3c3d0:	287a      	cmp	r0, #122	; 0x7a
   3c3d2:	d1c2      	bne.n	3c35a <z_vprintk+0x66>
				} else if (length_mod == 0) {
   3c3d4:	f1b8 0f00 	cmp.w	r8, #0
   3c3d8:	d1bf      	bne.n	3c35a <z_vprintk+0x66>
   3c3da:	4680      	mov	r8, r0
   3c3dc:	e7a3      	b.n	3c326 <z_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
   3c3de:	f1ba 0f00 	cmp.w	sl, #0
   3c3e2:	da0e      	bge.n	3c402 <z_vprintk+0x10e>
   3c3e4:	f1b9 0f00 	cmp.w	r9, #0
   3c3e8:	f000 80ef 	beq.w	3c5ca <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   3c3ec:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   3c3f0:	f1b9 0f00 	cmp.w	r9, #0
   3c3f4:	bf08      	it	eq
   3c3f6:	f04f 0902 	moveq.w	r9, #2
   3c3fa:	e794      	b.n	3c326 <z_vprintk+0x32>
				if (min_width < 0) {
   3c3fc:	f1ba 0f00 	cmp.w	sl, #0
   3c400:	dbf4      	blt.n	3c3ec <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   3c402:	230a      	movs	r3, #10
   3c404:	fb03 0a0a 	mla	sl, r3, sl, r0
   3c408:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   3c40c:	e7f0      	b.n	3c3f0 <z_vprintk+0xfc>
				if (length_mod == 'z') {
   3c40e:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   3c412:	d102      	bne.n	3c41a <z_vprintk+0x126>
					d = va_arg(ap, int);
   3c414:	f854 5b04 	ldr.w	r5, [r4], #4
   3c418:	e020      	b.n	3c45c <z_vprintk+0x168>
				} else if (length_mod == 'l') {
   3c41a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3c41e:	d0f9      	beq.n	3c414 <z_vprintk+0x120>
				} else if (length_mod == 'L') {
   3c420:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   3c424:	d1f6      	bne.n	3c414 <z_vprintk+0x120>
					long long lld = va_arg(ap, long long);
   3c426:	3407      	adds	r4, #7
   3c428:	f024 0407 	bic.w	r4, r4, #7
   3c42c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   3c430:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   3c434:	9106      	str	r1, [sp, #24]
   3c436:	f143 0100 	adc.w	r1, r3, #0
   3c43a:	9107      	str	r1, [sp, #28]
   3c43c:	2100      	movs	r1, #0
   3c43e:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   3c442:	f04f 30ff 	mov.w	r0, #4294967295
   3c446:	4561      	cmp	r1, ip
   3c448:	bf08      	it	eq
   3c44a:	4558      	cmpeq	r0, fp
   3c44c:	d205      	bcs.n	3c45a <z_vprintk+0x166>
						print_err(out, ctx);
   3c44e:	4639      	mov	r1, r7
   3c450:	4630      	mov	r0, r6
   3c452:	f7ff ff41 	bl	3c2d8 <print_err>
			might_format = 0;
   3c456:	2500      	movs	r5, #0
				break;
   3c458:	e765      	b.n	3c326 <z_vprintk+0x32>
					d = lld;
   3c45a:	4615      	mov	r5, r2
				if (d < 0) {
   3c45c:	2d00      	cmp	r5, #0
   3c45e:	da05      	bge.n	3c46c <z_vprintk+0x178>
					out((int)'-', ctx);
   3c460:	4639      	mov	r1, r7
   3c462:	202d      	movs	r0, #45	; 0x2d
   3c464:	47b0      	blx	r6
					d = -d;
   3c466:	426d      	negs	r5, r5
					min_width--;
   3c468:	f10a 3aff 	add.w	sl, sl, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   3c46c:	464b      	mov	r3, r9
   3c46e:	462a      	mov	r2, r5
   3c470:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   3c474:	4639      	mov	r1, r7
   3c476:	4630      	mov	r0, r6
   3c478:	f7e6 fbe0 	bl	22c3c <_printk_dec_ulong>
				break;
   3c47c:	e7eb      	b.n	3c456 <z_vprintk+0x162>
				if (length_mod == 'z') {
   3c47e:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   3c482:	d102      	bne.n	3c48a <z_vprintk+0x196>
					u = va_arg(ap, unsigned int);
   3c484:	f854 2b04 	ldr.w	r2, [r4], #4
   3c488:	e011      	b.n	3c4ae <z_vprintk+0x1ba>
				} else if (length_mod == 'l') {
   3c48a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3c48e:	d0f9      	beq.n	3c484 <z_vprintk+0x190>
				} else if (length_mod == 'L') {
   3c490:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   3c494:	d1f6      	bne.n	3c484 <z_vprintk+0x190>
					if (llu > ~0UL) {
   3c496:	2100      	movs	r1, #0
   3c498:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   3c49c:	3407      	adds	r4, #7
   3c49e:	f024 0407 	bic.w	r4, r4, #7
   3c4a2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   3c4a6:	4299      	cmp	r1, r3
   3c4a8:	bf08      	it	eq
   3c4aa:	4290      	cmpeq	r0, r2
   3c4ac:	d3cf      	bcc.n	3c44e <z_vprintk+0x15a>
				_printk_dec_ulong(out, ctx, u, padding,
   3c4ae:	f8cd a000 	str.w	sl, [sp]
   3c4b2:	464b      	mov	r3, r9
   3c4b4:	e7de      	b.n	3c474 <z_vprintk+0x180>
				out('0', ctx);
   3c4b6:	4639      	mov	r1, r7
   3c4b8:	2030      	movs	r0, #48	; 0x30
   3c4ba:	47b0      	blx	r6
				out('x', ctx);
   3c4bc:	4639      	mov	r1, r7
   3c4be:	2078      	movs	r0, #120	; 0x78
   3c4c0:	47b0      	blx	r6
					min_width = 8;
   3c4c2:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   3c4c6:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   3c4ca:	9b02      	ldr	r3, [sp, #8]
   3c4cc:	781b      	ldrb	r3, [r3, #0]
   3c4ce:	2b70      	cmp	r3, #112	; 0x70
   3c4d0:	d104      	bne.n	3c4dc <z_vprintk+0x1e8>
					x = va_arg(ap, unsigned int);
   3c4d2:	f854 3b04 	ldr.w	r3, [r4], #4
   3c4d6:	9304      	str	r3, [sp, #16]
   3c4d8:	2300      	movs	r3, #0
   3c4da:	e00d      	b.n	3c4f8 <z_vprintk+0x204>
				} else if (length_mod == 'l') {
   3c4dc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3c4e0:	d0f7      	beq.n	3c4d2 <z_vprintk+0x1de>
				} else if (length_mod == 'L') {
   3c4e2:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   3c4e6:	d1f4      	bne.n	3c4d2 <z_vprintk+0x1de>
					x = va_arg(ap, unsigned long long);
   3c4e8:	3407      	adds	r4, #7
   3c4ea:	f024 0307 	bic.w	r3, r4, #7
   3c4ee:	461c      	mov	r4, r3
   3c4f0:	f854 2b08 	ldr.w	r2, [r4], #8
   3c4f4:	685b      	ldr	r3, [r3, #4]
   3c4f6:	9204      	str	r2, [sp, #16]
	int digits = 0;
   3c4f8:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   3c4fa:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   3c4fc:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   3c500:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   3c502:	9105      	str	r1, [sp, #20]
		shift -= 4;
   3c504:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   3c508:	9804      	ldr	r0, [sp, #16]
   3c50a:	f1cb 0c20 	rsb	ip, fp, #32
   3c50e:	f1ab 0120 	sub.w	r1, fp, #32
   3c512:	fa20 f00b 	lsr.w	r0, r0, fp
   3c516:	fa03 fc0c 	lsl.w	ip, r3, ip
   3c51a:	ea40 000c 	orr.w	r0, r0, ip
   3c51e:	fa23 f101 	lsr.w	r1, r3, r1
   3c522:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   3c524:	f010 000f 	ands.w	r0, r0, #15
   3c528:	d106      	bne.n	3c538 <z_vprintk+0x244>
   3c52a:	9905      	ldr	r1, [sp, #20]
   3c52c:	b911      	cbnz	r1, 3c534 <z_vprintk+0x240>
   3c52e:	f1bb 0f00 	cmp.w	fp, #0
   3c532:	d122      	bne.n	3c57a <z_vprintk+0x286>
			nibble += nibble > 9 ? 87 : 48;
   3c534:	2130      	movs	r1, #48	; 0x30
   3c536:	e003      	b.n	3c540 <z_vprintk+0x24c>
   3c538:	2809      	cmp	r0, #9
   3c53a:	bf8c      	ite	hi
   3c53c:	2157      	movhi	r1, #87	; 0x57
   3c53e:	2130      	movls	r1, #48	; 0x30
   3c540:	4408      	add	r0, r1
			out((int)nibble, ctx);
   3c542:	b240      	sxtb	r0, r0
   3c544:	4639      	mov	r1, r7
   3c546:	9308      	str	r3, [sp, #32]
   3c548:	9205      	str	r2, [sp, #20]
   3c54a:	47b0      	blx	r6
			digits++;
   3c54c:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   3c54e:	9a05      	ldr	r2, [sp, #20]
			digits++;
   3c550:	3301      	adds	r3, #1
   3c552:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   3c554:	9b08      	ldr	r3, [sp, #32]
   3c556:	f1bb 0f00 	cmp.w	fp, #0
   3c55a:	d123      	bne.n	3c5a4 <z_vprintk+0x2b0>
	if (padding == PAD_SPACE_AFTER) {
   3c55c:	f1b9 0f03 	cmp.w	r9, #3
   3c560:	f47f af79 	bne.w	3c456 <z_vprintk+0x162>
		remaining = min_width * 2 - digits;
   3c564:	9b03      	ldr	r3, [sp, #12]
   3c566:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   3c56a:	2d00      	cmp	r5, #0
   3c56c:	f77f af73 	ble.w	3c456 <z_vprintk+0x162>
			out(' ', ctx);
   3c570:	4639      	mov	r1, r7
   3c572:	2020      	movs	r0, #32
   3c574:	47b0      	blx	r6
   3c576:	3d01      	subs	r5, #1
   3c578:	e7f7      	b.n	3c56a <z_vprintk+0x276>
		if (remaining-- <= min_width) {
   3c57a:	1e51      	subs	r1, r2, #1
   3c57c:	4592      	cmp	sl, r2
   3c57e:	9108      	str	r1, [sp, #32]
   3c580:	db07      	blt.n	3c592 <z_vprintk+0x29e>
			if (padding == PAD_ZERO_BEFORE) {
   3c582:	f1b9 0f01 	cmp.w	r9, #1
   3c586:	d106      	bne.n	3c596 <z_vprintk+0x2a2>
				out('0', ctx);
   3c588:	4639      	mov	r1, r7
   3c58a:	2030      	movs	r0, #48	; 0x30
   3c58c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   3c58e:	47b0      	blx	r6
   3c590:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   3c592:	9a08      	ldr	r2, [sp, #32]
   3c594:	e7b6      	b.n	3c504 <z_vprintk+0x210>
			} else if (padding == PAD_SPACE_BEFORE) {
   3c596:	f1b9 0f02 	cmp.w	r9, #2
   3c59a:	d1fa      	bne.n	3c592 <z_vprintk+0x29e>
   3c59c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   3c59e:	4639      	mov	r1, r7
   3c5a0:	2020      	movs	r0, #32
   3c5a2:	e7f4      	b.n	3c58e <z_vprintk+0x29a>
			found_largest_digit = 1;
   3c5a4:	9505      	str	r5, [sp, #20]
   3c5a6:	e7ad      	b.n	3c504 <z_vprintk+0x210>
					out((int)(*s++), ctx);
   3c5a8:	4639      	mov	r1, r7
   3c5aa:	47b0      	blx	r6
   3c5ac:	e6fa      	b.n	3c3a4 <z_vprintk+0xb0>
				out(c, ctx);
   3c5ae:	4639      	mov	r1, r7
   3c5b0:	f854 0b04 	ldr.w	r0, [r4], #4
				out((int)'%', ctx);
   3c5b4:	47b0      	blx	r6
   3c5b6:	e74e      	b.n	3c456 <z_vprintk+0x162>
				length_mod = 0;
   3c5b8:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   3c5ba:	46a9      	mov	r9, r5
				min_width = -1;
   3c5bc:	f04f 3aff 	mov.w	sl, #4294967295
				might_format = 1;
   3c5c0:	2501      	movs	r5, #1
   3c5c2:	e6b0      	b.n	3c326 <z_vprintk+0x32>
				padding = PAD_SPACE_AFTER;
   3c5c4:	f04f 0903 	mov.w	r9, #3
   3c5c8:	e6ad      	b.n	3c326 <z_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
   3c5ca:	f04f 0901 	mov.w	r9, #1
   3c5ce:	e6aa      	b.n	3c326 <z_vprintk+0x32>
			might_format = 0;
   3c5d0:	4605      	mov	r5, r0
   3c5d2:	e6a8      	b.n	3c326 <z_vprintk+0x32>

0003c5d4 <printk>:
{
   3c5d4:	b40f      	push	{r0, r1, r2, r3}
   3c5d6:	b507      	push	{r0, r1, r2, lr}
   3c5d8:	a904      	add	r1, sp, #16
   3c5da:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3c5de:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   3c5e0:	f7e6 fb7e 	bl	22ce0 <vprintk>
}
   3c5e4:	b003      	add	sp, #12
   3c5e6:	f85d eb04 	ldr.w	lr, [sp], #4
   3c5ea:	b004      	add	sp, #16
   3c5ec:	4770      	bx	lr

0003c5ee <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   3c5ee:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   3c5f0:	f7fc f984 	bl	388fc <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   3c5f4:	2000      	movs	r0, #0
   3c5f6:	bd08      	pop	{r3, pc}

0003c5f8 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
   3c5f8:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   3c5fa:	f7fc f9c9 	bl	38990 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   3c5fe:	f110 0f0b 	cmn.w	r0, #11
   3c602:	d005      	beq.n	3c610 <sys_sem_take+0x18>
   3c604:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   3c608:	bf08      	it	eq
   3c60a:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   3c60e:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   3c610:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   3c614:	e7fb      	b.n	3c60e <sys_sem_take+0x16>

0003c616 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   3c616:	4604      	mov	r4, r0
   3c618:	b508      	push	{r3, lr}
   3c61a:	4608      	mov	r0, r1
   3c61c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   3c61e:	461a      	mov	r2, r3
   3c620:	47a0      	blx	r4
	return z_impl_k_current_get();
   3c622:	f7fc f965 	bl	388f0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   3c626:	f7e8 f8db 	bl	247e0 <z_impl_k_thread_abort>

0003c62a <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   3c62a:	b510      	push	{r4, lr}
   3c62c:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   3c62e:	f04f 31ff 	mov.w	r1, #4294967295
   3c632:	4620      	mov	r0, r4
   3c634:	f7fa ff74 	bl	37520 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   3c638:	4603      	mov	r3, r0
   3c63a:	2800      	cmp	r0, #0
   3c63c:	d0f7      	beq.n	3c62e <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   3c63e:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3c640:	3308      	adds	r3, #8
   3c642:	e8d3 1fef 	ldaex	r1, [r3]
   3c646:	f021 0c01 	bic.w	ip, r1, #1
   3c64a:	e8c3 cfee 	stlex	lr, ip, [r3]
   3c64e:	f1be 0f00 	cmp.w	lr, #0
   3c652:	d1f6      	bne.n	3c642 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   3c654:	07cb      	lsls	r3, r1, #31
   3c656:	d500      	bpl.n	3c65a <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   3c658:	4790      	blx	r2
	z_impl_k_yield();
   3c65a:	f7fb ffcb 	bl	385f4 <z_impl_k_yield>
   3c65e:	e7e6      	b.n	3c62e <z_work_q_main+0x4>

0003c660 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   3c660:	4040      	eors	r0, r0
   3c662:	f380 8811 	msr	BASEPRI, r0
   3c666:	f04f 0004 	mov.w	r0, #4
   3c66a:	df02      	svc	2
}
   3c66c:	4770      	bx	lr

0003c66e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_ASSET_TRACKER_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_ASSET_TRACKER_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   3c66e:	4770      	bx	lr

0003c670 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   3c670:	f7f9 bfb8 	b.w	365e4 <SystemInit>

0003c674 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   3c674:	6843      	ldr	r3, [r0, #4]
}
   3c676:	7958      	ldrb	r0, [r3, #5]
   3c678:	4770      	bx	lr

0003c67a <k_cycle_get_32_wrapper>:
   3c67a:	f7e7 baeb 	b.w	23c54 <z_timer_cycle_get_32>

0003c67e <dummy_timestamp>:
   3c67e:	2000      	movs	r0, #0
   3c680:	4770      	bx	lr

0003c682 <log_string_sync>:
{
   3c682:	b40e      	push	{r1, r2, r3}
   3c684:	b503      	push	{r0, r1, lr}
   3c686:	aa03      	add	r2, sp, #12
   3c688:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   3c68c:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap);
   3c68e:	f7e6 fb49 	bl	22d24 <log_generic>
}
   3c692:	b002      	add	sp, #8
   3c694:	f85d eb04 	ldr.w	lr, [sp], #4
   3c698:	b003      	add	sp, #12
   3c69a:	4770      	bx	lr

0003c69c <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   3c69c:	b508      	push	{r3, lr}
				K_THREAD_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   3c69e:	f7e6 fbb7 	bl	22e10 <log_init>
	}

	return 0;
}
   3c6a2:	2000      	movs	r0, #0
   3c6a4:	bd08      	pop	{r3, pc}

0003c6a6 <log_strdup>:
}
   3c6a6:	4770      	bx	lr

0003c6a8 <out_func>:
{
   3c6a8:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((u8_t *)&c, 1, out_ctx->control_block->ctx);
   3c6aa:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   3c6ae:	9001      	str	r0, [sp, #4]
		out_ctx->func((u8_t *)&c, 1, out_ctx->control_block->ctx);
   3c6b0:	6852      	ldr	r2, [r2, #4]
   3c6b2:	2101      	movs	r1, #1
   3c6b4:	a801      	add	r0, sp, #4
   3c6b6:	4798      	blx	r3
}
   3c6b8:	2000      	movs	r0, #0
   3c6ba:	b003      	add	sp, #12
   3c6bc:	f85d fb04 	ldr.w	pc, [sp], #4

0003c6c0 <buffer_write>:
{
   3c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c6c2:	4606      	mov	r6, r0
   3c6c4:	460d      	mov	r5, r1
   3c6c6:	4614      	mov	r4, r2
   3c6c8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   3c6ca:	4621      	mov	r1, r4
   3c6cc:	4628      	mov	r0, r5
   3c6ce:	463a      	mov	r2, r7
   3c6d0:	47b0      	blx	r6
	} while (len != 0);
   3c6d2:	1a24      	subs	r4, r4, r0
		buf += processed;
   3c6d4:	4405      	add	r5, r0
	} while (len != 0);
   3c6d6:	d1f8      	bne.n	3c6ca <buffer_write+0xa>
}
   3c6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003c6da <log_output_flush>:
		     log_output->control_block->offset,
   3c6da:	6842      	ldr	r2, [r0, #4]
{
   3c6dc:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   3c6de:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   3c6e2:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   3c6e4:	6881      	ldr	r1, [r0, #8]
   3c6e6:	6800      	ldr	r0, [r0, #0]
   3c6e8:	f7ff ffea 	bl	3c6c0 <buffer_write>
	log_output->control_block->offset = 0;
   3c6ec:	2200      	movs	r2, #0
   3c6ee:	6863      	ldr	r3, [r4, #4]
   3c6f0:	601a      	str	r2, [r3, #0]
}
   3c6f2:	bd10      	pop	{r4, pc}

0003c6f4 <char_out>:
{
   3c6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c6f6:	460d      	mov	r5, r1
   3c6f8:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   3c6fa:	4604      	mov	r4, r0
   3c6fc:	1847      	adds	r7, r0, r1
   3c6fe:	42bc      	cmp	r4, r7
   3c700:	d101      	bne.n	3c706 <char_out+0x12>
}
   3c702:	4628      	mov	r0, r5
   3c704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   3c706:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   3c70a:	6873      	ldr	r3, [r6, #4]
   3c70c:	4630      	mov	r0, r6
   3c70e:	685b      	ldr	r3, [r3, #4]
   3c710:	4798      	blx	r3
   3c712:	e7f4      	b.n	3c6fe <char_out+0xa>

0003c714 <boot_flag_read.constprop.6>:
static int boot_flag_read(int flag, u8_t bank_id)
   3c714:	b507      	push	{r0, r1, r2, lr}
	rc = flash_area_open(bank_id, &fa);
   3c716:	2003      	movs	r0, #3
   3c718:	a901      	add	r1, sp, #4
   3c71a:	f7e6 ff53 	bl	235c4 <flash_area_open>
	if (rc) {
   3c71e:	b950      	cbnz	r0, 3c736 <boot_flag_read.constprop.6+0x22>
	rc = boot_flag_offs(flag, fa, &offs);
   3c720:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   3c722:	2301      	movs	r3, #1
		*offs = IMAGE_OK_OFFS(fa);
   3c724:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   3c726:	f10d 0203 	add.w	r2, sp, #3
   3c72a:	3918      	subs	r1, #24
   3c72c:	f000 f891 	bl	3c852 <flash_area_read>
	if (rc != 0) {
   3c730:	b908      	cbnz	r0, 3c736 <boot_flag_read.constprop.6+0x22>
	return flag_val;
   3c732:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
   3c736:	b003      	add	sp, #12
   3c738:	f85d fb04 	ldr.w	pc, [sp], #4

0003c73c <boot_flag_write.constprop.7>:
static int boot_flag_write(int flag, u8_t bank_id)
   3c73c:	b513      	push	{r0, r1, r4, lr}
	rc = flash_area_open(bank_id, &fa);
   3c73e:	a901      	add	r1, sp, #4
   3c740:	f7e6 ff40 	bl	235c4 <flash_area_open>
	if (rc) {
   3c744:	4604      	mov	r4, r0
   3c746:	b948      	cbnz	r0, 3c75c <boot_flag_write.constprop.7+0x20>
	rc = boot_flag_offs(flag, fa, &offs);
   3c748:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   3c74a:	2201      	movs	r2, #1
		*offs = IMAGE_OK_OFFS(fa);
   3c74c:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   3c74e:	3918      	subs	r1, #24
   3c750:	f7e6 fda6 	bl	232a0 <boot_write_trailer_byte>
   3c754:	4604      	mov	r4, r0
	flash_area_close(fa);
   3c756:	9801      	ldr	r0, [sp, #4]
   3c758:	f000 f87a 	bl	3c850 <flash_area_close>
}
   3c75c:	4620      	mov	r0, r4
   3c75e:	b002      	add	sp, #8
   3c760:	bd10      	pop	{r4, pc}

0003c762 <boot_write_img_confirmed>:
{
	return boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   3c762:	b513      	push	{r0, r1, r4, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   3c764:	f7ff ffd6 	bl	3c714 <boot_flag_read.constprop.6>
	rc = flash_area_open(bank_id, &fa);
   3c768:	a901      	add	r1, sp, #4
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   3c76a:	4604      	mov	r4, r0
	rc = flash_area_open(bank_id, &fa);
   3c76c:	2003      	movs	r0, #3
   3c76e:	f7e6 ff29 	bl	235c4 <flash_area_open>
	if (rc) {
   3c772:	2800      	cmp	r0, #0
		return -EINVAL;
   3c774:	bf0c      	ite	eq
   3c776:	23ff      	moveq	r3, #255	; 0xff
   3c778:	f06f 0315 	mvnne.w	r3, #21
	int rc;

	if (boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) !=
   3c77c:	42a3      	cmp	r3, r4
   3c77e:	d104      	bne.n	3c78a <boot_write_img_confirmed+0x28>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   3c780:	2003      	movs	r0, #3
   3c782:	f7ff ffdb 	bl	3c73c <boot_flag_write.constprop.7>
	}

	rc = boot_image_ok_write(FLASH_AREA_IMAGE_PRIMARY);

	return rc;
}
   3c786:	b002      	add	sp, #8
   3c788:	bd10      	pop	{r4, pc}
		return 0;
   3c78a:	2000      	movs	r0, #0
   3c78c:	e7fb      	b.n	3c786 <boot_write_img_confirmed+0x24>

0003c78e <flash_img_buffered_write>:

int flash_img_buffered_write(struct flash_img_context *ctx, u8_t *data,
			     size_t len, bool flush)
{
   3c78e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c792:	4604      	mov	r4, r0
   3c794:	4689      	mov	r9, r1
   3c796:	4616      	mov	r6, r2
   3c798:	4698      	mov	r8, r3
	int processed = 0;
   3c79a:	2700      	movs	r7, #0
	while ((len - processed) >=
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
		       buf_empty_bytes);

		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   3c79c:	f44f 7a00 	mov.w	sl, #512	; 0x200
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   3c7a0:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
	while ((len - processed) >=
   3c7a4:	1bf2      	subs	r2, r6, r7
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   3c7a6:	f5c0 7b00 	rsb	fp, r0, #512	; 0x200
	while ((len - processed) >=
   3c7aa:	455a      	cmp	r2, fp
   3c7ac:	d222      	bcs.n	3c7f4 <flash_img_buffered_write+0x66>

		processed += buf_empty_bytes;
	}

	/* place rest of the data into ctx->buf */
	if (processed < len) {
   3c7ae:	42b7      	cmp	r7, r6
   3c7b0:	d20a      	bcs.n	3c7c8 <flash_img_buffered_write+0x3a>
   3c7b2:	eb09 0107 	add.w	r1, r9, r7
   3c7b6:	4420      	add	r0, r4
   3c7b8:	f002 fa87 	bl	3ecca <memcpy>
		memcpy(ctx->buf + ctx->buf_bytes,
		       data + processed, len - processed);
		ctx->buf_bytes += len - processed;
   3c7bc:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   3c7c0:	441e      	add	r6, r3
   3c7c2:	1bf6      	subs	r6, r6, r7
   3c7c4:	f8a4 6208 	strh.w	r6, [r4, #520]	; 0x208
	}

	if (!flush) {
   3c7c8:	f1b8 0f00 	cmp.w	r8, #0
   3c7cc:	d02a      	beq.n	3c824 <flash_img_buffered_write+0x96>
		return rc;
	}

	if (ctx->buf_bytes > 0) {
   3c7ce:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   3c7d2:	b9f3      	cbnz	r3, 3c812 <flash_img_buffered_write+0x84>
		}
	}
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	/* erase the image trailer area if it was not erased */
	rc = flash_progressive_erase(ctx,
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
   3c7d4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	rc = flash_progressive_erase(ctx,
   3c7d8:	4620      	mov	r0, r4
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
   3c7da:	6899      	ldr	r1, [r3, #8]
	rc = flash_progressive_erase(ctx,
   3c7dc:	3920      	subs	r1, #32
   3c7de:	f7e6 fdb9 	bl	23354 <flash_progressive_erase>
	if (rc) {
   3c7e2:	4605      	mov	r5, r0
   3c7e4:	b9d8      	cbnz	r0, 3c81e <flash_img_buffered_write+0x90>
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
   3c7e6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   3c7ea:	f000 f831 	bl	3c850 <flash_area_close>
	ctx->flash_area = NULL;
   3c7ee:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200

	return rc;
   3c7f2:	e014      	b.n	3c81e <flash_img_buffered_write+0x90>
   3c7f4:	465a      	mov	r2, fp
   3c7f6:	eb09 0107 	add.w	r1, r9, r7
   3c7fa:	4420      	add	r0, r4
   3c7fc:	f002 fa65 	bl	3ecca <memcpy>
		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   3c800:	f8a4 a208 	strh.w	sl, [r4, #520]	; 0x208
		rc = flash_sync(ctx);
   3c804:	4620      	mov	r0, r4
   3c806:	f7e6 fe03 	bl	23410 <flash_sync>
		if (rc) {
   3c80a:	4605      	mov	r5, r0
   3c80c:	b938      	cbnz	r0, 3c81e <flash_img_buffered_write+0x90>
		processed += buf_empty_bytes;
   3c80e:	445f      	add	r7, fp
   3c810:	e7c6      	b.n	3c7a0 <flash_img_buffered_write+0x12>
		rc = flash_sync(ctx);
   3c812:	4620      	mov	r0, r4
   3c814:	f7e6 fdfc 	bl	23410 <flash_sync>
		if (rc) {
   3c818:	4605      	mov	r5, r0
   3c81a:	2800      	cmp	r0, #0
   3c81c:	d0da      	beq.n	3c7d4 <flash_img_buffered_write+0x46>
}
   3c81e:	4628      	mov	r0, r5
   3c820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c824:	4645      	mov	r5, r8
   3c826:	e7fa      	b.n	3c81e <flash_img_buffered_write+0x90>

0003c828 <flash_img_bytes_written>:

size_t flash_img_bytes_written(struct flash_img_context *ctx)
{
	return ctx->bytes_written;
}
   3c828:	f8d0 0204 	ldr.w	r0, [r0, #516]	; 0x204
   3c82c:	4770      	bx	lr

0003c82e <flash_img_init>:

int flash_img_init(struct flash_img_context *ctx)
{
	ctx->bytes_written = 0;
   3c82e:	2300      	movs	r3, #0
   3c830:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
	ctx->buf_bytes = 0U;
   3c834:	f8a0 3208 	strh.w	r3, [r0, #520]	; 0x208
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	ctx->off_last = -1;
   3c838:	f04f 33ff 	mov.w	r3, #4294967295
#endif
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   3c83c:	f500 7100 	add.w	r1, r0, #512	; 0x200
	ctx->off_last = -1;
   3c840:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   3c844:	2007      	movs	r0, #7
   3c846:	f7e6 bebd 	b.w	235c4 <flash_area_open>

0003c84a <z_impl_flash_write_protection_set>:
						   bool enable)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->driver_api;

	return api->write_protection(dev, enable);
   3c84a:	6843      	ldr	r3, [r0, #4]
   3c84c:	68db      	ldr	r3, [r3, #12]
   3c84e:	4718      	bx	r3

0003c850 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   3c850:	4770      	bx	lr

0003c852 <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   3c852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c856:	461e      	mov	r6, r3
	struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3c858:	6883      	ldr	r3, [r0, #8]
{
   3c85a:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3c85c:	428b      	cmp	r3, r1
{
   3c85e:	460c      	mov	r4, r1
   3c860:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3c862:	d30f      	bcc.n	3c884 <flash_area_read+0x32>
   3c864:	1872      	adds	r2, r6, r1
   3c866:	4293      	cmp	r3, r2
   3c868:	d30c      	bcc.n	3c884 <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   3c86a:	68c0      	ldr	r0, [r0, #12]
   3c86c:	f7f9 ff44 	bl	366f8 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   3c870:	6869      	ldr	r1, [r5, #4]
   3c872:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   3c874:	6843      	ldr	r3, [r0, #4]
   3c876:	463a      	mov	r2, r7
   3c878:	681c      	ldr	r4, [r3, #0]
   3c87a:	4633      	mov	r3, r6
   3c87c:	46a4      	mov	ip, r4
}
   3c87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3c882:	4760      	bx	ip
   3c884:	f06f 0015 	mvn.w	r0, #21
   3c888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003c88c <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   3c88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c890:	4698      	mov	r8, r3
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3c892:	6883      	ldr	r3, [r0, #8]
{
   3c894:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3c896:	428b      	cmp	r3, r1
{
   3c898:	460d      	mov	r5, r1
   3c89a:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3c89c:	d31c      	bcc.n	3c8d8 <flash_area_write+0x4c>
   3c89e:	eb08 0201 	add.w	r2, r8, r1
   3c8a2:	4293      	cmp	r3, r2
   3c8a4:	d318      	bcc.n	3c8d8 <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3c8a6:	68c0      	ldr	r0, [r0, #12]
   3c8a8:	f7f9 ff26 	bl	366f8 <z_impl_device_get_binding>
   3c8ac:	4606      	mov	r6, r0
	return z_impl_flash_write_protection_set(dev, enable);
   3c8ae:	2100      	movs	r1, #0
   3c8b0:	f7ff ffcb 	bl	3c84a <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   3c8b4:	4604      	mov	r4, r0
   3c8b6:	b960      	cbnz	r0, 3c8d2 <flash_area_write+0x46>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   3c8b8:	6879      	ldr	r1, [r7, #4]
   3c8ba:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   3c8bc:	6873      	ldr	r3, [r6, #4]
   3c8be:	464a      	mov	r2, r9
   3c8c0:	685c      	ldr	r4, [r3, #4]
   3c8c2:	4630      	mov	r0, r6
   3c8c4:	4643      	mov	r3, r8
   3c8c6:	47a0      	blx	r4
   3c8c8:	4604      	mov	r4, r0
   3c8ca:	2101      	movs	r1, #1
   3c8cc:	4630      	mov	r0, r6
   3c8ce:	f7ff ffbc 	bl	3c84a <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   3c8d2:	4620      	mov	r0, r4
   3c8d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   3c8d8:	f06f 0415 	mvn.w	r4, #21
   3c8dc:	e7f9      	b.n	3c8d2 <flash_area_write+0x46>

0003c8de <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3c8de:	6883      	ldr	r3, [r0, #8]
{
   3c8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3c8e4:	428b      	cmp	r3, r1
{
   3c8e6:	4607      	mov	r7, r0
   3c8e8:	460d      	mov	r5, r1
   3c8ea:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3c8ec:	d31a      	bcc.n	3c924 <flash_area_erase+0x46>
   3c8ee:	440a      	add	r2, r1
   3c8f0:	4293      	cmp	r3, r2
   3c8f2:	d317      	bcc.n	3c924 <flash_area_erase+0x46>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3c8f4:	68c0      	ldr	r0, [r0, #12]
   3c8f6:	f7f9 feff 	bl	366f8 <z_impl_device_get_binding>
   3c8fa:	4606      	mov	r6, r0
   3c8fc:	2100      	movs	r1, #0
   3c8fe:	f7ff ffa4 	bl	3c84a <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   3c902:	4604      	mov	r4, r0
   3c904:	b958      	cbnz	r0, 3c91e <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   3c906:	6879      	ldr	r1, [r7, #4]
   3c908:	4429      	add	r1, r5
	return api->erase(dev, offset, size);
   3c90a:	6873      	ldr	r3, [r6, #4]
   3c90c:	4642      	mov	r2, r8
   3c90e:	689b      	ldr	r3, [r3, #8]
   3c910:	4630      	mov	r0, r6
   3c912:	4798      	blx	r3
   3c914:	4604      	mov	r4, r0
   3c916:	2101      	movs	r1, #1
   3c918:	4630      	mov	r0, r6
   3c91a:	f7ff ff96 	bl	3c84a <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   3c91e:	4620      	mov	r0, r4
   3c920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   3c924:	f06f 0415 	mvn.w	r4, #21
   3c928:	e7f9      	b.n	3c91e <flash_area_erase+0x40>

0003c92a <flash_area_align>:

u8_t flash_area_align(const struct flash_area *fa)
{
   3c92a:	b508      	push	{r3, lr}
	struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   3c92c:	68c0      	ldr	r0, [r0, #12]
   3c92e:	f7f9 fee3 	bl	366f8 <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->driver_api;

	return api->write_block_size;
   3c932:	6843      	ldr	r3, [r0, #4]

	return flash_get_write_block_size(dev);
}
   3c934:	7d18      	ldrb	r0, [r3, #20]
   3c936:	bd08      	pop	{r3, pc}

0003c938 <flash_area_get_device>:
	return 1;
}

struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   3c938:	68c0      	ldr	r0, [r0, #12]
   3c93a:	f7f9 bedd 	b.w	366f8 <z_impl_device_get_binding>

0003c93e <uart_poll_out>:
   3c93e:	6843      	ldr	r3, [r0, #4]
   3c940:	685b      	ldr	r3, [r3, #4]
   3c942:	4718      	bx	r3

0003c944 <debug_hook_out_nop>:
}
   3c944:	2000      	movs	r0, #0
   3c946:	4770      	bx	lr

0003c948 <clkstarted_handle>:
{
   3c948:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
   3c94a:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   3c94c:	6883      	ldr	r3, [r0, #8]
{
   3c94e:	4605      	mov	r5, r0
	sub_data->started = true;
   3c950:	fb04 3401 	mla	r4, r4, r1, r3
   3c954:	2301      	movs	r3, #1
   3c956:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   3c958:	f04f 0320 	mov.w	r3, #32
   3c95c:	f3ef 8111 	mrs	r1, BASEPRI
   3c960:	f383 8811 	msr	BASEPRI, r3
   3c964:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   3c968:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   3c96a:	b12b      	cbz	r3, 3c978 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3c96c:	6860      	ldr	r0, [r4, #4]
   3c96e:	681a      	ldr	r2, [r3, #0]
   3c970:	4283      	cmp	r3, r0
	list->head = node;
   3c972:	6022      	str	r2, [r4, #0]
	list->tail = node;
   3c974:	bf08      	it	eq
   3c976:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   3c978:	f381 8811 	msr	BASEPRI, r1
   3c97c:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   3c980:	b903      	cbnz	r3, 3c984 <clkstarted_handle+0x3c>
}
   3c982:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   3c984:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   3c988:	4628      	mov	r0, r5
   3c98a:	4790      	blx	r2
   3c98c:	e7e4      	b.n	3c958 <clkstarted_handle+0x10>

0003c98e <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   3c98e:	2200      	movs	r2, #0
   3c990:	f7e6 beb6 	b.w	23700 <clock_async_start>

0003c994 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   3c994:	4770      	bx	lr

0003c996 <sys_clock_disable>:
   3c996:	4770      	bx	lr

0003c998 <z_irq_spurious>:
	z_arm_reserved();
   3c998:	f7e7 ba3a 	b.w	23e10 <z_arm_bus_fault>

0003c99c <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   3c99c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   3c99e:	f383 880b 	msr	PSPLIM, r3
}
   3c9a2:	4770      	bx	lr

0003c9a4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   3c9a4:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   3c9a6:	6800      	ldr	r0, [r0, #0]
   3c9a8:	f7e7 bb48 	b.w	2403c <z_arm_fatal_error>

0003c9ac <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   3c9ac:	b508      	push	{r3, lr}
	handler();
   3c9ae:	f7e7 fa39 	bl	23e24 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   3c9b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   3c9b6:	f7e7 b99f 	b.w	23cf8 <z_arm_exc_exit>

0003c9ba <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   3c9ba:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   3c9bc:	2100      	movs	r1, #0
   3c9be:	a801      	add	r0, sp, #4
   3c9c0:	f7e8 f96c 	bl	24c9c <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   3c9c4:	b003      	add	sp, #12
   3c9c6:	f85d fb04 	ldr.w	pc, [sp], #4

0003c9ca <mpu_configure_region>:
{
   3c9ca:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   3c9cc:	684b      	ldr	r3, [r1, #4]
{
   3c9ce:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   3c9d0:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   3c9d2:	f89d 2008 	ldrb.w	r2, [sp, #8]
   3c9d6:	890d      	ldrh	r5, [r1, #8]
   3c9d8:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   3c9da:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3c9dc:	f024 041f 	bic.w	r4, r4, #31
   3c9e0:	3b01      	subs	r3, #1
	p_attr->rbar = attr->rbar &
   3c9e2:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3c9e6:	4423      	add	r3, r4
	p_attr->mair_idx = attr->mair_idx;
   3c9e8:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3c9ec:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   3c9f0:	4669      	mov	r1, sp
	p_attr->mair_idx = attr->mair_idx;
   3c9f2:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3c9f6:	9303      	str	r3, [sp, #12]
   3c9f8:	f7e7 ff72 	bl	248e0 <region_allocate_and_init>
}
   3c9fc:	b005      	add	sp, #20
   3c9fe:	bd30      	pop	{r4, r5, pc}

0003ca00 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3ca00:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   3ca04:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   3ca08:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   3ca0a:	bf08      	it	eq
   3ca0c:	f06f 0015 	mvneq.w	r0, #21
   3ca10:	4770      	bx	lr

0003ca12 <_stdout_hook_default>:
}
   3ca12:	f04f 30ff 	mov.w	r0, #4294967295
   3ca16:	4770      	bx	lr

0003ca18 <_stdin_hook_default>:
}
   3ca18:	2000      	movs	r0, #0
   3ca1a:	4770      	bx	lr

0003ca1c <_read>:
{
   3ca1c:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   3ca1e:	4611      	mov	r1, r2
   3ca20:	f7e8 b97e 	b.w	24d20 <z_impl_zephyr_read_stdin>

0003ca24 <_write>:
{
   3ca24:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   3ca26:	4611      	mov	r1, r2
   3ca28:	f7e8 b98e 	b.w	24d48 <z_impl_zephyr_write_stdout>

0003ca2c <_close>:
   3ca2c:	f04f 30ff 	mov.w	r0, #4294967295
   3ca30:	4770      	bx	lr

0003ca32 <_lseek>:
}
   3ca32:	2000      	movs	r0, #0
   3ca34:	4770      	bx	lr

0003ca36 <_isatty>:
}
   3ca36:	2001      	movs	r0, #1
   3ca38:	4770      	bx	lr

0003ca3a <_kill>:
}
   3ca3a:	2000      	movs	r0, #0
   3ca3c:	4770      	bx	lr

0003ca3e <_getpid>:
}
   3ca3e:	2000      	movs	r0, #0
   3ca40:	4770      	bx	lr

0003ca42 <_fstat>:
	st->st_mode = S_IFCHR;
   3ca42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   3ca46:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   3ca48:	604b      	str	r3, [r1, #4]
}
   3ca4a:	4770      	bx	lr

0003ca4c <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   3ca4c:	f7f9 be7a 	b.w	36744 <z_impl_z_errno>

0003ca50 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   3ca50:	b508      	push	{r3, lr}
	net_if_init();
   3ca52:	f7e8 fa41 	bl	24ed8 <net_if_init>
	net_if_post_init();
   3ca56:	f7e8 fa53 	bl	24f00 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   3ca5a:	2000      	movs	r0, #0
   3ca5c:	bd08      	pop	{r3, pc}

0003ca5e <net_if_l2>:
	if (!iface || !iface->if_dev) {
   3ca5e:	b110      	cbz	r0, 3ca66 <net_if_l2+0x8>
   3ca60:	6800      	ldr	r0, [r0, #0]
   3ca62:	b100      	cbz	r0, 3ca66 <net_if_l2+0x8>
	return iface->if_dev->l2;
   3ca64:	6840      	ldr	r0, [r0, #4]
}
   3ca66:	4770      	bx	lr

0003ca68 <l2_flags_get>:
{
   3ca68:	b510      	push	{r4, lr}
   3ca6a:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   3ca6c:	f7ff fff7 	bl	3ca5e <net_if_l2>
   3ca70:	b128      	cbz	r0, 3ca7e <l2_flags_get+0x16>
   3ca72:	68c3      	ldr	r3, [r0, #12]
   3ca74:	b11b      	cbz	r3, 3ca7e <l2_flags_get+0x16>
}
   3ca76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   3ca7a:	4610      	mov	r0, r2
   3ca7c:	4718      	bx	r3
}
   3ca7e:	2000      	movs	r0, #0
   3ca80:	bd10      	pop	{r4, pc}

0003ca82 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, u16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   3ca82:	e9d0 2300 	ldrd	r2, r3, [r0]
   3ca86:	1a9b      	subs	r3, r3, r2
   3ca88:	2b01      	cmp	r3, #1
{
   3ca8a:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   3ca8c:	d90c      	bls.n	3caa8 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   3ca8e:	4614      	mov	r4, r2
   3ca90:	1c53      	adds	r3, r2, #1
   3ca92:	6003      	str	r3, [r0, #0]
   3ca94:	f814 3b02 	ldrb.w	r3, [r4], #2
   3ca98:	021b      	lsls	r3, r3, #8
   3ca9a:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   3ca9c:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   3ca9e:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   3caa0:	7852      	ldrb	r2, [r2, #1]
   3caa2:	4313      	orrs	r3, r2
   3caa4:	800b      	strh	r3, [r1, #0]
}
   3caa6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3caa8:	f06f 0015 	mvn.w	r0, #21
   3caac:	e7fb      	b.n	3caa6 <unpack_uint16+0x24>

0003caae <packet_length_decode>:
int packet_length_decode(struct buf_ctx *buf, u32_t *length)
{
	u8_t shift = 0U;
	u8_t bytes = 0U;

	*length = 0U;
   3caae:	2300      	movs	r3, #0
{
   3cab0:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
			return -EINVAL;
		}

		if (buf->cur >= buf->end) {
   3cab2:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   3cab4:	600b      	str	r3, [r1, #0]
		if (buf->cur >= buf->end) {
   3cab6:	6804      	ldr	r4, [r0, #0]
   3cab8:	42bc      	cmp	r4, r7
   3caba:	d215      	bcs.n	3cae8 <packet_length_decode+0x3a>
			return -EAGAIN;
		}

		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3cabc:	4625      	mov	r5, r4
   3cabe:	f815 2b01 	ldrb.w	r2, [r5], #1
   3cac2:	680e      	ldr	r6, [r1, #0]
   3cac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
								<< shift;
   3cac8:	409a      	lsls	r2, r3
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3caca:	4432      	add	r2, r6
   3cacc:	600a      	str	r2, [r1, #0]
		shift += MQTT_LENGTH_SHIFT;
		bytes++;
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   3cace:	6005      	str	r5, [r0, #0]
   3cad0:	f994 2000 	ldrsb.w	r2, [r4]
   3cad4:	2a00      	cmp	r2, #0
   3cad6:	db01      	blt.n	3cadc <packet_length_decode+0x2e>

	MQTT_TRC("length:0x%08x", *length);

	return 0;
   3cad8:	2000      	movs	r0, #0
}
   3cada:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
   3cadc:	3307      	adds	r3, #7
   3cade:	2b23      	cmp	r3, #35	; 0x23
   3cae0:	d1e9      	bne.n	3cab6 <packet_length_decode+0x8>
			return -EINVAL;
   3cae2:	f06f 0015 	mvn.w	r0, #21
   3cae6:	e7f8      	b.n	3cada <packet_length_decode+0x2c>
			return -EAGAIN;
   3cae8:	f06f 000a 	mvn.w	r0, #10
   3caec:	e7f5      	b.n	3cada <packet_length_decode+0x2c>

0003caee <fixed_header_decode>:

int fixed_header_decode(struct buf_ctx *buf, u8_t *type_and_flags,
			u32_t *length)
{
   3caee:	b430      	push	{r4, r5}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3caf0:	e9d0 3500 	ldrd	r3, r5, [r0]
   3caf4:	429d      	cmp	r5, r3
   3caf6:	d007      	beq.n	3cb08 <fixed_header_decode+0x1a>
	*val = *(buf->cur++);
   3caf8:	1c5d      	adds	r5, r3, #1
   3cafa:	6005      	str	r5, [r0, #0]
   3cafc:	781b      	ldrb	r3, [r3, #0]
   3cafe:	700b      	strb	r3, [r1, #0]
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   3cb00:	bc30      	pop	{r4, r5}
	return packet_length_decode(buf, length);
   3cb02:	4611      	mov	r1, r2
   3cb04:	f7ff bfd3 	b.w	3caae <packet_length_decode>
}
   3cb08:	f06f 0015 	mvn.w	r0, #21
   3cb0c:	bc30      	pop	{r4, r5}
   3cb0e:	4770      	bx	lr

0003cb10 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   3cb10:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3cb12:	e9d1 3500 	ldrd	r3, r5, [r1]
   3cb16:	429d      	cmp	r5, r3
   3cb18:	d102      	bne.n	3cb20 <connect_ack_decode+0x10>
		return -EINVAL;
   3cb1a:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   3cb1e:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   3cb20:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3cb22:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   3cb24:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3cb26:	d0f8      	beq.n	3cb1a <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   3cb28:	461d      	mov	r5, r3
   3cb2a:	f815 4b02 	ldrb.w	r4, [r5], #2
   3cb2e:	600d      	str	r5, [r1, #0]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3cb30:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
	*val = *(buf->cur++);
   3cb34:	785b      	ldrb	r3, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3cb36:	2904      	cmp	r1, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   3cb38:	bf04      	itt	eq
   3cb3a:	f004 0401 	andeq.w	r4, r4, #1
		param->session_present_flag =
   3cb3e:	7014      	strbeq	r4, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   3cb40:	7053      	strb	r3, [r2, #1]
	return 0;
   3cb42:	2000      	movs	r0, #0
   3cb44:	e7eb      	b.n	3cb1e <connect_ack_decode+0xe>

0003cb46 <publish_decode>:

int publish_decode(u8_t flags, u32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   3cb46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3cb4a:	461c      	mov	r4, r3
	int err_code;
	u32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3cb4c:	7d9b      	ldrb	r3, [r3, #22]
{
   3cb4e:	4688      	mov	r8, r1
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   3cb50:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   3cb54:	f360 0341 	bfi	r3, r0, #1, #1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   3cb58:	f3c0 0041 	ubfx	r0, r0, #1, #2
   3cb5c:	7220      	strb	r0, [r4, #8]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   3cb5e:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   3cb60:	f10d 0106 	add.w	r1, sp, #6
   3cb64:	4610      	mov	r0, r2
{
   3cb66:	4616      	mov	r6, r2
	err_code = unpack_uint16(buf, &utf8_strlen);
   3cb68:	f7ff ff8b 	bl	3ca82 <unpack_uint16>
	if (err_code != 0) {
   3cb6c:	4607      	mov	r7, r0
   3cb6e:	b940      	cbnz	r0, 3cb82 <publish_decode+0x3c>
	if ((buf->end - buf->cur) < utf8_strlen) {
   3cb70:	6833      	ldr	r3, [r6, #0]
   3cb72:	6872      	ldr	r2, [r6, #4]
   3cb74:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   3cb78:	1ad2      	subs	r2, r2, r3
   3cb7a:	42aa      	cmp	r2, r5
   3cb7c:	da05      	bge.n	3cb8a <publish_decode+0x44>
		return -EINVAL;
   3cb7e:	f06f 0715 	mvn.w	r7, #21

	param->message.payload.data = NULL;
	param->message.payload.len = var_length - var_header_length;

	return 0;
}
   3cb82:	4638      	mov	r0, r7
   3cb84:	b002      	add	sp, #8
   3cb86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	str->size = utf8_strlen;
   3cb8a:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   3cb8c:	b15d      	cbz	r5, 3cba6 <publish_decode+0x60>
		str->utf8 = buf->cur;
   3cb8e:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   3cb90:	442b      	add	r3, r5
   3cb92:	6033      	str	r3, [r6, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3cb94:	7a23      	ldrb	r3, [r4, #8]
   3cb96:	b943      	cbnz	r3, 3cbaa <publish_decode+0x64>
	var_header_length = param->message.topic.topic.size + sizeof(u16_t);
   3cb98:	3502      	adds	r5, #2
	param->message.payload.data = NULL;
   3cb9a:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   3cb9c:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   3cba0:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   3cba2:	6125      	str	r5, [r4, #16]
	return 0;
   3cba4:	e7ed      	b.n	3cb82 <publish_decode+0x3c>
		str->utf8 = NULL;
   3cba6:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   3cba8:	e7f4      	b.n	3cb94 <publish_decode+0x4e>
		err_code = unpack_uint16(buf, &param->message_id);
   3cbaa:	f104 0114 	add.w	r1, r4, #20
   3cbae:	4630      	mov	r0, r6
   3cbb0:	f7ff ff67 	bl	3ca82 <unpack_uint16>
		if (err_code != 0) {
   3cbb4:	b908      	cbnz	r0, 3cbba <publish_decode+0x74>
		var_header_length += sizeof(u16_t);
   3cbb6:	3504      	adds	r5, #4
   3cbb8:	e7ef      	b.n	3cb9a <publish_decode+0x54>
   3cbba:	4607      	mov	r7, r0
   3cbbc:	e7e1      	b.n	3cb82 <publish_decode+0x3c>

0003cbbe <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3cbbe:	f7ff bf60 	b.w	3ca82 <unpack_uint16>

0003cbc2 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3cbc2:	f7ff bf5e 	b.w	3ca82 <unpack_uint16>

0003cbc6 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3cbc6:	f7ff bf5c 	b.w	3ca82 <unpack_uint16>

0003cbca <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3cbca:	f7ff bf5a 	b.w	3ca82 <unpack_uint16>

0003cbce <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   3cbce:	b538      	push	{r3, r4, r5, lr}
   3cbd0:	4605      	mov	r5, r0
   3cbd2:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   3cbd4:	f7ff ff55 	bl	3ca82 <unpack_uint16>
	if (err_code != 0) {
   3cbd8:	b930      	cbnz	r0, 3cbe8 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   3cbda:	e9d5 2300 	ldrd	r2, r3, [r5]
   3cbde:	1a99      	subs	r1, r3, r2
	str->len = length;
   3cbe0:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   3cbe2:	b111      	cbz	r1, 3cbea <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   3cbe4:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   3cbe6:	602b      	str	r3, [r5, #0]
}
   3cbe8:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   3cbea:	6060      	str	r0, [r4, #4]
   3cbec:	e7fc      	b.n	3cbe8 <subscribe_ack_decode+0x1a>

0003cbee <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3cbee:	f7ff bf48 	b.w	3ca82 <unpack_uint16>

0003cbf2 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   3cbf2:	e9d1 3200 	ldrd	r3, r2, [r1]
   3cbf6:	1ad2      	subs	r2, r2, r3
   3cbf8:	2a01      	cmp	r2, #1
   3cbfa:	d909      	bls.n	3cc10 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   3cbfc:	1c5a      	adds	r2, r3, #1
   3cbfe:	600a      	str	r2, [r1, #0]
   3cc00:	0a02      	lsrs	r2, r0, #8
   3cc02:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   3cc04:	680b      	ldr	r3, [r1, #0]
   3cc06:	1c5a      	adds	r2, r3, #1
   3cc08:	600a      	str	r2, [r1, #0]
   3cc0a:	7018      	strb	r0, [r3, #0]
	return 0;
   3cc0c:	2000      	movs	r0, #0
   3cc0e:	4770      	bx	lr
		return -ENOMEM;
   3cc10:	f06f 000b 	mvn.w	r0, #11
}
   3cc14:	4770      	bx	lr

0003cc16 <pack_utf8_str>:
{
   3cc16:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3cc18:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   3cc1c:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3cc1e:	6840      	ldr	r0, [r0, #4]
   3cc20:	1a9b      	subs	r3, r3, r2
   3cc22:	1c82      	adds	r2, r0, #2
   3cc24:	4293      	cmp	r3, r2
{
   3cc26:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3cc28:	d30d      	bcc.n	3cc46 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   3cc2a:	b280      	uxth	r0, r0
   3cc2c:	f7ff ffe1 	bl	3cbf2 <pack_uint16>
   3cc30:	e9d5 1200 	ldrd	r1, r2, [r5]
   3cc34:	6820      	ldr	r0, [r4, #0]
   3cc36:	f002 f848 	bl	3ecca <memcpy>
	return 0;
   3cc3a:	2000      	movs	r0, #0
	buf->cur += str->size;
   3cc3c:	6823      	ldr	r3, [r4, #0]
   3cc3e:	686a      	ldr	r2, [r5, #4]
   3cc40:	4413      	add	r3, r2
   3cc42:	6023      	str	r3, [r4, #0]
}
   3cc44:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   3cc46:	f06f 000b 	mvn.w	r0, #11
   3cc4a:	e7fb      	b.n	3cc44 <pack_utf8_str+0x2e>

0003cc4c <mqtt_encode_fixed_header>:
{
   3cc4c:	b570      	push	{r4, r5, r6, lr}
	u32_t length = buf->cur - start;
   3cc4e:	6815      	ldr	r5, [r2, #0]
   3cc50:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   3cc52:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   3cc56:	d227      	bcs.n	3cca8 <mqtt_encode_fixed_header+0x5c>
   3cc58:	462c      	mov	r4, r5
   3cc5a:	2600      	movs	r6, #0
	} while (length > 0);
   3cc5c:	09e4      	lsrs	r4, r4, #7
   3cc5e:	b2f3      	uxtb	r3, r6
		if (buf != NULL) {
   3cc60:	f106 0601 	add.w	r6, r6, #1
	} while (length > 0);
   3cc64:	d1fa      	bne.n	3cc5c <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(u8_t);
   3cc66:	3302      	adds	r3, #2
	buf->cur = start - fixed_header_length;
   3cc68:	b2db      	uxtb	r3, r3
   3cc6a:	425b      	negs	r3, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3cc6c:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   3cc6e:	18cc      	adds	r4, r1, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3cc70:	42b4      	cmp	r4, r6
	buf->cur = start - fixed_header_length;
   3cc72:	6014      	str	r4, [r2, #0]
	*(buf->cur++) = val;
   3cc74:	bf1e      	ittt	ne
   3cc76:	3401      	addne	r4, #1
   3cc78:	6014      	strne	r4, [r2, #0]
   3cc7a:	54c8      	strbne	r0, [r1, r3]
	return 0;
   3cc7c:	4628      	mov	r0, r5
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   3cc7e:	6811      	ldr	r1, [r2, #0]
   3cc80:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   3cc84:	700c      	strb	r4, [r1, #0]
			if (length > 0) {
   3cc86:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   3cc88:	bf1f      	itttt	ne
   3cc8a:	6814      	ldrne	r4, [r2, #0]
   3cc8c:	7821      	ldrbne	r1, [r4, #0]
   3cc8e:	f061 017f 	ornne	r1, r1, #127	; 0x7f
   3cc92:	7021      	strbne	r1, [r4, #0]
			buf->cur++;
   3cc94:	6811      	ldr	r1, [r2, #0]
   3cc96:	3101      	adds	r1, #1
   3cc98:	6011      	str	r1, [r2, #0]
	} while (length > 0);
   3cc9a:	2800      	cmp	r0, #0
   3cc9c:	d1ef      	bne.n	3cc7e <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   3cc9e:	440b      	add	r3, r1
	buf->end = buf->cur + length + fixed_header_length;
   3cca0:	4429      	add	r1, r5
	buf->cur = buf->cur - fixed_header_length;
   3cca2:	6013      	str	r3, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   3cca4:	6051      	str	r1, [r2, #4]
}
   3cca6:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   3cca8:	f06f 0079 	mvn.w	r0, #121	; 0x79
   3ccac:	e7fb      	b.n	3cca6 <mqtt_encode_fixed_header+0x5a>

0003ccae <mqtt_message_id_only_enc>:
{
   3ccae:	b570      	push	{r4, r5, r6, lr}
   3ccb0:	4606      	mov	r6, r0
   3ccb2:	4615      	mov	r5, r2
	if (message_id == 0U) {
   3ccb4:	4608      	mov	r0, r1
   3ccb6:	b169      	cbz	r1, 3ccd4 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3ccb8:	6814      	ldr	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3ccba:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3ccbc:	3405      	adds	r4, #5
   3ccbe:	6014      	str	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3ccc0:	f7ff ff97 	bl	3cbf2 <pack_uint16>
	if (err_code != 0) {
   3ccc4:	b940      	cbnz	r0, 3ccd8 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3ccc6:	462a      	mov	r2, r5
   3ccc8:	4621      	mov	r1, r4
   3ccca:	4630      	mov	r0, r6
}
   3cccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3ccd0:	f7ff bfbc 	b.w	3cc4c <mqtt_encode_fixed_header>
		return -EINVAL;
   3ccd4:	f06f 0015 	mvn.w	r0, #21
}
   3ccd8:	bd70      	pop	{r4, r5, r6, pc}

0003ccda <publish_encode>:
{
   3ccda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ccde:	4607      	mov	r7, r0
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3cce0:	7d80      	ldrb	r0, [r0, #22]
   3cce2:	7a3c      	ldrb	r4, [r7, #8]
{
   3cce4:	460d      	mov	r5, r1
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3cce6:	f000 0801 	and.w	r8, r0, #1
   3ccea:	f3c0 0940 	ubfx	r9, r0, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   3ccee:	b10c      	cbz	r4, 3ccf4 <publish_encode+0x1a>
   3ccf0:	8abb      	ldrh	r3, [r7, #20]
   3ccf2:	b35b      	cbz	r3, 3cd4c <publish_encode+0x72>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3ccf4:	682e      	ldr	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3ccf6:	4629      	mov	r1, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3ccf8:	3605      	adds	r6, #5
   3ccfa:	602e      	str	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3ccfc:	4638      	mov	r0, r7
   3ccfe:	f7ff ff8a 	bl	3cc16 <pack_utf8_str>
	if (err_code != 0) {
   3cd02:	b9a8      	cbnz	r0, 3cd30 <publish_encode+0x56>
	if (param->message.topic.qos) {
   3cd04:	7a3b      	ldrb	r3, [r7, #8]
   3cd06:	b9ab      	cbnz	r3, 3cd34 <publish_encode+0x5a>
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3cd08:	0060      	lsls	r0, r4, #1
   3cd0a:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   3cd0e:	693a      	ldr	r2, [r7, #16]
   3cd10:	682b      	ldr	r3, [r5, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3cd12:	ea40 0009 	orr.w	r0, r0, r9
   3cd16:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   3cd1a:	4413      	add	r3, r2
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3cd1c:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	buf->cur += param->message.payload.len;
   3cd20:	602b      	str	r3, [r5, #0]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3cd22:	462a      	mov	r2, r5
   3cd24:	4631      	mov	r1, r6
   3cd26:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3cd2a:	f7ff ff8f 	bl	3cc4c <mqtt_encode_fixed_header>
	if (err_code != 0) {
   3cd2e:	b140      	cbz	r0, 3cd42 <publish_encode+0x68>
}
   3cd30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   3cd34:	4629      	mov	r1, r5
   3cd36:	8ab8      	ldrh	r0, [r7, #20]
   3cd38:	f7ff ff5b 	bl	3cbf2 <pack_uint16>
		if (err_code != 0) {
   3cd3c:	2800      	cmp	r0, #0
   3cd3e:	d0e3      	beq.n	3cd08 <publish_encode+0x2e>
   3cd40:	e7f6      	b.n	3cd30 <publish_encode+0x56>
	buf->end -= param->message.payload.len;
   3cd42:	686b      	ldr	r3, [r5, #4]
   3cd44:	693a      	ldr	r2, [r7, #16]
   3cd46:	1a9b      	subs	r3, r3, r2
   3cd48:	606b      	str	r3, [r5, #4]
	return 0;
   3cd4a:	e7f1      	b.n	3cd30 <publish_encode+0x56>
		return -EINVAL;
   3cd4c:	f06f 0015 	mvn.w	r0, #21
   3cd50:	e7ee      	b.n	3cd30 <publish_encode+0x56>

0003cd52 <publish_ack_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   3cd52:	460a      	mov	r2, r1
   3cd54:	8801      	ldrh	r1, [r0, #0]
   3cd56:	2040      	movs	r0, #64	; 0x40
   3cd58:	f7ff bfa9 	b.w	3ccae <mqtt_message_id_only_enc>

0003cd5c <subscribe_encode>:
{
   3cd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3cd60:	4607      	mov	r7, r0
	if (param->message_id == 0U) {
   3cd62:	88c0      	ldrh	r0, [r0, #6]
{
   3cd64:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   3cd66:	b330      	cbz	r0, 3cdb6 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3cd68:	680e      	ldr	r6, [r1, #0]
   3cd6a:	3605      	adds	r6, #5
   3cd6c:	600e      	str	r6, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3cd6e:	f7ff ff40 	bl	3cbf2 <pack_uint16>
	if (err_code != 0) {
   3cd72:	4604      	mov	r4, r0
   3cd74:	bb08      	cbnz	r0, 3cdba <subscribe_encode+0x5e>
   3cd76:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < param->list_count; i++) {
   3cd7a:	88bb      	ldrh	r3, [r7, #4]
   3cd7c:	42a3      	cmp	r3, r4
   3cd7e:	dc06      	bgt.n	3cd8e <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3cd80:	462a      	mov	r2, r5
   3cd82:	4631      	mov	r1, r6
}
   3cd84:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3cd88:	2082      	movs	r0, #130	; 0x82
   3cd8a:	f7ff bf5f 	b.w	3cc4c <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3cd8e:	fb09 f804 	mul.w	r8, r9, r4
   3cd92:	6838      	ldr	r0, [r7, #0]
   3cd94:	4629      	mov	r1, r5
   3cd96:	4440      	add	r0, r8
   3cd98:	f7ff ff3d 	bl	3cc16 <pack_utf8_str>
		if (err_code != 0) {
   3cd9c:	b980      	cbnz	r0, 3cdc0 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   3cd9e:	683b      	ldr	r3, [r7, #0]
   3cda0:	4443      	add	r3, r8
   3cda2:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3cda4:	e9d5 3100 	ldrd	r3, r1, [r5]
   3cda8:	4299      	cmp	r1, r3
   3cdaa:	d00b      	beq.n	3cdc4 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   3cdac:	1c59      	adds	r1, r3, #1
   3cdae:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   3cdb0:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   3cdb2:	701a      	strb	r2, [r3, #0]
		if (err_code != 0) {
   3cdb4:	e7e1      	b.n	3cd7a <subscribe_encode+0x1e>
		return -EINVAL;
   3cdb6:	f06f 0415 	mvn.w	r4, #21
}
   3cdba:	4620      	mov	r0, r4
   3cdbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3cdc0:	4604      	mov	r4, r0
   3cdc2:	e7fa      	b.n	3cdba <subscribe_encode+0x5e>
		return -ENOMEM;
   3cdc4:	f06f 040b 	mvn.w	r4, #11
   3cdc8:	e7f7      	b.n	3cdba <subscribe_encode+0x5e>

0003cdca <unsubscribe_encode>:
{
   3cdca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3cdce:	680d      	ldr	r5, [r1, #0]
{
   3cdd0:	4607      	mov	r7, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3cdd2:	3505      	adds	r5, #5
   3cdd4:	600d      	str	r5, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3cdd6:	88c0      	ldrh	r0, [r0, #6]
{
   3cdd8:	460e      	mov	r6, r1
	err_code = pack_uint16(param->message_id, buf);
   3cdda:	f7ff ff0a 	bl	3cbf2 <pack_uint16>
	if (err_code != 0) {
   3cdde:	4604      	mov	r4, r0
   3cde0:	b9a8      	cbnz	r0, 3ce0e <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3cde2:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3cde6:	88bb      	ldrh	r3, [r7, #4]
   3cde8:	42a3      	cmp	r3, r4
   3cdea:	dc06      	bgt.n	3cdfa <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3cdec:	4632      	mov	r2, r6
   3cdee:	4629      	mov	r1, r5
}
   3cdf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3cdf4:	20a2      	movs	r0, #162	; 0xa2
   3cdf6:	f7ff bf29 	b.w	3cc4c <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3cdfa:	6838      	ldr	r0, [r7, #0]
   3cdfc:	4631      	mov	r1, r6
   3cdfe:	fb08 0004 	mla	r0, r8, r4, r0
   3ce02:	f7ff ff08 	bl	3cc16 <pack_utf8_str>
		if (err_code != 0) {
   3ce06:	b908      	cbnz	r0, 3ce0c <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   3ce08:	3401      	adds	r4, #1
   3ce0a:	e7ec      	b.n	3cde6 <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3ce0c:	4604      	mov	r4, r0
}
   3ce0e:	4620      	mov	r0, r4
   3ce10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003ce14 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, u32_t length)
{
   3ce14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ce16:	460d      	mov	r5, r1
	int len;

	/* Calculate how much data we need to read from the transport,
	 * given the already buffered data.
	 */
	remaining = length - (buf->end - buf->cur);
   3ce18:	e9d1 4100 	ldrd	r4, r1, [r1]
   3ce1c:	1b0c      	subs	r4, r1, r4
   3ce1e:	1b14      	subs	r4, r2, r4
	if (remaining <= 0) {
   3ce20:	2c00      	cmp	r4, #0
{
   3ce22:	4606      	mov	r6, r0
	if (remaining <= 0) {
   3ce24:	dd14      	ble.n	3ce50 <mqtt_read_message_chunk+0x3c>
		return 0;
	}

	/* Check if read does not exceed the buffer. */
	if (buf->end + remaining > client->rx_buf + client->rx_buf_size) {
   3ce26:	e9d0 3719 	ldrd	r3, r7, [r0, #100]	; 0x64
   3ce2a:	190a      	adds	r2, r1, r4
   3ce2c:	443b      	add	r3, r7
   3ce2e:	429a      	cmp	r2, r3
   3ce30:	d810      	bhi.n	3ce54 <mqtt_read_message_chunk+0x40>
		MQTT_ERR("[CID %p]: Buffer too small to receive the message",
			 client);
		return -ENOMEM;
	}

	len = mqtt_transport_read(client, buf->end, remaining, false);
   3ce32:	2300      	movs	r3, #0
   3ce34:	4622      	mov	r2, r4
   3ce36:	f7e8 fa4f 	bl	252d8 <mqtt_transport_read>
	if (len < 0) {
   3ce3a:	2800      	cmp	r0, #0
   3ce3c:	db09      	blt.n	3ce52 <mqtt_read_message_chunk+0x3e>
		MQTT_TRC("[CID %p]: Transport read error: %d", client, len);
		return len;
	}

	if (len == 0) {
   3ce3e:	d00c      	beq.n	3ce5a <mqtt_read_message_chunk+0x46>
		MQTT_TRC("[CID %p]: Connection closed.", client);
		return -ENOTCONN;
	}

	client->internal.rx_buf_datalen += len;
   3ce40:	69f3      	ldr	r3, [r6, #28]
	buf->end += len;

	if (len < remaining) {
   3ce42:	4284      	cmp	r4, r0
	client->internal.rx_buf_datalen += len;
   3ce44:	4403      	add	r3, r0
   3ce46:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   3ce48:	686b      	ldr	r3, [r5, #4]
   3ce4a:	4403      	add	r3, r0
   3ce4c:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   3ce4e:	dc07      	bgt.n	3ce60 <mqtt_read_message_chunk+0x4c>
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
   3ce50:	2000      	movs	r0, #0
}
   3ce52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
   3ce54:	f06f 000b 	mvn.w	r0, #11
   3ce58:	e7fb      	b.n	3ce52 <mqtt_read_message_chunk+0x3e>
		return -ENOTCONN;
   3ce5a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3ce5e:	e7f8      	b.n	3ce52 <mqtt_read_message_chunk+0x3e>
		return -EAGAIN;
   3ce60:	f06f 000a 	mvn.w	r0, #10
   3ce64:	e7f5      	b.n	3ce52 <mqtt_read_message_chunk+0x3e>

0003ce66 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   3ce66:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	u8_t type_and_flags;
	u32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   3ce68:	6e43      	ldr	r3, [r0, #100]	; 0x64
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3ce6a:	69c2      	ldr	r2, [r0, #28]
{
   3ce6c:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   3ce6e:	9302      	str	r3, [sp, #8]
{
   3ce70:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3ce72:	4413      	add	r3, r2
	u8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   3ce74:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3ce76:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   3ce78:	a902      	add	r1, sp, #8
   3ce7a:	4628      	mov	r0, r5
   3ce7c:	f7ff ffca 	bl	3ce14 <mqtt_read_message_chunk>
		if (err_code < 0) {
   3ce80:	1e04      	subs	r4, r0, #0
   3ce82:	db2b      	blt.n	3cedc <mqtt_handle_rx+0x76>
		buf->cur = client->rx_buf;
   3ce84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3ce86:	aa01      	add	r2, sp, #4
   3ce88:	f10d 0103 	add.w	r1, sp, #3
   3ce8c:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   3ce8e:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3ce90:	f7ff fe2d 	bl	3caee <fixed_header_decode>
	} while (err_code == -EAGAIN);
   3ce94:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3ce98:	4604      	mov	r4, r0
		chunk_size = 1U;
   3ce9a:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   3ce9e:	d0eb      	beq.n	3ce78 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   3cea0:	2800      	cmp	r0, #0
   3cea2:	db1f      	blt.n	3cee4 <mqtt_handle_rx+0x7e>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   3cea4:	f89d 6003 	ldrb.w	r6, [sp, #3]
   3cea8:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   3ceac:	2b30      	cmp	r3, #48	; 0x30
   3ceae:	d11c      	bne.n	3ceea <mqtt_handle_rx+0x84>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(u16_t));
   3ceb0:	2202      	movs	r2, #2
   3ceb2:	a902      	add	r1, sp, #8
   3ceb4:	4628      	mov	r0, r5
   3ceb6:	f7ff ffad 	bl	3ce14 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3ceba:	1e04      	subs	r4, r0, #0
   3cebc:	db0e      	blt.n	3cedc <mqtt_handle_rx+0x76>
	variable_header_length = *buf->cur << 8; /* MSB */
   3cebe:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3cec0:	f016 0f06 	tst.w	r6, #6
   3cec4:	881a      	ldrh	r2, [r3, #0]
   3cec6:	ba52      	rev16	r2, r2
   3cec8:	b292      	uxth	r2, r2
	variable_header_length += sizeof(u16_t);
   3ceca:	bf0c      	ite	eq
   3cecc:	3202      	addeq	r2, #2
		variable_header_length += sizeof(u16_t);
   3cece:	3204      	addne	r2, #4
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3ced0:	a902      	add	r1, sp, #8
   3ced2:	4628      	mov	r0, r5
   3ced4:	f7ff ff9e 	bl	3ce14 <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   3ced8:	1e04      	subs	r4, r0, #0
   3ceda:	da08      	bge.n	3ceee <mqtt_handle_rx+0x88>
		return (err_code == -EAGAIN) ? 0 : err_code;
   3cedc:	f114 0f0b 	cmn.w	r4, #11
   3cee0:	d100      	bne.n	3cee4 <mqtt_handle_rx+0x7e>
   3cee2:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   3cee4:	4620      	mov	r0, r4
   3cee6:	b00c      	add	sp, #48	; 0x30
   3cee8:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3ceea:	9a01      	ldr	r2, [sp, #4]
   3ceec:	e7f0      	b.n	3ced0 <mqtt_handle_rx+0x6a>
	evt.result = 0;
   3ceee:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   3cef0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3cef4:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   3cef6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   3cefa:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   3cefc:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   3cefe:	d05e      	beq.n	3cfbe <mqtt_handle_rx+0x158>
   3cf00:	d813      	bhi.n	3cf2a <mqtt_handle_rx+0xc4>
   3cf02:	2b30      	cmp	r3, #48	; 0x30
   3cf04:	d045      	beq.n	3cf92 <mqtt_handle_rx+0x12c>
   3cf06:	d804      	bhi.n	3cf12 <mqtt_handle_rx+0xac>
   3cf08:	2b20      	cmp	r3, #32
   3cf0a:	d02a      	beq.n	3cf62 <mqtt_handle_rx+0xfc>
	client->internal.rx_buf_datalen = 0U;
   3cf0c:	2400      	movs	r4, #0
   3cf0e:	61ec      	str	r4, [r5, #28]
	return 0;
   3cf10:	e7e8      	b.n	3cee4 <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   3cf12:	2b40      	cmp	r3, #64	; 0x40
   3cf14:	d049      	beq.n	3cfaa <mqtt_handle_rx+0x144>
   3cf16:	2b50      	cmp	r3, #80	; 0x50
   3cf18:	d1f8      	bne.n	3cf0c <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBREC;
   3cf1a:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3cf1c:	a905      	add	r1, sp, #20
   3cf1e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   3cf20:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3cf24:	f7ff fe4d 	bl	3cbc2 <publish_receive_decode>
   3cf28:	e046      	b.n	3cfb8 <mqtt_handle_rx+0x152>
	switch (type_and_flags & 0xF0) {
   3cf2a:	2b90      	cmp	r3, #144	; 0x90
   3cf2c:	d04f      	beq.n	3cfce <mqtt_handle_rx+0x168>
   3cf2e:	d809      	bhi.n	3cf44 <mqtt_handle_rx+0xde>
   3cf30:	2b70      	cmp	r3, #112	; 0x70
   3cf32:	d1eb      	bne.n	3cf0c <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBCOMP;
   3cf34:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3cf36:	a905      	add	r1, sp, #20
   3cf38:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   3cf3a:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3cf3e:	f7ff fe44 	bl	3cbca <publish_complete_decode>
   3cf42:	e039      	b.n	3cfb8 <mqtt_handle_rx+0x152>
	switch (type_and_flags & 0xF0) {
   3cf44:	2bb0      	cmp	r3, #176	; 0xb0
   3cf46:	d04a      	beq.n	3cfde <mqtt_handle_rx+0x178>
   3cf48:	2bd0      	cmp	r3, #208	; 0xd0
   3cf4a:	d1df      	bne.n	3cf0c <mqtt_handle_rx+0xa6>
		if (client->unacked_ping <= 0) {
   3cf4c:	f995 3077 	ldrsb.w	r3, [r5, #119]	; 0x77
   3cf50:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   3cf52:	bfca      	itet	gt
   3cf54:	f103 33ff 	addgt.w	r3, r3, #4294967295
			client->unacked_ping = 0;
   3cf58:	f885 2077 	strble.w	r2, [r5, #119]	; 0x77
			client->unacked_ping--;
   3cf5c:	f885 3077 	strbgt.w	r3, [r5, #119]	; 0x77
	if (err_code < 0) {
   3cf60:	e7d4      	b.n	3cf0c <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_CONNACK;
   3cf62:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   3cf66:	a902      	add	r1, sp, #8
   3cf68:	aa05      	add	r2, sp, #20
   3cf6a:	4628      	mov	r0, r5
   3cf6c:	f7ff fdd0 	bl	3cb10 <connect_ack_decode>
		if (err_code == 0) {
   3cf70:	4604      	mov	r4, r0
   3cf72:	bb10      	cbnz	r0, 3cfba <mqtt_handle_rx+0x154>
			if (evt.param.connack.return_code ==
   3cf74:	f89d 2015 	ldrb.w	r2, [sp, #21]
   3cf78:	b91a      	cbnz	r2, 3cf82 <mqtt_handle_rx+0x11c>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   3cf7a:	69ab      	ldr	r3, [r5, #24]
   3cf7c:	f043 0304 	orr.w	r3, r3, #4
   3cf80:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   3cf82:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   3cf84:	a904      	add	r1, sp, #16
   3cf86:	4628      	mov	r0, r5
   3cf88:	f000 f84d 	bl	3d026 <event_notify>
	if (err_code < 0) {
   3cf8c:	2c00      	cmp	r4, #0
   3cf8e:	dabd      	bge.n	3cf0c <mqtt_handle_rx+0xa6>
   3cf90:	e7a8      	b.n	3cee4 <mqtt_handle_rx+0x7e>
		evt.type = MQTT_EVT_PUBLISH;
   3cf92:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   3cf94:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   3cf96:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   3cf9a:	ab05      	add	r3, sp, #20
   3cf9c:	f7ff fdd3 	bl	3cb46 <publish_decode>
		client->internal.remaining_payload =
   3cfa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   3cfa2:	4604      	mov	r4, r0
		evt.result = err_code;
   3cfa4:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   3cfa6:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   3cfa8:	e7ec      	b.n	3cf84 <mqtt_handle_rx+0x11e>
		evt.type = MQTT_EVT_PUBACK;
   3cfaa:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3cfac:	a905      	add	r1, sp, #20
   3cfae:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   3cfb0:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3cfb4:	f7ff fe03 	bl	3cbbe <publish_ack_decode>
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3cfb8:	4604      	mov	r4, r0
		evt.result = err_code;
   3cfba:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   3cfbc:	e7e2      	b.n	3cf84 <mqtt_handle_rx+0x11e>
		evt.type = MQTT_EVT_PUBREL;
   3cfbe:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3cfc0:	a905      	add	r1, sp, #20
   3cfc2:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   3cfc4:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3cfc8:	f7ff fdfd 	bl	3cbc6 <publish_release_decode>
   3cfcc:	e7f4      	b.n	3cfb8 <mqtt_handle_rx+0x152>
		evt.type = MQTT_EVT_SUBACK;
   3cfce:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3cfd0:	a905      	add	r1, sp, #20
   3cfd2:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   3cfd4:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3cfd8:	f7ff fdf9 	bl	3cbce <subscribe_ack_decode>
   3cfdc:	e7ec      	b.n	3cfb8 <mqtt_handle_rx+0x152>
		evt.type = MQTT_EVT_UNSUBACK;
   3cfde:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3cfe0:	a905      	add	r1, sp, #20
   3cfe2:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   3cfe6:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3cfea:	f7ff fe00 	bl	3cbee <unsubscribe_ack_decode>
   3cfee:	e7e3      	b.n	3cfb8 <mqtt_handle_rx+0x152>

0003cff0 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   3cff0:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   3cff2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   3cff4:	f7e8 f83c 	bl	25070 <close>
	if (ret < 0) {
   3cff8:	2800      	cmp	r0, #0
   3cffa:	da04      	bge.n	3d006 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   3cffc:	f7ff fd26 	bl	3ca4c <__errno>
   3d000:	6800      	ldr	r0, [r0, #0]
   3d002:	4240      	negs	r0, r0
	}

	return 0;
}
   3d004:	bd08      	pop	{r3, pc}
	return 0;
   3d006:	2000      	movs	r0, #0
   3d008:	e7fc      	b.n	3d004 <mqtt_client_tcp_disconnect+0x14>

0003d00a <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   3d00a:	b538      	push	{r3, r4, r5, lr}
   3d00c:	4604      	mov	r4, r0
   3d00e:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   3d010:	6f02      	ldr	r2, [r0, #112]	; 0x70
   3d012:	2100      	movs	r1, #0
   3d014:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   3d016:	f001 fe78 	bl	3ed0a <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   3d01a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	buf->end = client->tx_buf + client->tx_buf_size;
   3d01c:	6f22      	ldr	r2, [r4, #112]	; 0x70
	buf->cur = client->tx_buf;
   3d01e:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   3d020:	4413      	add	r3, r2
   3d022:	606b      	str	r3, [r5, #4]
}
   3d024:	bd38      	pop	{r3, r4, r5, pc}

0003d026 <event_notify>:
	/* Reset internal state. */
	client_reset(client);
}

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   3d026:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   3d028:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   3d02a:	4604      	mov	r4, r0
   3d02c:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   3d02e:	b153      	cbz	r3, 3d046 <event_notify+0x20>
		mqtt_mutex_unlock(client);
   3d030:	f7e8 f968 	bl	25304 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   3d034:	4620      	mov	r0, r4
   3d036:	6e23      	ldr	r3, [r4, #96]	; 0x60
   3d038:	4629      	mov	r1, r5
   3d03a:	4798      	blx	r3

		mqtt_mutex_lock(client);
   3d03c:	4620      	mov	r0, r4
	}
}
   3d03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   3d042:	f7e8 b98b 	b.w	2535c <mqtt_mutex_lock>
}
   3d046:	bd38      	pop	{r3, r4, r5, pc}

0003d048 <client_disconnect>:

static void client_disconnect(struct mqtt_client *client, int result)
{
   3d048:	b530      	push	{r4, r5, lr}
   3d04a:	4604      	mov	r4, r0
   3d04c:	b089      	sub	sp, #36	; 0x24
   3d04e:	460d      	mov	r5, r1
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   3d050:	f7e8 f94e 	bl	252f0 <mqtt_transport_disconnect>
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3d054:	69a3      	ldr	r3, [r4, #24]
	event_notify(client, &evt);
   3d056:	4669      	mov	r1, sp
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3d058:	f013 0304 	ands.w	r3, r3, #4
		evt.type = MQTT_EVT_DISCONNECT;
   3d05c:	bf12      	itee	ne
   3d05e:	2301      	movne	r3, #1
		evt.type = MQTT_EVT_CONNACK;
   3d060:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   3d064:	f06f 036e 	mvneq.w	r3, #110	; 0x6e
	event_notify(client, &evt);
   3d068:	4620      	mov	r0, r4
		evt.type = MQTT_EVT_DISCONNECT;
   3d06a:	bf16      	itet	ne
   3d06c:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   3d070:	9307      	streq	r3, [sp, #28]
		evt.result = result;
   3d072:	9507      	strne	r5, [sp, #28]
	event_notify(client, &evt);
   3d074:	f7ff ffd7 	bl	3d026 <event_notify>
	MQTT_STATE_INIT(client);
   3d078:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3d07a:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   3d07e:	e9c4 3307 	strd	r3, r3, [r4, #28]
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	disconnect_event_notify(client, result);
}
   3d082:	b009      	add	sp, #36	; 0x24
   3d084:	bd30      	pop	{r4, r5, pc}

0003d086 <client_write>:
	return err_code;
}

static int client_write(struct mqtt_client *client, const u8_t *data,
			u32_t datalen)
{
   3d086:	b538      	push	{r3, r4, r5, lr}
   3d088:	4605      	mov	r5, r0
	int err_code;

	MQTT_TRC("[%p]: Transport writing %d bytes.", client, datalen);

	err_code = mqtt_transport_write(client, data, datalen);
   3d08a:	f7e8 f919 	bl	252c0 <mqtt_transport_write>
	if (err_code < 0) {
   3d08e:	1e04      	subs	r4, r0, #0
   3d090:	da05      	bge.n	3d09e <client_write+0x18>
		MQTT_TRC("TCP write failed, errno = %d, "
			 "closing connection", errno);
		client_disconnect(client, err_code);
   3d092:	4621      	mov	r1, r4
   3d094:	4628      	mov	r0, r5
   3d096:	f7ff ffd7 	bl	3d048 <client_disconnect>

	MQTT_TRC("[%p]: Transport write complete.", client);
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();

	return 0;
}
   3d09a:	4620      	mov	r0, r4
   3d09c:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_get();
   3d09e:	f001 fd8e 	bl	3ebbe <z_impl_k_uptime_get>
	return 0;
   3d0a2:	2400      	movs	r4, #0
	return (u32_t)k_uptime_get();
   3d0a4:	6168      	str	r0, [r5, #20]
   3d0a6:	e7f8      	b.n	3d09a <client_write+0x14>

0003d0a8 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   3d0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d0ac:	460f      	mov	r7, r1
   3d0ae:	4690      	mov	r8, r2
   3d0b0:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   3d0b2:	4605      	mov	r5, r0
   3d0b4:	b320      	cbz	r0, 3d100 <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   3d0b6:	f7e8 f951 	bl	2535c <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   3d0ba:	6a2c      	ldr	r4, [r5, #32]
   3d0bc:	b1b4      	cbz	r4, 3d0ec <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   3d0be:	4544      	cmp	r4, r8
   3d0c0:	4622      	mov	r2, r4
   3d0c2:	4633      	mov	r3, r6
   3d0c4:	bf28      	it	cs
   3d0c6:	4642      	movcs	r2, r8
   3d0c8:	4639      	mov	r1, r7
   3d0ca:	4628      	mov	r0, r5
   3d0cc:	f7e8 f904 	bl	252d8 <mqtt_transport_read>
   3d0d0:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   3d0d2:	b916      	cbnz	r6, 3d0da <read_publish_payload+0x32>
   3d0d4:	f110 0f0b 	cmn.w	r0, #11
   3d0d8:	d008      	beq.n	3d0ec <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   3d0da:	2c00      	cmp	r4, #0
   3d0dc:	dc0c      	bgt.n	3d0f8 <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   3d0de:	bf08      	it	eq
   3d0e0:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret);
   3d0e4:	4628      	mov	r0, r5
   3d0e6:	4621      	mov	r1, r4
   3d0e8:	f7ff ffae 	bl	3d048 <client_disconnect>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   3d0ec:	4628      	mov	r0, r5
   3d0ee:	f7e8 f909 	bl	25304 <mqtt_mutex_unlock>

	return ret;
}
   3d0f2:	4620      	mov	r0, r4
   3d0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   3d0f8:	6a2b      	ldr	r3, [r5, #32]
   3d0fa:	1b1b      	subs	r3, r3, r4
   3d0fc:	622b      	str	r3, [r5, #32]
   3d0fe:	e7f5      	b.n	3d0ec <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   3d100:	f06f 0415 	mvn.w	r4, #21
   3d104:	e7f5      	b.n	3d0f2 <read_publish_payload+0x4a>

0003d106 <mqtt_client_init>:
{
   3d106:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   3d108:	4604      	mov	r4, r0
   3d10a:	b1a8      	cbz	r0, 3d138 <mqtt_client_init+0x32>
   3d10c:	227c      	movs	r2, #124	; 0x7c
   3d10e:	2100      	movs	r1, #0
   3d110:	f001 fdfb 	bl	3ed0a <memset>
	MQTT_STATE_INIT(client);
   3d114:	2300      	movs	r3, #0
   3d116:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   3d118:	4620      	mov	r0, r4
   3d11a:	f001 fc4f 	bl	3e9bc <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   3d11e:	2304      	movs	r3, #4
   3d120:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	client->clean_session = 1U;
   3d124:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   3d128:	f043 0302 	orr.w	r3, r3, #2
   3d12c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	client->keepalive = MQTT_KEEPALIVE;
   3d130:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   3d134:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
}
   3d138:	bd10      	pop	{r4, pc}

0003d13a <mqtt_connect>:
{
   3d13a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3d13c:	4604      	mov	r4, r0
   3d13e:	2800      	cmp	r0, #0
   3d140:	d03c      	beq.n	3d1bc <mqtt_connect+0x82>
	NULL_PARAM_CHECK(client->client_id.utf8);
   3d142:	6c43      	ldr	r3, [r0, #68]	; 0x44
   3d144:	2b00      	cmp	r3, #0
   3d146:	d039      	beq.n	3d1bc <mqtt_connect+0x82>
	mqtt_mutex_lock(client);
   3d148:	f7e8 f908 	bl	2535c <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   3d14c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   3d14e:	b393      	cbz	r3, 3d1b6 <mqtt_connect+0x7c>
   3d150:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3d152:	b383      	cbz	r3, 3d1b6 <mqtt_connect+0x7c>
	err_code = mqtt_transport_connect(client);
   3d154:	4620      	mov	r0, r4
   3d156:	f7e8 f8ab 	bl	252b0 <mqtt_transport_connect>
	if (err_code < 0) {
   3d15a:	1e05      	subs	r5, r0, #0
   3d15c:	db25      	blt.n	3d1aa <mqtt_connect+0x70>
	tx_buf_init(client, &packet);
   3d15e:	4669      	mov	r1, sp
   3d160:	4620      	mov	r0, r4
   3d162:	f7ff ff52 	bl	3d00a <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3d166:	69a3      	ldr	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   3d168:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3d16a:	f043 0302 	orr.w	r3, r3, #2
   3d16e:	61a3      	str	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   3d170:	4620      	mov	r0, r4
   3d172:	f7e7 fed9 	bl	24f28 <connect_request_encode>
	if (err_code < 0) {
   3d176:	1e05      	subs	r5, r0, #0
   3d178:	db13      	blt.n	3d1a2 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   3d17a:	e9dd 1200 	ldrd	r1, r2, [sp]
   3d17e:	4620      	mov	r0, r4
   3d180:	1a52      	subs	r2, r2, r1
   3d182:	f7e8 f89d 	bl	252c0 <mqtt_transport_write>
	if (err_code < 0) {
   3d186:	1e05      	subs	r5, r0, #0
   3d188:	db0b      	blt.n	3d1a2 <mqtt_connect+0x68>
	return z_impl_k_uptime_get();
   3d18a:	f001 fd18 	bl	3ebbe <z_impl_k_uptime_get>
	client->unacked_ping = 0;
   3d18e:	2500      	movs	r5, #0
   3d190:	6160      	str	r0, [r4, #20]
   3d192:	f884 5077 	strb.w	r5, [r4, #119]	; 0x77
	mqtt_mutex_unlock(client);
   3d196:	4620      	mov	r0, r4
   3d198:	f7e8 f8b4 	bl	25304 <mqtt_mutex_unlock>
}
   3d19c:	4628      	mov	r0, r5
   3d19e:	b003      	add	sp, #12
   3d1a0:	bd30      	pop	{r4, r5, pc}
	client_disconnect(client, err_code);
   3d1a2:	4629      	mov	r1, r5
   3d1a4:	4620      	mov	r0, r4
   3d1a6:	f7ff ff4f 	bl	3d048 <client_disconnect>
	MQTT_STATE_INIT(client);
   3d1aa:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3d1ac:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   3d1b0:	e9c4 3307 	strd	r3, r3, [r4, #28]
   3d1b4:	e7ef      	b.n	3d196 <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   3d1b6:	f06f 050b 	mvn.w	r5, #11
   3d1ba:	e7f6      	b.n	3d1aa <mqtt_connect+0x70>
	NULL_PARAM_CHECK(client);
   3d1bc:	f06f 0515 	mvn.w	r5, #21
   3d1c0:	e7ec      	b.n	3d19c <mqtt_connect+0x62>

0003d1c2 <mqtt_publish>:
{
   3d1c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d1c4:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3d1c6:	4605      	mov	r5, r0
   3d1c8:	b330      	cbz	r0, 3d218 <mqtt_publish+0x56>
	NULL_PARAM_CHECK(param);
   3d1ca:	b329      	cbz	r1, 3d218 <mqtt_publish+0x56>
	mqtt_mutex_lock(client);
   3d1cc:	f7e8 f8c6 	bl	2535c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3d1d0:	4669      	mov	r1, sp
   3d1d2:	4628      	mov	r0, r5
   3d1d4:	f7ff ff19 	bl	3d00a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3d1d8:	69ab      	ldr	r3, [r5, #24]
   3d1da:	075b      	lsls	r3, r3, #29
   3d1dc:	d519      	bpl.n	3d212 <mqtt_publish+0x50>
	err_code = publish_encode(param, &packet);
   3d1de:	4669      	mov	r1, sp
   3d1e0:	4630      	mov	r0, r6
   3d1e2:	f7ff fd7a 	bl	3ccda <publish_encode>
	if (err_code < 0) {
   3d1e6:	1e04      	subs	r4, r0, #0
   3d1e8:	db0d      	blt.n	3d206 <mqtt_publish+0x44>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3d1ea:	e9dd 1200 	ldrd	r1, r2, [sp]
   3d1ee:	4628      	mov	r0, r5
   3d1f0:	1a52      	subs	r2, r2, r1
   3d1f2:	f7ff ff48 	bl	3d086 <client_write>
	if (err_code < 0) {
   3d1f6:	1e04      	subs	r4, r0, #0
   3d1f8:	db05      	blt.n	3d206 <mqtt_publish+0x44>
	err_code = client_write(client, param->message.payload.data,
   3d1fa:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
   3d1fe:	4628      	mov	r0, r5
   3d200:	f7ff ff41 	bl	3d086 <client_write>
   3d204:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3d206:	4628      	mov	r0, r5
   3d208:	f7e8 f87c 	bl	25304 <mqtt_mutex_unlock>
}
   3d20c:	4620      	mov	r0, r4
   3d20e:	b002      	add	sp, #8
   3d210:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   3d212:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3d216:	e7f6      	b.n	3d206 <mqtt_publish+0x44>
	NULL_PARAM_CHECK(client);
   3d218:	f06f 0415 	mvn.w	r4, #21
   3d21c:	e7f6      	b.n	3d20c <mqtt_publish+0x4a>

0003d21e <mqtt_publish_qos1_ack>:
{
   3d21e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3d220:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3d222:	4605      	mov	r5, r0
   3d224:	b1f8      	cbz	r0, 3d266 <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   3d226:	b1f1      	cbz	r1, 3d266 <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   3d228:	f7e8 f898 	bl	2535c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3d22c:	4669      	mov	r1, sp
   3d22e:	4628      	mov	r0, r5
   3d230:	f7ff feeb 	bl	3d00a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3d234:	69ab      	ldr	r3, [r5, #24]
   3d236:	075b      	lsls	r3, r3, #29
   3d238:	d512      	bpl.n	3d260 <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   3d23a:	4620      	mov	r0, r4
   3d23c:	4669      	mov	r1, sp
   3d23e:	f7ff fd88 	bl	3cd52 <publish_ack_encode>
	if (err_code < 0) {
   3d242:	1e04      	subs	r4, r0, #0
   3d244:	db06      	blt.n	3d254 <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3d246:	e9dd 1200 	ldrd	r1, r2, [sp]
   3d24a:	4628      	mov	r0, r5
   3d24c:	1a52      	subs	r2, r2, r1
   3d24e:	f7ff ff1a 	bl	3d086 <client_write>
   3d252:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3d254:	4628      	mov	r0, r5
   3d256:	f7e8 f855 	bl	25304 <mqtt_mutex_unlock>
}
   3d25a:	4620      	mov	r0, r4
   3d25c:	b003      	add	sp, #12
   3d25e:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3d260:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3d264:	e7f6      	b.n	3d254 <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   3d266:	f06f 0415 	mvn.w	r4, #21
   3d26a:	e7f6      	b.n	3d25a <mqtt_publish_qos1_ack+0x3c>

0003d26c <mqtt_disconnect>:
{
   3d26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3d26e:	4604      	mov	r4, r0
   3d270:	b310      	cbz	r0, 3d2b8 <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   3d272:	f7e8 f873 	bl	2535c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3d276:	4669      	mov	r1, sp
   3d278:	4620      	mov	r0, r4
   3d27a:	f7ff fec6 	bl	3d00a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3d27e:	69a3      	ldr	r3, [r4, #24]
   3d280:	075b      	lsls	r3, r3, #29
   3d282:	d516      	bpl.n	3d2b2 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   3d284:	4668      	mov	r0, sp
   3d286:	f7e7 fecf 	bl	25028 <disconnect_encode>
	if (err_code < 0) {
   3d28a:	1e05      	subs	r5, r0, #0
   3d28c:	db0b      	blt.n	3d2a6 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3d28e:	e9dd 1200 	ldrd	r1, r2, [sp]
   3d292:	4620      	mov	r0, r4
   3d294:	1a52      	subs	r2, r2, r1
   3d296:	f7ff fef6 	bl	3d086 <client_write>
	if (err_code < 0) {
   3d29a:	1e05      	subs	r5, r0, #0
   3d29c:	db03      	blt.n	3d2a6 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0);
   3d29e:	2100      	movs	r1, #0
   3d2a0:	4620      	mov	r0, r4
   3d2a2:	f7ff fed1 	bl	3d048 <client_disconnect>
	mqtt_mutex_unlock(client);
   3d2a6:	4620      	mov	r0, r4
   3d2a8:	f7e8 f82c 	bl	25304 <mqtt_mutex_unlock>
}
   3d2ac:	4628      	mov	r0, r5
   3d2ae:	b003      	add	sp, #12
   3d2b0:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3d2b2:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   3d2b6:	e7f6      	b.n	3d2a6 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   3d2b8:	f06f 0515 	mvn.w	r5, #21
   3d2bc:	e7f6      	b.n	3d2ac <mqtt_disconnect+0x40>

0003d2be <mqtt_subscribe>:
{
   3d2be:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3d2c0:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3d2c2:	4605      	mov	r5, r0
   3d2c4:	b1f8      	cbz	r0, 3d306 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   3d2c6:	b1f1      	cbz	r1, 3d306 <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   3d2c8:	f7e8 f848 	bl	2535c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3d2cc:	4669      	mov	r1, sp
   3d2ce:	4628      	mov	r0, r5
   3d2d0:	f7ff fe9b 	bl	3d00a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3d2d4:	69ab      	ldr	r3, [r5, #24]
   3d2d6:	075b      	lsls	r3, r3, #29
   3d2d8:	d512      	bpl.n	3d300 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   3d2da:	4620      	mov	r0, r4
   3d2dc:	4669      	mov	r1, sp
   3d2de:	f7ff fd3d 	bl	3cd5c <subscribe_encode>
	if (err_code < 0) {
   3d2e2:	1e04      	subs	r4, r0, #0
   3d2e4:	db06      	blt.n	3d2f4 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3d2e6:	e9dd 1200 	ldrd	r1, r2, [sp]
   3d2ea:	4628      	mov	r0, r5
   3d2ec:	1a52      	subs	r2, r2, r1
   3d2ee:	f7ff feca 	bl	3d086 <client_write>
   3d2f2:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3d2f4:	4628      	mov	r0, r5
   3d2f6:	f7e8 f805 	bl	25304 <mqtt_mutex_unlock>
}
   3d2fa:	4620      	mov	r0, r4
   3d2fc:	b003      	add	sp, #12
   3d2fe:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3d300:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3d304:	e7f6      	b.n	3d2f4 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   3d306:	f06f 0415 	mvn.w	r4, #21
   3d30a:	e7f6      	b.n	3d2fa <mqtt_subscribe+0x3c>

0003d30c <mqtt_unsubscribe>:
{
   3d30c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3d30e:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3d310:	4605      	mov	r5, r0
   3d312:	b1f8      	cbz	r0, 3d354 <mqtt_unsubscribe+0x48>
	NULL_PARAM_CHECK(param);
   3d314:	b1f1      	cbz	r1, 3d354 <mqtt_unsubscribe+0x48>
	mqtt_mutex_lock(client);
   3d316:	f7e8 f821 	bl	2535c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3d31a:	4669      	mov	r1, sp
   3d31c:	4628      	mov	r0, r5
   3d31e:	f7ff fe74 	bl	3d00a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3d322:	69ab      	ldr	r3, [r5, #24]
   3d324:	075b      	lsls	r3, r3, #29
   3d326:	d512      	bpl.n	3d34e <mqtt_unsubscribe+0x42>
	err_code = unsubscribe_encode(param, &packet);
   3d328:	4620      	mov	r0, r4
   3d32a:	4669      	mov	r1, sp
   3d32c:	f7ff fd4d 	bl	3cdca <unsubscribe_encode>
	if (err_code < 0) {
   3d330:	1e04      	subs	r4, r0, #0
   3d332:	db06      	blt.n	3d342 <mqtt_unsubscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3d334:	e9dd 1200 	ldrd	r1, r2, [sp]
   3d338:	4628      	mov	r0, r5
   3d33a:	1a52      	subs	r2, r2, r1
   3d33c:	f7ff fea3 	bl	3d086 <client_write>
   3d340:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3d342:	4628      	mov	r0, r5
   3d344:	f7e7 ffde 	bl	25304 <mqtt_mutex_unlock>
}
   3d348:	4620      	mov	r0, r4
   3d34a:	b003      	add	sp, #12
   3d34c:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3d34e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3d352:	e7f6      	b.n	3d342 <mqtt_unsubscribe+0x36>
	NULL_PARAM_CHECK(client);
   3d354:	f06f 0415 	mvn.w	r4, #21
   3d358:	e7f6      	b.n	3d348 <mqtt_unsubscribe+0x3c>

0003d35a <mqtt_ping>:
{
   3d35a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3d35c:	4604      	mov	r4, r0
   3d35e:	b320      	cbz	r0, 3d3aa <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   3d360:	f7e7 fffc 	bl	2535c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3d364:	4669      	mov	r1, sp
   3d366:	4620      	mov	r0, r4
   3d368:	f7ff fe4f 	bl	3d00a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3d36c:	69a3      	ldr	r3, [r4, #24]
   3d36e:	075b      	lsls	r3, r3, #29
   3d370:	d518      	bpl.n	3d3a4 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   3d372:	4668      	mov	r0, sp
   3d374:	f7e7 fe6a 	bl	2504c <ping_request_encode>
	if (err_code < 0) {
   3d378:	1e05      	subs	r5, r0, #0
   3d37a:	db0d      	blt.n	3d398 <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3d37c:	e9dd 1200 	ldrd	r1, r2, [sp]
   3d380:	4620      	mov	r0, r4
   3d382:	1a52      	subs	r2, r2, r1
   3d384:	f7ff fe7f 	bl	3d086 <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   3d388:	f994 3077 	ldrsb.w	r3, [r4, #119]	; 0x77
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3d38c:	4605      	mov	r5, r0
	if (client->unacked_ping >= INT8_MAX) {
   3d38e:	2b7f      	cmp	r3, #127	; 0x7f
   3d390:	d002      	beq.n	3d398 <mqtt_ping+0x3e>
		client->unacked_ping++;
   3d392:	3301      	adds	r3, #1
   3d394:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	mqtt_mutex_unlock(client);
   3d398:	4620      	mov	r0, r4
   3d39a:	f7e7 ffb3 	bl	25304 <mqtt_mutex_unlock>
}
   3d39e:	4628      	mov	r0, r5
   3d3a0:	b003      	add	sp, #12
   3d3a2:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3d3a4:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   3d3a8:	e7f6      	b.n	3d398 <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   3d3aa:	f06f 0515 	mvn.w	r5, #21
   3d3ae:	e7f6      	b.n	3d39e <mqtt_ping+0x44>

0003d3b0 <mqtt_live>:
{
   3d3b0:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   3d3b2:	4606      	mov	r6, r0
   3d3b4:	b300      	cbz	r0, 3d3f8 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   3d3b6:	f7e7 ffd1 	bl	2535c <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   3d3ba:	6974      	ldr	r4, [r6, #20]
   3d3bc:	f001 fbff 	bl	3ebbe <z_impl_k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline u32_t mqtt_elapsed_time_in_ms_get(u32_t last_activity)
{
	s32_t diff = k_uptime_get_32() - last_activity;
   3d3c0:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   3d3c2:	f8b6 4074 	ldrh.w	r4, [r6, #116]	; 0x74

	if (diff < 0) {
		return 0;
   3d3c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3d3ca:	b19c      	cbz	r4, 3d3f4 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   3d3cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3d3d0:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   3d3d2:	4284      	cmp	r4, r0
   3d3d4:	d80d      	bhi.n	3d3f2 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   3d3d6:	4630      	mov	r0, r6
   3d3d8:	f7ff ffbf 	bl	3d35a <mqtt_ping>
		ping_sent = true;
   3d3dc:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   3d3de:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   3d3e0:	4630      	mov	r0, r6
   3d3e2:	f7e7 ff8f 	bl	25304 <mqtt_mutex_unlock>
		return -EAGAIN;
   3d3e6:	2c00      	cmp	r4, #0
   3d3e8:	bf08      	it	eq
   3d3ea:	f06f 050a 	mvneq.w	r5, #10
}
   3d3ee:	4628      	mov	r0, r5
   3d3f0:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   3d3f2:	2400      	movs	r4, #0
	int err_code = 0;
   3d3f4:	4625      	mov	r5, r4
   3d3f6:	e7f3      	b.n	3d3e0 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   3d3f8:	f06f 0515 	mvn.w	r5, #21
   3d3fc:	e7f7      	b.n	3d3ee <mqtt_live+0x3e>

0003d3fe <mqtt_keepalive_time_left>:
{
   3d3fe:	b538      	push	{r3, r4, r5, lr}
   3d400:	4605      	mov	r5, r0
	u32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   3d402:	6944      	ldr	r4, [r0, #20]
   3d404:	f001 fbdb 	bl	3ebbe <z_impl_k_uptime_get>
	s32_t diff = k_uptime_get_32() - last_activity;
   3d408:	1b04      	subs	r4, r0, r4
	u32_t keepalive_ms = 1000U * client->keepalive;
   3d40a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   3d40e:	f8b5 2074 	ldrh.w	r2, [r5, #116]	; 0x74
		return 0;
   3d412:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   3d416:	4350      	muls	r0, r2
	if (client->keepalive == 0) {
   3d418:	b11a      	cbz	r2, 3d422 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   3d41a:	42a0      	cmp	r0, r4
   3d41c:	d904      	bls.n	3d428 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   3d41e:	1b00      	subs	r0, r0, r4
}
   3d420:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   3d422:	f04f 30ff 	mov.w	r0, #4294967295
   3d426:	e7fb      	b.n	3d420 <mqtt_keepalive_time_left+0x22>
		return 0;
   3d428:	2000      	movs	r0, #0
   3d42a:	e7f9      	b.n	3d420 <mqtt_keepalive_time_left+0x22>

0003d42c <mqtt_input>:
{
   3d42c:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3d42e:	4605      	mov	r5, r0
   3d430:	b1d0      	cbz	r0, 3d468 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   3d432:	f7e7 ff93 	bl	2535c <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   3d436:	69ab      	ldr	r3, [r5, #24]
   3d438:	079b      	lsls	r3, r3, #30
   3d43a:	d50f      	bpl.n	3d45c <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   3d43c:	6a2b      	ldr	r3, [r5, #32]
   3d43e:	b983      	cbnz	r3, 3d462 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   3d440:	4628      	mov	r0, r5
   3d442:	f7ff fd10 	bl	3ce66 <mqtt_handle_rx>
	if (err_code < 0) {
   3d446:	1e04      	subs	r4, r0, #0
   3d448:	da03      	bge.n	3d452 <mqtt_input+0x26>
		client_disconnect(client, err_code);
   3d44a:	4621      	mov	r1, r4
   3d44c:	4628      	mov	r0, r5
   3d44e:	f7ff fdfb 	bl	3d048 <client_disconnect>
	mqtt_mutex_unlock(client);
   3d452:	4628      	mov	r0, r5
   3d454:	f7e7 ff56 	bl	25304 <mqtt_mutex_unlock>
}
   3d458:	4620      	mov	r0, r4
   3d45a:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   3d45c:	f06f 040c 	mvn.w	r4, #12
   3d460:	e7f7      	b.n	3d452 <mqtt_input+0x26>
		return -EBUSY;
   3d462:	f06f 040f 	mvn.w	r4, #15
   3d466:	e7f4      	b.n	3d452 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   3d468:	f06f 0415 	mvn.w	r4, #21
   3d46c:	e7f4      	b.n	3d458 <mqtt_input+0x2c>

0003d46e <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   3d46e:	2301      	movs	r3, #1
   3d470:	f7ff be1a 	b.w	3d0a8 <read_publish_payload>

0003d474 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, u8_t *buffer,
				 size_t length)
{
   3d474:	b570      	push	{r4, r5, r6, lr}
   3d476:	4606      	mov	r6, r0
   3d478:	460c      	mov	r4, r1
	u8_t *end = buffer + length;
   3d47a:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   3d47c:	42ac      	cmp	r4, r5
   3d47e:	d301      	bcc.n	3d484 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   3d480:	2000      	movs	r0, #0
}
   3d482:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   3d484:	1b2a      	subs	r2, r5, r4
   3d486:	4621      	mov	r1, r4
   3d488:	4630      	mov	r0, r6
   3d48a:	f7ff fff0 	bl	3d46e <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   3d48e:	2800      	cmp	r0, #0
   3d490:	dbf7      	blt.n	3d482 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   3d492:	d001      	beq.n	3d498 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   3d494:	4404      	add	r4, r0
   3d496:	e7f1      	b.n	3d47c <mqtt_readall_publish_payload+0x8>
			return -EIO;
   3d498:	f06f 0004 	mvn.w	r0, #4
   3d49c:	e7f1      	b.n	3d482 <mqtt_readall_publish_payload+0xe>

0003d49e <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   3d49e:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   3d4a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
   3d4a2:	f7e7 ff7b 	bl	2539c <close>
	if (ret < 0) {
   3d4a6:	2800      	cmp	r0, #0
   3d4a8:	da04      	bge.n	3d4b4 <mqtt_client_tls_disconnect+0x16>
		return -errno;
   3d4aa:	f7ff facf 	bl	3ca4c <__errno>
   3d4ae:	6800      	ldr	r0, [r0, #0]
   3d4b0:	4240      	negs	r0, r0
	}

	return 0;
}
   3d4b2:	bd08      	pop	{r3, pc}
	return 0;
   3d4b4:	2000      	movs	r0, #0
   3d4b6:	e7fc      	b.n	3d4b2 <mqtt_client_tls_disconnect+0x14>

0003d4b8 <gpio_nrfx_write>:
{
   3d4b8:	b510      	push	{r4, lr}
	return port->config->config_info;
   3d4ba:	6804      	ldr	r4, [r0, #0]
   3d4bc:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3d4be:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3d4c0:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3d4c2:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3d4c4:	69c0      	ldr	r0, [r0, #28]
   3d4c6:	d103      	bne.n	3d4d0 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   3d4c8:	4058      	eors	r0, r3
    p_reg->OUT = value;
   3d4ca:	6060      	str	r0, [r4, #4]
}
   3d4cc:	2000      	movs	r0, #0
   3d4ce:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   3d4d0:	3300      	adds	r3, #0
   3d4d2:	f04f 0101 	mov.w	r1, #1
   3d4d6:	bf18      	it	ne
   3d4d8:	2301      	movne	r3, #1
   3d4da:	40d0      	lsrs	r0, r2
   3d4dc:	f000 0001 	and.w	r0, r0, #1
   3d4e0:	4091      	lsls	r1, r2
   3d4e2:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   3d4e4:	bf14      	ite	ne
   3d4e6:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   3d4e8:	60e1      	streq	r1, [r4, #12]
   3d4ea:	e7ef      	b.n	3d4cc <gpio_nrfx_write+0x14>

0003d4ec <gpio_nrfx_read>:
{
   3d4ec:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   3d4ee:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   3d4f0:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3d4f2:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   3d4f4:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3d4f6:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3d4f8:	2901      	cmp	r1, #1
    return p_reg->DIR;
   3d4fa:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   3d4fc:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   3d4fe:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   3d500:	ea80 0004 	eor.w	r0, r0, r4
   3d504:	ea84 0405 	eor.w	r4, r4, r5
   3d508:	ea04 0406 	and.w	r4, r4, r6
   3d50c:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   3d510:	bf1c      	itt	ne
   3d512:	40d0      	lsrne	r0, r2
   3d514:	f000 0001 	andne.w	r0, r0, #1
   3d518:	6018      	str	r0, [r3, #0]
}
   3d51a:	2000      	movs	r0, #0
   3d51c:	bd70      	pop	{r4, r5, r6, pc}

0003d51e <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3d51e:	2901      	cmp	r1, #1
{
   3d520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   3d524:	bf18      	it	ne
   3d526:	b2d4      	uxtbne	r4, r2
{
   3d528:	4606      	mov	r6, r0
		to_pin   = pin;
   3d52a:	bf12      	itee	ne
   3d52c:	4625      	movne	r5, r4
		to_pin   = 31U;
   3d52e:	251f      	moveq	r5, #31
		from_pin = 0U;
   3d530:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   3d532:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   3d536:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   3d538:	42ac      	cmp	r4, r5
   3d53a:	d902      	bls.n	3d542 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   3d53c:	2000      	movs	r0, #0
}
   3d53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   3d542:	68fb      	ldr	r3, [r7, #12]
   3d544:	fa08 f204 	lsl.w	r2, r8, r4
   3d548:	ea23 0302 	bic.w	r3, r3, r2
   3d54c:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   3d54e:	4621      	mov	r1, r4
   3d550:	4630      	mov	r0, r6
   3d552:	f7e8 f997 	bl	25884 <gpiote_pin_int_cfg>
		if (res != 0) {
   3d556:	2800      	cmp	r0, #0
   3d558:	d1f1      	bne.n	3d53e <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   3d55a:	3401      	adds	r4, #1
   3d55c:	b2e4      	uxtb	r4, r4
   3d55e:	e7eb      	b.n	3d538 <gpio_nrfx_pin_disable_callback+0x1a>

0003d560 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3d560:	2901      	cmp	r1, #1
{
   3d562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   3d566:	bf18      	it	ne
   3d568:	b2d4      	uxtbne	r4, r2
{
   3d56a:	4606      	mov	r6, r0
		to_pin   = pin;
   3d56c:	bf12      	itee	ne
   3d56e:	4625      	movne	r5, r4
		to_pin   = 31U;
   3d570:	251f      	moveq	r5, #31
		from_pin = 0U;
   3d572:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   3d574:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   3d578:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   3d57a:	42ac      	cmp	r4, r5
   3d57c:	d902      	bls.n	3d584 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   3d57e:	2000      	movs	r0, #0
}
   3d580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   3d584:	68fb      	ldr	r3, [r7, #12]
   3d586:	fa08 f204 	lsl.w	r2, r8, r4
   3d58a:	4313      	orrs	r3, r2
   3d58c:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   3d58e:	4621      	mov	r1, r4
   3d590:	4630      	mov	r0, r6
   3d592:	f7e8 f977 	bl	25884 <gpiote_pin_int_cfg>
		if (res != 0) {
   3d596:	2800      	cmp	r0, #0
   3d598:	d1f2      	bne.n	3d580 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   3d59a:	3401      	adds	r4, #1
   3d59c:	b2e4      	uxtb	r4, r4
   3d59e:	e7ec      	b.n	3d57a <gpio_nrfx_pin_enable_callback+0x1a>

0003d5a0 <flash_nrf_write_protection>:
}
   3d5a0:	2000      	movs	r0, #0
   3d5a2:	4770      	bx	lr

0003d5a4 <is_regular_addr_valid>:
{
   3d5a4:	b538      	push	{r3, r4, r5, lr}
   3d5a6:	4604      	mov	r4, r0
   3d5a8:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   3d5aa:	f001 f9cf 	bl	3e94c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   3d5ae:	4284      	cmp	r4, r0
   3d5b0:	d209      	bcs.n	3d5c6 <is_regular_addr_valid+0x22>
   3d5b2:	2c00      	cmp	r4, #0
   3d5b4:	db07      	blt.n	3d5c6 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   3d5b6:	42a8      	cmp	r0, r5
   3d5b8:	d305      	bcc.n	3d5c6 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   3d5ba:	442c      	add	r4, r5
	    len > flash_size ||
   3d5bc:	4284      	cmp	r4, r0
   3d5be:	bf8c      	ite	hi
   3d5c0:	2000      	movhi	r0, #0
   3d5c2:	2001      	movls	r0, #1
}
   3d5c4:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   3d5c6:	2000      	movs	r0, #0
   3d5c8:	e7fc      	b.n	3d5c4 <is_regular_addr_valid+0x20>

0003d5ca <flash_nrf_read>:
{
   3d5ca:	b570      	push	{r4, r5, r6, lr}
   3d5cc:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   3d5ce:	4619      	mov	r1, r3
   3d5d0:	4628      	mov	r0, r5
{
   3d5d2:	4616      	mov	r6, r2
   3d5d4:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   3d5d6:	f7ff ffe5 	bl	3d5a4 <is_regular_addr_valid>
   3d5da:	b170      	cbz	r0, 3d5fa <flash_nrf_read+0x30>
	if (!len) {
   3d5dc:	b184      	cbz	r4, 3d600 <flash_nrf_read+0x36>
	if (addr < PM_APP_ADDRESS) {
   3d5de:	f5b5 3fe1 	cmp.w	r5, #115200	; 0x1c200
		return spm_request_read(data, addr, len);
   3d5e2:	4622      	mov	r2, r4
   3d5e4:	4629      	mov	r1, r5
   3d5e6:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   3d5e8:	da03      	bge.n	3d5f2 <flash_nrf_read+0x28>
}
   3d5ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   3d5ee:	f7da bcf7 	b.w	17fe0 <spm_request_read>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3d5f2:	f001 fb6a 	bl	3ecca <memcpy>
   3d5f6:	2000      	movs	r0, #0
}
   3d5f8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3d5fa:	f06f 0015 	mvn.w	r0, #21
   3d5fe:	e7fb      	b.n	3d5f8 <flash_nrf_read+0x2e>
		return 0;
   3d600:	4620      	mov	r0, r4
   3d602:	e7f9      	b.n	3d5f8 <flash_nrf_read+0x2e>

0003d604 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   3d604:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3d608:	461d      	mov	r5, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   3d60a:	6843      	ldr	r3, [r0, #4]
{
   3d60c:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   3d60e:	691b      	ldr	r3, [r3, #16]
   3d610:	4669      	mov	r1, sp
{
   3d612:	4616      	mov	r6, r2
	api->page_layout(dev, &layout, &layout_size);
   3d614:	aa01      	add	r2, sp, #4
   3d616:	4798      	blx	r3

	while (layout_size--) {
   3d618:	e9dd 1200 	ldrd	r1, r2, [sp]
   3d61c:	2300      	movs	r3, #0
	off_t end = 0;
   3d61e:	4618      	mov	r0, r3
	off_t group_offs = 0;
   3d620:	469e      	mov	lr, r3
	size_t page_count = 0;
   3d622:	469c      	mov	ip, r3
   3d624:	3a01      	subs	r2, #1
	while (layout_size--) {
   3d626:	1c57      	adds	r7, r2, #1
   3d628:	d102      	bne.n	3d630 <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   3d62a:	f06f 0015 	mvn.w	r0, #21
   3d62e:	e01a      	b.n	3d666 <flash_get_page_info+0x62>
		if (use_addr) {
   3d630:	f8d1 8000 	ldr.w	r8, [r1]
   3d634:	b1d6      	cbz	r6, 3d66c <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   3d636:	684f      	ldr	r7, [r1, #4]
   3d638:	fb07 0008 	mla	r0, r7, r8, r0
		if (offs < end) {
   3d63c:	42a0      	cmp	r0, r4
   3d63e:	f102 37ff 	add.w	r7, r2, #4294967295
   3d642:	dd18      	ble.n	3d676 <flash_get_page_info+0x72>
   3d644:	9201      	str	r2, [sp, #4]
   3d646:	b103      	cbz	r3, 3d64a <flash_get_page_info+0x46>
   3d648:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   3d64a:	9b00      	ldr	r3, [sp, #0]
   3d64c:	685b      	ldr	r3, [r3, #4]
   3d64e:	606b      	str	r3, [r5, #4]
			if (use_addr) {
   3d650:	b176      	cbz	r6, 3d670 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   3d652:	eba4 040e 	sub.w	r4, r4, lr
   3d656:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   3d65a:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   3d65c:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   3d660:	4464      	add	r4, ip
			info->start_offset = group_offs +
   3d662:	602b      	str	r3, [r5, #0]
			info->index = page_count + num_in_group;
   3d664:	60ac      	str	r4, [r5, #8]
}
   3d666:	b002      	add	sp, #8
   3d668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   3d66c:	4440      	add	r0, r8
   3d66e:	e7e5      	b.n	3d63c <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   3d670:	eba4 040c 	sub.w	r4, r4, ip
   3d674:	e7f1      	b.n	3d65a <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   3d676:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   3d678:	44c4      	add	ip, r8
		group_offs += layout->pages_count * layout->pages_size;
   3d67a:	fb03 ee08 	mla	lr, r3, r8, lr
		layout++;
   3d67e:	3108      	adds	r1, #8
   3d680:	2301      	movs	r3, #1
   3d682:	463a      	mov	r2, r7
   3d684:	e7cf      	b.n	3d626 <flash_get_page_info+0x22>

0003d686 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
	return flash_get_page_info(dev, offs, true, info);
   3d686:	4613      	mov	r3, r2
   3d688:	2201      	movs	r2, #1
   3d68a:	f7ff bfbb 	b.w	3d604 <flash_get_page_info>

0003d68e <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   3d68e:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   3d690:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   3d692:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   3d694:	689b      	ldr	r3, [r3, #8]
	if (data->int_driven->disable_tx_irq &&
   3d696:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   3d698:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   3d69a:	b159      	cbz	r1, 3d6b4 <uarte_nrfx_isr_int+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d69c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3d6a0:	b141      	cbz	r1, 3d6b4 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   3d6a2:	f44f 7180 	mov.w	r1, #256	; 0x100
   3d6a6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d6aa:	2101      	movs	r1, #1
   3d6ac:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   3d6ae:	2300      	movs	r3, #0
   3d6b0:	7393      	strb	r3, [r2, #14]
		return;
   3d6b2:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d6b4:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   3d6b8:	b111      	cbz	r1, 3d6c0 <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d6ba:	2100      	movs	r1, #0
   3d6bc:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   3d6c0:	6813      	ldr	r3, [r2, #0]
   3d6c2:	b10b      	cbz	r3, 3d6c8 <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   3d6c4:	6850      	ldr	r0, [r2, #4]
   3d6c6:	4718      	bx	r3
}
   3d6c8:	4770      	bx	lr

0003d6ca <uarte_nrfx_config_get>:
{
   3d6ca:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   3d6cc:	6882      	ldr	r2, [r0, #8]
   3d6ce:	e892 0003 	ldmia.w	r2, {r0, r1}
   3d6d2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3d6d6:	2000      	movs	r0, #0
   3d6d8:	4770      	bx	lr

0003d6da <uarte_nrfx_err_check>:
	return dev->config->config_info;
   3d6da:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3d6dc:	689b      	ldr	r3, [r3, #8]
   3d6de:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3d6e0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3d6e4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3d6e8:	4770      	bx	lr

0003d6ea <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   3d6ea:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   3d6ec:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   3d6ee:	689b      	ldr	r3, [r3, #8]
   3d6f0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d6f2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3d6f6:	b138      	cbz	r0, 3d708 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   3d6f8:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d6fa:	2000      	movs	r0, #0
   3d6fc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d6fe:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d700:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d704:	601a      	str	r2, [r3, #0]
	return 0;
   3d706:	4770      	bx	lr
		return -1;
   3d708:	f04f 30ff 	mov.w	r0, #4294967295
}
   3d70c:	4770      	bx	lr

0003d70e <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d70e:	2200      	movs	r2, #0
	return dev->config->config_info;
   3d710:	6803      	ldr	r3, [r0, #0]
{
   3d712:	b082      	sub	sp, #8
	return config->uarte_regs;
   3d714:	689b      	ldr	r3, [r3, #8]
{
   3d716:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   3d71a:	681b      	ldr	r3, [r3, #0]
   3d71c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3d720:	f10d 0207 	add.w	r2, sp, #7
   3d724:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3d728:	2201      	movs	r2, #1
   3d72a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d72e:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d730:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3d734:	2900      	cmp	r1, #0
   3d736:	d0fb      	beq.n	3d730 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d738:	60da      	str	r2, [r3, #12]
}
   3d73a:	b002      	add	sp, #8
   3d73c:	4770      	bx	lr

0003d73e <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   3d73e:	6803      	ldr	r3, [r0, #0]
{
   3d740:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   3d742:	689b      	ldr	r3, [r3, #8]
   3d744:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d746:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3d74a:	b1bb      	cbz	r3, 3d77c <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   3d74c:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   3d74e:	68ab      	ldr	r3, [r5, #8]
   3d750:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d752:	2300      	movs	r3, #0
   3d754:	4290      	cmp	r0, r2
   3d756:	bfa8      	it	ge
   3d758:	4610      	movge	r0, r2
   3d75a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   3d75e:	68aa      	ldr	r2, [r5, #8]
   3d760:	4283      	cmp	r3, r0
   3d762:	6892      	ldr	r2, [r2, #8]
   3d764:	db06      	blt.n	3d774 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d766:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3d768:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3d76c:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d770:	60a3      	str	r3, [r4, #8]
}
   3d772:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   3d774:	5cce      	ldrb	r6, [r1, r3]
   3d776:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   3d778:	3301      	adds	r3, #1
   3d77a:	e7f0      	b.n	3d75e <uarte_nrfx_fifo_fill+0x20>
		return 0;
   3d77c:	4618      	mov	r0, r3
   3d77e:	e7f8      	b.n	3d772 <uarte_nrfx_fifo_fill+0x34>

0003d780 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   3d780:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3d782:	689b      	ldr	r3, [r3, #8]
   3d784:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d786:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3d78a:	b143      	cbz	r3, 3d79e <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   3d78c:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d78e:	2000      	movs	r0, #0
   3d790:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d794:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   3d796:	7b1b      	ldrb	r3, [r3, #12]
   3d798:	700b      	strb	r3, [r1, #0]
   3d79a:	6010      	str	r0, [r2, #0]
   3d79c:	4770      	bx	lr
	int num_rx = 0;
   3d79e:	4618      	mov	r0, r3
}
   3d7a0:	4770      	bx	lr

0003d7a2 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   3d7a2:	2100      	movs	r1, #0
	return dev->config->config_info;
   3d7a4:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   3d7a6:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   3d7a8:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   3d7aa:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   3d7ac:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   3d7ae:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   3d7b0:	f44f 7280 	mov.w	r2, #256	; 0x100
   3d7b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3d7b8:	4770      	bx	lr

0003d7ba <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   3d7ba:	2201      	movs	r2, #1
   3d7bc:	6883      	ldr	r3, [r0, #8]
   3d7be:	689b      	ldr	r3, [r3, #8]
   3d7c0:	739a      	strb	r2, [r3, #14]
}
   3d7c2:	4770      	bx	lr

0003d7c4 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   3d7c4:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3d7c6:	689b      	ldr	r3, [r3, #8]
   3d7c8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d7ca:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   3d7ce:	b118      	cbz	r0, 3d7d8 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   3d7d0:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   3d7d4:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   3d7d8:	4770      	bx	lr

0003d7da <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   3d7da:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3d7dc:	689b      	ldr	r3, [r3, #8]
   3d7de:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d7e0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   3d7e4:	3000      	adds	r0, #0
   3d7e6:	bf18      	it	ne
   3d7e8:	2001      	movne	r0, #1
   3d7ea:	4770      	bx	lr

0003d7ec <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   3d7ec:	2210      	movs	r2, #16
	return dev->config->config_info;
   3d7ee:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3d7f0:	689b      	ldr	r3, [r3, #8]
   3d7f2:	681b      	ldr	r3, [r3, #0]
   3d7f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3d7f8:	4770      	bx	lr

0003d7fa <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   3d7fa:	2210      	movs	r2, #16
	return dev->config->config_info;
   3d7fc:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3d7fe:	689b      	ldr	r3, [r3, #8]
   3d800:	681b      	ldr	r3, [r3, #0]
   3d802:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3d806:	4770      	bx	lr

0003d808 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   3d808:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   3d80c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3d80e:	689b      	ldr	r3, [r3, #8]
   3d810:	681b      	ldr	r3, [r3, #0]
   3d812:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3d816:	4770      	bx	lr

0003d818 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   3d818:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   3d81c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3d81e:	689b      	ldr	r3, [r3, #8]
   3d820:	681b      	ldr	r3, [r3, #0]
   3d822:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3d826:	4770      	bx	lr

0003d828 <uarte_nrfx_irq_update>:
}
   3d828:	2001      	movs	r0, #1
   3d82a:	4770      	bx	lr

0003d82c <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   3d82c:	6883      	ldr	r3, [r0, #8]
   3d82e:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   3d830:	e9c3 1200 	strd	r1, r2, [r3]
}
   3d834:	4770      	bx	lr

0003d836 <uarte_nrfx_irq_is_pending>:
{
   3d836:	b508      	push	{r3, lr}
	return dev->config->config_info;
   3d838:	6803      	ldr	r3, [r0, #0]
{
   3d83a:	4602      	mov	r2, r0
	return config->uarte_regs;
   3d83c:	689b      	ldr	r3, [r3, #8]
   3d83e:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   3d840:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   3d844:	05db      	lsls	r3, r3, #23
   3d846:	d405      	bmi.n	3d854 <uarte_nrfx_irq_is_pending+0x1e>
   3d848:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   3d84c:	f010 0010 	ands.w	r0, r0, #16
   3d850:	d106      	bne.n	3d860 <uarte_nrfx_irq_is_pending+0x2a>
}
   3d852:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   3d854:	f7ff ffb6 	bl	3d7c4 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   3d858:	2800      	cmp	r0, #0
   3d85a:	d0f5      	beq.n	3d848 <uarte_nrfx_irq_is_pending+0x12>
		||
   3d85c:	2001      	movs	r0, #1
   3d85e:	e7f8      	b.n	3d852 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   3d860:	4610      	mov	r0, r2
   3d862:	f7ff ffba 	bl	3d7da <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   3d866:	3000      	adds	r0, #0
   3d868:	bf18      	it	ne
   3d86a:	2001      	movne	r0, #1
   3d86c:	e7f1      	b.n	3d852 <uarte_nrfx_irq_is_pending+0x1c>

0003d86e <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   3d86e:	2000      	movs	r0, #0
   3d870:	4770      	bx	lr

0003d872 <parse_hex4>:
    for (i = 0; i < 4; i++)
   3d872:	2200      	movs	r2, #0
    unsigned int h = 0;
   3d874:	4613      	mov	r3, r2
{
   3d876:	b510      	push	{r4, lr}
        if ((input[i] >= '0') && (input[i] <= '9'))
   3d878:	5c81      	ldrb	r1, [r0, r2]
   3d87a:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
   3d87e:	2c09      	cmp	r4, #9
   3d880:	d80a      	bhi.n	3d898 <parse_hex4+0x26>
            h += (unsigned int) input[i] - '0';
   3d882:	3b30      	subs	r3, #48	; 0x30
        if (i < 3)
   3d884:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   3d886:	440b      	add	r3, r1
    for (i = 0; i < 4; i++)
   3d888:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   3d88c:	bf18      	it	ne
   3d88e:	011b      	lslne	r3, r3, #4
    for (i = 0; i < 4; i++)
   3d890:	2a04      	cmp	r2, #4
   3d892:	d1f1      	bne.n	3d878 <parse_hex4+0x6>
}
   3d894:	4618      	mov	r0, r3
   3d896:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   3d898:	f1a1 0441 	sub.w	r4, r1, #65	; 0x41
   3d89c:	2c05      	cmp	r4, #5
   3d89e:	d801      	bhi.n	3d8a4 <parse_hex4+0x32>
            h += (unsigned int) 10 + input[i] - 'A';
   3d8a0:	3b37      	subs	r3, #55	; 0x37
   3d8a2:	e7ef      	b.n	3d884 <parse_hex4+0x12>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   3d8a4:	f1a1 0461 	sub.w	r4, r1, #97	; 0x61
   3d8a8:	2c05      	cmp	r4, #5
   3d8aa:	d801      	bhi.n	3d8b0 <parse_hex4+0x3e>
            h += (unsigned int) 10 + input[i] - 'a';
   3d8ac:	3b57      	subs	r3, #87	; 0x57
   3d8ae:	e7e9      	b.n	3d884 <parse_hex4+0x12>
            return 0;
   3d8b0:	2300      	movs	r3, #0
   3d8b2:	e7ef      	b.n	3d894 <parse_hex4+0x22>

0003d8b4 <buffer_skip_whitespace>:
{
   3d8b4:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   3d8b6:	b140      	cbz	r0, 3d8ca <buffer_skip_whitespace+0x16>
   3d8b8:	6801      	ldr	r1, [r0, #0]
   3d8ba:	b171      	cbz	r1, 3d8da <buffer_skip_whitespace+0x26>
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   3d8bc:	6842      	ldr	r2, [r0, #4]
   3d8be:	6883      	ldr	r3, [r0, #8]
   3d8c0:	4293      	cmp	r3, r2
   3d8c2:	d206      	bcs.n	3d8d2 <buffer_skip_whitespace+0x1e>
   3d8c4:	5ccc      	ldrb	r4, [r1, r3]
   3d8c6:	2c20      	cmp	r4, #32
   3d8c8:	d900      	bls.n	3d8cc <buffer_skip_whitespace+0x18>
}
   3d8ca:	bd10      	pop	{r4, pc}
       buffer->offset++;
   3d8cc:	3301      	adds	r3, #1
   3d8ce:	6083      	str	r3, [r0, #8]
   3d8d0:	e7f5      	b.n	3d8be <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   3d8d2:	d1fa      	bne.n	3d8ca <buffer_skip_whitespace+0x16>
        buffer->offset--;
   3d8d4:	3a01      	subs	r2, #1
   3d8d6:	6082      	str	r2, [r0, #8]
   3d8d8:	e7f7      	b.n	3d8ca <buffer_skip_whitespace+0x16>
        return NULL;
   3d8da:	4608      	mov	r0, r1
   3d8dc:	e7f5      	b.n	3d8ca <buffer_skip_whitespace+0x16>

0003d8de <update_offset>:
{
   3d8de:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   3d8e0:	4604      	mov	r4, r0
   3d8e2:	b140      	cbz	r0, 3d8f6 <update_offset+0x18>
   3d8e4:	6803      	ldr	r3, [r0, #0]
   3d8e6:	b133      	cbz	r3, 3d8f6 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   3d8e8:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   3d8ea:	4418      	add	r0, r3
   3d8ec:	f7df fc1a 	bl	1d124 <strlen>
   3d8f0:	68a3      	ldr	r3, [r4, #8]
   3d8f2:	4418      	add	r0, r3
   3d8f4:	60a0      	str	r0, [r4, #8]
}
   3d8f6:	bd10      	pop	{r4, pc}

0003d8f8 <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   3d8f8:	b161      	cbz	r1, 3d914 <add_item_to_array+0x1c>
   3d8fa:	b160      	cbz	r0, 3d916 <add_item_to_array+0x1e>
    child = array->child;
   3d8fc:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   3d8fe:	b91b      	cbnz	r3, 3d908 <add_item_to_array+0x10>
        array->child = item;
   3d900:	6081      	str	r1, [r0, #8]
    item->prev = prev;
   3d902:	2001      	movs	r0, #1
   3d904:	4770      	bx	lr
        while (child->next)
   3d906:	4613      	mov	r3, r2
   3d908:	681a      	ldr	r2, [r3, #0]
   3d90a:	2a00      	cmp	r2, #0
   3d90c:	d1fb      	bne.n	3d906 <add_item_to_array+0xe>
    prev->next = item;
   3d90e:	6019      	str	r1, [r3, #0]
    item->prev = prev;
   3d910:	604b      	str	r3, [r1, #4]
   3d912:	e7f6      	b.n	3d902 <add_item_to_array+0xa>
        return false;
   3d914:	4608      	mov	r0, r1
}
   3d916:	4770      	bx	lr

0003d918 <cJSON_New_Item.isra.1>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   3d918:	b510      	push	{r4, lr}
   3d91a:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   3d91c:	2028      	movs	r0, #40	; 0x28
   3d91e:	4798      	blx	r3
    if (node)
   3d920:	4604      	mov	r4, r0
   3d922:	b118      	cbz	r0, 3d92c <cJSON_New_Item.isra.1+0x14>
__ssp_bos_icheck3(memset, void *, int)
   3d924:	2228      	movs	r2, #40	; 0x28
   3d926:	2100      	movs	r1, #0
   3d928:	f001 f9ef 	bl	3ed0a <memset>
}
   3d92c:	4620      	mov	r0, r4
   3d92e:	bd10      	pop	{r4, pc}

0003d930 <ensure>:
{
   3d930:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   3d932:	4604      	mov	r4, r0
   3d934:	b1b8      	cbz	r0, 3d966 <ensure+0x36>
   3d936:	6805      	ldr	r5, [r0, #0]
   3d938:	b165      	cbz	r5, 3d954 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   3d93a:	6843      	ldr	r3, [r0, #4]
   3d93c:	b113      	cbz	r3, 3d944 <ensure+0x14>
   3d93e:	6882      	ldr	r2, [r0, #8]
   3d940:	4293      	cmp	r3, r2
   3d942:	d910      	bls.n	3d966 <ensure+0x36>
    if (needed > INT_MAX)
   3d944:	2900      	cmp	r1, #0
   3d946:	db0e      	blt.n	3d966 <ensure+0x36>
    needed += p->offset + 1;
   3d948:	68a2      	ldr	r2, [r4, #8]
   3d94a:	1c4e      	adds	r6, r1, #1
   3d94c:	4416      	add	r6, r2
    if (needed <= p->length)
   3d94e:	42b3      	cmp	r3, r6
   3d950:	d302      	bcc.n	3d958 <ensure+0x28>
        return p->buffer + p->offset;
   3d952:	4415      	add	r5, r2
}
   3d954:	4628      	mov	r0, r5
   3d956:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   3d958:	6923      	ldr	r3, [r4, #16]
   3d95a:	b923      	cbnz	r3, 3d966 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   3d95c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
   3d960:	d303      	bcc.n	3d96a <ensure+0x3a>
        if (needed <= INT_MAX)
   3d962:	2e00      	cmp	r6, #0
   3d964:	da0f      	bge.n	3d986 <ensure+0x56>
        return NULL;
   3d966:	2500      	movs	r5, #0
   3d968:	e7f4      	b.n	3d954 <ensure+0x24>
        newsize = needed * 2;
   3d96a:	0076      	lsls	r6, r6, #1
    if (p->hooks.reallocate != NULL)
   3d96c:	6a23      	ldr	r3, [r4, #32]
   3d96e:	b16b      	cbz	r3, 3d98c <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   3d970:	4628      	mov	r0, r5
   3d972:	4631      	mov	r1, r6
   3d974:	4798      	blx	r3
        if (newbuffer == NULL)
   3d976:	4605      	mov	r5, r0
   3d978:	b9b0      	cbnz	r0, 3d9a8 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   3d97a:	69e3      	ldr	r3, [r4, #28]
   3d97c:	6820      	ldr	r0, [r4, #0]
   3d97e:	4798      	blx	r3
            p->buffer = NULL;
   3d980:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   3d984:	e7e6      	b.n	3d954 <ensure+0x24>
            newsize = INT_MAX;
   3d986:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   3d98a:	e7ef      	b.n	3d96c <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   3d98c:	69a3      	ldr	r3, [r4, #24]
   3d98e:	4630      	mov	r0, r6
   3d990:	4798      	blx	r3
        if (!newbuffer)
   3d992:	4605      	mov	r5, r0
   3d994:	2800      	cmp	r0, #0
   3d996:	d0f0      	beq.n	3d97a <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   3d998:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3d99a:	6821      	ldr	r1, [r4, #0]
   3d99c:	3201      	adds	r2, #1
   3d99e:	f001 f994 	bl	3ecca <memcpy>
        p->hooks.deallocate(p->buffer);
   3d9a2:	69e3      	ldr	r3, [r4, #28]
   3d9a4:	6820      	ldr	r0, [r4, #0]
   3d9a6:	4798      	blx	r3
    return newbuffer + p->offset;
   3d9a8:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   3d9aa:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   3d9ae:	441d      	add	r5, r3
   3d9b0:	e7d0      	b.n	3d954 <ensure+0x24>

0003d9b2 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   3d9b2:	2200      	movs	r2, #0
   3d9b4:	4611      	mov	r1, r2
   3d9b6:	f7e8 bf35 	b.w	26824 <cJSON_ParseWithOpts>

0003d9ba <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   3d9ba:	2100      	movs	r1, #0
   3d9bc:	f7e8 be60 	b.w	26680 <print.constprop.14>

0003d9c0 <cJSON_GetArraySize>:
    if (array == NULL)
   3d9c0:	b110      	cbz	r0, 3d9c8 <cJSON_GetArraySize+0x8>
    child = array->child;
   3d9c2:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   3d9c4:	2000      	movs	r0, #0
    while(child != NULL)
   3d9c6:	b903      	cbnz	r3, 3d9ca <cJSON_GetArraySize+0xa>
}
   3d9c8:	4770      	bx	lr
        size++;
   3d9ca:	3001      	adds	r0, #1
        child = child->next;
   3d9cc:	681b      	ldr	r3, [r3, #0]
   3d9ce:	e7fa      	b.n	3d9c6 <cJSON_GetArraySize+0x6>

0003d9d0 <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   3d9d0:	2200      	movs	r2, #0
   3d9d2:	f7e8 bbe5 	b.w	261a0 <get_object_item>

0003d9d6 <cJSON_GetObjectItemCaseSensitive>:
    return get_object_item(object, string, true);
   3d9d6:	2201      	movs	r2, #1
   3d9d8:	f7e8 bbe2 	b.w	261a0 <get_object_item>

0003d9dc <cJSON_HasObjectItem>:
{
   3d9dc:	b508      	push	{r3, lr}
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
   3d9de:	f7ff fff7 	bl	3d9d0 <cJSON_GetObjectItem>
}
   3d9e2:	3000      	adds	r0, #0
   3d9e4:	bf18      	it	ne
   3d9e6:	2001      	movne	r0, #1
   3d9e8:	bd08      	pop	{r3, pc}

0003d9ea <cJSON_AddItemToArray>:
    add_item_to_array(array, item);
   3d9ea:	f7ff bf85 	b.w	3d8f8 <add_item_to_array>

0003d9ee <cJSON_AddItemToObject>:
    add_item_to_object(object, string, item, &global_hooks, false);
   3d9ee:	2300      	movs	r3, #0
   3d9f0:	f7e8 bea8 	b.w	26744 <add_item_to_object.constprop.12>

0003d9f4 <cJSON_DetachItemViaPointer>:
    if ((parent == NULL) || (item == NULL))
   3d9f4:	b180      	cbz	r0, 3da18 <cJSON_DetachItemViaPointer+0x24>
   3d9f6:	b169      	cbz	r1, 3da14 <cJSON_DetachItemViaPointer+0x20>
    if (item->prev != NULL)
   3d9f8:	684a      	ldr	r2, [r1, #4]
   3d9fa:	b10a      	cbz	r2, 3da00 <cJSON_DetachItemViaPointer+0xc>
   3d9fc:	680b      	ldr	r3, [r1, #0]
        item->prev->next = item->next;
   3d9fe:	6013      	str	r3, [r2, #0]
    if (item->next != NULL)
   3da00:	680b      	ldr	r3, [r1, #0]
   3da02:	b103      	cbz	r3, 3da06 <cJSON_DetachItemViaPointer+0x12>
        item->next->prev = item->prev;
   3da04:	605a      	str	r2, [r3, #4]
    if (item == parent->child)
   3da06:	6882      	ldr	r2, [r0, #8]
   3da08:	428a      	cmp	r2, r1
        parent->child = item->next;
   3da0a:	bf08      	it	eq
   3da0c:	6083      	streq	r3, [r0, #8]
    item->prev = NULL;
   3da0e:	2300      	movs	r3, #0
    item->next = NULL;
   3da10:	e9c1 3300 	strd	r3, r3, [r1]
}
   3da14:	4608      	mov	r0, r1
   3da16:	4770      	bx	lr
        return NULL;
   3da18:	4601      	mov	r1, r0
   3da1a:	e7fb      	b.n	3da14 <cJSON_DetachItemViaPointer+0x20>

0003da1c <cJSON_DetachItemFromObject>:
{
   3da1c:	b510      	push	{r4, lr}
   3da1e:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   3da20:	f7ff ffd6 	bl	3d9d0 <cJSON_GetObjectItem>
    return cJSON_DetachItemViaPointer(object, to_detach);
   3da24:	4601      	mov	r1, r0
   3da26:	4620      	mov	r0, r4
}
   3da28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   3da2c:	f7ff bfe2 	b.w	3d9f4 <cJSON_DetachItemViaPointer>

0003da30 <cJSON_IsTrue>:
    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
    if (item == NULL)
   3da30:	b118      	cbz	r0, 3da3a <cJSON_IsTrue+0xa>
    {
        return false;
    }

    return (item->type & 0xff) == cJSON_True;
   3da32:	7b00      	ldrb	r0, [r0, #12]
   3da34:	1e83      	subs	r3, r0, #2
   3da36:	4258      	negs	r0, r3
   3da38:	4158      	adcs	r0, r3
}
   3da3a:	4770      	bx	lr

0003da3c <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
   3da3c:	b120      	cbz	r0, 3da48 <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
   3da3e:	68c0      	ldr	r0, [r0, #12]
   3da40:	f010 0003 	ands.w	r0, r0, #3
   3da44:	bf18      	it	ne
   3da46:	2001      	movne	r0, #1
}
   3da48:	4770      	bx	lr

0003da4a <cJSON_IsNull>:
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
{
    if (item == NULL)
   3da4a:	b118      	cbz	r0, 3da54 <cJSON_IsNull+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_NULL;
   3da4c:	7b00      	ldrb	r0, [r0, #12]
   3da4e:	1f03      	subs	r3, r0, #4
   3da50:	4258      	negs	r0, r3
   3da52:	4158      	adcs	r0, r3
}
   3da54:	4770      	bx	lr

0003da56 <cJSON_IsNumber>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
   3da56:	b120      	cbz	r0, 3da62 <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
   3da58:	7b00      	ldrb	r0, [r0, #12]
   3da5a:	f1a0 0308 	sub.w	r3, r0, #8
   3da5e:	4258      	negs	r0, r3
   3da60:	4158      	adcs	r0, r3
}
   3da62:	4770      	bx	lr

0003da64 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   3da64:	b120      	cbz	r0, 3da70 <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   3da66:	7b00      	ldrb	r0, [r0, #12]
   3da68:	f1a0 0310 	sub.w	r3, r0, #16
   3da6c:	4258      	negs	r0, r3
   3da6e:	4158      	adcs	r0, r3
}
   3da70:	4770      	bx	lr

0003da72 <cJSON_GetStringValue>:
CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item) {
   3da72:	b508      	push	{r3, lr}
   3da74:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) {
   3da76:	f7ff fff5 	bl	3da64 <cJSON_IsString>
   3da7a:	b100      	cbz	r0, 3da7e <cJSON_GetStringValue+0xc>
    return item->valuestring;
   3da7c:	6910      	ldr	r0, [r2, #16]
}
   3da7e:	bd08      	pop	{r3, pc}

0003da80 <cJSON_IsObject>:
    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
    if (item == NULL)
   3da80:	b120      	cbz	r0, 3da8c <cJSON_IsObject+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Object;
   3da82:	7b00      	ldrb	r0, [r0, #12]
   3da84:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
   3da88:	4258      	negs	r0, r3
   3da8a:	4158      	adcs	r0, r3
}
   3da8c:	4770      	bx	lr

0003da8e <free_fn_hook>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   3da8e:	f000 bf7b 	b.w	3e988 <k_free>

0003da92 <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   3da92:	f7f9 b9b9 	b.w	36e08 <k_malloc>

0003da96 <bsdlib_shutdown>:

int bsdlib_shutdown(void)
{
   3da96:	b508      	push	{r3, lr}
	bsd_shutdown();
   3da98:	f7f2 fbd6 	bl	30248 <bsd_shutdown>

	return 0;
}
   3da9c:	2000      	movs	r0, #0
   3da9e:	bd08      	pop	{r3, pc}

0003daa0 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3daa0:	4668      	mov	r0, sp
   3daa2:	f020 0107 	bic.w	r1, r0, #7
   3daa6:	468d      	mov	sp, r1
   3daa8:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   3daaa:	f7f2 fd8f 	bl	305cc <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3daae:	f7e6 fa39 	bl	23f24 <_arch_isr_direct_pm>
   3dab2:	f7e6 f921 	bl	23cf8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3dab6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3daba:	4685      	mov	sp, r0
   3dabc:	4770      	bx	lr

0003dabe <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   3dabe:	4668      	mov	r0, sp
   3dac0:	f020 0107 	bic.w	r1, r0, #7
   3dac4:	468d      	mov	sp, r1
   3dac6:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   3dac8:	f7f3 f984 	bl	30dd4 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3dacc:	f7e6 fa2a 	bl	23f24 <_arch_isr_direct_pm>
   3dad0:	f7e6 f912 	bl	23cf8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   3dad4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3dad8:	4685      	mov	sp, r0
   3dada:	4770      	bx	lr

0003dadc <trace_task_create>:
{
   3dadc:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   3dade:	201d      	movs	r0, #29
   3dae0:	2200      	movs	r2, #0
   3dae2:	2106      	movs	r1, #6
   3dae4:	f7e6 f9ec 	bl	23ec0 <z_arm_irq_priority_set>
}
   3dae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   3daec:	201d      	movs	r0, #29
   3daee:	f7e6 b9d7 	b.w	23ea0 <arch_irq_enable>

0003daf2 <read_task_create>:
{
   3daf2:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   3daf4:	201c      	movs	r0, #28
   3daf6:	2200      	movs	r2, #0
   3daf8:	2106      	movs	r1, #6
   3dafa:	f7e6 f9e1 	bl	23ec0 <z_arm_irq_priority_set>
}
   3dafe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   3db02:	201c      	movs	r0, #28
   3db04:	f7e6 b9cc 	b.w	23ea0 <arch_irq_enable>

0003db08 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   3db08:	2000      	movs	r0, #0
   3db0a:	4770      	bx	lr

0003db0c <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   3db0c:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   3db10:	bf18      	it	ne
   3db12:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   3db14:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   3db16:	bf48      	it	mi
   3db18:	f043 0308 	orrmi.w	r3, r3, #8
}
   3db1c:	4618      	mov	r0, r3
   3db1e:	4770      	bx	lr

0003db20 <z_to_nrf_family>:
	switch (z_family) {
   3db20:	2803      	cmp	r0, #3
   3db22:	d00f      	beq.n	3db44 <z_to_nrf_family+0x24>
   3db24:	d808      	bhi.n	3db38 <z_to_nrf_family+0x18>
   3db26:	2801      	cmp	r0, #1
   3db28:	d00e      	beq.n	3db48 <z_to_nrf_family+0x28>
   3db2a:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   3db2c:	bf08      	it	eq
   3db2e:	200a      	moveq	r0, #10
   3db30:	bf18      	it	ne
   3db32:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   3db36:	4770      	bx	lr
	switch (z_family) {
   3db38:	2866      	cmp	r0, #102	; 0x66
   3db3a:	d006      	beq.n	3db4a <z_to_nrf_family+0x2a>
   3db3c:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   3db3e:	bf08      	it	eq
   3db40:	2001      	moveq	r0, #1
   3db42:	e7f5      	b.n	3db30 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   3db44:	2005      	movs	r0, #5
   3db46:	4770      	bx	lr
		return NRF_AF_INET;
   3db48:	2002      	movs	r0, #2
}
   3db4a:	4770      	bx	lr

0003db4c <z_to_nrf_protocol>:
	switch (proto) {
   3db4c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   3db50:	d01d      	beq.n	3db8e <z_to_nrf_protocol+0x42>
   3db52:	dc08      	bgt.n	3db66 <z_to_nrf_protocol+0x1a>
   3db54:	2806      	cmp	r0, #6
   3db56:	d01d      	beq.n	3db94 <z_to_nrf_protocol+0x48>
   3db58:	2811      	cmp	r0, #17
   3db5a:	d01d      	beq.n	3db98 <z_to_nrf_protocol+0x4c>
   3db5c:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   3db5e:	bf18      	it	ne
   3db60:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   3db64:	4770      	bx	lr
	switch (proto) {
   3db66:	f240 2301 	movw	r3, #513	; 0x201
   3db6a:	4298      	cmp	r0, r3
   3db6c:	d015      	beq.n	3db9a <z_to_nrf_protocol+0x4e>
   3db6e:	dc06      	bgt.n	3db7e <z_to_nrf_protocol+0x32>
   3db70:	f240 1311 	movw	r3, #273	; 0x111
   3db74:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   3db76:	bf08      	it	eq
   3db78:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   3db7c:	e7ef      	b.n	3db5e <z_to_nrf_protocol+0x12>
	switch (proto) {
   3db7e:	f240 2302 	movw	r3, #514	; 0x202
   3db82:	4298      	cmp	r0, r3
   3db84:	d009      	beq.n	3db9a <z_to_nrf_protocol+0x4e>
   3db86:	f240 2303 	movw	r3, #515	; 0x203
   3db8a:	4298      	cmp	r0, r3
   3db8c:	e7e7      	b.n	3db5e <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   3db8e:	f44f 7082 	mov.w	r0, #260	; 0x104
   3db92:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   3db94:	2001      	movs	r0, #1
   3db96:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   3db98:	2002      	movs	r0, #2
}
   3db9a:	4770      	bx	lr

0003db9c <nrf91_bsdlib_socket_offload_init>:
}
   3db9c:	2000      	movs	r0, #0
   3db9e:	4770      	bx	lr

0003dba0 <nrf91_socket_offload_freeaddrinfo>:
{
   3dba0:	b538      	push	{r3, r4, r5, lr}
   3dba2:	4604      	mov	r4, r0
	while (next != NULL) {
   3dba4:	b904      	cbnz	r4, 3dba8 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   3dba6:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   3dba8:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   3dbaa:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   3dbac:	f000 feec 	bl	3e988 <k_free>
		k_free(this);
   3dbb0:	4620      	mov	r0, r4
   3dbb2:	f000 fee9 	bl	3e988 <k_free>
		next = next->ai_next;
   3dbb6:	462c      	mov	r4, r5
   3dbb8:	e7f4      	b.n	3dba4 <nrf91_socket_offload_freeaddrinfo+0x4>

0003dbba <z_to_nrf_addrinfo_hints>:
{
   3dbba:	b538      	push	{r3, r4, r5, lr}
   3dbbc:	460c      	mov	r4, r1
   3dbbe:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   3dbc0:	221c      	movs	r2, #28
   3dbc2:	2100      	movs	r1, #0
   3dbc4:	1d20      	adds	r0, r4, #4
   3dbc6:	f001 f8a0 	bl	3ed0a <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   3dbca:	2300      	movs	r3, #0
   3dbcc:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3dbce:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   3dbd0:	2b03      	cmp	r3, #3
   3dbd2:	d003      	beq.n	3dbdc <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   3dbd4:	2b04      	cmp	r3, #4
   3dbd6:	bf08      	it	eq
   3dbd8:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3dbdc:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   3dbde:	88a8      	ldrh	r0, [r5, #4]
   3dbe0:	f7ff ff9e 	bl	3db20 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   3dbe4:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   3dbe8:	d00b      	beq.n	3dc02 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   3dbea:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3dbec:	68e8      	ldr	r0, [r5, #12]
   3dbee:	f7ff ffad 	bl	3db4c <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3dbf2:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3dbf6:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3dbf8:	d003      	beq.n	3dc02 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   3dbfa:	69a8      	ldr	r0, [r5, #24]
   3dbfc:	b108      	cbz	r0, 3dc02 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   3dbfe:	61a0      	str	r0, [r4, #24]
	return 0;
   3dc00:	2000      	movs	r0, #0
}
   3dc02:	bd38      	pop	{r3, r4, r5, pc}

0003dc04 <nrf91_socket_offload_send>:
{
   3dc04:	b570      	push	{r4, r5, r6, lr}
   3dc06:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   3dc08:	4618      	mov	r0, r3
{
   3dc0a:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   3dc0c:	f7ff ff7e 	bl	3db0c <z_to_nrf_flags>
   3dc10:	462a      	mov	r2, r5
   3dc12:	4603      	mov	r3, r0
   3dc14:	4620      	mov	r0, r4
}
   3dc16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   3dc1a:	f7f4 beff 	b.w	32a1c <nrf_send>

0003dc1e <nrf91_socket_offload_recv>:
{
   3dc1e:	b570      	push	{r4, r5, r6, lr}
   3dc20:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   3dc22:	4618      	mov	r0, r3
{
   3dc24:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   3dc26:	f7ff ff71 	bl	3db0c <z_to_nrf_flags>
   3dc2a:	462a      	mov	r2, r5
   3dc2c:	4603      	mov	r3, r0
   3dc2e:	4620      	mov	r0, r4
}
   3dc30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   3dc34:	f7f4 bf3e 	b.w	32ab4 <nrf_recv>

0003dc38 <nrf91_socket_offload_getsockopt>:
{
   3dc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3dc3c:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   3dc3e:	2300      	movs	r3, #0
{
   3dc40:	b086      	sub	sp, #24
   3dc42:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   3dc46:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3dc4a:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   3dc4e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   3dc52:	4607      	mov	r7, r0
   3dc54:	460c      	mov	r4, r1
   3dc56:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3dc58:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   3dc5a:	d002      	beq.n	3dc62 <nrf91_socket_offload_getsockopt+0x2a>
   3dc5c:	dc2b      	bgt.n	3dcb6 <nrf91_socket_offload_getsockopt+0x7e>
   3dc5e:	2901      	cmp	r1, #1
   3dc60:	d13d      	bne.n	3dcde <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3dc62:	aa02      	add	r2, sp, #8
   3dc64:	4631      	mov	r1, r6
   3dc66:	4620      	mov	r0, r4
   3dc68:	f7e9 f8aa 	bl	26dc0 <z_to_nrf_optname>
   3dc6c:	2800      	cmp	r0, #0
   3dc6e:	db36      	blt.n	3dcde <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   3dc70:	2c01      	cmp	r4, #1
   3dc72:	d128      	bne.n	3dcc6 <nrf91_socket_offload_getsockopt+0x8e>
   3dc74:	2e14      	cmp	r6, #20
   3dc76:	d126      	bne.n	3dcc6 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   3dc78:	2308      	movs	r3, #8
   3dc7a:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   3dc7c:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3dc7e:	aa03      	add	r2, sp, #12
   3dc80:	9200      	str	r2, [sp, #0]
   3dc82:	4638      	mov	r0, r7
   3dc84:	9a02      	ldr	r2, [sp, #8]
   3dc86:	4621      	mov	r1, r4
   3dc88:	f7f4 ffaa 	bl	32be0 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   3dc8c:	4607      	mov	r7, r0
   3dc8e:	b970      	cbnz	r0, 3dcae <nrf91_socket_offload_getsockopt+0x76>
   3dc90:	b16d      	cbz	r5, 3dcae <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   3dc92:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   3dc94:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   3dc96:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   3dc9a:	d108      	bne.n	3dcae <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   3dc9c:	2e04      	cmp	r6, #4
   3dc9e:	d114      	bne.n	3dcca <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   3dca0:	6828      	ldr	r0, [r5, #0]
   3dca2:	f7e8 ff65 	bl	26b70 <bsd_os_errno_set>
				*(int *)optval = errno;
   3dca6:	f7fe fed1 	bl	3ca4c <__errno>
   3dcaa:	6803      	ldr	r3, [r0, #0]
   3dcac:	602b      	str	r3, [r5, #0]
}
   3dcae:	4638      	mov	r0, r7
   3dcb0:	b006      	add	sp, #24
   3dcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3dcb6:	f240 2302 	movw	r3, #514	; 0x202
   3dcba:	4299      	cmp	r1, r3
   3dcbc:	d0d1      	beq.n	3dc62 <nrf91_socket_offload_getsockopt+0x2a>
   3dcbe:	f240 2303 	movw	r3, #515	; 0x203
   3dcc2:	4299      	cmp	r1, r3
   3dcc4:	e7cc      	b.n	3dc60 <nrf91_socket_offload_getsockopt+0x28>
   3dcc6:	462b      	mov	r3, r5
   3dcc8:	e7d9      	b.n	3dc7e <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   3dcca:	2e14      	cmp	r6, #20
   3dccc:	d1ef      	bne.n	3dcae <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   3dcce:	9b04      	ldr	r3, [sp, #16]
   3dcd0:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   3dcd2:	9b05      	ldr	r3, [sp, #20]
   3dcd4:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   3dcd6:	2308      	movs	r3, #8
   3dcd8:	f8c8 3000 	str.w	r3, [r8]
   3dcdc:	e7e7      	b.n	3dcae <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   3dcde:	f7fe feb5 	bl	3ca4c <__errno>
   3dce2:	236d      	movs	r3, #109	; 0x6d
	return retval;
   3dce4:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   3dce8:	6003      	str	r3, [r0, #0]
	return retval;
   3dcea:	e7e0      	b.n	3dcae <nrf91_socket_offload_getsockopt+0x76>

0003dcec <nrf91_socket_offload_poll>:
{
   3dcec:	b5f0      	push	{r4, r5, r6, r7, lr}
   3dcee:	b091      	sub	sp, #68	; 0x44
   3dcf0:	4605      	mov	r5, r0
   3dcf2:	460c      	mov	r4, r1
   3dcf4:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   3dcf6:	2100      	movs	r1, #0
   3dcf8:	2240      	movs	r2, #64	; 0x40
   3dcfa:	4668      	mov	r0, sp
   3dcfc:	f001 f805 	bl	3ed0a <memset>
	for (int i = 0; i < nfds; i++) {
   3dd00:	466a      	mov	r2, sp
   3dd02:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   3dd04:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   3dd06:	42a1      	cmp	r1, r4
   3dd08:	db0c      	blt.n	3dd24 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   3dd0a:	4632      	mov	r2, r6
   3dd0c:	4621      	mov	r1, r4
   3dd0e:	4668      	mov	r0, sp
   3dd10:	f7f4 ff86 	bl	32c20 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   3dd14:	2200      	movs	r2, #0
   3dd16:	462b      	mov	r3, r5
		fds[i].revents = 0;
   3dd18:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   3dd1a:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   3dd1c:	42a2      	cmp	r2, r4
   3dd1e:	db1a      	blt.n	3dd56 <nrf91_socket_offload_poll+0x6a>
}
   3dd20:	b011      	add	sp, #68	; 0x44
   3dd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   3dd24:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   3dd28:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   3dd2c:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   3dd2e:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   3dd30:	bf48      	it	mi
   3dd32:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   3dd34:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   3dd38:	bf44      	itt	mi
   3dd3a:	f043 0301 	orrmi.w	r3, r3, #1
   3dd3e:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   3dd40:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   3dd42:	bf48      	it	mi
   3dd44:	8893      	ldrhmi	r3, [r2, #4]
   3dd46:	f102 0208 	add.w	r2, r2, #8
   3dd4a:	bf44      	itt	mi
   3dd4c:	f043 0302 	orrmi.w	r3, r3, #2
   3dd50:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   3dd54:	e7d7      	b.n	3dd06 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   3dd56:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   3dd5a:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   3dd5c:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   3dd5e:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   3dd60:	bf48      	it	mi
   3dd62:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   3dd64:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   3dd66:	bf48      	it	mi
   3dd68:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   3dd6a:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   3dd6e:	bf44      	itt	mi
   3dd70:	f045 0504 	orrmi.w	r5, r5, #4
   3dd74:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   3dd76:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   3dd78:	bf48      	it	mi
   3dd7a:	88dd      	ldrhmi	r5, [r3, #6]
   3dd7c:	f103 0308 	add.w	r3, r3, #8
   3dd80:	bf44      	itt	mi
   3dd82:	f045 0508 	orrmi.w	r5, r5, #8
   3dd86:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   3dd8a:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   3dd8c:	bf42      	ittt	mi
   3dd8e:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   3dd92:	f045 0520 	orrmi.w	r5, r5, #32
   3dd96:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   3dd9a:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   3dd9c:	bf42      	ittt	mi
   3dd9e:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   3dda2:	f041 0110 	orrmi.w	r1, r1, #16
   3dda6:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   3ddaa:	e7b7      	b.n	3dd1c <nrf91_socket_offload_poll+0x30>

0003ddac <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   3ddac:	f7f4 bec4 	b.w	32b38 <nrf_listen>

0003ddb0 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   3ddb0:	f7f4 be0a 	b.w	329c8 <nrf_close>

0003ddb4 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   3ddb4:	2903      	cmp	r1, #3
{
   3ddb6:	b508      	push	{r3, lr}
	switch (cmd) {
   3ddb8:	d00b      	beq.n	3ddd2 <nrf91_socket_offload_fcntl+0x1e>
   3ddba:	2904      	cmp	r1, #4
   3ddbc:	d111      	bne.n	3dde2 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   3ddbe:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   3ddc0:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   3ddc4:	d10d      	bne.n	3dde2 <nrf91_socket_offload_fcntl+0x2e>
}
   3ddc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   3ddca:	1392      	asrs	r2, r2, #14
   3ddcc:	2101      	movs	r1, #1
   3ddce:	f7f4 bf29 	b.w	32c24 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   3ddd2:	2200      	movs	r2, #0
   3ddd4:	2102      	movs	r1, #2
   3ddd6:	f7f4 ff25 	bl	32c24 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   3ddda:	0380      	lsls	r0, r0, #14
   3dddc:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   3dde0:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   3dde2:	f7fe fe33 	bl	3ca4c <__errno>
   3dde6:	2316      	movs	r3, #22
   3dde8:	6003      	str	r3, [r0, #0]
	return retval;
   3ddea:	f04f 30ff 	mov.w	r0, #4294967295
   3ddee:	e7f7      	b.n	3dde0 <nrf91_socket_offload_fcntl+0x2c>

0003ddf0 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   3ddf0:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   3ddf2:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   3ddf4:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   3ddf6:	4603      	mov	r3, r0
{
   3ddf8:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   3ddfa:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3ddfe:	f101 0210 	add.w	r2, r1, #16
   3de02:	f102 0410 	add.w	r4, r2, #16
   3de06:	f852 5b04 	ldr.w	r5, [r2], #4
   3de0a:	42a2      	cmp	r2, r4
   3de0c:	f843 5b04 	str.w	r5, [r3], #4
   3de10:	d1f9      	bne.n	3de06 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   3de12:	6a0b      	ldr	r3, [r1, #32]
   3de14:	7503      	strb	r3, [r0, #20]
}
   3de16:	bd30      	pop	{r4, r5, pc}

0003de18 <nrf91_socket_offload_getaddrinfo>:
{
   3de18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3de1c:	4614      	mov	r4, r2
   3de1e:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   3de20:	2100      	movs	r1, #0
{
   3de22:	b093      	sub	sp, #76	; 0x4c
   3de24:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   3de26:	2220      	movs	r2, #32
   3de28:	a802      	add	r0, sp, #8
{
   3de2a:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   3de2c:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   3de2e:	f000 ff6c 	bl	3ed0a <memset>
	if (hints != NULL) {
   3de32:	b194      	cbz	r4, 3de5a <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   3de34:	a902      	add	r1, sp, #8
   3de36:	4620      	mov	r0, r4
   3de38:	f7ff febf 	bl	3dbba <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   3de3c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   3de40:	f000 80bf 	beq.w	3dfc2 <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   3de44:	306a      	adds	r0, #106	; 0x6a
   3de46:	f000 80bf 	beq.w	3dfc8 <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   3de4a:	69e0      	ldr	r0, [r4, #28]
   3de4c:	b120      	cbz	r0, 3de58 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   3de4e:	ac0a      	add	r4, sp, #40	; 0x28
   3de50:	4621      	mov	r1, r4
   3de52:	f7ff feb2 	bl	3dbba <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   3de56:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   3de58:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   3de5a:	4628      	mov	r0, r5
   3de5c:	ab01      	add	r3, sp, #4
   3de5e:	4622      	mov	r2, r4
   3de60:	4631      	mov	r1, r6
   3de62:	f7f4 fed9 	bl	32c18 <nrf_getaddrinfo>
	if (retval != 0) {
   3de66:	4605      	mov	r5, r0
   3de68:	b1b0      	cbz	r0, 3de98 <nrf91_socket_offload_getaddrinfo+0x80>
	switch (nrf_error) {
   3de6a:	2823      	cmp	r0, #35	; 0x23
   3de6c:	f000 80af 	beq.w	3dfce <nrf91_socket_offload_getaddrinfo+0x1b6>
   3de70:	dc0a      	bgt.n	3de88 <nrf91_socket_offload_getaddrinfo+0x70>
		return DNS_EAI_SYSTEM;
   3de72:	280c      	cmp	r0, #12
   3de74:	bf08      	it	eq
   3de76:	f06f 0509 	mvneq.w	r5, #9
   3de7a:	bf18      	it	ne
   3de7c:	f06f 050a 	mvnne.w	r5, #10
}
   3de80:	4628      	mov	r0, r5
   3de82:	b013      	add	sp, #76	; 0x4c
   3de84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   3de88:	282f      	cmp	r0, #47	; 0x2f
   3de8a:	f000 80a3 	beq.w	3dfd4 <nrf91_socket_offload_getaddrinfo+0x1bc>
		return DNS_EAI_SYSTEM;
   3de8e:	2873      	cmp	r0, #115	; 0x73
   3de90:	bf08      	it	eq
   3de92:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   3de96:	e7f0      	b.n	3de7a <nrf91_socket_offload_getaddrinfo+0x62>
	struct addrinfo *latest_z_res = NULL;
   3de98:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   3de9a:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   3de9c:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   3de9e:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   3dea0:	b91e      	cbnz	r6, 3deaa <nrf91_socket_offload_getaddrinfo+0x92>
	nrf_freeaddrinfo(nrf_res);
   3dea2:	9801      	ldr	r0, [sp, #4]
   3dea4:	f7f4 feba 	bl	32c1c <nrf_freeaddrinfo>
	return retval;
   3dea8:	e7ea      	b.n	3de80 <nrf91_socket_offload_getaddrinfo+0x68>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   3deaa:	2020      	movs	r0, #32
   3deac:	f7f8 ffac 	bl	36e08 <k_malloc>
		if (next_z_res == NULL) {
   3deb0:	4604      	mov	r4, r0
   3deb2:	2800      	cmp	r0, #0
   3deb4:	d07a      	beq.n	3dfac <nrf91_socket_offload_getaddrinfo+0x194>
	family = nrf_to_z_family(nrf_in->ai_family);
   3deb6:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   3deb8:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   3deba:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   3debc:	e9c0 9906 	strd	r9, r9, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   3dec0:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   3dec4:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   3dec6:	d033      	beq.n	3df30 <nrf91_socket_offload_getaddrinfo+0x118>
   3dec8:	dc09      	bgt.n	3dede <nrf91_socket_offload_getaddrinfo+0xc6>
   3deca:	2a01      	cmp	r2, #1
   3decc:	d032      	beq.n	3df34 <nrf91_socket_offload_getaddrinfo+0x11c>
   3dece:	2a02      	cmp	r2, #2
   3ded0:	d032      	beq.n	3df38 <nrf91_socket_offload_getaddrinfo+0x120>
			k_free(next_z_res);
   3ded2:	4620      	mov	r0, r4
   3ded4:	f000 fd58 	bl	3e988 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   3ded8:	f06f 0508 	mvn.w	r5, #8
   3dedc:	e068      	b.n	3dfb0 <nrf91_socket_offload_getaddrinfo+0x198>
	switch (nrf_family) {
   3dede:	2a0a      	cmp	r2, #10
   3dee0:	d02c      	beq.n	3df3c <nrf91_socket_offload_getaddrinfo+0x124>
   3dee2:	2a66      	cmp	r2, #102	; 0x66
   3dee4:	d1f5      	bne.n	3ded2 <nrf91_socket_offload_getaddrinfo+0xba>
		return AF_LTE;
   3dee6:	4613      	mov	r3, r2
	z_out->ai_family = family;
   3dee8:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3deea:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   3deec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   3def0:	d045      	beq.n	3df7e <nrf91_socket_offload_getaddrinfo+0x166>
   3def2:	dc25      	bgt.n	3df40 <nrf91_socket_offload_getaddrinfo+0x128>
   3def4:	2b01      	cmp	r3, #1
   3def6:	d047      	beq.n	3df88 <nrf91_socket_offload_getaddrinfo+0x170>
   3def8:	2b02      	cmp	r3, #2
   3defa:	d043      	beq.n	3df84 <nrf91_socket_offload_getaddrinfo+0x16c>
   3defc:	bb43      	cbnz	r3, 3df50 <nrf91_socket_offload_getaddrinfo+0x138>
	if (nrf_in->ai_family == NRF_AF_INET) {
   3defe:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3df00:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   3df02:	d143      	bne.n	3df8c <nrf91_socket_offload_getaddrinfo+0x174>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   3df04:	2008      	movs	r0, #8
   3df06:	f7f8 ff7f 	bl	36e08 <k_malloc>
   3df0a:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   3df0c:	2800      	cmp	r0, #0
   3df0e:	d04a      	beq.n	3dfa6 <nrf91_socket_offload_getaddrinfo+0x18e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   3df10:	2308      	movs	r3, #8
   3df12:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   3df14:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   3df16:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3df18:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   3df1a:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   3df1c:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3df1e:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   3df20:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   3df22:	f1b8 0f00 	cmp.w	r8, #0
   3df26:	d149      	bne.n	3dfbc <nrf91_socket_offload_getaddrinfo+0x1a4>
			*res = next_z_res;
   3df28:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   3df2a:	69f6      	ldr	r6, [r6, #28]
   3df2c:	46a0      	mov	r8, r4
   3df2e:	e7b7      	b.n	3dea0 <nrf91_socket_offload_getaddrinfo+0x88>
		return AF_PACKET;
   3df30:	2303      	movs	r3, #3
   3df32:	e7d9      	b.n	3dee8 <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_LOCAL;
   3df34:	2367      	movs	r3, #103	; 0x67
   3df36:	e7d7      	b.n	3dee8 <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_INET;
   3df38:	2301      	movs	r3, #1
   3df3a:	e7d5      	b.n	3dee8 <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_INET6;
   3df3c:	2302      	movs	r3, #2
   3df3e:	e7d3      	b.n	3dee8 <nrf91_socket_offload_getaddrinfo+0xd0>
	switch (proto) {
   3df40:	f240 2101 	movw	r1, #513	; 0x201
   3df44:	428b      	cmp	r3, r1
   3df46:	d0da      	beq.n	3defe <nrf91_socket_offload_getaddrinfo+0xe6>
   3df48:	dc0d      	bgt.n	3df66 <nrf91_socket_offload_getaddrinfo+0x14e>
   3df4a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   3df4e:	d013      	beq.n	3df78 <nrf91_socket_offload_getaddrinfo+0x160>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3df50:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   3df54:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   3df56:	2300      	movs	r3, #0
   3df58:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   3df5a:	4620      	mov	r0, r4
   3df5c:	f000 fd14 	bl	3e988 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   3df60:	f06f 0506 	mvn.w	r5, #6
   3df64:	e024      	b.n	3dfb0 <nrf91_socket_offload_getaddrinfo+0x198>
	switch (proto) {
   3df66:	f240 2102 	movw	r1, #514	; 0x202
   3df6a:	428b      	cmp	r3, r1
   3df6c:	d0c7      	beq.n	3defe <nrf91_socket_offload_getaddrinfo+0xe6>
   3df6e:	f240 2103 	movw	r1, #515	; 0x203
   3df72:	428b      	cmp	r3, r1
   3df74:	d0c3      	beq.n	3defe <nrf91_socket_offload_getaddrinfo+0xe6>
   3df76:	e7eb      	b.n	3df50 <nrf91_socket_offload_getaddrinfo+0x138>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3df78:	f240 1311 	movw	r3, #273	; 0x111
   3df7c:	e7bf      	b.n	3defe <nrf91_socket_offload_getaddrinfo+0xe6>
   3df7e:	f44f 7381 	mov.w	r3, #258	; 0x102
   3df82:	e7bc      	b.n	3defe <nrf91_socket_offload_getaddrinfo+0xe6>
   3df84:	2311      	movs	r3, #17
   3df86:	e7ba      	b.n	3defe <nrf91_socket_offload_getaddrinfo+0xe6>
   3df88:	2306      	movs	r3, #6
   3df8a:	e7b8      	b.n	3defe <nrf91_socket_offload_getaddrinfo+0xe6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   3df8c:	2a0a      	cmp	r2, #10
   3df8e:	d1e4      	bne.n	3df5a <nrf91_socket_offload_getaddrinfo+0x142>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   3df90:	2018      	movs	r0, #24
   3df92:	f7f8 ff39 	bl	36e08 <k_malloc>
   3df96:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   3df98:	b128      	cbz	r0, 3dfa6 <nrf91_socket_offload_getaddrinfo+0x18e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   3df9a:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   3df9c:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   3df9e:	6123      	str	r3, [r4, #16]
		nrf_to_z_ipv6(z_out->ai_addr,
   3dfa0:	f7ff ff26 	bl	3ddf0 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   3dfa4:	e7bd      	b.n	3df22 <nrf91_socket_offload_getaddrinfo+0x10a>
			k_free(next_z_res);
   3dfa6:	4620      	mov	r0, r4
   3dfa8:	f000 fcee 	bl	3e988 <k_free>
			retval = DNS_EAI_MEMORY;
   3dfac:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   3dfb0:	6838      	ldr	r0, [r7, #0]
   3dfb2:	f7ff fdf5 	bl	3dba0 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   3dfb6:	2300      	movs	r3, #0
   3dfb8:	603b      	str	r3, [r7, #0]
   3dfba:	e772      	b.n	3dea2 <nrf91_socket_offload_getaddrinfo+0x8a>
			latest_z_res->ai_next = next_z_res;
   3dfbc:	f8c8 401c 	str.w	r4, [r8, #28]
   3dfc0:	e7b3      	b.n	3df2a <nrf91_socket_offload_getaddrinfo+0x112>
			return DNS_EAI_SOCKTYPE;
   3dfc2:	f06f 0506 	mvn.w	r5, #6
   3dfc6:	e75b      	b.n	3de80 <nrf91_socket_offload_getaddrinfo+0x68>
			return DNS_EAI_ADDRFAMILY;
   3dfc8:	f06f 0508 	mvn.w	r5, #8
   3dfcc:	e758      	b.n	3de80 <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_AGAIN;
   3dfce:	f06f 0502 	mvn.w	r5, #2
   3dfd2:	e755      	b.n	3de80 <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_NONAME;
   3dfd4:	f06f 0501 	mvn.w	r5, #1
   3dfd8:	e752      	b.n	3de80 <nrf91_socket_offload_getaddrinfo+0x68>

0003dfda <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   3dfda:	2224      	movs	r2, #36	; 0x24
{
   3dfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   3dfde:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   3dfe0:	8842      	ldrh	r2, [r0, #2]
{
   3dfe2:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   3dfe4:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   3dfe6:	220a      	movs	r2, #10
{
   3dfe8:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   3dfea:	604a      	str	r2, [r1, #4]
   3dfec:	f101 0610 	add.w	r6, r1, #16
   3dff0:	1d02      	adds	r2, r0, #4
   3dff2:	f100 0714 	add.w	r7, r0, #20
   3dff6:	4635      	mov	r5, r6
   3dff8:	6810      	ldr	r0, [r2, #0]
   3dffa:	6851      	ldr	r1, [r2, #4]
   3dffc:	3208      	adds	r2, #8
   3dffe:	c503      	stmia	r5!, {r0, r1}
   3e000:	42ba      	cmp	r2, r7
   3e002:	462e      	mov	r6, r5
   3e004:	d1f7      	bne.n	3dff6 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   3e006:	7d22      	ldrb	r2, [r4, #20]
   3e008:	621a      	str	r2, [r3, #32]
}
   3e00a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003e00c <nrf91_socket_offload_sendto>:
{
   3e00c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3e010:	b08d      	sub	sp, #52	; 0x34
   3e012:	9c14      	ldr	r4, [sp, #80]	; 0x50
   3e014:	4605      	mov	r5, r0
   3e016:	460e      	mov	r6, r1
   3e018:	4617      	mov	r7, r2
   3e01a:	4698      	mov	r8, r3
	if (to == NULL) {
   3e01c:	b96c      	cbnz	r4, 3e03a <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3e01e:	4618      	mov	r0, r3
   3e020:	f7ff fd74 	bl	3db0c <z_to_nrf_flags>
   3e024:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3e028:	4603      	mov	r3, r0
   3e02a:	463a      	mov	r2, r7
   3e02c:	4631      	mov	r1, r6
   3e02e:	4628      	mov	r0, r5
   3e030:	f7f4 fcd8 	bl	329e4 <nrf_sendto>
}
   3e034:	b00d      	add	sp, #52	; 0x34
   3e036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   3e03a:	8823      	ldrh	r3, [r4, #0]
   3e03c:	2b01      	cmp	r3, #1
   3e03e:	d110      	bne.n	3e062 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   3e040:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3e042:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   3e044:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   3e048:	2302      	movs	r3, #2
   3e04a:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3e04c:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3e04e:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3e050:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3e052:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3e056:	f7ff fd59 	bl	3db0c <z_to_nrf_flags>
   3e05a:	ab03      	add	r3, sp, #12
   3e05c:	9101      	str	r1, [sp, #4]
   3e05e:	9300      	str	r3, [sp, #0]
   3e060:	e7e2      	b.n	3e028 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   3e062:	2b02      	cmp	r3, #2
   3e064:	d10c      	bne.n	3e080 <nrf91_socket_offload_sendto+0x74>
		z_to_nrf_ipv6(to, &ipv6);
   3e066:	f10d 090c 	add.w	r9, sp, #12
   3e06a:	4649      	mov	r1, r9
   3e06c:	4620      	mov	r0, r4
   3e06e:	f7ff ffb4 	bl	3dfda <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3e072:	4640      	mov	r0, r8
   3e074:	f7ff fd4a 	bl	3db0c <z_to_nrf_flags>
   3e078:	2324      	movs	r3, #36	; 0x24
   3e07a:	e9cd 9300 	strd	r9, r3, [sp]
   3e07e:	e7d3      	b.n	3e028 <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   3e080:	f7fe fce4 	bl	3ca4c <__errno>
   3e084:	2386      	movs	r3, #134	; 0x86
   3e086:	6003      	str	r3, [r0, #0]
	return retval;
   3e088:	f04f 30ff 	mov.w	r0, #4294967295
   3e08c:	e7d2      	b.n	3e034 <nrf91_socket_offload_sendto+0x28>

0003e08e <nrf91_socket_offload_recvfrom>:
{
   3e08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e092:	4605      	mov	r5, r0
   3e094:	b08c      	sub	sp, #48	; 0x30
   3e096:	4618      	mov	r0, r3
   3e098:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   3e09c:	4690      	mov	r8, r2
	if (from == NULL) {
   3e09e:	f7ff fd35 	bl	3db0c <z_to_nrf_flags>
   3e0a2:	4603      	mov	r3, r0
   3e0a4:	b954      	cbnz	r4, 3e0bc <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3e0a6:	4628      	mov	r0, r5
   3e0a8:	e9cd 4400 	strd	r4, r4, [sp]
   3e0ac:	4642      	mov	r2, r8
   3e0ae:	f7f4 fce5 	bl	32a7c <nrf_recvfrom>
   3e0b2:	4605      	mov	r5, r0
}
   3e0b4:	4628      	mov	r0, r5
   3e0b6:	b00c      	add	sp, #48	; 0x30
   3e0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3e0bc:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   3e0be:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3e0c0:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   3e0c2:	aa02      	add	r2, sp, #8
   3e0c4:	9201      	str	r2, [sp, #4]
   3e0c6:	4628      	mov	r0, r5
   3e0c8:	9700      	str	r7, [sp, #0]
   3e0ca:	4642      	mov	r2, r8
   3e0cc:	f7f4 fcd6 	bl	32a7c <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   3e0d0:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   3e0d2:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   3e0d4:	2b02      	cmp	r3, #2
   3e0d6:	d109      	bne.n	3e0ec <nrf91_socket_offload_recvfrom+0x5e>
	ptr->sin_port = nrf_in->sin_port;
   3e0d8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   3e0dc:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   3e0de:	2301      	movs	r3, #1
   3e0e0:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3e0e2:	9b06      	ldr	r3, [sp, #24]
   3e0e4:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   3e0e6:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   3e0e8:	6033      	str	r3, [r6, #0]
	return retval;
   3e0ea:	e7e3      	b.n	3e0b4 <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   3e0ec:	2b0a      	cmp	r3, #10
   3e0ee:	d1e1      	bne.n	3e0b4 <nrf91_socket_offload_recvfrom+0x26>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   3e0f0:	4639      	mov	r1, r7
   3e0f2:	4620      	mov	r0, r4
   3e0f4:	f7ff fe7c 	bl	3ddf0 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   3e0f8:	2318      	movs	r3, #24
   3e0fa:	e7f5      	b.n	3e0e8 <nrf91_socket_offload_recvfrom+0x5a>

0003e0fc <nrf91_socket_offload_connect>:
{
   3e0fc:	b530      	push	{r4, r5, lr}
	if (addr->sa_family == AF_INET) {
   3e0fe:	880c      	ldrh	r4, [r1, #0]
{
   3e100:	b08b      	sub	sp, #44	; 0x2c
	if (addr->sa_family == AF_INET) {
   3e102:	2c01      	cmp	r4, #1
{
   3e104:	4605      	mov	r5, r0
   3e106:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3e108:	d10e      	bne.n	3e128 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   3e10a:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3e10c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3e10e:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3e112:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3e114:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   3e116:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3e118:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3e11c:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   3e11e:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3e120:	f7f4 fcf8 	bl	32b14 <nrf_connect>
}
   3e124:	b00b      	add	sp, #44	; 0x2c
   3e126:	bd30      	pop	{r4, r5, pc}
	} else if (addr->sa_family == AF_INET6) {
   3e128:	2c02      	cmp	r4, #2
   3e12a:	d107      	bne.n	3e13c <nrf91_socket_offload_connect+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   3e12c:	a901      	add	r1, sp, #4
   3e12e:	4618      	mov	r0, r3
   3e130:	f7ff ff53 	bl	3dfda <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3e134:	2224      	movs	r2, #36	; 0x24
   3e136:	a901      	add	r1, sp, #4
   3e138:	4628      	mov	r0, r5
   3e13a:	e7f1      	b.n	3e120 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   3e13c:	f7f4 fcea 	bl	32b14 <nrf_connect>
		if (retval < 0) {
   3e140:	2800      	cmp	r0, #0
   3e142:	daef      	bge.n	3e124 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   3e144:	f7fe fc82 	bl	3ca4c <__errno>
   3e148:	2386      	movs	r3, #134	; 0x86
   3e14a:	6003      	str	r3, [r0, #0]
   3e14c:	f04f 30ff 	mov.w	r0, #4294967295
   3e150:	e7e8      	b.n	3e124 <nrf91_socket_offload_connect+0x28>

0003e152 <nrf91_socket_offload_accept>:
{
   3e152:	b5f0      	push	{r4, r5, r6, r7, lr}
   3e154:	4616      	mov	r6, r2
   3e156:	b08b      	sub	sp, #44	; 0x2c
	if ((addr != NULL) && (addrlen != NULL)) {
   3e158:	460c      	mov	r4, r1
   3e15a:	b1f1      	cbz	r1, 3e19a <nrf91_socket_offload_accept+0x48>
   3e15c:	b302      	cbz	r2, 3e1a0 <nrf91_socket_offload_accept+0x4e>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   3e15e:	6813      	ldr	r3, [r2, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   3e160:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   3e162:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   3e164:	bf0c      	ite	eq
   3e166:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   3e168:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   3e16a:	ad01      	add	r5, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   3e16c:	9300      	str	r3, [sp, #0]
	retval = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   3e16e:	4629      	mov	r1, r5
   3e170:	f7f4 fcf2 	bl	32b58 <nrf_accept>
	if (retval < 0) {
   3e174:	1e07      	subs	r7, r0, #0
   3e176:	db22      	blt.n	3e1be <nrf91_socket_offload_accept+0x6c>
	if ((addr != NULL) && (addrlen != NULL)) {
   3e178:	b164      	cbz	r4, 3e194 <nrf91_socket_offload_accept+0x42>
   3e17a:	b15e      	cbz	r6, 3e194 <nrf91_socket_offload_accept+0x42>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   3e17c:	686b      	ldr	r3, [r5, #4]
   3e17e:	2b02      	cmp	r3, #2
   3e180:	d110      	bne.n	3e1a4 <nrf91_socket_offload_accept+0x52>
			*addrlen = sizeof(struct sockaddr_in);
   3e182:	2308      	movs	r3, #8
   3e184:	6033      	str	r3, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   3e186:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   3e18a:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   3e18c:	2301      	movs	r3, #1
   3e18e:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3e190:	9b04      	ldr	r3, [sp, #16]
   3e192:	6063      	str	r3, [r4, #4]
}
   3e194:	4638      	mov	r0, r7
   3e196:	b00b      	add	sp, #44	; 0x2c
   3e198:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   3e19a:	460a      	mov	r2, r1
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   3e19c:	460d      	mov	r5, r1
   3e19e:	e7e6      	b.n	3e16e <nrf91_socket_offload_accept+0x1c>
   3e1a0:	4615      	mov	r5, r2
   3e1a2:	e7e4      	b.n	3e16e <nrf91_socket_offload_accept+0x1c>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   3e1a4:	2b0a      	cmp	r3, #10
   3e1a6:	d106      	bne.n	3e1b6 <nrf91_socket_offload_accept+0x64>
			*addrlen = sizeof(struct sockaddr_in6);
   3e1a8:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   3e1aa:	a901      	add	r1, sp, #4
			*addrlen = sizeof(struct sockaddr_in6);
   3e1ac:	6033      	str	r3, [r6, #0]
			nrf_to_z_ipv6(
   3e1ae:	4620      	mov	r0, r4
   3e1b0:	f7ff fe1e 	bl	3ddf0 <nrf_to_z_ipv6>
   3e1b4:	e7ee      	b.n	3e194 <nrf91_socket_offload_accept+0x42>
	errno = ENOTSUP;
   3e1b6:	f7fe fc49 	bl	3ca4c <__errno>
   3e1ba:	2386      	movs	r3, #134	; 0x86
   3e1bc:	6003      	str	r3, [r0, #0]
		return -1;
   3e1be:	f04f 37ff 	mov.w	r7, #4294967295
   3e1c2:	e7e7      	b.n	3e194 <nrf91_socket_offload_accept+0x42>

0003e1c4 <nrf91_socket_offload_socket>:
{
   3e1c4:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   3e1c6:	b280      	uxth	r0, r0
   3e1c8:	f7ff fcaa 	bl	3db20 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   3e1cc:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   3e1d0:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   3e1d2:	d106      	bne.n	3e1e2 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   3e1d4:	f7fe fc3a 	bl	3ca4c <__errno>
   3e1d8:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   3e1da:	6003      	str	r3, [r0, #0]
}
   3e1dc:	f04f 30ff 	mov.w	r0, #4294967295
   3e1e0:	bd10      	pop	{r4, pc}
	switch (socktype) {
   3e1e2:	2903      	cmp	r1, #3
   3e1e4:	d003      	beq.n	3e1ee <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   3e1e6:	2904      	cmp	r1, #4
   3e1e8:	bf08      	it	eq
   3e1ea:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   3e1ee:	4610      	mov	r0, r2
   3e1f0:	f7ff fcac 	bl	3db4c <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   3e1f4:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   3e1f8:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   3e1fa:	d103      	bne.n	3e204 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   3e1fc:	f7fe fc26 	bl	3ca4c <__errno>
   3e200:	237b      	movs	r3, #123	; 0x7b
   3e202:	e7ea      	b.n	3e1da <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   3e204:	4620      	mov	r0, r4
}
   3e206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   3e20a:	f7f4 bbcb 	b.w	329a4 <nrf_socket>

0003e20e <nrf91_socket_offload_setsockopt>:
{
   3e20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   3e212:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   3e216:	b086      	sub	sp, #24
   3e218:	4680      	mov	r8, r0
   3e21a:	460c      	mov	r4, r1
   3e21c:	4617      	mov	r7, r2
   3e21e:	461d      	mov	r5, r3
   3e220:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   3e222:	d002      	beq.n	3e22a <nrf91_socket_offload_setsockopt+0x1c>
   3e224:	dc1c      	bgt.n	3e260 <nrf91_socket_offload_setsockopt+0x52>
   3e226:	2901      	cmp	r1, #1
   3e228:	d122      	bne.n	3e270 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3e22a:	aa03      	add	r2, sp, #12
   3e22c:	4639      	mov	r1, r7
   3e22e:	4620      	mov	r0, r4
   3e230:	f7e8 fdc6 	bl	26dc0 <z_to_nrf_optname>
   3e234:	2800      	cmp	r0, #0
   3e236:	db1b      	blt.n	3e270 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   3e238:	2c01      	cmp	r4, #1
   3e23a:	d107      	bne.n	3e24c <nrf91_socket_offload_setsockopt+0x3e>
   3e23c:	2f14      	cmp	r7, #20
   3e23e:	d105      	bne.n	3e24c <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   3e240:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3e242:	682b      	ldr	r3, [r5, #0]
   3e244:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3e246:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   3e248:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3e24a:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3e24c:	9600      	str	r6, [sp, #0]
   3e24e:	462b      	mov	r3, r5
   3e250:	9a03      	ldr	r2, [sp, #12]
   3e252:	4621      	mov	r1, r4
   3e254:	4640      	mov	r0, r8
   3e256:	f7f4 fca7 	bl	32ba8 <nrf_setsockopt>
}
   3e25a:	b006      	add	sp, #24
   3e25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3e260:	f240 2302 	movw	r3, #514	; 0x202
   3e264:	4299      	cmp	r1, r3
   3e266:	d0e0      	beq.n	3e22a <nrf91_socket_offload_setsockopt+0x1c>
   3e268:	f240 2303 	movw	r3, #515	; 0x203
   3e26c:	4299      	cmp	r1, r3
   3e26e:	e7db      	b.n	3e228 <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   3e270:	f7fe fbec 	bl	3ca4c <__errno>
   3e274:	236d      	movs	r3, #109	; 0x6d
   3e276:	6003      	str	r3, [r0, #0]
   3e278:	f04f 30ff 	mov.w	r0, #4294967295
   3e27c:	e7ed      	b.n	3e25a <nrf91_socket_offload_setsockopt+0x4c>

0003e27e <nrf91_socket_offload_bind>:
{
   3e27e:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   3e280:	880a      	ldrh	r2, [r1, #0]
{
   3e282:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3e284:	2a01      	cmp	r2, #1
{
   3e286:	4604      	mov	r4, r0
   3e288:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3e28a:	d10e      	bne.n	3e2aa <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   3e28c:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3e28e:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3e290:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3e294:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3e296:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   3e298:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3e29a:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3e29e:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   3e2a0:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3e2a2:	f7f4 fc6f 	bl	32b84 <nrf_bind>
}
   3e2a6:	b00a      	add	sp, #40	; 0x28
   3e2a8:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3e2aa:	2a02      	cmp	r2, #2
   3e2ac:	d107      	bne.n	3e2be <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   3e2ae:	a901      	add	r1, sp, #4
   3e2b0:	4618      	mov	r0, r3
   3e2b2:	f7ff fe92 	bl	3dfda <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3e2b6:	2224      	movs	r2, #36	; 0x24
   3e2b8:	a901      	add	r1, sp, #4
   3e2ba:	4620      	mov	r0, r4
   3e2bc:	e7f1      	b.n	3e2a2 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   3e2be:	f7fe fbc5 	bl	3ca4c <__errno>
   3e2c2:	2386      	movs	r3, #134	; 0x86
   3e2c4:	6003      	str	r3, [r0, #0]
   3e2c6:	f04f 30ff 	mov.w	r0, #4294967295
   3e2ca:	e7ec      	b.n	3e2a6 <nrf91_socket_offload_bind+0x28>

0003e2cc <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   3e2cc:	ea40 0301 	orr.w	r3, r0, r1
   3e2d0:	f033 030f 	bics.w	r3, r3, #15
   3e2d4:	d101      	bne.n	3e2da <dk_set_leds_state+0xe>
   3e2d6:	f7e8 bde7 	b.w	26ea8 <dk_set_leds_state.part.7>
}
   3e2da:	f06f 0015 	mvn.w	r0, #21
   3e2de:	4770      	bx	lr

0003e2e0 <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   3e2e0:	210f      	movs	r1, #15
   3e2e2:	f7ff bff3 	b.w	3e2cc <dk_set_leds_state>

0003e2e6 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   3e2e6:	6843      	ldr	r3, [r0, #4]
   3e2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   3e2ea:	b103      	cbz	r3, 3e2ee <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   3e2ec:	4718      	bx	r3
}
   3e2ee:	4770      	bx	lr

0003e2f0 <response_handler>:
	write_uart_string(response);
   3e2f0:	4608      	mov	r0, r1
   3e2f2:	f7e9 bcff 	b.w	27cf4 <write_uart_string>

0003e2f6 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   3e2f6:	280d      	cmp	r0, #13
   3e2f8:	d004      	beq.n	3e304 <is_lfcr+0xe>
   3e2fa:	f1a0 030a 	sub.w	r3, r0, #10
   3e2fe:	4258      	negs	r0, r3
   3e300:	4158      	adcs	r0, r3
   3e302:	4770      	bx	lr
		return true;
   3e304:	2001      	movs	r0, #1
}
   3e306:	4770      	bx	lr

0003e308 <skip_command_prefix>:
{
   3e308:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   3e30a:	6802      	ldr	r2, [r0, #0]
{
   3e30c:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   3e30e:	1c93      	adds	r3, r2, #2
   3e310:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   3e312:	7894      	ldrb	r4, [r2, #2]
   3e314:	4620      	mov	r0, r4
   3e316:	f7ff ffee 	bl	3e2f6 <is_lfcr>
   3e31a:	b910      	cbnz	r0, 3e322 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3e31c:	b10c      	cbz	r4, 3e322 <skip_command_prefix+0x1a>
	(*cmd)++;
   3e31e:	3203      	adds	r2, #3
   3e320:	600a      	str	r2, [r1, #0]
}
   3e322:	bd10      	pop	{r4, pc}

0003e324 <at_params_list_init>:
{
   3e324:	b538      	push	{r3, r4, r5, lr}
   3e326:	460d      	mov	r5, r1
	if (list == NULL) {
   3e328:	4604      	mov	r4, r0
   3e32a:	b140      	cbz	r0, 3e33e <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   3e32c:	210c      	movs	r1, #12
   3e32e:	4628      	mov	r0, r5
   3e330:	f000 fb2f 	bl	3e992 <k_calloc>
   3e334:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   3e336:	b128      	cbz	r0, 3e344 <at_params_list_init+0x20>
	return 0;
   3e338:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   3e33a:	6025      	str	r5, [r4, #0]
}
   3e33c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3e33e:	f06f 0015 	mvn.w	r0, #21
   3e342:	e7fb      	b.n	3e33c <at_params_list_init+0x18>
		return -ENOMEM;
   3e344:	f06f 000b 	mvn.w	r0, #11
   3e348:	e7f8      	b.n	3e33c <at_params_list_init+0x18>

0003e34a <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   3e34a:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3e34c:	4604      	mov	r4, r0
   3e34e:	b148      	cbz	r0, 3e364 <at_params_list_free+0x1a>
   3e350:	6843      	ldr	r3, [r0, #4]
   3e352:	b13b      	cbz	r3, 3e364 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   3e354:	2500      	movs	r5, #0
	at_params_list_clear(list);
   3e356:	f7ea f90d 	bl	28574 <at_params_list_clear>
	list->param_count = 0;
   3e35a:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   3e35c:	6860      	ldr	r0, [r4, #4]
   3e35e:	f000 fb13 	bl	3e988 <k_free>
	list->params = NULL;
   3e362:	6065      	str	r5, [r4, #4]
}
   3e364:	bd38      	pop	{r3, r4, r5, pc}

0003e366 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   3e366:	b538      	push	{r3, r4, r5, lr}
   3e368:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   3e36a:	b910      	cbnz	r0, 3e372 <at_params_short_put+0xc>
		return -EINVAL;
   3e36c:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
}
   3e370:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   3e372:	6843      	ldr	r3, [r0, #4]
   3e374:	2b00      	cmp	r3, #0
   3e376:	d0f9      	beq.n	3e36c <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   3e378:	f7ea f890 	bl	2849c <at_params_get>
	if (param == NULL) {
   3e37c:	4604      	mov	r4, r0
   3e37e:	2800      	cmp	r0, #0
   3e380:	d0f4      	beq.n	3e36c <at_params_short_put+0x6>
	at_param_clear(param);
   3e382:	f7ea f8d5 	bl	28530 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   3e386:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   3e388:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   3e38a:	7023      	strb	r3, [r4, #0]
	return 0;
   3e38c:	2000      	movs	r0, #0
   3e38e:	e7ef      	b.n	3e370 <at_params_short_put+0xa>

0003e390 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   3e390:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   3e392:	b910      	cbnz	r0, 3e39a <at_params_empty_put+0xa>
		return -EINVAL;
   3e394:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   3e398:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   3e39a:	6843      	ldr	r3, [r0, #4]
   3e39c:	2b00      	cmp	r3, #0
   3e39e:	d0f9      	beq.n	3e394 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   3e3a0:	f7ea f87c 	bl	2849c <at_params_get>
	if (param == NULL) {
   3e3a4:	4604      	mov	r4, r0
   3e3a6:	2800      	cmp	r0, #0
   3e3a8:	d0f4      	beq.n	3e394 <at_params_empty_put+0x4>
	at_param_clear(param);
   3e3aa:	f7ea f8c1 	bl	28530 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   3e3ae:	2305      	movs	r3, #5
	param->value.int_val = 0;
   3e3b0:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   3e3b2:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   3e3b4:	60a0      	str	r0, [r4, #8]
	return 0;
   3e3b6:	e7ef      	b.n	3e398 <at_params_empty_put+0x8>

0003e3b8 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   3e3b8:	b538      	push	{r3, r4, r5, lr}
   3e3ba:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   3e3bc:	b910      	cbnz	r0, 3e3c4 <at_params_int_put+0xc>
		return -EINVAL;
   3e3be:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   3e3c2:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   3e3c4:	6843      	ldr	r3, [r0, #4]
   3e3c6:	2b00      	cmp	r3, #0
   3e3c8:	d0f9      	beq.n	3e3be <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   3e3ca:	f7ea f867 	bl	2849c <at_params_get>
	if (param == NULL) {
   3e3ce:	4604      	mov	r4, r0
   3e3d0:	2800      	cmp	r0, #0
   3e3d2:	d0f4      	beq.n	3e3be <at_params_int_put+0x6>
	at_param_clear(param);
   3e3d4:	f7ea f8ac 	bl	28530 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   3e3d8:	2302      	movs	r3, #2
	param->value.int_val = value;
   3e3da:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   3e3dc:	7023      	strb	r3, [r4, #0]
	return 0;
   3e3de:	2000      	movs	r0, #0
   3e3e0:	e7ef      	b.n	3e3c2 <at_params_int_put+0xa>

0003e3e2 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   3e3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e3e4:	4616      	mov	r6, r2
   3e3e6:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   3e3e8:	b910      	cbnz	r0, 3e3f0 <at_params_string_put+0xe>
		return -EINVAL;
   3e3ea:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   3e3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   3e3f0:	6843      	ldr	r3, [r0, #4]
   3e3f2:	2b00      	cmp	r3, #0
   3e3f4:	d0f9      	beq.n	3e3ea <at_params_string_put+0x8>
   3e3f6:	2a00      	cmp	r2, #0
   3e3f8:	d0f7      	beq.n	3e3ea <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3e3fa:	f7ea f84f 	bl	2849c <at_params_get>
	if (param == NULL) {
   3e3fe:	4604      	mov	r4, r0
   3e400:	2800      	cmp	r0, #0
   3e402:	d0f2      	beq.n	3e3ea <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   3e404:	1c68      	adds	r0, r5, #1
   3e406:	f7f8 fcff 	bl	36e08 <k_malloc>
	if (param_value == NULL) {
   3e40a:	4607      	mov	r7, r0
   3e40c:	b160      	cbz	r0, 3e428 <at_params_string_put+0x46>
   3e40e:	462a      	mov	r2, r5
   3e410:	4631      	mov	r1, r6
   3e412:	f000 fc5a 	bl	3ecca <memcpy>
	at_param_clear(param);
   3e416:	4620      	mov	r0, r4
   3e418:	f7ea f88a 	bl	28530 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   3e41c:	2303      	movs	r3, #3
	param->size = str_len;
   3e41e:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   3e420:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   3e422:	60a7      	str	r7, [r4, #8]
	return 0;
   3e424:	2000      	movs	r0, #0
   3e426:	e7e2      	b.n	3e3ee <at_params_string_put+0xc>
		return -ENOMEM;
   3e428:	f06f 000b 	mvn.w	r0, #11
   3e42c:	e7df      	b.n	3e3ee <at_params_string_put+0xc>

0003e42e <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   3e42e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e430:	4616      	mov	r6, r2
   3e432:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   3e434:	b910      	cbnz	r0, 3e43c <at_params_array_put+0xe>
		return -EINVAL;
   3e436:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   3e43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   3e43c:	6843      	ldr	r3, [r0, #4]
   3e43e:	2b00      	cmp	r3, #0
   3e440:	d0f9      	beq.n	3e436 <at_params_array_put+0x8>
   3e442:	2a00      	cmp	r2, #0
   3e444:	d0f7      	beq.n	3e436 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3e446:	f7ea f829 	bl	2849c <at_params_get>
	if (param == NULL) {
   3e44a:	4604      	mov	r4, r0
   3e44c:	2800      	cmp	r0, #0
   3e44e:	d0f2      	beq.n	3e436 <at_params_array_put+0x8>
	u32_t *param_value = (u32_t *)k_malloc(array_len);
   3e450:	4628      	mov	r0, r5
   3e452:	f7f8 fcd9 	bl	36e08 <k_malloc>
	if (param_value == NULL) {
   3e456:	4607      	mov	r7, r0
   3e458:	b160      	cbz	r0, 3e474 <at_params_array_put+0x46>
   3e45a:	462a      	mov	r2, r5
   3e45c:	4631      	mov	r1, r6
   3e45e:	f000 fc34 	bl	3ecca <memcpy>
	at_param_clear(param);
   3e462:	4620      	mov	r0, r4
   3e464:	f7ea f864 	bl	28530 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   3e468:	2304      	movs	r3, #4
	param->size = array_len;
   3e46a:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   3e46c:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   3e46e:	60a7      	str	r7, [r4, #8]
	return 0;
   3e470:	2000      	movs	r0, #0
   3e472:	e7e2      	b.n	3e43a <at_params_array_put+0xc>
		return -ENOMEM;
   3e474:	f06f 000b 	mvn.w	r0, #11
   3e478:	e7df      	b.n	3e43a <at_params_array_put+0xc>

0003e47a <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   3e47a:	b510      	push	{r4, lr}
   3e47c:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3e47e:	b910      	cbnz	r0, 3e486 <at_params_short_get+0xc>
		return -EINVAL;
   3e480:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
	return 0;
}
   3e484:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3e486:	6843      	ldr	r3, [r0, #4]
   3e488:	2b00      	cmp	r3, #0
   3e48a:	d0f9      	beq.n	3e480 <at_params_short_get+0x6>
   3e48c:	2a00      	cmp	r2, #0
   3e48e:	d0f7      	beq.n	3e480 <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3e490:	f7ea f804 	bl	2849c <at_params_get>
	if (param == NULL) {
   3e494:	2800      	cmp	r0, #0
   3e496:	d0f3      	beq.n	3e480 <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   3e498:	7803      	ldrb	r3, [r0, #0]
   3e49a:	2b01      	cmp	r3, #1
   3e49c:	d1f0      	bne.n	3e480 <at_params_short_get+0x6>
	*value = (u16_t)param->value.int_val;
   3e49e:	6883      	ldr	r3, [r0, #8]
	return 0;
   3e4a0:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   3e4a2:	8023      	strh	r3, [r4, #0]
	return 0;
   3e4a4:	e7ee      	b.n	3e484 <at_params_short_get+0xa>

0003e4a6 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   3e4a6:	b510      	push	{r4, lr}
   3e4a8:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3e4aa:	b910      	cbnz	r0, 3e4b2 <at_params_int_get+0xc>
		return -EINVAL;
   3e4ac:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   3e4b0:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3e4b2:	6843      	ldr	r3, [r0, #4]
   3e4b4:	2b00      	cmp	r3, #0
   3e4b6:	d0f9      	beq.n	3e4ac <at_params_int_get+0x6>
   3e4b8:	2a00      	cmp	r2, #0
   3e4ba:	d0f7      	beq.n	3e4ac <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3e4bc:	f7e9 ffee 	bl	2849c <at_params_get>
	if (param == NULL) {
   3e4c0:	2800      	cmp	r0, #0
   3e4c2:	d0f3      	beq.n	3e4ac <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   3e4c4:	7803      	ldrb	r3, [r0, #0]
   3e4c6:	3b01      	subs	r3, #1
   3e4c8:	2b01      	cmp	r3, #1
   3e4ca:	d8ef      	bhi.n	3e4ac <at_params_int_get+0x6>
	*value = param->value.int_val;
   3e4cc:	6883      	ldr	r3, [r0, #8]
	return 0;
   3e4ce:	2000      	movs	r0, #0
	*value = param->value.int_val;
   3e4d0:	6023      	str	r3, [r4, #0]
	return 0;
   3e4d2:	e7ed      	b.n	3e4b0 <at_params_int_get+0xa>

0003e4d4 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   3e4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e4d6:	4616      	mov	r6, r2
   3e4d8:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   3e4da:	b910      	cbnz	r0, 3e4e2 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   3e4dc:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   3e4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   3e4e2:	6843      	ldr	r3, [r0, #4]
   3e4e4:	2b00      	cmp	r3, #0
   3e4e6:	d0f9      	beq.n	3e4dc <at_params_string_get+0x8>
   3e4e8:	2a00      	cmp	r2, #0
   3e4ea:	d0f7      	beq.n	3e4dc <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   3e4ec:	2c00      	cmp	r4, #0
   3e4ee:	d0f5      	beq.n	3e4dc <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   3e4f0:	f7e9 ffd4 	bl	2849c <at_params_get>
	if (param == NULL) {
   3e4f4:	4607      	mov	r7, r0
   3e4f6:	2800      	cmp	r0, #0
   3e4f8:	d0f0      	beq.n	3e4dc <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   3e4fa:	7803      	ldrb	r3, [r0, #0]
   3e4fc:	2b03      	cmp	r3, #3
   3e4fe:	d1ed      	bne.n	3e4dc <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   3e500:	f7e9 ffee 	bl	284e0 <at_param_size>
	if (*len < param_len) {
   3e504:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   3e506:	4605      	mov	r5, r0
	if (*len < param_len) {
   3e508:	4283      	cmp	r3, r0
   3e50a:	d307      	bcc.n	3e51c <at_params_string_get+0x48>
   3e50c:	4602      	mov	r2, r0
   3e50e:	68b9      	ldr	r1, [r7, #8]
   3e510:	4630      	mov	r0, r6
   3e512:	f000 fbda 	bl	3ecca <memcpy>
	*len = param_len;
   3e516:	6025      	str	r5, [r4, #0]
	return 0;
   3e518:	2000      	movs	r0, #0
   3e51a:	e7e1      	b.n	3e4e0 <at_params_string_get+0xc>
		return -ENOMEM;
   3e51c:	f06f 000b 	mvn.w	r0, #11
   3e520:	e7de      	b.n	3e4e0 <at_params_string_get+0xc>

0003e522 <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   3e522:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3e524:	4605      	mov	r5, r0
   3e526:	b180      	cbz	r0, 3e54a <at_params_valid_count_get+0x28>
   3e528:	6843      	ldr	r3, [r0, #4]
   3e52a:	b173      	cbz	r3, 3e54a <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   3e52c:	2100      	movs	r1, #0
   3e52e:	f7e9 ffb5 	bl	2849c <at_params_get>
	size_t valid_i = 0;
   3e532:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   3e534:	b108      	cbz	r0, 3e53a <at_params_valid_count_get+0x18>
   3e536:	7803      	ldrb	r3, [r0, #0]
   3e538:	b90b      	cbnz	r3, 3e53e <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   3e53a:	4620      	mov	r0, r4
   3e53c:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   3e53e:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   3e540:	4621      	mov	r1, r4
   3e542:	4628      	mov	r0, r5
   3e544:	f7e9 ffaa 	bl	2849c <at_params_get>
   3e548:	e7f4      	b.n	3e534 <at_params_valid_count_get+0x12>
		return -EINVAL;
   3e54a:	f06f 0415 	mvn.w	r4, #21
   3e54e:	e7f4      	b.n	3e53a <at_params_valid_count_get+0x18>

0003e550 <response_is_valid>:
{
   3e550:	b570      	push	{r4, r5, r6, lr}
   3e552:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   3e554:	4610      	mov	r0, r2
{
   3e556:	460d      	mov	r5, r1
   3e558:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   3e55a:	f7de fde3 	bl	1d124 <strlen>
   3e55e:	42a8      	cmp	r0, r5
   3e560:	d808      	bhi.n	3e574 <response_is_valid+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   3e562:	462a      	mov	r2, r5
   3e564:	4621      	mov	r1, r4
   3e566:	4630      	mov	r0, r6
   3e568:	f000 fba1 	bl	3ecae <memcmp>
	if ((response_len < strlen(check)) ||
   3e56c:	fab0 f080 	clz	r0, r0
   3e570:	0940      	lsrs	r0, r0, #5
}
   3e572:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   3e574:	2000      	movs	r0, #0
   3e576:	e7fc      	b.n	3e572 <response_is_valid+0x22>

0003e578 <lte_lc_init_and_connect>:
{
   3e578:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   3e57a:	f7ea f833 	bl	285e4 <w_lte_lc_init>
	if (ret) {
   3e57e:	b918      	cbnz	r0, 3e588 <lte_lc_init_and_connect+0x10>
}
   3e580:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect();
   3e584:	f7ea b932 	b.w	287ec <w_lte_lc_connect>
}
   3e588:	bd08      	pop	{r3, pc}

0003e58a <json_add_str>:
{
   3e58a:	b538      	push	{r3, r4, r5, lr}
   3e58c:	460d      	mov	r5, r1
	if (parent == NULL || str == NULL || item == NULL) {
   3e58e:	4604      	mov	r4, r0
   3e590:	b158      	cbz	r0, 3e5aa <json_add_str+0x20>
   3e592:	b152      	cbz	r2, 3e5aa <json_add_str+0x20>
	json_str = cJSON_CreateString(item);
   3e594:	4610      	mov	r0, r2
   3e596:	f7e8 f9c1 	bl	2691c <cJSON_CreateString>
	if (json_str == NULL) {
   3e59a:	4602      	mov	r2, r0
   3e59c:	b140      	cbz	r0, 3e5b0 <json_add_str+0x26>
	cJSON_AddItemToObject(parent, str, item);
   3e59e:	4620      	mov	r0, r4
   3e5a0:	4629      	mov	r1, r5
   3e5a2:	f7ff fa24 	bl	3d9ee <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   3e5a6:	2000      	movs	r0, #0
}
   3e5a8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3e5aa:	f06f 0015 	mvn.w	r0, #21
   3e5ae:	e7fb      	b.n	3e5a8 <json_add_str+0x1e>
		return -ENOMEM;
   3e5b0:	f06f 000b 	mvn.w	r0, #11
   3e5b4:	e7f8      	b.n	3e5a8 <json_add_str+0x1e>

0003e5b6 <json_add_data>:
{
   3e5b6:	b5f0      	push	{r4, r5, r6, r7, lr}
   3e5b8:	4604      	mov	r4, r0
   3e5ba:	b09b      	sub	sp, #108	; 0x6c
	if (param == NULL || json_obj == NULL) {
   3e5bc:	460f      	mov	r7, r1
   3e5be:	b921      	cbnz	r1, 3e5ca <json_add_data+0x14>
		return -EINVAL;
   3e5c0:	f06f 0615 	mvn.w	r6, #21
}
   3e5c4:	4630      	mov	r0, r6
   3e5c6:	b01b      	add	sp, #108	; 0x6c
   3e5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   3e5ca:	2264      	movs	r2, #100	; 0x64
   3e5cc:	2100      	movs	r1, #0
   3e5ce:	a801      	add	r0, sp, #4
   3e5d0:	f000 fb9b 	bl	3ed0a <memset>
	ret = modem_info_name_get(param->type,
   3e5d4:	a901      	add	r1, sp, #4
   3e5d6:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   3e5da:	f7ea fa3d 	bl	28a58 <modem_info_name_get>
	if (ret < 0) {
   3e5de:	1e05      	subs	r5, r0, #0
   3e5e0:	dbee      	blt.n	3e5c0 <json_add_data+0xa>
	data_type = modem_info_type_get(param->type);
   3e5e2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   3e5e6:	f7ea fa2d 	bl	28a44 <modem_info_type_get>
	if (data_type == AT_PARAM_TYPE_STRING &&
   3e5ea:	2803      	cmp	r0, #3
   3e5ec:	d113      	bne.n	3e616 <json_add_data+0x60>
   3e5ee:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   3e5f2:	2b03      	cmp	r3, #3
   3e5f4:	d00f      	beq.n	3e616 <json_add_data+0x60>
		total_len += strlen(param->value_string);
   3e5f6:	3402      	adds	r4, #2
   3e5f8:	4620      	mov	r0, r4
   3e5fa:	f7de fd93 	bl	1d124 <strlen>
		ret += json_add_str(json_obj, data_name, param->value_string);
   3e5fe:	4622      	mov	r2, r4
		total_len += strlen(param->value_string);
   3e600:	4606      	mov	r6, r0
		ret += json_add_str(json_obj, data_name, param->value_string);
   3e602:	a901      	add	r1, sp, #4
   3e604:	4638      	mov	r0, r7
   3e606:	f7ff ffc0 	bl	3e58a <json_add_str>
   3e60a:	4428      	add	r0, r5
	if (ret < 0) {
   3e60c:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   3e610:	bf28      	it	cs
   3e612:	4606      	movcs	r6, r0
   3e614:	e7d6      	b.n	3e5c4 <json_add_data+0xe>
		ret += json_add_num(json_obj, data_name, param->value);
   3e616:	8820      	ldrh	r0, [r4, #0]
   3e618:	f7de f854 	bl	1c6c4 <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   3e61c:	ec41 0b10 	vmov	d0, r0, r1
   3e620:	f7df f88e 	bl	1d740 <cJSON_CreateNumber>
	if (json_num == NULL) {
   3e624:	4602      	mov	r2, r0
   3e626:	b138      	cbz	r0, 3e638 <json_add_data+0x82>
	cJSON_AddItemToObject(parent, str, item);
   3e628:	4638      	mov	r0, r7
   3e62a:	a901      	add	r1, sp, #4
   3e62c:	f7ff f9df 	bl	3d9ee <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   3e630:	2000      	movs	r0, #0
		ret += json_add_num(json_obj, data_name, param->value);
   3e632:	4428      	add	r0, r5
		total_len += sizeof(u16_t);
   3e634:	2602      	movs	r6, #2
   3e636:	e7e9      	b.n	3e60c <json_add_data+0x56>
		return -ENOMEM;
   3e638:	f06f 000b 	mvn.w	r0, #11
   3e63c:	e7f9      	b.n	3e632 <json_add_data+0x7c>

0003e63e <sim_data_add>:
{
   3e63e:	b570      	push	{r4, r5, r6, lr}
   3e640:	460d      	mov	r5, r1
	if (sim == NULL || json_obj == NULL) {
   3e642:	4606      	mov	r6, r0
   3e644:	b180      	cbz	r0, 3e668 <sim_data_add+0x2a>
   3e646:	b179      	cbz	r1, 3e668 <sim_data_add+0x2a>
	total_len = json_add_data(&sim->uicc, json_obj);
   3e648:	f7ff ffb5 	bl	3e5b6 <json_add_data>
	total_len += json_add_data(&sim->iccid, json_obj);
   3e64c:	4629      	mov	r1, r5
	total_len = json_add_data(&sim->uicc, json_obj);
   3e64e:	4604      	mov	r4, r0
	total_len += json_add_data(&sim->iccid, json_obj);
   3e650:	f106 0070 	add.w	r0, r6, #112	; 0x70
   3e654:	f7ff ffaf 	bl	3e5b6 <json_add_data>
	total_len += json_add_data(&sim->imsi, json_obj);
   3e658:	4629      	mov	r1, r5
	total_len += json_add_data(&sim->iccid, json_obj);
   3e65a:	4404      	add	r4, r0
	total_len += json_add_data(&sim->imsi, json_obj);
   3e65c:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   3e660:	f7ff ffa9 	bl	3e5b6 <json_add_data>
   3e664:	4420      	add	r0, r4
}
   3e666:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3e668:	f06f 0015 	mvn.w	r0, #21
   3e66c:	e7fb      	b.n	3e666 <sim_data_add+0x28>

0003e66e <cloud_notify_event>:
 */
static inline void cloud_notify_event(struct cloud_backend *backend,
			struct cloud_event *evt,
			void *user_data)
{
	if (backend->config->handler) {
   3e66e:	6843      	ldr	r3, [r0, #4]
   3e670:	685b      	ldr	r3, [r3, #4]
   3e672:	b103      	cbz	r3, 3e676 <cloud_notify_event+0x8>
		backend->config->handler(backend, evt, user_data);
   3e674:	4718      	bx	r3
	}
}
   3e676:	4770      	bx	lr

0003e678 <user_data_set>:
}

static int user_data_set(const struct cloud_backend *const backend,
			 void *user_data)
{
	backend->config->user_data = user_data;
   3e678:	6843      	ldr	r3, [r0, #4]

	return 0;
}
   3e67a:	2000      	movs	r0, #0
	backend->config->user_data = user_data;
   3e67c:	60d9      	str	r1, [r3, #12]
}
   3e67e:	4770      	bx	lr

0003e680 <ping>:
{
   3e680:	b508      	push	{r3, lr}
	nct_process();
   3e682:	f7ec faf7 	bl	2ac74 <nct_process>
}
   3e686:	2000      	movs	r0, #0
   3e688:	bd08      	pop	{r3, pc}

0003e68a <keepalive_time_left>:
	return nct_keepalive_time_left();
   3e68a:	f7ec baff 	b.w	2ac8c <nct_keepalive_time_left>

0003e68e <input>:
   3e68e:	b508      	push	{r3, lr}
   3e690:	f7ec faf0 	bl	2ac74 <nct_process>
   3e694:	2000      	movs	r0, #0
   3e696:	bd08      	pop	{r3, pc}

0003e698 <disconnect>:
	return nrf_cloud_disconnect();
   3e698:	f7ea bfb4 	b.w	29604 <nrf_cloud_disconnect>

0003e69c <json_add_str>:
{
   3e69c:	b538      	push	{r3, r4, r5, lr}
   3e69e:	4604      	mov	r4, r0
	json_str = cJSON_CreateString(item);
   3e6a0:	4610      	mov	r0, r2
{
   3e6a2:	460d      	mov	r5, r1
	json_str = cJSON_CreateString(item);
   3e6a4:	f7e8 f93a 	bl	2691c <cJSON_CreateString>
	if (json_str == NULL) {
   3e6a8:	4602      	mov	r2, r0
   3e6aa:	b128      	cbz	r0, 3e6b8 <json_add_str+0x1c>
	cJSON_AddItemToObject(parent, str, item);
   3e6ac:	4620      	mov	r0, r4
   3e6ae:	4629      	mov	r1, r5
   3e6b0:	f7ff f99d 	bl	3d9ee <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   3e6b4:	2000      	movs	r0, #0
}
   3e6b6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   3e6b8:	f06f 000b 	mvn.w	r0, #11
   3e6bc:	e7fb      	b.n	3e6b6 <json_add_str+0x1a>

0003e6be <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3e6be:	b108      	cbz	r0, 3e6c4 <json_object_decode+0x6>
   3e6c0:	f7ff b986 	b.w	3d9d0 <cJSON_GetObjectItem>
}
   3e6c4:	4770      	bx	lr

0003e6c6 <json_add_null>:
{
   3e6c6:	b538      	push	{r3, r4, r5, lr}
   3e6c8:	4604      	mov	r4, r0
   3e6ca:	460d      	mov	r5, r1
	json_null = cJSON_CreateNull();
   3e6cc:	f7e8 f91a 	bl	26904 <cJSON_CreateNull>
	if (json_null == NULL) {
   3e6d0:	4602      	mov	r2, r0
   3e6d2:	b128      	cbz	r0, 3e6e0 <json_add_null+0x1a>
	cJSON_AddItemToObject(parent, str, item);
   3e6d4:	4620      	mov	r0, r4
   3e6d6:	4629      	mov	r1, r5
   3e6d8:	f7ff f989 	bl	3d9ee <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_null);
   3e6dc:	2000      	movs	r0, #0
}
   3e6de:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   3e6e0:	f06f 000b 	mvn.w	r0, #11
   3e6e4:	e7fb      	b.n	3e6de <json_add_null+0x18>

0003e6e6 <json_decode_and_alloc>:
{
   3e6e6:	b538      	push	{r3, r4, r5, lr}
   3e6e8:	460d      	mov	r5, r1
	if (obj == NULL || (obj->type != cJSON_String)) {
   3e6ea:	4604      	mov	r4, r0
   3e6ec:	b110      	cbz	r0, 3e6f4 <json_decode_and_alloc+0xe>
   3e6ee:	68c3      	ldr	r3, [r0, #12]
   3e6f0:	2b10      	cmp	r3, #16
   3e6f2:	d004      	beq.n	3e6fe <json_decode_and_alloc+0x18>
		data->ptr = NULL;
   3e6f4:	2300      	movs	r3, #0
		return -ENOENT;
   3e6f6:	f06f 0001 	mvn.w	r0, #1
		data->ptr = NULL;
   3e6fa:	606b      	str	r3, [r5, #4]
}
   3e6fc:	bd38      	pop	{r3, r4, r5, pc}
	data->len = strlen(obj->valuestring);
   3e6fe:	6900      	ldr	r0, [r0, #16]
   3e700:	f7de fd10 	bl	1d124 <strlen>
   3e704:	6028      	str	r0, [r5, #0]
	data->ptr = nrf_cloud_malloc(data->len + 1);
   3e706:	3001      	adds	r0, #1
   3e708:	f7f8 fb7e 	bl	36e08 <k_malloc>
   3e70c:	6068      	str	r0, [r5, #4]
	if (data->ptr == NULL) {
   3e70e:	b130      	cbz	r0, 3e71e <json_decode_and_alloc+0x38>
	strncpy((char *)data->ptr, obj->valuestring, data->len + 1);
   3e710:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   3e712:	6921      	ldr	r1, [r4, #16]
   3e714:	3201      	adds	r2, #1
   3e716:	f000 fce3 	bl	3f0e0 <strncpy>
	return 0;
   3e71a:	2000      	movs	r0, #0
   3e71c:	e7ee      	b.n	3e6fc <json_decode_and_alloc+0x16>
		return -ENOMEM;
   3e71e:	f06f 000b 	mvn.w	r0, #11
   3e722:	e7eb      	b.n	3e6fc <json_decode_and_alloc+0x16>

0003e724 <nrf_codec_init>:
{
   3e724:	b508      	push	{r3, lr}
	cJSON_Init();
   3e726:	f7e8 f929 	bl	2697c <cJSON_Init>
}
   3e72a:	2000      	movs	r0, #0
   3e72c:	bd08      	pop	{r3, pc}

0003e72e <cc_disconnection_handler>:
}

static int cc_disconnection_handler(const struct nct_evt *nct_evt)
{
	return 0; /* Nothing to do */
}
   3e72e:	2000      	movs	r0, #0
   3e730:	4770      	bx	lr

0003e732 <disconnection_handler>:
{
   3e732:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct nrf_cloud_evt evt = {
   3e734:	2210      	movs	r2, #16
   3e736:	2100      	movs	r1, #0
   3e738:	4668      	mov	r0, sp
   3e73a:	f000 fae6 	bl	3ed0a <memset>
   3e73e:	2308      	movs	r3, #8
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   3e740:	4669      	mov	r1, sp
   3e742:	2001      	movs	r0, #1
	const struct nrf_cloud_evt evt = {
   3e744:	f88d 3000 	strb.w	r3, [sp]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   3e748:	f7ea fe98 	bl	2947c <nfsm_set_current_state_and_notify>
}
   3e74c:	2000      	movs	r0, #0
   3e74e:	b005      	add	sp, #20
   3e750:	f85d fb04 	ldr.w	pc, [sp], #4

0003e754 <dc_rx_data_handler>:
	}
	return 0;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   3e754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct nrf_cloud_evt cloud_evt = {
   3e756:	2400      	movs	r4, #0
   3e758:	2306      	movs	r3, #6
   3e75a:	e9cd 4400 	strd	r4, r4, [sp]
   3e75e:	f88d 3000 	strb.w	r3, [sp]
   3e762:	6843      	ldr	r3, [r0, #4]
   3e764:	e893 0003 	ldmia.w	r3, {r0, r1}
   3e768:	ab04      	add	r3, sp, #16
   3e76a:	e903 0003 	stmdb	r3, {r0, r1}
		.type = NRF_CLOUD_EVT_RX_DATA,
		.data = nct_evt->param.dc->data,
	};

	/* All data is forwared to the app */
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   3e76e:	f7ea fe7f 	bl	29470 <nfsm_get_current_state>
   3e772:	4669      	mov	r1, sp
   3e774:	f7ea fe82 	bl	2947c <nfsm_set_current_state_and_notify>

	return 0;
}
   3e778:	4620      	mov	r0, r4
   3e77a:	b004      	add	sp, #16
   3e77c:	bd10      	pop	{r4, pc}

0003e77e <dc_connection_handler>:
{
   3e77e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (nct_evt->status == 0) {
   3e780:	6801      	ldr	r1, [r0, #0]
   3e782:	b951      	cbnz	r1, 3e79a <dc_connection_handler+0x1c>
		struct nrf_cloud_evt evt = {
   3e784:	2210      	movs	r2, #16
   3e786:	4668      	mov	r0, sp
   3e788:	f000 fabf 	bl	3ed0a <memset>
   3e78c:	2304      	movs	r3, #4
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   3e78e:	4669      	mov	r1, sp
   3e790:	2009      	movs	r0, #9
		struct nrf_cloud_evt evt = {
   3e792:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   3e796:	f7ea fe71 	bl	2947c <nfsm_set_current_state_and_notify>
}
   3e79a:	2000      	movs	r0, #0
   3e79c:	b005      	add	sp, #20
   3e79e:	f85d fb04 	ldr.w	pc, [sp], #4

0003e7a2 <cc_tx_ack_in_state_requested_handler>:
{
   3e7a2:	b508      	push	{r3, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   3e7a4:	f241 632e 	movw	r3, #5678	; 0x162e
   3e7a8:	6842      	ldr	r2, [r0, #4]
   3e7aa:	429a      	cmp	r2, r3
   3e7ac:	d103      	bne.n	3e7b6 <cc_tx_ack_in_state_requested_handler+0x14>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   3e7ae:	2100      	movs	r1, #0
   3e7b0:	2005      	movs	r0, #5
   3e7b2:	f7ea fe63 	bl	2947c <nfsm_set_current_state_and_notify>
}
   3e7b6:	2000      	movs	r0, #0
   3e7b8:	bd08      	pop	{r3, pc}

0003e7ba <cc_tx_ack_handler>:
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   3e7ba:	f241 622e 	movw	r2, #5678	; 0x162e
   3e7be:	6843      	ldr	r3, [r0, #4]
{
   3e7c0:	b510      	push	{r4, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   3e7c2:	4293      	cmp	r3, r2
   3e7c4:	d105      	bne.n	3e7d2 <cc_tx_ack_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   3e7c6:	2100      	movs	r1, #0
   3e7c8:	2005      	movs	r0, #5
   3e7ca:	f7ea fe57 	bl	2947c <nfsm_set_current_state_and_notify>
	return 0;
   3e7ce:	2400      	movs	r4, #0
   3e7d0:	e00b      	b.n	3e7ea <cc_tx_ack_handler+0x30>
	if (nct_evt->param.data_id == PAIRING_STATUS_REPORT_ID) {
   3e7d2:	f641 62d2 	movw	r2, #7890	; 0x1ed2
   3e7d6:	4293      	cmp	r3, r2
   3e7d8:	d1f9      	bne.n	3e7ce <cc_tx_ack_handler+0x14>
		err = nct_dc_connect();
   3e7da:	f7ec f9cd 	bl	2ab78 <nct_dc_connect>
		if (err) {
   3e7de:	4604      	mov	r4, r0
   3e7e0:	b918      	cbnz	r0, 3e7ea <cc_tx_ack_handler+0x30>
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTING, NULL);
   3e7e2:	4601      	mov	r1, r0
   3e7e4:	2008      	movs	r0, #8
   3e7e6:	f7ea fe49 	bl	2947c <nfsm_set_current_state_and_notify>
}
   3e7ea:	4620      	mov	r0, r4
   3e7ec:	bd10      	pop	{r4, pc}

0003e7ee <connection_handler>:
{
   3e7ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (nct_evt->status != 0) {
   3e7f0:	6803      	ldr	r3, [r0, #0]
   3e7f2:	b153      	cbz	r3, 3e80a <connection_handler+0x1c>
		evt.type = NRF_CLOUD_EVT_ERROR;
   3e7f4:	23ff      	movs	r3, #255	; 0xff
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   3e7f6:	4669      	mov	r1, sp
   3e7f8:	2002      	movs	r0, #2
		evt.type = NRF_CLOUD_EVT_ERROR;
   3e7fa:	f88d 3000 	strb.w	r3, [sp]
		return 0;
   3e7fe:	2400      	movs	r4, #0
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   3e800:	f7ea fe3c 	bl	2947c <nfsm_set_current_state_and_notify>
}
   3e804:	4620      	mov	r0, r4
   3e806:	b004      	add	sp, #16
   3e808:	bd10      	pop	{r4, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   3e80a:	2301      	movs	r3, #1
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   3e80c:	4669      	mov	r1, sp
   3e80e:	2002      	movs	r0, #2
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   3e810:	f88d 3000 	strb.w	r3, [sp]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   3e814:	f7ea fe32 	bl	2947c <nfsm_set_current_state_and_notify>
	err = nct_cc_connect();
   3e818:	f7ec f8a0 	bl	2a95c <nct_cc_connect>
	if (err) {
   3e81c:	4604      	mov	r4, r0
   3e81e:	2800      	cmp	r0, #0
   3e820:	d1f0      	bne.n	3e804 <connection_handler+0x16>
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   3e822:	4601      	mov	r1, r0
   3e824:	2003      	movs	r0, #3
   3e826:	f7ea fe29 	bl	2947c <nfsm_set_current_state_and_notify>
	return 0;
   3e82a:	e7eb      	b.n	3e804 <connection_handler+0x16>

0003e82c <dc_disconnection_handler>:
   3e82c:	2000      	movs	r0, #0
   3e82e:	4770      	bx	lr

0003e830 <dc_tx_ack_handler>:
   3e830:	2000      	movs	r0, #0
   3e832:	4770      	bx	lr

0003e834 <nfsm_init>:
}
   3e834:	2000      	movs	r0, #0
   3e836:	4770      	bx	lr

0003e838 <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   3e838:	2101      	movs	r1, #1
   3e83a:	f7eb bc6b 	b.w	2a114 <dc_send>

0003e83e <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   3e83e:	2100      	movs	r1, #0
   3e840:	f7eb bc68 	b.w	2a114 <dc_send>

0003e844 <error_evt_send.isra.1>:
static int error_evt_send(const struct download_client *dl, int error)
   3e844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   3e846:	2300      	movs	r3, #0
   3e848:	9301      	str	r3, [sp, #4]
   3e84a:	9303      	str	r3, [sp, #12]
   3e84c:	2301      	movs	r3, #1
		.error = -error
   3e84e:	4249      	negs	r1, r1
	const struct download_client_evt evt = {
   3e850:	f88d 3004 	strb.w	r3, [sp, #4]
   3e854:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   3e856:	6803      	ldr	r3, [r0, #0]
   3e858:	a801      	add	r0, sp, #4
   3e85a:	4798      	blx	r3
}
   3e85c:	b005      	add	sp, #20
   3e85e:	f85d fb04 	ldr.w	pc, [sp], #4

0003e862 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   3e862:	b130      	cbz	r0, 3e872 <download_client_file_size_get+0x10>
   3e864:	b129      	cbz	r1, 3e872 <download_client_file_size_get+0x10>
		return -EINVAL;
	}

	*size = client->file_size;
   3e866:	f241 0308 	movw	r3, #4104	; 0x1008
   3e86a:	58c3      	ldr	r3, [r0, r3]

	return 0;
   3e86c:	2000      	movs	r0, #0
	*size = client->file_size;
   3e86e:	600b      	str	r3, [r1, #0]
	return 0;
   3e870:	4770      	bx	lr
		return -EINVAL;
   3e872:	f06f 0015 	mvn.w	r0, #21
}
   3e876:	4770      	bx	lr

0003e878 <dfu_target_callback_handler>:
	switch (evt) {
   3e878:	b118      	cbz	r0, 3e882 <dfu_target_callback_handler+0xa>
   3e87a:	2801      	cmp	r0, #1
   3e87c:	d004      	beq.n	3e888 <dfu_target_callback_handler+0x10>
		send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   3e87e:	2004      	movs	r0, #4
   3e880:	e000      	b.n	3e884 <dfu_target_callback_handler+0xc>
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_PENDING);
   3e882:	2002      	movs	r0, #2
		send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   3e884:	f7ed b856 	b.w	2b934 <send_evt>
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_DONE);
   3e888:	2003      	movs	r0, #3
   3e88a:	e7fb      	b.n	3e884 <dfu_target_callback_handler+0xc>

0003e88c <aws_jobs_cmp>:

bool aws_jobs_cmp(const char *sub, const char *pub, size_t pub_len,
		 const u8_t *suffix)
{
   3e88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e890:	460c      	mov	r4, r1
   3e892:	4690      	mov	r8, r2
   3e894:	461d      	mov	r5, r3
	int ret;

	if (sub == NULL || pub == NULL || suffix == NULL ||
   3e896:	4606      	mov	r6, r0
   3e898:	b328      	cbz	r0, 3e8e6 <aws_jobs_cmp+0x5a>
   3e89a:	b331      	cbz	r1, 3e8ea <aws_jobs_cmp+0x5e>
   3e89c:	b33b      	cbz	r3, 3e8ee <aws_jobs_cmp+0x62>
   3e89e:	7803      	ldrb	r3, [r0, #0]
   3e8a0:	b33b      	cbz	r3, 3e8f2 <aws_jobs_cmp+0x66>
	    sub[0] == '\0' || pub[0] == '\0') {
   3e8a2:	780b      	ldrb	r3, [r1, #0]
   3e8a4:	b32b      	cbz	r3, 3e8f2 <aws_jobs_cmp+0x66>
		return false;
	}

	size_t sub_len = strlen(sub);
   3e8a6:	f7de fc3d 	bl	1d124 <strlen>
   3e8aa:	4607      	mov	r7, r0
	size_t suff_len = strlen(suffix);
   3e8ac:	4628      	mov	r0, r5
   3e8ae:	f7de fc39 	bl	1d124 <strlen>

	if (sub[sub_len - 1] == '#') {
   3e8b2:	19f3      	adds	r3, r6, r7
   3e8b4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
	size_t suff_len = strlen(suffix);
   3e8b8:	4681      	mov	r9, r0
	if (sub[sub_len - 1] == '#') {
   3e8ba:	2b23      	cmp	r3, #35	; 0x23
		/* Strip trailing '/#' */
		sub_len -= 2;
   3e8bc:	bf08      	it	eq
   3e8be:	3f02      	subeq	r7, #2
	}

	ret = strncmp(sub, pub, sub_len);
   3e8c0:	463a      	mov	r2, r7
   3e8c2:	4621      	mov	r1, r4
   3e8c4:	4630      	mov	r0, r6
   3e8c6:	f000 fbf9 	bl	3f0bc <strncmp>
	if (ret == 0 && suff_len > 0) {
   3e8ca:	b948      	cbnz	r0, 3e8e0 <aws_jobs_cmp+0x54>
   3e8cc:	f1b9 0f00 	cmp.w	r9, #0
   3e8d0:	d006      	beq.n	3e8e0 <aws_jobs_cmp+0x54>
		/* Everything up until suffix is correct, check suffix */
		return strncmp(&pub[pub_len - suff_len], suffix, suff_len) == 0;
   3e8d2:	eba8 0009 	sub.w	r0, r8, r9
   3e8d6:	464a      	mov	r2, r9
   3e8d8:	4629      	mov	r1, r5
   3e8da:	4420      	add	r0, r4
   3e8dc:	f000 fbee 	bl	3f0bc <strncmp>
	} else {
		return ret == 0;
   3e8e0:	fab0 f080 	clz	r0, r0
   3e8e4:	0940      	lsrs	r0, r0, #5
	}
}
   3e8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return false;
   3e8ea:	4608      	mov	r0, r1
   3e8ec:	e7fb      	b.n	3e8e6 <aws_jobs_cmp+0x5a>
   3e8ee:	4618      	mov	r0, r3
   3e8f0:	e7f9      	b.n	3e8e6 <aws_jobs_cmp+0x5a>
   3e8f2:	4618      	mov	r0, r3
   3e8f4:	e7f7      	b.n	3e8e6 <aws_jobs_cmp+0x5a>

0003e8f6 <strncpy_nullterm>:
{
   3e8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e8f8:	4604      	mov	r4, r0
	size_t len = strlen(src) + 1;
   3e8fa:	4608      	mov	r0, r1
{
   3e8fc:	4615      	mov	r5, r2
   3e8fe:	460f      	mov	r7, r1
	size_t len = strlen(src) + 1;
   3e900:	f7de fc10 	bl	1d124 <strlen>
   3e904:	1c46      	adds	r6, r0, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3e906:	42ae      	cmp	r6, r5
   3e908:	4632      	mov	r2, r6
   3e90a:	4620      	mov	r0, r4
   3e90c:	bf28      	it	cs
   3e90e:	462a      	movcs	r2, r5
   3e910:	4639      	mov	r1, r7
   3e912:	f000 f9da 	bl	3ecca <memcpy>
	if (len > maxlen) {
   3e916:	42ae      	cmp	r6, r5
		dst[maxlen - 1] = '\0';
   3e918:	bf82      	ittt	hi
   3e91a:	2300      	movhi	r3, #0
   3e91c:	1964      	addhi	r4, r4, r5
   3e91e:	f804 3c01 	strbhi.w	r3, [r4, #-1]
}
   3e922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003e924 <sensor_sim_attr_set>:
}
   3e924:	2000      	movs	r0, #0
   3e926:	4770      	bx	lr

0003e928 <sensor_sim_thread>:
{
   3e928:	b570      	push	{r4, r5, r6, lr}
   3e92a:	4604      	mov	r4, r0
	struct sensor_sim_data *drv_data = dev->driver_data;
   3e92c:	6885      	ldr	r5, [r0, #8]
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   3e92e:	f105 0634 	add.w	r6, r5, #52	; 0x34
	return z_impl_k_sleep(ms);
   3e932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   3e936:	f7f9 ff9f 	bl	38878 <z_impl_k_sleep>
		if (drv_data->drdy_handler != NULL) {
   3e93a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   3e93c:	2b00      	cmp	r3, #0
   3e93e:	d0f8      	beq.n	3e932 <sensor_sim_thread+0xa>
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   3e940:	4631      	mov	r1, r6
   3e942:	4620      	mov	r0, r4
   3e944:	4798      	blx	r3
   3e946:	e7f4      	b.n	3e932 <sensor_sim_thread+0xa>

0003e948 <sample_fetch>:
}
   3e948:	2000      	movs	r0, #0
   3e94a:	4770      	bx	lr

0003e94c <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   3e94c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   3e950:	4770      	bx	lr

0003e952 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   3e952:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   3e956:	4770      	bx	lr

0003e958 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   3e958:	f44f 7080 	mov.w	r0, #256	; 0x100
   3e95c:	4770      	bx	lr

0003e95e <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   3e95e:	f7fe b819 	b.w	3c994 <z_clock_idle_exit>

0003e962 <k_mem_pool_malloc>:
{
   3e962:	b507      	push	{r0, r1, r2, lr}
   3e964:	2204      	movs	r2, #4
   3e966:	188a      	adds	r2, r1, r2
   3e968:	d204      	bcs.n	3e974 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   3e96a:	2300      	movs	r3, #0
   3e96c:	4669      	mov	r1, sp
   3e96e:	f7f8 f985 	bl	36c7c <k_mem_pool_alloc>
   3e972:	b118      	cbz	r0, 3e97c <k_mem_pool_malloc+0x1a>
		return NULL;
   3e974:	2000      	movs	r0, #0
}
   3e976:	b003      	add	sp, #12
   3e978:	f85d fb04 	ldr.w	pc, [sp], #4
   3e97c:	e9dd 3200 	ldrd	r3, r2, [sp]
   3e980:	601a      	str	r2, [r3, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   3e982:	9800      	ldr	r0, [sp, #0]
   3e984:	3004      	adds	r0, #4
   3e986:	e7f6      	b.n	3e976 <k_mem_pool_malloc+0x14>

0003e988 <k_free>:
	if (ptr != NULL) {
   3e988:	b110      	cbz	r0, 3e990 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   3e98a:	3804      	subs	r0, #4
   3e98c:	f7f8 b9de 	b.w	36d4c <k_mem_pool_free_id>
}
   3e990:	4770      	bx	lr

0003e992 <k_calloc>:
{
   3e992:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   3e994:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   3e998:	b118      	cbz	r0, 3e9a2 <k_calloc+0x10>
   3e99a:	fbb4 f0f0 	udiv	r0, r4, r0
   3e99e:	4281      	cmp	r1, r0
   3e9a0:	d10a      	bne.n	3e9b8 <k_calloc+0x26>
	ret = k_malloc(bounds);
   3e9a2:	4620      	mov	r0, r4
   3e9a4:	f7f8 fa30 	bl	36e08 <k_malloc>
	if (ret != NULL) {
   3e9a8:	4605      	mov	r5, r0
   3e9aa:	b118      	cbz	r0, 3e9b4 <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   3e9ac:	4622      	mov	r2, r4
   3e9ae:	2100      	movs	r1, #0
   3e9b0:	f000 f9ab 	bl	3ed0a <memset>
}
   3e9b4:	4628      	mov	r0, r5
   3e9b6:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   3e9b8:	2500      	movs	r5, #0
   3e9ba:	e7fb      	b.n	3e9b4 <k_calloc+0x22>

0003e9bc <z_impl_k_mutex_init>:
{
   3e9bc:	4603      	mov	r3, r0
	mutex->owner = NULL;
   3e9be:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   3e9c0:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   3e9c4:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   3e9c8:	4770      	bx	lr

0003e9ca <z_queue_node_peek>:
{
   3e9ca:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   3e9cc:	4604      	mov	r4, r0
   3e9ce:	b130      	cbz	r0, 3e9de <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3e9d0:	6802      	ldr	r2, [r0, #0]
   3e9d2:	0793      	lsls	r3, r2, #30
   3e9d4:	d003      	beq.n	3e9de <z_queue_node_peek+0x14>
		ret = anode->data;
   3e9d6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3e9d8:	b109      	cbz	r1, 3e9de <z_queue_node_peek+0x14>
			k_free(anode);
   3e9da:	f7ff ffd5 	bl	3e988 <k_free>
}
   3e9de:	4620      	mov	r0, r4
   3e9e0:	bd10      	pop	{r4, pc}

0003e9e2 <z_impl_k_queue_init>:
	list->head = NULL;
   3e9e2:	2300      	movs	r3, #0
	list->tail = NULL;
   3e9e4:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   3e9e8:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   3e9ea:	f100 030c 	add.w	r3, r0, #12
   3e9ee:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   3e9f2:	4770      	bx	lr

0003e9f4 <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   3e9f4:	460a      	mov	r2, r1
   3e9f6:	2300      	movs	r3, #0
   3e9f8:	6841      	ldr	r1, [r0, #4]
   3e9fa:	f7f8 bd09 	b.w	37410 <queue_insert>

0003e9fe <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3e9fe:	7b43      	ldrb	r3, [r0, #13]
   3ea00:	06db      	lsls	r3, r3, #27
   3ea02:	bf03      	ittte	eq
   3ea04:	6980      	ldreq	r0, [r0, #24]
   3ea06:	fab0 f080 	clzeq	r0, r0
   3ea0a:	0940      	lsreq	r0, r0, #5
   3ea0c:	2000      	movne	r0, #0
}
   3ea0e:	4770      	bx	lr

0003ea10 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   3ea10:	f990 000e 	ldrsb.w	r0, [r0, #14]
   3ea14:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   3ea18:	4298      	cmp	r0, r3
   3ea1a:	bfac      	ite	ge
   3ea1c:	2000      	movge	r0, #0
   3ea1e:	2001      	movlt	r0, #1
   3ea20:	4770      	bx	lr

0003ea22 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3ea22:	4603      	mov	r3, r0
   3ea24:	b920      	cbnz	r0, 3ea30 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3ea26:	f3ef 8205 	mrs	r2, IPSR
   3ea2a:	b90a      	cbnz	r2, 3ea30 <z_reschedule_irqlock+0xe>
   3ea2c:	f7e5 ba1e 	b.w	23e6c <arch_swap>
   3ea30:	f383 8811 	msr	BASEPRI, r3
   3ea34:	f3bf 8f6f 	isb	sy
}
   3ea38:	4770      	bx	lr

0003ea3a <z_reschedule_unlocked>:
	__asm__ volatile(
   3ea3a:	f04f 0320 	mov.w	r3, #32
   3ea3e:	f3ef 8011 	mrs	r0, BASEPRI
   3ea42:	f383 8811 	msr	BASEPRI, r3
   3ea46:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3ea4a:	f7ff bfea 	b.w	3ea22 <z_reschedule_irqlock>

0003ea4e <z_priq_dumb_best>:
	return list->head == list;
   3ea4e:	6803      	ldr	r3, [r0, #0]
}
   3ea50:	4298      	cmp	r0, r3
   3ea52:	bf14      	ite	ne
   3ea54:	4618      	movne	r0, r3
   3ea56:	2000      	moveq	r0, #0
   3ea58:	4770      	bx	lr

0003ea5a <z_unpend_all>:
{
   3ea5a:	b570      	push	{r4, r5, r6, lr}
   3ea5c:	4606      	mov	r6, r0
	int need_sched = 0;
   3ea5e:	2500      	movs	r5, #0
   3ea60:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ea62:	42a6      	cmp	r6, r4
   3ea64:	d000      	beq.n	3ea68 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3ea66:	b90c      	cbnz	r4, 3ea6c <z_unpend_all+0x12>
}
   3ea68:	4628      	mov	r0, r5
   3ea6a:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
   3ea6c:	4620      	mov	r0, r4
   3ea6e:	f7f8 ffa7 	bl	379c0 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   3ea72:	4620      	mov	r0, r4
   3ea74:	f7ff ffc3 	bl	3e9fe <z_is_thread_ready>
		need_sched = 1;
   3ea78:	2501      	movs	r5, #1
   3ea7a:	2800      	cmp	r0, #0
   3ea7c:	d0f0      	beq.n	3ea60 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   3ea7e:	4620      	mov	r0, r4
   3ea80:	f7f9 f8a6 	bl	37bd0 <z_add_thread_to_ready_q>
   3ea84:	e7ec      	b.n	3ea60 <z_unpend_all+0x6>

0003ea86 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   3ea86:	b15a      	cbz	r2, 3eaa0 <z_impl_k_sem_init+0x1a>
   3ea88:	428a      	cmp	r2, r1
   3ea8a:	d309      	bcc.n	3eaa0 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   3ea8c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   3ea90:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   3ea94:	e9c0 0000 	strd	r0, r0, [r0]
   3ea98:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   3ea9c:	2000      	movs	r0, #0
   3ea9e:	4770      	bx	lr
		return -EINVAL;
   3eaa0:	f06f 0015 	mvn.w	r0, #21
}
   3eaa4:	4770      	bx	lr

0003eaa6 <k_is_in_isr>:
   3eaa6:	f3ef 8005 	mrs	r0, IPSR
}
   3eaaa:	3000      	adds	r0, #0
   3eaac:	bf18      	it	ne
   3eaae:	2001      	movne	r0, #1
   3eab0:	4770      	bx	lr

0003eab2 <z_impl_k_thread_name_set>:
}
   3eab2:	f06f 0057 	mvn.w	r0, #87	; 0x57
   3eab6:	4770      	bx	lr

0003eab8 <k_thread_name_get>:
}
   3eab8:	2000      	movs	r0, #0
   3eaba:	4770      	bx	lr

0003eabc <z_new_thread_init>:
{
   3eabc:	b510      	push	{r4, lr}
	thread_base->user_options = (u8_t)options;
   3eabe:	9c02      	ldr	r4, [sp, #8]
	thread_base->prio = priority;
   3eac0:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   3eac2:	7304      	strb	r4, [r0, #12]
	thread_base->sched_locked = 0U;
   3eac4:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   3eac6:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   3eac8:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   3eaca:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   3eacc:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   3ead0:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   3ead4:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   3ead8:	bd10      	pop	{r4, pc}

0003eada <z_thread_single_resume>:
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3eada:	7b42      	ldrb	r2, [r0, #13]
   3eadc:	f022 0110 	bic.w	r1, r2, #16
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3eae0:	0712      	lsls	r2, r2, #28
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3eae2:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3eae4:	d103      	bne.n	3eaee <z_thread_single_resume+0x14>
	if (z_is_thread_ready(thread)) {
   3eae6:	6983      	ldr	r3, [r0, #24]
   3eae8:	b90b      	cbnz	r3, 3eaee <z_thread_single_resume+0x14>
		z_add_thread_to_ready_q(thread);
   3eaea:	f7f9 b871 	b.w	37bd0 <z_add_thread_to_ready_q>
}
   3eaee:	4770      	bx	lr

0003eaf0 <k_work_submit_to_queue>:
{
   3eaf0:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3eaf2:	f101 0308 	add.w	r3, r1, #8
   3eaf6:	e8d3 2fef 	ldaex	r2, [r3]
   3eafa:	f042 0c01 	orr.w	ip, r2, #1
   3eafe:	e8c3 cfee 	stlex	lr, ip, [r3]
   3eb02:	f1be 0f00 	cmp.w	lr, #0
   3eb06:	d1f6      	bne.n	3eaf6 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   3eb08:	07d3      	lsls	r3, r2, #31
   3eb0a:	d403      	bmi.n	3eb14 <k_work_submit_to_queue+0x24>
}
   3eb0c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   3eb10:	f7ff bf70 	b.w	3e9f4 <k_queue_append>
}
   3eb14:	f85d fb04 	ldr.w	pc, [sp], #4

0003eb18 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   3eb18:	f1a0 010c 	sub.w	r1, r0, #12
   3eb1c:	6900      	ldr	r0, [r0, #16]
   3eb1e:	f7ff bfe7 	b.w	3eaf0 <k_work_submit_to_queue>

0003eb22 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   3eb22:	69c3      	ldr	r3, [r0, #28]
{
   3eb24:	b570      	push	{r4, r5, r6, lr}
   3eb26:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   3eb28:	2b00      	cmp	r3, #0
   3eb2a:	d039      	beq.n	3eba0 <work_cancel+0x7e>
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   3eb2c:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3eb30:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   3eb34:	07db      	lsls	r3, r3, #31
   3eb36:	d52f      	bpl.n	3eb98 <work_cancel+0x76>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   3eb38:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   3eb3a:	69c2      	ldr	r2, [r0, #28]
   3eb3c:	6813      	ldr	r3, [r2, #0]
   3eb3e:	b913      	cbnz	r3, 3eb46 <work_cancel+0x24>
			return -EINVAL;
   3eb40:	f06f 0015 	mvn.w	r0, #21
}
   3eb44:	bd70      	pop	{r4, r5, r6, pc}
   3eb46:	429c      	cmp	r4, r3
   3eb48:	d121      	bne.n	3eb8e <work_cancel+0x6c>
Z_GENLIST_REMOVE(sflist, sfnode)
   3eb4a:	6823      	ldr	r3, [r4, #0]
   3eb4c:	6856      	ldr	r6, [r2, #4]
   3eb4e:	f023 0003 	bic.w	r0, r3, #3
   3eb52:	b991      	cbnz	r1, 3eb7a <work_cancel+0x58>
   3eb54:	42b4      	cmp	r4, r6
	list->head = node;
   3eb56:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   3eb58:	d100      	bne.n	3eb5c <work_cancel+0x3a>
	list->tail = node;
   3eb5a:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3eb5c:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3eb5e:	f003 0303 	and.w	r3, r3, #3
   3eb62:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   3eb64:	2000      	movs	r0, #0
   3eb66:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3eb68:	e8d5 3fef 	ldaex	r3, [r5]
   3eb6c:	f023 0301 	bic.w	r3, r3, #1
   3eb70:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3eb74:	2a00      	cmp	r2, #0
   3eb76:	d0e5      	beq.n	3eb44 <work_cancel+0x22>
   3eb78:	e7f6      	b.n	3eb68 <work_cancel+0x46>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3eb7a:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   3eb7c:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   3eb7e:	f003 0303 	and.w	r3, r3, #3
   3eb82:	ea43 0300 	orr.w	r3, r3, r0
   3eb86:	600b      	str	r3, [r1, #0]
	list->tail = node;
   3eb88:	bf08      	it	eq
   3eb8a:	6051      	streq	r1, [r2, #4]
   3eb8c:	e7e6      	b.n	3eb5c <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3eb8e:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   3eb90:	4619      	mov	r1, r3
   3eb92:	f020 0303 	bic.w	r3, r0, #3
   3eb96:	e7d2      	b.n	3eb3e <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
   3eb98:	300c      	adds	r0, #12
   3eb9a:	f7fa fb6f 	bl	3927c <z_abort_timeout>
   3eb9e:	e7e1      	b.n	3eb64 <work_cancel+0x42>
		return -EAGAIN;
   3eba0:	f06f 000a 	mvn.w	r0, #10
   3eba4:	e7ce      	b.n	3eb44 <work_cancel+0x22>

0003eba6 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   3eba6:	2300      	movs	r3, #0
   3eba8:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   3ebac:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   3ebb0:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   3ebb2:	61c3      	str	r3, [r0, #28]
}
   3ebb4:	4770      	bx	lr

0003ebb6 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   3ebb6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   3ebb8:	f7fa fd58 	bl	3966c <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   3ebbc:	bd08      	pop	{r3, pc}

0003ebbe <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   3ebbe:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   3ebc0:	f7fa fd54 	bl	3966c <z_tick_get>
			return (t * to_hz + off) / from_hz;
   3ebc4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   3ebc8:	fba0 2304 	umull	r2, r3, r0, r4
   3ebcc:	fb04 3301 	mla	r3, r4, r1, r3
   3ebd0:	0bd0      	lsrs	r0, r2, #15
}
   3ebd2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   3ebd6:	0bd9      	lsrs	r1, r3, #15
   3ebd8:	bd10      	pop	{r4, pc}

0003ebda <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   3ebda:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   3ebdc:	6884      	ldr	r4, [r0, #8]
{
   3ebde:	4605      	mov	r5, r0
   3ebe0:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   3ebe2:	b19c      	cbz	r4, 3ec0c <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   3ebe4:	68a3      	ldr	r3, [r4, #8]
   3ebe6:	b95b      	cbnz	r3, 3ec00 <signal_poll_event+0x26>
	int retcode = 0;
   3ebe8:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   3ebea:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   3ebec:	2300      	movs	r3, #0
   3ebee:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   3ebf0:	68eb      	ldr	r3, [r5, #12]
   3ebf2:	f3c3 3204 	ubfx	r2, r3, #12, #5
   3ebf6:	4316      	orrs	r6, r2
   3ebf8:	f366 3310 	bfi	r3, r6, #12, #5
   3ebfc:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   3ebfe:	e004      	b.n	3ec0a <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   3ec00:	4798      	blx	r3
		poller->is_polling = false;
   3ec02:	2300      	movs	r3, #0
		if (retcode < 0) {
   3ec04:	2800      	cmp	r0, #0
		poller->is_polling = false;
   3ec06:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   3ec08:	daf0      	bge.n	3ebec <signal_poll_event+0x12>
}
   3ec0a:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   3ec0c:	4620      	mov	r0, r4
   3ec0e:	e7ed      	b.n	3ebec <signal_poll_event+0x12>

0003ec10 <add_event>:
{
   3ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ec12:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   3ec14:	e9d0 2300 	ldrd	r2, r3, [r0]
   3ec18:	4290      	cmp	r0, r2
   3ec1a:	4604      	mov	r4, r0
   3ec1c:	460d      	mov	r5, r1
   3ec1e:	d106      	bne.n	3ec2e <add_event+0x1e>
	node->prev = list->tail;
   3ec20:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   3ec22:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   3ec24:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   3ec26:	6863      	ldr	r3, [r4, #4]
   3ec28:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3ec2a:	6065      	str	r5, [r4, #4]
}
   3ec2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   3ec2e:	2b00      	cmp	r3, #0
   3ec30:	d0f6      	beq.n	3ec20 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   3ec32:	689b      	ldr	r3, [r3, #8]
   3ec34:	6879      	ldr	r1, [r7, #4]
   3ec36:	6858      	ldr	r0, [r3, #4]
   3ec38:	f7ff feea 	bl	3ea10 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   3ec3c:	2800      	cmp	r0, #0
   3ec3e:	d1ef      	bne.n	3ec20 <add_event+0x10>
	return list->head == list;
   3ec40:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ec42:	42b4      	cmp	r4, r6
   3ec44:	d0ec      	beq.n	3ec20 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3ec46:	2e00      	cmp	r6, #0
   3ec48:	d0ea      	beq.n	3ec20 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   3ec4a:	68b3      	ldr	r3, [r6, #8]
   3ec4c:	6878      	ldr	r0, [r7, #4]
   3ec4e:	6859      	ldr	r1, [r3, #4]
   3ec50:	f7ff fede 	bl	3ea10 <z_is_t1_higher_prio_than_t2>
   3ec54:	b128      	cbz	r0, 3ec62 <add_event+0x52>
	node->prev = successor->prev;
   3ec56:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3ec58:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   3ec5c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   3ec5e:	6075      	str	r5, [r6, #4]
			return;
   3ec60:	e7e4      	b.n	3ec2c <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   3ec62:	6863      	ldr	r3, [r4, #4]
   3ec64:	429e      	cmp	r6, r3
   3ec66:	d0db      	beq.n	3ec20 <add_event+0x10>
   3ec68:	6836      	ldr	r6, [r6, #0]
   3ec6a:	e7ec      	b.n	3ec46 <add_event+0x36>

0003ec6c <z_handle_obj_poll_events>:
	return list->head == list;
   3ec6c:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   3ec6e:	4298      	cmp	r0, r3
   3ec70:	d009      	beq.n	3ec86 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   3ec72:	e9d3 2000 	ldrd	r2, r0, [r3]
   3ec76:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   3ec78:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   3ec7a:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   3ec7c:	4618      	mov	r0, r3
	node->prev = NULL;
   3ec7e:	e9c3 2200 	strd	r2, r2, [r3]
   3ec82:	f7ff bfaa 	b.w	3ebda <signal_poll_event>
	}
}
   3ec86:	4770      	bx	lr

0003ec88 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   3ec88:	4770      	bx	lr

0003ec8a <atoi>:
   3ec8a:	220a      	movs	r2, #10
   3ec8c:	2100      	movs	r1, #0
   3ec8e:	f7fb bf2d 	b.w	3aaec <strtol>

0003ec92 <memchr>:
   3ec92:	b2c9      	uxtb	r1, r1
   3ec94:	4402      	add	r2, r0
   3ec96:	b510      	push	{r4, lr}
   3ec98:	4290      	cmp	r0, r2
   3ec9a:	4603      	mov	r3, r0
   3ec9c:	d101      	bne.n	3eca2 <memchr+0x10>
   3ec9e:	2300      	movs	r3, #0
   3eca0:	e003      	b.n	3ecaa <memchr+0x18>
   3eca2:	781c      	ldrb	r4, [r3, #0]
   3eca4:	3001      	adds	r0, #1
   3eca6:	428c      	cmp	r4, r1
   3eca8:	d1f6      	bne.n	3ec98 <memchr+0x6>
   3ecaa:	4618      	mov	r0, r3
   3ecac:	bd10      	pop	{r4, pc}

0003ecae <memcmp>:
   3ecae:	b530      	push	{r4, r5, lr}
   3ecb0:	3901      	subs	r1, #1
   3ecb2:	2400      	movs	r4, #0
   3ecb4:	42a2      	cmp	r2, r4
   3ecb6:	d101      	bne.n	3ecbc <memcmp+0xe>
   3ecb8:	2000      	movs	r0, #0
   3ecba:	e005      	b.n	3ecc8 <memcmp+0x1a>
   3ecbc:	5d03      	ldrb	r3, [r0, r4]
   3ecbe:	3401      	adds	r4, #1
   3ecc0:	5d0d      	ldrb	r5, [r1, r4]
   3ecc2:	42ab      	cmp	r3, r5
   3ecc4:	d0f6      	beq.n	3ecb4 <memcmp+0x6>
   3ecc6:	1b58      	subs	r0, r3, r5
   3ecc8:	bd30      	pop	{r4, r5, pc}

0003ecca <memcpy>:
   3ecca:	440a      	add	r2, r1
   3eccc:	1e43      	subs	r3, r0, #1
   3ecce:	4291      	cmp	r1, r2
   3ecd0:	d100      	bne.n	3ecd4 <memcpy+0xa>
   3ecd2:	4770      	bx	lr
   3ecd4:	b510      	push	{r4, lr}
   3ecd6:	f811 4b01 	ldrb.w	r4, [r1], #1
   3ecda:	4291      	cmp	r1, r2
   3ecdc:	f803 4f01 	strb.w	r4, [r3, #1]!
   3ece0:	d1f9      	bne.n	3ecd6 <memcpy+0xc>
   3ece2:	bd10      	pop	{r4, pc}

0003ece4 <__memcpy_chk>:
   3ece4:	429a      	cmp	r2, r3
   3ece6:	b508      	push	{r3, lr}
   3ece8:	d901      	bls.n	3ecee <__memcpy_chk+0xa>
   3ecea:	f7fc f887 	bl	3adfc <__chk_fail>
   3ecee:	4281      	cmp	r1, r0
   3ecf0:	d804      	bhi.n	3ecfc <__memcpy_chk+0x18>
   3ecf2:	188b      	adds	r3, r1, r2
   3ecf4:	4298      	cmp	r0, r3
   3ecf6:	d3f8      	bcc.n	3ecea <__memcpy_chk+0x6>
   3ecf8:	4281      	cmp	r1, r0
   3ecfa:	d102      	bne.n	3ed02 <__memcpy_chk+0x1e>
   3ecfc:	1883      	adds	r3, r0, r2
   3ecfe:	4299      	cmp	r1, r3
   3ed00:	d3f3      	bcc.n	3ecea <__memcpy_chk+0x6>
   3ed02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3ed06:	f7ff bfe0 	b.w	3ecca <memcpy>

0003ed0a <memset>:
   3ed0a:	4402      	add	r2, r0
   3ed0c:	4603      	mov	r3, r0
   3ed0e:	4293      	cmp	r3, r2
   3ed10:	d100      	bne.n	3ed14 <memset+0xa>
   3ed12:	4770      	bx	lr
   3ed14:	f803 1b01 	strb.w	r1, [r3], #1
   3ed18:	e7f9      	b.n	3ed0e <memset+0x4>

0003ed1a <__sfputc_r>:
   3ed1a:	6893      	ldr	r3, [r2, #8]
   3ed1c:	3b01      	subs	r3, #1
   3ed1e:	2b00      	cmp	r3, #0
   3ed20:	6093      	str	r3, [r2, #8]
   3ed22:	b410      	push	{r4}
   3ed24:	da08      	bge.n	3ed38 <__sfputc_r+0x1e>
   3ed26:	6994      	ldr	r4, [r2, #24]
   3ed28:	42a3      	cmp	r3, r4
   3ed2a:	db01      	blt.n	3ed30 <__sfputc_r+0x16>
   3ed2c:	290a      	cmp	r1, #10
   3ed2e:	d103      	bne.n	3ed38 <__sfputc_r+0x1e>
   3ed30:	f85d 4b04 	ldr.w	r4, [sp], #4
   3ed34:	f7fb bf90 	b.w	3ac58 <__swbuf_r>
   3ed38:	6813      	ldr	r3, [r2, #0]
   3ed3a:	1c58      	adds	r0, r3, #1
   3ed3c:	6010      	str	r0, [r2, #0]
   3ed3e:	4608      	mov	r0, r1
   3ed40:	7019      	strb	r1, [r3, #0]
   3ed42:	f85d 4b04 	ldr.w	r4, [sp], #4
   3ed46:	4770      	bx	lr

0003ed48 <__sfputs_r>:
   3ed48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ed4a:	4606      	mov	r6, r0
   3ed4c:	460f      	mov	r7, r1
   3ed4e:	4614      	mov	r4, r2
   3ed50:	18d5      	adds	r5, r2, r3
   3ed52:	42ac      	cmp	r4, r5
   3ed54:	d101      	bne.n	3ed5a <__sfputs_r+0x12>
   3ed56:	2000      	movs	r0, #0
   3ed58:	e007      	b.n	3ed6a <__sfputs_r+0x22>
   3ed5a:	463a      	mov	r2, r7
   3ed5c:	f814 1b01 	ldrb.w	r1, [r4], #1
   3ed60:	4630      	mov	r0, r6
   3ed62:	f7ff ffda 	bl	3ed1a <__sfputc_r>
   3ed66:	1c43      	adds	r3, r0, #1
   3ed68:	d1f3      	bne.n	3ed52 <__sfputs_r+0xa>
   3ed6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003ed6c <__cvt>:
   3ed6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   3ed70:	ec55 4b10 	vmov	r4, r5, d0
   3ed74:	2d00      	cmp	r5, #0
   3ed76:	460e      	mov	r6, r1
   3ed78:	4691      	mov	r9, r2
   3ed7a:	4619      	mov	r1, r3
   3ed7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   3ed80:	f04f 0200 	mov.w	r2, #0
   3ed84:	da03      	bge.n	3ed8e <__cvt+0x22>
   3ed86:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   3ed8a:	222d      	movs	r2, #45	; 0x2d
   3ed8c:	461d      	mov	r5, r3
   3ed8e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   3ed90:	700a      	strb	r2, [r1, #0]
   3ed92:	f027 0720 	bic.w	r7, r7, #32
   3ed96:	2f46      	cmp	r7, #70	; 0x46
   3ed98:	d004      	beq.n	3eda4 <__cvt+0x38>
   3ed9a:	2f45      	cmp	r7, #69	; 0x45
   3ed9c:	d100      	bne.n	3eda0 <__cvt+0x34>
   3ed9e:	3601      	adds	r6, #1
   3eda0:	2102      	movs	r1, #2
   3eda2:	e000      	b.n	3eda6 <__cvt+0x3a>
   3eda4:	2103      	movs	r1, #3
   3eda6:	ab03      	add	r3, sp, #12
   3eda8:	4632      	mov	r2, r6
   3edaa:	9301      	str	r3, [sp, #4]
   3edac:	ab02      	add	r3, sp, #8
   3edae:	ec45 4b10 	vmov	d0, r4, r5
   3edb2:	9300      	str	r3, [sp, #0]
   3edb4:	4653      	mov	r3, sl
   3edb6:	f7e0 fd5b 	bl	1f870 <_dtoa_r>
   3edba:	2f47      	cmp	r7, #71	; 0x47
   3edbc:	4680      	mov	r8, r0
   3edbe:	d102      	bne.n	3edc6 <__cvt+0x5a>
   3edc0:	f019 0f01 	tst.w	r9, #1
   3edc4:	d022      	beq.n	3ee0c <__cvt+0xa0>
   3edc6:	2f46      	cmp	r7, #70	; 0x46
   3edc8:	eb08 0906 	add.w	r9, r8, r6
   3edcc:	d111      	bne.n	3edf2 <__cvt+0x86>
   3edce:	f898 3000 	ldrb.w	r3, [r8]
   3edd2:	2b30      	cmp	r3, #48	; 0x30
   3edd4:	d10a      	bne.n	3edec <__cvt+0x80>
   3edd6:	2200      	movs	r2, #0
   3edd8:	2300      	movs	r3, #0
   3edda:	4620      	mov	r0, r4
   3eddc:	4629      	mov	r1, r5
   3edde:	f7dd ff53 	bl	1cc88 <__aeabi_dcmpeq>
   3ede2:	b918      	cbnz	r0, 3edec <__cvt+0x80>
   3ede4:	f1c6 0601 	rsb	r6, r6, #1
   3ede8:	f8ca 6000 	str.w	r6, [sl]
   3edec:	f8da 3000 	ldr.w	r3, [sl]
   3edf0:	4499      	add	r9, r3
   3edf2:	2200      	movs	r2, #0
   3edf4:	2300      	movs	r3, #0
   3edf6:	4620      	mov	r0, r4
   3edf8:	4629      	mov	r1, r5
   3edfa:	f7dd ff45 	bl	1cc88 <__aeabi_dcmpeq>
   3edfe:	b108      	cbz	r0, 3ee04 <__cvt+0x98>
   3ee00:	f8cd 900c 	str.w	r9, [sp, #12]
   3ee04:	2230      	movs	r2, #48	; 0x30
   3ee06:	9b03      	ldr	r3, [sp, #12]
   3ee08:	454b      	cmp	r3, r9
   3ee0a:	d308      	bcc.n	3ee1e <__cvt+0xb2>
   3ee0c:	9b03      	ldr	r3, [sp, #12]
   3ee0e:	4640      	mov	r0, r8
   3ee10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3ee12:	eba3 0308 	sub.w	r3, r3, r8
   3ee16:	6013      	str	r3, [r2, #0]
   3ee18:	b004      	add	sp, #16
   3ee1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3ee1e:	1c59      	adds	r1, r3, #1
   3ee20:	9103      	str	r1, [sp, #12]
   3ee22:	701a      	strb	r2, [r3, #0]
   3ee24:	e7ef      	b.n	3ee06 <__cvt+0x9a>

0003ee26 <__exponent>:
   3ee26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3ee28:	2900      	cmp	r1, #0
   3ee2a:	7002      	strb	r2, [r0, #0]
   3ee2c:	bfba      	itte	lt
   3ee2e:	4249      	neglt	r1, r1
   3ee30:	232d      	movlt	r3, #45	; 0x2d
   3ee32:	232b      	movge	r3, #43	; 0x2b
   3ee34:	2909      	cmp	r1, #9
   3ee36:	7043      	strb	r3, [r0, #1]
   3ee38:	dd22      	ble.n	3ee80 <__exponent+0x5a>
   3ee3a:	f10d 0307 	add.w	r3, sp, #7
   3ee3e:	260a      	movs	r6, #10
   3ee40:	461f      	mov	r7, r3
   3ee42:	2963      	cmp	r1, #99	; 0x63
   3ee44:	f103 35ff 	add.w	r5, r3, #4294967295
   3ee48:	fb91 f2f6 	sdiv	r2, r1, r6
   3ee4c:	fb06 1412 	mls	r4, r6, r2, r1
   3ee50:	f104 0430 	add.w	r4, r4, #48	; 0x30
   3ee54:	f803 4c01 	strb.w	r4, [r3, #-1]
   3ee58:	dc0a      	bgt.n	3ee70 <__exponent+0x4a>
   3ee5a:	3230      	adds	r2, #48	; 0x30
   3ee5c:	3b02      	subs	r3, #2
   3ee5e:	f805 2c01 	strb.w	r2, [r5, #-1]
   3ee62:	1c82      	adds	r2, r0, #2
   3ee64:	42bb      	cmp	r3, r7
   3ee66:	4614      	mov	r4, r2
   3ee68:	d305      	bcc.n	3ee76 <__exponent+0x50>
   3ee6a:	1a20      	subs	r0, r4, r0
   3ee6c:	b003      	add	sp, #12
   3ee6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3ee70:	462b      	mov	r3, r5
   3ee72:	4611      	mov	r1, r2
   3ee74:	e7e5      	b.n	3ee42 <__exponent+0x1c>
   3ee76:	f813 1b01 	ldrb.w	r1, [r3], #1
   3ee7a:	f802 1b01 	strb.w	r1, [r2], #1
   3ee7e:	e7f1      	b.n	3ee64 <__exponent+0x3e>
   3ee80:	2330      	movs	r3, #48	; 0x30
   3ee82:	1d04      	adds	r4, r0, #4
   3ee84:	4419      	add	r1, r3
   3ee86:	7083      	strb	r3, [r0, #2]
   3ee88:	70c1      	strb	r1, [r0, #3]
   3ee8a:	e7ee      	b.n	3ee6a <__exponent+0x44>

0003ee8c <_printf_common>:
   3ee8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3ee90:	4691      	mov	r9, r2
   3ee92:	461f      	mov	r7, r3
   3ee94:	688a      	ldr	r2, [r1, #8]
   3ee96:	4606      	mov	r6, r0
   3ee98:	690b      	ldr	r3, [r1, #16]
   3ee9a:	460c      	mov	r4, r1
   3ee9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   3eea0:	4293      	cmp	r3, r2
   3eea2:	bfb8      	it	lt
   3eea4:	4613      	movlt	r3, r2
   3eea6:	f8c9 3000 	str.w	r3, [r9]
   3eeaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   3eeae:	b112      	cbz	r2, 3eeb6 <_printf_common+0x2a>
   3eeb0:	3301      	adds	r3, #1
   3eeb2:	f8c9 3000 	str.w	r3, [r9]
   3eeb6:	6823      	ldr	r3, [r4, #0]
   3eeb8:	0699      	lsls	r1, r3, #26
   3eeba:	bf42      	ittt	mi
   3eebc:	f8d9 3000 	ldrmi.w	r3, [r9]
   3eec0:	3302      	addmi	r3, #2
   3eec2:	f8c9 3000 	strmi.w	r3, [r9]
   3eec6:	6825      	ldr	r5, [r4, #0]
   3eec8:	f015 0506 	ands.w	r5, r5, #6
   3eecc:	d107      	bne.n	3eede <_printf_common+0x52>
   3eece:	f104 0a19 	add.w	sl, r4, #25
   3eed2:	68e3      	ldr	r3, [r4, #12]
   3eed4:	f8d9 2000 	ldr.w	r2, [r9]
   3eed8:	1a9b      	subs	r3, r3, r2
   3eeda:	42ab      	cmp	r3, r5
   3eedc:	dc2b      	bgt.n	3ef36 <_printf_common+0xaa>
   3eede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   3eee2:	6822      	ldr	r2, [r4, #0]
   3eee4:	3300      	adds	r3, #0
   3eee6:	bf18      	it	ne
   3eee8:	2301      	movne	r3, #1
   3eeea:	0692      	lsls	r2, r2, #26
   3eeec:	d430      	bmi.n	3ef50 <_printf_common+0xc4>
   3eeee:	f104 0243 	add.w	r2, r4, #67	; 0x43
   3eef2:	4639      	mov	r1, r7
   3eef4:	4630      	mov	r0, r6
   3eef6:	47c0      	blx	r8
   3eef8:	3001      	adds	r0, #1
   3eefa:	d023      	beq.n	3ef44 <_printf_common+0xb8>
   3eefc:	6823      	ldr	r3, [r4, #0]
   3eefe:	341a      	adds	r4, #26
   3ef00:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   3ef04:	f003 0306 	and.w	r3, r3, #6
   3ef08:	f8d9 2000 	ldr.w	r2, [r9]
   3ef0c:	f04f 0900 	mov.w	r9, #0
   3ef10:	2b04      	cmp	r3, #4
   3ef12:	f854 3c12 	ldr.w	r3, [r4, #-18]
   3ef16:	bf08      	it	eq
   3ef18:	1aad      	subeq	r5, r5, r2
   3ef1a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   3ef1e:	bf14      	ite	ne
   3ef20:	2500      	movne	r5, #0
   3ef22:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   3ef26:	4293      	cmp	r3, r2
   3ef28:	bfc4      	itt	gt
   3ef2a:	1a9b      	subgt	r3, r3, r2
   3ef2c:	18ed      	addgt	r5, r5, r3
   3ef2e:	454d      	cmp	r5, r9
   3ef30:	d11a      	bne.n	3ef68 <_printf_common+0xdc>
   3ef32:	2000      	movs	r0, #0
   3ef34:	e008      	b.n	3ef48 <_printf_common+0xbc>
   3ef36:	2301      	movs	r3, #1
   3ef38:	4652      	mov	r2, sl
   3ef3a:	4639      	mov	r1, r7
   3ef3c:	4630      	mov	r0, r6
   3ef3e:	47c0      	blx	r8
   3ef40:	3001      	adds	r0, #1
   3ef42:	d103      	bne.n	3ef4c <_printf_common+0xc0>
   3ef44:	f04f 30ff 	mov.w	r0, #4294967295
   3ef48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3ef4c:	3501      	adds	r5, #1
   3ef4e:	e7c0      	b.n	3eed2 <_printf_common+0x46>
   3ef50:	18e1      	adds	r1, r4, r3
   3ef52:	1c5a      	adds	r2, r3, #1
   3ef54:	2030      	movs	r0, #48	; 0x30
   3ef56:	3302      	adds	r3, #2
   3ef58:	4422      	add	r2, r4
   3ef5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   3ef5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   3ef62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   3ef66:	e7c2      	b.n	3eeee <_printf_common+0x62>
   3ef68:	2301      	movs	r3, #1
   3ef6a:	4622      	mov	r2, r4
   3ef6c:	4639      	mov	r1, r7
   3ef6e:	4630      	mov	r0, r6
   3ef70:	47c0      	blx	r8
   3ef72:	3001      	adds	r0, #1
   3ef74:	d0e6      	beq.n	3ef44 <_printf_common+0xb8>
   3ef76:	f109 0901 	add.w	r9, r9, #1
   3ef7a:	e7d8      	b.n	3ef2e <_printf_common+0xa2>

0003ef7c <__sprintf_chk>:
   3ef7c:	b408      	push	{r3}
   3ef7e:	b517      	push	{r0, r1, r2, r4, lr}
   3ef80:	ab05      	add	r3, sp, #20
   3ef82:	1e14      	subs	r4, r2, #0
   3ef84:	f853 1b04 	ldr.w	r1, [r3], #4
   3ef88:	9301      	str	r3, [sp, #4]
   3ef8a:	da07      	bge.n	3ef9c <__sprintf_chk+0x20>
   3ef8c:	461a      	mov	r2, r3
   3ef8e:	f7fb fe59 	bl	3ac44 <vsiprintf>
   3ef92:	b003      	add	sp, #12
   3ef94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ef98:	b001      	add	sp, #4
   3ef9a:	4770      	bx	lr
   3ef9c:	460a      	mov	r2, r1
   3ef9e:	4621      	mov	r1, r4
   3efa0:	f7fb fe2c 	bl	3abfc <vsniprintf>
   3efa4:	2800      	cmp	r0, #0
   3efa6:	dbf4      	blt.n	3ef92 <__sprintf_chk+0x16>
   3efa8:	42a0      	cmp	r0, r4
   3efaa:	d3f2      	bcc.n	3ef92 <__sprintf_chk+0x16>
   3efac:	f7fb ff26 	bl	3adfc <__chk_fail>

0003efb0 <__sread>:
   3efb0:	b510      	push	{r4, lr}
   3efb2:	460c      	mov	r4, r1
   3efb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3efb8:	f7fc ffa6 	bl	3bf08 <_read_r>
   3efbc:	2800      	cmp	r0, #0
   3efbe:	bfab      	itete	ge
   3efc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   3efc2:	89a3      	ldrhlt	r3, [r4, #12]
   3efc4:	181b      	addge	r3, r3, r0
   3efc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   3efca:	bfac      	ite	ge
   3efcc:	6563      	strge	r3, [r4, #84]	; 0x54
   3efce:	81a3      	strhlt	r3, [r4, #12]
   3efd0:	bd10      	pop	{r4, pc}

0003efd2 <__seofread>:
   3efd2:	2000      	movs	r0, #0
   3efd4:	4770      	bx	lr

0003efd6 <__swrite>:
   3efd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3efda:	461f      	mov	r7, r3
   3efdc:	898b      	ldrh	r3, [r1, #12]
   3efde:	4605      	mov	r5, r0
   3efe0:	460c      	mov	r4, r1
   3efe2:	05db      	lsls	r3, r3, #23
   3efe4:	4616      	mov	r6, r2
   3efe6:	d505      	bpl.n	3eff4 <__swrite+0x1e>
   3efe8:	2302      	movs	r3, #2
   3efea:	2200      	movs	r2, #0
   3efec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3eff0:	f7fc fade 	bl	3b5b0 <_lseek_r>
   3eff4:	89a3      	ldrh	r3, [r4, #12]
   3eff6:	4632      	mov	r2, r6
   3eff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3effc:	4628      	mov	r0, r5
   3effe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   3f002:	81a3      	strh	r3, [r4, #12]
   3f004:	463b      	mov	r3, r7
   3f006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3f00a:	f7fb be77 	b.w	3acfc <_write_r>

0003f00e <__sseek>:
   3f00e:	b510      	push	{r4, lr}
   3f010:	460c      	mov	r4, r1
   3f012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3f016:	f7fc facb 	bl	3b5b0 <_lseek_r>
   3f01a:	1c43      	adds	r3, r0, #1
   3f01c:	89a3      	ldrh	r3, [r4, #12]
   3f01e:	bf15      	itete	ne
   3f020:	6560      	strne	r0, [r4, #84]	; 0x54
   3f022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   3f026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   3f02a:	81a3      	strheq	r3, [r4, #12]
   3f02c:	bf18      	it	ne
   3f02e:	81a3      	strhne	r3, [r4, #12]
   3f030:	bd10      	pop	{r4, pc}

0003f032 <__sclose>:
   3f032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3f036:	f7fb bf05 	b.w	3ae44 <_close_r>

0003f03a <strcat>:
   3f03a:	4603      	mov	r3, r0
   3f03c:	b510      	push	{r4, lr}
   3f03e:	461a      	mov	r2, r3
   3f040:	f812 4b01 	ldrb.w	r4, [r2], #1
   3f044:	b93c      	cbnz	r4, 3f056 <strcat+0x1c>
   3f046:	3b01      	subs	r3, #1
   3f048:	f811 2b01 	ldrb.w	r2, [r1], #1
   3f04c:	f803 2f01 	strb.w	r2, [r3, #1]!
   3f050:	2a00      	cmp	r2, #0
   3f052:	d1f9      	bne.n	3f048 <strcat+0xe>
   3f054:	bd10      	pop	{r4, pc}
   3f056:	4613      	mov	r3, r2
   3f058:	e7f1      	b.n	3f03e <strcat+0x4>

0003f05a <strchr>:
   3f05a:	b2c9      	uxtb	r1, r1
   3f05c:	4603      	mov	r3, r0
   3f05e:	f810 2b01 	ldrb.w	r2, [r0], #1
   3f062:	b11a      	cbz	r2, 3f06c <strchr+0x12>
   3f064:	428a      	cmp	r2, r1
   3f066:	d1f9      	bne.n	3f05c <strchr+0x2>
   3f068:	4618      	mov	r0, r3
   3f06a:	4770      	bx	lr
   3f06c:	2900      	cmp	r1, #0
   3f06e:	bf18      	it	ne
   3f070:	2300      	movne	r3, #0
   3f072:	e7f9      	b.n	3f068 <strchr+0xe>

0003f074 <strcpy>:
   3f074:	4603      	mov	r3, r0
   3f076:	f811 2b01 	ldrb.w	r2, [r1], #1
   3f07a:	f803 2b01 	strb.w	r2, [r3], #1
   3f07e:	2a00      	cmp	r2, #0
   3f080:	d1f9      	bne.n	3f076 <strcpy+0x2>
   3f082:	4770      	bx	lr

0003f084 <__strcpy_chk>:
   3f084:	b570      	push	{r4, r5, r6, lr}
   3f086:	4605      	mov	r5, r0
   3f088:	4608      	mov	r0, r1
   3f08a:	4616      	mov	r6, r2
   3f08c:	460c      	mov	r4, r1
   3f08e:	f7de f849 	bl	1d124 <strlen>
   3f092:	1c42      	adds	r2, r0, #1
   3f094:	42b2      	cmp	r2, r6
   3f096:	d901      	bls.n	3f09c <__strcpy_chk+0x18>
   3f098:	f7fb feb0 	bl	3adfc <__chk_fail>
   3f09c:	42ac      	cmp	r4, r5
   3f09e:	d804      	bhi.n	3f0aa <__strcpy_chk+0x26>
   3f0a0:	18a3      	adds	r3, r4, r2
   3f0a2:	429d      	cmp	r5, r3
   3f0a4:	d3f8      	bcc.n	3f098 <__strcpy_chk+0x14>
   3f0a6:	42ac      	cmp	r4, r5
   3f0a8:	d102      	bne.n	3f0b0 <__strcpy_chk+0x2c>
   3f0aa:	18ab      	adds	r3, r5, r2
   3f0ac:	429c      	cmp	r4, r3
   3f0ae:	d3f3      	bcc.n	3f098 <__strcpy_chk+0x14>
   3f0b0:	4621      	mov	r1, r4
   3f0b2:	4628      	mov	r0, r5
   3f0b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3f0b8:	f7ff be07 	b.w	3ecca <memcpy>

0003f0bc <strncmp>:
   3f0bc:	b510      	push	{r4, lr}
   3f0be:	b16a      	cbz	r2, 3f0dc <strncmp+0x20>
   3f0c0:	3901      	subs	r1, #1
   3f0c2:	1884      	adds	r4, r0, r2
   3f0c4:	f810 3b01 	ldrb.w	r3, [r0], #1
   3f0c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   3f0cc:	4293      	cmp	r3, r2
   3f0ce:	d103      	bne.n	3f0d8 <strncmp+0x1c>
   3f0d0:	42a0      	cmp	r0, r4
   3f0d2:	d001      	beq.n	3f0d8 <strncmp+0x1c>
   3f0d4:	2b00      	cmp	r3, #0
   3f0d6:	d1f5      	bne.n	3f0c4 <strncmp+0x8>
   3f0d8:	1a98      	subs	r0, r3, r2
   3f0da:	bd10      	pop	{r4, pc}
   3f0dc:	4610      	mov	r0, r2
   3f0de:	e7fc      	b.n	3f0da <strncmp+0x1e>

0003f0e0 <strncpy>:
   3f0e0:	3901      	subs	r1, #1
   3f0e2:	4603      	mov	r3, r0
   3f0e4:	b510      	push	{r4, lr}
   3f0e6:	b132      	cbz	r2, 3f0f6 <strncpy+0x16>
   3f0e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   3f0ec:	3a01      	subs	r2, #1
   3f0ee:	f803 4b01 	strb.w	r4, [r3], #1
   3f0f2:	2c00      	cmp	r4, #0
   3f0f4:	d1f7      	bne.n	3f0e6 <strncpy+0x6>
   3f0f6:	441a      	add	r2, r3
   3f0f8:	2100      	movs	r1, #0
   3f0fa:	4293      	cmp	r3, r2
   3f0fc:	d100      	bne.n	3f100 <strncpy+0x20>
   3f0fe:	bd10      	pop	{r4, pc}
   3f100:	f803 1b01 	strb.w	r1, [r3], #1
   3f104:	e7f9      	b.n	3f0fa <strncpy+0x1a>

0003f106 <strnlen>:
   3f106:	4602      	mov	r2, r0
   3f108:	4401      	add	r1, r0
   3f10a:	b510      	push	{r4, lr}
   3f10c:	428a      	cmp	r2, r1
   3f10e:	4613      	mov	r3, r2
   3f110:	d003      	beq.n	3f11a <strnlen+0x14>
   3f112:	781c      	ldrb	r4, [r3, #0]
   3f114:	3201      	adds	r2, #1
   3f116:	2c00      	cmp	r4, #0
   3f118:	d1f8      	bne.n	3f10c <strnlen+0x6>
   3f11a:	1a18      	subs	r0, r3, r0
   3f11c:	bd10      	pop	{r4, pc}

0003f11e <strstr>:
   3f11e:	b5f0      	push	{r4, r5, r6, r7, lr}
   3f120:	780c      	ldrb	r4, [r1, #0]
   3f122:	b164      	cbz	r4, 3f13e <strstr+0x20>
   3f124:	4603      	mov	r3, r0
   3f126:	781a      	ldrb	r2, [r3, #0]
   3f128:	4618      	mov	r0, r3
   3f12a:	1c5e      	adds	r6, r3, #1
   3f12c:	b90a      	cbnz	r2, 3f132 <strstr+0x14>
   3f12e:	4610      	mov	r0, r2
   3f130:	e005      	b.n	3f13e <strstr+0x20>
   3f132:	4294      	cmp	r4, r2
   3f134:	d108      	bne.n	3f148 <strstr+0x2a>
   3f136:	460d      	mov	r5, r1
   3f138:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   3f13c:	b902      	cbnz	r2, 3f140 <strstr+0x22>
   3f13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3f140:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   3f144:	4297      	cmp	r7, r2
   3f146:	d0f7      	beq.n	3f138 <strstr+0x1a>
   3f148:	4633      	mov	r3, r6
   3f14a:	e7ec      	b.n	3f126 <strstr+0x8>

0003f14c <sulp>:
   3f14c:	b570      	push	{r4, r5, r6, lr}
   3f14e:	4604      	mov	r4, r0
   3f150:	460d      	mov	r5, r1
   3f152:	4616      	mov	r6, r2
   3f154:	ec45 4b10 	vmov	d0, r4, r5
   3f158:	f7fc fad6 	bl	3b708 <__ulp>
   3f15c:	ec51 0b10 	vmov	r0, r1, d0
   3f160:	b17e      	cbz	r6, 3f182 <sulp+0x36>
   3f162:	f3c5 530a 	ubfx	r3, r5, #20, #11
   3f166:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   3f16a:	2b00      	cmp	r3, #0
   3f16c:	dd09      	ble.n	3f182 <sulp+0x36>
   3f16e:	051b      	lsls	r3, r3, #20
   3f170:	2400      	movs	r4, #0
   3f172:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   3f176:	4622      	mov	r2, r4
   3f178:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   3f17c:	462b      	mov	r3, r5
   3f17e:	f7dd fb1b 	bl	1c7b8 <__aeabi_dmul>
   3f182:	bd70      	pop	{r4, r5, r6, pc}

0003f184 <_strtol_r>:
   3f184:	f7fb bc3a 	b.w	3a9fc <_strtol_l.isra.0>

0003f188 <_strtoul_r>:
   3f188:	f7fb bcba 	b.w	3ab00 <_strtoul_l.isra.0>

0003f18c <_vsniprintf_r>:
   3f18c:	b530      	push	{r4, r5, lr}
   3f18e:	1e14      	subs	r4, r2, #0
   3f190:	4605      	mov	r5, r0
   3f192:	b09b      	sub	sp, #108	; 0x6c
   3f194:	4618      	mov	r0, r3
   3f196:	da05      	bge.n	3f1a4 <_vsniprintf_r+0x18>
   3f198:	238b      	movs	r3, #139	; 0x8b
   3f19a:	f04f 30ff 	mov.w	r0, #4294967295
   3f19e:	602b      	str	r3, [r5, #0]
   3f1a0:	b01b      	add	sp, #108	; 0x6c
   3f1a2:	bd30      	pop	{r4, r5, pc}
   3f1a4:	f44f 7302 	mov.w	r3, #520	; 0x208
   3f1a8:	9100      	str	r1, [sp, #0]
   3f1aa:	9104      	str	r1, [sp, #16]
   3f1ac:	4602      	mov	r2, r0
   3f1ae:	f8ad 300c 	strh.w	r3, [sp, #12]
   3f1b2:	bf14      	ite	ne
   3f1b4:	f104 33ff 	addne.w	r3, r4, #4294967295
   3f1b8:	4623      	moveq	r3, r4
   3f1ba:	4669      	mov	r1, sp
   3f1bc:	4628      	mov	r0, r5
   3f1be:	9302      	str	r3, [sp, #8]
   3f1c0:	9305      	str	r3, [sp, #20]
   3f1c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3f1c6:	f8ad 300e 	strh.w	r3, [sp, #14]
   3f1ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   3f1cc:	f7fc fb10 	bl	3b7f0 <_svfiprintf_r>
   3f1d0:	1c43      	adds	r3, r0, #1
   3f1d2:	bfbc      	itt	lt
   3f1d4:	238b      	movlt	r3, #139	; 0x8b
   3f1d6:	602b      	strlt	r3, [r5, #0]
   3f1d8:	2c00      	cmp	r4, #0
   3f1da:	d0e1      	beq.n	3f1a0 <_vsniprintf_r+0x14>
   3f1dc:	9b00      	ldr	r3, [sp, #0]
   3f1de:	2200      	movs	r2, #0
   3f1e0:	701a      	strb	r2, [r3, #0]
   3f1e2:	e7dd      	b.n	3f1a0 <_vsniprintf_r+0x14>

0003f1e4 <abort>:
   3f1e4:	b508      	push	{r3, lr}
   3f1e6:	2006      	movs	r0, #6
   3f1e8:	f7fc fea0 	bl	3bf2c <raise>
   3f1ec:	2001      	movs	r0, #1
   3f1ee:	f7e5 fdc3 	bl	24d78 <_exit>

0003f1f2 <quorem>:
   3f1f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f1f6:	6903      	ldr	r3, [r0, #16]
   3f1f8:	4680      	mov	r8, r0
   3f1fa:	690c      	ldr	r4, [r1, #16]
   3f1fc:	42a3      	cmp	r3, r4
   3f1fe:	f2c0 8084 	blt.w	3f30a <quorem+0x118>
   3f202:	3c01      	subs	r4, #1
   3f204:	f108 0514 	add.w	r5, r8, #20
   3f208:	f101 0714 	add.w	r7, r1, #20
   3f20c:	00a0      	lsls	r0, r4, #2
   3f20e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   3f212:	182b      	adds	r3, r5, r0
   3f214:	eb07 0900 	add.w	r9, r7, r0
   3f218:	9301      	str	r3, [sp, #4]
   3f21a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   3f21e:	3301      	adds	r3, #1
   3f220:	429a      	cmp	r2, r3
   3f222:	fbb2 f6f3 	udiv	r6, r2, r3
   3f226:	d333      	bcc.n	3f290 <quorem+0x9e>
   3f228:	f04f 0a00 	mov.w	sl, #0
   3f22c:	46bc      	mov	ip, r7
   3f22e:	46ae      	mov	lr, r5
   3f230:	46d3      	mov	fp, sl
   3f232:	f85c 2b04 	ldr.w	r2, [ip], #4
   3f236:	b293      	uxth	r3, r2
   3f238:	45e1      	cmp	r9, ip
   3f23a:	ea4f 4212 	mov.w	r2, r2, lsr #16
   3f23e:	fb06 a303 	mla	r3, r6, r3, sl
   3f242:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   3f246:	b29b      	uxth	r3, r3
   3f248:	fb06 a202 	mla	r2, r6, r2, sl
   3f24c:	ebab 0303 	sub.w	r3, fp, r3
   3f250:	f8de b000 	ldr.w	fp, [lr]
   3f254:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   3f258:	fa1f fb8b 	uxth.w	fp, fp
   3f25c:	445b      	add	r3, fp
   3f25e:	fa1f fb82 	uxth.w	fp, r2
   3f262:	f8de 2000 	ldr.w	r2, [lr]
   3f266:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   3f26a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   3f26e:	b29b      	uxth	r3, r3
   3f270:	ea4f 4b22 	mov.w	fp, r2, asr #16
   3f274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3f278:	f84e 3b04 	str.w	r3, [lr], #4
   3f27c:	d2d9      	bcs.n	3f232 <quorem+0x40>
   3f27e:	582b      	ldr	r3, [r5, r0]
   3f280:	b933      	cbnz	r3, 3f290 <quorem+0x9e>
   3f282:	9b01      	ldr	r3, [sp, #4]
   3f284:	3b04      	subs	r3, #4
   3f286:	429d      	cmp	r5, r3
   3f288:	461a      	mov	r2, r3
   3f28a:	d332      	bcc.n	3f2f2 <quorem+0x100>
   3f28c:	f8c8 4010 	str.w	r4, [r8, #16]
   3f290:	4640      	mov	r0, r8
   3f292:	f000 fbc9 	bl	3fa28 <__mcmp>
   3f296:	2800      	cmp	r0, #0
   3f298:	db27      	blt.n	3f2ea <quorem+0xf8>
   3f29a:	3601      	adds	r6, #1
   3f29c:	4628      	mov	r0, r5
   3f29e:	f04f 0c00 	mov.w	ip, #0
   3f2a2:	f857 1b04 	ldr.w	r1, [r7], #4
   3f2a6:	f8d0 e000 	ldr.w	lr, [r0]
   3f2aa:	b28b      	uxth	r3, r1
   3f2ac:	45b9      	cmp	r9, r7
   3f2ae:	fa1f f28e 	uxth.w	r2, lr
   3f2b2:	ebac 0303 	sub.w	r3, ip, r3
   3f2b6:	4413      	add	r3, r2
   3f2b8:	ea4f 4211 	mov.w	r2, r1, lsr #16
   3f2bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   3f2c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   3f2c4:	b29b      	uxth	r3, r3
   3f2c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
   3f2ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3f2ce:	f840 3b04 	str.w	r3, [r0], #4
   3f2d2:	d2e6      	bcs.n	3f2a2 <quorem+0xb0>
   3f2d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   3f2d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3f2dc:	b92a      	cbnz	r2, 3f2ea <quorem+0xf8>
   3f2de:	3b04      	subs	r3, #4
   3f2e0:	429d      	cmp	r5, r3
   3f2e2:	461a      	mov	r2, r3
   3f2e4:	d30b      	bcc.n	3f2fe <quorem+0x10c>
   3f2e6:	f8c8 4010 	str.w	r4, [r8, #16]
   3f2ea:	4630      	mov	r0, r6
   3f2ec:	b003      	add	sp, #12
   3f2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f2f2:	6812      	ldr	r2, [r2, #0]
   3f2f4:	3b04      	subs	r3, #4
   3f2f6:	2a00      	cmp	r2, #0
   3f2f8:	d1c8      	bne.n	3f28c <quorem+0x9a>
   3f2fa:	3c01      	subs	r4, #1
   3f2fc:	e7c3      	b.n	3f286 <quorem+0x94>
   3f2fe:	6812      	ldr	r2, [r2, #0]
   3f300:	3b04      	subs	r3, #4
   3f302:	2a00      	cmp	r2, #0
   3f304:	d1ef      	bne.n	3f2e6 <quorem+0xf4>
   3f306:	3c01      	subs	r4, #1
   3f308:	e7ea      	b.n	3f2e0 <quorem+0xee>
   3f30a:	2000      	movs	r0, #0
   3f30c:	e7ee      	b.n	3f2ec <quorem+0xfa>

0003f30e <__sfmoreglue>:
   3f30e:	b570      	push	{r4, r5, r6, lr}
   3f310:	1e4a      	subs	r2, r1, #1
   3f312:	2568      	movs	r5, #104	; 0x68
   3f314:	460e      	mov	r6, r1
   3f316:	4355      	muls	r5, r2
   3f318:	f105 0174 	add.w	r1, r5, #116	; 0x74
   3f31c:	f7fa fdd4 	bl	39ec8 <_malloc_r>
   3f320:	4604      	mov	r4, r0
   3f322:	b140      	cbz	r0, 3f336 <__sfmoreglue+0x28>
   3f324:	2100      	movs	r1, #0
   3f326:	f105 0268 	add.w	r2, r5, #104	; 0x68
   3f32a:	e9c0 1600 	strd	r1, r6, [r0]
   3f32e:	300c      	adds	r0, #12
   3f330:	60a0      	str	r0, [r4, #8]
   3f332:	f7ff fcea 	bl	3ed0a <memset>
   3f336:	4620      	mov	r0, r4
   3f338:	bd70      	pop	{r4, r5, r6, pc}

0003f33a <_fwalk_reent>:
   3f33a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3f33e:	4680      	mov	r8, r0
   3f340:	4689      	mov	r9, r1
   3f342:	f100 0448 	add.w	r4, r0, #72	; 0x48
   3f346:	2600      	movs	r6, #0
   3f348:	b914      	cbnz	r4, 3f350 <_fwalk_reent+0x16>
   3f34a:	4630      	mov	r0, r6
   3f34c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3f350:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   3f354:	3f01      	subs	r7, #1
   3f356:	d501      	bpl.n	3f35c <_fwalk_reent+0x22>
   3f358:	6824      	ldr	r4, [r4, #0]
   3f35a:	e7f5      	b.n	3f348 <_fwalk_reent+0xe>
   3f35c:	89ab      	ldrh	r3, [r5, #12]
   3f35e:	2b01      	cmp	r3, #1
   3f360:	d907      	bls.n	3f372 <_fwalk_reent+0x38>
   3f362:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   3f366:	3301      	adds	r3, #1
   3f368:	d003      	beq.n	3f372 <_fwalk_reent+0x38>
   3f36a:	4629      	mov	r1, r5
   3f36c:	4640      	mov	r0, r8
   3f36e:	47c8      	blx	r9
   3f370:	4306      	orrs	r6, r0
   3f372:	3568      	adds	r5, #104	; 0x68
   3f374:	e7ee      	b.n	3f354 <_fwalk_reent+0x1a>

0003f376 <rshift>:
   3f376:	b5f0      	push	{r4, r5, r6, r7, lr}
   3f378:	114b      	asrs	r3, r1, #5
   3f37a:	6906      	ldr	r6, [r0, #16]
   3f37c:	f100 0414 	add.w	r4, r0, #20
   3f380:	429e      	cmp	r6, r3
   3f382:	dd30      	ble.n	3f3e6 <rshift+0x70>
   3f384:	f011 011f 	ands.w	r1, r1, #31
   3f388:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   3f38c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   3f390:	d108      	bne.n	3f3a4 <rshift+0x2e>
   3f392:	4621      	mov	r1, r4
   3f394:	42b2      	cmp	r2, r6
   3f396:	460b      	mov	r3, r1
   3f398:	d211      	bcs.n	3f3be <rshift+0x48>
   3f39a:	f852 3b04 	ldr.w	r3, [r2], #4
   3f39e:	f841 3b04 	str.w	r3, [r1], #4
   3f3a2:	e7f7      	b.n	3f394 <rshift+0x1e>
   3f3a4:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   3f3a8:	f1c1 0c20 	rsb	ip, r1, #32
   3f3ac:	3204      	adds	r2, #4
   3f3ae:	4623      	mov	r3, r4
   3f3b0:	40cd      	lsrs	r5, r1
   3f3b2:	4296      	cmp	r6, r2
   3f3b4:	4617      	mov	r7, r2
   3f3b6:	d80c      	bhi.n	3f3d2 <rshift+0x5c>
   3f3b8:	601d      	str	r5, [r3, #0]
   3f3ba:	b105      	cbz	r5, 3f3be <rshift+0x48>
   3f3bc:	3304      	adds	r3, #4
   3f3be:	1b1a      	subs	r2, r3, r4
   3f3c0:	42a3      	cmp	r3, r4
   3f3c2:	ea4f 02a2 	mov.w	r2, r2, asr #2
   3f3c6:	bf08      	it	eq
   3f3c8:	2300      	moveq	r3, #0
   3f3ca:	6102      	str	r2, [r0, #16]
   3f3cc:	bf08      	it	eq
   3f3ce:	6143      	streq	r3, [r0, #20]
   3f3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3f3d2:	683f      	ldr	r7, [r7, #0]
   3f3d4:	fa07 f70c 	lsl.w	r7, r7, ip
   3f3d8:	433d      	orrs	r5, r7
   3f3da:	f843 5b04 	str.w	r5, [r3], #4
   3f3de:	f852 5b04 	ldr.w	r5, [r2], #4
   3f3e2:	40cd      	lsrs	r5, r1
   3f3e4:	e7e5      	b.n	3f3b2 <rshift+0x3c>
   3f3e6:	4623      	mov	r3, r4
   3f3e8:	e7e9      	b.n	3f3be <rshift+0x48>

0003f3ea <__hexdig_fun>:
   3f3ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   3f3ee:	2b09      	cmp	r3, #9
   3f3f0:	d802      	bhi.n	3f3f8 <__hexdig_fun+0xe>
   3f3f2:	3820      	subs	r0, #32
   3f3f4:	b2c0      	uxtb	r0, r0
   3f3f6:	4770      	bx	lr
   3f3f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   3f3fc:	2b05      	cmp	r3, #5
   3f3fe:	d801      	bhi.n	3f404 <__hexdig_fun+0x1a>
   3f400:	3847      	subs	r0, #71	; 0x47
   3f402:	e7f7      	b.n	3f3f4 <__hexdig_fun+0xa>
   3f404:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   3f408:	2b05      	cmp	r3, #5
   3f40a:	d801      	bhi.n	3f410 <__hexdig_fun+0x26>
   3f40c:	3827      	subs	r0, #39	; 0x27
   3f40e:	e7f1      	b.n	3f3f4 <__hexdig_fun+0xa>
   3f410:	2000      	movs	r0, #0
   3f412:	4770      	bx	lr

0003f414 <L_shift>:
   3f414:	f1c2 0208 	rsb	r2, r2, #8
   3f418:	0092      	lsls	r2, r2, #2
   3f41a:	b570      	push	{r4, r5, r6, lr}
   3f41c:	f1c2 0620 	rsb	r6, r2, #32
   3f420:	6843      	ldr	r3, [r0, #4]
   3f422:	6804      	ldr	r4, [r0, #0]
   3f424:	fa03 f506 	lsl.w	r5, r3, r6
   3f428:	40d3      	lsrs	r3, r2
   3f42a:	432c      	orrs	r4, r5
   3f42c:	6004      	str	r4, [r0, #0]
   3f42e:	f840 3f04 	str.w	r3, [r0, #4]!
   3f432:	4288      	cmp	r0, r1
   3f434:	d3f4      	bcc.n	3f420 <L_shift+0xc>
   3f436:	bd70      	pop	{r4, r5, r6, pc}

0003f438 <__match>:
   3f438:	6803      	ldr	r3, [r0, #0]
   3f43a:	3301      	adds	r3, #1
   3f43c:	b530      	push	{r4, r5, lr}
   3f43e:	f811 4b01 	ldrb.w	r4, [r1], #1
   3f442:	b914      	cbnz	r4, 3f44a <__match+0x12>
   3f444:	6003      	str	r3, [r0, #0]
   3f446:	2001      	movs	r0, #1
   3f448:	bd30      	pop	{r4, r5, pc}
   3f44a:	f813 2b01 	ldrb.w	r2, [r3], #1
   3f44e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   3f452:	2d19      	cmp	r5, #25
   3f454:	bf98      	it	ls
   3f456:	3220      	addls	r2, #32
   3f458:	42a2      	cmp	r2, r4
   3f45a:	d0f0      	beq.n	3f43e <__match+0x6>
   3f45c:	2000      	movs	r0, #0
   3f45e:	e7f3      	b.n	3f448 <__match+0x10>

0003f460 <__hexnan>:
   3f460:	680b      	ldr	r3, [r1, #0]
   3f462:	6801      	ldr	r1, [r0, #0]
   3f464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f468:	115f      	asrs	r7, r3, #5
   3f46a:	f013 031f 	ands.w	r3, r3, #31
   3f46e:	f04f 0500 	mov.w	r5, #0
   3f472:	b087      	sub	sp, #28
   3f474:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   3f478:	4682      	mov	sl, r0
   3f47a:	4690      	mov	r8, r2
   3f47c:	46ab      	mov	fp, r5
   3f47e:	bf18      	it	ne
   3f480:	3704      	addne	r7, #4
   3f482:	9301      	str	r3, [sp, #4]
   3f484:	9502      	str	r5, [sp, #8]
   3f486:	1f3e      	subs	r6, r7, #4
   3f488:	f847 5c04 	str.w	r5, [r7, #-4]
   3f48c:	46b1      	mov	r9, r6
   3f48e:	4634      	mov	r4, r6
   3f490:	1c4b      	adds	r3, r1, #1
   3f492:	784a      	ldrb	r2, [r1, #1]
   3f494:	9303      	str	r3, [sp, #12]
   3f496:	b342      	cbz	r2, 3f4ea <__hexnan+0x8a>
   3f498:	4610      	mov	r0, r2
   3f49a:	9105      	str	r1, [sp, #20]
   3f49c:	9204      	str	r2, [sp, #16]
   3f49e:	f7ff ffa4 	bl	3f3ea <__hexdig_fun>
   3f4a2:	2800      	cmp	r0, #0
   3f4a4:	d143      	bne.n	3f52e <__hexnan+0xce>
   3f4a6:	9a04      	ldr	r2, [sp, #16]
   3f4a8:	9905      	ldr	r1, [sp, #20]
   3f4aa:	2a20      	cmp	r2, #32
   3f4ac:	d818      	bhi.n	3f4e0 <__hexnan+0x80>
   3f4ae:	9b02      	ldr	r3, [sp, #8]
   3f4b0:	459b      	cmp	fp, r3
   3f4b2:	dd13      	ble.n	3f4dc <__hexnan+0x7c>
   3f4b4:	454c      	cmp	r4, r9
   3f4b6:	d206      	bcs.n	3f4c6 <__hexnan+0x66>
   3f4b8:	2d07      	cmp	r5, #7
   3f4ba:	dc04      	bgt.n	3f4c6 <__hexnan+0x66>
   3f4bc:	462a      	mov	r2, r5
   3f4be:	4649      	mov	r1, r9
   3f4c0:	4620      	mov	r0, r4
   3f4c2:	f7ff ffa7 	bl	3f414 <L_shift>
   3f4c6:	4544      	cmp	r4, r8
   3f4c8:	d943      	bls.n	3f552 <__hexnan+0xf2>
   3f4ca:	2300      	movs	r3, #0
   3f4cc:	f1a4 0904 	sub.w	r9, r4, #4
   3f4d0:	f8cd b008 	str.w	fp, [sp, #8]
   3f4d4:	f844 3c04 	str.w	r3, [r4, #-4]
   3f4d8:	461d      	mov	r5, r3
   3f4da:	464c      	mov	r4, r9
   3f4dc:	9903      	ldr	r1, [sp, #12]
   3f4de:	e7d7      	b.n	3f490 <__hexnan+0x30>
   3f4e0:	2a29      	cmp	r2, #41	; 0x29
   3f4e2:	d149      	bne.n	3f578 <__hexnan+0x118>
   3f4e4:	3102      	adds	r1, #2
   3f4e6:	f8ca 1000 	str.w	r1, [sl]
   3f4ea:	f1bb 0f00 	cmp.w	fp, #0
   3f4ee:	d043      	beq.n	3f578 <__hexnan+0x118>
   3f4f0:	454c      	cmp	r4, r9
   3f4f2:	d206      	bcs.n	3f502 <__hexnan+0xa2>
   3f4f4:	2d07      	cmp	r5, #7
   3f4f6:	dc04      	bgt.n	3f502 <__hexnan+0xa2>
   3f4f8:	462a      	mov	r2, r5
   3f4fa:	4649      	mov	r1, r9
   3f4fc:	4620      	mov	r0, r4
   3f4fe:	f7ff ff89 	bl	3f414 <L_shift>
   3f502:	4544      	cmp	r4, r8
   3f504:	d927      	bls.n	3f556 <__hexnan+0xf6>
   3f506:	4643      	mov	r3, r8
   3f508:	f854 2b04 	ldr.w	r2, [r4], #4
   3f50c:	42a6      	cmp	r6, r4
   3f50e:	f843 2b04 	str.w	r2, [r3], #4
   3f512:	d2f9      	bcs.n	3f508 <__hexnan+0xa8>
   3f514:	2200      	movs	r2, #0
   3f516:	f843 2b04 	str.w	r2, [r3], #4
   3f51a:	429e      	cmp	r6, r3
   3f51c:	d2fb      	bcs.n	3f516 <__hexnan+0xb6>
   3f51e:	6833      	ldr	r3, [r6, #0]
   3f520:	b91b      	cbnz	r3, 3f52a <__hexnan+0xca>
   3f522:	4546      	cmp	r6, r8
   3f524:	d126      	bne.n	3f574 <__hexnan+0x114>
   3f526:	2301      	movs	r3, #1
   3f528:	6033      	str	r3, [r6, #0]
   3f52a:	2005      	movs	r0, #5
   3f52c:	e025      	b.n	3f57a <__hexnan+0x11a>
   3f52e:	3501      	adds	r5, #1
   3f530:	f10b 0b01 	add.w	fp, fp, #1
   3f534:	2d08      	cmp	r5, #8
   3f536:	dd05      	ble.n	3f544 <__hexnan+0xe4>
   3f538:	4544      	cmp	r4, r8
   3f53a:	d9cf      	bls.n	3f4dc <__hexnan+0x7c>
   3f53c:	2300      	movs	r3, #0
   3f53e:	3c04      	subs	r4, #4
   3f540:	2501      	movs	r5, #1
   3f542:	6023      	str	r3, [r4, #0]
   3f544:	6822      	ldr	r2, [r4, #0]
   3f546:	f000 000f 	and.w	r0, r0, #15
   3f54a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   3f54e:	6020      	str	r0, [r4, #0]
   3f550:	e7c4      	b.n	3f4dc <__hexnan+0x7c>
   3f552:	2508      	movs	r5, #8
   3f554:	e7c2      	b.n	3f4dc <__hexnan+0x7c>
   3f556:	9b01      	ldr	r3, [sp, #4]
   3f558:	2b00      	cmp	r3, #0
   3f55a:	d0e0      	beq.n	3f51e <__hexnan+0xbe>
   3f55c:	f04f 32ff 	mov.w	r2, #4294967295
   3f560:	f1c3 0320 	rsb	r3, r3, #32
   3f564:	fa22 f303 	lsr.w	r3, r2, r3
   3f568:	f857 2c04 	ldr.w	r2, [r7, #-4]
   3f56c:	401a      	ands	r2, r3
   3f56e:	f847 2c04 	str.w	r2, [r7, #-4]
   3f572:	e7d4      	b.n	3f51e <__hexnan+0xbe>
   3f574:	3e04      	subs	r6, #4
   3f576:	e7d2      	b.n	3f51e <__hexnan+0xbe>
   3f578:	2004      	movs	r0, #4
   3f57a:	b007      	add	sp, #28
   3f57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003f580 <__retarget_lock_init_recursive>:
   3f580:	4770      	bx	lr

0003f582 <__retarget_lock_acquire_recursive>:
   3f582:	4770      	bx	lr

0003f584 <__retarget_lock_release_recursive>:
   3f584:	4770      	bx	lr

0003f586 <__swhatbuf_r>:
   3f586:	b570      	push	{r4, r5, r6, lr}
   3f588:	460e      	mov	r6, r1
   3f58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3f58e:	b096      	sub	sp, #88	; 0x58
   3f590:	4614      	mov	r4, r2
   3f592:	2900      	cmp	r1, #0
   3f594:	461d      	mov	r5, r3
   3f596:	da07      	bge.n	3f5a8 <__swhatbuf_r+0x22>
   3f598:	2300      	movs	r3, #0
   3f59a:	602b      	str	r3, [r5, #0]
   3f59c:	89b3      	ldrh	r3, [r6, #12]
   3f59e:	061a      	lsls	r2, r3, #24
   3f5a0:	d410      	bmi.n	3f5c4 <__swhatbuf_r+0x3e>
   3f5a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3f5a6:	e00e      	b.n	3f5c6 <__swhatbuf_r+0x40>
   3f5a8:	466a      	mov	r2, sp
   3f5aa:	f7fc fcd9 	bl	3bf60 <_fstat_r>
   3f5ae:	2800      	cmp	r0, #0
   3f5b0:	dbf2      	blt.n	3f598 <__swhatbuf_r+0x12>
   3f5b2:	9a01      	ldr	r2, [sp, #4]
   3f5b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   3f5b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   3f5bc:	425a      	negs	r2, r3
   3f5be:	415a      	adcs	r2, r3
   3f5c0:	602a      	str	r2, [r5, #0]
   3f5c2:	e7ee      	b.n	3f5a2 <__swhatbuf_r+0x1c>
   3f5c4:	2340      	movs	r3, #64	; 0x40
   3f5c6:	2000      	movs	r0, #0
   3f5c8:	6023      	str	r3, [r4, #0]
   3f5ca:	b016      	add	sp, #88	; 0x58
   3f5cc:	bd70      	pop	{r4, r5, r6, pc}

0003f5ce <__ascii_mbtowc>:
   3f5ce:	b082      	sub	sp, #8
   3f5d0:	b901      	cbnz	r1, 3f5d4 <__ascii_mbtowc+0x6>
   3f5d2:	a901      	add	r1, sp, #4
   3f5d4:	b142      	cbz	r2, 3f5e8 <__ascii_mbtowc+0x1a>
   3f5d6:	b14b      	cbz	r3, 3f5ec <__ascii_mbtowc+0x1e>
   3f5d8:	7813      	ldrb	r3, [r2, #0]
   3f5da:	600b      	str	r3, [r1, #0]
   3f5dc:	7812      	ldrb	r2, [r2, #0]
   3f5de:	1c10      	adds	r0, r2, #0
   3f5e0:	bf18      	it	ne
   3f5e2:	2001      	movne	r0, #1
   3f5e4:	b002      	add	sp, #8
   3f5e6:	4770      	bx	lr
   3f5e8:	4610      	mov	r0, r2
   3f5ea:	e7fb      	b.n	3f5e4 <__ascii_mbtowc+0x16>
   3f5ec:	f06f 0001 	mvn.w	r0, #1
   3f5f0:	e7f8      	b.n	3f5e4 <__ascii_mbtowc+0x16>

0003f5f2 <memmove>:
   3f5f2:	4288      	cmp	r0, r1
   3f5f4:	eb01 0302 	add.w	r3, r1, r2
   3f5f8:	b510      	push	{r4, lr}
   3f5fa:	d902      	bls.n	3f602 <memmove+0x10>
   3f5fc:	4283      	cmp	r3, r0
   3f5fe:	461c      	mov	r4, r3
   3f600:	d807      	bhi.n	3f612 <memmove+0x20>
   3f602:	1e42      	subs	r2, r0, #1
   3f604:	4299      	cmp	r1, r3
   3f606:	d008      	beq.n	3f61a <memmove+0x28>
   3f608:	f811 4b01 	ldrb.w	r4, [r1], #1
   3f60c:	f802 4f01 	strb.w	r4, [r2, #1]!
   3f610:	e7f8      	b.n	3f604 <memmove+0x12>
   3f612:	1883      	adds	r3, r0, r2
   3f614:	1a9a      	subs	r2, r3, r2
   3f616:	429a      	cmp	r2, r3
   3f618:	d100      	bne.n	3f61c <memmove+0x2a>
   3f61a:	bd10      	pop	{r4, pc}
   3f61c:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   3f620:	f803 1d01 	strb.w	r1, [r3, #-1]!
   3f624:	e7f7      	b.n	3f616 <memmove+0x24>

0003f626 <_Balloc>:
   3f626:	b570      	push	{r4, r5, r6, lr}
   3f628:	6a45      	ldr	r5, [r0, #36]	; 0x24
   3f62a:	4604      	mov	r4, r0
   3f62c:	460e      	mov	r6, r1
   3f62e:	b93d      	cbnz	r5, 3f640 <_Balloc+0x1a>
   3f630:	2010      	movs	r0, #16
   3f632:	f7fa fbeb 	bl	39e0c <malloc>
   3f636:	6260      	str	r0, [r4, #36]	; 0x24
   3f638:	6005      	str	r5, [r0, #0]
   3f63a:	60c5      	str	r5, [r0, #12]
   3f63c:	e9c0 5501 	strd	r5, r5, [r0, #4]
   3f640:	6a65      	ldr	r5, [r4, #36]	; 0x24
   3f642:	68eb      	ldr	r3, [r5, #12]
   3f644:	b183      	cbz	r3, 3f668 <_Balloc+0x42>
   3f646:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3f648:	68db      	ldr	r3, [r3, #12]
   3f64a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   3f64e:	b9b8      	cbnz	r0, 3f680 <_Balloc+0x5a>
   3f650:	2101      	movs	r1, #1
   3f652:	4620      	mov	r0, r4
   3f654:	fa01 f506 	lsl.w	r5, r1, r6
   3f658:	1d6a      	adds	r2, r5, #5
   3f65a:	0092      	lsls	r2, r2, #2
   3f65c:	f000 fb1a 	bl	3fc94 <_calloc_r>
   3f660:	b160      	cbz	r0, 3f67c <_Balloc+0x56>
   3f662:	e9c0 6501 	strd	r6, r5, [r0, #4]
   3f666:	e00e      	b.n	3f686 <_Balloc+0x60>
   3f668:	2221      	movs	r2, #33	; 0x21
   3f66a:	2104      	movs	r1, #4
   3f66c:	4620      	mov	r0, r4
   3f66e:	f000 fb11 	bl	3fc94 <_calloc_r>
   3f672:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3f674:	60e8      	str	r0, [r5, #12]
   3f676:	68db      	ldr	r3, [r3, #12]
   3f678:	2b00      	cmp	r3, #0
   3f67a:	d1e4      	bne.n	3f646 <_Balloc+0x20>
   3f67c:	2000      	movs	r0, #0
   3f67e:	bd70      	pop	{r4, r5, r6, pc}
   3f680:	6802      	ldr	r2, [r0, #0]
   3f682:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   3f686:	2300      	movs	r3, #0
   3f688:	e9c0 3303 	strd	r3, r3, [r0, #12]
   3f68c:	e7f7      	b.n	3f67e <_Balloc+0x58>

0003f68e <_Bfree>:
   3f68e:	b570      	push	{r4, r5, r6, lr}
   3f690:	6a44      	ldr	r4, [r0, #36]	; 0x24
   3f692:	4606      	mov	r6, r0
   3f694:	460d      	mov	r5, r1
   3f696:	b93c      	cbnz	r4, 3f6a8 <_Bfree+0x1a>
   3f698:	2010      	movs	r0, #16
   3f69a:	f7fa fbb7 	bl	39e0c <malloc>
   3f69e:	6270      	str	r0, [r6, #36]	; 0x24
   3f6a0:	6004      	str	r4, [r0, #0]
   3f6a2:	60c4      	str	r4, [r0, #12]
   3f6a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3f6a8:	b13d      	cbz	r5, 3f6ba <_Bfree+0x2c>
   3f6aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
   3f6ac:	686a      	ldr	r2, [r5, #4]
   3f6ae:	68db      	ldr	r3, [r3, #12]
   3f6b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   3f6b4:	6029      	str	r1, [r5, #0]
   3f6b6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   3f6ba:	bd70      	pop	{r4, r5, r6, pc}

0003f6bc <__multadd>:
   3f6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f6c0:	f101 0c14 	add.w	ip, r1, #20
   3f6c4:	461f      	mov	r7, r3
   3f6c6:	4606      	mov	r6, r0
   3f6c8:	460c      	mov	r4, r1
   3f6ca:	690d      	ldr	r5, [r1, #16]
   3f6cc:	2300      	movs	r3, #0
   3f6ce:	f8dc 0000 	ldr.w	r0, [ip]
   3f6d2:	3301      	adds	r3, #1
   3f6d4:	b281      	uxth	r1, r0
   3f6d6:	429d      	cmp	r5, r3
   3f6d8:	ea4f 4010 	mov.w	r0, r0, lsr #16
   3f6dc:	fb02 7101 	mla	r1, r2, r1, r7
   3f6e0:	ea4f 4711 	mov.w	r7, r1, lsr #16
   3f6e4:	b289      	uxth	r1, r1
   3f6e6:	fb02 7000 	mla	r0, r2, r0, r7
   3f6ea:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   3f6ee:	ea4f 4710 	mov.w	r7, r0, lsr #16
   3f6f2:	f84c 1b04 	str.w	r1, [ip], #4
   3f6f6:	dcea      	bgt.n	3f6ce <__multadd+0x12>
   3f6f8:	b1d7      	cbz	r7, 3f730 <__multadd+0x74>
   3f6fa:	68a3      	ldr	r3, [r4, #8]
   3f6fc:	42ab      	cmp	r3, r5
   3f6fe:	dc12      	bgt.n	3f726 <__multadd+0x6a>
   3f700:	6861      	ldr	r1, [r4, #4]
   3f702:	4630      	mov	r0, r6
   3f704:	3101      	adds	r1, #1
   3f706:	f7ff ff8e 	bl	3f626 <_Balloc>
   3f70a:	6922      	ldr	r2, [r4, #16]
   3f70c:	4680      	mov	r8, r0
   3f70e:	f104 010c 	add.w	r1, r4, #12
   3f712:	3202      	adds	r2, #2
   3f714:	300c      	adds	r0, #12
   3f716:	0092      	lsls	r2, r2, #2
   3f718:	f7ff fad7 	bl	3ecca <memcpy>
   3f71c:	4621      	mov	r1, r4
   3f71e:	4644      	mov	r4, r8
   3f720:	4630      	mov	r0, r6
   3f722:	f7ff ffb4 	bl	3f68e <_Bfree>
   3f726:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   3f72a:	3501      	adds	r5, #1
   3f72c:	615f      	str	r7, [r3, #20]
   3f72e:	6125      	str	r5, [r4, #16]
   3f730:	4620      	mov	r0, r4
   3f732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003f736 <__s2b>:
   3f736:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3f73a:	4615      	mov	r5, r2
   3f73c:	461f      	mov	r7, r3
   3f73e:	2209      	movs	r2, #9
   3f740:	3308      	adds	r3, #8
   3f742:	460c      	mov	r4, r1
   3f744:	4606      	mov	r6, r0
   3f746:	2100      	movs	r1, #0
   3f748:	fb93 f3f2 	sdiv	r3, r3, r2
   3f74c:	2201      	movs	r2, #1
   3f74e:	429a      	cmp	r2, r3
   3f750:	db20      	blt.n	3f794 <__s2b+0x5e>
   3f752:	4630      	mov	r0, r6
   3f754:	f7ff ff67 	bl	3f626 <_Balloc>
   3f758:	9b08      	ldr	r3, [sp, #32]
   3f75a:	2d09      	cmp	r5, #9
   3f75c:	6143      	str	r3, [r0, #20]
   3f75e:	f04f 0301 	mov.w	r3, #1
   3f762:	6103      	str	r3, [r0, #16]
   3f764:	dd19      	ble.n	3f79a <__s2b+0x64>
   3f766:	f104 0909 	add.w	r9, r4, #9
   3f76a:	442c      	add	r4, r5
   3f76c:	46c8      	mov	r8, r9
   3f76e:	f818 3b01 	ldrb.w	r3, [r8], #1
   3f772:	4601      	mov	r1, r0
   3f774:	220a      	movs	r2, #10
   3f776:	4630      	mov	r0, r6
   3f778:	3b30      	subs	r3, #48	; 0x30
   3f77a:	f7ff ff9f 	bl	3f6bc <__multadd>
   3f77e:	45a0      	cmp	r8, r4
   3f780:	d1f5      	bne.n	3f76e <__s2b+0x38>
   3f782:	f1a5 0408 	sub.w	r4, r5, #8
   3f786:	444c      	add	r4, r9
   3f788:	1b2d      	subs	r5, r5, r4
   3f78a:	1963      	adds	r3, r4, r5
   3f78c:	42bb      	cmp	r3, r7
   3f78e:	db07      	blt.n	3f7a0 <__s2b+0x6a>
   3f790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3f794:	0052      	lsls	r2, r2, #1
   3f796:	3101      	adds	r1, #1
   3f798:	e7d9      	b.n	3f74e <__s2b+0x18>
   3f79a:	340a      	adds	r4, #10
   3f79c:	2509      	movs	r5, #9
   3f79e:	e7f3      	b.n	3f788 <__s2b+0x52>
   3f7a0:	f814 3b01 	ldrb.w	r3, [r4], #1
   3f7a4:	4601      	mov	r1, r0
   3f7a6:	220a      	movs	r2, #10
   3f7a8:	4630      	mov	r0, r6
   3f7aa:	3b30      	subs	r3, #48	; 0x30
   3f7ac:	f7ff ff86 	bl	3f6bc <__multadd>
   3f7b0:	e7eb      	b.n	3f78a <__s2b+0x54>

0003f7b2 <__hi0bits>:
   3f7b2:	0c02      	lsrs	r2, r0, #16
   3f7b4:	4603      	mov	r3, r0
   3f7b6:	0412      	lsls	r2, r2, #16
   3f7b8:	b9ca      	cbnz	r2, 3f7ee <__hi0bits+0x3c>
   3f7ba:	0403      	lsls	r3, r0, #16
   3f7bc:	2010      	movs	r0, #16
   3f7be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   3f7c2:	bf04      	itt	eq
   3f7c4:	021b      	lsleq	r3, r3, #8
   3f7c6:	3008      	addeq	r0, #8
   3f7c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   3f7cc:	bf04      	itt	eq
   3f7ce:	011b      	lsleq	r3, r3, #4
   3f7d0:	3004      	addeq	r0, #4
   3f7d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   3f7d6:	bf04      	itt	eq
   3f7d8:	009b      	lsleq	r3, r3, #2
   3f7da:	3002      	addeq	r0, #2
   3f7dc:	2b00      	cmp	r3, #0
   3f7de:	db05      	blt.n	3f7ec <__hi0bits+0x3a>
   3f7e0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   3f7e4:	f100 0001 	add.w	r0, r0, #1
   3f7e8:	bf08      	it	eq
   3f7ea:	2020      	moveq	r0, #32
   3f7ec:	4770      	bx	lr
   3f7ee:	2000      	movs	r0, #0
   3f7f0:	e7e5      	b.n	3f7be <__hi0bits+0xc>

0003f7f2 <__lo0bits>:
   3f7f2:	6803      	ldr	r3, [r0, #0]
   3f7f4:	4601      	mov	r1, r0
   3f7f6:	f013 0207 	ands.w	r2, r3, #7
   3f7fa:	d00b      	beq.n	3f814 <__lo0bits+0x22>
   3f7fc:	07da      	lsls	r2, r3, #31
   3f7fe:	d424      	bmi.n	3f84a <__lo0bits+0x58>
   3f800:	0798      	lsls	r0, r3, #30
   3f802:	bf47      	ittee	mi
   3f804:	085b      	lsrmi	r3, r3, #1
   3f806:	2001      	movmi	r0, #1
   3f808:	089b      	lsrpl	r3, r3, #2
   3f80a:	2002      	movpl	r0, #2
   3f80c:	bf4c      	ite	mi
   3f80e:	600b      	strmi	r3, [r1, #0]
   3f810:	600b      	strpl	r3, [r1, #0]
   3f812:	4770      	bx	lr
   3f814:	b298      	uxth	r0, r3
   3f816:	b9b0      	cbnz	r0, 3f846 <__lo0bits+0x54>
   3f818:	0c1b      	lsrs	r3, r3, #16
   3f81a:	2010      	movs	r0, #16
   3f81c:	f013 0fff 	tst.w	r3, #255	; 0xff
   3f820:	bf04      	itt	eq
   3f822:	0a1b      	lsreq	r3, r3, #8
   3f824:	3008      	addeq	r0, #8
   3f826:	071a      	lsls	r2, r3, #28
   3f828:	bf04      	itt	eq
   3f82a:	091b      	lsreq	r3, r3, #4
   3f82c:	3004      	addeq	r0, #4
   3f82e:	079a      	lsls	r2, r3, #30
   3f830:	bf04      	itt	eq
   3f832:	089b      	lsreq	r3, r3, #2
   3f834:	3002      	addeq	r0, #2
   3f836:	07da      	lsls	r2, r3, #31
   3f838:	d403      	bmi.n	3f842 <__lo0bits+0x50>
   3f83a:	085b      	lsrs	r3, r3, #1
   3f83c:	f100 0001 	add.w	r0, r0, #1
   3f840:	d005      	beq.n	3f84e <__lo0bits+0x5c>
   3f842:	600b      	str	r3, [r1, #0]
   3f844:	4770      	bx	lr
   3f846:	4610      	mov	r0, r2
   3f848:	e7e8      	b.n	3f81c <__lo0bits+0x2a>
   3f84a:	2000      	movs	r0, #0
   3f84c:	4770      	bx	lr
   3f84e:	2020      	movs	r0, #32
   3f850:	4770      	bx	lr

0003f852 <__i2b>:
   3f852:	b510      	push	{r4, lr}
   3f854:	460c      	mov	r4, r1
   3f856:	2101      	movs	r1, #1
   3f858:	f7ff fee5 	bl	3f626 <_Balloc>
   3f85c:	2201      	movs	r2, #1
   3f85e:	6144      	str	r4, [r0, #20]
   3f860:	6102      	str	r2, [r0, #16]
   3f862:	bd10      	pop	{r4, pc}

0003f864 <__multiply>:
   3f864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f868:	4690      	mov	r8, r2
   3f86a:	690a      	ldr	r2, [r1, #16]
   3f86c:	460c      	mov	r4, r1
   3f86e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   3f872:	429a      	cmp	r2, r3
   3f874:	bfbe      	ittt	lt
   3f876:	460b      	movlt	r3, r1
   3f878:	4644      	movlt	r4, r8
   3f87a:	4698      	movlt	r8, r3
   3f87c:	6927      	ldr	r7, [r4, #16]
   3f87e:	68a3      	ldr	r3, [r4, #8]
   3f880:	f8d8 9010 	ldr.w	r9, [r8, #16]
   3f884:	6861      	ldr	r1, [r4, #4]
   3f886:	eb07 0609 	add.w	r6, r7, r9
   3f88a:	42b3      	cmp	r3, r6
   3f88c:	bfb8      	it	lt
   3f88e:	3101      	addlt	r1, #1
   3f890:	f7ff fec9 	bl	3f626 <_Balloc>
   3f894:	f100 0514 	add.w	r5, r0, #20
   3f898:	2200      	movs	r2, #0
   3f89a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   3f89e:	462b      	mov	r3, r5
   3f8a0:	4573      	cmp	r3, lr
   3f8a2:	d316      	bcc.n	3f8d2 <__multiply+0x6e>
   3f8a4:	f104 0314 	add.w	r3, r4, #20
   3f8a8:	f108 0214 	add.w	r2, r8, #20
   3f8ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   3f8b0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   3f8b4:	9300      	str	r3, [sp, #0]
   3f8b6:	9b00      	ldr	r3, [sp, #0]
   3f8b8:	9201      	str	r2, [sp, #4]
   3f8ba:	4293      	cmp	r3, r2
   3f8bc:	d80c      	bhi.n	3f8d8 <__multiply+0x74>
   3f8be:	2e00      	cmp	r6, #0
   3f8c0:	dd03      	ble.n	3f8ca <__multiply+0x66>
   3f8c2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   3f8c6:	2b00      	cmp	r3, #0
   3f8c8:	d059      	beq.n	3f97e <__multiply+0x11a>
   3f8ca:	6106      	str	r6, [r0, #16]
   3f8cc:	b003      	add	sp, #12
   3f8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f8d2:	f843 2b04 	str.w	r2, [r3], #4
   3f8d6:	e7e3      	b.n	3f8a0 <__multiply+0x3c>
   3f8d8:	f8b2 a000 	ldrh.w	sl, [r2]
   3f8dc:	f1ba 0f00 	cmp.w	sl, #0
   3f8e0:	d023      	beq.n	3f92a <__multiply+0xc6>
   3f8e2:	f104 0914 	add.w	r9, r4, #20
   3f8e6:	46ac      	mov	ip, r5
   3f8e8:	f04f 0800 	mov.w	r8, #0
   3f8ec:	f859 1b04 	ldr.w	r1, [r9], #4
   3f8f0:	f8dc b000 	ldr.w	fp, [ip]
   3f8f4:	b28b      	uxth	r3, r1
   3f8f6:	454f      	cmp	r7, r9
   3f8f8:	fa1f fb8b 	uxth.w	fp, fp
   3f8fc:	fb0a b303 	mla	r3, sl, r3, fp
   3f900:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   3f904:	f8dc 1000 	ldr.w	r1, [ip]
   3f908:	4443      	add	r3, r8
   3f90a:	ea4f 4811 	mov.w	r8, r1, lsr #16
   3f90e:	fb0a 810b 	mla	r1, sl, fp, r8
   3f912:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   3f916:	b29b      	uxth	r3, r3
   3f918:	ea4f 4811 	mov.w	r8, r1, lsr #16
   3f91c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   3f920:	f84c 3b04 	str.w	r3, [ip], #4
   3f924:	d8e2      	bhi.n	3f8ec <__multiply+0x88>
   3f926:	f8cc 8000 	str.w	r8, [ip]
   3f92a:	9b01      	ldr	r3, [sp, #4]
   3f92c:	3204      	adds	r2, #4
   3f92e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   3f932:	f1b9 0f00 	cmp.w	r9, #0
   3f936:	d020      	beq.n	3f97a <__multiply+0x116>
   3f938:	682b      	ldr	r3, [r5, #0]
   3f93a:	f104 0814 	add.w	r8, r4, #20
   3f93e:	46ac      	mov	ip, r5
   3f940:	f04f 0a00 	mov.w	sl, #0
   3f944:	f8b8 1000 	ldrh.w	r1, [r8]
   3f948:	b29b      	uxth	r3, r3
   3f94a:	f8bc b002 	ldrh.w	fp, [ip, #2]
   3f94e:	fb09 b101 	mla	r1, r9, r1, fp
   3f952:	448a      	add	sl, r1
   3f954:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   3f958:	f84c 3b04 	str.w	r3, [ip], #4
   3f95c:	f858 3b04 	ldr.w	r3, [r8], #4
   3f960:	f8bc 1000 	ldrh.w	r1, [ip]
   3f964:	0c1b      	lsrs	r3, r3, #16
   3f966:	4547      	cmp	r7, r8
   3f968:	fb09 1303 	mla	r3, r9, r3, r1
   3f96c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   3f970:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   3f974:	d8e6      	bhi.n	3f944 <__multiply+0xe0>
   3f976:	f8cc 3000 	str.w	r3, [ip]
   3f97a:	3504      	adds	r5, #4
   3f97c:	e79b      	b.n	3f8b6 <__multiply+0x52>
   3f97e:	3e01      	subs	r6, #1
   3f980:	e79d      	b.n	3f8be <__multiply+0x5a>

0003f982 <__lshift>:
   3f982:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3f986:	460c      	mov	r4, r1
   3f988:	ea4f 1a62 	mov.w	sl, r2, asr #5
   3f98c:	4607      	mov	r7, r0
   3f98e:	4616      	mov	r6, r2
   3f990:	6923      	ldr	r3, [r4, #16]
   3f992:	6849      	ldr	r1, [r1, #4]
   3f994:	eb0a 0903 	add.w	r9, sl, r3
   3f998:	68a3      	ldr	r3, [r4, #8]
   3f99a:	f109 0501 	add.w	r5, r9, #1
   3f99e:	42ab      	cmp	r3, r5
   3f9a0:	db33      	blt.n	3fa0a <__lshift+0x88>
   3f9a2:	4638      	mov	r0, r7
   3f9a4:	f7ff fe3f 	bl	3f626 <_Balloc>
   3f9a8:	2300      	movs	r3, #0
   3f9aa:	4680      	mov	r8, r0
   3f9ac:	f100 0114 	add.w	r1, r0, #20
   3f9b0:	f100 0210 	add.w	r2, r0, #16
   3f9b4:	4618      	mov	r0, r3
   3f9b6:	4553      	cmp	r3, sl
   3f9b8:	db2a      	blt.n	3fa10 <__lshift+0x8e>
   3f9ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   3f9be:	f104 0314 	add.w	r3, r4, #20
   3f9c2:	6920      	ldr	r0, [r4, #16]
   3f9c4:	f016 021f 	ands.w	r2, r6, #31
   3f9c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   3f9cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   3f9d0:	d022      	beq.n	3fa18 <__lshift+0x96>
   3f9d2:	f1c2 0e20 	rsb	lr, r2, #32
   3f9d6:	2000      	movs	r0, #0
   3f9d8:	681e      	ldr	r6, [r3, #0]
   3f9da:	4096      	lsls	r6, r2
   3f9dc:	4330      	orrs	r0, r6
   3f9de:	f841 0b04 	str.w	r0, [r1], #4
   3f9e2:	f853 0b04 	ldr.w	r0, [r3], #4
   3f9e6:	459c      	cmp	ip, r3
   3f9e8:	fa20 f00e 	lsr.w	r0, r0, lr
   3f9ec:	d8f4      	bhi.n	3f9d8 <__lshift+0x56>
   3f9ee:	6008      	str	r0, [r1, #0]
   3f9f0:	b108      	cbz	r0, 3f9f6 <__lshift+0x74>
   3f9f2:	f109 0502 	add.w	r5, r9, #2
   3f9f6:	3d01      	subs	r5, #1
   3f9f8:	4638      	mov	r0, r7
   3f9fa:	4621      	mov	r1, r4
   3f9fc:	f8c8 5010 	str.w	r5, [r8, #16]
   3fa00:	f7ff fe45 	bl	3f68e <_Bfree>
   3fa04:	4640      	mov	r0, r8
   3fa06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3fa0a:	3101      	adds	r1, #1
   3fa0c:	005b      	lsls	r3, r3, #1
   3fa0e:	e7c6      	b.n	3f99e <__lshift+0x1c>
   3fa10:	f842 0f04 	str.w	r0, [r2, #4]!
   3fa14:	3301      	adds	r3, #1
   3fa16:	e7ce      	b.n	3f9b6 <__lshift+0x34>
   3fa18:	3904      	subs	r1, #4
   3fa1a:	f853 2b04 	ldr.w	r2, [r3], #4
   3fa1e:	459c      	cmp	ip, r3
   3fa20:	f841 2f04 	str.w	r2, [r1, #4]!
   3fa24:	d8f9      	bhi.n	3fa1a <__lshift+0x98>
   3fa26:	e7e6      	b.n	3f9f6 <__lshift+0x74>

0003fa28 <__mcmp>:
   3fa28:	6903      	ldr	r3, [r0, #16]
   3fa2a:	690a      	ldr	r2, [r1, #16]
   3fa2c:	1a9b      	subs	r3, r3, r2
   3fa2e:	b530      	push	{r4, r5, lr}
   3fa30:	d10c      	bne.n	3fa4c <__mcmp+0x24>
   3fa32:	0092      	lsls	r2, r2, #2
   3fa34:	3014      	adds	r0, #20
   3fa36:	3114      	adds	r1, #20
   3fa38:	1884      	adds	r4, r0, r2
   3fa3a:	4411      	add	r1, r2
   3fa3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   3fa40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   3fa44:	4295      	cmp	r5, r2
   3fa46:	d003      	beq.n	3fa50 <__mcmp+0x28>
   3fa48:	d305      	bcc.n	3fa56 <__mcmp+0x2e>
   3fa4a:	2301      	movs	r3, #1
   3fa4c:	4618      	mov	r0, r3
   3fa4e:	bd30      	pop	{r4, r5, pc}
   3fa50:	42a0      	cmp	r0, r4
   3fa52:	d3f3      	bcc.n	3fa3c <__mcmp+0x14>
   3fa54:	e7fa      	b.n	3fa4c <__mcmp+0x24>
   3fa56:	f04f 33ff 	mov.w	r3, #4294967295
   3fa5a:	e7f7      	b.n	3fa4c <__mcmp+0x24>

0003fa5c <__mdiff>:
   3fa5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3fa60:	460d      	mov	r5, r1
   3fa62:	4607      	mov	r7, r0
   3fa64:	4611      	mov	r1, r2
   3fa66:	4614      	mov	r4, r2
   3fa68:	4628      	mov	r0, r5
   3fa6a:	f7ff ffdd 	bl	3fa28 <__mcmp>
   3fa6e:	1e06      	subs	r6, r0, #0
   3fa70:	d108      	bne.n	3fa84 <__mdiff+0x28>
   3fa72:	4631      	mov	r1, r6
   3fa74:	4638      	mov	r0, r7
   3fa76:	f7ff fdd6 	bl	3f626 <_Balloc>
   3fa7a:	2301      	movs	r3, #1
   3fa7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
   3fa80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3fa84:	bfa3      	ittte	ge
   3fa86:	4623      	movge	r3, r4
   3fa88:	462c      	movge	r4, r5
   3fa8a:	2600      	movge	r6, #0
   3fa8c:	2601      	movlt	r6, #1
   3fa8e:	bfa8      	it	ge
   3fa90:	461d      	movge	r5, r3
   3fa92:	6861      	ldr	r1, [r4, #4]
   3fa94:	4638      	mov	r0, r7
   3fa96:	f7ff fdc6 	bl	3f626 <_Balloc>
   3fa9a:	f105 0914 	add.w	r9, r5, #20
   3fa9e:	60c6      	str	r6, [r0, #12]
   3faa0:	f104 0214 	add.w	r2, r4, #20
   3faa4:	6926      	ldr	r6, [r4, #16]
   3faa6:	f100 0114 	add.w	r1, r0, #20
   3faaa:	692b      	ldr	r3, [r5, #16]
   3faac:	f04f 0e00 	mov.w	lr, #0
   3fab0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   3fab4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   3fab8:	f852 ab04 	ldr.w	sl, [r2], #4
   3fabc:	f859 5b04 	ldr.w	r5, [r9], #4
   3fac0:	fa1f f38a 	uxth.w	r3, sl
   3fac4:	4694      	mov	ip, r2
   3fac6:	b2ac      	uxth	r4, r5
   3fac8:	45c8      	cmp	r8, r9
   3faca:	4473      	add	r3, lr
   3facc:	eba3 0304 	sub.w	r3, r3, r4
   3fad0:	ea4f 4415 	mov.w	r4, r5, lsr #16
   3fad4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   3fad8:	eb04 4423 	add.w	r4, r4, r3, asr #16
   3fadc:	b29b      	uxth	r3, r3
   3fade:	ea4f 4e24 	mov.w	lr, r4, asr #16
   3fae2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   3fae6:	f841 4b04 	str.w	r4, [r1], #4
   3faea:	d8e5      	bhi.n	3fab8 <__mdiff+0x5c>
   3faec:	45bc      	cmp	ip, r7
   3faee:	d304      	bcc.n	3fafa <__mdiff+0x9e>
   3faf0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   3faf4:	b183      	cbz	r3, 3fb18 <__mdiff+0xbc>
   3faf6:	6106      	str	r6, [r0, #16]
   3faf8:	e7c2      	b.n	3fa80 <__mdiff+0x24>
   3fafa:	f85c 4b04 	ldr.w	r4, [ip], #4
   3fafe:	b2a2      	uxth	r2, r4
   3fb00:	4472      	add	r2, lr
   3fb02:	1413      	asrs	r3, r2, #16
   3fb04:	b292      	uxth	r2, r2
   3fb06:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   3fb0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   3fb0e:	ea4f 4e23 	mov.w	lr, r3, asr #16
   3fb12:	f841 2b04 	str.w	r2, [r1], #4
   3fb16:	e7e9      	b.n	3faec <__mdiff+0x90>
   3fb18:	3e01      	subs	r6, #1
   3fb1a:	e7e9      	b.n	3faf0 <__mdiff+0x94>

0003fb1c <__d2b>:
   3fb1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3fb20:	ec59 8b10 	vmov	r8, r9, d0
   3fb24:	f3c9 540a 	ubfx	r4, r9, #20, #11
   3fb28:	460e      	mov	r6, r1
   3fb2a:	2101      	movs	r1, #1
   3fb2c:	4615      	mov	r5, r2
   3fb2e:	f7ff fd7a 	bl	3f626 <_Balloc>
   3fb32:	f3c9 0313 	ubfx	r3, r9, #0, #20
   3fb36:	4607      	mov	r7, r0
   3fb38:	bb2c      	cbnz	r4, 3fb86 <__d2b+0x6a>
   3fb3a:	9301      	str	r3, [sp, #4]
   3fb3c:	f1b8 0300 	subs.w	r3, r8, #0
   3fb40:	d026      	beq.n	3fb90 <__d2b+0x74>
   3fb42:	4668      	mov	r0, sp
   3fb44:	9300      	str	r3, [sp, #0]
   3fb46:	f7ff fe54 	bl	3f7f2 <__lo0bits>
   3fb4a:	9900      	ldr	r1, [sp, #0]
   3fb4c:	b1f0      	cbz	r0, 3fb8c <__d2b+0x70>
   3fb4e:	9a01      	ldr	r2, [sp, #4]
   3fb50:	f1c0 0320 	rsb	r3, r0, #32
   3fb54:	fa02 f303 	lsl.w	r3, r2, r3
   3fb58:	40c2      	lsrs	r2, r0
   3fb5a:	430b      	orrs	r3, r1
   3fb5c:	9201      	str	r2, [sp, #4]
   3fb5e:	617b      	str	r3, [r7, #20]
   3fb60:	9b01      	ldr	r3, [sp, #4]
   3fb62:	2b00      	cmp	r3, #0
   3fb64:	61bb      	str	r3, [r7, #24]
   3fb66:	bf14      	ite	ne
   3fb68:	2102      	movne	r1, #2
   3fb6a:	2101      	moveq	r1, #1
   3fb6c:	6139      	str	r1, [r7, #16]
   3fb6e:	b1c4      	cbz	r4, 3fba2 <__d2b+0x86>
   3fb70:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   3fb74:	4404      	add	r4, r0
   3fb76:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   3fb7a:	6034      	str	r4, [r6, #0]
   3fb7c:	6028      	str	r0, [r5, #0]
   3fb7e:	4638      	mov	r0, r7
   3fb80:	b003      	add	sp, #12
   3fb82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3fb86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   3fb8a:	e7d6      	b.n	3fb3a <__d2b+0x1e>
   3fb8c:	6179      	str	r1, [r7, #20]
   3fb8e:	e7e7      	b.n	3fb60 <__d2b+0x44>
   3fb90:	a801      	add	r0, sp, #4
   3fb92:	f7ff fe2e 	bl	3f7f2 <__lo0bits>
   3fb96:	9b01      	ldr	r3, [sp, #4]
   3fb98:	2101      	movs	r1, #1
   3fb9a:	3020      	adds	r0, #32
   3fb9c:	617b      	str	r3, [r7, #20]
   3fb9e:	6139      	str	r1, [r7, #16]
   3fba0:	e7e5      	b.n	3fb6e <__d2b+0x52>
   3fba2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   3fba6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   3fbaa:	6030      	str	r0, [r6, #0]
   3fbac:	6918      	ldr	r0, [r3, #16]
   3fbae:	f7ff fe00 	bl	3f7b2 <__hi0bits>
   3fbb2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   3fbb6:	e7e1      	b.n	3fb7c <__d2b+0x60>

0003fbb8 <__ratio>:
   3fbb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fbbc:	4688      	mov	r8, r1
   3fbbe:	4681      	mov	r9, r0
   3fbc0:	4669      	mov	r1, sp
   3fbc2:	f7fb fdc5 	bl	3b750 <__b2d>
   3fbc6:	a901      	add	r1, sp, #4
   3fbc8:	4640      	mov	r0, r8
   3fbca:	ec57 6b10 	vmov	r6, r7, d0
   3fbce:	f7fb fdbf 	bl	3b750 <__b2d>
   3fbd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   3fbd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   3fbda:	463d      	mov	r5, r7
   3fbdc:	4630      	mov	r0, r6
   3fbde:	eba3 0c02 	sub.w	ip, r3, r2
   3fbe2:	e9dd 3200 	ldrd	r3, r2, [sp]
   3fbe6:	ec5b ab10 	vmov	sl, fp, d0
   3fbea:	1a9b      	subs	r3, r3, r2
   3fbec:	4659      	mov	r1, fp
   3fbee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   3fbf2:	2b00      	cmp	r3, #0
   3fbf4:	bfcd      	iteet	gt
   3fbf6:	463a      	movgt	r2, r7
   3fbf8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   3fbfc:	465a      	movle	r2, fp
   3fbfe:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
   3fc02:	bfd8      	it	le
   3fc04:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
   3fc08:	ee10 2a10 	vmov	r2, s0
   3fc0c:	460b      	mov	r3, r1
   3fc0e:	4629      	mov	r1, r5
   3fc10:	f7dc fefc 	bl	1ca0c <__aeabi_ddiv>
   3fc14:	ec41 0b10 	vmov	d0, r0, r1
   3fc18:	b003      	add	sp, #12
   3fc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003fc1e <__copybits>:
   3fc1e:	3901      	subs	r1, #1
   3fc20:	f102 0314 	add.w	r3, r2, #20
   3fc24:	1149      	asrs	r1, r1, #5
   3fc26:	b510      	push	{r4, lr}
   3fc28:	3101      	adds	r1, #1
   3fc2a:	6914      	ldr	r4, [r2, #16]
   3fc2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   3fc30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   3fc34:	42a3      	cmp	r3, r4
   3fc36:	4602      	mov	r2, r0
   3fc38:	d303      	bcc.n	3fc42 <__copybits+0x24>
   3fc3a:	2300      	movs	r3, #0
   3fc3c:	428a      	cmp	r2, r1
   3fc3e:	d305      	bcc.n	3fc4c <__copybits+0x2e>
   3fc40:	bd10      	pop	{r4, pc}
   3fc42:	f853 2b04 	ldr.w	r2, [r3], #4
   3fc46:	f840 2b04 	str.w	r2, [r0], #4
   3fc4a:	e7f3      	b.n	3fc34 <__copybits+0x16>
   3fc4c:	f842 3b04 	str.w	r3, [r2], #4
   3fc50:	e7f4      	b.n	3fc3c <__copybits+0x1e>

0003fc52 <__any_on>:
   3fc52:	f100 0214 	add.w	r2, r0, #20
   3fc56:	114b      	asrs	r3, r1, #5
   3fc58:	6900      	ldr	r0, [r0, #16]
   3fc5a:	4298      	cmp	r0, r3
   3fc5c:	b510      	push	{r4, lr}
   3fc5e:	db11      	blt.n	3fc84 <__any_on+0x32>
   3fc60:	dd0a      	ble.n	3fc78 <__any_on+0x26>
   3fc62:	f011 011f 	ands.w	r1, r1, #31
   3fc66:	d007      	beq.n	3fc78 <__any_on+0x26>
   3fc68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   3fc6c:	fa24 f001 	lsr.w	r0, r4, r1
   3fc70:	fa00 f101 	lsl.w	r1, r0, r1
   3fc74:	428c      	cmp	r4, r1
   3fc76:	d10b      	bne.n	3fc90 <__any_on+0x3e>
   3fc78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   3fc7c:	4293      	cmp	r3, r2
   3fc7e:	d803      	bhi.n	3fc88 <__any_on+0x36>
   3fc80:	2000      	movs	r0, #0
   3fc82:	bd10      	pop	{r4, pc}
   3fc84:	4603      	mov	r3, r0
   3fc86:	e7f7      	b.n	3fc78 <__any_on+0x26>
   3fc88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   3fc8c:	2900      	cmp	r1, #0
   3fc8e:	d0f5      	beq.n	3fc7c <__any_on+0x2a>
   3fc90:	2001      	movs	r0, #1
   3fc92:	e7f6      	b.n	3fc82 <__any_on+0x30>

0003fc94 <_calloc_r>:
   3fc94:	b538      	push	{r3, r4, r5, lr}
   3fc96:	fb02 f401 	mul.w	r4, r2, r1
   3fc9a:	4621      	mov	r1, r4
   3fc9c:	f7fa f914 	bl	39ec8 <_malloc_r>
   3fca0:	4605      	mov	r5, r0
   3fca2:	b118      	cbz	r0, 3fcac <_calloc_r+0x18>
   3fca4:	4622      	mov	r2, r4
   3fca6:	2100      	movs	r1, #0
   3fca8:	f7ff f82f 	bl	3ed0a <memset>
   3fcac:	4628      	mov	r0, r5
   3fcae:	bd38      	pop	{r3, r4, r5, pc}

0003fcb0 <_realloc_r>:
   3fcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3fcb2:	4607      	mov	r7, r0
   3fcb4:	4614      	mov	r4, r2
   3fcb6:	460e      	mov	r6, r1
   3fcb8:	b921      	cbnz	r1, 3fcc4 <_realloc_r+0x14>
   3fcba:	4611      	mov	r1, r2
   3fcbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   3fcc0:	f7fa b902 	b.w	39ec8 <_malloc_r>
   3fcc4:	b922      	cbnz	r2, 3fcd0 <_realloc_r+0x20>
   3fcc6:	4625      	mov	r5, r4
   3fcc8:	f7fa f8b0 	bl	39e2c <_free_r>
   3fccc:	4628      	mov	r0, r5
   3fcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3fcd0:	f000 f968 	bl	3ffa4 <_malloc_usable_size_r>
   3fcd4:	42a0      	cmp	r0, r4
   3fcd6:	d20f      	bcs.n	3fcf8 <_realloc_r+0x48>
   3fcd8:	4621      	mov	r1, r4
   3fcda:	4638      	mov	r0, r7
   3fcdc:	f7fa f8f4 	bl	39ec8 <_malloc_r>
   3fce0:	4605      	mov	r5, r0
   3fce2:	2800      	cmp	r0, #0
   3fce4:	d0f2      	beq.n	3fccc <_realloc_r+0x1c>
   3fce6:	4631      	mov	r1, r6
   3fce8:	4622      	mov	r2, r4
   3fcea:	f7fe ffee 	bl	3ecca <memcpy>
   3fcee:	4631      	mov	r1, r6
   3fcf0:	4638      	mov	r0, r7
   3fcf2:	f7fa f89b 	bl	39e2c <_free_r>
   3fcf6:	e7e9      	b.n	3fccc <_realloc_r+0x1c>
   3fcf8:	4635      	mov	r5, r6
   3fcfa:	e7e7      	b.n	3fccc <_realloc_r+0x1c>

0003fcfc <__ssputs_r>:
   3fcfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3fd00:	688e      	ldr	r6, [r1, #8]
   3fd02:	4682      	mov	sl, r0
   3fd04:	460c      	mov	r4, r1
   3fd06:	4691      	mov	r9, r2
   3fd08:	429e      	cmp	r6, r3
   3fd0a:	4698      	mov	r8, r3
   3fd0c:	d838      	bhi.n	3fd80 <__ssputs_r+0x84>
   3fd0e:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   3fd12:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   3fd16:	d031      	beq.n	3fd7c <__ssputs_r+0x80>
   3fd18:	6962      	ldr	r2, [r4, #20]
   3fd1a:	3301      	adds	r3, #1
   3fd1c:	6825      	ldr	r5, [r4, #0]
   3fd1e:	6909      	ldr	r1, [r1, #16]
   3fd20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3fd24:	1a6f      	subs	r7, r5, r1
   3fd26:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   3fd2a:	443b      	add	r3, r7
   3fd2c:	1055      	asrs	r5, r2, #1
   3fd2e:	429d      	cmp	r5, r3
   3fd30:	bf38      	it	cc
   3fd32:	461d      	movcc	r5, r3
   3fd34:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   3fd38:	d030      	beq.n	3fd9c <__ssputs_r+0xa0>
   3fd3a:	4629      	mov	r1, r5
   3fd3c:	f7fa f8c4 	bl	39ec8 <_malloc_r>
   3fd40:	4606      	mov	r6, r0
   3fd42:	b950      	cbnz	r0, 3fd5a <__ssputs_r+0x5e>
   3fd44:	230c      	movs	r3, #12
   3fd46:	f04f 30ff 	mov.w	r0, #4294967295
   3fd4a:	f8ca 3000 	str.w	r3, [sl]
   3fd4e:	89a3      	ldrh	r3, [r4, #12]
   3fd50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3fd54:	81a3      	strh	r3, [r4, #12]
   3fd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3fd5a:	463a      	mov	r2, r7
   3fd5c:	6921      	ldr	r1, [r4, #16]
   3fd5e:	f7fe ffb4 	bl	3ecca <memcpy>
   3fd62:	89a3      	ldrh	r3, [r4, #12]
   3fd64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   3fd68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3fd6c:	81a3      	strh	r3, [r4, #12]
   3fd6e:	6126      	str	r6, [r4, #16]
   3fd70:	443e      	add	r6, r7
   3fd72:	6165      	str	r5, [r4, #20]
   3fd74:	1bed      	subs	r5, r5, r7
   3fd76:	6026      	str	r6, [r4, #0]
   3fd78:	4646      	mov	r6, r8
   3fd7a:	60a5      	str	r5, [r4, #8]
   3fd7c:	4546      	cmp	r6, r8
   3fd7e:	d900      	bls.n	3fd82 <__ssputs_r+0x86>
   3fd80:	4646      	mov	r6, r8
   3fd82:	4632      	mov	r2, r6
   3fd84:	4649      	mov	r1, r9
   3fd86:	6820      	ldr	r0, [r4, #0]
   3fd88:	f7ff fc33 	bl	3f5f2 <memmove>
   3fd8c:	68a3      	ldr	r3, [r4, #8]
   3fd8e:	2000      	movs	r0, #0
   3fd90:	1b9b      	subs	r3, r3, r6
   3fd92:	60a3      	str	r3, [r4, #8]
   3fd94:	6823      	ldr	r3, [r4, #0]
   3fd96:	441e      	add	r6, r3
   3fd98:	6026      	str	r6, [r4, #0]
   3fd9a:	e7dc      	b.n	3fd56 <__ssputs_r+0x5a>
   3fd9c:	462a      	mov	r2, r5
   3fd9e:	f7ff ff87 	bl	3fcb0 <_realloc_r>
   3fda2:	4606      	mov	r6, r0
   3fda4:	2800      	cmp	r0, #0
   3fda6:	d1e2      	bne.n	3fd6e <__ssputs_r+0x72>
   3fda8:	6921      	ldr	r1, [r4, #16]
   3fdaa:	4650      	mov	r0, sl
   3fdac:	f7fa f83e 	bl	39e2c <_free_r>
   3fdb0:	e7c8      	b.n	3fd44 <__ssputs_r+0x48>

0003fdb2 <_sungetc_r>:
   3fdb2:	b538      	push	{r3, r4, r5, lr}
   3fdb4:	1c4b      	adds	r3, r1, #1
   3fdb6:	4614      	mov	r4, r2
   3fdb8:	d103      	bne.n	3fdc2 <_sungetc_r+0x10>
   3fdba:	f04f 35ff 	mov.w	r5, #4294967295
   3fdbe:	4628      	mov	r0, r5
   3fdc0:	bd38      	pop	{r3, r4, r5, pc}
   3fdc2:	8993      	ldrh	r3, [r2, #12]
   3fdc4:	b2cd      	uxtb	r5, r1
   3fdc6:	f023 0320 	bic.w	r3, r3, #32
   3fdca:	8193      	strh	r3, [r2, #12]
   3fdcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3fdce:	6852      	ldr	r2, [r2, #4]
   3fdd0:	b18b      	cbz	r3, 3fdf6 <_sungetc_r+0x44>
   3fdd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3fdd4:	4293      	cmp	r3, r2
   3fdd6:	dd08      	ble.n	3fdea <_sungetc_r+0x38>
   3fdd8:	6823      	ldr	r3, [r4, #0]
   3fdda:	1e5a      	subs	r2, r3, #1
   3fddc:	6022      	str	r2, [r4, #0]
   3fdde:	f803 5c01 	strb.w	r5, [r3, #-1]
   3fde2:	6863      	ldr	r3, [r4, #4]
   3fde4:	3301      	adds	r3, #1
   3fde6:	6063      	str	r3, [r4, #4]
   3fde8:	e7e9      	b.n	3fdbe <_sungetc_r+0xc>
   3fdea:	4621      	mov	r1, r4
   3fdec:	f000 f896 	bl	3ff1c <__submore>
   3fdf0:	2800      	cmp	r0, #0
   3fdf2:	d0f1      	beq.n	3fdd8 <_sungetc_r+0x26>
   3fdf4:	e7e1      	b.n	3fdba <_sungetc_r+0x8>
   3fdf6:	6921      	ldr	r1, [r4, #16]
   3fdf8:	6823      	ldr	r3, [r4, #0]
   3fdfa:	b151      	cbz	r1, 3fe12 <_sungetc_r+0x60>
   3fdfc:	4299      	cmp	r1, r3
   3fdfe:	d208      	bcs.n	3fe12 <_sungetc_r+0x60>
   3fe00:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   3fe04:	42a9      	cmp	r1, r5
   3fe06:	d104      	bne.n	3fe12 <_sungetc_r+0x60>
   3fe08:	3b01      	subs	r3, #1
   3fe0a:	3201      	adds	r2, #1
   3fe0c:	6023      	str	r3, [r4, #0]
   3fe0e:	6062      	str	r2, [r4, #4]
   3fe10:	e7d5      	b.n	3fdbe <_sungetc_r+0xc>
   3fe12:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   3fe16:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3fe1a:	6363      	str	r3, [r4, #52]	; 0x34
   3fe1c:	2303      	movs	r3, #3
   3fe1e:	63a3      	str	r3, [r4, #56]	; 0x38
   3fe20:	4623      	mov	r3, r4
   3fe22:	f803 5f46 	strb.w	r5, [r3, #70]!
   3fe26:	6023      	str	r3, [r4, #0]
   3fe28:	2301      	movs	r3, #1
   3fe2a:	e7dc      	b.n	3fde6 <_sungetc_r+0x34>

0003fe2c <__ssrefill_r>:
   3fe2c:	b510      	push	{r4, lr}
   3fe2e:	460c      	mov	r4, r1
   3fe30:	6b49      	ldr	r1, [r1, #52]	; 0x34
   3fe32:	b169      	cbz	r1, 3fe50 <__ssrefill_r+0x24>
   3fe34:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3fe38:	4299      	cmp	r1, r3
   3fe3a:	d001      	beq.n	3fe40 <__ssrefill_r+0x14>
   3fe3c:	f7f9 fff6 	bl	39e2c <_free_r>
   3fe40:	2000      	movs	r0, #0
   3fe42:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3fe44:	6360      	str	r0, [r4, #52]	; 0x34
   3fe46:	6063      	str	r3, [r4, #4]
   3fe48:	b113      	cbz	r3, 3fe50 <__ssrefill_r+0x24>
   3fe4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   3fe4c:	6023      	str	r3, [r4, #0]
   3fe4e:	bd10      	pop	{r4, pc}
   3fe50:	6923      	ldr	r3, [r4, #16]
   3fe52:	f04f 30ff 	mov.w	r0, #4294967295
   3fe56:	6023      	str	r3, [r4, #0]
   3fe58:	2300      	movs	r3, #0
   3fe5a:	6063      	str	r3, [r4, #4]
   3fe5c:	89a3      	ldrh	r3, [r4, #12]
   3fe5e:	f043 0320 	orr.w	r3, r3, #32
   3fe62:	81a3      	strh	r3, [r4, #12]
   3fe64:	e7f3      	b.n	3fe4e <__ssrefill_r+0x22>

0003fe66 <__sccl>:
   3fe66:	b570      	push	{r4, r5, r6, lr}
   3fe68:	780b      	ldrb	r3, [r1, #0]
   3fe6a:	1e44      	subs	r4, r0, #1
   3fe6c:	f100 05ff 	add.w	r5, r0, #255	; 0xff
   3fe70:	2b5e      	cmp	r3, #94	; 0x5e
   3fe72:	bf13      	iteet	ne
   3fe74:	1c4a      	addne	r2, r1, #1
   3fe76:	1c8a      	addeq	r2, r1, #2
   3fe78:	784b      	ldrbeq	r3, [r1, #1]
   3fe7a:	2100      	movne	r1, #0
   3fe7c:	bf08      	it	eq
   3fe7e:	2101      	moveq	r1, #1
   3fe80:	f804 1f01 	strb.w	r1, [r4, #1]!
   3fe84:	42ac      	cmp	r4, r5
   3fe86:	d1fb      	bne.n	3fe80 <__sccl+0x1a>
   3fe88:	b913      	cbnz	r3, 3fe90 <__sccl+0x2a>
   3fe8a:	3a01      	subs	r2, #1
   3fe8c:	4610      	mov	r0, r2
   3fe8e:	bd70      	pop	{r4, r5, r6, pc}
   3fe90:	f081 0401 	eor.w	r4, r1, #1
   3fe94:	1c51      	adds	r1, r2, #1
   3fe96:	54c4      	strb	r4, [r0, r3]
   3fe98:	f811 5c01 	ldrb.w	r5, [r1, #-1]
   3fe9c:	1e4e      	subs	r6, r1, #1
   3fe9e:	460a      	mov	r2, r1
   3fea0:	2d2d      	cmp	r5, #45	; 0x2d
   3fea2:	d006      	beq.n	3feb2 <__sccl+0x4c>
   3fea4:	2d5d      	cmp	r5, #93	; 0x5d
   3fea6:	d0f1      	beq.n	3fe8c <__sccl+0x26>
   3fea8:	b90d      	cbnz	r5, 3feae <__sccl+0x48>
   3feaa:	4632      	mov	r2, r6
   3feac:	e7ee      	b.n	3fe8c <__sccl+0x26>
   3feae:	462b      	mov	r3, r5
   3feb0:	e7f0      	b.n	3fe94 <__sccl+0x2e>
   3feb2:	780e      	ldrb	r6, [r1, #0]
   3feb4:	2e5d      	cmp	r6, #93	; 0x5d
   3feb6:	d0fa      	beq.n	3feae <__sccl+0x48>
   3feb8:	42b3      	cmp	r3, r6
   3feba:	dcf8      	bgt.n	3feae <__sccl+0x48>
   3febc:	3301      	adds	r3, #1
   3febe:	429e      	cmp	r6, r3
   3fec0:	54c4      	strb	r4, [r0, r3]
   3fec2:	dcfb      	bgt.n	3febc <__sccl+0x56>
   3fec4:	3102      	adds	r1, #2
   3fec6:	e7e7      	b.n	3fe98 <__sccl+0x32>

0003fec8 <_raise_r>:
   3fec8:	291f      	cmp	r1, #31
   3feca:	b538      	push	{r3, r4, r5, lr}
   3fecc:	4604      	mov	r4, r0
   3fece:	460d      	mov	r5, r1
   3fed0:	d904      	bls.n	3fedc <_raise_r+0x14>
   3fed2:	2316      	movs	r3, #22
   3fed4:	6003      	str	r3, [r0, #0]
   3fed6:	f04f 30ff 	mov.w	r0, #4294967295
   3feda:	bd38      	pop	{r3, r4, r5, pc}
   3fedc:	6c42      	ldr	r2, [r0, #68]	; 0x44
   3fede:	b112      	cbz	r2, 3fee6 <_raise_r+0x1e>
   3fee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   3fee4:	b94b      	cbnz	r3, 3fefa <_raise_r+0x32>
   3fee6:	4620      	mov	r0, r4
   3fee8:	f000 f816 	bl	3ff18 <_getpid_r>
   3feec:	462a      	mov	r2, r5
   3feee:	4601      	mov	r1, r0
   3fef0:	4620      	mov	r0, r4
   3fef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3fef6:	f7fc b821 	b.w	3bf3c <_kill_r>
   3fefa:	2b01      	cmp	r3, #1
   3fefc:	d00a      	beq.n	3ff14 <_raise_r+0x4c>
   3fefe:	1c59      	adds	r1, r3, #1
   3ff00:	d103      	bne.n	3ff0a <_raise_r+0x42>
   3ff02:	2316      	movs	r3, #22
   3ff04:	6003      	str	r3, [r0, #0]
   3ff06:	2001      	movs	r0, #1
   3ff08:	e7e7      	b.n	3feda <_raise_r+0x12>
   3ff0a:	2400      	movs	r4, #0
   3ff0c:	4628      	mov	r0, r5
   3ff0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   3ff12:	4798      	blx	r3
   3ff14:	2000      	movs	r0, #0
   3ff16:	e7e0      	b.n	3feda <_raise_r+0x12>

0003ff18 <_getpid_r>:
   3ff18:	f7fc bd91 	b.w	3ca3e <_getpid>

0003ff1c <__submore>:
   3ff1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ff20:	460c      	mov	r4, r1
   3ff22:	6b49      	ldr	r1, [r1, #52]	; 0x34
   3ff24:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3ff28:	4299      	cmp	r1, r3
   3ff2a:	d11a      	bne.n	3ff62 <__submore+0x46>
   3ff2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   3ff30:	f7f9 ffca 	bl	39ec8 <_malloc_r>
   3ff34:	b918      	cbnz	r0, 3ff3e <__submore+0x22>
   3ff36:	f04f 30ff 	mov.w	r0, #4294967295
   3ff3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ff3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3ff42:	6360      	str	r0, [r4, #52]	; 0x34
   3ff44:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   3ff48:	63a3      	str	r3, [r4, #56]	; 0x38
   3ff4a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   3ff4e:	7083      	strb	r3, [r0, #2]
   3ff50:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   3ff54:	7043      	strb	r3, [r0, #1]
   3ff56:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   3ff5a:	7003      	strb	r3, [r0, #0]
   3ff5c:	6020      	str	r0, [r4, #0]
   3ff5e:	2000      	movs	r0, #0
   3ff60:	e7eb      	b.n	3ff3a <__submore+0x1e>
   3ff62:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   3ff64:	0077      	lsls	r7, r6, #1
   3ff66:	463a      	mov	r2, r7
   3ff68:	f7ff fea2 	bl	3fcb0 <_realloc_r>
   3ff6c:	4605      	mov	r5, r0
   3ff6e:	2800      	cmp	r0, #0
   3ff70:	d0e1      	beq.n	3ff36 <__submore+0x1a>
   3ff72:	eb00 0806 	add.w	r8, r0, r6
   3ff76:	4601      	mov	r1, r0
   3ff78:	4632      	mov	r2, r6
   3ff7a:	4640      	mov	r0, r8
   3ff7c:	f7fe fea5 	bl	3ecca <memcpy>
   3ff80:	f8c4 8000 	str.w	r8, [r4]
   3ff84:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   3ff88:	e7e9      	b.n	3ff5e <__submore+0x42>

0003ff8a <__ascii_wctomb>:
   3ff8a:	b149      	cbz	r1, 3ffa0 <__ascii_wctomb+0x16>
   3ff8c:	2aff      	cmp	r2, #255	; 0xff
   3ff8e:	bf8d      	iteet	hi
   3ff90:	238a      	movhi	r3, #138	; 0x8a
   3ff92:	700a      	strbls	r2, [r1, #0]
   3ff94:	2001      	movls	r0, #1
   3ff96:	6003      	strhi	r3, [r0, #0]
   3ff98:	bf88      	it	hi
   3ff9a:	f04f 30ff 	movhi.w	r0, #4294967295
   3ff9e:	4770      	bx	lr
   3ffa0:	4608      	mov	r0, r1
   3ffa2:	4770      	bx	lr

0003ffa4 <_malloc_usable_size_r>:
   3ffa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3ffa8:	1f18      	subs	r0, r3, #4
   3ffaa:	2b00      	cmp	r3, #0
   3ffac:	bfbc      	itt	lt
   3ffae:	580b      	ldrlt	r3, [r1, r0]
   3ffb0:	18c0      	addlt	r0, r0, r3
   3ffb2:	4770      	bx	lr
