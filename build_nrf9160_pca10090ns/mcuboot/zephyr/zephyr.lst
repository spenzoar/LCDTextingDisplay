
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return 0;
}

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   0:	20004f30 	.word	0x20004f30
   4:	000020f9 	.word	0x000020f9
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   8:	000058bf 	.word	0x000058bf
   c:	00002089 	.word	0x00002089
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
  10:	00002089 	.word	0x00002089
  14:	00002089 	.word	0x00002089
  18:	00002089 	.word	0x00002089
  1c:	00002089 	.word	0x00002089
		errno = err;
		return NULL;
	}

	return fd_entry->obj;
  20:	00002089 	.word	0x00002089
}
  24:	00002089 	.word	0x00002089
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  28:	00002089 	.word	0x00002089
		return NULL;
  2c:	00002011 	.word	0x00002011
		return NULL;
  30:	00002089 	.word	0x00002089
  34:	00002089 	.word	0x00002089
  38:	00001fbd 	.word	0x00001fbd
  3c:	00005897 	.word	0x00005897

00000040 <_irq_vector_table>:
  40:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
  50:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
  60:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
  70:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
  80:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
  90:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
  a0:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
  b0:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
  c0:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
  d0:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
  e0:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
  f0:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
 100:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
 110:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
 120:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
 130:	000020d1 000020d1 000020d1 000020d1     . ... ... ... ..
 140:	000020d1                                . ..

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b970 	b.w	43c <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f806 	bl	174 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__udivmoddi4>:
     174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     178:	9e09      	ldr	r6, [sp, #36]	; 0x24
     17a:	4604      	mov	r4, r0
     17c:	4689      	mov	r9, r1
     17e:	2b00      	cmp	r3, #0
     180:	f040 8083 	bne.w	28a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x8a>
     184:	428a      	cmp	r2, r1
     186:	4615      	mov	r5, r2
     188:	d945      	bls.n	216 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x16>
     18a:	fab2 f282 	clz	r2, r2
     18e:	b14a      	cbz	r2, 1a4 <__udivmoddi4+0x30>
     190:	f1c2 0720 	rsb	r7, r2, #32
     194:	fa01 f302 	lsl.w	r3, r1, r2
     198:	4095      	lsls	r5, r2
     19a:	4094      	lsls	r4, r2
     19c:	fa20 f707 	lsr.w	r7, r0, r7
     1a0:	ea47 0903 	orr.w	r9, r7, r3
     1a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1a8:	0c23      	lsrs	r3, r4, #16
     1aa:	fa1f f885 	uxth.w	r8, r5
     1ae:	fbb9 fcfe 	udiv	ip, r9, lr
     1b2:	fb0e 991c 	mls	r9, lr, ip, r9
     1b6:	fb0c f108 	mul.w	r1, ip, r8
     1ba:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
     1be:	4299      	cmp	r1, r3
     1c0:	d90a      	bls.n	1d8 <__udivmoddi4+0x64>
     1c2:	18eb      	adds	r3, r5, r3
     1c4:	bf2c      	ite	cs
     1c6:	2001      	movcs	r0, #1
     1c8:	2000      	movcc	r0, #0
     1ca:	4299      	cmp	r1, r3
     1cc:	d902      	bls.n	1d4 <__udivmoddi4+0x60>
     1ce:	2800      	cmp	r0, #0
     1d0:	f000 811d 	beq.w	40e <CONFIG_FLASH_SIZE+0xe>
     1d4:	f10c 3cff 	add.w	ip, ip, #4294967295
     1d8:	1a59      	subs	r1, r3, r1
     1da:	b2a3      	uxth	r3, r4
     1dc:	fbb1 f0fe 	udiv	r0, r1, lr
     1e0:	fb0e 1110 	mls	r1, lr, r0, r1
     1e4:	fb00 f808 	mul.w	r8, r0, r8
     1e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1ec:	45a0      	cmp	r8, r4
     1ee:	d905      	bls.n	1fc <__udivmoddi4+0x88>
     1f0:	192c      	adds	r4, r5, r4
     1f2:	d202      	bcs.n	1fa <__udivmoddi4+0x86>
     1f4:	45a0      	cmp	r8, r4
     1f6:	f200 810e 	bhi.w	416 <CONFIG_FLASH_SIZE+0x16>
     1fa:	3801      	subs	r0, #1
     1fc:	eba4 0408 	sub.w	r4, r4, r8
     200:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     204:	2700      	movs	r7, #0
     206:	b11e      	cbz	r6, 210 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x10>
     208:	40d4      	lsrs	r4, r2
     20a:	2300      	movs	r3, #0
     20c:	e9c6 4300 	strd	r4, r3, [r6]
     210:	4639      	mov	r1, r7
     212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     216:	2a00      	cmp	r2, #0
     218:	d051      	beq.n	2be <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xbe>
     21a:	fab2 f282 	clz	r2, r2
     21e:	2a00      	cmp	r2, #0
     220:	f040 80af 	bne.w	382 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x182>
     224:	1b49      	subs	r1, r1, r5
     226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     22a:	fa1f f885 	uxth.w	r8, r5
     22e:	2701      	movs	r7, #1
     230:	0c23      	lsrs	r3, r4, #16
     232:	fbb1 fcfe 	udiv	ip, r1, lr
     236:	fb0e 111c 	mls	r1, lr, ip, r1
     23a:	fb08 f00c 	mul.w	r0, r8, ip
     23e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     242:	4298      	cmp	r0, r3
     244:	d90a      	bls.n	25c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x5c>
     246:	18eb      	adds	r3, r5, r3
     248:	bf2c      	ite	cs
     24a:	2101      	movcs	r1, #1
     24c:	2100      	movcc	r1, #0
     24e:	4298      	cmp	r0, r3
     250:	d902      	bls.n	258 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x58>
     252:	2900      	cmp	r1, #0
     254:	f000 80d7 	beq.w	406 <CONFIG_FLASH_SIZE+0x6>
     258:	f10c 3cff 	add.w	ip, ip, #4294967295
     25c:	1a19      	subs	r1, r3, r0
     25e:	b2a3      	uxth	r3, r4
     260:	fbb1 f0fe 	udiv	r0, r1, lr
     264:	fb0e 1110 	mls	r1, lr, r0, r1
     268:	fb08 f800 	mul.w	r8, r8, r0
     26c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     270:	45a0      	cmp	r8, r4
     272:	d905      	bls.n	280 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x80>
     274:	192c      	adds	r4, r5, r4
     276:	d202      	bcs.n	27e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x7e>
     278:	45a0      	cmp	r8, r4
     27a:	f200 80c1 	bhi.w	400 <CONFIG_FLASH_SIZE>
     27e:	3801      	subs	r0, #1
     280:	eba4 0408 	sub.w	r4, r4, r8
     284:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     288:	e7bd      	b.n	206 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x6>
     28a:	428b      	cmp	r3, r1
     28c:	d908      	bls.n	2a0 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa0>
     28e:	2e00      	cmp	r6, #0
     290:	d074      	beq.n	37c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x17c>
     292:	2700      	movs	r7, #0
     294:	e9c6 0100 	strd	r0, r1, [r6]
     298:	4638      	mov	r0, r7
     29a:	4639      	mov	r1, r7
     29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     2a0:	fab3 f783 	clz	r7, r3
     2a4:	b967      	cbnz	r7, 2c0 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xc0>
     2a6:	428b      	cmp	r3, r1
     2a8:	f0c0 80a4 	bcc.w	3f4 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1f4>
     2ac:	4282      	cmp	r2, r0
     2ae:	f240 80a1 	bls.w	3f4 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1f4>
     2b2:	4638      	mov	r0, r7
     2b4:	2e00      	cmp	r6, #0
     2b6:	d0ab      	beq.n	210 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x10>
     2b8:	e9c6 4900 	strd	r4, r9, [r6]
     2bc:	e7a8      	b.n	210 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x10>
     2be:	deff      	udf	#255	; 0xff
     2c0:	f1c7 0520 	rsb	r5, r7, #32
     2c4:	40bb      	lsls	r3, r7
     2c6:	fa02 fc07 	lsl.w	ip, r2, r7
     2ca:	fa01 f407 	lsl.w	r4, r1, r7
     2ce:	40ea      	lsrs	r2, r5
     2d0:	fa20 f805 	lsr.w	r8, r0, r5
     2d4:	40e9      	lsrs	r1, r5
     2d6:	fa00 fe07 	lsl.w	lr, r0, r7
     2da:	431a      	orrs	r2, r3
     2dc:	ea48 0404 	orr.w	r4, r8, r4
     2e0:	ea4f 4812 	mov.w	r8, r2, lsr #16
     2e4:	0c20      	lsrs	r0, r4, #16
     2e6:	fa1f f982 	uxth.w	r9, r2
     2ea:	fbb1 faf8 	udiv	sl, r1, r8
     2ee:	fb08 111a 	mls	r1, r8, sl, r1
     2f2:	fb0a fb09 	mul.w	fp, sl, r9
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	458b      	cmp	fp, r1
     2fc:	d90a      	bls.n	314 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x114>
     2fe:	1851      	adds	r1, r2, r1
     300:	bf2c      	ite	cs
     302:	2301      	movcs	r3, #1
     304:	2300      	movcc	r3, #0
     306:	458b      	cmp	fp, r1
     308:	d902      	bls.n	310 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x110>
     30a:	2b00      	cmp	r3, #0
     30c:	f000 8088 	beq.w	420 <CONFIG_FLASH_SIZE+0x20>
     310:	f10a 3aff 	add.w	sl, sl, #4294967295
     314:	eba1 010b 	sub.w	r1, r1, fp
     318:	b2a4      	uxth	r4, r4
     31a:	fbb1 f0f8 	udiv	r0, r1, r8
     31e:	fb08 1110 	mls	r1, r8, r0, r1
     322:	fb00 f909 	mul.w	r9, r0, r9
     326:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
     32a:	4589      	cmp	r9, r1
     32c:	d904      	bls.n	338 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x138>
     32e:	1851      	adds	r1, r2, r1
     330:	d201      	bcs.n	336 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x136>
     332:	4589      	cmp	r9, r1
     334:	d87b      	bhi.n	42e <CONFIG_FLASH_SIZE+0x2e>
     336:	3801      	subs	r0, #1
     338:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     33c:	eba1 0109 	sub.w	r1, r1, r9
     340:	fba0 890c 	umull	r8, r9, r0, ip
     344:	4549      	cmp	r1, r9
     346:	4644      	mov	r4, r8
     348:	464b      	mov	r3, r9
     34a:	d302      	bcc.n	352 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x152>
     34c:	d106      	bne.n	35c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x15c>
     34e:	45c6      	cmp	lr, r8
     350:	d204      	bcs.n	35c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x15c>
     352:	3801      	subs	r0, #1
     354:	ebb8 040c 	subs.w	r4, r8, ip
     358:	eb69 0302 	sbc.w	r3, r9, r2
     35c:	2e00      	cmp	r6, #0
     35e:	d05d      	beq.n	41c <CONFIG_FLASH_SIZE+0x1c>
     360:	ebbe 0204 	subs.w	r2, lr, r4
     364:	eb61 0103 	sbc.w	r1, r1, r3
     368:	fa01 f505 	lsl.w	r5, r1, r5
     36c:	fa22 f307 	lsr.w	r3, r2, r7
     370:	40f9      	lsrs	r1, r7
     372:	2700      	movs	r7, #0
     374:	431d      	orrs	r5, r3
     376:	e9c6 5100 	strd	r5, r1, [r6]
     37a:	e749      	b.n	210 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x10>
     37c:	4637      	mov	r7, r6
     37e:	4630      	mov	r0, r6
     380:	e746      	b.n	210 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x10>
     382:	f1c2 0020 	rsb	r0, r2, #32
     386:	4095      	lsls	r5, r2
     388:	fa01 f702 	lsl.w	r7, r1, r2
     38c:	fa21 f300 	lsr.w	r3, r1, r0
     390:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     394:	fa24 f100 	lsr.w	r1, r4, r0
     398:	fa1f f885 	uxth.w	r8, r5
     39c:	4094      	lsls	r4, r2
     39e:	4339      	orrs	r1, r7
     3a0:	fbb3 f0fe 	udiv	r0, r3, lr
     3a4:	0c0f      	lsrs	r7, r1, #16
     3a6:	fb0e 3310 	mls	r3, lr, r0, r3
     3aa:	fb00 fc08 	mul.w	ip, r0, r8
     3ae:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
     3b2:	459c      	cmp	ip, r3
     3b4:	d907      	bls.n	3c6 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1c6>
     3b6:	18eb      	adds	r3, r5, r3
     3b8:	bf2c      	ite	cs
     3ba:	2701      	movcs	r7, #1
     3bc:	2700      	movcc	r7, #0
     3be:	459c      	cmp	ip, r3
     3c0:	d900      	bls.n	3c4 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1c4>
     3c2:	b38f      	cbz	r7, 428 <CONFIG_FLASH_SIZE+0x28>
     3c4:	3801      	subs	r0, #1
     3c6:	eba3 030c 	sub.w	r3, r3, ip
     3ca:	b289      	uxth	r1, r1
     3cc:	fbb3 f7fe 	udiv	r7, r3, lr
     3d0:	fb0e 3317 	mls	r3, lr, r7, r3
     3d4:	fb07 fc08 	mul.w	ip, r7, r8
     3d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3dc:	458c      	cmp	ip, r1
     3de:	d904      	bls.n	3ea <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1ea>
     3e0:	1869      	adds	r1, r5, r1
     3e2:	d201      	bcs.n	3e8 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1e8>
     3e4:	458c      	cmp	ip, r1
     3e6:	d825      	bhi.n	434 <CONFIG_FLASH_SIZE+0x34>
     3e8:	3f01      	subs	r7, #1
     3ea:	eba1 010c 	sub.w	r1, r1, ip
     3ee:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
     3f2:	e71d      	b.n	230 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x30>
     3f4:	1a84      	subs	r4, r0, r2
     3f6:	eb61 0303 	sbc.w	r3, r1, r3
     3fa:	2001      	movs	r0, #1
     3fc:	4699      	mov	r9, r3
     3fe:	e759      	b.n	2b4 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xb4>
     400:	3802      	subs	r0, #2
     402:	442c      	add	r4, r5
     404:	e73c      	b.n	280 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x80>
     406:	f1ac 0c02 	sub.w	ip, ip, #2
     40a:	442b      	add	r3, r5
     40c:	e726      	b.n	25c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x5c>
     40e:	f1ac 0c02 	sub.w	ip, ip, #2
     412:	442b      	add	r3, r5
     414:	e6e0      	b.n	1d8 <__udivmoddi4+0x64>
     416:	3802      	subs	r0, #2
     418:	442c      	add	r4, r5
     41a:	e6ef      	b.n	1fc <__udivmoddi4+0x88>
     41c:	4637      	mov	r7, r6
     41e:	e6f7      	b.n	210 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x10>
     420:	f1aa 0a02 	sub.w	sl, sl, #2
     424:	4411      	add	r1, r2
     426:	e775      	b.n	314 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x114>
     428:	3802      	subs	r0, #2
     42a:	442b      	add	r3, r5
     42c:	e7cb      	b.n	3c6 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1c6>
     42e:	3802      	subs	r0, #2
     430:	4411      	add	r1, r2
     432:	e781      	b.n	338 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x138>
     434:	3f02      	subs	r7, #2
     436:	4429      	add	r1, r5
     438:	e7d7      	b.n	3ea <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1ea>
     43a:	bf00      	nop

0000043c <__aeabi_idiv0>:
     43c:	4770      	bx	lr
     43e:	bf00      	nop

00000440 <main>:
    ((void (*)(void))start)();
}
#endif

void main(void)
{
     440:	b530      	push	{r4, r5, lr}
     442:	b085      	sub	sp, #20
    struct boot_rsp rsp;
    int rc;

    BOOT_LOG_INF("Starting bootloader");
     444:	f04f 0000 	mov.w	r0, #0
     448:	2303      	movs	r3, #3
     44a:	f363 0002 	bfi	r0, r3, #0, #3
     44e:	f36f 00c5 	bfc	r0, #3, #3
     452:	4b3e      	ldr	r3, [pc, #248]	; (54c <main+0x10c>)
     454:	4a3e      	ldr	r2, [pc, #248]	; (550 <main+0x110>)
     456:	1a9b      	subs	r3, r3, r2
     458:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     45c:	f363 108f 	bfi	r0, r3, #6, #10
     460:	493c      	ldr	r1, [pc, #240]	; (554 <main+0x114>)
     462:	f004 ff5d 	bl	5320 <log_string_sync>

    os_heap_init();
     466:	f000 f8b5 	bl	5d4 <os_heap_init>

#if (!defined(CONFIG_XTENSA) && defined(DT_FLASH_DEV_NAME))
    if (!flash_device_get_binding(DT_FLASH_DEV_NAME)) {
     46a:	483b      	ldr	r0, [pc, #236]	; (558 <main+0x118>)
     46c:	f000 f882 	bl	574 <flash_device_get_binding>
     470:	b1b8      	cbz	r0, 4a2 <main+0x62>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     472:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     476:	2000      	movs	r0, #0
     478:	f002 fcd6 	bl	2e28 <fprotect_area>

    if (rc != 0) {
     47c:	b310      	cbz	r0, 4c4 <main+0x84>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     47e:	f04f 0000 	mov.w	r0, #0
     482:	2301      	movs	r3, #1
     484:	f363 0002 	bfi	r0, r3, #0, #3
     488:	f36f 00c5 	bfc	r0, #3, #3
     48c:	4b2f      	ldr	r3, [pc, #188]	; (54c <main+0x10c>)
     48e:	4a30      	ldr	r2, [pc, #192]	; (550 <main+0x110>)
     490:	1a9b      	subs	r3, r3, r2
     492:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     496:	f363 108f 	bfi	r0, r3, #6, #10
     49a:	4930      	ldr	r1, [pc, #192]	; (55c <main+0x11c>)
     49c:	f004 ff40 	bl	5320 <log_string_sync>
        while (1)
            ;
     4a0:	e7fe      	b.n	4a0 <main+0x60>
        BOOT_LOG_ERR("Flash device %s not found", DT_FLASH_DEV_NAME);
     4a2:	2301      	movs	r3, #1
     4a4:	f363 0002 	bfi	r0, r3, #0, #3
     4a8:	f36f 00c5 	bfc	r0, #3, #3
     4ac:	4b27      	ldr	r3, [pc, #156]	; (54c <main+0x10c>)
     4ae:	4a28      	ldr	r2, [pc, #160]	; (550 <main+0x110>)
     4b0:	1a9b      	subs	r3, r3, r2
     4b2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     4b6:	f363 108f 	bfi	r0, r3, #6, #10
     4ba:	4a27      	ldr	r2, [pc, #156]	; (558 <main+0x118>)
     4bc:	4928      	ldr	r1, [pc, #160]	; (560 <main+0x120>)
     4be:	f004 ff2f 	bl	5320 <log_string_sync>
            ;
     4c2:	e7fe      	b.n	4c2 <main+0x82>
    }
#endif /* USE_PARTITION_MANAGER && CONFIG_FPROTECT */

    rc = boot_go(&rsp);
     4c4:	a801      	add	r0, sp, #4
     4c6:	f000 fb31 	bl	b2c <boot_go>
    if (rc != 0) {
     4ca:	b188      	cbz	r0, 4f0 <main+0xb0>
        BOOT_LOG_ERR("Unable to find bootable image");
     4cc:	f04f 0000 	mov.w	r0, #0
     4d0:	2301      	movs	r3, #1
     4d2:	f363 0002 	bfi	r0, r3, #0, #3
     4d6:	f36f 00c5 	bfc	r0, #3, #3
     4da:	4b1c      	ldr	r3, [pc, #112]	; (54c <main+0x10c>)
     4dc:	4a1c      	ldr	r2, [pc, #112]	; (550 <main+0x110>)
     4de:	1a9b      	subs	r3, r3, r2
     4e0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     4e4:	f363 108f 	bfi	r0, r3, #6, #10
     4e8:	491e      	ldr	r1, [pc, #120]	; (564 <main+0x124>)
     4ea:	f004 ff19 	bl	5320 <log_string_sync>
        while (1)
            ;
     4ee:	e7fe      	b.n	4ee <main+0xae>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     4f0:	2503      	movs	r5, #3
     4f2:	f04f 0000 	mov.w	r0, #0
     4f6:	f365 0002 	bfi	r0, r5, #0, #3
     4fa:	f36f 00c5 	bfc	r0, #3, #3
     4fe:	4c13      	ldr	r4, [pc, #76]	; (54c <main+0x10c>)
     500:	4b13      	ldr	r3, [pc, #76]	; (550 <main+0x110>)
     502:	1ae4      	subs	r4, r4, r3
     504:	f3c4 04c9 	ubfx	r4, r4, #3, #10
     508:	f364 108f 	bfi	r0, r4, #6, #10
     50c:	9a03      	ldr	r2, [sp, #12]
     50e:	4916      	ldr	r1, [pc, #88]	; (568 <main+0x128>)
     510:	f004 ff06 	bl	5320 <log_string_sync>
                 rsp.br_image_off);

    BOOT_LOG_INF("Jumping to the first image slot");
     514:	f04f 0000 	mov.w	r0, #0
     518:	f365 0002 	bfi	r0, r5, #0, #3
     51c:	f36f 00c5 	bfc	r0, #3, #3
     520:	f364 108f 	bfi	r0, r4, #6, #10
     524:	4911      	ldr	r1, [pc, #68]	; (56c <main+0x12c>)
     526:	f004 fefb 	bl	5320 <log_string_sync>
    do_boot(&rsp);
     52a:	a801      	add	r0, sp, #4
     52c:	f003 ff4e 	bl	43cc <do_boot>

    BOOT_LOG_ERR("Never should get here");
     530:	f04f 0000 	mov.w	r0, #0
     534:	2301      	movs	r3, #1
     536:	f363 0002 	bfi	r0, r3, #0, #3
     53a:	f36f 00c5 	bfc	r0, #3, #3
     53e:	f364 108f 	bfi	r0, r4, #6, #10
     542:	490b      	ldr	r1, [pc, #44]	; (570 <main+0x130>)
     544:	f004 feec 	bl	5320 <log_string_sync>
    while (1)
        ;
     548:	e7fe      	b.n	548 <main+0x108>
     54a:	bf00      	nop
     54c:	00007e50 	.word	0x00007e50
     550:	00007e48 	.word	0x00007e48
     554:	00007e98 	.word	0x00007e98
     558:	00007eac 	.word	0x00007eac
     55c:	00007edc 	.word	0x00007edc
     560:	00007ec0 	.word	0x00007ec0
     564:	00007f0c 	.word	0x00007f0c
     568:	00007f2c 	.word	0x00007f2c
     56c:	00007f58 	.word	0x00007f58
     570:	00007f78 	.word	0x00007f78

00000574 <flash_device_get_binding>:
#endif

static struct device *flash_dev;

struct device *flash_device_get_binding(char *dev_name)
{
     574:	b508      	push	{r3, lr}
    if (!flash_dev) {
     576:	4b05      	ldr	r3, [pc, #20]	; (58c <flash_device_get_binding+0x18>)
     578:	681b      	ldr	r3, [r3, #0]
     57a:	b113      	cbz	r3, 582 <flash_device_get_binding+0xe>
        flash_dev = device_get_binding(dev_name);
    }
    return flash_dev;
}
     57c:	4b03      	ldr	r3, [pc, #12]	; (58c <flash_device_get_binding+0x18>)
     57e:	6818      	ldr	r0, [r3, #0]
     580:	bd08      	pop	{r3, pc}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     582:	f003 fcd9 	bl	3f38 <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     586:	4b01      	ldr	r3, [pc, #4]	; (58c <flash_device_get_binding+0x18>)
     588:	6018      	str	r0, [r3, #0]
     58a:	e7f7      	b.n	57c <flash_device_get_binding+0x8>
     58c:	20000008 	.word	0x20000008

00000590 <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     590:	b910      	cbnz	r0, 598 <flash_device_base+0x8>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
    }
    *ret = FLASH_DEVICE_BASE;
     592:	2000      	movs	r0, #0
     594:	6008      	str	r0, [r1, #0]
    return 0;
}
     596:	4770      	bx	lr
{
     598:	b508      	push	{r3, lr}
     59a:	4602      	mov	r2, r0
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     59c:	f04f 0000 	mov.w	r0, #0
     5a0:	2301      	movs	r3, #1
     5a2:	f363 0002 	bfi	r0, r3, #0, #3
     5a6:	f36f 00c5 	bfc	r0, #3, #3
     5aa:	4b07      	ldr	r3, [pc, #28]	; (5c8 <flash_device_base+0x38>)
     5ac:	4907      	ldr	r1, [pc, #28]	; (5cc <flash_device_base+0x3c>)
     5ae:	1a5b      	subs	r3, r3, r1
     5b0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     5b4:	f363 108f 	bfi	r0, r3, #6, #10
     5b8:	2300      	movs	r3, #0
     5ba:	4905      	ldr	r1, [pc, #20]	; (5d0 <flash_device_base+0x40>)
     5bc:	f004 feb0 	bl	5320 <log_string_sync>
        return -EINVAL;
     5c0:	f06f 0015 	mvn.w	r0, #21
}
     5c4:	bd08      	pop	{r3, pc}
     5c6:	bf00      	nop
     5c8:	00007e50 	.word	0x00007e50
     5cc:	00007e48 	.word	0x00007e48
     5d0:	00007f98 	.word	0x00007f98

000005d4 <os_heap_init>:

/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
     5d4:	b508      	push	{r3, lr}
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     5d6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     5da:	4802      	ldr	r0, [pc, #8]	; (5e4 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x8>)
     5dc:	f002 fdda 	bl	3194 <mbedtls_memory_buffer_alloc_init>
}
     5e0:	bd08      	pop	{r3, pc}
     5e2:	bf00      	nop
     5e4:	2000000c 	.word	0x2000000c

000005e8 <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
     5e8:	6802      	ldr	r2, [r0, #0]
     5ea:	4b0e      	ldr	r3, [pc, #56]	; (624 <boot_is_header_valid+0x3c>)
     5ec:	429a      	cmp	r2, r3
     5ee:	d10d      	bne.n	60c <boot_is_header_valid+0x24>
        return false;
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     5f0:	68c2      	ldr	r2, [r0, #12]
     5f2:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
     5f4:	43d8      	mvns	r0, r3
     5f6:	4282      	cmp	r2, r0
     5f8:	d80c      	bhi.n	614 <boot_is_header_valid+0x2c>
{
     5fa:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
     5fc:	18d4      	adds	r4, r2, r3
        return true;
     5fe:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     600:	b110      	cbz	r0, 608 <boot_is_header_valid+0x20>
        return false;
    }

    if (size >= fap->fa_size) {
     602:	688b      	ldr	r3, [r1, #8]
     604:	42a3      	cmp	r3, r4
     606:	d903      	bls.n	610 <boot_is_header_valid+0x28>
        return false;
    }

    return true;
}
     608:	bc10      	pop	{r4}
     60a:	4770      	bx	lr
        return false;
     60c:	2000      	movs	r0, #0
     60e:	4770      	bx	lr
        return false;
     610:	2000      	movs	r0, #0
     612:	e7f9      	b.n	608 <boot_is_header_valid+0x20>
        return false;
     614:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     616:	b110      	cbz	r0, 61e <boot_is_header_valid+0x36>
    if (size >= fap->fa_size) {
     618:	688b      	ldr	r3, [r1, #8]
     61a:	42a3      	cmp	r3, r4
     61c:	d900      	bls.n	620 <boot_is_header_valid+0x38>
}
     61e:	4770      	bx	lr
        return false;
     620:	2000      	movs	r0, #0
     622:	4770      	bx	lr
     624:	96f3b83d 	.word	0x96f3b83d

00000628 <boot_image_check>:
{
     628:	b500      	push	{lr}
     62a:	b087      	sub	sp, #28
    if (bootutil_img_validate(BOOT_CURR_ENC(state), image_index, hdr, fap, tmpbuf,
     62c:	2000      	movs	r0, #0
     62e:	9004      	str	r0, [sp, #16]
     630:	9003      	str	r0, [sp, #12]
     632:	9002      	str	r0, [sp, #8]
     634:	f44f 7380 	mov.w	r3, #256	; 0x100
     638:	9301      	str	r3, [sp, #4]
     63a:	4b07      	ldr	r3, [pc, #28]	; (658 <boot_image_check+0x30>)
     63c:	9300      	str	r3, [sp, #0]
     63e:	4613      	mov	r3, r2
     640:	460a      	mov	r2, r1
     642:	4601      	mov	r1, r0
     644:	f000 feb4 	bl	13b0 <bootutil_img_validate>
     648:	4603      	mov	r3, r0
     64a:	b918      	cbnz	r0, 654 <boot_image_check+0x2c>
}
     64c:	4618      	mov	r0, r3
     64e:	b007      	add	sp, #28
     650:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EBADIMAGE;
     654:	2303      	movs	r3, #3
     656:	e7f9      	b.n	64c <boot_image_check+0x24>
     658:	2000246c 	.word	0x2000246c

0000065c <boot_validate_slot>:
 *         -1 on any errors
 */
static int
boot_validate_slot(struct boot_loader_state *state, int slot,
                   struct boot_status *bs)
{
     65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     660:	b082      	sub	sp, #8
     662:	4605      	mov	r5, r0
     664:	460c      	mov	r4, r1
     666:	4617      	mov	r7, r2
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     668:	2000      	movs	r0, #0
     66a:	f003 fecd 	bl	4408 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     66e:	a901      	add	r1, sp, #4
     670:	b2c0      	uxtb	r0, r0
     672:	f001 fb25 	bl	1cc0 <flash_area_open>
    if (rc != 0) {
     676:	b128      	cbz	r0, 684 <boot_validate_slot+0x28>
        return -1;
     678:	f04f 35ff 	mov.w	r5, #4294967295
    rc = 0;

out:
    flash_area_close(fap);
    return rc;
}
     67c:	4628      	mov	r0, r5
     67e:	b002      	add	sp, #8
     680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     684:	202c      	movs	r0, #44	; 0x2c
     686:	fb00 5604 	mla	r6, r0, r4, r5
    if (boot_check_header_erased(state, slot) == 0 ||
     68a:	4621      	mov	r1, r4
     68c:	4628      	mov	r0, r5
     68e:	f003 ff39 	bl	4504 <boot_check_header_erased>
     692:	b388      	cbz	r0, 6f8 <boot_validate_slot+0x9c>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     694:	6933      	ldr	r3, [r6, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     696:	f013 0f10 	tst.w	r3, #16
     69a:	d132      	bne.n	702 <boot_validate_slot+0xa6>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
     69c:	f8dd 8004 	ldr.w	r8, [sp, #4]
     6a0:	4641      	mov	r1, r8
     6a2:	4630      	mov	r0, r6
     6a4:	f7ff ffa0 	bl	5e8 <boot_is_header_valid>
     6a8:	b9a8      	cbnz	r0, 6d6 <boot_validate_slot+0x7a>
        if (slot != BOOT_PRIMARY_SLOT) {
     6aa:	b9ec      	cbnz	r4, 6e8 <boot_validate_slot+0x8c>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     6ac:	f04f 0000 	mov.w	r0, #0
     6b0:	2301      	movs	r3, #1
     6b2:	f363 0002 	bfi	r0, r3, #0, #3
     6b6:	f36f 00c5 	bfc	r0, #3, #3
     6ba:	4b13      	ldr	r3, [pc, #76]	; (708 <boot_validate_slot+0xac>)
     6bc:	4a13      	ldr	r2, [pc, #76]	; (70c <boot_validate_slot+0xb0>)
     6be:	1a9b      	subs	r3, r3, r2
     6c0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     6c4:	f363 108f 	bfi	r0, r3, #6, #10
     6c8:	b9a4      	cbnz	r4, 6f4 <boot_validate_slot+0x98>
     6ca:	4a11      	ldr	r2, [pc, #68]	; (710 <boot_validate_slot+0xb4>)
     6cc:	4911      	ldr	r1, [pc, #68]	; (714 <boot_validate_slot+0xb8>)
     6ce:	f004 fe27 	bl	5320 <log_string_sync>
        rc = 1;
     6d2:	2501      	movs	r5, #1
        goto out;
     6d4:	e011      	b.n	6fa <boot_validate_slot+0x9e>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
     6d6:	463b      	mov	r3, r7
     6d8:	4642      	mov	r2, r8
     6da:	4631      	mov	r1, r6
     6dc:	4628      	mov	r0, r5
     6de:	f7ff ffa3 	bl	628 <boot_image_check>
     6e2:	4605      	mov	r5, r0
     6e4:	b148      	cbz	r0, 6fa <boot_validate_slot+0x9e>
     6e6:	e7e0      	b.n	6aa <boot_validate_slot+0x4e>
            flash_area_erase(fap, 0, fap->fa_size);
     6e8:	9801      	ldr	r0, [sp, #4]
     6ea:	6882      	ldr	r2, [r0, #8]
     6ec:	2100      	movs	r1, #0
     6ee:	f004 ff5e 	bl	55ae <flash_area_erase>
     6f2:	e7db      	b.n	6ac <boot_validate_slot+0x50>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     6f4:	4a08      	ldr	r2, [pc, #32]	; (718 <boot_validate_slot+0xbc>)
     6f6:	e7e9      	b.n	6cc <boot_validate_slot+0x70>
        rc = 1;
     6f8:	2501      	movs	r5, #1
    flash_area_close(fap);
     6fa:	9801      	ldr	r0, [sp, #4]
     6fc:	f004 ff07 	bl	550e <flash_area_close>
    return rc;
     700:	e7bc      	b.n	67c <boot_validate_slot+0x20>
        rc = 1;
     702:	2501      	movs	r5, #1
     704:	e7f9      	b.n	6fa <boot_validate_slot+0x9e>
     706:	bf00      	nop
     708:	00007e50 	.word	0x00007e50
     70c:	00007e48 	.word	0x00007e48
     710:	00008098 	.word	0x00008098
     714:	000080a0 	.word	0x000080a0
     718:	0000808c 	.word	0x0000808c

0000071c <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     71c:	b530      	push	{r4, r5, lr}
     71e:	b083      	sub	sp, #12
     720:	4605      	mov	r5, r0
     722:	460c      	mov	r4, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     724:	2300      	movs	r3, #0
     726:	9300      	str	r3, [sp, #0]
     728:	9301      	str	r3, [sp, #4]
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     72a:	4608      	mov	r0, r1
     72c:	f003 ff8a 	bl	4644 <boot_status_is_reset>
     730:	b330      	cbz	r0, 780 <boot_swap_image+0x64>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     732:	682a      	ldr	r2, [r5, #0]
     734:	4b1f      	ldr	r3, [pc, #124]	; (7b4 <boot_swap_image+0x98>)
     736:	429a      	cmp	r2, r3
     738:	d016      	beq.n	768 <boot_swap_image+0x4c>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     73a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     73c:	4b1d      	ldr	r3, [pc, #116]	; (7b4 <boot_swap_image+0x98>)
     73e:	429a      	cmp	r2, r3
     740:	d018      	beq.n	774 <boot_swap_image+0x58>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     742:	9b01      	ldr	r3, [sp, #4]
     744:	9a00      	ldr	r2, [sp, #0]
     746:	4293      	cmp	r3, r2
     748:	d900      	bls.n	74c <boot_swap_image+0x30>
            copy_size = size;
     74a:	9300      	str	r3, [sp, #0]
        }

        bs->swap_size = copy_size;
     74c:	9b00      	ldr	r3, [sp, #0]
     74e:	60a3      	str	r3, [r4, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     750:	9a00      	ldr	r2, [sp, #0]
     752:	4621      	mov	r1, r4
     754:	4628      	mov	r0, r5
     756:	f000 fc8d 	bl	1074 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     75a:	4b17      	ldr	r3, [pc, #92]	; (7b8 <boot_swap_image+0x9c>)
     75c:	681a      	ldr	r2, [r3, #0]
     75e:	2a00      	cmp	r2, #0
     760:	dc16      	bgt.n	790 <boot_swap_image+0x74>
                     boot_status_fails);
    }
#endif

    return 0;
}
     762:	2000      	movs	r0, #0
     764:	b003      	add	sp, #12
     766:	bd30      	pop	{r4, r5, pc}
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     768:	466a      	mov	r2, sp
     76a:	2100      	movs	r1, #0
     76c:	4628      	mov	r0, r5
     76e:	f003 fe72 	bl	4456 <boot_read_image_size>
     772:	e7e2      	b.n	73a <boot_swap_image+0x1e>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     774:	aa01      	add	r2, sp, #4
     776:	2101      	movs	r1, #1
     778:	4628      	mov	r0, r5
     77a:	f003 fe6c 	bl	4456 <boot_read_image_size>
     77e:	e7e0      	b.n	742 <boot_swap_image+0x26>
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     780:	f104 0108 	add.w	r1, r4, #8
     784:	2000      	movs	r0, #0
     786:	f004 f994 	bl	4ab2 <boot_read_swap_size>
        copy_size = bs->swap_size;
     78a:	68a3      	ldr	r3, [r4, #8]
     78c:	9300      	str	r3, [sp, #0]
     78e:	e7df      	b.n	750 <boot_swap_image+0x34>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     790:	f04f 0000 	mov.w	r0, #0
     794:	2302      	movs	r3, #2
     796:	f363 0002 	bfi	r0, r3, #0, #3
     79a:	f36f 00c5 	bfc	r0, #3, #3
     79e:	4b07      	ldr	r3, [pc, #28]	; (7bc <boot_swap_image+0xa0>)
     7a0:	4907      	ldr	r1, [pc, #28]	; (7c0 <boot_swap_image+0xa4>)
     7a2:	1a5b      	subs	r3, r3, r1
     7a4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     7a8:	f363 108f 	bfi	r0, r3, #6, #10
     7ac:	4905      	ldr	r1, [pc, #20]	; (7c4 <boot_swap_image+0xa8>)
     7ae:	f004 fdb7 	bl	5320 <log_string_sync>
     7b2:	e7d6      	b.n	762 <boot_swap_image+0x46>
     7b4:	96f3b83d 	.word	0x96f3b83d
     7b8:	2000256c 	.word	0x2000256c
     7bc:	00007e50 	.word	0x00007e50
     7c0:	00007e48 	.word	0x00007e48
     7c4:	00008060 	.word	0x00008060

000007c8 <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
     7c8:	b538      	push	{r3, r4, r5, lr}
     7ca:	4604      	mov	r4, r0
     7cc:	460d      	mov	r5, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
     7ce:	f7ff ffa5 	bl	71c <boot_swap_image>
     7d2:	4602      	mov	r2, r0
    assert(rc == 0);

    BOOT_SWAP_TYPE(state) = bs->swap_type;
     7d4:	79eb      	ldrb	r3, [r5, #7]
     7d6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     7da:	3b03      	subs	r3, #3
     7dc:	b2db      	uxtb	r3, r3
     7de:	2b01      	cmp	r3, #1
     7e0:	d90c      	bls.n	7fc <boot_complete_partial_swap+0x34>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     7e2:	79eb      	ldrb	r3, [r5, #7]
     7e4:	2b02      	cmp	r3, #2
     7e6:	d013      	beq.n	810 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x10>
     7e8:	2b04      	cmp	r3, #4
     7ea:	d011      	beq.n	810 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x10>
     7ec:	2b03      	cmp	r3, #3
     7ee:	d00f      	beq.n	810 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x10>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     7f0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     7f4:	2bff      	cmp	r3, #255	; 0xff
     7f6:	d015      	beq.n	824 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x24>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
     7f8:	4610      	mov	r0, r2
     7fa:	bd38      	pop	{r3, r4, r5, pc}
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     7fc:	2000      	movs	r0, #0
     7fe:	f004 f834 	bl	486a <swap_set_image_ok>
        if (rc != 0) {
     802:	4602      	mov	r2, r0
     804:	2800      	cmp	r0, #0
     806:	d0ec      	beq.n	7e2 <boot_complete_partial_swap+0x1a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     808:	23ff      	movs	r3, #255	; 0xff
     80a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     80e:	e7e8      	b.n	7e2 <boot_complete_partial_swap+0x1a>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     810:	2000      	movs	r0, #0
     812:	f004 f817 	bl	4844 <swap_set_copy_done>
        if (rc != 0) {
     816:	4602      	mov	r2, r0
     818:	2800      	cmp	r0, #0
     81a:	d0e9      	beq.n	7f0 <boot_complete_partial_swap+0x28>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     81c:	23ff      	movs	r3, #255	; 0xff
     81e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     822:	e7e5      	b.n	7f0 <boot_complete_partial_swap+0x28>
        BOOT_LOG_ERR("panic!");
     824:	f04f 0000 	mov.w	r0, #0
     828:	2301      	movs	r3, #1
     82a:	f363 0002 	bfi	r0, r3, #0, #3
     82e:	f36f 00c5 	bfc	r0, #3, #3
     832:	4b05      	ldr	r3, [pc, #20]	; (848 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x48>)
     834:	4a05      	ldr	r2, [pc, #20]	; (84c <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x4c>)
     836:	1a9b      	subs	r3, r3, r2
     838:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     83c:	f363 108f 	bfi	r0, r3, #6, #10
     840:	4903      	ldr	r1, [pc, #12]	; (850 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x50>)
     842:	f004 fd6d 	bl	5320 <log_string_sync>
        while (1) {}
     846:	e7fe      	b.n	846 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x46>
     848:	00007e50 	.word	0x00007e50
     84c:	00007e48 	.word	0x00007e48
     850:	00007fc8 	.word	0x00007fc8

00000854 <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
     854:	b538      	push	{r3, r4, r5, lr}
     856:	4604      	mov	r4, r0
     858:	460d      	mov	r5, r1
    int rc;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
     85a:	f003 fe9c 	bl	4596 <boot_read_sectors>
    if (rc != 0) {
     85e:	b968      	cbnz	r0, 87c <boot_prepare_image_for_update+0x28>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
        return;
    }

    /* Attempt to read an image header from each slot. */
    rc = boot_read_image_headers(state, false, NULL);
     860:	2200      	movs	r2, #0
     862:	4611      	mov	r1, r2
     864:	4620      	mov	r0, r4
     866:	f003 feac 	bl	45c2 <boot_read_image_headers>
    if (rc != 0) {
     86a:	b9e8      	cbnz	r0, 8a8 <boot_prepare_image_for_update+0x54>
    }

    /* If the current image's slots aren't compatible, no swap is possible.
     * Just boot into primary slot.
     */
    if (boot_slots_compatible(state)) {
     86c:	4620      	mov	r0, r4
     86e:	f000 fadd 	bl	e2c <boot_slots_compatible>
     872:	bb78      	cbnz	r0, 8d4 <boot_prepare_image_for_update+0x80>
            }
#endif
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     874:	2301      	movs	r3, #1
     876:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     87a:	e014      	b.n	8a6 <boot_prepare_image_for_update+0x52>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     87c:	f04f 0000 	mov.w	r0, #0
     880:	2302      	movs	r3, #2
     882:	f363 0002 	bfi	r0, r3, #0, #3
     886:	f36f 00c5 	bfc	r0, #3, #3
     88a:	4b47      	ldr	r3, [pc, #284]	; (9a8 <boot_prepare_image_for_update+0x154>)
     88c:	4a47      	ldr	r2, [pc, #284]	; (9ac <boot_prepare_image_for_update+0x158>)
     88e:	1a9b      	subs	r3, r3, r2
     890:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     894:	f363 108f 	bfi	r0, r3, #6, #10
     898:	2280      	movs	r2, #128	; 0x80
     89a:	4945      	ldr	r1, [pc, #276]	; (9b0 <boot_prepare_image_for_update+0x15c>)
     89c:	f004 fd40 	bl	5320 <log_string_sync>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     8a0:	2301      	movs	r3, #1
     8a2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    }
}
     8a6:	bd38      	pop	{r3, r4, r5, pc}
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     8a8:	f04f 0000 	mov.w	r0, #0
     8ac:	2302      	movs	r3, #2
     8ae:	f363 0002 	bfi	r0, r3, #0, #3
     8b2:	f36f 00c5 	bfc	r0, #3, #3
     8b6:	4b3c      	ldr	r3, [pc, #240]	; (9a8 <boot_prepare_image_for_update+0x154>)
     8b8:	4a3c      	ldr	r2, [pc, #240]	; (9ac <boot_prepare_image_for_update+0x158>)
     8ba:	1a9b      	subs	r3, r3, r2
     8bc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     8c0:	f363 108f 	bfi	r0, r3, #6, #10
     8c4:	2200      	movs	r2, #0
     8c6:	493b      	ldr	r1, [pc, #236]	; (9b4 <boot_prepare_image_for_update+0x160>)
     8c8:	f004 fd2a 	bl	5320 <log_string_sync>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     8cc:	2301      	movs	r3, #1
     8ce:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return;
     8d2:	e7e8      	b.n	8a6 <boot_prepare_image_for_update+0x52>
        boot_status_reset(bs);
     8d4:	4628      	mov	r0, r5
     8d6:	f003 feab 	bl	4630 <boot_status_reset>
        rc = swap_read_status(state, bs);
     8da:	4629      	mov	r1, r5
     8dc:	4620      	mov	r0, r4
     8de:	f003 ff78 	bl	47d2 <swap_read_status>
        if (rc != 0) {
     8e2:	b9e8      	cbnz	r0, 920 <boot_prepare_image_for_update+0xcc>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     8e4:	4628      	mov	r0, r5
     8e6:	f003 fead 	bl	4644 <boot_status_is_reset>
     8ea:	f080 0101 	eor.w	r1, r0, #1
     8ee:	462a      	mov	r2, r5
     8f0:	b2c9      	uxtb	r1, r1
     8f2:	4620      	mov	r0, r4
     8f4:	f003 fe65 	bl	45c2 <boot_read_image_headers>
        if (rc != 0) {
     8f8:	bb40      	cbnz	r0, 94c <boot_prepare_image_for_update+0xf8>
        if (!boot_status_is_reset(bs)) {
     8fa:	4628      	mov	r0, r5
     8fc:	f003 fea2 	bl	4644 <boot_status_is_reset>
     900:	2800      	cmp	r0, #0
     902:	d039      	beq.n	978 <boot_prepare_image_for_update+0x124>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     904:	79eb      	ldrb	r3, [r5, #7]
     906:	2b01      	cmp	r3, #1
     908:	d043      	beq.n	992 <boot_prepare_image_for_update+0x13e>
            } else if (boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs) != 0) {
     90a:	462a      	mov	r2, r5
     90c:	2101      	movs	r1, #1
     90e:	4620      	mov	r0, r4
     910:	f7ff fea4 	bl	65c <boot_validate_slot>
     914:	2800      	cmp	r0, #0
     916:	d043      	beq.n	9a0 <boot_prepare_image_for_update+0x14c>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     918:	2305      	movs	r3, #5
     91a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     91e:	e7c2      	b.n	8a6 <boot_prepare_image_for_update+0x52>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     920:	f04f 0000 	mov.w	r0, #0
     924:	2302      	movs	r3, #2
     926:	f363 0002 	bfi	r0, r3, #0, #3
     92a:	f36f 00c5 	bfc	r0, #3, #3
     92e:	4b1e      	ldr	r3, [pc, #120]	; (9a8 <boot_prepare_image_for_update+0x154>)
     930:	4a1e      	ldr	r2, [pc, #120]	; (9ac <boot_prepare_image_for_update+0x158>)
     932:	1a9b      	subs	r3, r3, r2
     934:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     938:	f363 108f 	bfi	r0, r3, #6, #10
     93c:	2200      	movs	r2, #0
     93e:	491e      	ldr	r1, [pc, #120]	; (9b8 <boot_prepare_image_for_update+0x164>)
     940:	f004 fcee 	bl	5320 <log_string_sync>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     944:	2301      	movs	r3, #1
     946:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
            return;
     94a:	e7ac      	b.n	8a6 <boot_prepare_image_for_update+0x52>
            BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     94c:	f04f 0000 	mov.w	r0, #0
     950:	2302      	movs	r3, #2
     952:	f363 0002 	bfi	r0, r3, #0, #3
     956:	f36f 00c5 	bfc	r0, #3, #3
     95a:	4b13      	ldr	r3, [pc, #76]	; (9a8 <boot_prepare_image_for_update+0x154>)
     95c:	4a13      	ldr	r2, [pc, #76]	; (9ac <boot_prepare_image_for_update+0x158>)
     95e:	1a9b      	subs	r3, r3, r2
     960:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     964:	f363 108f 	bfi	r0, r3, #6, #10
     968:	2200      	movs	r2, #0
     96a:	4912      	ldr	r1, [pc, #72]	; (9b4 <boot_prepare_image_for_update+0x160>)
     96c:	f004 fcd8 	bl	5320 <log_string_sync>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     970:	2301      	movs	r3, #1
     972:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
            return;
     976:	e796      	b.n	8a6 <boot_prepare_image_for_update+0x52>
            rc = boot_complete_partial_swap(state, bs);
     978:	4629      	mov	r1, r5
     97a:	4620      	mov	r0, r4
     97c:	f7ff ff24 	bl	7c8 <boot_complete_partial_swap>
            rc = boot_read_image_headers(state, false, bs);
     980:	462a      	mov	r2, r5
     982:	2100      	movs	r1, #0
     984:	4620      	mov	r0, r4
     986:	f003 fe1c 	bl	45c2 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     98a:	2301      	movs	r3, #1
     98c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     990:	e789      	b.n	8a6 <boot_prepare_image_for_update+0x52>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     992:	4629      	mov	r1, r5
     994:	4620      	mov	r0, r4
     996:	f003 fe2f 	bl	45f8 <boot_validated_swap_type>
     99a:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
     99e:	e782      	b.n	8a6 <boot_prepare_image_for_update+0x52>
                BOOT_SWAP_TYPE(state) = bs->swap_type;
     9a0:	79eb      	ldrb	r3, [r5, #7]
     9a2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     9a6:	e77e      	b.n	8a6 <boot_prepare_image_for_update+0x52>
     9a8:	00007e50 	.word	0x00007e50
     9ac:	00007e48 	.word	0x00007e48
     9b0:	00007fd0 	.word	0x00007fd0
     9b4:	00008010 	.word	0x00008010
     9b8:	00008038 	.word	0x00008038

000009bc <boot_copy_region>:
{
     9bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9c0:	4688      	mov	r8, r1
     9c2:	4692      	mov	sl, r2
     9c4:	461f      	mov	r7, r3
     9c6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     9ca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bytes_copied = 0;
     9cc:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
     9ce:	e00f      	b.n	9f0 <boot_copy_region+0x34>
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     9d0:	4623      	mov	r3, r4
     9d2:	4a0f      	ldr	r2, [pc, #60]	; (a10 <boot_copy_region+0x54>)
     9d4:	19e9      	adds	r1, r5, r7
     9d6:	4640      	mov	r0, r8
     9d8:	f004 fd9a 	bl	5510 <flash_area_read>
        if (rc != 0) {
     9dc:	b9a0      	cbnz	r0, a08 <boot_copy_region+0x4c>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     9de:	4623      	mov	r3, r4
     9e0:	4a0b      	ldr	r2, [pc, #44]	; (a10 <boot_copy_region+0x54>)
     9e2:	eb05 0109 	add.w	r1, r5, r9
     9e6:	4650      	mov	r0, sl
     9e8:	f004 fdb1 	bl	554e <flash_area_write>
        if (rc != 0) {
     9ec:	b970      	cbnz	r0, a0c <boot_copy_region+0x50>
        bytes_copied += chunk_sz;
     9ee:	4425      	add	r5, r4
    while (bytes_copied < sz) {
     9f0:	42b5      	cmp	r5, r6
     9f2:	d206      	bcs.n	a02 <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
     9f4:	1b74      	subs	r4, r6, r5
     9f6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
     9fa:	d9e9      	bls.n	9d0 <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
     9fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a00:	e7e6      	b.n	9d0 <boot_copy_region+0x14>
    return 0;
     a02:	2000      	movs	r0, #0
}
     a04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
     a08:	2001      	movs	r0, #1
     a0a:	e7fb      	b.n	a04 <boot_copy_region+0x48>
            return BOOT_EFLASH;
     a0c:	2001      	movs	r0, #1
     a0e:	e7f9      	b.n	a04 <boot_copy_region+0x48>
     a10:	2000186c 	.word	0x2000186c

00000a14 <context_boot_go>:

int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     a14:	b5f0      	push	{r4, r5, r6, r7, lr}
     a16:	b085      	sub	sp, #20
     a18:	4604      	mov	r4, r0
     a1a:	460e      	mov	r6, r1
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
     a1c:	2260      	movs	r2, #96	; 0x60
     a1e:	2100      	movs	r1, #0
     a20:	f004 fff5 	bl	5a0e <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     a24:	4b3c      	ldr	r3, [pc, #240]	; (b18 <context_boot_go+0x104>)
     a26:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     a28:	4b3c      	ldr	r3, [pc, #240]	; (b1c <context_boot_go+0x108>)
     a2a:	6523      	str	r3, [r4, #80]	; 0x50
#endif

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
     a2c:	2500      	movs	r5, #0
     a2e:	e00c      	b.n	a4a <context_boot_go+0x36>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     a30:	4629      	mov	r1, r5
     a32:	2000      	movs	r0, #0
     a34:	f003 fce8 	bl	4408 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     a38:	212c      	movs	r1, #44	; 0x2c
     a3a:	fb01 f105 	mul.w	r1, r1, r5
     a3e:	3120      	adds	r1, #32
     a40:	4421      	add	r1, r4
     a42:	b2c0      	uxtb	r0, r0
     a44:	f001 f93c 	bl	1cc0 <flash_area_open>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
     a48:	3501      	adds	r5, #1
     a4a:	2d01      	cmp	r5, #1
     a4c:	d9f0      	bls.n	a30 <context_boot_go+0x1c>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
     a4e:	4669      	mov	r1, sp
     a50:	4620      	mov	r0, r4
     a52:	f7ff feff 	bl	854 <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     a56:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
     a5a:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
     a5e:	3b01      	subs	r3, #1
     a60:	2b04      	cmp	r3, #4
     a62:	d833      	bhi.n	acc <context_boot_go+0xb8>
     a64:	e8df f003 	tbb	[pc, r3]
     a68:	03030307 	.word	0x03030307
     a6c:	29          	.byte	0x29
     a6d:	00          	.byte	0x00
            break;

        case BOOT_SWAP_TYPE_TEST:          /* fallthrough */
        case BOOT_SWAP_TYPE_PERM:          /* fallthrough */
        case BOOT_SWAP_TYPE_REVERT:
            rc = boot_perform_update(state, &bs);
     a6e:	4669      	mov	r1, sp
     a70:	4620      	mov	r0, r4
     a72:	f003 fdf8 	bl	4666 <boot_perform_update>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     a76:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     a7a:	2bff      	cmp	r3, #255	; 0xff
     a7c:	d02a      	beq.n	ad4 <context_boot_go+0xc0>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     a7e:	2b01      	cmp	r3, #1
     a80:	d006      	beq.n	a90 <context_boot_go+0x7c>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     a82:	466a      	mov	r2, sp
     a84:	2100      	movs	r1, #0
     a86:	4620      	mov	r0, r4
     a88:	f003 fd9b 	bl	45c2 <boot_read_image_headers>
            if (rc != 0) {
     a8c:	4607      	mov	r7, r0
     a8e:	b990      	cbnz	r0, ab6 <context_boot_go+0xa2>
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
		rc = boot_validate_slot(state, BOOT_PRIMARY_SLOT, NULL);
     a90:	2200      	movs	r2, #0
     a92:	4611      	mov	r1, r2
     a94:	4620      	mov	r0, r4
     a96:	f7ff fde1 	bl	65c <boot_validate_slot>
		if (rc != 0) {
     a9a:	4607      	mov	r7, r0
     a9c:	bb60      	cbnz	r0, af8 <context_boot_go+0xe4>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     a9e:	2210      	movs	r2, #16
     aa0:	2100      	movs	r1, #0
     aa2:	4668      	mov	r0, sp
     aa4:	f004 ffb3 	bl	5a0e <memset>

    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
     aa8:	6a23      	ldr	r3, [r4, #32]
     aaa:	785b      	ldrb	r3, [r3, #1]
     aac:	7133      	strb	r3, [r6, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).area->fa_off;
     aae:	6a23      	ldr	r3, [r4, #32]
     ab0:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
     ab2:	60b3      	str	r3, [r6, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
     ab4:	6034      	str	r4, [r6, #0]
out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
     ab6:	2500      	movs	r5, #0
     ab8:	e029      	b.n	b0e <context_boot_go+0xfa>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     aba:	2000      	movs	r0, #0
     abc:	f003 fed5 	bl	486a <swap_set_image_ok>
            if (rc != 0) {
     ac0:	2800      	cmp	r0, #0
     ac2:	d0d8      	beq.n	a76 <context_boot_go+0x62>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     ac4:	23ff      	movs	r3, #255	; 0xff
     ac6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     aca:	e7d4      	b.n	a76 <context_boot_go+0x62>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     acc:	23ff      	movs	r3, #255	; 0xff
     ace:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     ad2:	e7d0      	b.n	a76 <context_boot_go+0x62>
            BOOT_LOG_ERR("panic!");
     ad4:	f04f 0000 	mov.w	r0, #0
     ad8:	2301      	movs	r3, #1
     ada:	f363 0002 	bfi	r0, r3, #0, #3
     ade:	f36f 00c5 	bfc	r0, #3, #3
     ae2:	4b0f      	ldr	r3, [pc, #60]	; (b20 <context_boot_go+0x10c>)
     ae4:	4a0f      	ldr	r2, [pc, #60]	; (b24 <context_boot_go+0x110>)
     ae6:	1a9b      	subs	r3, r3, r2
     ae8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     aec:	f363 108f 	bfi	r0, r3, #6, #10
     af0:	490d      	ldr	r1, [pc, #52]	; (b28 <context_boot_go+0x114>)
     af2:	f004 fc15 	bl	5320 <log_string_sync>
            while (1) {}
     af6:	e7fe      	b.n	af6 <context_boot_go+0xe2>
			rc = BOOT_EBADIMAGE;
     af8:	2703      	movs	r7, #3
     afa:	e7dc      	b.n	ab6 <context_boot_go+0xa2>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     afc:	f1c5 0301 	rsb	r3, r5, #1
     b00:	222c      	movs	r2, #44	; 0x2c
     b02:	fb02 4303 	mla	r3, r2, r3, r4
     b06:	6a18      	ldr	r0, [r3, #32]
     b08:	f004 fd01 	bl	550e <flash_area_close>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
     b0c:	3501      	adds	r5, #1
     b0e:	2d01      	cmp	r5, #1
     b10:	d9f4      	bls.n	afc <context_boot_go+0xe8>
        }
    }
    return rc;
}
     b12:	4638      	mov	r0, r7
     b14:	b005      	add	sp, #20
     b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b18:	20001c6c 	.word	0x20001c6c
     b1c:	2000206c 	.word	0x2000206c
     b20:	00007e50 	.word	0x00007e50
     b24:	00007e48 	.word	0x00007e48
     b28:	00007fc8 	.word	0x00007fc8

00000b2c <boot_go>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
     b2c:	b508      	push	{r3, lr}
    return context_boot_go(&boot_data, rsp);
     b2e:	4601      	mov	r1, r0
     b30:	4801      	ldr	r0, [pc, #4]	; (b38 <boot_go+0xc>)
     b32:	f7ff ff6f 	bl	a14 <context_boot_go>
}
     b36:	bd08      	pop	{r3, pc}
     b38:	2000180c 	.word	0x2000180c

00000b3c <boot_move_sector_up>:
 */
static void
boot_move_sector_up(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs, const struct flash_area *fap_pri,
        const struct flash_area *fap_sec)
{
     b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b40:	b082      	sub	sp, #8
     b42:	4688      	mov	r8, r1
     b44:	4616      	mov	r6, r2
     b46:	461c      	mov	r4, r3

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     b48:	6a53      	ldr	r3, [r2, #36]	; 0x24
     b4a:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
     b4e:	681a      	ldr	r2, [r3, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     b50:	1aad      	subs	r5, r5, r2
     * would be enough
     */

    /* Calculate offset from start of image area. */
    new_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);
    old_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx - 1);
     b52:	3801      	subs	r0, #1
     b54:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
     b58:	1abf      	subs	r7, r7, r2

    if (bs->idx == BOOT_STATUS_IDX_0) {
     b5a:	6823      	ldr	r3, [r4, #0]
     b5c:	2b01      	cmp	r3, #1
     b5e:	d01c      	beq.n	b9a <boot_move_sector_up+0x5e>

        rc = swap_erase_trailer_sectors(state, fap_sec);
        assert(rc == 0);
    }

    rc = boot_erase_region(fap_pri, new_off, sz);
     b60:	4642      	mov	r2, r8
     b62:	4629      	mov	r1, r5
     b64:	9808      	ldr	r0, [sp, #32]
     b66:	f003 fdd6 	bl	4716 <boot_erase_region>
    assert(rc == 0);

    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
     b6a:	f8cd 8004 	str.w	r8, [sp, #4]
     b6e:	9500      	str	r5, [sp, #0]
     b70:	463b      	mov	r3, r7
     b72:	9a08      	ldr	r2, [sp, #32]
     b74:	4611      	mov	r1, r2
     b76:	4630      	mov	r0, r6
     b78:	f7ff ff20 	bl	9bc <boot_copy_region>
    assert(rc == 0);

    rc = boot_write_status(state, bs);
     b7c:	4621      	mov	r1, r4
     b7e:	4630      	mov	r0, r6
     b80:	f003 fd96 	bl	46b0 <boot_write_status>

    bs->idx++;
     b84:	6823      	ldr	r3, [r4, #0]
     b86:	3301      	adds	r3, #1
     b88:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
     b8a:	b118      	cbz	r0, b94 <boot_move_sector_up+0x58>
     b8c:	4a0c      	ldr	r2, [pc, #48]	; (bc0 <boot_move_sector_up+0x84>)
     b8e:	6813      	ldr	r3, [r2, #0]
     b90:	3301      	adds	r3, #1
     b92:	6013      	str	r3, [r2, #0]
}
     b94:	b002      	add	sp, #8
     b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
     b9a:	68e3      	ldr	r3, [r4, #12]
     b9c:	2b02      	cmp	r3, #2
     b9e:	d104      	bne.n	baa <boot_move_sector_up+0x6e>
        rc = swap_erase_trailer_sectors(state, fap_sec);
     ba0:	9909      	ldr	r1, [sp, #36]	; 0x24
     ba2:	4630      	mov	r0, r6
     ba4:	f003 fdbb 	bl	471e <swap_erase_trailer_sectors>
     ba8:	e7da      	b.n	b60 <boot_move_sector_up+0x24>
            rc = swap_erase_trailer_sectors(state, fap_pri);
     baa:	9908      	ldr	r1, [sp, #32]
     bac:	4630      	mov	r0, r6
     bae:	f003 fdb6 	bl	471e <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
     bb2:	4622      	mov	r2, r4
     bb4:	9908      	ldr	r1, [sp, #32]
     bb6:	4630      	mov	r0, r6
     bb8:	f003 fde9 	bl	478e <swap_status_init>
     bbc:	e7f0      	b.n	ba0 <boot_move_sector_up+0x64>
     bbe:	bf00      	nop
     bc0:	2000256c 	.word	0x2000256c

00000bc4 <boot_swap_sectors>:

static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs, const struct flash_area *fap_pri,
        const struct flash_area *fap_sec)
{
     bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     bc8:	b083      	sub	sp, #12
     bca:	4688      	mov	r8, r1
     bcc:	4615      	mov	r5, r2
     bce:	461c      	mov	r4, r3
     bd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
     bd2:	f852 7030 	ldr.w	r7, [r2, r0, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
     bd6:	6813      	ldr	r3, [r2, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     bd8:	1aff      	subs	r7, r7, r3
    uint32_t pri_up_off;
    uint32_t sec_off;
    int rc;

    pri_up_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);
    pri_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx - 1);
     bda:	3801      	subs	r0, #1
     bdc:	f852 6030 	ldr.w	r6, [r2, r0, lsl #3]
     be0:	1af6      	subs	r6, r6, r3
     be2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
     be4:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
     be8:	6813      	ldr	r3, [r2, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     bea:	eba1 0903 	sub.w	r9, r1, r3
    sec_off = boot_img_sector_off(state, BOOT_SECONDARY_SLOT, idx - 1);

    if (bs->state == BOOT_STATUS_STATE_0) {
     bee:	7923      	ldrb	r3, [r4, #4]
     bf0:	2b01      	cmp	r3, #1
     bf2:	d005      	beq.n	c00 <boot_swap_sectors+0x3c>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
     bf4:	7923      	ldrb	r3, [r4, #4]
     bf6:	2b02      	cmp	r3, #2
     bf8:	d01d      	beq.n	c36 <boot_swap_sectors+0x72>
        rc = boot_write_status(state, bs);
        bs->idx++;
        bs->state = BOOT_STATUS_STATE_0;
        BOOT_STATUS_ASSERT(rc == 0);
    }
}
     bfa:	b003      	add	sp, #12
     bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = boot_erase_region(fap_pri, pri_off, sz);
     c00:	4642      	mov	r2, r8
     c02:	4631      	mov	r1, r6
     c04:	980a      	ldr	r0, [sp, #40]	; 0x28
     c06:	f003 fd86 	bl	4716 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
     c0a:	f8cd 8004 	str.w	r8, [sp, #4]
     c0e:	9600      	str	r6, [sp, #0]
     c10:	464b      	mov	r3, r9
     c12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     c14:	990b      	ldr	r1, [sp, #44]	; 0x2c
     c16:	4628      	mov	r0, r5
     c18:	f7ff fed0 	bl	9bc <boot_copy_region>
        rc = boot_write_status(state, bs);
     c1c:	4621      	mov	r1, r4
     c1e:	4628      	mov	r0, r5
     c20:	f003 fd46 	bl	46b0 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
     c24:	2302      	movs	r3, #2
     c26:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
     c28:	2800      	cmp	r0, #0
     c2a:	d0e3      	beq.n	bf4 <boot_swap_sectors+0x30>
     c2c:	4a11      	ldr	r2, [pc, #68]	; (c74 <boot_swap_sectors+0xb0>)
     c2e:	6813      	ldr	r3, [r2, #0]
     c30:	3301      	adds	r3, #1
     c32:	6013      	str	r3, [r2, #0]
     c34:	e7de      	b.n	bf4 <boot_swap_sectors+0x30>
        rc = boot_erase_region(fap_sec, sec_off, sz);
     c36:	4642      	mov	r2, r8
     c38:	4649      	mov	r1, r9
     c3a:	980b      	ldr	r0, [sp, #44]	; 0x2c
     c3c:	f003 fd6b 	bl	4716 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
     c40:	f8cd 8004 	str.w	r8, [sp, #4]
     c44:	f8cd 9000 	str.w	r9, [sp]
     c48:	463b      	mov	r3, r7
     c4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     c4c:	990a      	ldr	r1, [sp, #40]	; 0x28
     c4e:	4628      	mov	r0, r5
     c50:	f7ff feb4 	bl	9bc <boot_copy_region>
        rc = boot_write_status(state, bs);
     c54:	4621      	mov	r1, r4
     c56:	4628      	mov	r0, r5
     c58:	f003 fd2a 	bl	46b0 <boot_write_status>
        bs->idx++;
     c5c:	6823      	ldr	r3, [r4, #0]
     c5e:	3301      	adds	r3, #1
     c60:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
     c62:	2301      	movs	r3, #1
     c64:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
     c66:	2800      	cmp	r0, #0
     c68:	d0c7      	beq.n	bfa <boot_swap_sectors+0x36>
     c6a:	4a02      	ldr	r2, [pc, #8]	; (c74 <boot_swap_sectors+0xb0>)
     c6c:	6813      	ldr	r3, [r2, #0]
     c6e:	3301      	adds	r3, #1
     c70:	6013      	str	r3, [r2, #0]
}
     c72:	e7c2      	b.n	bfa <boot_swap_sectors+0x36>
     c74:	2000256c 	.word	0x2000256c

00000c78 <boot_read_image_header>:
{
     c78:	b570      	push	{r4, r5, r6, lr}
     c7a:	b082      	sub	sp, #8
     c7c:	4616      	mov	r6, r2
    if (bs) {
     c7e:	461c      	mov	r4, r3
     c80:	2b00      	cmp	r3, #0
     c82:	d036      	beq.n	cf2 <boot_read_image_header+0x7a>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     c84:	6a43      	ldr	r3, [r0, #36]	; 0x24
     c86:	685d      	ldr	r5, [r3, #4]
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     c88:	7963      	ldrb	r3, [r4, #5]
     c8a:	2b01      	cmp	r3, #1
     c8c:	d011      	beq.n	cb2 <boot_read_image_header+0x3a>
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     c8e:	2b02      	cmp	r3, #2
     c90:	d017      	beq.n	cc2 <boot_read_image_header+0x4a>
    off = 0;
     c92:	2500      	movs	r5, #0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     c94:	2000      	movs	r0, #0
     c96:	f003 fbb7 	bl	4408 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     c9a:	a901      	add	r1, sp, #4
     c9c:	b2c0      	uxtb	r0, r0
     c9e:	f001 f80f 	bl	1cc0 <flash_area_open>
    if (rc != 0) {
     ca2:	b368      	cbz	r0, d00 <boot_read_image_header+0x88>
        rc = BOOT_EFLASH;
     ca4:	2501      	movs	r5, #1
    flash_area_close(fap);
     ca6:	9801      	ldr	r0, [sp, #4]
     ca8:	f004 fc31 	bl	550e <flash_area_close>
}
     cac:	4628      	mov	r0, r5
     cae:	b002      	add	sp, #8
     cb0:	bd70      	pop	{r4, r5, r6, pc}
            if (slot == 0 && bs->idx > g_last_idx) {
     cb2:	bb01      	cbnz	r1, cf6 <boot_read_image_header+0x7e>
     cb4:	6822      	ldr	r2, [r4, #0]
     cb6:	4b1c      	ldr	r3, [pc, #112]	; (d28 <boot_read_image_header+0xb0>)
     cb8:	681b      	ldr	r3, [r3, #0]
     cba:	429a      	cmp	r2, r3
     cbc:	d8ea      	bhi.n	c94 <boot_read_image_header+0x1c>
    off = 0;
     cbe:	2500      	movs	r5, #0
     cc0:	e7e8      	b.n	c94 <boot_read_image_header+0x1c>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     cc2:	6823      	ldr	r3, [r4, #0]
     cc4:	2b01      	cmp	r3, #1
     cc6:	d907      	bls.n	cd8 <boot_read_image_header+0x60>
     cc8:	4a17      	ldr	r2, [pc, #92]	; (d28 <boot_read_image_header+0xb0>)
     cca:	6812      	ldr	r2, [r2, #0]
     ccc:	4293      	cmp	r3, r2
     cce:	d803      	bhi.n	cd8 <boot_read_image_header+0x60>
                if (slot == 0) {
     cd0:	b999      	cbnz	r1, cfa <boot_read_image_header+0x82>
    off = 0;
     cd2:	2500      	movs	r5, #0
                    slot = 1;
     cd4:	2101      	movs	r1, #1
     cd6:	e7dd      	b.n	c94 <boot_read_image_header+0x1c>
            } else if (bs->idx == 1) {
     cd8:	2b01      	cmp	r3, #1
     cda:	d001      	beq.n	ce0 <boot_read_image_header+0x68>
    off = 0;
     cdc:	2500      	movs	r5, #0
     cde:	e7d9      	b.n	c94 <boot_read_image_header+0x1c>
                if (slot == 0) {
     ce0:	b101      	cbz	r1, ce4 <boot_read_image_header+0x6c>
    off = 0;
     ce2:	2500      	movs	r5, #0
                if (slot == 1 && bs->state == 2) {
     ce4:	2901      	cmp	r1, #1
     ce6:	d1d5      	bne.n	c94 <boot_read_image_header+0x1c>
     ce8:	7923      	ldrb	r3, [r4, #4]
     cea:	2b02      	cmp	r3, #2
     cec:	d1d2      	bne.n	c94 <boot_read_image_header+0x1c>
                    slot = 0;
     cee:	2100      	movs	r1, #0
     cf0:	e7d0      	b.n	c94 <boot_read_image_header+0x1c>
    off = 0;
     cf2:	2500      	movs	r5, #0
     cf4:	e7ce      	b.n	c94 <boot_read_image_header+0x1c>
     cf6:	2500      	movs	r5, #0
     cf8:	e7cc      	b.n	c94 <boot_read_image_header+0x1c>
     cfa:	2500      	movs	r5, #0
                    slot = 0;
     cfc:	4629      	mov	r1, r5
     cfe:	e7c9      	b.n	c94 <boot_read_image_header+0x1c>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     d00:	2320      	movs	r3, #32
     d02:	4632      	mov	r2, r6
     d04:	4629      	mov	r1, r5
     d06:	9801      	ldr	r0, [sp, #4]
     d08:	f004 fc02 	bl	5510 <flash_area_read>
    if (rc != 0) {
     d0c:	4605      	mov	r5, r0
     d0e:	b940      	cbnz	r0, d22 <boot_read_image_header+0xaa>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     d10:	2c00      	cmp	r4, #0
     d12:	d0c8      	beq.n	ca6 <boot_read_image_header+0x2e>
     d14:	6832      	ldr	r2, [r6, #0]
     d16:	4b05      	ldr	r3, [pc, #20]	; (d2c <boot_read_image_header+0xb4>)
     d18:	429a      	cmp	r2, r3
     d1a:	d0c4      	beq.n	ca6 <boot_read_image_header+0x2e>
        rc = -1;
     d1c:	f04f 35ff 	mov.w	r5, #4294967295
     d20:	e7c1      	b.n	ca6 <boot_read_image_header+0x2e>
        rc = BOOT_EFLASH;
     d22:	2501      	movs	r5, #1
     d24:	e7bf      	b.n	ca6 <boot_read_image_header+0x2e>
     d26:	bf00      	nop
     d28:	20005730 	.word	0x20005730
     d2c:	96f3b83d 	.word	0x96f3b83d

00000d30 <swap_read_status_bytes>:
{
     d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d34:	b085      	sub	sp, #20
     d36:	4606      	mov	r6, r0
     d38:	460d      	mov	r5, r1
     d3a:	9201      	str	r2, [sp, #4]
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     d3c:	4601      	mov	r1, r0
     d3e:	2000      	movs	r0, #0
     d40:	f003 fe28 	bl	4994 <boot_status_entries>
    if (max_entries < 0) {
     d44:	1e04      	subs	r4, r0, #0
     d46:	db62      	blt.n	e0e <swap_read_status_bytes+0xde>
    write_sz = BOOT_WRITE_SZ(state);
     d48:	f8d5 a05c 	ldr.w	sl, [r5, #92]	; 0x5c
    off = boot_status_off(fap);
     d4c:	4630      	mov	r0, r6
     d4e:	f003 fe2f 	bl	49b0 <boot_status_off>
     d52:	4681      	mov	r9, r0
    erased_sections = 0;
     d54:	f04f 0b00 	mov.w	fp, #0
    last_rc = 1;
     d58:	2701      	movs	r7, #1
    found_idx = -1;
     d5a:	f04f 38ff 	mov.w	r8, #4294967295
    for (i = max_entries; i > 0; i--) {
     d5e:	e005      	b.n	d6c <swap_read_status_bytes+0x3c>
            if (rc != last_rc) {
     d60:	4287      	cmp	r7, r0
     d62:	d001      	beq.n	d68 <swap_read_status_bytes+0x38>
                erased_sections++;
     d64:	f10b 0b01 	add.w	fp, fp, #1
                found_idx = i;
     d68:	462c      	mov	r4, r5
     d6a:	4607      	mov	r7, r0
    for (i = max_entries; i > 0; i--) {
     d6c:	2c00      	cmp	r4, #0
     d6e:	dd13      	ble.n	d98 <swap_read_status_bytes+0x68>
        rc = flash_area_read_is_empty(fap, off + (i - 1) * write_sz, &status, 1);
     d70:	1e65      	subs	r5, r4, #1
     d72:	fa5f f18a 	uxtb.w	r1, sl
     d76:	2301      	movs	r3, #1
     d78:	f10d 020f 	add.w	r2, sp, #15
     d7c:	fb05 9101 	mla	r1, r5, r1, r9
     d80:	4630      	mov	r0, r6
     d82:	f003 fb4d 	bl	4420 <flash_area_read_is_empty>
        if (rc < 0) {
     d86:	2800      	cmp	r0, #0
     d88:	db43      	blt.n	e12 <swap_read_status_bytes+0xe2>
        if (rc == 1) {
     d8a:	2801      	cmp	r0, #1
     d8c:	d0e8      	beq.n	d60 <swap_read_status_bytes+0x30>
            if (found_idx == -1) {
     d8e:	f1b8 3fff 	cmp.w	r8, #4294967295
     d92:	d1e9      	bne.n	d68 <swap_read_status_bytes+0x38>
                found_idx = i;
     d94:	46a0      	mov	r8, r4
     d96:	e7e7      	b.n	d68 <swap_read_status_bytes+0x38>
    if (erased_sections > 1) {
     d98:	f1bb 0f01 	cmp.w	fp, #1
     d9c:	dc0e      	bgt.n	dbc <swap_read_status_bytes+0x8c>
    if (found_idx == -1) {
     d9e:	f1b8 3fff 	cmp.w	r8, #4294967295
     da2:	d03a      	beq.n	e1a <swap_read_status_bytes+0xea>
    } else if (found_idx < move_entries) {
     da4:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
     da8:	dc1a      	bgt.n	de0 <swap_read_status_bytes+0xb0>
        bs->op = BOOT_STATUS_OP_MOVE;
     daa:	2301      	movs	r3, #1
     dac:	9901      	ldr	r1, [sp, #4]
     dae:	714b      	strb	r3, [r1, #5]
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     db0:	eb08 0203 	add.w	r2, r8, r3
     db4:	600a      	str	r2, [r1, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     db6:	710b      	strb	r3, [r1, #4]
    return 0;
     db8:	2000      	movs	r0, #0
     dba:	e02b      	b.n	e14 <swap_read_status_bytes+0xe4>
        BOOT_LOG_ERR("Detected inconsistent status!");
     dbc:	f04f 0000 	mov.w	r0, #0
     dc0:	2301      	movs	r3, #1
     dc2:	f363 0002 	bfi	r0, r3, #0, #3
     dc6:	f36f 00c5 	bfc	r0, #3, #3
     dca:	4b15      	ldr	r3, [pc, #84]	; (e20 <swap_read_status_bytes+0xf0>)
     dcc:	4a15      	ldr	r2, [pc, #84]	; (e24 <swap_read_status_bytes+0xf4>)
     dce:	1a9b      	subs	r3, r3, r2
     dd0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     dd4:	f363 108f 	bfi	r0, r3, #6, #10
     dd8:	4913      	ldr	r1, [pc, #76]	; (e28 <swap_read_status_bytes+0xf8>)
     dda:	f004 faa1 	bl	5320 <log_string_sync>
     dde:	e7de      	b.n	d9e <swap_read_status_bytes+0x6e>
        bs->op = BOOT_STATUS_OP_SWAP;
     de0:	2302      	movs	r3, #2
     de2:	9a01      	ldr	r2, [sp, #4]
     de4:	7153      	strb	r3, [r2, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     de6:	f1a8 0880 	sub.w	r8, r8, #128	; 0x80
     dea:	eb08 73d8 	add.w	r3, r8, r8, lsr #31
     dee:	105b      	asrs	r3, r3, #1
     df0:	3301      	adds	r3, #1
     df2:	6013      	str	r3, [r2, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     df4:	f1b8 0f00 	cmp.w	r8, #0
     df8:	f008 0801 	and.w	r8, r8, #1
     dfc:	bfb8      	it	lt
     dfe:	f1c8 0800 	rsblt	r8, r8, #0
     e02:	f108 0801 	add.w	r8, r8, #1
     e06:	f882 8004 	strb.w	r8, [r2, #4]
    return 0;
     e0a:	2000      	movs	r0, #0
     e0c:	e002      	b.n	e14 <swap_read_status_bytes+0xe4>
        return BOOT_EBADARGS;
     e0e:	2007      	movs	r0, #7
     e10:	e000      	b.n	e14 <swap_read_status_bytes+0xe4>
            return BOOT_EFLASH;
     e12:	2001      	movs	r0, #1
}
     e14:	b005      	add	sp, #20
     e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
     e1a:	2000      	movs	r0, #0
     e1c:	e7fa      	b.n	e14 <swap_read_status_bytes+0xe4>
     e1e:	bf00      	nop
     e20:	00007e50 	.word	0x00007e50
     e24:	00007e48 	.word	0x00007e48
     e28:	00008160 	.word	0x00008160

00000e2c <boot_slots_compatible>:
{
     e2c:	b538      	push	{r3, r4, r5, lr}
    return BOOT_IMG(state, slot).num_sectors;
     e2e:	6a85      	ldr	r5, [r0, #40]	; 0x28
     e30:	6d43      	ldr	r3, [r0, #84]	; 0x54
    if (num_sectors != boot_img_num_sectors(state, BOOT_SECONDARY_SLOT)) {
     e32:	429d      	cmp	r5, r3
     e34:	d10f      	bne.n	e56 <boot_slots_compatible+0x2a>
    if (num_sectors > BOOT_MAX_IMG_SECTORS) {
     e36:	2d80      	cmp	r5, #128	; 0x80
     e38:	d820      	bhi.n	e7c <boot_slots_compatible+0x50>
    for (i = 0; i < num_sectors; i++) {
     e3a:	2300      	movs	r3, #0
     e3c:	42ab      	cmp	r3, r5
     e3e:	d243      	bcs.n	ec8 <boot_slots_compatible+0x9c>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     e40:	6a41      	ldr	r1, [r0, #36]	; 0x24
     e42:	00dc      	lsls	r4, r3, #3
     e44:	4421      	add	r1, r4
     e46:	6849      	ldr	r1, [r1, #4]
     e48:	6d02      	ldr	r2, [r0, #80]	; 0x50
     e4a:	4422      	add	r2, r4
     e4c:	6852      	ldr	r2, [r2, #4]
        if (boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i) !=
     e4e:	428a      	cmp	r2, r1
     e50:	d127      	bne.n	ea2 <boot_slots_compatible+0x76>
    for (i = 0; i < num_sectors; i++) {
     e52:	3301      	adds	r3, #1
     e54:	e7f2      	b.n	e3c <boot_slots_compatible+0x10>
        BOOT_LOG_WRN("Cannot upgrade: slots don't have same amount of sectors");
     e56:	f04f 0000 	mov.w	r0, #0
     e5a:	2302      	movs	r3, #2
     e5c:	f363 0002 	bfi	r0, r3, #0, #3
     e60:	f36f 00c5 	bfc	r0, #3, #3
     e64:	4b19      	ldr	r3, [pc, #100]	; (ecc <boot_slots_compatible+0xa0>)
     e66:	4a1a      	ldr	r2, [pc, #104]	; (ed0 <boot_slots_compatible+0xa4>)
     e68:	1a9b      	subs	r3, r3, r2
     e6a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     e6e:	f363 108f 	bfi	r0, r3, #6, #10
     e72:	4918      	ldr	r1, [pc, #96]	; (ed4 <boot_slots_compatible+0xa8>)
     e74:	f004 fa54 	bl	5320 <log_string_sync>
        return 0;
     e78:	2000      	movs	r0, #0
}
     e7a:	bd38      	pop	{r3, r4, r5, pc}
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     e7c:	f04f 0000 	mov.w	r0, #0
     e80:	2302      	movs	r3, #2
     e82:	f363 0002 	bfi	r0, r3, #0, #3
     e86:	f36f 00c5 	bfc	r0, #3, #3
     e8a:	4b10      	ldr	r3, [pc, #64]	; (ecc <boot_slots_compatible+0xa0>)
     e8c:	4a10      	ldr	r2, [pc, #64]	; (ed0 <boot_slots_compatible+0xa4>)
     e8e:	1a9b      	subs	r3, r3, r2
     e90:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     e94:	f363 108f 	bfi	r0, r3, #6, #10
     e98:	490f      	ldr	r1, [pc, #60]	; (ed8 <boot_slots_compatible+0xac>)
     e9a:	f004 fa41 	bl	5320 <log_string_sync>
        return 0;
     e9e:	2000      	movs	r0, #0
     ea0:	e7eb      	b.n	e7a <boot_slots_compatible+0x4e>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     ea2:	f04f 0000 	mov.w	r0, #0
     ea6:	2302      	movs	r3, #2
     ea8:	f363 0002 	bfi	r0, r3, #0, #3
     eac:	f36f 00c5 	bfc	r0, #3, #3
     eb0:	4b06      	ldr	r3, [pc, #24]	; (ecc <boot_slots_compatible+0xa0>)
     eb2:	4a07      	ldr	r2, [pc, #28]	; (ed0 <boot_slots_compatible+0xa4>)
     eb4:	1a9b      	subs	r3, r3, r2
     eb6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     eba:	f363 108f 	bfi	r0, r3, #6, #10
     ebe:	4907      	ldr	r1, [pc, #28]	; (edc <boot_slots_compatible+0xb0>)
     ec0:	f004 fa2e 	bl	5320 <log_string_sync>
            return 0;
     ec4:	2000      	movs	r0, #0
     ec6:	e7d8      	b.n	e7a <boot_slots_compatible+0x4e>
    return 1;
     ec8:	2001      	movs	r0, #1
     eca:	e7d6      	b.n	e7a <boot_slots_compatible+0x4e>
     ecc:	00007e50 	.word	0x00007e50
     ed0:	00007e48 	.word	0x00007e48
     ed4:	000080c4 	.word	0x000080c4
     ed8:	000080fc 	.word	0x000080fc
     edc:	00008128 	.word	0x00008128

00000ee0 <swap_status_source>:
{
     ee0:	b510      	push	{r4, lr}
     ee2:	b086      	sub	sp, #24
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     ee4:	a904      	add	r1, sp, #16
     ee6:	2003      	movs	r0, #3
     ee8:	f003 fdce 	bl	4a88 <boot_read_swap_state_by_id>
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     eec:	f04f 0000 	mov.w	r0, #0
     ef0:	2303      	movs	r3, #3
     ef2:	f363 0002 	bfi	r0, r3, #0, #3
     ef6:	f36f 00c5 	bfc	r0, #3, #3
     efa:	4b26      	ldr	r3, [pc, #152]	; (f94 <swap_status_source+0xb4>)
     efc:	4a26      	ldr	r2, [pc, #152]	; (f98 <swap_status_source+0xb8>)
     efe:	1a9b      	subs	r3, r3, r2
     f00:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     f04:	f363 108f 	bfi	r0, r3, #6, #10
     f08:	f89d 3010 	ldrb.w	r3, [sp, #16]
     f0c:	2b01      	cmp	r3, #1
     f0e:	d02d      	beq.n	f6c <swap_status_source+0x8c>
     f10:	2b03      	cmp	r3, #3
     f12:	d029      	beq.n	f68 <swap_status_source+0x88>
     f14:	4b21      	ldr	r3, [pc, #132]	; (f9c <swap_status_source+0xbc>)
     f16:	f89d 2011 	ldrb.w	r2, [sp, #17]
     f1a:	f89d 1012 	ldrb.w	r1, [sp, #18]
     f1e:	f89d 4013 	ldrb.w	r4, [sp, #19]
     f22:	9402      	str	r4, [sp, #8]
     f24:	9101      	str	r1, [sp, #4]
     f26:	9200      	str	r2, [sp, #0]
     f28:	4a1d      	ldr	r2, [pc, #116]	; (fa0 <swap_status_source+0xc0>)
     f2a:	491e      	ldr	r1, [pc, #120]	; (fa4 <swap_status_source+0xc4>)
     f2c:	f004 f9f8 	bl	5320 <log_string_sync>
    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
     f30:	f89d 3010 	ldrb.w	r3, [sp, #16]
     f34:	2b01      	cmp	r3, #1
     f36:	d103      	bne.n	f40 <swap_status_source+0x60>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
     f38:	f89d 3012 	ldrb.w	r3, [sp, #18]
    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
     f3c:	2b03      	cmp	r3, #3
     f3e:	d017      	beq.n	f70 <swap_status_source+0x90>
    BOOT_LOG_INF("Boot source: none");
     f40:	f04f 0000 	mov.w	r0, #0
     f44:	2303      	movs	r3, #3
     f46:	f363 0002 	bfi	r0, r3, #0, #3
     f4a:	f36f 00c5 	bfc	r0, #3, #3
     f4e:	4b11      	ldr	r3, [pc, #68]	; (f94 <swap_status_source+0xb4>)
     f50:	4a11      	ldr	r2, [pc, #68]	; (f98 <swap_status_source+0xb8>)
     f52:	1a9b      	subs	r3, r3, r2
     f54:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     f58:	f363 108f 	bfi	r0, r3, #6, #10
     f5c:	4912      	ldr	r1, [pc, #72]	; (fa8 <swap_status_source+0xc8>)
     f5e:	f004 f9df 	bl	5320 <log_string_sync>
    return BOOT_STATUS_SOURCE_NONE;
     f62:	2000      	movs	r0, #0
}
     f64:	b006      	add	sp, #24
     f66:	bd10      	pop	{r4, pc}
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     f68:	4b10      	ldr	r3, [pc, #64]	; (fac <swap_status_source+0xcc>)
     f6a:	e7d4      	b.n	f16 <swap_status_source+0x36>
     f6c:	4b10      	ldr	r3, [pc, #64]	; (fb0 <swap_status_source+0xd0>)
     f6e:	e7d2      	b.n	f16 <swap_status_source+0x36>
        BOOT_LOG_INF("Boot source: primary slot");
     f70:	f04f 0000 	mov.w	r0, #0
     f74:	f363 0002 	bfi	r0, r3, #0, #3
     f78:	f36f 00c5 	bfc	r0, #3, #3
     f7c:	4b05      	ldr	r3, [pc, #20]	; (f94 <swap_status_source+0xb4>)
     f7e:	4a06      	ldr	r2, [pc, #24]	; (f98 <swap_status_source+0xb8>)
     f80:	1a9b      	subs	r3, r3, r2
     f82:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     f86:	f363 108f 	bfi	r0, r3, #6, #10
     f8a:	490a      	ldr	r1, [pc, #40]	; (fb4 <swap_status_source+0xd4>)
     f8c:	f004 f9c8 	bl	5320 <log_string_sync>
        return source;
     f90:	2002      	movs	r0, #2
     f92:	e7e7      	b.n	f64 <swap_status_source+0x84>
     f94:	00007e50 	.word	0x00007e50
     f98:	00007e48 	.word	0x00007e48
     f9c:	000081ac 	.word	0x000081ac
     fa0:	000081c0 	.word	0x000081c0
     fa4:	000081d0 	.word	0x000081d0
     fa8:	00008228 	.word	0x00008228
     fac:	000081b8 	.word	0x000081b8
     fb0:	000081b0 	.word	0x000081b0
     fb4:	0000820c 	.word	0x0000820c

00000fb8 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec, uint8_t sec_id)
{
     fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fba:	b087      	sub	sp, #28
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     fbc:	684c      	ldr	r4, [r1, #4]
     fbe:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
     fc2:	4d24      	ldr	r5, [pc, #144]	; (1054 <fixup_revert+0x9c>)
     fc4:	42ac      	cmp	r4, r5
     fc6:	d102      	bne.n	fce <fixup_revert+0x16>
        bs->op != BOOT_STATUS_OP_MOVE ||
        bs->idx != BOOT_STATUS_IDX_0) {
     fc8:	680c      	ldr	r4, [r1, #0]
        bs->op != BOOT_STATUS_OP_MOVE ||
     fca:	2c01      	cmp	r4, #1
     fcc:	d001      	beq.n	fd2 <fixup_revert+0x1a>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
        assert(rc == 0);
    }
}
     fce:	b007      	add	sp, #28
     fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fd2:	4616      	mov	r6, r2
     fd4:	460c      	mov	r4, r1
     fd6:	4605      	mov	r5, r0
    rc = boot_read_swap_state_by_id(sec_id, &swap_state);
     fd8:	a904      	add	r1, sp, #16
     fda:	4618      	mov	r0, r3
     fdc:	f003 fd54 	bl	4a88 <boot_read_swap_state_by_id>
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
     fe0:	f04f 0000 	mov.w	r0, #0
     fe4:	2303      	movs	r3, #3
     fe6:	f363 0002 	bfi	r0, r3, #0, #3
     fea:	f36f 00c5 	bfc	r0, #3, #3
     fee:	4b1a      	ldr	r3, [pc, #104]	; (1058 <fixup_revert+0xa0>)
     ff0:	4a1a      	ldr	r2, [pc, #104]	; (105c <fixup_revert+0xa4>)
     ff2:	1a9b      	subs	r3, r3, r2
     ff4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     ff8:	f363 108f 	bfi	r0, r3, #6, #10
     ffc:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1000:	2b01      	cmp	r3, #1
    1002:	d024      	beq.n	104e <fixup_revert+0x96>
    1004:	2b03      	cmp	r3, #3
    1006:	d020      	beq.n	104a <fixup_revert+0x92>
    1008:	4b15      	ldr	r3, [pc, #84]	; (1060 <fixup_revert+0xa8>)
    100a:	f89d 2011 	ldrb.w	r2, [sp, #17]
    100e:	f89d 1012 	ldrb.w	r1, [sp, #18]
    1012:	f89d 7013 	ldrb.w	r7, [sp, #19]
    1016:	9702      	str	r7, [sp, #8]
    1018:	9101      	str	r1, [sp, #4]
    101a:	9200      	str	r2, [sp, #0]
    101c:	4a11      	ldr	r2, [pc, #68]	; (1064 <fixup_revert+0xac>)
    101e:	4912      	ldr	r1, [pc, #72]	; (1068 <fixup_revert+0xb0>)
    1020:	f004 f97e 	bl	5320 <log_string_sync>
    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    1024:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1028:	2b03      	cmp	r3, #3
    102a:	d1d0      	bne.n	fce <fixup_revert+0x16>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    102c:	4631      	mov	r1, r6
    102e:	4628      	mov	r0, r5
    1030:	f003 fb75 	bl	471e <swap_erase_trailer_sectors>
        rc = boot_write_image_ok(fap_sec);
    1034:	4630      	mov	r0, r6
    1036:	f003 fd5e 	bl	4af6 <boot_write_image_ok>
        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    103a:	68a1      	ldr	r1, [r4, #8]
    103c:	4630      	mov	r0, r6
    103e:	f003 fd73 	bl	4b28 <boot_write_swap_size>
        rc = boot_write_magic(fap_sec);
    1042:	4630      	mov	r0, r6
    1044:	f000 f8e4 	bl	1210 <boot_write_magic>
        assert(rc == 0);
    1048:	e7c1      	b.n	fce <fixup_revert+0x16>
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    104a:	4b08      	ldr	r3, [pc, #32]	; (106c <fixup_revert+0xb4>)
    104c:	e7dd      	b.n	100a <fixup_revert+0x52>
    104e:	4b08      	ldr	r3, [pc, #32]	; (1070 <fixup_revert+0xb8>)
    1050:	e7db      	b.n	100a <fixup_revert+0x52>
    1052:	bf00      	nop
    1054:	04000100 	.word	0x04000100
    1058:	00007e50 	.word	0x00007e50
    105c:	00007e48 	.word	0x00007e48
    1060:	000081ac 	.word	0x000081ac
    1064:	00008150 	.word	0x00008150
    1068:	000081d0 	.word	0x000081d0
    106c:	000081b8 	.word	0x000081b8
    1070:	000081b0 	.word	0x000081b0

00001074 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    1074:	b5f0      	push	{r4, r5, r6, r7, lr}
    1076:	b085      	sub	sp, #20
    1078:	4607      	mov	r7, r0
    107a:	460d      	mov	r5, r1
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    g_last_idx = 0;
    107c:	2100      	movs	r1, #0
    107e:	4b3e      	ldr	r3, [pc, #248]	; (1178 <swap_run+0x104>)
    1080:	6019      	str	r1, [r3, #0]
    1082:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1084:	685e      	ldr	r6, [r3, #4]

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    1086:	4431      	add	r1, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
    1088:	483b      	ldr	r0, [pc, #236]	; (1178 <swap_run+0x104>)
    108a:	6803      	ldr	r3, [r0, #0]
    108c:	3301      	adds	r3, #1
    108e:	6003      	str	r3, [r0, #0]
        if (sz >= copy_size) {
    1090:	4291      	cmp	r1, r2
    1092:	d3f8      	bcc.n	1086 <swap_run+0x12>
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    1094:	4628      	mov	r0, r5
    1096:	f003 fad5 	bl	4644 <boot_status_is_reset>
    109a:	b170      	cbz	r0, 10ba <swap_run+0x46>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    109c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    109e:	f003 fc74 	bl	498a <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    10a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    10a4:	3a01      	subs	r2, #1
        sz = 0;
    10a6:	2300      	movs	r3, #0

        while (1) {
            sz += sector_sz;
    10a8:	4433      	add	r3, r6
            if  (sz >= trailer_sz) {
    10aa:	4298      	cmp	r0, r3
    10ac:	d901      	bls.n	10b2 <swap_run+0x3e>
                break;
            }
            first_trailer_idx--;
    10ae:	3a01      	subs	r2, #1
            sz += sector_sz;
    10b0:	e7fa      	b.n	10a8 <swap_run+0x34>
        }

        if (g_last_idx >= first_trailer_idx) {
    10b2:	4b31      	ldr	r3, [pc, #196]	; (1178 <swap_run+0x104>)
    10b4:	681b      	ldr	r3, [r3, #0]
    10b6:	4293      	cmp	r3, r2
    10b8:	d214      	bcs.n	10e4 <swap_run+0x70>
        }
    }

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    10ba:	a903      	add	r1, sp, #12
    10bc:	2003      	movs	r0, #3
    10be:	f000 fdff 	bl	1cc0 <flash_area_open>
    assert (rc == 0);

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    10c2:	a902      	add	r1, sp, #8
    10c4:	2007      	movs	r0, #7
    10c6:	f000 fdfb 	bl	1cc0 <flash_area_open>
    assert (rc == 0);

    fixup_revert(state, bs, fap_sec, FLASH_AREA_IMAGE_SECONDARY(image_index));
    10ca:	2307      	movs	r3, #7
    10cc:	9a02      	ldr	r2, [sp, #8]
    10ce:	4629      	mov	r1, r5
    10d0:	4638      	mov	r0, r7
    10d2:	f7ff ff71 	bl	fb8 <fixup_revert>

    if (bs->op == BOOT_STATUS_OP_MOVE) {
    10d6:	796b      	ldrb	r3, [r5, #5]
    10d8:	2b01      	cmp	r3, #1
    10da:	d017      	beq.n	110c <swap_run+0x98>
            idx--;
        }
        bs->idx = BOOT_STATUS_IDX_0;
    }

    bs->op = BOOT_STATUS_OP_SWAP;
    10dc:	2302      	movs	r3, #2
    10de:	716b      	strb	r3, [r5, #5]

    idx = 1;
    10e0:	2401      	movs	r4, #1
    while (idx <= g_last_idx) {
    10e2:	e038      	b.n	1156 <swap_run+0xe2>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    10e4:	f04f 0000 	mov.w	r0, #0
    10e8:	2302      	movs	r3, #2
    10ea:	f363 0002 	bfi	r0, r3, #0, #3
    10ee:	f36f 00c5 	bfc	r0, #3, #3
    10f2:	4b22      	ldr	r3, [pc, #136]	; (117c <swap_run+0x108>)
    10f4:	4a22      	ldr	r2, [pc, #136]	; (1180 <swap_run+0x10c>)
    10f6:	1a9b      	subs	r3, r3, r2
    10f8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    10fc:	f363 108f 	bfi	r0, r3, #6, #10
    1100:	4920      	ldr	r1, [pc, #128]	; (1184 <swap_run+0x110>)
    1102:	f004 f90d 	bl	5320 <log_string_sync>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    1106:	2301      	movs	r3, #1
    1108:	71eb      	strb	r3, [r5, #7]
            return;
    110a:	e032      	b.n	1172 <swap_run+0xfe>
        idx = g_last_idx;
    110c:	4b1a      	ldr	r3, [pc, #104]	; (1178 <swap_run+0x104>)
    110e:	681c      	ldr	r4, [r3, #0]
        while (idx > 0) {
    1110:	e000      	b.n	1114 <swap_run+0xa0>
            idx--;
    1112:	3c01      	subs	r4, #1
        while (idx > 0) {
    1114:	b18c      	cbz	r4, 113a <swap_run+0xc6>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1116:	682a      	ldr	r2, [r5, #0]
    1118:	4b17      	ldr	r3, [pc, #92]	; (1178 <swap_run+0x104>)
    111a:	681b      	ldr	r3, [r3, #0]
    111c:	1a9b      	subs	r3, r3, r2
    111e:	3301      	adds	r3, #1
    1120:	429c      	cmp	r4, r3
    1122:	d8f6      	bhi.n	1112 <swap_run+0x9e>
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1124:	9b02      	ldr	r3, [sp, #8]
    1126:	9301      	str	r3, [sp, #4]
    1128:	9b03      	ldr	r3, [sp, #12]
    112a:	9300      	str	r3, [sp, #0]
    112c:	462b      	mov	r3, r5
    112e:	463a      	mov	r2, r7
    1130:	4631      	mov	r1, r6
    1132:	4620      	mov	r0, r4
    1134:	f7ff fd02 	bl	b3c <boot_move_sector_up>
    1138:	e7eb      	b.n	1112 <swap_run+0x9e>
        bs->idx = BOOT_STATUS_IDX_0;
    113a:	2301      	movs	r3, #1
    113c:	602b      	str	r3, [r5, #0]
    113e:	e7cd      	b.n	10dc <swap_run+0x68>
        if (idx >= bs->idx) {
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1140:	9b02      	ldr	r3, [sp, #8]
    1142:	9301      	str	r3, [sp, #4]
    1144:	9b03      	ldr	r3, [sp, #12]
    1146:	9300      	str	r3, [sp, #0]
    1148:	462b      	mov	r3, r5
    114a:	463a      	mov	r2, r7
    114c:	4631      	mov	r1, r6
    114e:	4620      	mov	r0, r4
    1150:	f7ff fd38 	bl	bc4 <boot_swap_sectors>
        }
        idx++;
    1154:	3401      	adds	r4, #1
    while (idx <= g_last_idx) {
    1156:	4b08      	ldr	r3, [pc, #32]	; (1178 <swap_run+0x104>)
    1158:	681b      	ldr	r3, [r3, #0]
    115a:	42a3      	cmp	r3, r4
    115c:	d303      	bcc.n	1166 <swap_run+0xf2>
        if (idx >= bs->idx) {
    115e:	682b      	ldr	r3, [r5, #0]
    1160:	42a3      	cmp	r3, r4
    1162:	d8f7      	bhi.n	1154 <swap_run+0xe0>
    1164:	e7ec      	b.n	1140 <swap_run+0xcc>
    }

    flash_area_close(fap_pri);
    1166:	9803      	ldr	r0, [sp, #12]
    1168:	f004 f9d1 	bl	550e <flash_area_close>
    flash_area_close(fap_sec);
    116c:	9802      	ldr	r0, [sp, #8]
    116e:	f004 f9ce 	bl	550e <flash_area_close>
}
    1172:	b005      	add	sp, #20
    1174:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1176:	bf00      	nop
    1178:	20005730 	.word	0x20005730
    117c:	00007e50 	.word	0x00007e50
    1180:	00007e48 	.word	0x00007e48
    1184:	00008180 	.word	0x00008180

00001188 <boot_magic_decode>:
#define BOOT_SWAP_TABLES_COUNT \
    (sizeof boot_swap_tables / sizeof boot_swap_tables[0])

static int
boot_magic_decode(const uint32_t *magic)
{
    1188:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    118a:	2210      	movs	r2, #16
    118c:	4903      	ldr	r1, [pc, #12]	; (119c <boot_magic_decode+0x14>)
    118e:	f004 fc04 	bl	599a <memcmp>
    1192:	b108      	cbz	r0, 1198 <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
    }
    return BOOT_MAGIC_BAD;
    1194:	2002      	movs	r0, #2
}
    1196:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
    1198:	2001      	movs	r0, #1
    119a:	e7fc      	b.n	1196 <boot_magic_decode+0xe>
    119c:	0000823c 	.word	0x0000823c

000011a0 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
    11a0:	b570      	push	{r4, r5, r6, lr}
    11a2:	b086      	sub	sp, #24
    11a4:	460e      	mov	r6, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
    11a6:	2400      	movs	r4, #0
    11a8:	f8ad 4004 	strh.w	r4, [sp, #4]
    11ac:	2303      	movs	r3, #3
    11ae:	f88d 3004 	strb.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    11b2:	e007      	b.n	11c4 <boot_find_status+0x24>
        }

        off = boot_magic_off(*fap);
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
        if (rc != 0) {
            flash_area_close(*fap);
    11b4:	6830      	ldr	r0, [r6, #0]
    11b6:	f004 f9aa 	bl	550e <flash_area_close>
            return rc;
    11ba:	e023      	b.n	1204 <boot_find_status+0x64>

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
            return 0;
        }

        flash_area_close(*fap);
    11bc:	6830      	ldr	r0, [r6, #0]
    11be:	f004 f9a6 	bl	550e <flash_area_close>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    11c2:	3401      	adds	r4, #1
    11c4:	2c01      	cmp	r4, #1
    11c6:	d81b      	bhi.n	1200 <boot_find_status+0x60>
        rc = flash_area_open(areas[i], fap);
    11c8:	4631      	mov	r1, r6
    11ca:	ab06      	add	r3, sp, #24
    11cc:	4423      	add	r3, r4
    11ce:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    11d2:	f000 fd75 	bl	1cc0 <flash_area_open>
        if (rc != 0) {
    11d6:	4605      	mov	r5, r0
    11d8:	b9a0      	cbnz	r0, 1204 <boot_find_status+0x64>
        off = boot_magic_off(*fap);
    11da:	6830      	ldr	r0, [r6, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
    11dc:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    11de:	2310      	movs	r3, #16
    11e0:	aa02      	add	r2, sp, #8
    11e2:	3910      	subs	r1, #16
    11e4:	f004 f994 	bl	5510 <flash_area_read>
        if (rc != 0) {
    11e8:	4605      	mov	r5, r0
    11ea:	2800      	cmp	r0, #0
    11ec:	d1e2      	bne.n	11b4 <boot_find_status+0x14>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    11ee:	2210      	movs	r2, #16
    11f0:	4906      	ldr	r1, [pc, #24]	; (120c <boot_find_status+0x6c>)
    11f2:	a802      	add	r0, sp, #8
    11f4:	f004 fbd1 	bl	599a <memcmp>
    11f8:	4605      	mov	r5, r0
    11fa:	2800      	cmp	r0, #0
    11fc:	d1de      	bne.n	11bc <boot_find_status+0x1c>
    11fe:	e001      	b.n	1204 <boot_find_status+0x64>
    }

    /* If we got here, no magic was found */
    return -1;
    1200:	f04f 35ff 	mov.w	r5, #4294967295
}
    1204:	4628      	mov	r0, r5
    1206:	b006      	add	sp, #24
    1208:	bd70      	pop	{r4, r5, r6, pc}
    120a:	bf00      	nop
    120c:	0000823c 	.word	0x0000823c

00001210 <boot_write_magic>:
}
#endif

int
boot_write_magic(const struct flash_area *fap)
{
    1210:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    1212:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    1214:	2310      	movs	r3, #16
    1216:	4a05      	ldr	r2, [pc, #20]	; (122c <boot_write_magic+0x1c>)
    1218:	3910      	subs	r1, #16
    121a:	f004 f998 	bl	554e <flash_area_write>
    if (rc != 0) {
    121e:	4603      	mov	r3, r0
    1220:	b908      	cbnz	r0, 1226 <boot_write_magic+0x16>
        return BOOT_EFLASH;
    }

    return 0;
}
    1222:	4618      	mov	r0, r3
    1224:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
    1226:	2301      	movs	r3, #1
    1228:	e7fb      	b.n	1222 <boot_write_magic+0x12>
    122a:	bf00      	nop
    122c:	0000823c 	.word	0x0000823c

00001230 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
    1230:	b530      	push	{r4, r5, lr}
    1232:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1234:	a902      	add	r1, sp, #8
    1236:	2003      	movs	r0, #3
    1238:	f003 fc26 	bl	4a88 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    123c:	2800      	cmp	r0, #0
    123e:	d16d      	bne.n	131c <boot_swap_type_multi+0xec>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1240:	4669      	mov	r1, sp
    1242:	2007      	movs	r0, #7
    1244:	f003 fc20 	bl	4a88 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    1248:	2800      	cmp	r0, #0
    124a:	d169      	bne.n	1320 <boot_swap_type_multi+0xf0>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    124c:	2400      	movs	r4, #0
    124e:	e007      	b.n	1260 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    1250:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    1252:	2b04      	cmp	r3, #4
    1254:	d028      	beq.n	12a8 <boot_swap_type_multi+0x78>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    1256:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    125a:	4293      	cmp	r3, r2
    125c:	d024      	beq.n	12a8 <boot_swap_type_multi+0x78>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    125e:	3401      	adds	r4, #1
    1260:	2c02      	cmp	r4, #2
    1262:	d847      	bhi.n	12f4 <boot_swap_type_multi+0xc4>
        table = boot_swap_tables + i;
    1264:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1268:	005b      	lsls	r3, r3, #1
    126a:	4a2e      	ldr	r2, [pc, #184]	; (1324 <boot_swap_type_multi+0xf4>)
    126c:	18d5      	adds	r5, r2, r3
        if (boot_magic_compatible_check(table->magic_primary_slot,
    126e:	f89d 1008 	ldrb.w	r1, [sp, #8]
    1272:	5cd0      	ldrb	r0, [r2, r3]
    1274:	f003 fb75 	bl	4962 <boot_magic_compatible_check>
    1278:	2800      	cmp	r0, #0
    127a:	d0f0      	beq.n	125e <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    127c:	f89d 1000 	ldrb.w	r1, [sp]
    1280:	7868      	ldrb	r0, [r5, #1]
    1282:	f003 fb6e 	bl	4962 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    1286:	2800      	cmp	r0, #0
    1288:	d0e9      	beq.n	125e <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    128a:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
    128c:	2b04      	cmp	r3, #4
    128e:	d003      	beq.n	1298 <boot_swap_type_multi+0x68>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    1290:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    1294:	4293      	cmp	r3, r2
    1296:	d1e2      	bne.n	125e <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    1298:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    129a:	2b04      	cmp	r3, #4
    129c:	d0d8      	beq.n	1250 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    129e:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    12a2:	4293      	cmp	r3, r2
    12a4:	d1db      	bne.n	125e <boot_swap_type_multi+0x2e>
    12a6:	e7d3      	b.n	1250 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
    12a8:	f04f 0000 	mov.w	r0, #0
    12ac:	2303      	movs	r3, #3
    12ae:	f363 0002 	bfi	r0, r3, #0, #3
    12b2:	f36f 00c5 	bfc	r0, #3, #3
    12b6:	4b1c      	ldr	r3, [pc, #112]	; (1328 <boot_swap_type_multi+0xf8>)
    12b8:	4a1c      	ldr	r2, [pc, #112]	; (132c <boot_swap_type_multi+0xfc>)
    12ba:	1a9b      	subs	r3, r3, r2
    12bc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    12c0:	f363 108f 	bfi	r0, r3, #6, #10
    12c4:	796b      	ldrb	r3, [r5, #5]
    12c6:	2b02      	cmp	r3, #2
    12c8:	d007      	beq.n	12da <boot_swap_type_multi+0xaa>
    12ca:	2b03      	cmp	r3, #3
    12cc:	d010      	beq.n	12f0 <boot_swap_type_multi+0xc0>
    12ce:	2b04      	cmp	r3, #4
    12d0:	d001      	beq.n	12d6 <boot_swap_type_multi+0xa6>
    12d2:	4a17      	ldr	r2, [pc, #92]	; (1330 <boot_swap_type_multi+0x100>)
    12d4:	e002      	b.n	12dc <boot_swap_type_multi+0xac>
    12d6:	4a17      	ldr	r2, [pc, #92]	; (1334 <boot_swap_type_multi+0x104>)
    12d8:	e000      	b.n	12dc <boot_swap_type_multi+0xac>
    12da:	4a17      	ldr	r2, [pc, #92]	; (1338 <boot_swap_type_multi+0x108>)
    12dc:	4917      	ldr	r1, [pc, #92]	; (133c <boot_swap_type_multi+0x10c>)
    12de:	f004 f81f 	bl	5320 <log_string_sync>
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    12e2:	7968      	ldrb	r0, [r5, #5]
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
    12e4:	1e83      	subs	r3, r0, #2
    12e6:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    12e8:	2b02      	cmp	r3, #2
    12ea:	d915      	bls.n	1318 <boot_swap_type_multi+0xe8>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
    12ec:	20ff      	movs	r0, #255	; 0xff
    12ee:	e013      	b.n	1318 <boot_swap_type_multi+0xe8>
            BOOT_LOG_INF("Swap type: %s",
    12f0:	4a13      	ldr	r2, [pc, #76]	; (1340 <boot_swap_type_multi+0x110>)
    12f2:	e7f3      	b.n	12dc <boot_swap_type_multi+0xac>
            }
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    12f4:	f04f 0000 	mov.w	r0, #0
    12f8:	2303      	movs	r3, #3
    12fa:	f363 0002 	bfi	r0, r3, #0, #3
    12fe:	f36f 00c5 	bfc	r0, #3, #3
    1302:	4b09      	ldr	r3, [pc, #36]	; (1328 <boot_swap_type_multi+0xf8>)
    1304:	4a09      	ldr	r2, [pc, #36]	; (132c <boot_swap_type_multi+0xfc>)
    1306:	1a9b      	subs	r3, r3, r2
    1308:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    130c:	f363 108f 	bfi	r0, r3, #6, #10
    1310:	490c      	ldr	r1, [pc, #48]	; (1344 <boot_swap_type_multi+0x114>)
    1312:	f004 f805 	bl	5320 <log_string_sync>
    return BOOT_SWAP_TYPE_NONE;
    1316:	2001      	movs	r0, #1
}
    1318:	b005      	add	sp, #20
    131a:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
    131c:	20ff      	movs	r0, #255	; 0xff
    131e:	e7fb      	b.n	1318 <boot_swap_type_multi+0xe8>
        return BOOT_SWAP_TYPE_PANIC;
    1320:	20ff      	movs	r0, #255	; 0xff
    1322:	e7f9      	b.n	1318 <boot_swap_type_multi+0xe8>
    1324:	0000824c 	.word	0x0000824c
    1328:	00007e50 	.word	0x00007e50
    132c:	00007e48 	.word	0x00007e48
    1330:	00008270 	.word	0x00008270
    1334:	00008284 	.word	0x00008284
    1338:	00008260 	.word	0x00008260
    133c:	0000828c 	.word	0x0000828c
    1340:	00008268 	.word	0x00008268
    1344:	0000829c 	.word	0x0000829c

00001348 <bootutil_find_key>:
#endif

#ifdef EXPECTED_SIG_TLV
static int
bootutil_find_key(uint8_t *keyhash, uint8_t keyhash_len)
{
    1348:	b570      	push	{r4, r5, r6, lr}
    134a:	b0a4      	sub	sp, #144	; 0x90
    bootutil_sha256_context sha256_ctx;
    int i;
    const struct bootutil_key *key;
    uint8_t hash[32];

    if (keyhash_len > 32) {
    134c:	2920      	cmp	r1, #32
    134e:	d828      	bhi.n	13a2 <bootutil_find_key+0x5a>
    1350:	460d      	mov	r5, r1
    1352:	4606      	mov	r6, r0
        return -1;
    }

    for (i = 0; i < bootutil_key_cnt; i++) {
    1354:	2400      	movs	r4, #0
    1356:	4b14      	ldr	r3, [pc, #80]	; (13a8 <bootutil_find_key+0x60>)
    1358:	681b      	ldr	r3, [r3, #0]
    135a:	42a3      	cmp	r3, r4
    135c:	dd1c      	ble.n	1398 <bootutil_find_key+0x50>
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    135e:	a809      	add	r0, sp, #36	; 0x24
    1360:	f006 fa1a 	bl	7798 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    1364:	2100      	movs	r1, #0
    1366:	a809      	add	r0, sp, #36	; 0x24
    1368:	f002 f840 	bl	33ec <mbedtls_sha256_starts_ret>
        key = &bootutil_keys[i];
        bootutil_sha256_init(&sha256_ctx);
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
    136c:	4b0f      	ldr	r3, [pc, #60]	; (13ac <bootutil_find_key+0x64>)
    136e:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    1372:	6852      	ldr	r2, [r2, #4]

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    1374:	6812      	ldr	r2, [r2, #0]
    1376:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    137a:	a809      	add	r0, sp, #36	; 0x24
    137c:	f006 fa12 	bl	77a4 <mbedtls_sha256_update_ret>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
    1380:	a901      	add	r1, sp, #4
    1382:	a809      	add	r0, sp, #36	; 0x24
    1384:	f006 fa51 	bl	782a <mbedtls_sha256_finish_ret>
        bootutil_sha256_finish(&sha256_ctx, hash);
        if (!memcmp(hash, keyhash, keyhash_len)) {
    1388:	462a      	mov	r2, r5
    138a:	4631      	mov	r1, r6
    138c:	a801      	add	r0, sp, #4
    138e:	f004 fb04 	bl	599a <memcmp>
    1392:	b118      	cbz	r0, 139c <bootutil_find_key+0x54>
    for (i = 0; i < bootutil_key_cnt; i++) {
    1394:	3401      	adds	r4, #1
    1396:	e7de      	b.n	1356 <bootutil_find_key+0xe>
            return i;
        }
    }
    return -1;
    1398:	f04f 34ff 	mov.w	r4, #4294967295
}
    139c:	4620      	mov	r0, r4
    139e:	b024      	add	sp, #144	; 0x90
    13a0:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
    13a2:	f04f 34ff 	mov.w	r4, #4294967295
    13a6:	e7f9      	b.n	139c <bootutil_find_key+0x54>
    13a8:	00007fbc 	.word	0x00007fbc
    13ac:	00007fc0 	.word	0x00007fc0

000013b0 <bootutil_img_validate>:
int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    13b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13b4:	b0d6      	sub	sp, #344	; 0x158
    13b6:	4617      	mov	r7, r2
    13b8:	461d      	mov	r5, r3
    struct image_tlv_iter it;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
    13ba:	9c5f      	ldr	r4, [sp, #380]	; 0x17c
    13bc:	9404      	str	r4, [sp, #16]
    13be:	9c5e      	ldr	r4, [sp, #376]	; 0x178
    13c0:	9403      	str	r4, [sp, #12]
    13c2:	ac06      	add	r4, sp, #24
    13c4:	9402      	str	r4, [sp, #8]
    13c6:	9c5d      	ldr	r4, [sp, #372]	; 0x174
    13c8:	9401      	str	r4, [sp, #4]
    13ca:	9c5c      	ldr	r4, [sp, #368]	; 0x170
    13cc:	9400      	str	r4, [sp, #0]
    13ce:	f003 fbbb 	bl	4b48 <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
    13d2:	4606      	mov	r6, r0
    13d4:	2800      	cmp	r0, #0
    13d6:	f040 8082 	bne.w	14de <bootutil_img_validate+0x12e>
        return rc;
    }

    if (out_hash) {
    13da:	9b60      	ldr	r3, [sp, #384]	; 0x180
    13dc:	b123      	cbz	r3, 13e8 <bootutil_img_validate+0x38>
        memcpy(out_hash, hash, 32);
    13de:	2220      	movs	r2, #32
    13e0:	a906      	add	r1, sp, #24
    13e2:	4618      	mov	r0, r3
    13e4:	f004 faf0 	bl	59c8 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    13e8:	2300      	movs	r3, #0
    13ea:	9300      	str	r3, [sp, #0]
    13ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    13f0:	462a      	mov	r2, r5
    13f2:	4639      	mov	r1, r7
    13f4:	a84e      	add	r0, sp, #312	; 0x138
    13f6:	f003 fc6a 	bl	4cce <bootutil_tlv_iter_begin>
    if (rc) {
    13fa:	4606      	mov	r6, r0
    13fc:	2800      	cmp	r0, #0
    13fe:	d16e      	bne.n	14de <bootutil_img_validate+0x12e>
    int valid_signature = 0;
    1400:	4607      	mov	r7, r0
    int sha256_valid = 0;
    1402:	4680      	mov	r8, r0
    int key_id = -1;
    1404:	f04f 34ff 	mov.w	r4, #4294967295
    1408:	e01d      	b.n	1446 <bootutil_img_validate+0x96>
             * can be multiple signatures, each preceded by a key.
             */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
                key_id = -1;
    140a:	f04f 34ff 	mov.w	r4, #4294967295
    140e:	e01a      	b.n	1446 <bootutil_img_validate+0x96>
    1410:	f04f 34ff 	mov.w	r4, #4294967295
    1414:	e017      	b.n	1446 <bootutil_img_validate+0x96>
            }
            rc = bootutil_verify_sig(hash, sizeof(hash), buf, len, key_id);
            if (rc == 0) {
                valid_signature = 1;
            }
            key_id = -1;
    1416:	f04f 34ff 	mov.w	r4, #4294967295
                valid_signature = 1;
    141a:	2701      	movs	r7, #1
    141c:	e013      	b.n	1446 <bootutil_img_validate+0x96>
            if (len != sizeof(hash)) {
    141e:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
    1422:	2b20      	cmp	r3, #32
    1424:	d15f      	bne.n	14e6 <bootutil_img_validate+0x136>
            rc = flash_area_read(fap, off, buf, sizeof hash);
    1426:	aa0e      	add	r2, sp, #56	; 0x38
    1428:	9955      	ldr	r1, [sp, #340]	; 0x154
    142a:	4628      	mov	r0, r5
    142c:	f004 f870 	bl	5510 <flash_area_read>
            if (rc) {
    1430:	2800      	cmp	r0, #0
    1432:	d15b      	bne.n	14ec <bootutil_img_validate+0x13c>
            if (memcmp(hash, buf, sizeof(hash))) {
    1434:	2220      	movs	r2, #32
    1436:	a90e      	add	r1, sp, #56	; 0x38
    1438:	a806      	add	r0, sp, #24
    143a:	f004 faae 	bl	599a <memcmp>
    143e:	2800      	cmp	r0, #0
    1440:	d156      	bne.n	14f0 <bootutil_img_validate+0x140>
            sha256_valid = 1;
    1442:	f04f 0801 	mov.w	r8, #1
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    1446:	ab54      	add	r3, sp, #336	; 0x150
    1448:	f50d 72a9 	add.w	r2, sp, #338	; 0x152
    144c:	a955      	add	r1, sp, #340	; 0x154
    144e:	a84e      	add	r0, sp, #312	; 0x138
    1450:	f003 fca2 	bl	4d98 <bootutil_tlv_iter_next>
        if (rc < 0) {
    1454:	2800      	cmp	r0, #0
    1456:	db40      	blt.n	14da <bootutil_img_validate+0x12a>
        } else if (rc > 0) {
    1458:	dc38      	bgt.n	14cc <bootutil_img_validate+0x11c>
        if (type == IMAGE_TLV_SHA256) {
    145a:	f8bd 3150 	ldrh.w	r3, [sp, #336]	; 0x150
    145e:	2b10      	cmp	r3, #16
    1460:	d0dd      	beq.n	141e <bootutil_img_validate+0x6e>
        } else if (type == IMAGE_TLV_KEYHASH) {
    1462:	2b01      	cmp	r3, #1
    1464:	d021      	beq.n	14aa <bootutil_img_validate+0xfa>
        } else if (type == EXPECTED_SIG_TLV) {
    1466:	2b20      	cmp	r3, #32
    1468:	d1ed      	bne.n	1446 <bootutil_img_validate+0x96>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
    146a:	2c00      	cmp	r4, #0
    146c:	dbcd      	blt.n	140a <bootutil_img_validate+0x5a>
    146e:	4b29      	ldr	r3, [pc, #164]	; (1514 <bootutil_img_validate+0x164>)
    1470:	681b      	ldr	r3, [r3, #0]
    1472:	42a3      	cmp	r3, r4
    1474:	ddcc      	ble.n	1410 <bootutil_img_validate+0x60>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
    1476:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
    147a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    147e:	d13f      	bne.n	1500 <bootutil_img_validate+0x150>
            rc = flash_area_read(fap, off, buf, len);
    1480:	aa0e      	add	r2, sp, #56	; 0x38
    1482:	9955      	ldr	r1, [sp, #340]	; 0x154
    1484:	4628      	mov	r0, r5
    1486:	f004 f843 	bl	5510 <flash_area_read>
            if (rc) {
    148a:	2800      	cmp	r0, #0
    148c:	d13b      	bne.n	1506 <bootutil_img_validate+0x156>
            rc = bootutil_verify_sig(hash, sizeof(hash), buf, len, key_id);
    148e:	b2e4      	uxtb	r4, r4
    1490:	9400      	str	r4, [sp, #0]
    1492:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
    1496:	aa0e      	add	r2, sp, #56	; 0x38
    1498:	2120      	movs	r1, #32
    149a:	a806      	add	r0, sp, #24
    149c:	f000 f8b0 	bl	1600 <bootutil_verify_sig>
            if (rc == 0) {
    14a0:	2800      	cmp	r0, #0
    14a2:	d0b8      	beq.n	1416 <bootutil_img_validate+0x66>
            key_id = -1;
    14a4:	f04f 34ff 	mov.w	r4, #4294967295
    14a8:	e7cd      	b.n	1446 <bootutil_img_validate+0x96>
            if (len > 32) {
    14aa:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
    14ae:	2b20      	cmp	r3, #32
    14b0:	d821      	bhi.n	14f6 <bootutil_img_validate+0x146>
            rc = flash_area_read(fap, off, buf, len);
    14b2:	aa0e      	add	r2, sp, #56	; 0x38
    14b4:	9955      	ldr	r1, [sp, #340]	; 0x154
    14b6:	4628      	mov	r0, r5
    14b8:	f004 f82a 	bl	5510 <flash_area_read>
            if (rc) {
    14bc:	b9f0      	cbnz	r0, 14fc <bootutil_img_validate+0x14c>
            key_id = bootutil_find_key(buf, len);
    14be:	f89d 1152 	ldrb.w	r1, [sp, #338]	; 0x152
    14c2:	a80e      	add	r0, sp, #56	; 0x38
    14c4:	f7ff ff40 	bl	1348 <bootutil_find_key>
    14c8:	4604      	mov	r4, r0
    14ca:	e7bc      	b.n	1446 <bootutil_img_validate+0x96>
#endif
        }
    }

    if (!sha256_valid) {
    14cc:	f1b8 0f00 	cmp.w	r8, #0
    14d0:	d01c      	beq.n	150c <bootutil_img_validate+0x15c>
        return -1;
    }

#ifdef EXPECTED_SIG_TLV
    if (!valid_signature) {
    14d2:	b927      	cbnz	r7, 14de <bootutil_img_validate+0x12e>
        return -1;
    14d4:	f04f 36ff 	mov.w	r6, #4294967295
    14d8:	e001      	b.n	14de <bootutil_img_validate+0x12e>
            return -1;
    14da:	f04f 36ff 	mov.w	r6, #4294967295
    }
#endif

    return 0;
}
    14de:	4630      	mov	r0, r6
    14e0:	b056      	add	sp, #344	; 0x158
    14e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                return -1;
    14e6:	f04f 36ff 	mov.w	r6, #4294967295
    14ea:	e7f8      	b.n	14de <bootutil_img_validate+0x12e>
                return rc;
    14ec:	4606      	mov	r6, r0
    14ee:	e7f6      	b.n	14de <bootutil_img_validate+0x12e>
                return -1;
    14f0:	f04f 36ff 	mov.w	r6, #4294967295
    14f4:	e7f3      	b.n	14de <bootutil_img_validate+0x12e>
                return -1;
    14f6:	f04f 36ff 	mov.w	r6, #4294967295
    14fa:	e7f0      	b.n	14de <bootutil_img_validate+0x12e>
                return rc;
    14fc:	4606      	mov	r6, r0
    14fe:	e7ee      	b.n	14de <bootutil_img_validate+0x12e>
                return -1;
    1500:	f04f 36ff 	mov.w	r6, #4294967295
    1504:	e7eb      	b.n	14de <bootutil_img_validate+0x12e>
                return -1;
    1506:	f04f 36ff 	mov.w	r6, #4294967295
    150a:	e7e8      	b.n	14de <bootutil_img_validate+0x12e>
        return -1;
    150c:	f04f 36ff 	mov.w	r6, #4294967295
    1510:	e7e5      	b.n	14de <bootutil_img_validate+0x12e>
    1512:	bf00      	nop
    1514:	00007fbc 	.word	0x00007fbc

00001518 <bootutil_cmp_rsasig>:
 * values.
 */
static int
bootutil_cmp_rsasig(mbedtls_rsa_context *ctx, uint8_t *hash, uint32_t hlen,
  uint8_t *sig)
{
    1518:	b570      	push	{r4, r5, r6, lr}
    151a:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
    uint8_t em[MBEDTLS_MPI_MAX_SIZE];
    uint8_t db_mask[PSS_MASK_LEN];
    uint8_t h2[PSS_HLEN];
    int i;

    if (ctx->len != PSS_EMLEN || PSS_EMLEN > MBEDTLS_MPI_MAX_SIZE) {
    151e:	6844      	ldr	r4, [r0, #4]
    1520:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    1524:	d155      	bne.n	15d2 <bootutil_cmp_rsasig+0xba>
        return -1;
    }

    if (hlen != PSS_HLEN) {
    1526:	2a20      	cmp	r2, #32
    1528:	d156      	bne.n	15d8 <bootutil_cmp_rsasig+0xc0>
    152a:	460e      	mov	r6, r1
        return -1;
    }

    if (mbedtls_rsa_public(ctx, sig, em)) {
    152c:	aa41      	add	r2, sp, #260	; 0x104
    152e:	4619      	mov	r1, r3
    1530:	f001 ff1a 	bl	3368 <mbedtls_rsa_public>
    1534:	4605      	mov	r5, r0
    1536:	2800      	cmp	r0, #0
    1538:	d151      	bne.n	15de <bootutil_cmp_rsasig+0xc6>
     */

    /* Step 4.  If the rightmost octet of EM does have the value
     * 0xbc, output inconsistent and stop.
     */
    if (em[PSS_EMLEN - 1] != 0xbc) {
    153a:	f89d 3203 	ldrb.w	r3, [sp, #515]	; 0x203
    153e:	2bbc      	cmp	r3, #188	; 0xbc
    1540:	d150      	bne.n	15e4 <bootutil_cmp_rsasig+0xcc>
     *
     * 8emLen - emBits is zero, so there is nothing to test here.
     */

    /* Step 7.  let dbMask = MGF(H, emLen - hLen - 1). */
    pss_mgf1(db_mask, &em[PSS_HASH_OFFSET]);
    1542:	f20d 11e3 	addw	r1, sp, #483	; 0x1e3
    1546:	a809      	add	r0, sp, #36	; 0x24
    1548:	f003 fb8f 	bl	4c6a <pss_mgf1>

    /* Step 8.  let DB = maskedDB xor dbMask.
     * To avoid needing an additional buffer, store the 'db' in the
     * same buffer as db_mask.  From now, to the end of this function,
     * db_mask refers to the unmasked 'db'. */
    for (i = 0; i < PSS_MASK_LEN; i++) {
    154c:	462b      	mov	r3, r5
    154e:	2bde      	cmp	r3, #222	; 0xde
    1550:	dc07      	bgt.n	1562 <bootutil_cmp_rsasig+0x4a>
        db_mask[i] ^= em[i];
    1552:	aa41      	add	r2, sp, #260	; 0x104
    1554:	5cd2      	ldrb	r2, [r2, r3]
    1556:	a809      	add	r0, sp, #36	; 0x24
    1558:	5cc4      	ldrb	r4, [r0, r3]
    155a:	4062      	eors	r2, r4
    155c:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < PSS_MASK_LEN; i++) {
    155e:	3301      	adds	r3, #1
    1560:	e7f5      	b.n	154e <bootutil_cmp_rsasig+0x36>

    /* Step 9.  Set the leftmost 8emLen - emBits bits of the leftmost
     * octet in DB to zero.
     * pycrypto seems to always make the emBits 2047, so we need to
     * clear the top bit. */
    db_mask[0] &= 0x7F;
    1562:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    1566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    156a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

    /* Step 10.  If the emLen - hLen - sLen - 2 leftmost octets of DB
     * are not zero or if the octet at position emLen - hLen - sLen -
     * 1 (the leftmost position is "position 1") does not have
     * hexadecimal value 0x01, output "inconsistent" and stop. */
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
    156e:	2dbd      	cmp	r5, #189	; 0xbd
    1570:	dc05      	bgt.n	157e <bootutil_cmp_rsasig+0x66>
        if (db_mask[i] != 0) {
    1572:	ab09      	add	r3, sp, #36	; 0x24
    1574:	5d5b      	ldrb	r3, [r3, r5]
    1576:	2b00      	cmp	r3, #0
    1578:	d137      	bne.n	15ea <bootutil_cmp_rsasig+0xd2>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
    157a:	3501      	adds	r5, #1
    157c:	e7f7      	b.n	156e <bootutil_cmp_rsasig+0x56>
            return -1;
        }
    }

    if (db_mask[PSS_MASK_ONE_POS] != 1) {
    157e:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
    1582:	2b01      	cmp	r3, #1
    1584:	d137      	bne.n	15f6 <bootutil_cmp_rsasig+0xde>
    mbedtls_sha256_init(ctx);
    1586:	a881      	add	r0, sp, #516	; 0x204
    1588:	f006 f906 	bl	7798 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    158c:	2100      	movs	r1, #0
    158e:	a881      	add	r0, sp, #516	; 0x204
    1590:	f001 ff2c 	bl	33ec <mbedtls_sha256_starts_ret>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    1594:	2208      	movs	r2, #8
    1596:	4919      	ldr	r1, [pc, #100]	; (15fc <bootutil_cmp_rsasig+0xe4>)
    1598:	a881      	add	r0, sp, #516	; 0x204
    159a:	f006 f903 	bl	77a4 <mbedtls_sha256_update_ret>
    159e:	2220      	movs	r2, #32
    15a0:	4631      	mov	r1, r6
    15a2:	a881      	add	r0, sp, #516	; 0x204
    15a4:	f006 f8fe 	bl	77a4 <mbedtls_sha256_update_ret>
    15a8:	2220      	movs	r2, #32
    15aa:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
    15ae:	a881      	add	r0, sp, #516	; 0x204
    15b0:	f006 f8f8 	bl	77a4 <mbedtls_sha256_update_ret>
    (void)mbedtls_sha256_finish_ret(ctx, output);
    15b4:	a901      	add	r1, sp, #4
    15b6:	a881      	add	r0, sp, #516	; 0x204
    15b8:	f006 f937 	bl	782a <mbedtls_sha256_finish_ret>
    bootutil_sha256_update(&shactx, &db_mask[PSS_MASK_SALT_POS], PSS_SLEN);
    bootutil_sha256_finish(&shactx, h2);

    /* Step 14.  If H = H', output "consistent".  Otherwise, output
     * "inconsistent". */
    if (memcmp(h2, &em[PSS_HASH_OFFSET], PSS_HLEN) != 0) {
    15bc:	2220      	movs	r2, #32
    15be:	f20d 11e3 	addw	r1, sp, #483	; 0x1e3
    15c2:	a801      	add	r0, sp, #4
    15c4:	f004 f9e9 	bl	599a <memcmp>
    15c8:	4603      	mov	r3, r0
    15ca:	b180      	cbz	r0, 15ee <bootutil_cmp_rsasig+0xd6>
        return -1;
    15cc:	f04f 33ff 	mov.w	r3, #4294967295
    15d0:	e00d      	b.n	15ee <bootutil_cmp_rsasig+0xd6>
        return -1;
    15d2:	f04f 33ff 	mov.w	r3, #4294967295
    15d6:	e00a      	b.n	15ee <bootutil_cmp_rsasig+0xd6>
        return -1;
    15d8:	f04f 33ff 	mov.w	r3, #4294967295
    15dc:	e007      	b.n	15ee <bootutil_cmp_rsasig+0xd6>
        return -1;
    15de:	f04f 33ff 	mov.w	r3, #4294967295
    15e2:	e004      	b.n	15ee <bootutil_cmp_rsasig+0xd6>
        return -1;
    15e4:	f04f 33ff 	mov.w	r3, #4294967295
    15e8:	e001      	b.n	15ee <bootutil_cmp_rsasig+0xd6>
            return -1;
    15ea:	f04f 33ff 	mov.w	r3, #4294967295
    }

    return 0;
}
    15ee:	4618      	mov	r0, r3
    15f0:	f50d 7d1c 	add.w	sp, sp, #624	; 0x270
    15f4:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
    15f6:	f04f 33ff 	mov.w	r3, #4294967295
    15fa:	e7f8      	b.n	15ee <bootutil_cmp_rsasig+0xd6>
    15fc:	000082ac 	.word	0x000082ac

00001600 <bootutil_verify_sig>:

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
    1600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1604:	b0ac      	sub	sp, #176	; 0xb0
    1606:	4606      	mov	r6, r0
    1608:	460f      	mov	r7, r1
    160a:	4690      	mov	r8, r2
    160c:	461d      	mov	r5, r3
    160e:	f89d 40c8 	ldrb.w	r4, [sp, #200]	; 0xc8
    mbedtls_rsa_context ctx;
    int rc;
    uint8_t *cp;
    uint8_t *end;

    mbedtls_rsa_init(&ctx, 0, 0);
    1612:	2200      	movs	r2, #0
    1614:	4611      	mov	r1, r2
    1616:	a801      	add	r0, sp, #4
    1618:	f006 f878 	bl	770c <mbedtls_rsa_init>

    cp = (uint8_t *)bootutil_keys[key_id].key;
    161c:	4b11      	ldr	r3, [pc, #68]	; (1664 <bootutil_verify_sig+0x64>)
    161e:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    1622:	9200      	str	r2, [sp, #0]
    end = cp + *bootutil_keys[key_id].len;
    1624:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    1628:	685b      	ldr	r3, [r3, #4]
    162a:	681b      	ldr	r3, [r3, #0]

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    162c:	441a      	add	r2, r3
    162e:	4669      	mov	r1, sp
    1630:	a801      	add	r0, sp, #4
    1632:	f003 fac8 	bl	4bc6 <bootutil_parse_rsakey>
    if (rc || slen != ctx.len) {
    1636:	4604      	mov	r4, r0
    1638:	b910      	cbnz	r0, 1640 <bootutil_verify_sig+0x40>
    163a:	9b02      	ldr	r3, [sp, #8]
    163c:	42ab      	cmp	r3, r5
    163e:	d006      	beq.n	164e <bootutil_verify_sig+0x4e>
        mbedtls_rsa_free(&ctx);
    1640:	a801      	add	r0, sp, #4
    1642:	f006 f871 	bl	7728 <mbedtls_rsa_free>
    }
    rc = bootutil_cmp_rsasig(&ctx, hash, hlen, sig);
    mbedtls_rsa_free(&ctx);

    return rc;
}
    1646:	4620      	mov	r0, r4
    1648:	b02c      	add	sp, #176	; 0xb0
    164a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = bootutil_cmp_rsasig(&ctx, hash, hlen, sig);
    164e:	4643      	mov	r3, r8
    1650:	463a      	mov	r2, r7
    1652:	4631      	mov	r1, r6
    1654:	a801      	add	r0, sp, #4
    1656:	f7ff ff5f 	bl	1518 <bootutil_cmp_rsasig>
    165a:	4604      	mov	r4, r0
    mbedtls_rsa_free(&ctx);
    165c:	a801      	add	r0, sp, #4
    165e:	f006 f863 	bl	7728 <mbedtls_rsa_free>
    return rc;
    1662:	e7f0      	b.n	1646 <bootutil_verify_sig+0x46>
    1664:	00007fc0 	.word	0x00007fc0

00001668 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    1668:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    166a:	680b      	ldr	r3, [r1, #0]
    166c:	3301      	adds	r3, #1
    166e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1670:	4b01      	ldr	r3, [pc, #4]	; (1678 <char_out+0x10>)
    1672:	681b      	ldr	r3, [r3, #0]
    1674:	4798      	blx	r3
}
    1676:	bd08      	pop	{r3, pc}
    1678:	20005734 	.word	0x20005734

0000167c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    167c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1680:	b083      	sub	sp, #12
    1682:	4682      	mov	sl, r0
    1684:	9101      	str	r1, [sp, #4]
    1686:	4615      	mov	r5, r2
    1688:	469b      	mov	fp, r3
    168a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	if (sizeof(long) == 8) {
		pos *= 10000000000;
	}

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    168e:	f1b9 0f00 	cmp.w	r9, #0
    1692:	dd2c      	ble.n	16ee <_printk_dec_ulong+0x72>
		min_width = 1;
    1694:	f04f 0801 	mov.w	r8, #1
    1698:	260a      	movs	r6, #10
    169a:	2700      	movs	r7, #0
    169c:	4c21      	ldr	r4, [pc, #132]	; (1724 <_printk_dec_ulong+0xa8>)
    169e:	e010      	b.n	16c2 <_printk_dec_ulong+0x46>
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    16a0:	fbb5 f0f4 	udiv	r0, r5, r4
    16a4:	9901      	ldr	r1, [sp, #4]
    16a6:	3030      	adds	r0, #48	; 0x30
    16a8:	47d0      	blx	sl
			digits++;
    16aa:	f108 0801 	add.w	r8, r8, #1
			found_largest_digit = 1;
    16ae:	2701      	movs	r7, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    16b0:	3e01      	subs	r6, #1
		remainder %= pos;
    16b2:	fbb5 f3f4 	udiv	r3, r5, r4
    16b6:	fb04 5513 	mls	r5, r4, r3, r5
		pos /= 10;
    16ba:	4b1b      	ldr	r3, [pc, #108]	; (1728 <_printk_dec_ulong+0xac>)
    16bc:	fba3 3404 	umull	r3, r4, r3, r4
    16c0:	08e4      	lsrs	r4, r4, #3
	while (pos >= 10) {
    16c2:	2c09      	cmp	r4, #9
    16c4:	d916      	bls.n	16f4 <_printk_dec_ulong+0x78>
		if (found_largest_digit != 0 || remainder >= pos) {
    16c6:	2f00      	cmp	r7, #0
    16c8:	d1ea      	bne.n	16a0 <_printk_dec_ulong+0x24>
    16ca:	42ac      	cmp	r4, r5
    16cc:	d9e8      	bls.n	16a0 <_printk_dec_ulong+0x24>
		} else if (remaining <= min_width
    16ce:	454e      	cmp	r6, r9
    16d0:	dcee      	bgt.n	16b0 <_printk_dec_ulong+0x34>
				&& padding < PAD_SPACE_AFTER) {
    16d2:	f1bb 0f02 	cmp.w	fp, #2
    16d6:	d8eb      	bhi.n	16b0 <_printk_dec_ulong+0x34>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    16d8:	f1bb 0f01 	cmp.w	fp, #1
    16dc:	d005      	beq.n	16ea <_printk_dec_ulong+0x6e>
    16de:	2020      	movs	r0, #32
    16e0:	9901      	ldr	r1, [sp, #4]
    16e2:	47d0      	blx	sl
			digits++;
    16e4:	f108 0801 	add.w	r8, r8, #1
    16e8:	e7e2      	b.n	16b0 <_printk_dec_ulong+0x34>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    16ea:	2030      	movs	r0, #48	; 0x30
    16ec:	e7f8      	b.n	16e0 <_printk_dec_ulong+0x64>
		min_width = 1;
    16ee:	f04f 0901 	mov.w	r9, #1
    16f2:	e7cf      	b.n	1694 <_printk_dec_ulong+0x18>
	}
	out((int)(remainder + 48), ctx);
    16f4:	9901      	ldr	r1, [sp, #4]
    16f6:	f105 0030 	add.w	r0, r5, #48	; 0x30
    16fa:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    16fc:	f1bb 0f03 	cmp.w	fp, #3
    1700:	d002      	beq.n	1708 <_printk_dec_ulong+0x8c>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    1702:	b003      	add	sp, #12
    1704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
    1708:	eba9 0808 	sub.w	r8, r9, r8
		while (remaining-- > 0) {
    170c:	e003      	b.n	1716 <_printk_dec_ulong+0x9a>
			out(' ', ctx);
    170e:	9901      	ldr	r1, [sp, #4]
    1710:	2020      	movs	r0, #32
    1712:	47d0      	blx	sl
		while (remaining-- > 0) {
    1714:	46a0      	mov	r8, r4
    1716:	f108 34ff 	add.w	r4, r8, #4294967295
    171a:	f1b8 0f00 	cmp.w	r8, #0
    171e:	dcf6      	bgt.n	170e <_printk_dec_ulong+0x92>
    1720:	e7ef      	b.n	1702 <_printk_dec_ulong+0x86>
    1722:	bf00      	nop
    1724:	3b9aca00 	.word	0x3b9aca00
    1728:	cccccccd 	.word	0xcccccccd

0000172c <__printk_hook_install>:
	_char_out = fn;
    172c:	4b01      	ldr	r3, [pc, #4]	; (1734 <__printk_hook_install+0x8>)
    172e:	6018      	str	r0, [r3, #0]
}
    1730:	4770      	bx	lr
    1732:	bf00      	nop
    1734:	20005734 	.word	0x20005734

00001738 <vprintk>:
{
    1738:	b500      	push	{lr}
    173a:	b083      	sub	sp, #12
	struct out_context ctx = { 0 };
    173c:	2300      	movs	r3, #0
    173e:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    1740:	460b      	mov	r3, r1
    1742:	4602      	mov	r2, r0
    1744:	a901      	add	r1, sp, #4
    1746:	4803      	ldr	r0, [pc, #12]	; (1754 <vprintk+0x1c>)
    1748:	f003 fc31 	bl	4fae <z_vprintk>
}
    174c:	b003      	add	sp, #12
    174e:	f85d fb04 	ldr.w	pc, [sp], #4
    1752:	bf00      	nop
    1754:	00001669 	.word	0x00001669

00001758 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    1758:	f04f 0220 	mov.w	r2, #32
    175c:	f3ef 8311 	mrs	r3, BASEPRI
    1760:	f382 8811 	msr	BASEPRI, r2
    1764:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1768:	4a04      	ldr	r2, [pc, #16]	; (177c <nordicsemi_nrf91_init+0x24>)
    176a:	2101      	movs	r1, #1
    176c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1770:	f383 8811 	msr	BASEPRI, r3
    1774:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1778:	2000      	movs	r0, #0
    177a:	4770      	bx	lr
    177c:	50039000 	.word	0x50039000

00001780 <log_generic>:

	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap)
{
    1780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1784:	b083      	sub	sp, #12
    1786:	4680      	mov	r8, r0
    1788:	460f      	mov	r7, r1
    178a:	4616      	mov	r6, r2
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else  if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		u32_t timestamp = timestamp_func();
    178c:	4b11      	ldr	r3, [pc, #68]	; (17d4 <log_generic+0x54>)
    178e:	681b      	ldr	r3, [r3, #0]
    1790:	4798      	blx	r3
    1792:	4681      	mov	r9, r0

		for (int i = 0; i < log_backend_count_get(); i++) {
    1794:	2400      	movs	r4, #0
    1796:	e000      	b.n	179a <log_generic+0x1a>
    1798:	3401      	adds	r4, #1
    179a:	4b0f      	ldr	r3, [pc, #60]	; (17d8 <log_generic+0x58>)
    179c:	4a0f      	ldr	r2, [pc, #60]	; (17dc <log_generic+0x5c>)
    179e:	1a9b      	subs	r3, r3, r2
    17a0:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    17a4:	da12      	bge.n	17cc <log_generic+0x4c>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(u32_t idx)
{
	return &__log_backends_start[idx];
    17a6:	480d      	ldr	r0, [pc, #52]	; (17dc <log_generic+0x5c>)
    17a8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    17ac:	6843      	ldr	r3, [r0, #4]
    17ae:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);

			if (log_backend_is_active(backend)) {
    17b0:	2b00      	cmp	r3, #0
    17b2:	d0f1      	beq.n	1798 <log_generic+0x18>
	if (backend->api->put_sync_string) {
    17b4:	0123      	lsls	r3, r4, #4
    17b6:	4a09      	ldr	r2, [pc, #36]	; (17dc <log_generic+0x5c>)
    17b8:	58d3      	ldr	r3, [r2, r3]
    17ba:	685d      	ldr	r5, [r3, #4]
    17bc:	2d00      	cmp	r5, #0
    17be:	d0eb      	beq.n	1798 <log_generic+0x18>
		backend->api->put_sync_string(backend, src_level,
    17c0:	9600      	str	r6, [sp, #0]
    17c2:	463b      	mov	r3, r7
    17c4:	464a      	mov	r2, r9
    17c6:	4641      	mov	r1, r8
    17c8:	47a8      	blx	r5
    17ca:	e7e5      	b.n	1798 <log_generic+0x18>
			args[i] = va_arg(ap, log_arg_t);
		}

		log_n(fmt, args, nargs, src_level);
	}
}
    17cc:	b003      	add	sp, #12
    17ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    17d2:	bf00      	nop
    17d4:	20005738 	.word	0x20005738
    17d8:	00007e88 	.word	0x00007e88
    17dc:	00007e78 	.word	0x00007e78

000017e0 <log_core_init>:
	 */
	return k_cycle_get_32();
}

void log_core_init(void)
{
    17e0:	b508      	push	{r3, lr}
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
    17e2:	4b04      	ldr	r3, [pc, #16]	; (17f4 <log_core_init+0x14>)
    17e4:	4a04      	ldr	r2, [pc, #16]	; (17f8 <log_core_init+0x18>)
    17e6:	601a      	str	r2, [r3, #0]
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
    17e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    17ec:	f000 fa08 	bl	1c00 <log_output_timestamp_freq_set>
			LOG_FILTER_SLOT_SET(filters,
					    LOG_FILTER_AGGR_SLOT_IDX,
					    level);
		}
	}
}
    17f0:	bd08      	pop	{r3, pc}
    17f2:	bf00      	nop
    17f4:	20005738 	.word	0x20005738
    17f8:	00005319 	.word	0x00005319

000017fc <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(u32_t domain_id, u32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    17fc:	4b05      	ldr	r3, [pc, #20]	; (1814 <log_source_name_get+0x18>)
    17fe:	4a06      	ldr	r2, [pc, #24]	; (1818 <log_source_name_get+0x1c>)
    1800:	1a9b      	subs	r3, r3, r2
    1802:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    1806:	d202      	bcs.n	180e <log_source_name_get+0x12>
 * @param source_id Source ID.
 * @return Name.
 */
static inline const char *log_name_get(u32_t source_id)
{
	return __log_const_start[source_id].name;
    1808:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    180c:	4770      	bx	lr
    180e:	2000      	movs	r0, #0
}
    1810:	4770      	bx	lr
    1812:	bf00      	nop
    1814:	00007e78 	.word	0x00007e78
    1818:	00007e48 	.word	0x00007e48

0000181c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			u32_t level)
{
    181c:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	u32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    181e:	4b0b      	ldr	r3, [pc, #44]	; (184c <log_backend_enable+0x30>)
    1820:	1ac3      	subs	r3, r0, r3
    1822:	111b      	asrs	r3, r3, #4
    1824:	3301      	adds	r3, #1
	backend->cb->id = id;
    1826:	6842      	ldr	r2, [r0, #4]
    1828:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    182a:	6843      	ldr	r3, [r0, #4]
    182c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    182e:	6843      	ldr	r3, [r0, #4]
    1830:	2201      	movs	r2, #1
    1832:	715a      	strb	r2, [r3, #5]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
    1834:	4b06      	ldr	r3, [pc, #24]	; (1850 <log_backend_enable+0x34>)
    1836:	781b      	ldrb	r3, [r3, #0]
    1838:	b11b      	cbz	r3, 1842 <log_backend_enable+0x26>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    183a:	4b05      	ldr	r3, [pc, #20]	; (1850 <log_backend_enable+0x34>)
    183c:	2201      	movs	r2, #1
    183e:	701a      	strb	r2, [r3, #0]
}
    1840:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1842:	4804      	ldr	r0, [pc, #16]	; (1854 <log_backend_enable+0x38>)
    1844:	f002 fd06 	bl	4254 <z_impl_k_sem_give>
    1848:	e7f7      	b.n	183a <log_backend_enable+0x1e>
    184a:	bf00      	nop
    184c:	00007e78 	.word	0x00007e78
    1850:	20002724 	.word	0x20002724
    1854:	20005810 	.word	0x20005810

00001858 <log_init>:
{
    1858:	b538      	push	{r3, r4, r5, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    185a:	4b13      	ldr	r3, [pc, #76]	; (18a8 <log_init+0x50>)
    185c:	e8d3 2fef 	ldaex	r2, [r3]
    1860:	1c51      	adds	r1, r2, #1
    1862:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1866:	2800      	cmp	r0, #0
    1868:	d1f8      	bne.n	185c <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    186a:	b9da      	cbnz	r2, 18a4 <log_init+0x4c>
	for (i = 0; i < log_backend_count_get(); i++) {
    186c:	2400      	movs	r4, #0
    186e:	e005      	b.n	187c <log_init+0x24>
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    1870:	2204      	movs	r2, #4
    1872:	2100      	movs	r1, #0
    1874:	4628      	mov	r0, r5
    1876:	f7ff ffd1 	bl	181c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    187a:	3401      	adds	r4, #1
    187c:	4b0b      	ldr	r3, [pc, #44]	; (18ac <log_init+0x54>)
    187e:	4a0c      	ldr	r2, [pc, #48]	; (18b0 <log_init+0x58>)
    1880:	1a9b      	subs	r3, r3, r2
    1882:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1886:	da0d      	bge.n	18a4 <log_init+0x4c>
	return &__log_backends_start[idx];
    1888:	4d09      	ldr	r5, [pc, #36]	; (18b0 <log_init+0x58>)
    188a:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    188e:	7b2b      	ldrb	r3, [r5, #12]
    1890:	2b00      	cmp	r3, #0
    1892:	d0f2      	beq.n	187a <log_init+0x22>
			if (backend->api->init != NULL) {
    1894:	0123      	lsls	r3, r4, #4
    1896:	4a06      	ldr	r2, [pc, #24]	; (18b0 <log_init+0x58>)
    1898:	58d3      	ldr	r3, [r2, r3]
    189a:	695b      	ldr	r3, [r3, #20]
    189c:	2b00      	cmp	r3, #0
    189e:	d0e7      	beq.n	1870 <log_init+0x18>
				backend->api->init();
    18a0:	4798      	blx	r3
    18a2:	e7e5      	b.n	1870 <log_init+0x18>
}
    18a4:	bd38      	pop	{r3, r4, r5, pc}
    18a6:	bf00      	nop
    18a8:	20002570 	.word	0x20002570
    18ac:	00007e88 	.word	0x00007e88
    18b0:	00007e78 	.word	0x00007e78

000018b4 <z_impl_log_panic>:
	if (panic_mode) {
    18b4:	4b10      	ldr	r3, [pc, #64]	; (18f8 <z_impl_log_panic+0x44>)
    18b6:	781b      	ldrb	r3, [r3, #0]
    18b8:	b103      	cbz	r3, 18bc <z_impl_log_panic+0x8>
    18ba:	4770      	bx	lr
{
    18bc:	b510      	push	{r4, lr}
	log_init();
    18be:	f7ff ffcb 	bl	1858 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    18c2:	2400      	movs	r4, #0
    18c4:	e000      	b.n	18c8 <z_impl_log_panic+0x14>
    18c6:	3401      	adds	r4, #1
    18c8:	4b0c      	ldr	r3, [pc, #48]	; (18fc <z_impl_log_panic+0x48>)
    18ca:	4a0d      	ldr	r2, [pc, #52]	; (1900 <z_impl_log_panic+0x4c>)
    18cc:	1a9b      	subs	r3, r3, r2
    18ce:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    18d2:	da0c      	bge.n	18ee <z_impl_log_panic+0x3a>
    18d4:	480a      	ldr	r0, [pc, #40]	; (1900 <z_impl_log_panic+0x4c>)
    18d6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    18da:	6843      	ldr	r3, [r0, #4]
    18dc:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    18de:	2b00      	cmp	r3, #0
    18e0:	d0f1      	beq.n	18c6 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    18e2:	0123      	lsls	r3, r4, #4
    18e4:	4a06      	ldr	r2, [pc, #24]	; (1900 <z_impl_log_panic+0x4c>)
    18e6:	58d3      	ldr	r3, [r2, r3]
    18e8:	691b      	ldr	r3, [r3, #16]
    18ea:	4798      	blx	r3
    18ec:	e7eb      	b.n	18c6 <z_impl_log_panic+0x12>
	panic_mode = true;
    18ee:	4b02      	ldr	r3, [pc, #8]	; (18f8 <z_impl_log_panic+0x44>)
    18f0:	2201      	movs	r2, #1
    18f2:	701a      	strb	r2, [r3, #0]
}
    18f4:	bd10      	pop	{r4, pc}
    18f6:	bf00      	nop
    18f8:	20002725 	.word	0x20002725
    18fc:	00007e88 	.word	0x00007e88
    1900:	00007e78 	.word	0x00007e78

00001904 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    1904:	b40e      	push	{r1, r2, r3}
    1906:	b500      	push	{lr}
    1908:	b082      	sub	sp, #8
    190a:	ab03      	add	r3, sp, #12
    190c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1910:	9301      	str	r3, [sp, #4]
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    1912:	4601      	mov	r1, r0
    1914:	4804      	ldr	r0, [pc, #16]	; (1928 <print_formatted+0x24>)
    1916:	f003 fb4a 	bl	4fae <z_vprintk>
#endif
	va_end(args);

	return length;
}
    191a:	2000      	movs	r0, #0
    191c:	b002      	add	sp, #8
    191e:	f85d eb04 	ldr.w	lr, [sp], #4
    1922:	b003      	add	sp, #12
    1924:	4770      	bx	lr
    1926:	bf00      	nop
    1928:	00005347 	.word	0x00005347

0000192c <timestamp_print>:
	log_output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *log_output,
			   u32_t flags, u32_t timestamp)
{
    192c:	b5f0      	push	{r4, r5, r6, r7, lr}
    192e:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    1930:	f011 0f44 	tst.w	r1, #68	; 0x44
    1934:	d005      	beq.n	1942 <timestamp_print+0x16>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    1936:	4b1a      	ldr	r3, [pc, #104]	; (19a0 <timestamp_print+0x74>)
    1938:	6819      	ldr	r1, [r3, #0]
    193a:	b931      	cbnz	r1, 194a <timestamp_print+0x1e>
			length = print_formatted(log_output,
						 "[%02d:%02d:%02d.%03d,%03d] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    193c:	2000      	movs	r0, #0
	}

	return length;
}
    193e:	b005      	add	sp, #20
    1940:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    1942:	4918      	ldr	r1, [pc, #96]	; (19a4 <timestamp_print+0x78>)
    1944:	f7ff ffde 	bl	1904 <print_formatted>
    1948:	e7f9      	b.n	193e <timestamp_print+0x12>
		timestamp /= timestamp_div;
    194a:	4b17      	ldr	r3, [pc, #92]	; (19a8 <timestamp_print+0x7c>)
    194c:	681d      	ldr	r5, [r3, #0]
    194e:	fbb2 f5f5 	udiv	r5, r2, r5
		seconds = timestamp / freq;
    1952:	fbb5 f4f1 	udiv	r4, r5, r1
		hours = seconds / 3600U;
    1956:	4a15      	ldr	r2, [pc, #84]	; (19ac <timestamp_print+0x80>)
    1958:	fba2 3204 	umull	r3, r2, r2, r4
    195c:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    195e:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    1962:	fb06 4612 	mls	r6, r6, r2, r4
		mins = seconds / 60U;
    1966:	4b12      	ldr	r3, [pc, #72]	; (19b0 <timestamp_print+0x84>)
    1968:	fba3 7306 	umull	r7, r3, r3, r6
    196c:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    196e:	fb01 5414 	mls	r4, r1, r4, r5
		ms = (remainder * 1000U) / freq;
    1972:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    1976:	fb05 f404 	mul.w	r4, r5, r4
    197a:	fbb4 f7f1 	udiv	r7, r4, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    197e:	fb07 4411 	mls	r4, r7, r1, r4
    1982:	fb05 f404 	mul.w	r4, r5, r4
    1986:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    198a:	9102      	str	r1, [sp, #8]
    198c:	9701      	str	r7, [sp, #4]
    198e:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    1992:	00a1      	lsls	r1, r4, #2
    1994:	1a71      	subs	r1, r6, r1
    1996:	9100      	str	r1, [sp, #0]
    1998:	4906      	ldr	r1, [pc, #24]	; (19b4 <timestamp_print+0x88>)
    199a:	f7ff ffb3 	bl	1904 <print_formatted>
    199e:	e7ce      	b.n	193e <timestamp_print+0x12>
    19a0:	20002574 	.word	0x20002574
    19a4:	00008450 	.word	0x00008450
    19a8:	20002578 	.word	0x20002578
    19ac:	91a2b3c5 	.word	0x91a2b3c5
    19b0:	88888889 	.word	0x88888889
    19b4:	0000845c 	.word	0x0000845c

000019b8 <color_print>:

static void color_print(const struct log_output *log_output,
			bool color, bool start, u32_t level)
{
	if (color) {
    19b8:	b161      	cbz	r1, 19d4 <color_print+0x1c>
{
    19ba:	b508      	push	{r3, lr}
		const char *color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    19bc:	b12a      	cbz	r2, 19ca <color_print+0x12>
		const char *color = start && (colors[level] != NULL) ?
    19be:	4a06      	ldr	r2, [pc, #24]	; (19d8 <color_print+0x20>)
    19c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    19c4:	b912      	cbnz	r2, 19cc <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    19c6:	4a05      	ldr	r2, [pc, #20]	; (19dc <color_print+0x24>)
    19c8:	e000      	b.n	19cc <color_print+0x14>
    19ca:	4a04      	ldr	r2, [pc, #16]	; (19dc <color_print+0x24>)
		print_formatted(log_output, "%s", color);
    19cc:	4904      	ldr	r1, [pc, #16]	; (19e0 <color_print+0x28>)
    19ce:	f7ff ff99 	bl	1904 <print_formatted>
	}
}
    19d2:	bd08      	pop	{r3, pc}
    19d4:	4770      	bx	lr
    19d6:	bf00      	nop
    19d8:	000083d8 	.word	0x000083d8
    19dc:	000083cc 	.word	0x000083cc
    19e0:	000083d4 	.word	0x000083d4

000019e4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    19e4:	f011 0f10 	tst.w	r1, #16
    19e8:	d10b      	bne.n	1a02 <newline_print+0x1e>
{
    19ea:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    19ec:	f011 0f20 	tst.w	r1, #32
    19f0:	d003      	beq.n	19fa <newline_print+0x16>
		print_formatted(ctx, "\n");
    19f2:	4904      	ldr	r1, [pc, #16]	; (1a04 <newline_print+0x20>)
    19f4:	f7ff ff86 	bl	1904 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    19f8:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    19fa:	4903      	ldr	r1, [pc, #12]	; (1a08 <newline_print+0x24>)
    19fc:	f7ff ff82 	bl	1904 <print_formatted>
    1a00:	e7fa      	b.n	19f8 <newline_print+0x14>
    1a02:	4770      	bx	lr
    1a04:	00008618 	.word	0x00008618
    1a08:	00008414 	.word	0x00008414

00001a0c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *log_output,
			       const u8_t *data, u32_t length,
			       int prefix_offset, u32_t flags)
{
    1a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a10:	4605      	mov	r5, r0
    1a12:	460f      	mov	r7, r1
    1a14:	4616      	mov	r6, r2
    1a16:	4698      	mov	r8, r3
	newline_print(log_output, flags);
    1a18:	9906      	ldr	r1, [sp, #24]
    1a1a:	f7ff ffe3 	bl	19e4 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    1a1e:	2400      	movs	r4, #0
    1a20:	e004      	b.n	1a2c <hexdump_line_print+0x20>
		print_formatted(log_output, " ");
    1a22:	4924      	ldr	r1, [pc, #144]	; (1ab4 <hexdump_line_print+0xa8>)
    1a24:	4628      	mov	r0, r5
    1a26:	f7ff ff6d 	bl	1904 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1a2a:	3401      	adds	r4, #1
    1a2c:	4544      	cmp	r4, r8
    1a2e:	dbf8      	blt.n	1a22 <hexdump_line_print+0x16>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a30:	2400      	movs	r4, #0
    1a32:	e009      	b.n	1a48 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
    1a34:	491f      	ldr	r1, [pc, #124]	; (1ab4 <hexdump_line_print+0xa8>)
    1a36:	4628      	mov	r0, r5
    1a38:	f7ff ff64 	bl	1904 <print_formatted>
    1a3c:	e00b      	b.n	1a56 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(log_output, "%02x ", data[i]);
		} else {
			print_formatted(log_output, "   ");
    1a3e:	491e      	ldr	r1, [pc, #120]	; (1ab8 <hexdump_line_print+0xac>)
    1a40:	4628      	mov	r0, r5
    1a42:	f7ff ff5f 	bl	1904 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a46:	3401      	adds	r4, #1
    1a48:	2c0f      	cmp	r4, #15
    1a4a:	dc0c      	bgt.n	1a66 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    1a4c:	2c00      	cmp	r4, #0
    1a4e:	dd02      	ble.n	1a56 <hexdump_line_print+0x4a>
    1a50:	f014 0f07 	tst.w	r4, #7
    1a54:	d0ee      	beq.n	1a34 <hexdump_line_print+0x28>
		if (i < length) {
    1a56:	42b4      	cmp	r4, r6
    1a58:	d2f1      	bcs.n	1a3e <hexdump_line_print+0x32>
			print_formatted(log_output, "%02x ", data[i]);
    1a5a:	5d3a      	ldrb	r2, [r7, r4]
    1a5c:	4917      	ldr	r1, [pc, #92]	; (1abc <hexdump_line_print+0xb0>)
    1a5e:	4628      	mov	r0, r5
    1a60:	f7ff ff50 	bl	1904 <print_formatted>
    1a64:	e7ef      	b.n	1a46 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(log_output, "|");
    1a66:	4916      	ldr	r1, [pc, #88]	; (1ac0 <hexdump_line_print+0xb4>)
    1a68:	4628      	mov	r0, r5
    1a6a:	f7ff ff4b 	bl	1904 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a6e:	2400      	movs	r4, #0
    1a70:	e009      	b.n	1a86 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
    1a72:	4910      	ldr	r1, [pc, #64]	; (1ab4 <hexdump_line_print+0xa8>)
    1a74:	4628      	mov	r0, r5
    1a76:	f7ff ff45 	bl	1904 <print_formatted>
    1a7a:	e00b      	b.n	1a94 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(log_output, "%c",
    1a7c:	4911      	ldr	r1, [pc, #68]	; (1ac4 <hexdump_line_print+0xb8>)
    1a7e:	4628      	mov	r0, r5
    1a80:	f7ff ff40 	bl	1904 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a84:	3401      	adds	r4, #1
    1a86:	2c0f      	cmp	r4, #15
    1a88:	dc12      	bgt.n	1ab0 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    1a8a:	2c00      	cmp	r4, #0
    1a8c:	dd02      	ble.n	1a94 <hexdump_line_print+0x88>
    1a8e:	f014 0f07 	tst.w	r4, #7
    1a92:	d0ee      	beq.n	1a72 <hexdump_line_print+0x66>
		if (i < length) {
    1a94:	42b4      	cmp	r4, r6
    1a96:	d206      	bcs.n	1aa6 <hexdump_line_print+0x9a>
			char c = (char)data[i];
    1a98:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    1a9a:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    1a9e:	2b5e      	cmp	r3, #94	; 0x5e
    1aa0:	d9ec      	bls.n	1a7c <hexdump_line_print+0x70>
    1aa2:	222e      	movs	r2, #46	; 0x2e
    1aa4:	e7ea      	b.n	1a7c <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(log_output, " ");
    1aa6:	4903      	ldr	r1, [pc, #12]	; (1ab4 <hexdump_line_print+0xa8>)
    1aa8:	4628      	mov	r0, r5
    1aaa:	f7ff ff2b 	bl	1904 <print_formatted>
    1aae:	e7e9      	b.n	1a84 <hexdump_line_print+0x78>
		}
	}
}
    1ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ab4:	00008410 	.word	0x00008410
    1ab8:	000083f4 	.word	0x000083f4
    1abc:	000083ec 	.word	0x000083ec
    1ac0:	000083f8 	.word	0x000083f8
    1ac4:	000083fc 	.word	0x000083fc

00001ac8 <ids_print>:
{
    1ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aca:	4604      	mov	r4, r0
    1acc:	4616      	mov	r6, r2
    1ace:	461f      	mov	r7, r3
	if (level_on) {
    1ad0:	b949      	cbnz	r1, 1ae6 <ids_print+0x1e>
	int total = 0;
    1ad2:	2500      	movs	r5, #0
	total += print_formatted(log_output,
    1ad4:	b186      	cbz	r6, 1af8 <ids_print+0x30>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1ad6:	2301      	movs	r3, #1
    1ad8:	9a07      	ldr	r2, [sp, #28]
    1ada:	4093      	lsls	r3, r2
				(func_on &&
    1adc:	f013 0f10 	tst.w	r3, #16
    1ae0:	d116      	bne.n	1b10 <ids_print+0x48>
	total += print_formatted(log_output,
    1ae2:	4e0c      	ldr	r6, [pc, #48]	; (1b14 <ids_print+0x4c>)
    1ae4:	e009      	b.n	1afa <ids_print+0x32>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    1ae6:	4b0c      	ldr	r3, [pc, #48]	; (1b18 <ids_print+0x50>)
    1ae8:	9a07      	ldr	r2, [sp, #28]
    1aea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1aee:	490b      	ldr	r1, [pc, #44]	; (1b1c <ids_print+0x54>)
    1af0:	f7ff ff08 	bl	1904 <print_formatted>
    1af4:	4605      	mov	r5, r0
    1af6:	e7ed      	b.n	1ad4 <ids_print+0xc>
	total += print_formatted(log_output,
    1af8:	4e06      	ldr	r6, [pc, #24]	; (1b14 <ids_print+0x4c>)
    1afa:	9906      	ldr	r1, [sp, #24]
    1afc:	4638      	mov	r0, r7
    1afe:	f7ff fe7d 	bl	17fc <log_source_name_get>
    1b02:	4602      	mov	r2, r0
    1b04:	4631      	mov	r1, r6
    1b06:	4620      	mov	r0, r4
    1b08:	f7ff fefc 	bl	1904 <print_formatted>
}
    1b0c:	4428      	add	r0, r5
    1b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	total += print_formatted(log_output,
    1b10:	4e03      	ldr	r6, [pc, #12]	; (1b20 <ids_print+0x58>)
    1b12:	e7f2      	b.n	1afa <ids_print+0x32>
    1b14:	00008400 	.word	0x00008400
    1b18:	0000841c 	.word	0x0000841c
    1b1c:	0000840c 	.word	0x0000840c
    1b20:	00008408 	.word	0x00008408

00001b24 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, u32_t timestamp,
		       const char *fmt, va_list ap, u32_t flags)
{
    1b24:	b570      	push	{r4, r5, r6, lr}
    1b26:	b084      	sub	sp, #16
    1b28:	4605      	mov	r5, r0
    1b2a:	461e      	mov	r6, r3
	int length;
	u8_t level = (u8_t)src_level.level;
	u8_t domain_id = (u8_t)src_level.domain_id;
    1b2c:	f3c1 03c2 	ubfx	r3, r1, #3, #3
	u16_t source_id = (u16_t)src_level.source_id;
    1b30:	f3c1 1089 	ubfx	r0, r1, #6, #10
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
    1b34:	f011 0407 	ands.w	r4, r1, #7
    1b38:	d10f      	bne.n	1b5a <log_output_string+0x36>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
    1b3a:	9b08      	ldr	r3, [sp, #32]
    1b3c:	4632      	mov	r2, r6
    1b3e:	4629      	mov	r1, r5
    1b40:	4810      	ldr	r0, [pc, #64]	; (1b84 <log_output_string+0x60>)
    1b42:	f003 fa34 	bl	4fae <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
    1b46:	b994      	cbnz	r4, 1b6e <log_output_string+0x4a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
    1b48:	4630      	mov	r0, r6
    1b4a:	f003 fc16 	bl	537a <ends_with_newline>
    1b4e:	b198      	cbz	r0, 1b78 <log_output_string+0x54>
			print_formatted(log_output, "\r");
    1b50:	490d      	ldr	r1, [pc, #52]	; (1b88 <log_output_string+0x64>)
    1b52:	4628      	mov	r0, r5
    1b54:	f7ff fed6 	bl	1904 <print_formatted>
    1b58:	e00e      	b.n	1b78 <log_output_string+0x54>
		prefix_print(log_output, flags, true, timestamp,
    1b5a:	9002      	str	r0, [sp, #8]
    1b5c:	9301      	str	r3, [sp, #4]
    1b5e:	9400      	str	r4, [sp, #0]
    1b60:	4613      	mov	r3, r2
    1b62:	2201      	movs	r2, #1
    1b64:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b66:	4628      	mov	r0, r5
    1b68:	f003 fc2a 	bl	53c0 <prefix_print>
    1b6c:	e7e5      	b.n	1b3a <log_output_string+0x16>
		}
	} else {
		postfix_print(log_output, flags, level);
    1b6e:	4622      	mov	r2, r4
    1b70:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b72:	4628      	mov	r0, r5
    1b74:	f003 fc18 	bl	53a8 <postfix_print>
	}

	log_output_flush(log_output);
    1b78:	4628      	mov	r0, r5
    1b7a:	f003 fc48 	bl	540e <log_output_flush>
}
    1b7e:	b004      	add	sp, #16
    1b80:	bd70      	pop	{r4, r5, r6, pc}
    1b82:	bf00      	nop
    1b84:	00005347 	.word	0x00005347
    1b88:	00008418 	.word	0x00008418

00001b8c <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, u32_t timestamp,
			     const char *metadata, const u8_t *data,
			     u32_t length, u32_t flags)
{
    1b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b90:	b084      	sub	sp, #16
    1b92:	4680      	mov	r8, r0
    1b94:	461d      	mov	r5, r3
    1b96:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    1b98:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    1b9a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	u32_t prefix_offset;
	u8_t level = (u8_t)src_level.level;
    1b9c:	f001 0a07 	and.w	sl, r1, #7
	u8_t domain_id = (u8_t)src_level.domain_id;
    1ba0:	f3c1 03c2 	ubfx	r3, r1, #3, #3
	u16_t source_id = (u16_t)src_level.source_id;
    1ba4:	f3c1 1189 	ubfx	r1, r1, #6, #10
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    1ba8:	9102      	str	r1, [sp, #8]
    1baa:	9301      	str	r3, [sp, #4]
    1bac:	f8cd a000 	str.w	sl, [sp]
    1bb0:	4613      	mov	r3, r2
    1bb2:	2201      	movs	r2, #1
    1bb4:	4639      	mov	r1, r7
    1bb6:	f003 fc03 	bl	53c0 <prefix_print>
    1bba:	4681      	mov	r9, r0
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
    1bbc:	462a      	mov	r2, r5
    1bbe:	490f      	ldr	r1, [pc, #60]	; (1bfc <log_output_hexdump+0x70>)
    1bc0:	4640      	mov	r0, r8
    1bc2:	f7ff fe9f 	bl	1904 <print_formatted>

	while (length) {
    1bc6:	b16c      	cbz	r4, 1be4 <log_output_hexdump+0x58>
		u32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
    1bc8:	4625      	mov	r5, r4
    1bca:	2c10      	cmp	r4, #16
    1bcc:	bf28      	it	cs
    1bce:	2510      	movcs	r5, #16
				HEXDUMP_BYTES_IN_LINE : length;

		hexdump_line_print(log_output, data, part_len,
    1bd0:	9700      	str	r7, [sp, #0]
    1bd2:	464b      	mov	r3, r9
    1bd4:	462a      	mov	r2, r5
    1bd6:	4631      	mov	r1, r6
    1bd8:	4640      	mov	r0, r8
    1bda:	f7ff ff17 	bl	1a0c <hexdump_line_print>
				   prefix_offset, flags);

		data += part_len;
    1bde:	442e      	add	r6, r5
		length -= part_len;
    1be0:	1b64      	subs	r4, r4, r5
    1be2:	e7f0      	b.n	1bc6 <log_output_hexdump+0x3a>
	};

	postfix_print(log_output, flags, level);
    1be4:	4652      	mov	r2, sl
    1be6:	4639      	mov	r1, r7
    1be8:	4640      	mov	r0, r8
    1bea:	f003 fbdd 	bl	53a8 <postfix_print>
	log_output_flush(log_output);
    1bee:	4640      	mov	r0, r8
    1bf0:	f003 fc0d 	bl	540e <log_output_flush>
}
    1bf4:	b004      	add	sp, #16
    1bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1bfa:	bf00      	nop
    1bfc:	000083d4 	.word	0x000083d4

00001c00 <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    1c00:	4b07      	ldr	r3, [pc, #28]	; (1c20 <log_output_timestamp_freq_set+0x20>)
    1c02:	2201      	movs	r2, #1
    1c04:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1c06:	4b07      	ldr	r3, [pc, #28]	; (1c24 <log_output_timestamp_freq_set+0x24>)
    1c08:	4298      	cmp	r0, r3
    1c0a:	d905      	bls.n	1c18 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    1c0c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1c0e:	4a04      	ldr	r2, [pc, #16]	; (1c20 <log_output_timestamp_freq_set+0x20>)
    1c10:	6813      	ldr	r3, [r2, #0]
    1c12:	005b      	lsls	r3, r3, #1
    1c14:	6013      	str	r3, [r2, #0]
    1c16:	e7f6      	b.n	1c06 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    1c18:	4b03      	ldr	r3, [pc, #12]	; (1c28 <log_output_timestamp_freq_set+0x28>)
    1c1a:	6018      	str	r0, [r3, #0]
}
    1c1c:	4770      	bx	lr
    1c1e:	bf00      	nop
    1c20:	20002578 	.word	0x20002578
    1c24:	000f4240 	.word	0x000f4240
    1c28:	20002574 	.word	0x20002574

00001c2c <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    1c2c:	b508      	push	{r3, lr}
    1c2e:	4803      	ldr	r0, [pc, #12]	; (1c3c <log_backend_uart_init+0x10>)
    1c30:	f002 f982 	bl	3f38 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    1c34:	4b02      	ldr	r3, [pc, #8]	; (1c40 <log_backend_uart_init+0x14>)
    1c36:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    1c38:	bd08      	pop	{r3, pc}
    1c3a:	bf00      	nop
    1c3c:	00008490 	.word	0x00008490
    1c40:	20002584 	.word	0x20002584

00001c44 <panic>:

static void panic(struct log_backend const *const backend)
{
    1c44:	b508      	push	{r3, lr}
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    1c46:	4802      	ldr	r0, [pc, #8]	; (1c50 <panic+0xc>)
    1c48:	f003 fbe1 	bl	540e <log_output_flush>
	log_backend_std_panic(&log_output);
}
    1c4c:	bd08      	pop	{r3, pc}
    1c4e:	bf00      	nop
    1c50:	00008498 	.word	0x00008498

00001c54 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
    1c54:	b500      	push	{lr}
    1c56:	b085      	sub	sp, #20
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
    1c58:	200f      	movs	r0, #15
    1c5a:	9002      	str	r0, [sp, #8]
    1c5c:	9807      	ldr	r0, [sp, #28]
    1c5e:	9001      	str	r0, [sp, #4]
    1c60:	9806      	ldr	r0, [sp, #24]
    1c62:	9000      	str	r0, [sp, #0]
    1c64:	4802      	ldr	r0, [pc, #8]	; (1c70 <sync_hexdump+0x1c>)
    1c66:	f7ff ff91 	bl	1b8c <log_output_hexdump>
	u32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output, flag, src_level,
				     timestamp, metadata, data, length);
}
    1c6a:	b005      	add	sp, #20
    1c6c:	f85d fb04 	ldr.w	pc, [sp], #4
    1c70:	00008498 	.word	0x00008498

00001c74 <sync_string>:
{
    1c74:	b500      	push	{lr}
    1c76:	b083      	sub	sp, #12
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
    1c78:	200f      	movs	r0, #15
    1c7a:	9001      	str	r0, [sp, #4]
    1c7c:	9804      	ldr	r0, [sp, #16]
    1c7e:	9000      	str	r0, [sp, #0]
    1c80:	4802      	ldr	r0, [pc, #8]	; (1c8c <sync_string+0x18>)
    1c82:	f7ff ff4f 	bl	1b24 <log_output_string>
}
    1c86:	b003      	add	sp, #12
    1c88:	f85d fb04 	ldr.w	pc, [sp], #4
    1c8c:	00008498 	.word	0x00008498

00001c90 <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
    1c90:	b410      	push	{r4}
    1c92:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
    1c94:	2200      	movs	r2, #0
    1c96:	4b08      	ldr	r3, [pc, #32]	; (1cb8 <get_flash_area_from_id+0x28>)
    1c98:	681b      	ldr	r3, [r3, #0]
    1c9a:	4293      	cmp	r3, r2
    1c9c:	dd08      	ble.n	1cb0 <get_flash_area_from_id+0x20>
		if (flash_map[i].fa_id == idx) {
    1c9e:	0113      	lsls	r3, r2, #4
    1ca0:	4906      	ldr	r1, [pc, #24]	; (1cbc <get_flash_area_from_id+0x2c>)
    1ca2:	6809      	ldr	r1, [r1, #0]
    1ca4:	18c8      	adds	r0, r1, r3
    1ca6:	5ccb      	ldrb	r3, [r1, r3]
    1ca8:	42a3      	cmp	r3, r4
    1caa:	d002      	beq.n	1cb2 <get_flash_area_from_id+0x22>
	for (int i = 0; i < flash_map_entries; i++) {
    1cac:	3201      	adds	r2, #1
    1cae:	e7f2      	b.n	1c96 <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
    1cb0:	2000      	movs	r0, #0
}
    1cb2:	bc10      	pop	{r4}
    1cb4:	4770      	bx	lr
    1cb6:	bf00      	nop
    1cb8:	0000853c 	.word	0x0000853c
    1cbc:	2000573c 	.word	0x2000573c

00001cc0 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1cc0:	4b08      	ldr	r3, [pc, #32]	; (1ce4 <flash_area_open+0x24>)
    1cc2:	681b      	ldr	r3, [r3, #0]
    1cc4:	b13b      	cbz	r3, 1cd6 <flash_area_open+0x16>
{
    1cc6:	b510      	push	{r4, lr}
    1cc8:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    1cca:	f7ff ffe1 	bl	1c90 <get_flash_area_from_id>
	if (area == NULL) {
    1cce:	b128      	cbz	r0, 1cdc <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    1cd0:	6020      	str	r0, [r4, #0]
	return 0;
    1cd2:	2000      	movs	r0, #0
}
    1cd4:	bd10      	pop	{r4, pc}
		return -EACCES;
    1cd6:	f06f 000c 	mvn.w	r0, #12
}
    1cda:	4770      	bx	lr
		return -ENOENT;
    1cdc:	f06f 0001 	mvn.w	r0, #1
    1ce0:	e7f8      	b.n	1cd4 <flash_area_open+0x14>
    1ce2:	bf00      	nop
    1ce4:	2000573c 	.word	0x2000573c

00001ce8 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, u32_t *cnt, struct flash_sector *ret)
{
    1ce8:	b500      	push	{lr}
    1cea:	b08b      	sub	sp, #44	; 0x2c
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1cec:	ab03      	add	r3, sp, #12
    1cee:	9300      	str	r3, [sp, #0]
    1cf0:	4b02      	ldr	r3, [pc, #8]	; (1cfc <flash_area_get_sectors+0x14>)
    1cf2:	f003 fbe5 	bl	54c0 <flash_area_layout>
}
    1cf6:	b00b      	add	sp, #44	; 0x2c
    1cf8:	f85d fb04 	ldr.w	pc, [sp], #4
    1cfc:	00005485 	.word	0x00005485

00001d00 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1d00:	b510      	push	{r4, lr}
    1d02:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1d04:	280a      	cmp	r0, #10
    1d06:	d007      	beq.n	1d18 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1d08:	4b07      	ldr	r3, [pc, #28]	; (1d28 <console_out+0x28>)
    1d0a:	6818      	ldr	r0, [r3, #0]
    1d0c:	b2e1      	uxtb	r1, r4
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    1d0e:	6843      	ldr	r3, [r0, #4]
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    1d10:	685b      	ldr	r3, [r3, #4]
    1d12:	4798      	blx	r3

	return c;
}
    1d14:	4620      	mov	r0, r4
    1d16:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    1d18:	4b03      	ldr	r3, [pc, #12]	; (1d28 <console_out+0x28>)
    1d1a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    1d1c:	6843      	ldr	r3, [r0, #4]
	api->poll_out(dev, out_char);
    1d1e:	685b      	ldr	r3, [r3, #4]
    1d20:	210d      	movs	r1, #13
    1d22:	4798      	blx	r3
    1d24:	e7f0      	b.n	1d08 <console_out+0x8>
    1d26:	bf00      	nop
    1d28:	20002590 	.word	0x20002590

00001d2c <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    1d2c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    1d2e:	4c04      	ldr	r4, [pc, #16]	; (1d40 <uart_console_hook_install+0x14>)
    1d30:	4620      	mov	r0, r4
    1d32:	f000 fcad 	bl	2690 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1d36:	4620      	mov	r0, r4
    1d38:	f7ff fcf8 	bl	172c <__printk_hook_install>
}
    1d3c:	bd10      	pop	{r4, pc}
    1d3e:	bf00      	nop
    1d40:	00001d01 	.word	0x00001d01

00001d44 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1d44:	b508      	push	{r3, lr}
    1d46:	4804      	ldr	r0, [pc, #16]	; (1d58 <uart_console_init+0x14>)
    1d48:	f002 f8f6 	bl	3f38 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1d4c:	4b03      	ldr	r3, [pc, #12]	; (1d5c <uart_console_init+0x18>)
    1d4e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1d50:	f7ff ffec 	bl	1d2c <uart_console_hook_install>

	return 0;
}
    1d54:	2000      	movs	r0, #0
    1d56:	bd08      	pop	{r3, pc}
    1d58:	00008490 	.word	0x00008490
    1d5c:	20002590 	.word	0x20002590

00001d60 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    1d60:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
    1d62:	2101      	movs	r1, #1
    1d64:	f44f 7080 	mov.w	r0, #256	; 0x100
    1d68:	f003 fc56 	bl	5618 <clock_event_check_and_clean>
    1d6c:	b128      	cbz	r0, 1d7a <nrf_power_clock_isr+0x1a>
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1d6e:	2100      	movs	r1, #0
    1d70:	480a      	ldr	r0, [pc, #40]	; (1d9c <nrf_power_clock_isr+0x3c>)
    1d72:	f003 fc71 	bl	5658 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    1d76:	7a43      	ldrb	r3, [r0, #9]
    1d78:	b133      	cbz	r3, 1d88 <nrf_power_clock_isr+0x28>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
		}
	}

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_LFCLKSTARTED,
    1d7a:	2102      	movs	r1, #2
    1d7c:	f44f 7082 	mov.w	r0, #260	; 0x104
    1d80:	f003 fc4a 	bl	5618 <clock_event_check_and_clean>
    1d84:	b928      	cbnz	r0, 1d92 <nrf_power_clock_isr+0x32>
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    1d86:	bd08      	pop	{r3, pc}
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1d88:	2100      	movs	r1, #0
    1d8a:	4804      	ldr	r0, [pc, #16]	; (1d9c <nrf_power_clock_isr+0x3c>)
    1d8c:	f003 fcf6 	bl	577c <clkstarted_handle>
    1d90:	e7f3      	b.n	1d7a <nrf_power_clock_isr+0x1a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1d92:	2101      	movs	r1, #1
    1d94:	4801      	ldr	r0, [pc, #4]	; (1d9c <nrf_power_clock_isr+0x3c>)
    1d96:	f003 fcf1 	bl	577c <clkstarted_handle>
}
    1d9a:	e7f4      	b.n	1d86 <nrf_power_clock_isr+0x26>
    1d9c:	200057b0 	.word	0x200057b0

00001da0 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(u32_t cyc)
{
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1da0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    1da4:	4b01      	ldr	r3, [pc, #4]	; (1dac <set_comparator+0xc>)
    1da6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
}
    1daa:	4770      	bx	lr
    1dac:	50015000 	.word	0x50015000

00001db0 <counter>:
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    1db0:	4b01      	ldr	r3, [pc, #4]	; (1db8 <counter+0x8>)
    1db2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static u32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    1db6:	4770      	bx	lr
    1db8:	50015000 	.word	0x50015000

00001dbc <rtc1_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
    1dbc:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    1dbe:	4b0e      	ldr	r3, [pc, #56]	; (1df8 <rtc1_nrf_isr+0x3c>)
    1dc0:	2200      	movs	r2, #0
    1dc2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    1dc6:	f04f 0320 	mov.w	r3, #32
    1dca:	f3ef 8611 	mrs	r6, BASEPRI
    1dce:	f383 8811 	msr	BASEPRI, r3
    1dd2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
    1dd6:	f7ff ffeb 	bl	1db0 <counter>
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    1dda:	4d08      	ldr	r5, [pc, #32]	; (1dfc <rtc1_nrf_isr+0x40>)
    1ddc:	682c      	ldr	r4, [r5, #0]
    1dde:	4621      	mov	r1, r4
    1de0:	f003 fd5b 	bl	589a <counter_sub>

	last_count += dticks * CYC_PER_TICK;
    1de4:	4404      	add	r4, r0
    1de6:	602c      	str	r4, [r5, #0]
	__asm__ volatile(
    1de8:	f386 8811 	msr	BASEPRI, r6
    1dec:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    1df0:	f002 fa84 	bl	42fc <z_clock_announce>
}
    1df4:	bd70      	pop	{r4, r5, r6, pc}
    1df6:	bf00      	nop
    1df8:	50015000 	.word	0x50015000
    1dfc:	200025ac 	.word	0x200025ac

00001e00 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    1e00:	b570      	push	{r4, r5, r6, lr}
    1e02:	4815      	ldr	r0, [pc, #84]	; (1e58 <z_clock_driver_init+0x58>)
    1e04:	f002 f898 	bl	3f38 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
    1e08:	b310      	cbz	r0, 1e50 <z_clock_driver_init+0x50>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
    1e0a:	6842      	ldr	r2, [r0, #4]
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    1e0c:	6812      	ldr	r2, [r2, #0]
    1e0e:	2101      	movs	r1, #1
    1e10:	4790      	blx	r2
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    1e12:	4d12      	ldr	r5, [pc, #72]	; (1e5c <z_clock_driver_init+0x5c>)
    1e14:	2400      	movs	r4, #0
    1e16:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    1e1a:	2601      	movs	r6, #1
    1e1c:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    1e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1e24:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1e28:	4b0d      	ldr	r3, [pc, #52]	; (1e60 <z_clock_driver_init+0x60>)
    1e2a:	601c      	str	r4, [r3, #0]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e2c:	4b0d      	ldr	r3, [pc, #52]	; (1e64 <z_clock_driver_init+0x64>)
    1e2e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1e32:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    1e36:	4622      	mov	r2, r4
    1e38:	4631      	mov	r1, r6
    1e3a:	2015      	movs	r0, #21
    1e3c:	f000 f908 	bl	2050 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    1e40:	2015      	movs	r0, #21
    1e42:	f000 f8f5 	bl	2030 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1e46:	4b08      	ldr	r3, [pc, #32]	; (1e68 <z_clock_driver_init+0x68>)
    1e48:	601e      	str	r6, [r3, #0]
    1e4a:	602e      	str	r6, [r5, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    1e4c:	4620      	mov	r0, r4
}
    1e4e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1e50:	f04f 30ff 	mov.w	r0, #4294967295
    1e54:	e7fb      	b.n	1e4e <z_clock_driver_init+0x4e>
    1e56:	bf00      	nop
    1e58:	00008574 	.word	0x00008574
    1e5c:	50015000 	.word	0x50015000
    1e60:	50015140 	.word	0x50015140
    1e64:	e000e100 	.word	0xe000e100
    1e68:	50015008 	.word	0x50015008

00001e6c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    1e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    1e6e:	f1b0 3fff 	cmp.w	r0, #4294967295
    1e72:	d032      	beq.n	1eda <z_clock_set_timeout+0x6e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    1e74:	1e44      	subs	r4, r0, #1
    1e76:	4b27      	ldr	r3, [pc, #156]	; (1f14 <z_clock_set_timeout+0xa8>)
    1e78:	429c      	cmp	r4, r3
    1e7a:	dc01      	bgt.n	1e80 <z_clock_set_timeout+0x14>
    1e7c:	2c00      	cmp	r4, #0
    1e7e:	dd2e      	ble.n	1ede <z_clock_set_timeout+0x72>
    1e80:	4b24      	ldr	r3, [pc, #144]	; (1f14 <z_clock_set_timeout+0xa8>)
    1e82:	429c      	cmp	r4, r3
    1e84:	dd00      	ble.n	1e88 <z_clock_set_timeout+0x1c>
    1e86:	4c24      	ldr	r4, [pc, #144]	; (1f18 <z_clock_set_timeout+0xac>)
	__asm__ volatile(
    1e88:	f04f 0320 	mov.w	r3, #32
    1e8c:	f3ef 8611 	mrs	r6, BASEPRI
    1e90:	f383 8811 	msr	BASEPRI, r3
    1e94:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
    1e98:	f7ff ff8a 	bl	1db0 <counter>
    1e9c:	4607      	mov	r7, r0
	u32_t unannounced = counter_sub(t, last_count);
    1e9e:	4b1f      	ldr	r3, [pc, #124]	; (1f1c <z_clock_set_timeout+0xb0>)
    1ea0:	681d      	ldr	r5, [r3, #0]
    1ea2:	4629      	mov	r1, r5
    1ea4:	f003 fcf9 	bl	589a <counter_sub>
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    1ea8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1eac:	d300      	bcc.n	1eb0 <z_clock_set_timeout+0x44>
		ticks = 0;
    1eae:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1eb0:	4404      	add	r4, r0
    1eb2:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    1eb4:	4b18      	ldr	r3, [pc, #96]	; (1f18 <z_clock_set_timeout+0xac>)
    1eb6:	429c      	cmp	r4, r3
    1eb8:	d900      	bls.n	1ebc <z_clock_set_timeout+0x50>
		cyc = MAX_CYCLES;
    1eba:	461c      	mov	r4, r3
	}

	cyc += last_count;
    1ebc:	442c      	add	r4, r5
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    1ebe:	4639      	mov	r1, r7
    1ec0:	4620      	mov	r0, r4
    1ec2:	f003 fcea 	bl	589a <counter_sub>
    1ec6:	2802      	cmp	r0, #2
    1ec8:	d90b      	bls.n	1ee2 <z_clock_set_timeout+0x76>
		set_comparator(cyc);
    1eca:	4620      	mov	r0, r4
    1ecc:	f7ff ff68 	bl	1da0 <set_comparator>
	__asm__ volatile(
    1ed0:	f386 8811 	msr	BASEPRI, r6
    1ed4:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    1ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    1eda:	480f      	ldr	r0, [pc, #60]	; (1f18 <z_clock_set_timeout+0xac>)
    1edc:	e7ca      	b.n	1e74 <z_clock_set_timeout+0x8>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    1ede:	2400      	movs	r4, #0
    1ee0:	e7d2      	b.n	1e88 <z_clock_set_timeout+0x1c>
		set_comparator(cyc);
    1ee2:	4620      	mov	r0, r4
    1ee4:	f7ff ff5c 	bl	1da0 <set_comparator>
		dt = counter_sub(cyc, counter());
    1ee8:	f7ff ff62 	bl	1db0 <counter>
    1eec:	4601      	mov	r1, r0
    1eee:	4620      	mov	r0, r4
    1ef0:	f003 fcd3 	bl	589a <counter_sub>
		if (dt == 0 || dt > 0x7fffff) {
    1ef4:	1e42      	subs	r2, r0, #1
    1ef6:	4b0a      	ldr	r3, [pc, #40]	; (1f20 <z_clock_set_timeout+0xb4>)
    1ef8:	429a      	cmp	r2, r3
    1efa:	d905      	bls.n	1f08 <z_clock_set_timeout+0x9c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1efc:	4b09      	ldr	r3, [pc, #36]	; (1f24 <z_clock_set_timeout+0xb8>)
    1efe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1f02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    1f06:	e7e3      	b.n	1ed0 <z_clock_set_timeout+0x64>
		} else if (dt == 1) {
    1f08:	2801      	cmp	r0, #1
    1f0a:	d1e1      	bne.n	1ed0 <z_clock_set_timeout+0x64>
			set_comparator(cyc + 2);
    1f0c:	1ca0      	adds	r0, r4, #2
    1f0e:	f7ff ff47 	bl	1da0 <set_comparator>
    1f12:	e7dd      	b.n	1ed0 <z_clock_set_timeout+0x64>
    1f14:	00fffffd 	.word	0x00fffffd
    1f18:	00fffffe 	.word	0x00fffffe
    1f1c:	200025ac 	.word	0x200025ac
    1f20:	007ffffe 	.word	0x007ffffe
    1f24:	e000e100 	.word	0xe000e100

00001f28 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    1f28:	b510      	push	{r4, lr}
	__asm__ volatile(
    1f2a:	f04f 0320 	mov.w	r3, #32
    1f2e:	f3ef 8411 	mrs	r4, BASEPRI
    1f32:	f383 8811 	msr	BASEPRI, r3
    1f36:	f3bf 8f6f 	isb	sy
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1f3a:	f7ff ff39 	bl	1db0 <counter>
    1f3e:	4b04      	ldr	r3, [pc, #16]	; (1f50 <z_clock_elapsed+0x28>)
    1f40:	6819      	ldr	r1, [r3, #0]
    1f42:	f003 fcaa 	bl	589a <counter_sub>
	__asm__ volatile(
    1f46:	f384 8811 	msr	BASEPRI, r4
    1f4a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1f4e:	bd10      	pop	{r4, pc}
    1f50:	200025ac 	.word	0x200025ac

00001f54 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
    1f54:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    1f56:	f04f 0320 	mov.w	r3, #32
    1f5a:	f3ef 8511 	mrs	r5, BASEPRI
    1f5e:	f383 8811 	msr	BASEPRI, r3
    1f62:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    1f66:	f7ff ff23 	bl	1db0 <counter>
    1f6a:	4b05      	ldr	r3, [pc, #20]	; (1f80 <z_timer_cycle_get_32+0x2c>)
    1f6c:	681c      	ldr	r4, [r3, #0]
    1f6e:	4621      	mov	r1, r4
    1f70:	f003 fc93 	bl	589a <counter_sub>
    1f74:	4420      	add	r0, r4
	__asm__ volatile(
    1f76:	f385 8811 	msr	BASEPRI, r5
    1f7a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1f7e:	bd38      	pop	{r3, r4, r5, pc}
    1f80:	200025ac 	.word	0x200025ac

00001f84 <z_arm_exc_exit>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    1f84:	4770      	bx	lr
    1f86:	bf00      	nop

00001f88 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1f88:	4a09      	ldr	r2, [pc, #36]	; (1fb0 <arch_swap+0x28>)
    1f8a:	6893      	ldr	r3, [r2, #8]
    1f8c:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    1f8e:	4909      	ldr	r1, [pc, #36]	; (1fb4 <arch_swap+0x2c>)
    1f90:	6809      	ldr	r1, [r1, #0]
    1f92:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1f94:	4908      	ldr	r1, [pc, #32]	; (1fb8 <arch_swap+0x30>)
    1f96:	684b      	ldr	r3, [r1, #4]
    1f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1f9c:	604b      	str	r3, [r1, #4]
    1f9e:	2300      	movs	r3, #0
    1fa0:	f383 8811 	msr	BASEPRI, r3
    1fa4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1fa8:	6893      	ldr	r3, [r2, #8]
}
    1faa:	6e98      	ldr	r0, [r3, #104]	; 0x68
    1fac:	4770      	bx	lr
    1fae:	bf00      	nop
    1fb0:	200026f8 	.word	0x200026f8
    1fb4:	00008810 	.word	0x00008810
    1fb8:	e000ed00 	.word	0xe000ed00

00001fbc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1fbc:	4912      	ldr	r1, [pc, #72]	; (2008 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1fbe:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1fc0:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    1fc4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1fc6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1fca:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1fce:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1fd0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1fd4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1fd8:	4f0c      	ldr	r7, [pc, #48]	; (200c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1fda:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1fde:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1fe0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1fe2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1fe4:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    1fe6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1fe8:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1fea:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1fee:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1ff0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1ff2:	f003 fc87 	bl	5904 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1ff6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1ffa:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    1ffe:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2002:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    2006:	4770      	bx	lr
    ldr r1, =_kernel
    2008:	200026f8 	.word	0x200026f8
    ldr v4, =_SCS_ICSR
    200c:	e000ed04 	.word	0xe000ed04

00002010 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    2010:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2014:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2016:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    201a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    201e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2020:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2024:	2902      	cmp	r1, #2
    beq _oops
    2026:	d0ff      	beq.n	2028 <_oops>

00002028 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2028:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    202a:	f003 fc42 	bl	58b2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    202e:	bd01      	pop	{r0, pc}

00002030 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2030:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2032:	2b00      	cmp	r3, #0
    2034:	db08      	blt.n	2048 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2036:	f000 001f 	and.w	r0, r0, #31
    203a:	095b      	lsrs	r3, r3, #5
    203c:	2201      	movs	r2, #1
    203e:	fa02 f000 	lsl.w	r0, r2, r0
    2042:	4a02      	ldr	r2, [pc, #8]	; (204c <arch_irq_enable+0x1c>)
    2044:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2048:	4770      	bx	lr
    204a:	bf00      	nop
    204c:	e000e100 	.word	0xe000e100

00002050 <z_arm_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    2050:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2052:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2054:	2b00      	cmp	r3, #0
    2056:	db08      	blt.n	206a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2058:	0149      	lsls	r1, r1, #5
    205a:	b2c9      	uxtb	r1, r1
    205c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2060:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2064:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    2068:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    206a:	f000 000f 	and.w	r0, r0, #15
    206e:	0149      	lsls	r1, r1, #5
    2070:	b2c9      	uxtb	r1, r1
    2072:	4b01      	ldr	r3, [pc, #4]	; (2078 <z_arm_irq_priority_set+0x28>)
    2074:	5419      	strb	r1, [r3, r0]
}
    2076:	4770      	bx	lr
    2078:	e000ed14 	.word	0xe000ed14

0000207c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    207c:	4901      	ldr	r1, [pc, #4]	; (2084 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    207e:	2210      	movs	r2, #16
	str r2, [r1]
    2080:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    2082:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    2084:	e000ed10 	.word	0xe000ed10

00002088 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    2088:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    208c:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    2090:	4672      	mov	r2, lr

	push {r0, lr}
    2092:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    2094:	f000 f8d6 	bl	2244 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    2098:	bd01      	pop	{r0, pc}
    209a:	bf00      	nop

0000209c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    209c:	bf30      	wfi
    b z_SysNmiOnReset
    209e:	f7ff bffd 	b.w	209c <z_SysNmiOnReset>
    20a2:	bf00      	nop

000020a4 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    20a4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    20a6:	4b08      	ldr	r3, [pc, #32]	; (20c8 <z_arm_prep_c+0x24>)
    20a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    20ac:	4a07      	ldr	r2, [pc, #28]	; (20cc <z_arm_prep_c+0x28>)
    20ae:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    20b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20b4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    20b8:	f001 ff66 	bl	3f88 <z_bss_zero>
	z_data_copy();
    20bc:	f001 ff70 	bl	3fa0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    20c0:	f000 f914 	bl	22ec <z_arm_int_lib_init>
	z_cstart();
    20c4:	f001 ffa8 	bl	4018 <z_cstart>
    20c8:	00000000 	.word	0x00000000
    20cc:	e000ed00 	.word	0xe000ed00

000020d0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    20d0:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    20d2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    20d6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    20da:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    20de:	4904      	ldr	r1, [pc, #16]	; (20f0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    20e0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    20e2:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    20e4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    20e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    20ea:	4902      	ldr	r1, [pc, #8]	; (20f4 <_isr_wrapper+0x24>)
	bx r1
    20ec:	4708      	bx	r1
    20ee:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    20f0:	00007bb0 	.word	0x00007bb0
	ldr r1, =z_arm_int_exit
    20f4:	00001f85 	.word	0x00001f85

000020f8 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    20f8:	f003 f908 	bl	530c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    20fc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    20fe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    2102:	4808      	ldr	r0, [pc, #32]	; (2124 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    2104:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2108:	1840      	adds	r0, r0, r1
    msr PSP, r0
    210a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    210e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2112:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2114:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2116:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    211a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    211e:	f7ff ffc1 	bl	20a4 <z_arm_prep_c>
    2122:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    2124:	20004f30 	.word	0x20004f30

00002128 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2128:	b510      	push	{r4, lr}
    212a:	4614      	mov	r4, r2
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    212c:	4b0f      	ldr	r3, [pc, #60]	; (216c <mem_manage_fault+0x44>)
    212e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2134:	f013 0f02 	tst.w	r3, #2
    2138:	d00b      	beq.n	2152 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    213a:	4b0c      	ldr	r3, [pc, #48]	; (216c <mem_manage_fault+0x44>)
    213c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2140:	f013 0f80 	tst.w	r3, #128	; 0x80
    2144:	d005      	beq.n	2152 <mem_manage_fault+0x2a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    2146:	b121      	cbz	r1, 2152 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2148:	4a08      	ldr	r2, [pc, #32]	; (216c <mem_manage_fault+0x44>)
    214a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    214c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2150:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2152:	4b06      	ldr	r3, [pc, #24]	; (216c <mem_manage_fault+0x44>)
    2154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    2158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    215a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    215c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2160:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    2162:	f003 fbb2 	bl	58ca <memory_fault_recoverable>
    2166:	7020      	strb	r0, [r4, #0]

	return reason;
}
    2168:	2000      	movs	r0, #0
    216a:	bd10      	pop	{r4, pc}
    216c:	e000ed00 	.word	0xe000ed00

00002170 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    2170:	b510      	push	{r4, lr}
    2172:	4614      	mov	r4, r2
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2174:	4b12      	ldr	r3, [pc, #72]	; (21c0 <bus_fault+0x50>)
    2176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    217c:	f413 7f00 	tst.w	r3, #512	; 0x200
    2180:	d00b      	beq.n	219a <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2182:	4b0f      	ldr	r3, [pc, #60]	; (21c0 <bus_fault+0x50>)
    2184:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2188:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    218c:	d005      	beq.n	219a <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    218e:	b121      	cbz	r1, 219a <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2190:	4a0b      	ldr	r2, [pc, #44]	; (21c0 <bus_fault+0x50>)
    2192:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2194:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2198:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    219a:	4b09      	ldr	r3, [pc, #36]	; (21c0 <bus_fault+0x50>)
    219c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21a0:	f413 7f80 	tst.w	r3, #256	; 0x100
    21a4:	d101      	bne.n	21aa <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    21a6:	4b06      	ldr	r3, [pc, #24]	; (21c0 <bus_fault+0x50>)
    21a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    21aa:	4a05      	ldr	r2, [pc, #20]	; (21c0 <bus_fault+0x50>)
    21ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    21ae:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    21b2:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    21b4:	f003 fb89 	bl	58ca <memory_fault_recoverable>
    21b8:	7020      	strb	r0, [r4, #0]

	return reason;
}
    21ba:	2000      	movs	r0, #0
    21bc:	bd10      	pop	{r4, pc}
    21be:	bf00      	nop
    21c0:	e000ed00 	.word	0xe000ed00

000021c4 <usage_fault>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    21c4:	4b07      	ldr	r3, [pc, #28]	; (21e4 <usage_fault+0x20>)
    21c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    21c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    21ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    21cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    21ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    21d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    21d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    21d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    21d6:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    21da:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    21de:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    21e0:	2000      	movs	r0, #0
    21e2:	4770      	bx	lr
    21e4:	e000ed00 	.word	0xe000ed00

000021e8 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    21e8:	b538      	push	{r3, r4, r5, lr}
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    21ea:	2300      	movs	r3, #0
    21ec:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    21ee:	4b12      	ldr	r3, [pc, #72]	; (2238 <hard_fault+0x50>)
    21f0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    21f2:	f014 0402 	ands.w	r4, r4, #2
    21f6:	d11d      	bne.n	2234 <hard_fault+0x4c>
    21f8:	4605      	mov	r5, r0
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    21fa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    21fc:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    2200:	d019      	beq.n	2236 <hard_fault+0x4e>
    2202:	460a      	mov	r2, r1
    2204:	4628      	mov	r0, r5
		PR_EXC("  Fault escalation (see below)");
		if (SCB_MMFSR != 0) {
    2206:	3328      	adds	r3, #40	; 0x28
    2208:	781b      	ldrb	r3, [r3, #0]
    220a:	b943      	cbnz	r3, 221e <hard_fault+0x36>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    220c:	4b0b      	ldr	r3, [pc, #44]	; (223c <hard_fault+0x54>)
    220e:	781b      	ldrb	r3, [r3, #0]
    2210:	b94b      	cbnz	r3, 2226 <hard_fault+0x3e>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    2212:	4b0b      	ldr	r3, [pc, #44]	; (2240 <hard_fault+0x58>)
    2214:	881b      	ldrh	r3, [r3, #0]
    2216:	b29b      	uxth	r3, r3
    2218:	b94b      	cbnz	r3, 222e <hard_fault+0x46>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    221a:	4620      	mov	r0, r4
	}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
    221c:	e00b      	b.n	2236 <hard_fault+0x4e>
			reason = mem_manage_fault(esf, 1, recoverable);
    221e:	2101      	movs	r1, #1
    2220:	f7ff ff82 	bl	2128 <mem_manage_fault>
    2224:	e007      	b.n	2236 <hard_fault+0x4e>
			reason = bus_fault(esf, 1, recoverable);
    2226:	2101      	movs	r1, #1
    2228:	f7ff ffa2 	bl	2170 <bus_fault>
    222c:	e003      	b.n	2236 <hard_fault+0x4e>
			reason = usage_fault(esf);
    222e:	f7ff ffc9 	bl	21c4 <usage_fault>
    2232:	e000      	b.n	2236 <hard_fault+0x4e>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    2234:	2000      	movs	r0, #0
}
    2236:	bd38      	pop	{r3, r4, r5, pc}
    2238:	e000ed00 	.word	0xe000ed00
    223c:	e000ed29 	.word	0xe000ed29
    2240:	e000ed2a 	.word	0xe000ed2a

00002244 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    2244:	b570      	push	{r4, r5, r6, lr}
    2246:	b08a      	sub	sp, #40	; 0x28
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2248:	4b23      	ldr	r3, [pc, #140]	; (22d8 <z_arm_fault+0x94>)
    224a:	685b      	ldr	r3, [r3, #4]
    224c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2250:	2500      	movs	r5, #0
    2252:	f385 8811 	msr	BASEPRI, r5
    2256:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    225a:	f002 457f 	and.w	r5, r2, #4278190080	; 0xff000000
    225e:	f1b5 4f7f 	cmp.w	r5, #4278190080	; 0xff000000
    2262:	d117      	bne.n	2294 <z_arm_fault+0x50>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2264:	f002 050c 	and.w	r5, r2, #12
    2268:	2d08      	cmp	r5, #8
    226a:	d016      	beq.n	229a <z_arm_fault+0x56>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    226c:	f012 0f08 	tst.w	r2, #8
    2270:	d00d      	beq.n	228e <z_arm_fault+0x4a>
			ptr_esf =  (z_arch_esf_t *)psp;
    2272:	460c      	mov	r4, r1
	*nested_exc = false;
    2274:	2500      	movs	r5, #0
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
    2276:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    227a:	4619      	mov	r1, r3
    227c:	4620      	mov	r0, r4
    227e:	f003 fb26 	bl	58ce <fault_handle>
    2282:	4606      	mov	r6, r0
	if (recoverable) {
    2284:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2288:	b153      	cbz	r3, 22a0 <z_arm_fault+0x5c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    228a:	b00a      	add	sp, #40	; 0x28
    228c:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    228e:	4604      	mov	r4, r0
			*nested_exc = true;
    2290:	2501      	movs	r5, #1
    2292:	e7f0      	b.n	2276 <z_arm_fault+0x32>
	*nested_exc = false;
    2294:	2500      	movs	r5, #0
		return NULL;
    2296:	462c      	mov	r4, r5
    2298:	e7ed      	b.n	2276 <z_arm_fault+0x32>
	*nested_exc = false;
    229a:	2500      	movs	r5, #0
		return NULL;
    229c:	462c      	mov	r4, r5
    229e:	e7ea      	b.n	2276 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    22a0:	2220      	movs	r2, #32
    22a2:	4621      	mov	r1, r4
    22a4:	a801      	add	r0, sp, #4
    22a6:	f003 fb8f 	bl	59c8 <memcpy>
	if (nested_exc) {
    22aa:	b14d      	cbz	r5, 22c0 <z_arm_fault+0x7c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    22ac:	9b08      	ldr	r3, [sp, #32]
    22ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
    22b2:	b95a      	cbnz	r2, 22cc <z_arm_fault+0x88>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    22b4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    22b8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    22bc:	9308      	str	r3, [sp, #32]
    22be:	e005      	b.n	22cc <z_arm_fault+0x88>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    22c0:	9b08      	ldr	r3, [sp, #32]
    22c2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    22c6:	f023 0301 	bic.w	r3, r3, #1
    22ca:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    22cc:	a901      	add	r1, sp, #4
    22ce:	4630      	mov	r0, r6
    22d0:	f003 faeb 	bl	58aa <z_arm_fatal_error>
    22d4:	e7d9      	b.n	228a <z_arm_fault+0x46>
    22d6:	bf00      	nop
    22d8:	e000ed00 	.word	0xe000ed00

000022dc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    22dc:	4a02      	ldr	r2, [pc, #8]	; (22e8 <z_arm_fault_init+0xc>)
    22de:	6953      	ldr	r3, [r2, #20]
    22e0:	f043 0310 	orr.w	r3, r3, #16
    22e4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    22e6:	4770      	bx	lr
    22e8:	e000ed00 	.word	0xe000ed00

000022ec <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    22ec:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    22ee:	e006      	b.n	22fe <z_arm_int_lib_init+0x12>
    22f0:	f002 010f 	and.w	r1, r2, #15
    22f4:	4b09      	ldr	r3, [pc, #36]	; (231c <z_arm_int_lib_init+0x30>)
    22f6:	440b      	add	r3, r1
    22f8:	2120      	movs	r1, #32
    22fa:	7619      	strb	r1, [r3, #24]
    22fc:	3201      	adds	r2, #1
    22fe:	2a40      	cmp	r2, #64	; 0x40
    2300:	dc0a      	bgt.n	2318 <z_arm_int_lib_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    2302:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    2304:	2b00      	cmp	r3, #0
    2306:	dbf3      	blt.n	22f0 <z_arm_int_lib_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2308:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    230c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2310:	2120      	movs	r1, #32
    2312:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    2316:	e7f1      	b.n	22fc <z_arm_int_lib_init+0x10>
	}
}
    2318:	4770      	bx	lr
    231a:	bf00      	nop
    231c:	e000ecfc 	.word	0xe000ecfc

00002320 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    2320:	b538      	push	{r3, r4, r5, lr}
    2322:	4605      	mov	r5, r0
	__asm__ volatile(
    2324:	f04f 0320 	mov.w	r3, #32
    2328:	f3ef 8411 	mrs	r4, BASEPRI
    232c:	f383 8811 	msr	BASEPRI, r3
    2330:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    2334:	f001 ff34 	bl	41a0 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    2338:	4b0a      	ldr	r3, [pc, #40]	; (2364 <z_impl_k_thread_abort+0x44>)
    233a:	689b      	ldr	r3, [r3, #8]
    233c:	42ab      	cmp	r3, r5
    233e:	d003      	beq.n	2348 <z_impl_k_thread_abort+0x28>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    2340:	4620      	mov	r0, r4
    2342:	f005 fb98 	bl	7a76 <z_reschedule_irqlock>
}
    2346:	bd38      	pop	{r3, r4, r5, pc}
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    2348:	4b07      	ldr	r3, [pc, #28]	; (2368 <z_impl_k_thread_abort+0x48>)
    234a:	685b      	ldr	r3, [r3, #4]
    234c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2350:	b12b      	cbz	r3, 235e <z_impl_k_thread_abort+0x3e>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2352:	4a05      	ldr	r2, [pc, #20]	; (2368 <z_impl_k_thread_abort+0x48>)
    2354:	6853      	ldr	r3, [r2, #4]
    2356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    235a:	6053      	str	r3, [r2, #4]
    235c:	e7f0      	b.n	2340 <z_impl_k_thread_abort+0x20>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    235e:	4620      	mov	r0, r4
    2360:	f7ff fe12 	bl	1f88 <arch_swap>
			CODE_UNREACHABLE;
    2364:	200026f8 	.word	0x200026f8
    2368:	e000ed00 	.word	0xe000ed00

0000236c <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    236c:	4b01      	ldr	r3, [pc, #4]	; (2374 <mpu_init+0x8>)
    236e:	4a02      	ldr	r2, [pc, #8]	; (2378 <mpu_init+0xc>)
    2370:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    2372:	4770      	bx	lr
    2374:	e000ed90 	.word	0xe000ed90
    2378:	0044ffaa 	.word	0x0044ffaa

0000237c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    237c:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    237e:	680b      	ldr	r3, [r1, #0]
    2380:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2384:	7a0c      	ldrb	r4, [r1, #8]
    2386:	f004 031f 	and.w	r3, r4, #31
    238a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    238c:	68cb      	ldr	r3, [r1, #12]
    238e:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2392:	0964      	lsrs	r4, r4, #5
    2394:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2398:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    239c:	4902      	ldr	r1, [pc, #8]	; (23a8 <region_init+0x2c>)
    239e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    23a0:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    23a2:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    23a4:	bc10      	pop	{r4}
    23a6:	4770      	bx	lr
    23a8:	e000ed90 	.word	0xe000ed90

000023ac <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
    23ac:	b510      	push	{r4, lr}
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    23ae:	280f      	cmp	r0, #15
    23b0:	d804      	bhi.n	23bc <region_allocate_and_init+0x10>
    23b2:	4604      	mov	r4, r0
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    23b4:	f7ff ffe2 	bl	237c <region_init>

	return index;
}
    23b8:	4620      	mov	r0, r4
    23ba:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    23bc:	f04f 0400 	mov.w	r4, #0
    23c0:	2301      	movs	r3, #1
    23c2:	f363 0402 	bfi	r4, r3, #0, #3
    23c6:	f36f 04c5 	bfc	r4, #3, #3
    23ca:	4b07      	ldr	r3, [pc, #28]	; (23e8 <region_allocate_and_init+0x3c>)
    23cc:	4a07      	ldr	r2, [pc, #28]	; (23ec <region_allocate_and_init+0x40>)
    23ce:	1a9b      	subs	r3, r3, r2
    23d0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    23d4:	f363 148f 	bfi	r4, r3, #6, #10
    23d8:	4602      	mov	r2, r0
    23da:	4905      	ldr	r1, [pc, #20]	; (23f0 <region_allocate_and_init+0x44>)
    23dc:	4620      	mov	r0, r4
    23de:	f002 ff9f 	bl	5320 <log_string_sync>
		return -EINVAL;
    23e2:	f06f 0415 	mvn.w	r4, #21
    23e6:	e7e7      	b.n	23b8 <region_allocate_and_init+0xc>
    23e8:	00007e58 	.word	0x00007e58
    23ec:	00007e48 	.word	0x00007e48
    23f0:	000085f4 	.word	0x000085f4

000023f4 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    23f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23f8:	b087      	sub	sp, #28
    23fa:	4680      	mov	r8, r0
    23fc:	468b      	mov	fp, r1
    23fe:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    2400:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    2402:	2500      	movs	r5, #0
    2404:	e060      	b.n	24c8 <mpu_configure_regions_and_partition+0xd4>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
			(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2406:	2301      	movs	r3, #1
    2408:	f363 0002 	bfi	r0, r3, #0, #3
    240c:	f36f 00c5 	bfc	r0, #3, #3
    2410:	4b6b      	ldr	r3, [pc, #428]	; (25c0 <mpu_configure_regions_and_partition+0x1cc>)
    2412:	4a6c      	ldr	r2, [pc, #432]	; (25c4 <mpu_configure_regions_and_partition+0x1d0>)
    2414:	1a9b      	subs	r3, r3, r2
    2416:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    241a:	f363 108f 	bfi	r0, r3, #6, #10
    241e:	462a      	mov	r2, r5
    2420:	4969      	ldr	r1, [pc, #420]	; (25c8 <mpu_configure_regions_and_partition+0x1d4>)
    2422:	f002 ff7d 	bl	5320 <log_string_sync>
			return -EINVAL;
    2426:	f06f 0415 	mvn.w	r4, #21
    242a:	e016      	b.n	245a <mpu_configure_regions_and_partition+0x66>
	return -EINVAL;
    242c:	f06f 0615 	mvn.w	r6, #21
    2430:	e067      	b.n	2502 <mpu_configure_regions_and_partition+0x10e>
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2432:	f04f 0000 	mov.w	r0, #0
    2436:	2301      	movs	r3, #1
    2438:	f363 0002 	bfi	r0, r3, #0, #3
    243c:	f36f 00c5 	bfc	r0, #3, #3
    2440:	4b5f      	ldr	r3, [pc, #380]	; (25c0 <mpu_configure_regions_and_partition+0x1cc>)
    2442:	4a60      	ldr	r2, [pc, #384]	; (25c4 <mpu_configure_regions_and_partition+0x1d0>)
    2444:	1a9b      	subs	r3, r3, r2
    2446:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    244a:	f363 108f 	bfi	r0, r3, #6, #10
    244e:	4632      	mov	r2, r6
    2450:	495e      	ldr	r1, [pc, #376]	; (25cc <mpu_configure_regions_and_partition+0x1d8>)
    2452:	f002 ff65 	bl	5320 <log_string_sync>
				u_reg_index);
			return -EINVAL;
    2456:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    245a:	4620      	mov	r0, r4
    245c:	b007      	add	sp, #28
    245e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((regions[i]->start == u_reg_base) &&
    2462:	45ba      	cmp	sl, r7
    2464:	d166      	bne.n	2534 <mpu_configure_regions_and_partition+0x140>
			mpu_configure_region(u_reg_index, regions[i]);
    2466:	b2f0      	uxtb	r0, r6
    2468:	f003 fa64 	bl	5934 <mpu_configure_region>
    246c:	e02b      	b.n	24c6 <mpu_configure_regions_and_partition+0xd2>
	MPU->RNR = index;
    246e:	4a58      	ldr	r2, [pc, #352]	; (25d0 <mpu_configure_regions_and_partition+0x1dc>)
    2470:	f8c2 c008 	str.w	ip, [r2, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2474:	68d3      	ldr	r3, [r2, #12]
    2476:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    247a:	f020 001f 	bic.w	r0, r0, #31
    247e:	4318      	orrs	r0, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2480:	60d0      	str	r0, [r2, #12]
				mpu_configure_region(reg_index, regions[i]);
    2482:	f858 1009 	ldr.w	r1, [r8, r9]
    2486:	b2e0      	uxtb	r0, r4
    2488:	f003 fa54 	bl	5934 <mpu_configure_region>
    248c:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    248e:	f110 0f16 	cmn.w	r0, #22
    2492:	d0e2      	beq.n	245a <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    2494:	3401      	adds	r4, #1
    2496:	e016      	b.n	24c6 <mpu_configure_regions_and_partition+0xd2>
				regions[i]->start - 1);
    2498:	3b01      	subs	r3, #1
	MPU->RNR = index;
    249a:	494d      	ldr	r1, [pc, #308]	; (25d0 <mpu_configure_regions_and_partition+0x1dc>)
    249c:	f8c1 c008 	str.w	ip, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    24a0:	690a      	ldr	r2, [r1, #16]
    24a2:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    24a6:	f023 031f 	bic.w	r3, r3, #31
    24aa:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    24ac:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, regions[i]);
    24ae:	f858 1009 	ldr.w	r1, [r8, r9]
    24b2:	b2e0      	uxtb	r0, r4
    24b4:	f003 fa3e 	bl	5934 <mpu_configure_region>
    24b8:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    24ba:	f110 0f16 	cmn.w	r0, #22
    24be:	d0cc      	beq.n	245a <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    24c0:	3401      	adds	r4, #1
    24c2:	e000      	b.n	24c6 <mpu_configure_regions_and_partition+0xd2>
			reg_index++;
    24c4:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    24c6:	3501      	adds	r5, #1
    24c8:	455d      	cmp	r5, fp
    24ca:	dac6      	bge.n	245a <mpu_configure_regions_and_partition+0x66>
		if (regions[i]->size == 0U) {
    24cc:	ea4f 0985 	mov.w	r9, r5, lsl #2
    24d0:	f858 6025 	ldr.w	r6, [r8, r5, lsl #2]
    24d4:	6877      	ldr	r7, [r6, #4]
    24d6:	2f00      	cmp	r7, #0
    24d8:	d0f5      	beq.n	24c6 <mpu_configure_regions_and_partition+0xd2>
		if (do_sanity_check &&
    24da:	9b01      	ldr	r3, [sp, #4]
    24dc:	b123      	cbz	r3, 24e8 <mpu_configure_regions_and_partition+0xf4>
			(!mpu_partition_is_valid(regions[i]))) {
    24de:	4630      	mov	r0, r6
    24e0:	f003 fa16 	bl	5910 <mpu_partition_is_valid>
		if (do_sanity_check &&
    24e4:	2800      	cmp	r0, #0
    24e6:	d08e      	beq.n	2406 <mpu_configure_regions_and_partition+0x12>
			get_region_index(regions[i]->start, regions[i]->size);
    24e8:	f8d6 a000 	ldr.w	sl, [r6]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    24ec:	4650      	mov	r0, sl
    24ee:	f003 fa40 	bl	5972 <arm_cmse_mpu_region_get>
    24f2:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    24f4:	eb07 000a 	add.w	r0, r7, sl
    24f8:	3801      	subs	r0, #1
    24fa:	f003 fa3a 	bl	5972 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    24fe:	4286      	cmp	r6, r0
    2500:	d194      	bne.n	242c <mpu_configure_regions_and_partition+0x38>
		if ((u_reg_index == -EINVAL) ||
    2502:	f116 0f16 	cmn.w	r6, #22
    2506:	d094      	beq.n	2432 <mpu_configure_regions_and_partition+0x3e>
			(u_reg_index > (reg_index - 1))) {
    2508:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    250a:	42b3      	cmp	r3, r6
    250c:	db91      	blt.n	2432 <mpu_configure_regions_and_partition+0x3e>
		u32_t u_reg_base = mpu_region_get_base(u_reg_index);
    250e:	46b4      	mov	ip, r6
	MPU->RNR = index;
    2510:	4b2f      	ldr	r3, [pc, #188]	; (25d0 <mpu_configure_regions_and_partition+0x1dc>)
    2512:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2514:	68da      	ldr	r2, [r3, #12]
    2516:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = index;
    251a:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    251c:	691f      	ldr	r7, [r3, #16]
    251e:	f047 071f 	orr.w	r7, r7, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    2522:	f858 1009 	ldr.w	r1, [r8, r9]
    2526:	680b      	ldr	r3, [r1, #0]
    2528:	6848      	ldr	r0, [r1, #4]
    252a:	4418      	add	r0, r3
    252c:	f100 3aff 	add.w	sl, r0, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    2530:	4293      	cmp	r3, r2
    2532:	d096      	beq.n	2462 <mpu_configure_regions_and_partition+0x6e>
		} else if (regions[i]->start == u_reg_base) {
    2534:	4293      	cmp	r3, r2
    2536:	d09a      	beq.n	246e <mpu_configure_regions_and_partition+0x7a>
		} else if (reg_last == u_reg_last) {
    2538:	45ba      	cmp	sl, r7
    253a:	d0ad      	beq.n	2498 <mpu_configure_regions_and_partition+0xa4>
				regions[i]->start - 1);
    253c:	3b01      	subs	r3, #1
	MPU->RNR = index;
    253e:	4924      	ldr	r1, [pc, #144]	; (25d0 <mpu_configure_regions_and_partition+0x1dc>)
    2540:	4666      	mov	r6, ip
    2542:	f8c1 c008 	str.w	ip, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2546:	690a      	ldr	r2, [r1, #16]
    2548:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    254c:	f023 031f 	bic.w	r3, r3, #31
    2550:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2552:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, regions[i]);
    2554:	f858 1009 	ldr.w	r1, [r8, r9]
    2558:	b2e0      	uxtb	r0, r4
    255a:	f003 f9eb 	bl	5934 <mpu_configure_region>
    255e:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    2560:	f110 0f16 	cmn.w	r0, #22
    2564:	f43f af79 	beq.w	245a <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    2568:	3001      	adds	r0, #1
	MPU->RNR = index;
    256a:	4b19      	ldr	r3, [pc, #100]	; (25d0 <mpu_configure_regions_and_partition+0x1dc>)
    256c:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
    256e:	68d9      	ldr	r1, [r3, #12]
    2570:	f89d 2010 	ldrb.w	r2, [sp, #16]
    2574:	f361 0204 	bfi	r2, r1, #0, #5
    2578:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    257c:	691b      	ldr	r3, [r3, #16]
    257e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    2582:	b2d2      	uxtb	r2, r2
    2584:	f363 1247 	bfi	r2, r3, #5, #3
    2588:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i]->start +
    258c:	f858 2009 	ldr.w	r2, [r8, r9]
    2590:	6811      	ldr	r1, [r2, #0]
				regions[i]->size;
    2592:	6854      	ldr	r4, [r2, #4]
			fill_region.base = regions[i]->start +
    2594:	4421      	add	r1, r4
    2596:	9102      	str	r1, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    2598:	6813      	ldr	r3, [r2, #0]
    259a:	4423      	add	r3, r4
    259c:	f023 031f 	bic.w	r3, r3, #31
    25a0:	eba7 070a 	sub.w	r7, r7, sl
    25a4:	441f      	add	r7, r3
    25a6:	3f01      	subs	r7, #1
    25a8:	f027 071f 	bic.w	r7, r7, #31
			fill_region.attr.r_limit =
    25ac:	9705      	str	r7, [sp, #20]
				region_allocate_and_init(reg_index,
    25ae:	a902      	add	r1, sp, #8
    25b0:	b2c0      	uxtb	r0, r0
    25b2:	f7ff fefb 	bl	23ac <region_allocate_and_init>
    25b6:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    25b8:	f110 0f16 	cmn.w	r0, #22
    25bc:	d182      	bne.n	24c4 <mpu_configure_regions_and_partition+0xd0>
    25be:	e74c      	b.n	245a <mpu_configure_regions_and_partition+0x66>
    25c0:	00007e58 	.word	0x00007e58
    25c4:	00007e48 	.word	0x00007e48
    25c8:	000085ac 	.word	0x000085ac
    25cc:	000085d0 	.word	0x000085d0
    25d0:	e000ed90 	.word	0xe000ed90

000025d4 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
    25d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25d6:	4606      	mov	r6, r0
    25d8:	460f      	mov	r7, r1
	int mpu_reg_index = static_regions_num;
    25da:	4b10      	ldr	r3, [pc, #64]	; (261c <mpu_configure_dynamic_mpu_regions+0x48>)
    25dc:	781d      	ldrb	r5, [r3, #0]
    25de:	462b      	mov	r3, r5

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    25e0:	2b0f      	cmp	r3, #15
    25e2:	dc05      	bgt.n	25f0 <mpu_configure_dynamic_mpu_regions+0x1c>
  mpu->RNR = rnr;
    25e4:	4a0e      	ldr	r2, [pc, #56]	; (2620 <mpu_configure_dynamic_mpu_regions+0x4c>)
    25e6:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    25e8:	2100      	movs	r1, #0
    25ea:	6111      	str	r1, [r2, #16]
    25ec:	3301      	adds	r3, #1
    25ee:	e7f7      	b.n	25e0 <mpu_configure_dynamic_mpu_regions+0xc>

#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
    25f0:	2400      	movs	r4, #0
    25f2:	e009      	b.n	2608 <mpu_configure_dynamic_mpu_regions+0x34>
		region_init(dyn_reg_info[i].index,
    25f4:	480b      	ldr	r0, [pc, #44]	; (2624 <mpu_configure_dynamic_mpu_regions+0x50>)
    25f6:	00a3      	lsls	r3, r4, #2
    25f8:	4423      	add	r3, r4
    25fa:	009a      	lsls	r2, r3, #2
    25fc:	1881      	adds	r1, r0, r2
    25fe:	3104      	adds	r1, #4
    2600:	5880      	ldr	r0, [r0, r2]
    2602:	f7ff febb 	bl	237c <region_init>
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
    2606:	3401      	adds	r4, #1
    2608:	2c00      	cmp	r4, #0
    260a:	ddf3      	ble.n	25f4 <mpu_configure_dynamic_mpu_regions+0x20>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
    260c:	2301      	movs	r3, #1
    260e:	462a      	mov	r2, r5
    2610:	4639      	mov	r1, r7
    2612:	4630      	mov	r0, r6
    2614:	f7ff feee 	bl	23f4 <mpu_configure_regions_and_partition>
	mpu_reg_index = mpu_configure_regions(dynamic_regions,
		regions_num, mpu_reg_index, true);

#endif /* CONFIG_MPU_GAP_FILLING */
	return mpu_reg_index;
}
    2618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    261a:	bf00      	nop
    261c:	20002727 	.word	0x20002727
    2620:	e000ed90 	.word	0xe000ed90
    2624:	200025b0 	.word	0x200025b0

00002628 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2628:	4b03      	ldr	r3, [pc, #12]	; (2638 <arm_core_mpu_enable+0x10>)
    262a:	2205      	movs	r2, #5
    262c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    262e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2632:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2636:	4770      	bx	lr
    2638:	e000ed90 	.word	0xe000ed90

0000263c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    263c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2640:	4b01      	ldr	r3, [pc, #4]	; (2648 <arm_core_mpu_disable+0xc>)
    2642:	2200      	movs	r2, #0
    2644:	605a      	str	r2, [r3, #4]
}
    2646:	4770      	bx	lr
    2648:	e000ed90 	.word	0xe000ed90

0000264c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    264c:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    264e:	4b0e      	ldr	r3, [pc, #56]	; (2688 <arm_mpu_init+0x3c>)
    2650:	681d      	ldr	r5, [r3, #0]
    2652:	2d10      	cmp	r5, #16
    2654:	d815      	bhi.n	2682 <arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2656:	f7ff fff1 	bl	263c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();
    265a:	f7ff fe87 	bl	236c <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    265e:	2400      	movs	r4, #0
    2660:	42a5      	cmp	r5, r4
    2662:	d908      	bls.n	2676 <arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2664:	4b08      	ldr	r3, [pc, #32]	; (2688 <arm_mpu_init+0x3c>)
    2666:	6859      	ldr	r1, [r3, #4]
    2668:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    266c:	4620      	mov	r0, r4
    266e:	f7ff fe85 	bl	237c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2672:	3401      	adds	r4, #1
    2674:	e7f4      	b.n	2660 <arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2676:	4b05      	ldr	r3, [pc, #20]	; (268c <arm_mpu_init+0x40>)
    2678:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    267a:	f7ff ffd5 	bl	2628 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    267e:	2000      	movs	r0, #0
}
    2680:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    2682:	f04f 30ff 	mov.w	r0, #4294967295
    2686:	e7fb      	b.n	2680 <arm_mpu_init+0x34>
    2688:	0000861c 	.word	0x0000861c
    268c:	20002727 	.word	0x20002727

00002690 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2690:	4b01      	ldr	r3, [pc, #4]	; (2698 <__stdout_hook_install+0x8>)
    2692:	6018      	str	r0, [r3, #0]
}
    2694:	4770      	bx	lr
    2696:	bf00      	nop
    2698:	20005740 	.word	0x20005740

0000269c <gpiote_channel_alloc>:
	return port->config->config_info;
}

static int gpiote_channel_alloc(u32_t abs_pin, nrf_gpiote_polarity_t polarity)
{
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    269c:	2300      	movs	r3, #0
    269e:	2b07      	cmp	r3, #7
    26a0:	d83d      	bhi.n	271e <gpiote_channel_alloc+0x82>
{
    26a2:	b4f0      	push	{r4, r5, r6, r7}
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    26a4:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    26a8:	4c1e      	ldr	r4, [pc, #120]	; (2724 <gpiote_channel_alloc+0x88>)
    26aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    26ae:	f012 0f03 	tst.w	r2, #3
    26b2:	d007      	beq.n	26c4 <gpiote_channel_alloc+0x28>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    26b4:	3301      	adds	r3, #1
    26b6:	b2db      	uxtb	r3, r3
    26b8:	2b07      	cmp	r3, #7
    26ba:	d9f3      	bls.n	26a4 <gpiote_channel_alloc+0x8>
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
			return 0;
		}
	}

	return -ENODEV;
    26bc:	f06f 0012 	mvn.w	r0, #18
}
    26c0:	bcf0      	pop	{r4, r5, r6, r7}
    26c2:	4770      	bx	lr
			nrf_gpiote_event_t evt =
    26c4:	f103 0240 	add.w	r2, r3, #64	; 0x40
    26c8:	0092      	lsls	r2, r2, #2
    26ca:	b294      	uxth	r4, r2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    26cc:	4e15      	ldr	r6, [pc, #84]	; (2724 <gpiote_channel_alloc+0x88>)
    26ce:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    26d2:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
    26d6:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    26da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    26de:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    26e2:	f856 7025 	ldr.w	r7, [r6, r5, lsl #2]
    26e6:	0200      	lsls	r0, r0, #8
    26e8:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    26ec:	040a      	lsls	r2, r1, #16
    26ee:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    26f2:	4310      	orrs	r0, r2
    26f4:	4338      	orrs	r0, r7
    26f6:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
    return ((uint32_t)p_reg + event);
    26fa:	f104 42a0 	add.w	r2, r4, #1342177280	; 0x50000000
    26fe:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2702:	2000      	movs	r0, #0
    2704:	6010      	str	r0, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2706:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
    270a:	f042 0201 	orr.w	r2, r2, #1
    270e:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    2712:	2201      	movs	r2, #1
    2714:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    2718:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
			return 0;
    271c:	e7d0      	b.n	26c0 <gpiote_channel_alloc+0x24>
	return -ENODEV;
    271e:	f06f 0012 	mvn.w	r0, #18
}
    2722:	4770      	bx	lr
    2724:	5000d000 	.word	0x5000d000

00002728 <gpiote_channel_free>:

static void gpiote_channel_free(u32_t abs_pin)
{
    2728:	b410      	push	{r4}
    return p_reg->INTENSET & mask;
    272a:	4b13      	ldr	r3, [pc, #76]	; (2778 <gpiote_channel_free+0x50>)
    272c:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    2730:	b2e4      	uxtb	r4, r4
	u32_t intenset = nrf_gpiote_int_enable_check(NRF_GPIOTE,
						     NRF_GPIOTE_INT_IN_MASK);

	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2732:	2300      	movs	r3, #0
    2734:	e000      	b.n	2738 <gpiote_channel_free+0x10>
    2736:	3301      	adds	r3, #1
    2738:	2b07      	cmp	r3, #7
    273a:	d81b      	bhi.n	2774 <gpiote_channel_free+0x4c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    273c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    2740:	490d      	ldr	r1, [pc, #52]	; (2778 <gpiote_channel_free+0x50>)
    2742:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2746:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    274a:	4290      	cmp	r0, r2
    274c:	d1f3      	bne.n	2736 <gpiote_channel_free+0xe>
		    && (intenset & BIT(i))) {
    274e:	fa24 f203 	lsr.w	r2, r4, r3
    2752:	f012 0f01 	tst.w	r2, #1
    2756:	d0ee      	beq.n	2736 <gpiote_channel_free+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    2758:	460a      	mov	r2, r1
    275a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    275e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    2762:	f021 0101 	bic.w	r1, r1, #1
    2766:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_event_disable(NRF_GPIOTE, i);
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    276a:	2101      	movs	r1, #1
    276c:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->INTENCLR = mask;
    2770:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			return;
		}
	}
}
    2774:	bc10      	pop	{r4}
    2776:	4770      	bx	lr
    2778:	5000d000 	.word	0x5000d000

0000277c <gpiote_pin_int_cfg>:
	}
	return NRF_GPIO_PIN_SENSE_LOW;
}

static int gpiote_pin_int_cfg(struct device *port, u32_t pin)
{
    277c:	b570      	push	{r4, r5, r6, lr}
    277e:	460d      	mov	r5, r1
	return port->driver_data;
    2780:	6886      	ldr	r6, [r0, #8]
	return port->config->config_info;
    2782:	6803      	ldr	r3, [r0, #0]
    2784:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2786:	791b      	ldrb	r3, [r3, #4]
    2788:	f001 041f 	and.w	r4, r1, #31
    278c:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	int res = 0;

	gpiote_channel_free(abs_pin);
    2790:	4620      	mov	r0, r4
    2792:	f7ff ffc9 	bl	2728 <gpiote_channel_free>
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2796:	4a27      	ldr	r2, [pc, #156]	; (2834 <CONFIG_MAIN_STACK_SIZE+0x34>)
    2798:	f104 0180 	add.w	r1, r4, #128	; 0x80
    279c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    27a0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    27a4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);

	/* Pins trigger interrupts only if pin has been configured to do so
	 * and callback has been enabled for that pin.
	 */
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    27a8:	68b3      	ldr	r3, [r6, #8]
    27aa:	40eb      	lsrs	r3, r5
    27ac:	f013 0f01 	tst.w	r3, #1
    27b0:	d03b      	beq.n	282a <CONFIG_MAIN_STACK_SIZE+0x2a>
    27b2:	68f3      	ldr	r3, [r6, #12]
    27b4:	40eb      	lsrs	r3, r5
    27b6:	f013 0f01 	tst.w	r3, #1
    27ba:	d038      	beq.n	282e <CONFIG_MAIN_STACK_SIZE+0x2e>
		if (data->trig_edge & BIT(pin)) {
    27bc:	6973      	ldr	r3, [r6, #20]
    27be:	40eb      	lsrs	r3, r5
    27c0:	f013 0f01 	tst.w	r3, #1
    27c4:	d01a      	beq.n	27fc <gpiote_pin_int_cfg+0x80>
		/* For edge triggering we use GPIOTE channels. */
			nrf_gpiote_polarity_t pol;

			if (data->double_edge & BIT(pin)) {
    27c6:	69b3      	ldr	r3, [r6, #24]
    27c8:	40eb      	lsrs	r3, r5
    27ca:	f013 0f01 	tst.w	r3, #1
    27ce:	d10e      	bne.n	27ee <gpiote_pin_int_cfg+0x72>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
			} else if (((data->active_level & BIT(pin)) != 0U)
    27d0:	6933      	ldr	r3, [r6, #16]
    27d2:	40eb      	lsrs	r3, r5
    27d4:	f003 0301 	and.w	r3, r3, #1
    27d8:	b2da      	uxtb	r2, r3
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    27da:	69f3      	ldr	r3, [r6, #28]
    27dc:	fa23 f505 	lsr.w	r5, r3, r5
    27e0:	f005 0501 	and.w	r5, r5, #1
			} else if (((data->active_level & BIT(pin)) != 0U)
    27e4:	b2ed      	uxtb	r5, r5
    27e6:	42aa      	cmp	r2, r5
    27e8:	d006      	beq.n	27f8 <gpiote_pin_int_cfg+0x7c>
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
    27ea:	2101      	movs	r1, #1
    27ec:	e000      	b.n	27f0 <gpiote_pin_int_cfg+0x74>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    27ee:	2103      	movs	r1, #3
			} else {
				pol = NRF_GPIOTE_POLARITY_HITOLO;
			}

			res = gpiote_channel_alloc(abs_pin, pol);
    27f0:	4620      	mov	r0, r4
    27f2:	f7ff ff53 	bl	269c <gpiote_channel_alloc>
    27f6:	e019      	b.n	282c <CONFIG_MAIN_STACK_SIZE+0x2c>
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    27f8:	2102      	movs	r1, #2
    27fa:	e7f9      	b.n	27f0 <gpiote_pin_int_cfg+0x74>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    27fc:	6933      	ldr	r3, [r6, #16]
    27fe:	69f2      	ldr	r2, [r6, #28]
    2800:	4053      	eors	r3, r2
    2802:	fa23 f505 	lsr.w	r5, r3, r5
    2806:	f015 0f01 	tst.w	r5, #1
    280a:	d10c      	bne.n	2826 <CONFIG_MAIN_STACK_SIZE+0x26>
	return NRF_GPIO_PIN_SENSE_LOW;
    280c:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    280e:	4a09      	ldr	r2, [pc, #36]	; (2834 <CONFIG_MAIN_STACK_SIZE+0x34>)
    2810:	3480      	adds	r4, #128	; 0x80
    2812:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    2816:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    281a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    281e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	int res = 0;
    2822:	2000      	movs	r0, #0
    2824:	e002      	b.n	282c <CONFIG_MAIN_STACK_SIZE+0x2c>
		return NRF_GPIO_PIN_SENSE_HIGH;
    2826:	2102      	movs	r1, #2
    2828:	e7f1      	b.n	280e <CONFIG_MAIN_STACK_SIZE+0xe>
	int res = 0;
    282a:	2000      	movs	r0, #0

			nrf_gpio_cfg_sense_set(abs_pin, sense);
		}
	}
	return res;
}
    282c:	bd70      	pop	{r4, r5, r6, pc}
	int res = 0;
    282e:	2000      	movs	r0, #0
	return res;
    2830:	e7fc      	b.n	282c <CONFIG_MAIN_STACK_SIZE+0x2c>
    2832:	bf00      	nop
    2834:	50842500 	.word	0x50842500

00002838 <gpio_nrfx_config>:

static int gpio_nrfx_config(struct device *port, int access_op,
			    u32_t pin, int flags)
{
    2838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    283c:	b083      	sub	sp, #12
	return port->driver_data;
    283e:	6884      	ldr	r4, [r0, #8]
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;
	u8_t from_pin;
	u8_t to_pin;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    2840:	f403 4570 	and.w	r5, r3, #61440	; 0xf000
    2844:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
    2848:	d037      	beq.n	28ba <gpio_nrfx_config+0x82>
    284a:	dd20      	ble.n	288e <gpio_nrfx_config+0x56>
    284c:	f5b5 4fe0 	cmp.w	r5, #28672	; 0x7000
    2850:	d03f      	beq.n	28d2 <gpio_nrfx_config+0x9a>
    2852:	dd29      	ble.n	28a8 <gpio_nrfx_config+0x70>
    2854:	f5b5 4f40 	cmp.w	r5, #49152	; 0xc000
    2858:	d03e      	beq.n	28d8 <gpio_nrfx_config+0xa0>
    285a:	f5b5 4f50 	cmp.w	r5, #53248	; 0xd000
    285e:	f040 80b0 	bne.w	29c2 <gpio_nrfx_config+0x18a>
		break;
	case GPIO_DS_ALT_LOW | GPIO_DS_ALT_HIGH:
		drive = NRF_GPIO_PIN_H0H1;
		break;
	case GPIO_DS_ALT_LOW | GPIO_DS_DISCONNECT_HIGH:
		drive = NRF_GPIO_PIN_H0D1;
    2862:	f04f 0807 	mov.w	r8, #7

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2866:	f403 7540 	and.w	r5, r3, #768	; 0x300
    286a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    286e:	d039      	beq.n	28e4 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    2870:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    2874:	d033      	beq.n	28de <gpio_nrfx_config+0xa6>
		pull = NRF_GPIO_PIN_PULLDOWN;
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
    2876:	2500      	movs	r5, #0
    2878:	9501      	str	r5, [sp, #4]
    287a:	461e      	mov	r6, r3
    287c:	4607      	mov	r7, r0
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = (dir == NRF_GPIO_PIN_DIR_INPUT)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    287e:	f003 0b01 	and.w	fp, r3, #1
    2882:	46da      	mov	sl, fp

	if (access_op == GPIO_ACCESS_BY_PORT) {
    2884:	2901      	cmp	r1, #1
    2886:	d030      	beq.n	28ea <gpio_nrfx_config+0xb2>
		from_pin = 0U;
		to_pin   = 31U;
	} else {
		from_pin = pin;
    2888:	b2d5      	uxtb	r5, r2
		to_pin   = pin;
    288a:	46a9      	mov	r9, r5
    288c:	e059      	b.n	2942 <gpio_nrfx_config+0x10a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    288e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    2892:	d015      	beq.n	28c0 <gpio_nrfx_config+0x88>
    2894:	f5b5 5f40 	cmp.w	r5, #12288	; 0x3000
    2898:	d015      	beq.n	28c6 <gpio_nrfx_config+0x8e>
    289a:	b1bd      	cbz	r5, 28cc <gpio_nrfx_config+0x94>
		return -EINVAL;
    289c:	f06f 0315 	mvn.w	r3, #21
			return res;
		}
	}

	return 0;
}
    28a0:	4618      	mov	r0, r3
    28a2:	b003      	add	sp, #12
    28a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    28a8:	f5b5 4fa0 	cmp.w	r5, #20480	; 0x5000
    28ac:	d102      	bne.n	28b4 <gpio_nrfx_config+0x7c>
		drive = NRF_GPIO_PIN_H0H1;
    28ae:	f04f 0803 	mov.w	r8, #3
    28b2:	e7d8      	b.n	2866 <gpio_nrfx_config+0x2e>
		return -EINVAL;
    28b4:	f06f 0315 	mvn.w	r3, #21
    28b8:	e7f2      	b.n	28a0 <gpio_nrfx_config+0x68>
		drive = NRF_GPIO_PIN_S0H1;
    28ba:	f04f 0802 	mov.w	r8, #2
    28be:	e7d2      	b.n	2866 <gpio_nrfx_config+0x2e>
		drive = NRF_GPIO_PIN_H0S1;
    28c0:	f04f 0801 	mov.w	r8, #1
    28c4:	e7cf      	b.n	2866 <gpio_nrfx_config+0x2e>
		drive = NRF_GPIO_PIN_D0S1;
    28c6:	f04f 0804 	mov.w	r8, #4
    28ca:	e7cc      	b.n	2866 <gpio_nrfx_config+0x2e>
		drive = NRF_GPIO_PIN_S0S1;
    28cc:	f04f 0800 	mov.w	r8, #0
    28d0:	e7c9      	b.n	2866 <gpio_nrfx_config+0x2e>
		drive = NRF_GPIO_PIN_D0H1;
    28d2:	f04f 0805 	mov.w	r8, #5
    28d6:	e7c6      	b.n	2866 <gpio_nrfx_config+0x2e>
		drive = NRF_GPIO_PIN_S0D1;
    28d8:	f04f 0806 	mov.w	r8, #6
    28dc:	e7c3      	b.n	2866 <gpio_nrfx_config+0x2e>
		pull = NRF_GPIO_PIN_PULLDOWN;
    28de:	2501      	movs	r5, #1
    28e0:	9501      	str	r5, [sp, #4]
    28e2:	e7ca      	b.n	287a <gpio_nrfx_config+0x42>
		pull = NRF_GPIO_PIN_PULLUP;
    28e4:	2503      	movs	r5, #3
    28e6:	9501      	str	r5, [sp, #4]
    28e8:	e7c7      	b.n	287a <gpio_nrfx_config+0x42>
		to_pin   = 31U;
    28ea:	f04f 091f 	mov.w	r9, #31
		from_pin = 0U;
    28ee:	2500      	movs	r5, #0
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    28f0:	e027      	b.n	2942 <gpio_nrfx_config+0x10a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    28f2:	68a3      	ldr	r3, [r4, #8]
    28f4:	2201      	movs	r2, #1
    28f6:	40aa      	lsls	r2, r5
    28f8:	ea23 0302 	bic.w	r3, r3, r2
    28fc:	e03d      	b.n	297a <gpio_nrfx_config+0x142>
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    28fe:	6963      	ldr	r3, [r4, #20]
    2900:	2201      	movs	r2, #1
    2902:	408a      	lsls	r2, r1
    2904:	ea23 0302 	bic.w	r3, r3, r2
    2908:	e03f      	b.n	298a <gpio_nrfx_config+0x152>
		WRITE_BIT(data->double_edge, curr_pin,
    290a:	69a3      	ldr	r3, [r4, #24]
    290c:	2201      	movs	r2, #1
    290e:	408a      	lsls	r2, r1
    2910:	ea23 0302 	bic.w	r3, r3, r2
    2914:	e041      	b.n	299a <gpio_nrfx_config+0x162>
		WRITE_BIT(data->active_level, curr_pin,
    2916:	6923      	ldr	r3, [r4, #16]
    2918:	2201      	movs	r2, #1
    291a:	408a      	lsls	r2, r1
    291c:	ea23 0302 	bic.w	r3, r3, r2
    2920:	e043      	b.n	29aa <gpio_nrfx_config+0x172>
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    2922:	69e3      	ldr	r3, [r4, #28]
    2924:	2201      	movs	r2, #1
    2926:	fa02 f101 	lsl.w	r1, r2, r1
    292a:	ea23 0101 	bic.w	r1, r3, r1
    292e:	61e1      	str	r1, [r4, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    2930:	4629      	mov	r1, r5
    2932:	4638      	mov	r0, r7
    2934:	f7ff ff22 	bl	277c <gpiote_pin_int_cfg>
		if (res != 0) {
    2938:	4603      	mov	r3, r0
    293a:	2800      	cmp	r0, #0
    293c:	d1b0      	bne.n	28a0 <gpio_nrfx_config+0x68>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    293e:	3501      	adds	r5, #1
    2940:	b2ed      	uxtb	r5, r5
    2942:	45a9      	cmp	r9, r5
    2944:	d33b      	bcc.n	29be <gpio_nrfx_config+0x186>
	return port->config->config_info;
    2946:	683b      	ldr	r3, [r7, #0]
    2948:	689b      	ldr	r3, [r3, #8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    294a:	791a      	ldrb	r2, [r3, #4]
    294c:	4629      	mov	r1, r5
    294e:	f005 031f 	and.w	r3, r5, #31
    2952:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    2956:	ea4b 024a 	orr.w	r2, fp, sl, lsl #1
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    295a:	9801      	ldr	r0, [sp, #4]
    295c:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2960:	ea42 2208 	orr.w	r2, r2, r8, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2964:	3380      	adds	r3, #128	; 0x80
    2966:	4818      	ldr	r0, [pc, #96]	; (29c8 <gpio_nrfx_config+0x190>)
    2968:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    296c:	f016 0f02 	tst.w	r6, #2
    2970:	d0bf      	beq.n	28f2 <gpio_nrfx_config+0xba>
    2972:	68a3      	ldr	r3, [r4, #8]
    2974:	2201      	movs	r2, #1
    2976:	40aa      	lsls	r2, r5
    2978:	4313      	orrs	r3, r2
    297a:	60a3      	str	r3, [r4, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    297c:	f016 0f20 	tst.w	r6, #32
    2980:	d0bd      	beq.n	28fe <gpio_nrfx_config+0xc6>
    2982:	6963      	ldr	r3, [r4, #20]
    2984:	2201      	movs	r2, #1
    2986:	408a      	lsls	r2, r1
    2988:	4313      	orrs	r3, r2
    298a:	6163      	str	r3, [r4, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    298c:	f016 0f40 	tst.w	r6, #64	; 0x40
    2990:	d0bb      	beq.n	290a <gpio_nrfx_config+0xd2>
    2992:	69a3      	ldr	r3, [r4, #24]
    2994:	2201      	movs	r2, #1
    2996:	408a      	lsls	r2, r1
    2998:	4313      	orrs	r3, r2
    299a:	61a3      	str	r3, [r4, #24]
		WRITE_BIT(data->active_level, curr_pin,
    299c:	f016 0f04 	tst.w	r6, #4
    29a0:	d0b9      	beq.n	2916 <gpio_nrfx_config+0xde>
    29a2:	6923      	ldr	r3, [r4, #16]
    29a4:	2201      	movs	r2, #1
    29a6:	408a      	lsls	r2, r1
    29a8:	4313      	orrs	r3, r2
    29aa:	6123      	str	r3, [r4, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    29ac:	f016 0f80 	tst.w	r6, #128	; 0x80
    29b0:	d0b7      	beq.n	2922 <gpio_nrfx_config+0xea>
    29b2:	69e3      	ldr	r3, [r4, #28]
    29b4:	2201      	movs	r2, #1
    29b6:	fa02 f101 	lsl.w	r1, r2, r1
    29ba:	4319      	orrs	r1, r3
    29bc:	e7b7      	b.n	292e <gpio_nrfx_config+0xf6>
	return 0;
    29be:	2300      	movs	r3, #0
    29c0:	e76e      	b.n	28a0 <gpio_nrfx_config+0x68>
		return -EINVAL;
    29c2:	f06f 0315 	mvn.w	r3, #21
    29c6:	e76b      	b.n	28a0 <gpio_nrfx_config+0x68>
    29c8:	50842500 	.word	0x50842500

000029cc <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(struct device *port)
{
    29cc:	b4f0      	push	{r4, r5, r6, r7}
	return port->driver_data;
    29ce:	6885      	ldr	r5, [r0, #8]
	return port->config->config_info;
    29d0:	6803      	ldr	r3, [r0, #0]
    29d2:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    29d4:	68ea      	ldr	r2, [r5, #12]
    29d6:	68ab      	ldr	r3, [r5, #8]
    29d8:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
    29da:	696a      	ldr	r2, [r5, #20]
    29dc:	69a9      	ldr	r1, [r5, #24]
    29de:	430a      	orrs	r2, r1
    29e0:	ea23 0302 	bic.w	r3, r3, r2
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	u32_t pin = 0U;
	u32_t bit = 1U << pin;
    29e4:	2201      	movs	r2, #1
	u32_t pin = 0U;
    29e6:	2000      	movs	r0, #0
	u32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    29e8:	e00f      	b.n	2a0a <cfg_level_pins+0x3e>
		return NRF_GPIO_PIN_SENSE_HIGH;
    29ea:	f04f 0c02 	mov.w	ip, #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    29ee:	4f11      	ldr	r7, [pc, #68]	; (2a34 <cfg_level_pins+0x68>)
    29f0:	3180      	adds	r1, #128	; 0x80
    29f2:	f857 4021 	ldr.w	r4, [r7, r1, lsl #2]
    29f6:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    29fa:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
    29fe:	f847 4021 	str.w	r4, [r7, r1, lsl #2]
		if (level_pins & bit) {
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			u32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    2a02:	ea23 0302 	bic.w	r3, r3, r2
		}
		++pin;
    2a06:	3001      	adds	r0, #1
		bit <<= 1;
    2a08:	0052      	lsls	r2, r2, #1
	while (level_pins) {
    2a0a:	b183      	cbz	r3, 2a2e <cfg_level_pins+0x62>
		if (level_pins & bit) {
    2a0c:	421a      	tst	r2, r3
    2a0e:	d0fa      	beq.n	2a06 <cfg_level_pins+0x3a>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a10:	7934      	ldrb	r4, [r6, #4]
    2a12:	f000 011f 	and.w	r1, r0, #31
    2a16:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2a1a:	692c      	ldr	r4, [r5, #16]
    2a1c:	69ef      	ldr	r7, [r5, #28]
    2a1e:	407c      	eors	r4, r7
    2a20:	40c4      	lsrs	r4, r0
    2a22:	f014 0f01 	tst.w	r4, #1
    2a26:	d1e0      	bne.n	29ea <cfg_level_pins+0x1e>
	return NRF_GPIO_PIN_SENSE_LOW;
    2a28:	f04f 0c03 	mov.w	ip, #3
    2a2c:	e7df      	b.n	29ee <cfg_level_pins+0x22>
	}
}
    2a2e:	bcf0      	pop	{r4, r5, r6, r7}
    2a30:	4770      	bx	lr
    2a32:	bf00      	nop
    2a34:	50842500 	.word	0x50842500

00002a38 <check_level_trigger_pins>:
 * @param port Pointer to GPIO port device.
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static u32_t check_level_trigger_pins(struct device *port)
{
    2a38:	b4f0      	push	{r4, r5, r6, r7}
	return port->driver_data;
    2a3a:	6881      	ldr	r1, [r0, #8]
	return port->config->config_info;
    2a3c:	6803      	ldr	r3, [r0, #0]
    2a3e:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    2a40:	68cb      	ldr	r3, [r1, #12]
    2a42:	688a      	ldr	r2, [r1, #8]
    2a44:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
    2a46:	694a      	ldr	r2, [r1, #20]
    2a48:	6988      	ldr	r0, [r1, #24]
    2a4a:	4302      	orrs	r2, r0
    2a4c:	ea23 0302 	bic.w	r3, r3, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	u32_t level_pins = get_level_pins(port);
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    2a50:	683a      	ldr	r2, [r7, #0]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    2a52:	6910      	ldr	r0, [r2, #16]

	/* Extract which pins after inversion, have logic level same as
	 * interrupt trigger level.
	 */
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    2a54:	69ca      	ldr	r2, [r1, #28]
    2a56:	4050      	eors	r0, r2
    2a58:	690a      	ldr	r2, [r1, #16]
    2a5a:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	u32_t out = pin_states & level_pins;
    2a5c:	ea23 0000 	bic.w	r0, r3, r0
	/* Disable sense detection on all pins that use it, whether
	 * they appear to have triggered or not.  This ensures
	 * nobody's requesting DETECT.
	 */
	u32_t pin = 0U;
	u32_t bit = 1U << pin;
    2a60:	2201      	movs	r2, #1
	u32_t pin = 0U;
    2a62:	2400      	movs	r4, #0

	while (level_pins) {
    2a64:	e001      	b.n	2a6a <check_level_trigger_pins+0x32>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			level_pins &= ~bit;
		}
		++pin;
    2a66:	3401      	adds	r4, #1
		bit <<= 1;
    2a68:	0052      	lsls	r2, r2, #1
	while (level_pins) {
    2a6a:	b18b      	cbz	r3, 2a90 <check_level_trigger_pins+0x58>
		if (level_pins & bit) {
    2a6c:	4213      	tst	r3, r2
    2a6e:	d0fa      	beq.n	2a66 <check_level_trigger_pins+0x2e>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a70:	793d      	ldrb	r5, [r7, #4]
    2a72:	f004 011f 	and.w	r1, r4, #31
    2a76:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2a7a:	4e06      	ldr	r6, [pc, #24]	; (2a94 <check_level_trigger_pins+0x5c>)
    2a7c:	3180      	adds	r1, #128	; 0x80
    2a7e:	f856 5021 	ldr.w	r5, [r6, r1, lsl #2]
    2a82:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2a86:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
			level_pins &= ~bit;
    2a8a:	ea23 0302 	bic.w	r3, r3, r2
    2a8e:	e7ea      	b.n	2a66 <check_level_trigger_pins+0x2e>
	}

	return out;
}
    2a90:	bcf0      	pop	{r4, r5, r6, r7}
    2a92:	4770      	bx	lr
    2a94:	50842500 	.word	0x50842500

00002a98 <gpiote_event_handler>:
#ifdef CONFIG_GPIO_NRF_P1
DEVICE_DECLARE(gpio_nrfx_p1);
#endif

static void gpiote_event_handler(void)
{
    2a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a9a:	b083      	sub	sp, #12
	u32_t fired_triggers[GPIO_COUNT] = {0};
    2a9c:	2300      	movs	r3, #0
    2a9e:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2aa0:	4b2e      	ldr	r3, [pc, #184]	; (2b5c <gpiote_event_handler+0xc4>)
    2aa2:	681c      	ldr	r4, [r3, #0]
	bool port_event = nrf_gpiote_event_check(NRF_GPIOTE,
						 NRF_GPIOTE_EVENT_PORT);

	if (port_event) {
    2aa4:	b90c      	cbnz	r4, 2aaa <gpiote_event_handler+0x12>
{
    2aa6:	2100      	movs	r1, #0
    2aa8:	e008      	b.n	2abc <gpiote_event_handler+0x24>
#ifdef CONFIG_GPIO_NRF_P0
		fired_triggers[0] =
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    2aaa:	482d      	ldr	r0, [pc, #180]	; (2b60 <gpiote_event_handler+0xc8>)
    2aac:	f7ff ffc4 	bl	2a38 <check_level_trigger_pins>
		fired_triggers[0] =
    2ab0:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2ab2:	4b2a      	ldr	r3, [pc, #168]	; (2b5c <gpiote_event_handler+0xc4>)
    2ab4:	2200      	movs	r2, #0
    2ab6:	601a      	str	r2, [r3, #0]
    2ab8:	e7f5      	b.n	2aa6 <gpiote_event_handler+0xe>
		 */
		nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
	}

	/* Handle interrupt from GPIOTE channels. */
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2aba:	3101      	adds	r1, #1
    2abc:	2907      	cmp	r1, #7
    2abe:	d825      	bhi.n	2b0c <gpiote_event_handler+0x74>
		nrf_gpiote_event_t evt =
    2ac0:	f101 0340 	add.w	r3, r1, #64	; 0x40
    2ac4:	009b      	lsls	r3, r3, #2
    2ac6:	b29a      	uxth	r2, r3
			offsetof(NRF_GPIOTE_Type, EVENTS_IN[i]);

		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2ac8:	2301      	movs	r3, #1
    2aca:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    2acc:	4825      	ldr	r0, [pc, #148]	; (2b64 <gpiote_event_handler+0xcc>)
    2ace:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    2ad2:	4203      	tst	r3, r0
    2ad4:	d0f1      	beq.n	2aba <gpiote_event_handler+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2ad6:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    2ada:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    2ade:	681b      	ldr	r3, [r3, #0]
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d0ea      	beq.n	2aba <gpiote_event_handler+0x22>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2ae4:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    2ae8:	481e      	ldr	r0, [pc, #120]	; (2b64 <gpiote_event_handler+0xcc>)
    2aea:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    2aee:	f3c0 2004 	ubfx	r0, r0, #8, #5
		    nrf_gpiote_event_check(NRF_GPIOTE, evt)) {
			u32_t abs_pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, i);
			/* Divide absolute pin number to port and pin parts. */
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2af2:	2301      	movs	r3, #1
    2af4:	fa03 f000 	lsl.w	r0, r3, r0
    2af8:	9b01      	ldr	r3, [sp, #4]
    2afa:	4303      	orrs	r3, r0
    2afc:	9301      	str	r3, [sp, #4]
    return ((uint32_t)p_reg + event);
    2afe:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    2b02:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2b06:	2200      	movs	r2, #0
    2b08:	601a      	str	r2, [r3, #0]
    2b0a:	e7d6      	b.n	2aba <gpiote_event_handler+0x22>
			nrf_gpiote_event_clear(NRF_GPIOTE, evt);
		}
	}

#ifdef CONFIG_GPIO_NRF_P0
	if (fired_triggers[0]) {
    2b0c:	9e01      	ldr	r6, [sp, #4]
    2b0e:	b916      	cbnz	r6, 2b16 <gpiote_event_handler+0x7e>
	if (fired_triggers[1]) {
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
	}
#endif

	if (port_event) {
    2b10:	b9fc      	cbnz	r4, 2b52 <gpiote_event_handler+0xba>
#endif
#ifdef CONFIG_GPIO_NRF_P1
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
#endif
	}
}
    2b12:	b003      	add	sp, #12
    2b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return port->driver_data;
    2b16:	4b12      	ldr	r3, [pc, #72]	; (2b60 <gpiote_event_handler+0xc8>)
    2b18:	689f      	ldr	r7, [r3, #8]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2b1a:	6839      	ldr	r1, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2b1c:	b119      	cbz	r1, 2b26 <gpiote_event_handler+0x8e>
    2b1e:	460d      	mov	r5, r1
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    2b20:	b149      	cbz	r1, 2b36 <gpiote_event_handler+0x9e>
	return node->next;
    2b22:	680d      	ldr	r5, [r1, #0]
    2b24:	e007      	b.n	2b36 <gpiote_event_handler+0x9e>
    2b26:	460d      	mov	r5, r1
    2b28:	e005      	b.n	2b36 <gpiote_event_handler+0x9e>
    2b2a:	b185      	cbz	r5, 2b4e <gpiote_event_handler+0xb6>
    2b2c:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    2b2e:	b105      	cbz	r5, 2b32 <gpiote_event_handler+0x9a>
	return node->next;
    2b30:	682b      	ldr	r3, [r5, #0]
    2b32:	4629      	mov	r1, r5
    2b34:	461d      	mov	r5, r3
    2b36:	2900      	cmp	r1, #0
    2b38:	d0ea      	beq.n	2b10 <gpiote_event_handler+0x78>
		if ((cb->pin_mask & pins) & data->int_en) {
    2b3a:	688b      	ldr	r3, [r1, #8]
    2b3c:	4033      	ands	r3, r6
    2b3e:	68fa      	ldr	r2, [r7, #12]
    2b40:	4213      	tst	r3, r2
    2b42:	d0f2      	beq.n	2b2a <gpiote_event_handler+0x92>
			cb->handler(port, cb, pins);
    2b44:	684b      	ldr	r3, [r1, #4]
    2b46:	4632      	mov	r2, r6
    2b48:	4805      	ldr	r0, [pc, #20]	; (2b60 <gpiote_event_handler+0xc8>)
    2b4a:	4798      	blx	r3
    2b4c:	e7ed      	b.n	2b2a <gpiote_event_handler+0x92>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2b4e:	462b      	mov	r3, r5
    2b50:	e7ef      	b.n	2b32 <gpiote_event_handler+0x9a>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    2b52:	4803      	ldr	r0, [pc, #12]	; (2b60 <gpiote_event_handler+0xc8>)
    2b54:	f7ff ff3a 	bl	29cc <cfg_level_pins>
}
    2b58:	e7db      	b.n	2b12 <gpiote_event_handler+0x7a>
    2b5a:	bf00      	nop
    2b5c:	5000d17c 	.word	0x5000d17c
    2b60:	200057f8 	.word	0x200057f8
    2b64:	5000d000 	.word	0x5000d000

00002b68 <gpio_nrfx_init>:

static int gpio_nrfx_init(struct device *port)
{
    2b68:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    2b6a:	4b0b      	ldr	r3, [pc, #44]	; (2b98 <gpio_nrfx_init+0x30>)
    2b6c:	781b      	ldrb	r3, [r3, #0]
    2b6e:	b10b      	cbz	r3, 2b74 <gpio_nrfx_init+0xc>
		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    2b70:	2000      	movs	r0, #0
    2b72:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    2b74:	4b08      	ldr	r3, [pc, #32]	; (2b98 <gpio_nrfx_init+0x30>)
    2b76:	2201      	movs	r2, #1
    2b78:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    2b7a:	2200      	movs	r2, #0
    2b7c:	2105      	movs	r1, #5
    2b7e:	200d      	movs	r0, #13
    2b80:	f7ff fa66 	bl	2050 <z_arm_irq_priority_set>
		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    2b84:	200d      	movs	r0, #13
    2b86:	f7ff fa53 	bl	2030 <arch_irq_enable>
    p_reg->INTENSET = mask;
    2b8a:	4b04      	ldr	r3, [pc, #16]	; (2b9c <gpio_nrfx_init+0x34>)
    2b8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2b90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    2b94:	e7ec      	b.n	2b70 <gpio_nrfx_init+0x8>
    2b96:	bf00      	nop
    2b98:	20002728 	.word	0x20002728
    2b9c:	5000d000 	.word	0x5000d000

00002ba0 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    2ba0:	4b03      	ldr	r3, [pc, #12]	; (2bb0 <nvmc_wait_ready+0x10>)
    2ba2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
    2ba6:	f013 0f01 	tst.w	r3, #1
    2baa:	d0f9      	beq.n	2ba0 <nvmc_wait_ready>
	}
}
    2bac:	4770      	bx	lr
    2bae:	bf00      	nop
    2bb0:	50039000 	.word	0x50039000

00002bb4 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    2bb4:	4b02      	ldr	r3, [pc, #8]	; (2bc0 <flash_nrf_pages_layout+0xc>)
    2bb6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    2bb8:	2301      	movs	r3, #1
    2bba:	6013      	str	r3, [r2, #0]
}
    2bbc:	4770      	bx	lr
    2bbe:	bf00      	nop
    2bc0:	200025e4 	.word	0x200025e4

00002bc4 <nrf_flash_init>:
	.write_block_size = 4,
#endif
};

static int nrf_flash_init(struct device *dev)
{
    2bc4:	b510      	push	{r4, lr}
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	k_sem_init(&sem_sync, 0, 1);
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    2bc6:	f004 fefe 	bl	79c6 <nrfx_nvmc_flash_page_count_get>
    2bca:	4c03      	ldr	r4, [pc, #12]	; (2bd8 <nrf_flash_init+0x14>)
    2bcc:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    2bce:	f004 fef6 	bl	79be <nrfx_nvmc_flash_page_size_get>
    2bd2:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    2bd4:	2000      	movs	r0, #0
    2bd6:	bd10      	pop	{r4, pc}
    2bd8:	200025e4 	.word	0x200025e4

00002bdc <baudrate_set>:
	return dev->driver_data;
}

static inline const struct uarte_nrfx_config *get_dev_config(struct device *dev)
{
	return dev->config->config_info;
    2bdc:	6803      	ldr	r3, [r0, #0]
    2bde:	689b      	ldr	r3, [r3, #8]

static inline NRF_UARTE_Type *get_uarte_instance(struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    2be0:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(struct device *dev, u32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    2be2:	f647 2312 	movw	r3, #31250	; 0x7a12
    2be6:	4299      	cmp	r1, r3
    2be8:	d06d      	beq.n	2cc6 <baudrate_set+0xea>
    2bea:	d910      	bls.n	2c0e <baudrate_set+0x32>
    2bec:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    2bf0:	d078      	beq.n	2ce4 <baudrate_set+0x108>
    2bf2:	d940      	bls.n	2c76 <baudrate_set+0x9a>
    2bf4:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    2bf8:	d07d      	beq.n	2cf6 <baudrate_set+0x11a>
    2bfa:	d858      	bhi.n	2cae <baudrate_set+0xd2>
    2bfc:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2c00:	d07c      	beq.n	2cfc <baudrate_set+0x120>
    2c02:	4b43      	ldr	r3, [pc, #268]	; (2d10 <baudrate_set+0x134>)
    2c04:	4299      	cmp	r1, r3
    2c06:	d14f      	bne.n	2ca8 <baudrate_set+0xcc>
		break;
	case 230400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
		break;
	case 250000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2c08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2c0c:	e057      	b.n	2cbe <baudrate_set+0xe2>
	switch (baudrate) {
    2c0e:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2c12:	d05b      	beq.n	2ccc <baudrate_set+0xf0>
    2c14:	d818      	bhi.n	2c48 <baudrate_set+0x6c>
    2c16:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2c1a:	d059      	beq.n	2cd0 <baudrate_set+0xf4>
    2c1c:	d908      	bls.n	2c30 <baudrate_set+0x54>
    2c1e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    2c22:	d058      	beq.n	2cd6 <baudrate_set+0xfa>
    2c24:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2c28:	d10b      	bne.n	2c42 <baudrate_set+0x66>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2c2a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2c2e:	e046      	b.n	2cbe <baudrate_set+0xe2>
	switch (baudrate) {
    2c30:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2c34:	d102      	bne.n	2c3c <baudrate_set+0x60>
		nrf_baudrate = 0x00014000;
    2c36:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2c3a:	e040      	b.n	2cbe <baudrate_set+0xe2>
		break;
	case 1000000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
		break;
	default:
		return -EINVAL;
    2c3c:	f06f 0015 	mvn.w	r0, #21
    2c40:	4770      	bx	lr
    2c42:	f06f 0015 	mvn.w	r0, #21
    2c46:	4770      	bx	lr
	switch (baudrate) {
    2c48:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2c4c:	d046      	beq.n	2cdc <baudrate_set+0x100>
    2c4e:	d907      	bls.n	2c60 <baudrate_set+0x84>
    2c50:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2c54:	d044      	beq.n	2ce0 <baudrate_set+0x104>
    2c56:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    2c5a:	d109      	bne.n	2c70 <baudrate_set+0x94>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2c5c:	4b2d      	ldr	r3, [pc, #180]	; (2d14 <baudrate_set+0x138>)
    2c5e:	e02e      	b.n	2cbe <baudrate_set+0xe2>
	switch (baudrate) {
    2c60:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    2c64:	d101      	bne.n	2c6a <baudrate_set+0x8e>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2c66:	4b2c      	ldr	r3, [pc, #176]	; (2d18 <baudrate_set+0x13c>)
    2c68:	e029      	b.n	2cbe <baudrate_set+0xe2>
		return -EINVAL;
    2c6a:	f06f 0015 	mvn.w	r0, #21
    2c6e:	4770      	bx	lr
    2c70:	f06f 0015 	mvn.w	r0, #21
    2c74:	4770      	bx	lr
	switch (baudrate) {
    2c76:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    2c7a:	4299      	cmp	r1, r3
    2c7c:	d035      	beq.n	2cea <baudrate_set+0x10e>
    2c7e:	d907      	bls.n	2c90 <baudrate_set+0xb4>
    2c80:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    2c84:	d034      	beq.n	2cf0 <baudrate_set+0x114>
    2c86:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    2c8a:	d10a      	bne.n	2ca2 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2c8c:	4b23      	ldr	r3, [pc, #140]	; (2d1c <baudrate_set+0x140>)
    2c8e:	e016      	b.n	2cbe <baudrate_set+0xe2>
	switch (baudrate) {
    2c90:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    2c94:	d102      	bne.n	2c9c <baudrate_set+0xc0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2c96:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2c9a:	e010      	b.n	2cbe <baudrate_set+0xe2>
		return -EINVAL;
    2c9c:	f06f 0015 	mvn.w	r0, #21
    2ca0:	4770      	bx	lr
    2ca2:	f06f 0015 	mvn.w	r0, #21
    2ca6:	4770      	bx	lr
    2ca8:	f06f 0015 	mvn.w	r0, #21
    2cac:	4770      	bx	lr
	switch (baudrate) {
    2cae:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    2cb2:	d026      	beq.n	2d02 <baudrate_set+0x126>
    2cb4:	4b1a      	ldr	r3, [pc, #104]	; (2d20 <baudrate_set+0x144>)
    2cb6:	4299      	cmp	r1, r3
    2cb8:	d126      	bne.n	2d08 <baudrate_set+0x12c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2cba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2cbe:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    2cc2:	2000      	movs	r0, #0
    2cc4:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2cc6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2cca:	e7f8      	b.n	2cbe <baudrate_set+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2ccc:	4b15      	ldr	r3, [pc, #84]	; (2d24 <baudrate_set+0x148>)
    2cce:	e7f6      	b.n	2cbe <baudrate_set+0xe2>
		nrf_baudrate = 0x00027000;
    2cd0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2cd4:	e7f3      	b.n	2cbe <baudrate_set+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2cd6:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2cda:	e7f0      	b.n	2cbe <baudrate_set+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2cdc:	4b12      	ldr	r3, [pc, #72]	; (2d28 <baudrate_set+0x14c>)
    2cde:	e7ee      	b.n	2cbe <baudrate_set+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2ce0:	4b12      	ldr	r3, [pc, #72]	; (2d2c <baudrate_set+0x150>)
    2ce2:	e7ec      	b.n	2cbe <baudrate_set+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2ce4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2ce8:	e7e9      	b.n	2cbe <baudrate_set+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2cea:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2cee:	e7e6      	b.n	2cbe <baudrate_set+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2cf0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2cf4:	e7e3      	b.n	2cbe <baudrate_set+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2cf6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2cfa:	e7e0      	b.n	2cbe <baudrate_set+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2cfc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2d00:	e7dd      	b.n	2cbe <baudrate_set+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2d02:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2d06:	e7da      	b.n	2cbe <baudrate_set+0xe2>
		return -EINVAL;
    2d08:	f06f 0015 	mvn.w	r0, #21
}
    2d0c:	4770      	bx	lr
    2d0e:	bf00      	nop
    2d10:	0003d090 	.word	0x0003d090
    2d14:	0075c000 	.word	0x0075c000
    2d18:	00275000 	.word	0x00275000
    2d1c:	013a9000 	.word	0x013a9000
    2d20:	000f4240 	.word	0x000f4240
    2d24:	0013b000 	.word	0x0013b000
    2d28:	003af000 	.word	0x003af000
    2d2c:	004ea000 	.word	0x004ea000

00002d30 <uarte_instance_init>:
};

static int uarte_instance_init(struct device *dev,
			       const struct uarte_init_config *config,
			       u8_t interrupts_active)
{
    2d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d32:	460c      	mov	r4, r1
    2d34:	4617      	mov	r7, r2
	return dev->config->config_info;
    2d36:	6803      	ldr	r3, [r0, #0]
    2d38:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    2d3a:	681d      	ldr	r5, [r3, #0]
	return dev->driver_data;
    2d3c:	6886      	ldr	r6, [r0, #8]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
    2d3e:	680a      	ldr	r2, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2d40:	2301      	movs	r3, #1
    2d42:	4093      	lsls	r3, r2
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    2d44:	4a2a      	ldr	r2, [pc, #168]	; (2df0 <uarte_instance_init+0xc0>)
    2d46:	6093      	str	r3, [r2, #8]
	nrf_gpio_cfg_output(config->pseltxd);
    2d48:	680b      	ldr	r3, [r1, #0]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2d4a:	3380      	adds	r3, #128	; 0x80
    2d4c:	2103      	movs	r1, #3
    2d4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    2d52:	6863      	ldr	r3, [r4, #4]
    2d54:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d58:	d003      	beq.n	2d62 <uarte_instance_init+0x32>
    2d5a:	3380      	adds	r3, #128	; 0x80
    2d5c:	2100      	movs	r1, #0
    2d5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
    2d62:	6822      	ldr	r2, [r4, #0]
    2d64:	6863      	ldr	r3, [r4, #4]
    p_reg->PSEL.TXD = pseltxd;
    2d66:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    2d6a:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    2d6e:	68a3      	ldr	r3, [r4, #8]
    2d70:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d74:	d018      	beq.n	2da8 <uarte_instance_init+0x78>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    2d76:	68e3      	ldr	r3, [r4, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    2d78:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d7c:	d014      	beq.n	2da8 <uarte_instance_init+0x78>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2d7e:	2201      	movs	r2, #1
    2d80:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    2d84:	4a1a      	ldr	r2, [pc, #104]	; (2df0 <uarte_instance_init+0xc0>)
    2d86:	6093      	str	r3, [r2, #8]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
    2d88:	68e3      	ldr	r3, [r4, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2d8a:	3380      	adds	r3, #128	; 0x80
    2d8c:	2103      	movs	r1, #3
    2d8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
    2d92:	68a3      	ldr	r3, [r4, #8]
    2d94:	3380      	adds	r3, #128	; 0x80
    2d96:	2100      	movs	r1, #0
    2d98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		nrf_uarte_hwfc_pins_set(uarte,
    2d9c:	68e2      	ldr	r2, [r4, #12]
    2d9e:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.RTS = pselrts;
    2da0:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    2da4:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2da8:	6881      	ldr	r1, [r0, #8]
    2daa:	f003 f80b 	bl	5dc4 <uarte_nrfx_configure>
	if (err) {
    2dae:	4603      	mov	r3, r0
    2db0:	b9e0      	cbnz	r0, 2dec <uarte_instance_init+0xbc>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2db2:	2208      	movs	r2, #8
    2db4:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    2db8:	6862      	ldr	r2, [r4, #4]
    2dba:	f1b2 3fff 	cmp.w	r2, #4294967295
    2dbe:	d00a      	beq.n	2dd6 <uarte_instance_init+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dc0:	2200      	movs	r2, #0
    2dc2:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2dc6:	f106 020c 	add.w	r2, r6, #12

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2dca:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2dce:	2201      	movs	r2, #1
    2dd0:	f8c5 2538 	str.w	r2, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dd4:	602a      	str	r2, [r5, #0]
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
	}

#ifdef UARTE_INTERRUPT_DRIVEN
	if (interrupts_active) {
    2dd6:	b14f      	cbz	r7, 2dec <uarte_instance_init+0xbc>
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
    2dd8:	68b2      	ldr	r2, [r6, #8]
    2dda:	6892      	ldr	r2, [r2, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2ddc:	f8c5 2544 	str.w	r2, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2de0:	2200      	movs	r2, #0
    2de2:	f8c5 2548 	str.w	r2, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2de6:	2201      	movs	r2, #1
    2de8:	60aa      	str	r2, [r5, #8]
    2dea:	60ea      	str	r2, [r5, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    2dec:	4618      	mov	r0, r3
    2dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2df0:	50842500 	.word	0x50842500

00002df4 <uarte_0_init>:
	#endif
	#if !defined(DT_NORDIC_NRF_UARTE_UART_0_RX_PIN)
	#define DT_NORDIC_NRF_UARTE_UART_0_RX_PIN NRF_UARTE_PSEL_DISCONNECTED
	#endif

	UART_NRF_UARTE_DEVICE(0);
    2df4:	b530      	push	{r4, r5, lr}
    2df6:	b085      	sub	sp, #20
    2df8:	4605      	mov	r5, r0
    2dfa:	4b0a      	ldr	r3, [pc, #40]	; (2e24 <uarte_0_init+0x30>)
    2dfc:	466c      	mov	r4, sp
    2dfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2e00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2e04:	2200      	movs	r2, #0
    2e06:	2101      	movs	r1, #1
    2e08:	2008      	movs	r0, #8
    2e0a:	f7ff f921 	bl	2050 <z_arm_irq_priority_set>
    2e0e:	2008      	movs	r0, #8
    2e10:	f7ff f90e 	bl	2030 <arch_irq_enable>
    2e14:	2201      	movs	r2, #1
    2e16:	4621      	mov	r1, r4
    2e18:	4628      	mov	r0, r5
    2e1a:	f7ff ff89 	bl	2d30 <uarte_instance_init>
    2e1e:	b005      	add	sp, #20
    2e20:	bd30      	pop	{r4, r5, pc}
    2e22:	bf00      	nop
    2e24:	00007e88 	.word	0x00007e88

00002e28 <fprotect_area>:
#include <hal/nrf_spu.h>
#include <errno.h>

int fprotect_area(u32_t start, size_t length)
{
	if (start % CONFIG_FPROTECT_BLOCK_SIZE != 0 ||
    2e28:	f3c0 030e 	ubfx	r3, r0, #0, #15
    2e2c:	b9bb      	cbnz	r3, 2e5e <fprotect_area+0x36>
		length % CONFIG_FPROTECT_BLOCK_SIZE != 0) {
    2e2e:	f3c1 020e 	ubfx	r2, r1, #0, #15
	if (start % CONFIG_FPROTECT_BLOCK_SIZE != 0 ||
    2e32:	b9ba      	cbnz	r2, 2e64 <fprotect_area+0x3c>
		return -EINVAL;
	}

	for (u32_t i = 0; i < length / CONFIG_FPROTECT_BLOCK_SIZE; i++) {
    2e34:	ebb2 3fd1 	cmp.w	r2, r1, lsr #15
    2e38:	d217      	bcs.n	2e6a <fprotect_area+0x42>
{
    2e3a:	b430      	push	{r4, r5}
		nrf_spu_flashregion_set(NRF_SPU_S,
    2e3c:	eb02 33d0 	add.w	r3, r2, r0, lsr #15
    2e40:	b2db      	uxtb	r3, r3
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    2e42:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    2e46:	4c0a      	ldr	r4, [pc, #40]	; (2e70 <fprotect_area+0x48>)
    2e48:	f240 1515 	movw	r5, #277	; 0x115
    2e4c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
	for (u32_t i = 0; i < length / CONFIG_FPROTECT_BLOCK_SIZE; i++) {
    2e50:	3201      	adds	r2, #1
    2e52:	ebb2 3fd1 	cmp.w	r2, r1, lsr #15
    2e56:	d3f1      	bcc.n	2e3c <fprotect_area+0x14>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    2e58:	2000      	movs	r0, #0
}
    2e5a:	bc30      	pop	{r4, r5}
    2e5c:	4770      	bx	lr
		return -EINVAL;
    2e5e:	f06f 0015 	mvn.w	r0, #21
    2e62:	4770      	bx	lr
    2e64:	f06f 0015 	mvn.w	r0, #21
    2e68:	4770      	bx	lr
	return 0;
    2e6a:	2000      	movs	r0, #0
}
    2e6c:	4770      	bx	lr
    2e6e:	bf00      	nop
    2e70:	50003000 	.word	0x50003000

00002e74 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    2e74:	6802      	ldr	r2, [r0, #0]
    2e76:	4b12      	ldr	r3, [pc, #72]	; (2ec0 <verify_header+0x4c>)
    2e78:	429a      	cmp	r2, r3
    2e7a:	d115      	bne.n	2ea8 <verify_header+0x34>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    2e7c:	69c2      	ldr	r2, [r0, #28]
    2e7e:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
    2e82:	f1a3 13ef 	sub.w	r3, r3, #15663343	; 0xef00ef
    2e86:	429a      	cmp	r2, r3
    2e88:	d110      	bne.n	2eac <verify_header+0x38>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    2e8a:	6883      	ldr	r3, [r0, #8]
    2e8c:	2b01      	cmp	r3, #1
    2e8e:	d80f      	bhi.n	2eb0 <verify_header+0x3c>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    2e90:	68c3      	ldr	r3, [r0, #12]
    2e92:	b113      	cbz	r3, 2e9a <verify_header+0x26>
    2e94:	6902      	ldr	r2, [r0, #16]
    2e96:	4293      	cmp	r3, r2
    2e98:	d00c      	beq.n	2eb4 <verify_header+0x40>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    2e9a:	6943      	ldr	r3, [r0, #20]
    2e9c:	b163      	cbz	r3, 2eb8 <verify_header+0x44>
    2e9e:	6982      	ldr	r2, [r0, #24]
    2ea0:	4293      	cmp	r3, r2
    2ea2:	d00b      	beq.n	2ebc <verify_header+0x48>
        mbedtls_fprintf( stderr, "FATAL: prev_free == next_free\n" );
#endif
        return( 1 );
    }

    return( 0 );
    2ea4:	2000      	movs	r0, #0
    2ea6:	4770      	bx	lr
        return( 1 );
    2ea8:	2001      	movs	r0, #1
    2eaa:	4770      	bx	lr
        return( 1 );
    2eac:	2001      	movs	r0, #1
    2eae:	4770      	bx	lr
        return( 1 );
    2eb0:	2001      	movs	r0, #1
    2eb2:	4770      	bx	lr
        return( 1 );
    2eb4:	2001      	movs	r0, #1
    2eb6:	4770      	bx	lr
    return( 0 );
    2eb8:	2000      	movs	r0, #0
    2eba:	4770      	bx	lr
        return( 1 );
    2ebc:	2001      	movs	r0, #1
}
    2ebe:	4770      	bx	lr
    2ec0:	ff00aa55 	.word	0xff00aa55

00002ec4 <verify_chain>:

static int verify_chain( void )
{
    2ec4:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    2ec6:	4b11      	ldr	r3, [pc, #68]	; (2f0c <verify_chain+0x48>)
    2ec8:	689d      	ldr	r5, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    2eca:	b1c5      	cbz	r5, 2efe <verify_chain+0x3a>
    2ecc:	4628      	mov	r0, r5
    2ece:	f7ff ffd1 	bl	2e74 <verify_header>
    2ed2:	4606      	mov	r6, r0
    2ed4:	b9a8      	cbnz	r0, 2f02 <verify_chain+0x3e>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    2ed6:	68eb      	ldr	r3, [r5, #12]
    2ed8:	b113      	cbz	r3, 2ee0 <verify_chain+0x1c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: verification failed: "
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    2eda:	2601      	movs	r6, #1
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    2edc:	4630      	mov	r0, r6
    2ede:	bd70      	pop	{r4, r5, r6, pc}
    cur = heap.first->next;
    2ee0:	692c      	ldr	r4, [r5, #16]
    while( cur != NULL )
    2ee2:	e001      	b.n	2ee8 <verify_chain+0x24>
        prv = cur;
    2ee4:	4625      	mov	r5, r4
        cur = cur->next;
    2ee6:	6924      	ldr	r4, [r4, #16]
    while( cur != NULL )
    2ee8:	2c00      	cmp	r4, #0
    2eea:	d0f7      	beq.n	2edc <verify_chain+0x18>
        if( verify_header( cur ) != 0 )
    2eec:	4620      	mov	r0, r4
    2eee:	f7ff ffc1 	bl	2e74 <verify_header>
    2ef2:	b940      	cbnz	r0, 2f06 <verify_chain+0x42>
        if( cur->prev != prv )
    2ef4:	68e3      	ldr	r3, [r4, #12]
    2ef6:	42ab      	cmp	r3, r5
    2ef8:	d0f4      	beq.n	2ee4 <verify_chain+0x20>
            return( 1 );
    2efa:	2601      	movs	r6, #1
    2efc:	e7ee      	b.n	2edc <verify_chain+0x18>
        return( 1 );
    2efe:	2601      	movs	r6, #1
    2f00:	e7ec      	b.n	2edc <verify_chain+0x18>
    2f02:	2601      	movs	r6, #1
    2f04:	e7ea      	b.n	2edc <verify_chain+0x18>
            return( 1 );
    2f06:	2601      	movs	r6, #1
    2f08:	e7e8      	b.n	2edc <verify_chain+0x18>
    2f0a:	bf00      	nop
    2f0c:	2000260c 	.word	0x2000260c

00002f10 <buffer_alloc_free>:
static void buffer_alloc_free( void *ptr )
{
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    2f10:	2800      	cmp	r0, #0
    2f12:	f000 8091 	beq.w	3038 <buffer_alloc_free+0x128>
{
    2f16:	b538      	push	{r3, r4, r5, lr}
    2f18:	4604      	mov	r4, r0
    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    2f1a:	4b48      	ldr	r3, [pc, #288]	; (303c <buffer_alloc_free+0x12c>)
    2f1c:	681b      	ldr	r3, [r3, #0]
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d06d      	beq.n	2ffe <buffer_alloc_free+0xee>
    2f22:	4a46      	ldr	r2, [pc, #280]	; (303c <buffer_alloc_free+0x12c>)
    2f24:	6892      	ldr	r2, [r2, #8]
    2f26:	2a00      	cmp	r2, #0
    2f28:	d069      	beq.n	2ffe <buffer_alloc_free+0xee>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    2f2a:	4283      	cmp	r3, r0
    2f2c:	d804      	bhi.n	2f38 <buffer_alloc_free+0x28>
    2f2e:	4a43      	ldr	r2, [pc, #268]	; (303c <buffer_alloc_free+0x12c>)
    2f30:	6852      	ldr	r2, [r2, #4]
    2f32:	4413      	add	r3, r2
    2f34:	4283      	cmp	r3, r0
    2f36:	d803      	bhi.n	2f40 <buffer_alloc_free+0x30>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    2f38:	4b41      	ldr	r3, [pc, #260]	; (3040 <buffer_alloc_free+0x130>)
    2f3a:	681b      	ldr	r3, [r3, #0]
    2f3c:	2001      	movs	r0, #1
    2f3e:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    2f40:	f1a4 0520 	sub.w	r5, r4, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    2f44:	4628      	mov	r0, r5
    2f46:	f7ff ff95 	bl	2e74 <verify_header>
    2f4a:	b118      	cbz	r0, 2f54 <buffer_alloc_free+0x44>
        mbedtls_exit( 1 );
    2f4c:	4b3c      	ldr	r3, [pc, #240]	; (3040 <buffer_alloc_free+0x130>)
    2f4e:	681b      	ldr	r3, [r3, #0]
    2f50:	2001      	movs	r0, #1
    2f52:	4798      	blx	r3

    if( hdr->alloc != 1 )
    2f54:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2f58:	2b01      	cmp	r3, #1
    2f5a:	d003      	beq.n	2f64 <buffer_alloc_free+0x54>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    2f5c:	4b38      	ldr	r3, [pc, #224]	; (3040 <buffer_alloc_free+0x130>)
    2f5e:	681b      	ldr	r3, [r3, #0]
    2f60:	2001      	movs	r0, #1
    2f62:	4798      	blx	r3
    }

    hdr->alloc = 0;
    2f64:	2300      	movs	r3, #0
    2f66:	f844 3c18 	str.w	r3, [r4, #-24]
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    2f6a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2f6e:	b1d3      	cbz	r3, 2fa6 <buffer_alloc_free+0x96>
    2f70:	689a      	ldr	r2, [r3, #8]
    2f72:	b9ba      	cbnz	r2, 2fa4 <buffer_alloc_free+0x94>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    2f74:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    2f78:	6859      	ldr	r1, [r3, #4]
    2f7a:	440a      	add	r2, r1
    2f7c:	3220      	adds	r2, #32
    2f7e:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
    2f80:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2f84:	f854 2c10 	ldr.w	r2, [r4, #-16]
    2f88:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
    2f8a:	f854 4c14 	ldr.w	r4, [r4, #-20]

        if( hdr->next != NULL )
    2f8e:	6923      	ldr	r3, [r4, #16]
    2f90:	b103      	cbz	r3, 2f94 <buffer_alloc_free+0x84>
            hdr->next->prev = hdr;
    2f92:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    2f94:	2220      	movs	r2, #32
    2f96:	2100      	movs	r1, #0
    2f98:	4628      	mov	r0, r5
    2f9a:	f002 fd38 	bl	5a0e <memset>
        old = hdr;
    2f9e:	462b      	mov	r3, r5
        hdr = hdr->prev;
    2fa0:	4625      	mov	r5, r4
    2fa2:	e000      	b.n	2fa6 <buffer_alloc_free+0x96>
    memory_header *hdr, *old = NULL;
    2fa4:	2300      	movs	r3, #0
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    2fa6:	692c      	ldr	r4, [r5, #16]
    2fa8:	b31c      	cbz	r4, 2ff2 <buffer_alloc_free+0xe2>
    2faa:	68a2      	ldr	r2, [r4, #8]
    2fac:	bb0a      	cbnz	r2, 2ff2 <buffer_alloc_free+0xe2>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
    2fae:	6863      	ldr	r3, [r4, #4]
    2fb0:	686a      	ldr	r2, [r5, #4]
    2fb2:	4413      	add	r3, r2
    2fb4:	3320      	adds	r3, #32
    2fb6:	606b      	str	r3, [r5, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
    2fb8:	6923      	ldr	r3, [r4, #16]
    2fba:	612b      	str	r3, [r5, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    2fbc:	696b      	ldr	r3, [r5, #20]
    2fbe:	b1fb      	cbz	r3, 3000 <buffer_alloc_free+0xf0>
        {
            if( hdr->prev_free != NULL )
    2fc0:	b313      	cbz	r3, 3008 <buffer_alloc_free+0xf8>
                hdr->prev_free->next_free = hdr->next_free;
    2fc2:	69aa      	ldr	r2, [r5, #24]
    2fc4:	619a      	str	r2, [r3, #24]
            else
                heap.first_free = hdr->next_free;

            if( hdr->next_free != NULL )
    2fc6:	69ab      	ldr	r3, [r5, #24]
    2fc8:	b10b      	cbz	r3, 2fce <buffer_alloc_free+0xbe>
                hdr->next_free->prev_free = hdr->prev_free;
    2fca:	696a      	ldr	r2, [r5, #20]
    2fcc:	615a      	str	r2, [r3, #20]
        }

        hdr->prev_free = old->prev_free;
    2fce:	6963      	ldr	r3, [r4, #20]
    2fd0:	616b      	str	r3, [r5, #20]
        hdr->next_free = old->next_free;
    2fd2:	69a2      	ldr	r2, [r4, #24]
    2fd4:	61aa      	str	r2, [r5, #24]

        if( hdr->prev_free != NULL )
    2fd6:	b1db      	cbz	r3, 3010 <buffer_alloc_free+0x100>
            hdr->prev_free->next_free = hdr;
    2fd8:	619d      	str	r5, [r3, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
    2fda:	69ab      	ldr	r3, [r5, #24]
    2fdc:	b103      	cbz	r3, 2fe0 <buffer_alloc_free+0xd0>
            hdr->next_free->prev_free = hdr;
    2fde:	615d      	str	r5, [r3, #20]

        if( hdr->next != NULL )
    2fe0:	692b      	ldr	r3, [r5, #16]
    2fe2:	b103      	cbz	r3, 2fe6 <buffer_alloc_free+0xd6>
            hdr->next->prev = hdr;
    2fe4:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    2fe6:	2220      	movs	r2, #32
    2fe8:	2100      	movs	r1, #0
    2fea:	4620      	mov	r0, r4
    2fec:	f002 fd0f 	bl	5a0e <memset>
        old = hdr->next;
    2ff0:	4623      	mov	r3, r4
    }

    // Prepend to free_list if we have not merged
    // (Does not have to stay in same order as prev / next list)
    //
    if( old == NULL )
    2ff2:	b183      	cbz	r3, 3016 <buffer_alloc_free+0x106>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    2ff4:	4b11      	ldr	r3, [pc, #68]	; (303c <buffer_alloc_free+0x12c>)
    2ff6:	691b      	ldr	r3, [r3, #16]
    2ff8:	f013 0f02 	tst.w	r3, #2
    2ffc:	d113      	bne.n	3026 <buffer_alloc_free+0x116>
        mbedtls_exit( 1 );
}
    2ffe:	bd38      	pop	{r3, r4, r5, pc}
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    3000:	69aa      	ldr	r2, [r5, #24]
    3002:	2a00      	cmp	r2, #0
    3004:	d1dc      	bne.n	2fc0 <buffer_alloc_free+0xb0>
    3006:	e7e2      	b.n	2fce <buffer_alloc_free+0xbe>
                heap.first_free = hdr->next_free;
    3008:	69aa      	ldr	r2, [r5, #24]
    300a:	4b0c      	ldr	r3, [pc, #48]	; (303c <buffer_alloc_free+0x12c>)
    300c:	60da      	str	r2, [r3, #12]
    300e:	e7da      	b.n	2fc6 <buffer_alloc_free+0xb6>
            heap.first_free = hdr;
    3010:	4b0a      	ldr	r3, [pc, #40]	; (303c <buffer_alloc_free+0x12c>)
    3012:	60dd      	str	r5, [r3, #12]
    3014:	e7e1      	b.n	2fda <buffer_alloc_free+0xca>
        hdr->next_free = heap.first_free;
    3016:	4b09      	ldr	r3, [pc, #36]	; (303c <buffer_alloc_free+0x12c>)
    3018:	68db      	ldr	r3, [r3, #12]
    301a:	61ab      	str	r3, [r5, #24]
        if( heap.first_free != NULL )
    301c:	b103      	cbz	r3, 3020 <buffer_alloc_free+0x110>
            heap.first_free->prev_free = hdr;
    301e:	615d      	str	r5, [r3, #20]
        heap.first_free = hdr;
    3020:	4b06      	ldr	r3, [pc, #24]	; (303c <buffer_alloc_free+0x12c>)
    3022:	60dd      	str	r5, [r3, #12]
    3024:	e7e6      	b.n	2ff4 <buffer_alloc_free+0xe4>
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    3026:	f7ff ff4d 	bl	2ec4 <verify_chain>
    302a:	2800      	cmp	r0, #0
    302c:	d0e7      	beq.n	2ffe <buffer_alloc_free+0xee>
        mbedtls_exit( 1 );
    302e:	4b04      	ldr	r3, [pc, #16]	; (3040 <buffer_alloc_free+0x130>)
    3030:	681b      	ldr	r3, [r3, #0]
    3032:	2001      	movs	r0, #1
    3034:	4798      	blx	r3
    3036:	e7e2      	b.n	2ffe <buffer_alloc_free+0xee>
    3038:	4770      	bx	lr
    303a:	bf00      	nop
    303c:	2000260c 	.word	0x2000260c
    3040:	20005768 	.word	0x20005768

00003044 <buffer_alloc_calloc>:
{
    3044:	b570      	push	{r4, r5, r6, lr}
    memory_header *new, *cur = heap.first_free;
    3046:	4b4f      	ldr	r3, [pc, #316]	; (3184 <buffer_alloc_calloc+0x140>)
    3048:	68dc      	ldr	r4, [r3, #12]
    if( heap.buf == NULL || heap.first == NULL )
    304a:	681d      	ldr	r5, [r3, #0]
    304c:	2d00      	cmp	r5, #0
    304e:	d05a      	beq.n	3106 <buffer_alloc_calloc+0xc2>
    3050:	689d      	ldr	r5, [r3, #8]
    3052:	2d00      	cmp	r5, #0
    3054:	d057      	beq.n	3106 <buffer_alloc_calloc+0xc2>
    original_len = len = n * size;
    3056:	fb01 f600 	mul.w	r6, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    305a:	2800      	cmp	r0, #0
    305c:	f000 8088 	beq.w	3170 <buffer_alloc_calloc+0x12c>
    3060:	2900      	cmp	r1, #0
    3062:	f000 8087 	beq.w	3174 <buffer_alloc_calloc+0x130>
    3066:	fbb6 f0f0 	udiv	r0, r6, r0
    306a:	4288      	cmp	r0, r1
    306c:	f040 8084 	bne.w	3178 <buffer_alloc_calloc+0x134>
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3070:	f116 0f04 	cmn.w	r6, #4
    3074:	f200 8082 	bhi.w	317c <buffer_alloc_calloc+0x138>
    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3078:	f016 0f03 	tst.w	r6, #3
    307c:	d008      	beq.n	3090 <buffer_alloc_calloc+0x4c>
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    307e:	f026 0503 	bic.w	r5, r6, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3082:	3504      	adds	r5, #4
    while( cur != NULL )
    3084:	b134      	cbz	r4, 3094 <buffer_alloc_calloc+0x50>
        if( cur->size >= len )
    3086:	6863      	ldr	r3, [r4, #4]
    3088:	42ab      	cmp	r3, r5
    308a:	d203      	bcs.n	3094 <buffer_alloc_calloc+0x50>
        cur = cur->next_free;
    308c:	69a4      	ldr	r4, [r4, #24]
    308e:	e7f9      	b.n	3084 <buffer_alloc_calloc+0x40>
    original_len = len = n * size;
    3090:	4635      	mov	r5, r6
    3092:	e7f7      	b.n	3084 <buffer_alloc_calloc+0x40>
    if( cur == NULL )
    3094:	2c00      	cmp	r4, #0
    3096:	d073      	beq.n	3180 <buffer_alloc_calloc+0x13c>
    if( cur->alloc != 0 )
    3098:	68a3      	ldr	r3, [r4, #8]
    309a:	b11b      	cbz	r3, 30a4 <buffer_alloc_calloc+0x60>
        mbedtls_exit( 1 );
    309c:	4b3a      	ldr	r3, [pc, #232]	; (3188 <buffer_alloc_calloc+0x144>)
    309e:	681b      	ldr	r3, [r3, #0]
    30a0:	2001      	movs	r0, #1
    30a2:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    30a4:	6862      	ldr	r2, [r4, #4]
    30a6:	1b52      	subs	r2, r2, r5
    30a8:	2a23      	cmp	r2, #35	; 0x23
    30aa:	d92e      	bls.n	310a <buffer_alloc_calloc+0xc6>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    30ac:	f105 0120 	add.w	r1, r5, #32
    30b0:	1863      	adds	r3, r4, r1
    new->size = cur->size - len - sizeof(memory_header);
    30b2:	3a20      	subs	r2, #32
    30b4:	605a      	str	r2, [r3, #4]
    new->alloc = 0;
    30b6:	2200      	movs	r2, #0
    30b8:	609a      	str	r2, [r3, #8]
    new->prev = cur;
    30ba:	60dc      	str	r4, [r3, #12]
    new->next = cur->next;
    30bc:	6922      	ldr	r2, [r4, #16]
    30be:	611a      	str	r2, [r3, #16]
    new->magic1 = MAGIC1;
    30c0:	4832      	ldr	r0, [pc, #200]	; (318c <buffer_alloc_calloc+0x148>)
    30c2:	5060      	str	r0, [r4, r1]
    new->magic2 = MAGIC2;
    30c4:	4932      	ldr	r1, [pc, #200]	; (3190 <buffer_alloc_calloc+0x14c>)
    30c6:	61d9      	str	r1, [r3, #28]
    if( new->next != NULL )
    30c8:	b102      	cbz	r2, 30cc <buffer_alloc_calloc+0x88>
        new->next->prev = new;
    30ca:	60d3      	str	r3, [r2, #12]
    new->prev_free = cur->prev_free;
    30cc:	6962      	ldr	r2, [r4, #20]
    30ce:	615a      	str	r2, [r3, #20]
    new->next_free = cur->next_free;
    30d0:	69a1      	ldr	r1, [r4, #24]
    30d2:	6199      	str	r1, [r3, #24]
    if( new->prev_free != NULL )
    30d4:	2a00      	cmp	r2, #0
    30d6:	d03f      	beq.n	3158 <buffer_alloc_calloc+0x114>
        new->prev_free->next_free = new;
    30d8:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    30da:	699a      	ldr	r2, [r3, #24]
    30dc:	b102      	cbz	r2, 30e0 <buffer_alloc_calloc+0x9c>
        new->next_free->prev_free = new;
    30de:	6153      	str	r3, [r2, #20]
    cur->alloc = 1;
    30e0:	2201      	movs	r2, #1
    30e2:	60a2      	str	r2, [r4, #8]
    cur->size = len;
    30e4:	6065      	str	r5, [r4, #4]
    cur->next = new;
    30e6:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    30e8:	2300      	movs	r3, #0
    30ea:	6163      	str	r3, [r4, #20]
    cur->next_free = NULL;
    30ec:	61a3      	str	r3, [r4, #24]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    30ee:	4b25      	ldr	r3, [pc, #148]	; (3184 <buffer_alloc_calloc+0x140>)
    30f0:	691b      	ldr	r3, [r3, #16]
    30f2:	f013 0f01 	tst.w	r3, #1
    30f6:	d132      	bne.n	315e <buffer_alloc_calloc+0x11a>
    ret = (unsigned char *) cur + sizeof( memory_header );
    30f8:	f104 0520 	add.w	r5, r4, #32
    memset( ret, 0, original_len );
    30fc:	4632      	mov	r2, r6
    30fe:	2100      	movs	r1, #0
    3100:	4628      	mov	r0, r5
    3102:	f002 fc84 	bl	5a0e <memset>
}
    3106:	4628      	mov	r0, r5
    3108:	bd70      	pop	{r4, r5, r6, pc}
        cur->alloc = 1;
    310a:	2301      	movs	r3, #1
    310c:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    310e:	6963      	ldr	r3, [r4, #20]
    3110:	b1ab      	cbz	r3, 313e <buffer_alloc_calloc+0xfa>
            cur->prev_free->next_free = cur->next_free;
    3112:	69a2      	ldr	r2, [r4, #24]
    3114:	619a      	str	r2, [r3, #24]
        if( cur->next_free != NULL )
    3116:	69a3      	ldr	r3, [r4, #24]
    3118:	b10b      	cbz	r3, 311e <buffer_alloc_calloc+0xda>
            cur->next_free->prev_free = cur->prev_free;
    311a:	6962      	ldr	r2, [r4, #20]
    311c:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    311e:	2300      	movs	r3, #0
    3120:	6163      	str	r3, [r4, #20]
        cur->next_free = NULL;
    3122:	61a3      	str	r3, [r4, #24]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3124:	4b17      	ldr	r3, [pc, #92]	; (3184 <buffer_alloc_calloc+0x140>)
    3126:	691b      	ldr	r3, [r3, #16]
    3128:	f013 0f01 	tst.w	r3, #1
    312c:	d10b      	bne.n	3146 <buffer_alloc_calloc+0x102>
        ret = (unsigned char *) cur + sizeof( memory_header );
    312e:	f104 0520 	add.w	r5, r4, #32
        memset( ret, 0, original_len );
    3132:	4632      	mov	r2, r6
    3134:	2100      	movs	r1, #0
    3136:	4628      	mov	r0, r5
    3138:	f002 fc69 	bl	5a0e <memset>
        return( ret );
    313c:	e7e3      	b.n	3106 <buffer_alloc_calloc+0xc2>
            heap.first_free = cur->next_free;
    313e:	69a2      	ldr	r2, [r4, #24]
    3140:	4b10      	ldr	r3, [pc, #64]	; (3184 <buffer_alloc_calloc+0x140>)
    3142:	60da      	str	r2, [r3, #12]
    3144:	e7e7      	b.n	3116 <buffer_alloc_calloc+0xd2>
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3146:	f7ff febd 	bl	2ec4 <verify_chain>
    314a:	2800      	cmp	r0, #0
    314c:	d0ef      	beq.n	312e <buffer_alloc_calloc+0xea>
            mbedtls_exit( 1 );
    314e:	4b0e      	ldr	r3, [pc, #56]	; (3188 <buffer_alloc_calloc+0x144>)
    3150:	681b      	ldr	r3, [r3, #0]
    3152:	2001      	movs	r0, #1
    3154:	4798      	blx	r3
    3156:	e7ea      	b.n	312e <buffer_alloc_calloc+0xea>
        heap.first_free = new;
    3158:	4a0a      	ldr	r2, [pc, #40]	; (3184 <buffer_alloc_calloc+0x140>)
    315a:	60d3      	str	r3, [r2, #12]
    315c:	e7bd      	b.n	30da <buffer_alloc_calloc+0x96>
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    315e:	f7ff feb1 	bl	2ec4 <verify_chain>
    3162:	2800      	cmp	r0, #0
    3164:	d0c8      	beq.n	30f8 <buffer_alloc_calloc+0xb4>
        mbedtls_exit( 1 );
    3166:	4b08      	ldr	r3, [pc, #32]	; (3188 <buffer_alloc_calloc+0x144>)
    3168:	681b      	ldr	r3, [r3, #0]
    316a:	2001      	movs	r0, #1
    316c:	4798      	blx	r3
    316e:	e7c3      	b.n	30f8 <buffer_alloc_calloc+0xb4>
        return( NULL );
    3170:	2500      	movs	r5, #0
    3172:	e7c8      	b.n	3106 <buffer_alloc_calloc+0xc2>
    3174:	2500      	movs	r5, #0
    3176:	e7c6      	b.n	3106 <buffer_alloc_calloc+0xc2>
    3178:	2500      	movs	r5, #0
    317a:	e7c4      	b.n	3106 <buffer_alloc_calloc+0xc2>
        return( NULL );
    317c:	2500      	movs	r5, #0
    317e:	e7c2      	b.n	3106 <buffer_alloc_calloc+0xc2>
        return( NULL );
    3180:	4625      	mov	r5, r4
    3182:	e7c0      	b.n	3106 <buffer_alloc_calloc+0xc2>
    3184:	2000260c 	.word	0x2000260c
    3188:	20005768 	.word	0x20005768
    318c:	ff00aa55 	.word	0xff00aa55
    3190:	ee119966 	.word	0xee119966

00003194 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    3194:	b538      	push	{r3, r4, r5, lr}
    3196:	4605      	mov	r5, r0
    3198:	460c      	mov	r4, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    319a:	2214      	movs	r2, #20
    319c:	2100      	movs	r1, #0
    319e:	4813      	ldr	r0, [pc, #76]	; (31ec <mbedtls_memory_buffer_alloc_init+0x58>)
    31a0:	f002 fc35 	bl	5a0e <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    31a4:	4912      	ldr	r1, [pc, #72]	; (31f0 <mbedtls_memory_buffer_alloc_init+0x5c>)
    31a6:	4813      	ldr	r0, [pc, #76]	; (31f4 <mbedtls_memory_buffer_alloc_init+0x60>)
    31a8:	f000 f838 	bl	321c <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    31ac:	2c23      	cmp	r4, #35	; 0x23
    31ae:	d91c      	bls.n	31ea <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    31b0:	f015 0303 	ands.w	r3, r5, #3
    31b4:	d004      	beq.n	31c0 <mbedtls_memory_buffer_alloc_init+0x2c>
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    31b6:	441c      	add	r4, r3
    31b8:	3c04      	subs	r4, #4
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    31ba:	f1c3 0304 	rsb	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    31be:	441d      	add	r5, r3
    }

    memset( buf, 0, len );
    31c0:	4622      	mov	r2, r4
    31c2:	2100      	movs	r1, #0
    31c4:	4628      	mov	r0, r5
    31c6:	f002 fc22 	bl	5a0e <memset>

    heap.buf = buf;
    31ca:	4b08      	ldr	r3, [pc, #32]	; (31ec <mbedtls_memory_buffer_alloc_init+0x58>)
    31cc:	601d      	str	r5, [r3, #0]
    heap.len = len;
    31ce:	605c      	str	r4, [r3, #4]

    heap.first = (memory_header *)buf;
    31d0:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof( memory_header );
    31d2:	3c20      	subs	r4, #32
    31d4:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
    31d6:	689a      	ldr	r2, [r3, #8]
    31d8:	4907      	ldr	r1, [pc, #28]	; (31f8 <mbedtls_memory_buffer_alloc_init+0x64>)
    31da:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
    31dc:	689a      	ldr	r2, [r3, #8]
    31de:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
    31e2:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
    31e6:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
    31e8:	60da      	str	r2, [r3, #12]
}
    31ea:	bd38      	pop	{r3, r4, r5, pc}
    31ec:	2000260c 	.word	0x2000260c
    31f0:	00002f11 	.word	0x00002f11
    31f4:	00003045 	.word	0x00003045
    31f8:	ff00aa55 	.word	0xff00aa55

000031fc <mbedtls_calloc>:

static void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
static void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    31fc:	b508      	push	{r3, lr}
    return (*mbedtls_calloc_func)( nmemb, size );
    31fe:	4b02      	ldr	r3, [pc, #8]	; (3208 <mbedtls_calloc+0xc>)
    3200:	681b      	ldr	r3, [r3, #0]
    3202:	4798      	blx	r3
}
    3204:	bd08      	pop	{r3, pc}
    3206:	bf00      	nop
    3208:	20005764 	.word	0x20005764

0000320c <mbedtls_free>:

void mbedtls_free( void * ptr )
{
    320c:	b508      	push	{r3, lr}
    (*mbedtls_free_func)( ptr );
    320e:	4b02      	ldr	r3, [pc, #8]	; (3218 <mbedtls_free+0xc>)
    3210:	681b      	ldr	r3, [r3, #0]
    3212:	4798      	blx	r3
}
    3214:	bd08      	pop	{r3, pc}
    3216:	bf00      	nop
    3218:	2000576c 	.word	0x2000576c

0000321c <mbedtls_platform_set_calloc_free>:

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    321c:	4b02      	ldr	r3, [pc, #8]	; (3228 <mbedtls_platform_set_calloc_free+0xc>)
    321e:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    3220:	4b02      	ldr	r3, [pc, #8]	; (322c <mbedtls_platform_set_calloc_free+0x10>)
    3222:	6019      	str	r1, [r3, #0]
    return( 0 );
}
    3224:	2000      	movs	r0, #0
    3226:	4770      	bx	lr
    3228:	20005764 	.word	0x20005764
    322c:	2000576c 	.word	0x2000576c

00003230 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    3230:	b508      	push	{r3, lr}
    memset_func( buf, 0, len );
    3232:	4b03      	ldr	r3, [pc, #12]	; (3240 <mbedtls_platform_zeroize+0x10>)
    3234:	681b      	ldr	r3, [r3, #0]
    3236:	460a      	mov	r2, r1
    3238:	2100      	movs	r1, #0
    323a:	4798      	blx	r3
}
    323c:	bd08      	pop	{r3, pc}
    323e:	bf00      	nop
    3240:	20005770 	.word	0x20005770

00003244 <rsa_check_context>:
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
                              int blinding_needed )
{
    3244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3246:	4604      	mov	r4, r0
    3248:	460d      	mov	r5, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    324a:	6847      	ldr	r7, [r0, #4]
    324c:	f100 0608 	add.w	r6, r0, #8
    3250:	4630      	mov	r0, r6
    3252:	f003 fa79 	bl	6748 <mbedtls_mpi_size>
    3256:	4287      	cmp	r7, r0
    3258:	d151      	bne.n	32fe <rsa_check_context+0xba>
        ctx->len > MBEDTLS_MPI_MAX_SIZE )
    325a:	6863      	ldr	r3, [r4, #4]
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    325c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3260:	d84f      	bhi.n	3302 <rsa_check_context+0xbe>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3262:	2100      	movs	r1, #0
    3264:	4630      	mov	r0, r6
    3266:	f003 fc71 	bl	6b4c <mbedtls_mpi_cmp_int>
    326a:	2800      	cmp	r0, #0
    326c:	dd2a      	ble.n	32c4 <rsa_check_context+0x80>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    326e:	2100      	movs	r1, #0
    3270:	4630      	mov	r0, r6
    3272:	f003 fa43 	bl	66fc <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3276:	b328      	cbz	r0, 32c4 <rsa_check_context+0x80>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    3278:	b1cd      	cbz	r5, 32ae <rsa_check_context+0x6a>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    327a:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    327e:	2100      	movs	r1, #0
    3280:	4630      	mov	r0, r6
    3282:	f003 fc63 	bl	6b4c <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3286:	2800      	cmp	r0, #0
    3288:	dd1e      	ble.n	32c8 <rsa_check_context+0x84>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    328a:	2100      	movs	r1, #0
    328c:	4630      	mov	r0, r6
    328e:	f003 fa35 	bl	66fc <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3292:	b1c8      	cbz	r0, 32c8 <rsa_check_context+0x84>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3294:	f104 0638 	add.w	r6, r4, #56	; 0x38
    3298:	2100      	movs	r1, #0
    329a:	4630      	mov	r0, r6
    329c:	f003 fc56 	bl	6b4c <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    32a0:	2800      	cmp	r0, #0
    32a2:	dd11      	ble.n	32c8 <rsa_check_context+0x84>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    32a4:	2100      	movs	r1, #0
    32a6:	4630      	mov	r0, r6
    32a8:	f003 fa28 	bl	66fc <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    32ac:	b160      	cbz	r0, 32c8 <rsa_check_context+0x84>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    32ae:	2100      	movs	r1, #0
    32b0:	f104 0014 	add.w	r0, r4, #20
    32b4:	f003 fc4a 	bl	6b4c <mbedtls_mpi_cmp_int>
    32b8:	2800      	cmp	r0, #0
    32ba:	dd24      	ble.n	3306 <rsa_check_context+0xc2>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
    32bc:	b935      	cbnz	r5, 32cc <rsa_check_context+0x88>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
    32be:	b9ad      	cbnz	r5, 32ec <rsa_check_context+0xa8>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
}
    32c0:	4628      	mov	r0, r5
    32c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    32c4:	4d12      	ldr	r5, [pc, #72]	; (3310 <rsa_check_context+0xcc>)
    32c6:	e7fb      	b.n	32c0 <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    32c8:	4d11      	ldr	r5, [pc, #68]	; (3310 <rsa_check_context+0xcc>)
    32ca:	e7f9      	b.n	32c0 <rsa_check_context+0x7c>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    32cc:	2100      	movs	r1, #0
    32ce:	f104 0044 	add.w	r0, r4, #68	; 0x44
    32d2:	f003 fc3b 	bl	6b4c <mbedtls_mpi_cmp_int>
    if( is_priv &&
    32d6:	2800      	cmp	r0, #0
    32d8:	dd06      	ble.n	32e8 <rsa_check_context+0xa4>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    32da:	2100      	movs	r1, #0
    32dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
    32e0:	f003 fc34 	bl	6b4c <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    32e4:	2800      	cmp	r0, #0
    32e6:	dcea      	bgt.n	32be <rsa_check_context+0x7a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    32e8:	4d09      	ldr	r5, [pc, #36]	; (3310 <rsa_check_context+0xcc>)
    32ea:	e7e9      	b.n	32c0 <rsa_check_context+0x7c>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    32ec:	2100      	movs	r1, #0
    32ee:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    32f2:	f003 fc2b 	bl	6b4c <mbedtls_mpi_cmp_int>
    if( is_priv &&
    32f6:	2800      	cmp	r0, #0
    32f8:	dd07      	ble.n	330a <rsa_check_context+0xc6>
    return( 0 );
    32fa:	2500      	movs	r5, #0
    32fc:	e7e0      	b.n	32c0 <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    32fe:	4d04      	ldr	r5, [pc, #16]	; (3310 <rsa_check_context+0xcc>)
    3300:	e7de      	b.n	32c0 <rsa_check_context+0x7c>
    3302:	4d03      	ldr	r5, [pc, #12]	; (3310 <rsa_check_context+0xcc>)
    3304:	e7dc      	b.n	32c0 <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3306:	4d02      	ldr	r5, [pc, #8]	; (3310 <rsa_check_context+0xcc>)
    3308:	e7da      	b.n	32c0 <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    330a:	4d01      	ldr	r5, [pc, #4]	; (3310 <rsa_check_context+0xcc>)
    330c:	e7d8      	b.n	32c0 <rsa_check_context+0x7c>
    330e:	bf00      	nop
    3310:	ffffbf80 	.word	0xffffbf80

00003314 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    3314:	b570      	push	{r4, r5, r6, lr}
    3316:	4604      	mov	r4, r0
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    3318:	2200      	movs	r2, #0
    331a:	4611      	mov	r1, r2
    331c:	f7ff ff92 	bl	3244 <rsa_check_context>
    3320:	b9e0      	cbnz	r0, 335c <mbedtls_rsa_check_pubkey+0x48>
    3322:	4606      	mov	r6, r0
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    3324:	f104 0508 	add.w	r5, r4, #8
    3328:	4628      	mov	r0, r5
    332a:	f003 f9f7 	bl	671c <mbedtls_mpi_bitlen>
    332e:	287f      	cmp	r0, #127	; 0x7f
    3330:	d916      	bls.n	3360 <mbedtls_rsa_check_pubkey+0x4c>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3332:	3414      	adds	r4, #20
    3334:	2100      	movs	r1, #0
    3336:	4620      	mov	r0, r4
    3338:	f003 f9e0 	bl	66fc <mbedtls_mpi_get_bit>
    333c:	b160      	cbz	r0, 3358 <mbedtls_rsa_check_pubkey+0x44>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    333e:	4620      	mov	r0, r4
    3340:	f003 f9ec 	bl	671c <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3344:	2801      	cmp	r0, #1
    3346:	d907      	bls.n	3358 <mbedtls_rsa_check_pubkey+0x44>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    3348:	4629      	mov	r1, r5
    334a:	4620      	mov	r0, r4
    334c:	f003 fbb5 	bl	6aba <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3350:	2800      	cmp	r0, #0
    3352:	da01      	bge.n	3358 <mbedtls_rsa_check_pubkey+0x44>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    3354:	4630      	mov	r0, r6
    3356:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3358:	4e02      	ldr	r6, [pc, #8]	; (3364 <mbedtls_rsa_check_pubkey+0x50>)
    335a:	e7fb      	b.n	3354 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    335c:	4e01      	ldr	r6, [pc, #4]	; (3364 <mbedtls_rsa_check_pubkey+0x50>)
    335e:	e7f9      	b.n	3354 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3360:	4e00      	ldr	r6, [pc, #0]	; (3364 <mbedtls_rsa_check_pubkey+0x50>)
    3362:	e7f7      	b.n	3354 <mbedtls_rsa_check_pubkey+0x40>
    3364:	ffffbe00 	.word	0xffffbe00

00003368 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    3368:	b5f0      	push	{r4, r5, r6, r7, lr}
    336a:	b087      	sub	sp, #28
    336c:	4605      	mov	r5, r0
    336e:	460c      	mov	r4, r1
    3370:	4616      	mov	r6, r2
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3372:	2200      	movs	r2, #0
    3374:	4611      	mov	r1, r2
    3376:	f7ff ff65 	bl	3244 <rsa_check_context>
    337a:	bb98      	cbnz	r0, 33e4 <mbedtls_rsa_public+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    337c:	a803      	add	r0, sp, #12
    337e:	f003 f92c 	bl	65da <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    3382:	686a      	ldr	r2, [r5, #4]
    3384:	4621      	mov	r1, r4
    3386:	a803      	add	r0, sp, #12
    3388:	f003 f9e4 	bl	6754 <mbedtls_mpi_read_binary>
    338c:	4604      	mov	r4, r0
    338e:	b130      	cbz	r0, 339e <mbedtls_rsa_public+0x36>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    3390:	a803      	add	r0, sp, #12
    3392:	f003 f928 	bl	65e6 <mbedtls_mpi_free>

    if( ret != 0 )
    3396:	bb14      	cbnz	r4, 33de <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
    3398:	4620      	mov	r0, r4
    339a:	b007      	add	sp, #28
    339c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    339e:	f105 0408 	add.w	r4, r5, #8
    33a2:	4621      	mov	r1, r4
    33a4:	a803      	add	r0, sp, #12
    33a6:	f003 fb88 	bl	6aba <mbedtls_mpi_cmp_mpi>
    33aa:	2800      	cmp	r0, #0
    33ac:	db02      	blt.n	33b4 <mbedtls_rsa_public+0x4c>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    33ae:	f06f 0403 	mvn.w	r4, #3
    33b2:	e7ed      	b.n	3390 <mbedtls_rsa_public+0x28>
    olen = ctx->len;
    33b4:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    33b6:	f105 0368 	add.w	r3, r5, #104	; 0x68
    33ba:	9300      	str	r3, [sp, #0]
    33bc:	4623      	mov	r3, r4
    33be:	f105 0214 	add.w	r2, r5, #20
    33c2:	a903      	add	r1, sp, #12
    33c4:	4608      	mov	r0, r1
    33c6:	f003 ff30 	bl	722a <mbedtls_mpi_exp_mod>
    33ca:	4604      	mov	r4, r0
    33cc:	2800      	cmp	r0, #0
    33ce:	d1df      	bne.n	3390 <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    33d0:	463a      	mov	r2, r7
    33d2:	4631      	mov	r1, r6
    33d4:	a803      	add	r0, sp, #12
    33d6:	f003 f9ee 	bl	67b6 <mbedtls_mpi_write_binary>
    33da:	4604      	mov	r4, r0
cleanup:
    33dc:	e7d8      	b.n	3390 <mbedtls_rsa_public+0x28>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
    33de:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
    33e2:	e7d9      	b.n	3398 <mbedtls_rsa_public+0x30>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    33e4:	4c00      	ldr	r4, [pc, #0]	; (33e8 <mbedtls_rsa_public+0x80>)
    33e6:	e7d7      	b.n	3398 <mbedtls_rsa_public+0x30>
    33e8:	ffffbf80 	.word	0xffffbf80

000033ec <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    33ec:	2300      	movs	r3, #0
    33ee:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    33f0:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    33f2:	460b      	mov	r3, r1
    33f4:	b9b9      	cbnz	r1, 3426 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
    33f6:	4a19      	ldr	r2, [pc, #100]	; (345c <mbedtls_sha256_starts_ret+0x70>)
    33f8:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    33fa:	4a19      	ldr	r2, [pc, #100]	; (3460 <mbedtls_sha256_starts_ret+0x74>)
    33fc:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    33fe:	4a19      	ldr	r2, [pc, #100]	; (3464 <mbedtls_sha256_starts_ret+0x78>)
    3400:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    3402:	4a19      	ldr	r2, [pc, #100]	; (3468 <mbedtls_sha256_starts_ret+0x7c>)
    3404:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    3406:	4a19      	ldr	r2, [pc, #100]	; (346c <mbedtls_sha256_starts_ret+0x80>)
    3408:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    340a:	4a19      	ldr	r2, [pc, #100]	; (3470 <mbedtls_sha256_starts_ret+0x84>)
    340c:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    340e:	4a19      	ldr	r2, [pc, #100]	; (3474 <mbedtls_sha256_starts_ret+0x88>)
    3410:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    3412:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    3416:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    341a:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    341e:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
    3420:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    3422:	2000      	movs	r0, #0
    3424:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
    3426:	4a14      	ldr	r2, [pc, #80]	; (3478 <mbedtls_sha256_starts_ret+0x8c>)
    3428:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    342a:	4a14      	ldr	r2, [pc, #80]	; (347c <mbedtls_sha256_starts_ret+0x90>)
    342c:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    342e:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    3432:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    3436:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    343a:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    343c:	4a10      	ldr	r2, [pc, #64]	; (3480 <mbedtls_sha256_starts_ret+0x94>)
    343e:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    3440:	4a10      	ldr	r2, [pc, #64]	; (3484 <mbedtls_sha256_starts_ret+0x98>)
    3442:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    3444:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    3448:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    344c:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    3450:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    3452:	4a0d      	ldr	r2, [pc, #52]	; (3488 <mbedtls_sha256_starts_ret+0x9c>)
    3454:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    3456:	4a0d      	ldr	r2, [pc, #52]	; (348c <mbedtls_sha256_starts_ret+0xa0>)
    3458:	6242      	str	r2, [r0, #36]	; 0x24
    345a:	e7e1      	b.n	3420 <mbedtls_sha256_starts_ret+0x34>
    345c:	6a09e667 	.word	0x6a09e667
    3460:	bb67ae85 	.word	0xbb67ae85
    3464:	3c6ef372 	.word	0x3c6ef372
    3468:	a54ff53a 	.word	0xa54ff53a
    346c:	510e527f 	.word	0x510e527f
    3470:	9b05688c 	.word	0x9b05688c
    3474:	1f83d9ab 	.word	0x1f83d9ab
    3478:	c1059ed8 	.word	0xc1059ed8
    347c:	367cd507 	.word	0x367cd507
    3480:	f70e5939 	.word	0xf70e5939
    3484:	ffc00b31 	.word	0xffc00b31
    3488:	64f98fa7 	.word	0x64f98fa7
    348c:	befa4fa4 	.word	0xbefa4fa4

00003490 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    3490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3494:	b0d1      	sub	sp, #324	; 0x144
    3496:	9007      	str	r0, [sp, #28]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
    3498:	2300      	movs	r3, #0
    349a:	e006      	b.n	34aa <mbedtls_internal_sha256_process+0x1a>
        A[i] = ctx->state[i];
    349c:	1c9a      	adds	r2, r3, #2
    349e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    34a2:	ac08      	add	r4, sp, #32
    34a4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    34a8:	3301      	adds	r3, #1
    34aa:	2b07      	cmp	r3, #7
    34ac:	d9f6      	bls.n	349c <mbedtls_internal_sha256_process+0xc>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
    34ae:	2200      	movs	r2, #0
    34b0:	2a0f      	cmp	r2, #15
    34b2:	d811      	bhi.n	34d8 <mbedtls_internal_sha256_process+0x48>
        GET_UINT32_BE( W[i], data, 4 * i );
    34b4:	f811 4022 	ldrb.w	r4, [r1, r2, lsl #2]
    34b8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    34bc:	7843      	ldrb	r3, [r0, #1]
    34be:	041b      	lsls	r3, r3, #16
    34c0:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    34c4:	7884      	ldrb	r4, [r0, #2]
    34c6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    34ca:	78c0      	ldrb	r0, [r0, #3]
    34cc:	4303      	orrs	r3, r0
    34ce:	a810      	add	r0, sp, #64	; 0x40
    34d0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    for( i = 0; i < 16; i++ )
    34d4:	3201      	adds	r2, #1
    34d6:	e7eb      	b.n	34b0 <mbedtls_internal_sha256_process+0x20>

    for( i = 0; i < 16; i += 8 )
    34d8:	f04f 0e00 	mov.w	lr, #0
    34dc:	e142      	b.n	3764 <mbedtls_internal_sha256_process+0x2d4>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
    34de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    34e0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    34e2:	ea4f 21f6 	mov.w	r1, r6, ror #11
    34e6:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
    34ea:	ea81 6176 	eor.w	r1, r1, r6, ror #25
    34ee:	4419      	add	r1, r3
    34f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    34f2:	980d      	ldr	r0, [sp, #52]	; 0x34
    34f4:	ea84 0300 	eor.w	r3, r4, r0
    34f8:	4033      	ands	r3, r6
    34fa:	4063      	eors	r3, r4
    34fc:	4419      	add	r1, r3
    34fe:	f8df 8734 	ldr.w	r8, [pc, #1844]	; 3c34 <mbedtls_internal_sha256_process+0x7a4>
    3502:	f858 302e 	ldr.w	r3, [r8, lr, lsl #2]
    3506:	4419      	add	r1, r3
    3508:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    350c:	f85c 302e 	ldr.w	r3, [ip, lr, lsl #2]
    3510:	4419      	add	r1, r3
    3512:	9d08      	ldr	r5, [sp, #32]
    3514:	ea4f 3a75 	mov.w	sl, r5, ror #13
    3518:	ea8a 0ab5 	eor.w	sl, sl, r5, ror #2
    351c:	ea8a 5ab5 	eor.w	sl, sl, r5, ror #22
    3520:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3522:	ea05 0307 	and.w	r3, r5, r7
    3526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3528:	ea45 0907 	orr.w	r9, r5, r7
    352c:	ea02 0909 	and.w	r9, r2, r9
    3530:	ea43 0309 	orr.w	r3, r3, r9
    3534:	449a      	add	sl, r3
    3536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3538:	eb01 0903 	add.w	r9, r1, r3
    353c:	4451      	add	r1, sl
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    353e:	ea4f 23f9 	mov.w	r3, r9, ror #11
    3542:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
    3546:	ea83 6379 	eor.w	r3, r3, r9, ror #25
    354a:	441c      	add	r4, r3
    354c:	ea86 0300 	eor.w	r3, r6, r0
    3550:	ea09 0303 	and.w	r3, r9, r3
    3554:	4043      	eors	r3, r0
    3556:	441c      	add	r4, r3
    3558:	f10e 0a01 	add.w	sl, lr, #1
    355c:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    3560:	441c      	add	r4, r3
    3562:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    3566:	441c      	add	r4, r3
    3568:	ea4f 3371 	mov.w	r3, r1, ror #13
    356c:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
    3570:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
    3574:	ea05 0a01 	and.w	sl, r5, r1
    3578:	ea45 0b01 	orr.w	fp, r5, r1
    357c:	ea07 0b0b 	and.w	fp, r7, fp
    3580:	ea4a 0a0b 	orr.w	sl, sl, fp
    3584:	4453      	add	r3, sl
    3586:	4422      	add	r2, r4
    3588:	441c      	add	r4, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    358a:	ea4f 23f2 	mov.w	r3, r2, ror #11
    358e:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    3592:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    3596:	4418      	add	r0, r3
    3598:	ea86 0309 	eor.w	r3, r6, r9
    359c:	4013      	ands	r3, r2
    359e:	4073      	eors	r3, r6
    35a0:	4418      	add	r0, r3
    35a2:	f10e 0a02 	add.w	sl, lr, #2
    35a6:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    35aa:	4418      	add	r0, r3
    35ac:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    35b0:	4418      	add	r0, r3
    35b2:	ea4f 3374 	mov.w	r3, r4, ror #13
    35b6:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
    35ba:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
    35be:	ea01 0a04 	and.w	sl, r1, r4
    35c2:	ea41 0b04 	orr.w	fp, r1, r4
    35c6:	ea05 0b0b 	and.w	fp, r5, fp
    35ca:	ea4a 0a0b 	orr.w	sl, sl, fp
    35ce:	4453      	add	r3, sl
    35d0:	4407      	add	r7, r0
    35d2:	4418      	add	r0, r3
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
    35d4:	ea4f 23f7 	mov.w	r3, r7, ror #11
    35d8:	ea83 13b7 	eor.w	r3, r3, r7, ror #6
    35dc:	ea83 6377 	eor.w	r3, r3, r7, ror #25
    35e0:	441e      	add	r6, r3
    35e2:	ea89 0302 	eor.w	r3, r9, r2
    35e6:	403b      	ands	r3, r7
    35e8:	ea89 0303 	eor.w	r3, r9, r3
    35ec:	441e      	add	r6, r3
    35ee:	f10e 0a03 	add.w	sl, lr, #3
    35f2:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    35f6:	441e      	add	r6, r3
    35f8:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    35fc:	441e      	add	r6, r3
    35fe:	ea4f 3370 	mov.w	r3, r0, ror #13
    3602:	ea83 03b0 	eor.w	r3, r3, r0, ror #2
    3606:	ea83 53b0 	eor.w	r3, r3, r0, ror #22
    360a:	ea04 0a00 	and.w	sl, r4, r0
    360e:	ea44 0b00 	orr.w	fp, r4, r0
    3612:	ea01 0b0b 	and.w	fp, r1, fp
    3616:	ea4a 0a0b 	orr.w	sl, sl, fp
    361a:	4453      	add	r3, sl
    361c:	4435      	add	r5, r6
    361e:	441e      	add	r6, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
    3620:	ea4f 23f5 	mov.w	r3, r5, ror #11
    3624:	ea83 13b5 	eor.w	r3, r3, r5, ror #6
    3628:	ea83 6375 	eor.w	r3, r3, r5, ror #25
    362c:	4499      	add	r9, r3
    362e:	ea82 0307 	eor.w	r3, r2, r7
    3632:	402b      	ands	r3, r5
    3634:	4053      	eors	r3, r2
    3636:	4499      	add	r9, r3
    3638:	f10e 0a04 	add.w	sl, lr, #4
    363c:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    3640:	444b      	add	r3, r9
    3642:	f85c 902a 	ldr.w	r9, [ip, sl, lsl #2]
    3646:	444b      	add	r3, r9
    3648:	ea4f 3976 	mov.w	r9, r6, ror #13
    364c:	ea89 09b6 	eor.w	r9, r9, r6, ror #2
    3650:	ea89 59b6 	eor.w	r9, r9, r6, ror #22
    3654:	ea00 0a06 	and.w	sl, r0, r6
    3658:	ea40 0b06 	orr.w	fp, r0, r6
    365c:	ea04 0b0b 	and.w	fp, r4, fp
    3660:	ea4a 0a0b 	orr.w	sl, sl, fp
    3664:	44d1      	add	r9, sl
    3666:	4419      	add	r1, r3
    3668:	910f      	str	r1, [sp, #60]	; 0x3c
    366a:	444b      	add	r3, r9
    366c:	930b      	str	r3, [sp, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
    366e:	ea4f 29f1 	mov.w	r9, r1, ror #11
    3672:	ea89 19b1 	eor.w	r9, r9, r1, ror #6
    3676:	ea89 6971 	eor.w	r9, r9, r1, ror #25
    367a:	444a      	add	r2, r9
    367c:	ea87 0905 	eor.w	r9, r7, r5
    3680:	ea01 0909 	and.w	r9, r1, r9
    3684:	ea87 0909 	eor.w	r9, r7, r9
    3688:	4491      	add	r9, r2
    368a:	f10e 0a05 	add.w	sl, lr, #5
    368e:	f858 202a 	ldr.w	r2, [r8, sl, lsl #2]
    3692:	444a      	add	r2, r9
    3694:	f85c 902a 	ldr.w	r9, [ip, sl, lsl #2]
    3698:	444a      	add	r2, r9
    369a:	ea4f 3a73 	mov.w	sl, r3, ror #13
    369e:	ea8a 0ab3 	eor.w	sl, sl, r3, ror #2
    36a2:	ea8a 5ab3 	eor.w	sl, sl, r3, ror #22
    36a6:	ea06 0903 	and.w	r9, r6, r3
    36aa:	ea46 0b03 	orr.w	fp, r6, r3
    36ae:	ea00 0b0b 	and.w	fp, r0, fp
    36b2:	ea49 090b 	orr.w	r9, r9, fp
    36b6:	44ca      	add	sl, r9
    36b8:	eb04 0902 	add.w	r9, r4, r2
    36bc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    36c0:	4452      	add	r2, sl
    36c2:	920a      	str	r2, [sp, #40]	; 0x28
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
    36c4:	ea4f 24f9 	mov.w	r4, r9, ror #11
    36c8:	ea84 14b9 	eor.w	r4, r4, r9, ror #6
    36cc:	ea84 6479 	eor.w	r4, r4, r9, ror #25
    36d0:	4427      	add	r7, r4
    36d2:	ea85 0401 	eor.w	r4, r5, r1
    36d6:	ea09 0404 	and.w	r4, r9, r4
    36da:	406c      	eors	r4, r5
    36dc:	443c      	add	r4, r7
    36de:	f10e 0a06 	add.w	sl, lr, #6
    36e2:	f858 702a 	ldr.w	r7, [r8, sl, lsl #2]
    36e6:	443c      	add	r4, r7
    36e8:	f85c 702a 	ldr.w	r7, [ip, sl, lsl #2]
    36ec:	443c      	add	r4, r7
    36ee:	ea4f 3772 	mov.w	r7, r2, ror #13
    36f2:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
    36f6:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
    36fa:	ea03 0a02 	and.w	sl, r3, r2
    36fe:	ea43 0b02 	orr.w	fp, r3, r2
    3702:	ea06 0b0b 	and.w	fp, r6, fp
    3706:	ea4a 0a0b 	orr.w	sl, sl, fp
    370a:	4457      	add	r7, sl
    370c:	4420      	add	r0, r4
    370e:	900d      	str	r0, [sp, #52]	; 0x34
    3710:	443c      	add	r4, r7
    3712:	9409      	str	r4, [sp, #36]	; 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    3714:	ea4f 27f0 	mov.w	r7, r0, ror #11
    3718:	ea87 17b0 	eor.w	r7, r7, r0, ror #6
    371c:	ea87 6770 	eor.w	r7, r7, r0, ror #25
    3720:	443d      	add	r5, r7
    3722:	ea81 0909 	eor.w	r9, r1, r9
    3726:	ea00 0909 	and.w	r9, r0, r9
    372a:	ea81 0109 	eor.w	r1, r1, r9
    372e:	4429      	add	r1, r5
    3730:	f10e 0007 	add.w	r0, lr, #7
    3734:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
    3738:	4429      	add	r1, r5
    373a:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
    373e:	4401      	add	r1, r0
    3740:	ea4f 3074 	mov.w	r0, r4, ror #13
    3744:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
    3748:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
    374c:	ea02 0504 	and.w	r5, r2, r4
    3750:	4322      	orrs	r2, r4
    3752:	4013      	ands	r3, r2
    3754:	432b      	orrs	r3, r5
    3756:	4403      	add	r3, r0
    3758:	440e      	add	r6, r1
    375a:	960c      	str	r6, [sp, #48]	; 0x30
    375c:	440b      	add	r3, r1
    375e:	9308      	str	r3, [sp, #32]
    for( i = 0; i < 16; i += 8 )
    3760:	f10e 0e08 	add.w	lr, lr, #8
    3764:	f1be 0f0f 	cmp.w	lr, #15
    3768:	f67f aeb9 	bls.w	34de <mbedtls_internal_sha256_process+0x4e>
    }

    for( i = 16; i < 64; i += 8 )
    376c:	2610      	movs	r6, #16
    376e:	2e3f      	cmp	r6, #63	; 0x3f
    3770:	f200 824d 	bhi.w	3c0e <mbedtls_internal_sha256_process+0x77e>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
    3774:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    3776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3778:	ea4f 27f3 	mov.w	r7, r3, ror #11
    377c:	ea87 17b3 	eor.w	r7, r7, r3, ror #6
    3780:	ea87 6773 	eor.w	r7, r7, r3, ror #25
    3784:	443a      	add	r2, r7
    3786:	980e      	ldr	r0, [sp, #56]	; 0x38
    3788:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    378a:	ea80 0705 	eor.w	r7, r0, r5
    378e:	401f      	ands	r7, r3
    3790:	4047      	eors	r7, r0
    3792:	443a      	add	r2, r7
    3794:	f8df b49c 	ldr.w	fp, [pc, #1180]	; 3c34 <mbedtls_internal_sha256_process+0x7a4>
    3798:	f85b 7026 	ldr.w	r7, [fp, r6, lsl #2]
    379c:	4417      	add	r7, r2
    379e:	1eb3      	subs	r3, r6, #2
    37a0:	461a      	mov	r2, r3
    37a2:	ab10      	add	r3, sp, #64	; 0x40
    37a4:	9204      	str	r2, [sp, #16]
    37a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    37aa:	ea4f 44f2 	mov.w	r4, r2, ror #19
    37ae:	ea84 4472 	eor.w	r4, r4, r2, ror #17
    37b2:	ea84 2492 	eor.w	r4, r4, r2, lsr #10
    37b6:	1ff2      	subs	r2, r6, #7
    37b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    37bc:	4414      	add	r4, r2
    37be:	f1a6 0a0f 	sub.w	sl, r6, #15
    37c2:	f853 c02a 	ldr.w	ip, [r3, sl, lsl #2]
    37c6:	ea4f 42bc 	mov.w	r2, ip, ror #18
    37ca:	ea82 12fc 	eor.w	r2, r2, ip, ror #7
    37ce:	ea82 02dc 	eor.w	r2, r2, ip, lsr #3
    37d2:	4414      	add	r4, r2
    37d4:	f1a6 0210 	sub.w	r2, r6, #16
    37d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    37dc:	4422      	add	r2, r4
    37de:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    37e2:	443a      	add	r2, r7
    37e4:	9908      	ldr	r1, [sp, #32]
    37e6:	ea4f 3c71 	mov.w	ip, r1, ror #13
    37ea:	ea8c 0cb1 	eor.w	ip, ip, r1, ror #2
    37ee:	ea8c 5eb1 	eor.w	lr, ip, r1, ror #22
    37f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    37f4:	463c      	mov	r4, r7
    37f6:	400c      	ands	r4, r1
    37f8:	990a      	ldr	r1, [sp, #40]	; 0x28
    37fa:	9100      	str	r1, [sp, #0]
    37fc:	9908      	ldr	r1, [sp, #32]
    37fe:	ea41 0c07 	orr.w	ip, r1, r7
    3802:	9900      	ldr	r1, [sp, #0]
    3804:	ea01 0c0c 	and.w	ip, r1, ip
    3808:	ea44 0c0c 	orr.w	ip, r4, ip
    380c:	44f4      	add	ip, lr
    380e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3810:	4414      	add	r4, r2
    3812:	4462      	add	r2, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    3814:	ea4f 28f4 	mov.w	r8, r4, ror #11
    3818:	ea88 18b4 	eor.w	r8, r8, r4, ror #6
    381c:	ea88 6874 	eor.w	r8, r8, r4, ror #25
    3820:	4480      	add	r8, r0
    3822:	990c      	ldr	r1, [sp, #48]	; 0x30
    3824:	ea81 0905 	eor.w	r9, r1, r5
    3828:	ea04 0909 	and.w	r9, r4, r9
    382c:	ea85 0909 	eor.w	r9, r5, r9
    3830:	44c8      	add	r8, r9
    3832:	1c71      	adds	r1, r6, #1
    3834:	f85b 0021 	ldr.w	r0, [fp, r1, lsl #2]
    3838:	4480      	add	r8, r0
    383a:	1e70      	subs	r0, r6, #1
    383c:	9005      	str	r0, [sp, #20]
    383e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3842:	ea4f 4cf0 	mov.w	ip, r0, ror #19
    3846:	ea8c 4c70 	eor.w	ip, ip, r0, ror #17
    384a:	ea8c 2c90 	eor.w	ip, ip, r0, lsr #10
    384e:	1fb0      	subs	r0, r6, #6
    3850:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3854:	4484      	add	ip, r0
    3856:	f1a6 0e0e 	sub.w	lr, r6, #14
    385a:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
    385e:	ea4f 40b9 	mov.w	r0, r9, ror #18
    3862:	ea80 10f9 	eor.w	r0, r0, r9, ror #7
    3866:	ea80 00d9 	eor.w	r0, r0, r9, lsr #3
    386a:	4460      	add	r0, ip
    386c:	f853 902a 	ldr.w	r9, [r3, sl, lsl #2]
    3870:	4448      	add	r0, r9
    3872:	9102      	str	r1, [sp, #8]
    3874:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    3878:	eb08 0900 	add.w	r9, r8, r0
    387c:	ea4f 3872 	mov.w	r8, r2, ror #13
    3880:	ea88 08b2 	eor.w	r8, r8, r2, ror #2
    3884:	ea88 58b2 	eor.w	r8, r8, r2, ror #22
    3888:	9908      	ldr	r1, [sp, #32]
    388a:	ea01 0002 	and.w	r0, r1, r2
    388e:	ea41 0c02 	orr.w	ip, r1, r2
    3892:	9701      	str	r7, [sp, #4]
    3894:	ea07 0c0c 	and.w	ip, r7, ip
    3898:	ea40 0c0c 	orr.w	ip, r0, ip
    389c:	44c4      	add	ip, r8
    389e:	9800      	ldr	r0, [sp, #0]
    38a0:	eb00 0809 	add.w	r8, r0, r9
    38a4:	44e1      	add	r9, ip
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
    38a6:	ea4f 20f8 	mov.w	r0, r8, ror #11
    38aa:	ea80 10b8 	eor.w	r0, r0, r8, ror #6
    38ae:	ea80 6078 	eor.w	r0, r0, r8, ror #25
    38b2:	4405      	add	r5, r0
    38b4:	990c      	ldr	r1, [sp, #48]	; 0x30
    38b6:	ea81 0004 	eor.w	r0, r1, r4
    38ba:	ea08 0000 	and.w	r0, r8, r0
    38be:	4048      	eors	r0, r1
    38c0:	4405      	add	r5, r0
    38c2:	1cb0      	adds	r0, r6, #2
    38c4:	4601      	mov	r1, r0
    38c6:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
    38ca:	4405      	add	r5, r0
    38cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
    38d0:	ea4f 4cf0 	mov.w	ip, r0, ror #19
    38d4:	ea8c 4c70 	eor.w	ip, ip, r0, ror #17
    38d8:	ea8c 2c90 	eor.w	ip, ip, r0, lsr #10
    38dc:	1f70      	subs	r0, r6, #5
    38de:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    38e2:	4484      	add	ip, r0
    38e4:	f1a6 0a0d 	sub.w	sl, r6, #13
    38e8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
    38ec:	ea4f 40b0 	mov.w	r0, r0, ror #18
    38f0:	f853 702a 	ldr.w	r7, [r3, sl, lsl #2]
    38f4:	ea80 10f7 	eor.w	r0, r0, r7, ror #7
    38f8:	ea80 00d7 	eor.w	r0, r0, r7, lsr #3
    38fc:	4460      	add	r0, ip
    38fe:	f853 c02e 	ldr.w	ip, [r3, lr, lsl #2]
    3902:	4460      	add	r0, ip
    3904:	9103      	str	r1, [sp, #12]
    3906:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    390a:	4405      	add	r5, r0
    390c:	ea4f 3c79 	mov.w	ip, r9, ror #13
    3910:	ea8c 0cb9 	eor.w	ip, ip, r9, ror #2
    3914:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
    3918:	ea02 0009 	and.w	r0, r2, r9
    391c:	ea42 0e09 	orr.w	lr, r2, r9
    3920:	9908      	ldr	r1, [sp, #32]
    3922:	ea01 0e0e 	and.w	lr, r1, lr
    3926:	ea40 000e 	orr.w	r0, r0, lr
    392a:	4484      	add	ip, r0
    392c:	9f01      	ldr	r7, [sp, #4]
    392e:	eb07 0e05 	add.w	lr, r7, r5
    3932:	eb05 070c 	add.w	r7, r5, ip
    3936:	9700      	str	r7, [sp, #0]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    3938:	ea4f 20fe 	mov.w	r0, lr, ror #11
    393c:	ea80 10be 	eor.w	r0, r0, lr, ror #6
    3940:	ea80 607e 	eor.w	r0, r0, lr, ror #25
    3944:	990c      	ldr	r1, [sp, #48]	; 0x30
    3946:	180d      	adds	r5, r1, r0
    3948:	ea84 0108 	eor.w	r1, r4, r8
    394c:	ea0e 0101 	and.w	r1, lr, r1
    3950:	4061      	eors	r1, r4
    3952:	1868      	adds	r0, r5, r1
    3954:	1cf7      	adds	r7, r6, #3
    3956:	f85b 1027 	ldr.w	r1, [fp, r7, lsl #2]
    395a:	4401      	add	r1, r0
    395c:	9d02      	ldr	r5, [sp, #8]
    395e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    3962:	ea4f 45f0 	mov.w	r5, r0, ror #19
    3966:	ea85 4570 	eor.w	r5, r5, r0, ror #17
    396a:	ea85 2590 	eor.w	r5, r5, r0, lsr #10
    396e:	1f30      	subs	r0, r6, #4
    3970:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3974:	4405      	add	r5, r0
    3976:	9501      	str	r5, [sp, #4]
    3978:	f1a6 0c0c 	sub.w	ip, r6, #12
    397c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
    3980:	ea4f 40b0 	mov.w	r0, r0, ror #18
    3984:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
    3988:	ea80 10f5 	eor.w	r0, r0, r5, ror #7
    398c:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
    3990:	9d01      	ldr	r5, [sp, #4]
    3992:	4428      	add	r0, r5
    3994:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
    3998:	4428      	add	r0, r5
    399a:	9706      	str	r7, [sp, #24]
    399c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
    39a0:	4401      	add	r1, r0
    39a2:	9800      	ldr	r0, [sp, #0]
    39a4:	ea4f 3570 	mov.w	r5, r0, ror #13
    39a8:	4607      	mov	r7, r0
    39aa:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
    39ae:	ea85 55b0 	eor.w	r5, r5, r0, ror #22
    39b2:	ea09 0000 	and.w	r0, r9, r0
    39b6:	ea49 0a07 	orr.w	sl, r9, r7
    39ba:	ea02 0a0a 	and.w	sl, r2, sl
    39be:	ea40 000a 	orr.w	r0, r0, sl
    39c2:	4405      	add	r5, r0
    39c4:	9808      	ldr	r0, [sp, #32]
    39c6:	eb00 0a01 	add.w	sl, r0, r1
    39ca:	4429      	add	r1, r5
    39cc:	9101      	str	r1, [sp, #4]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    39ce:	ea4f 25fa 	mov.w	r5, sl, ror #11
    39d2:	ea85 15ba 	eor.w	r5, r5, sl, ror #6
    39d6:	ea85 657a 	eor.w	r5, r5, sl, ror #25
    39da:	442c      	add	r4, r5
    39dc:	ea88 050e 	eor.w	r5, r8, lr
    39e0:	ea0a 0505 	and.w	r5, sl, r5
    39e4:	ea88 0505 	eor.w	r5, r8, r5
    39e8:	4425      	add	r5, r4
    39ea:	1d34      	adds	r4, r6, #4
    39ec:	9402      	str	r4, [sp, #8]
    39ee:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
    39f2:	4405      	add	r5, r0
    39f4:	9903      	ldr	r1, [sp, #12]
    39f6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    39fa:	ea4f 40f4 	mov.w	r0, r4, ror #19
    39fe:	ea80 4074 	eor.w	r0, r0, r4, ror #17
    3a02:	ea80 2094 	eor.w	r0, r0, r4, lsr #10
    3a06:	1ef4      	subs	r4, r6, #3
    3a08:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
    3a0c:	4420      	add	r0, r4
    3a0e:	f1a6 070b 	sub.w	r7, r6, #11
    3a12:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
    3a16:	ea4f 44b1 	mov.w	r4, r1, ror #18
    3a1a:	ea84 14f1 	eor.w	r4, r4, r1, ror #7
    3a1e:	ea84 04d1 	eor.w	r4, r4, r1, lsr #3
    3a22:	4404      	add	r4, r0
    3a24:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
    3a28:	4420      	add	r0, r4
    3a2a:	9902      	ldr	r1, [sp, #8]
    3a2c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    3a30:	4405      	add	r5, r0
    3a32:	9901      	ldr	r1, [sp, #4]
    3a34:	ea4f 3c71 	mov.w	ip, r1, ror #13
    3a38:	ea8c 0cb1 	eor.w	ip, ip, r1, ror #2
    3a3c:	ea8c 5cb1 	eor.w	ip, ip, r1, ror #22
    3a40:	9800      	ldr	r0, [sp, #0]
    3a42:	4604      	mov	r4, r0
    3a44:	400c      	ands	r4, r1
    3a46:	4601      	mov	r1, r0
    3a48:	9801      	ldr	r0, [sp, #4]
    3a4a:	4308      	orrs	r0, r1
    3a4c:	ea09 0000 	and.w	r0, r9, r0
    3a50:	4320      	orrs	r0, r4
    3a52:	4460      	add	r0, ip
    3a54:	442a      	add	r2, r5
    3a56:	920f      	str	r2, [sp, #60]	; 0x3c
    3a58:	4428      	add	r0, r5
    3a5a:	900b      	str	r0, [sp, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
    3a5c:	ea4f 2cf2 	mov.w	ip, r2, ror #11
    3a60:	ea8c 1cb2 	eor.w	ip, ip, r2, ror #6
    3a64:	ea8c 6c72 	eor.w	ip, ip, r2, ror #25
    3a68:	44c4      	add	ip, r8
    3a6a:	ea8e 080a 	eor.w	r8, lr, sl
    3a6e:	9203      	str	r2, [sp, #12]
    3a70:	ea02 0808 	and.w	r8, r2, r8
    3a74:	ea8e 0808 	eor.w	r8, lr, r8
    3a78:	44c4      	add	ip, r8
    3a7a:	1d74      	adds	r4, r6, #5
    3a7c:	4621      	mov	r1, r4
    3a7e:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
    3a82:	44a4      	add	ip, r4
    3a84:	9d06      	ldr	r5, [sp, #24]
    3a86:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    3a8a:	ea4f 44f5 	mov.w	r4, r5, ror #19
    3a8e:	ea84 4475 	eor.w	r4, r4, r5, ror #17
    3a92:	ea84 2495 	eor.w	r4, r4, r5, lsr #10
    3a96:	9a04      	ldr	r2, [sp, #16]
    3a98:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    3a9c:	442c      	add	r4, r5
    3a9e:	f1a6 080a 	sub.w	r8, r6, #10
    3aa2:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    3aa6:	ea4f 45b2 	mov.w	r5, r2, ror #18
    3aaa:	ea85 15f2 	eor.w	r5, r5, r2, ror #7
    3aae:	ea85 05d2 	eor.w	r5, r5, r2, lsr #3
    3ab2:	4425      	add	r5, r4
    3ab4:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
    3ab8:	442c      	add	r4, r5
    3aba:	9104      	str	r1, [sp, #16]
    3abc:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
    3ac0:	4464      	add	r4, ip
    3ac2:	ea4f 3770 	mov.w	r7, r0, ror #13
    3ac6:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
    3aca:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
    3ace:	9901      	ldr	r1, [sp, #4]
    3ad0:	ea01 0500 	and.w	r5, r1, r0
    3ad4:	ea41 0c00 	orr.w	ip, r1, r0
    3ad8:	9900      	ldr	r1, [sp, #0]
    3ada:	ea01 0c0c 	and.w	ip, r1, ip
    3ade:	ea45 050c 	orr.w	r5, r5, ip
    3ae2:	442f      	add	r7, r5
    3ae4:	eb09 0c04 	add.w	ip, r9, r4
    3ae8:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    3aec:	443c      	add	r4, r7
    3aee:	940a      	str	r4, [sp, #40]	; 0x28
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
    3af0:	ea4f 27fc 	mov.w	r7, ip, ror #11
    3af4:	ea87 17bc 	eor.w	r7, r7, ip, ror #6
    3af8:	ea87 677c 	eor.w	r7, r7, ip, ror #25
    3afc:	4477      	add	r7, lr
    3afe:	9d03      	ldr	r5, [sp, #12]
    3b00:	ea8a 0e05 	eor.w	lr, sl, r5
    3b04:	ea0c 0e0e 	and.w	lr, ip, lr
    3b08:	ea8a 0e0e 	eor.w	lr, sl, lr
    3b0c:	4477      	add	r7, lr
    3b0e:	f106 0906 	add.w	r9, r6, #6
    3b12:	f85b 5029 	ldr.w	r5, [fp, r9, lsl #2]
    3b16:	442f      	add	r7, r5
    3b18:	9d02      	ldr	r5, [sp, #8]
    3b1a:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    3b1e:	ea4f 4ef5 	mov.w	lr, r5, ror #19
    3b22:	ea8e 4e75 	eor.w	lr, lr, r5, ror #17
    3b26:	ea8e 2e95 	eor.w	lr, lr, r5, lsr #10
    3b2a:	9a05      	ldr	r2, [sp, #20]
    3b2c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    3b30:	44ae      	add	lr, r5
    3b32:	f1a6 0209 	sub.w	r2, r6, #9
    3b36:	9202      	str	r2, [sp, #8]
    3b38:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    3b3c:	4629      	mov	r1, r5
    3b3e:	ea4f 45b5 	mov.w	r5, r5, ror #18
    3b42:	ea85 15f1 	eor.w	r5, r5, r1, ror #7
    3b46:	ea85 05d1 	eor.w	r5, r5, r1, lsr #3
    3b4a:	4475      	add	r5, lr
    3b4c:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
    3b50:	4475      	add	r5, lr
    3b52:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
    3b56:	442f      	add	r7, r5
    3b58:	ea4f 3574 	mov.w	r5, r4, ror #13
    3b5c:	ea85 05b4 	eor.w	r5, r5, r4, ror #2
    3b60:	ea85 55b4 	eor.w	r5, r5, r4, ror #22
    3b64:	ea00 0904 	and.w	r9, r0, r4
    3b68:	ea40 0e04 	orr.w	lr, r0, r4
    3b6c:	9a01      	ldr	r2, [sp, #4]
    3b6e:	ea02 0e0e 	and.w	lr, r2, lr
    3b72:	ea49 090e 	orr.w	r9, r9, lr
    3b76:	44a9      	add	r9, r5
    3b78:	9900      	ldr	r1, [sp, #0]
    3b7a:	19cd      	adds	r5, r1, r7
    3b7c:	950d      	str	r5, [sp, #52]	; 0x34
    3b7e:	444f      	add	r7, r9
    3b80:	9709      	str	r7, [sp, #36]	; 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    3b82:	ea4f 2ef5 	mov.w	lr, r5, ror #11
    3b86:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    3b8a:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    3b8e:	44d6      	add	lr, sl
    3b90:	9a03      	ldr	r2, [sp, #12]
    3b92:	ea82 0c0c 	eor.w	ip, r2, ip
    3b96:	ea05 0c0c 	and.w	ip, r5, ip
    3b9a:	ea82 020c 	eor.w	r2, r2, ip
    3b9e:	4472      	add	r2, lr
    3ba0:	f106 0807 	add.w	r8, r6, #7
    3ba4:	f85b 5028 	ldr.w	r5, [fp, r8, lsl #2]
    3ba8:	eb02 0e05 	add.w	lr, r2, r5
    3bac:	9904      	ldr	r1, [sp, #16]
    3bae:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
    3bb2:	ea4f 42f5 	mov.w	r2, r5, ror #19
    3bb6:	ea82 4275 	eor.w	r2, r2, r5, ror #17
    3bba:	ea82 2295 	eor.w	r2, r2, r5, lsr #10
    3bbe:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
    3bc2:	440a      	add	r2, r1
    3bc4:	f1a6 0508 	sub.w	r5, r6, #8
    3bc8:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
    3bcc:	ea4f 45bc 	mov.w	r5, ip, ror #18
    3bd0:	ea85 15fc 	eor.w	r5, r5, ip, ror #7
    3bd4:	ea85 05dc 	eor.w	r5, r5, ip, lsr #3
    3bd8:	442a      	add	r2, r5
    3bda:	9d02      	ldr	r5, [sp, #8]
    3bdc:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    3be0:	442a      	add	r2, r5
    3be2:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
    3be6:	4472      	add	r2, lr
    3be8:	ea4f 3377 	mov.w	r3, r7, ror #13
    3bec:	ea83 03b7 	eor.w	r3, r3, r7, ror #2
    3bf0:	ea83 53b7 	eor.w	r3, r3, r7, ror #22
    3bf4:	ea04 0507 	and.w	r5, r4, r7
    3bf8:	4327      	orrs	r7, r4
    3bfa:	4038      	ands	r0, r7
    3bfc:	4328      	orrs	r0, r5
    3bfe:	4418      	add	r0, r3
    3c00:	9901      	ldr	r1, [sp, #4]
    3c02:	4411      	add	r1, r2
    3c04:	910c      	str	r1, [sp, #48]	; 0x30
    3c06:	4410      	add	r0, r2
    3c08:	9008      	str	r0, [sp, #32]
    for( i = 16; i < 64; i += 8 )
    3c0a:	3608      	adds	r6, #8
    3c0c:	e5af      	b.n	376e <mbedtls_internal_sha256_process+0x2de>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    3c0e:	2300      	movs	r3, #0
    3c10:	9807      	ldr	r0, [sp, #28]
    3c12:	e009      	b.n	3c28 <mbedtls_internal_sha256_process+0x798>
        ctx->state[i] += A[i];
    3c14:	aa08      	add	r2, sp, #32
    3c16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    3c1a:	1c99      	adds	r1, r3, #2
    3c1c:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    3c20:	4422      	add	r2, r4
    3c22:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
    3c26:	3301      	adds	r3, #1
    3c28:	2b07      	cmp	r3, #7
    3c2a:	d9f3      	bls.n	3c14 <mbedtls_internal_sha256_process+0x784>

    return( 0 );
}
    3c2c:	2000      	movs	r0, #0
    3c2e:	b051      	add	sp, #324	; 0x144
    3c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c34:	000086fc 	.word	0x000086fc

00003c38 <nrf91_errata_6>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3c38:	4b08      	ldr	r3, [pc, #32]	; (3c5c <nrf91_errata_6+0x24>)
    3c3a:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3c3c:	4a08      	ldr	r2, [pc, #32]	; (3c60 <nrf91_errata_6+0x28>)
    3c3e:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    3c40:	2b09      	cmp	r3, #9
    3c42:	d001      	beq.n	3c48 <nrf91_errata_6+0x10>
                    case 0x02ul:
                        return true;
                }
            }
        #endif
        return false;
    3c44:	2000      	movs	r0, #0
    3c46:	4770      	bx	lr
                switch(var2)
    3c48:	2a01      	cmp	r2, #1
    3c4a:	d003      	beq.n	3c54 <nrf91_errata_6+0x1c>
    3c4c:	2a02      	cmp	r2, #2
    3c4e:	d003      	beq.n	3c58 <nrf91_errata_6+0x20>
        return false;
    3c50:	2000      	movs	r0, #0
    3c52:	4770      	bx	lr
                        return true;
    3c54:	2001      	movs	r0, #1
    3c56:	4770      	bx	lr
                        return true;
    3c58:	2001      	movs	r0, #1
    #endif
}
    3c5a:	4770      	bx	lr
    3c5c:	00ff0130 	.word	0x00ff0130
    3c60:	00ff0134 	.word	0x00ff0134

00003c64 <nrf91_errata_14>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3c64:	4b06      	ldr	r3, [pc, #24]	; (3c80 <nrf91_errata_14+0x1c>)
    3c66:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3c68:	4a06      	ldr	r2, [pc, #24]	; (3c84 <nrf91_errata_14+0x20>)
    3c6a:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    3c6c:	2b09      	cmp	r3, #9
    3c6e:	d001      	beq.n	3c74 <nrf91_errata_14+0x10>
                    case 0x02ul:
                        return false;
                }
            }
        #endif
        return false;
    3c70:	2000      	movs	r0, #0
    3c72:	4770      	bx	lr
                switch(var2)
    3c74:	2a01      	cmp	r2, #1
    3c76:	d001      	beq.n	3c7c <nrf91_errata_14+0x18>
        return false;
    3c78:	2000      	movs	r0, #0
    3c7a:	4770      	bx	lr
                        return true;
    3c7c:	2001      	movs	r0, #1
    #endif
}
    3c7e:	4770      	bx	lr
    3c80:	00ff0130 	.word	0x00ff0130
    3c84:	00ff0134 	.word	0x00ff0134

00003c88 <nrf91_errata_15>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3c88:	4b06      	ldr	r3, [pc, #24]	; (3ca4 <nrf91_errata_15+0x1c>)
    3c8a:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3c8c:	4a06      	ldr	r2, [pc, #24]	; (3ca8 <nrf91_errata_15+0x20>)
    3c8e:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    3c90:	2b09      	cmp	r3, #9
    3c92:	d001      	beq.n	3c98 <nrf91_errata_15+0x10>
                    case 0x02ul:
                        return true;
                }
            }
        #endif
        return false;
    3c94:	2000      	movs	r0, #0
    3c96:	4770      	bx	lr
                switch(var2)
    3c98:	2a02      	cmp	r2, #2
    3c9a:	d001      	beq.n	3ca0 <nrf91_errata_15+0x18>
        return false;
    3c9c:	2000      	movs	r0, #0
    3c9e:	4770      	bx	lr
                        return true;
    3ca0:	2001      	movs	r0, #1
    #endif
}
    3ca2:	4770      	bx	lr
    3ca4:	00ff0130 	.word	0x00ff0130
    3ca8:	00ff0134 	.word	0x00ff0134

00003cac <nrf91_errata_20>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3cac:	4b06      	ldr	r3, [pc, #24]	; (3cc8 <nrf91_errata_20+0x1c>)
    3cae:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3cb0:	4a06      	ldr	r2, [pc, #24]	; (3ccc <nrf91_errata_20+0x20>)
    3cb2:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    3cb4:	2b09      	cmp	r3, #9
    3cb6:	d001      	beq.n	3cbc <nrf91_errata_20+0x10>
                    case 0x02ul:
                        return false;
                }
            }
        #endif
        return false;
    3cb8:	2000      	movs	r0, #0
    3cba:	4770      	bx	lr
                switch(var2)
    3cbc:	2a01      	cmp	r2, #1
    3cbe:	d001      	beq.n	3cc4 <nrf91_errata_20+0x18>
        return false;
    3cc0:	2000      	movs	r0, #0
    3cc2:	4770      	bx	lr
                        return true;
    3cc4:	2001      	movs	r0, #1
    #endif
}
    3cc6:	4770      	bx	lr
    3cc8:	00ff0130 	.word	0x00ff0130
    3ccc:	00ff0134 	.word	0x00ff0134

00003cd0 <nrf91_errata_31>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3cd0:	4b08      	ldr	r3, [pc, #32]	; (3cf4 <nrf91_errata_31+0x24>)
    3cd2:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3cd4:	4a08      	ldr	r2, [pc, #32]	; (3cf8 <nrf91_errata_31+0x28>)
    3cd6:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    3cd8:	2b09      	cmp	r3, #9
    3cda:	d001      	beq.n	3ce0 <nrf91_errata_31+0x10>
                    case 0x02ul:
                        return true;
                }
            }
        #endif
        return false;
    3cdc:	2000      	movs	r0, #0
    3cde:	4770      	bx	lr
                switch(var2)
    3ce0:	2a01      	cmp	r2, #1
    3ce2:	d003      	beq.n	3cec <nrf91_errata_31+0x1c>
    3ce4:	2a02      	cmp	r2, #2
    3ce6:	d003      	beq.n	3cf0 <nrf91_errata_31+0x20>
        return false;
    3ce8:	2000      	movs	r0, #0
    3cea:	4770      	bx	lr
                        return true;
    3cec:	2001      	movs	r0, #1
    3cee:	4770      	bx	lr
                        return true;
    3cf0:	2001      	movs	r0, #1
    #endif
}
    3cf2:	4770      	bx	lr
    3cf4:	00ff0130 	.word	0x00ff0130
    3cf8:	00ff0134 	.word	0x00ff0134

00003cfc <uicr_HFXOCNT_erased>:

#if !defined(NRF_TRUSTZONE_NONSECURE)

    bool uicr_HFXOCNT_erased()
    {
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    3cfc:	4b04      	ldr	r3, [pc, #16]	; (3d10 <uicr_HFXOCNT_erased+0x14>)
    3cfe:	6a1b      	ldr	r3, [r3, #32]
    3d00:	f1b3 3fff 	cmp.w	r3, #4294967295
    3d04:	d001      	beq.n	3d0a <uicr_HFXOCNT_erased+0xe>
            return true;
        }
        return false;
    3d06:	2000      	movs	r0, #0
    3d08:	4770      	bx	lr
            return true;
    3d0a:	2001      	movs	r0, #1
    }
    3d0c:	4770      	bx	lr
    3d0e:	bf00      	nop
    3d10:	00ff8000 	.word	0x00ff8000

00003d14 <uicr_HFXOSRC_erased>:
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    3d14:	4b04      	ldr	r3, [pc, #16]	; (3d28 <uicr_HFXOSRC_erased+0x14>)
    3d16:	69db      	ldr	r3, [r3, #28]
    3d18:	f013 0f01 	tst.w	r3, #1
    3d1c:	d101      	bne.n	3d22 <uicr_HFXOSRC_erased+0xe>
            return true;
        }
        return false;
    3d1e:	2000      	movs	r0, #0
    3d20:	4770      	bx	lr
            return true;
    3d22:	2001      	movs	r0, #1
    }
    3d24:	4770      	bx	lr
    3d26:	bf00      	nop
    3d28:	00ff8000 	.word	0x00ff8000

00003d2c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK;
    3d2c:	4b01      	ldr	r3, [pc, #4]	; (3d34 <SystemCoreClockUpdate+0x8>)
    3d2e:	4a02      	ldr	r2, [pc, #8]	; (3d38 <SystemCoreClockUpdate+0xc>)
    3d30:	601a      	str	r2, [r3, #0]
}
    3d32:	4770      	bx	lr
    3d34:	20005774 	.word	0x20005774
    3d38:	03d09000 	.word	0x03d09000

00003d3c <SystemInit>:
{
    3d3c:	b508      	push	{r3, lr}
        if (nrf91_errata_6()){
    3d3e:	f7ff ff7b 	bl	3c38 <nrf91_errata_6>
    3d42:	b130      	cbz	r0, 3d52 <SystemInit+0x16>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    3d44:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3d48:	2200      	movs	r2, #0
    3d4a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    3d4e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        if (nrf91_errata_14()){
    3d52:	f7ff ff87 	bl	3c64 <nrf91_errata_14>
    3d56:	b130      	cbz	r0, 3d66 <SystemInit+0x2a>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    3d58:	2301      	movs	r3, #1
    3d5a:	4a42      	ldr	r2, [pc, #264]	; (3e64 <SystemInit+0x128>)
    3d5c:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    3d5e:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    3d62:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
        if (nrf91_errata_15()){
    3d66:	f7ff ff8f 	bl	3c88 <nrf91_errata_15>
    3d6a:	b118      	cbz	r0, 3d74 <SystemInit+0x38>
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    3d6c:	4b3e      	ldr	r3, [pc, #248]	; (3e68 <SystemInit+0x12c>)
    3d6e:	2201      	movs	r2, #1
    3d70:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        if (nrf91_errata_20()){
    3d74:	f7ff ff9a 	bl	3cac <nrf91_errata_20>
    3d78:	b110      	cbz	r0, 3d80 <SystemInit+0x44>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    3d7a:	4b3c      	ldr	r3, [pc, #240]	; (3e6c <SystemInit+0x130>)
    3d7c:	220e      	movs	r2, #14
    3d7e:	601a      	str	r2, [r3, #0]
        if (nrf91_errata_31()){
    3d80:	f7ff ffa6 	bl	3cd0 <nrf91_errata_31>
    3d84:	b128      	cbz	r0, 3d92 <SystemInit+0x56>
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    3d86:	4b3a      	ldr	r3, [pc, #232]	; (3e70 <SystemInit+0x134>)
    3d88:	2200      	movs	r2, #0
    3d8a:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    3d8c:	3304      	adds	r3, #4
    3d8e:	2201      	movs	r2, #1
    3d90:	601a      	str	r2, [r3, #0]
{
    3d92:	2200      	movs	r2, #0
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3d94:	2aff      	cmp	r2, #255	; 0xff
    3d96:	d815      	bhi.n	3dc4 <SystemInit+0x88>
    3d98:	f102 0360 	add.w	r3, r2, #96	; 0x60
    3d9c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3da0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    3da4:	f1b3 3fff 	cmp.w	r3, #4294967295
    3da8:	d00c      	beq.n	3dc4 <SystemInit+0x88>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3daa:	f102 0360 	add.w	r3, r2, #96	; 0x60
    3dae:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3db2:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    3db6:	00db      	lsls	r3, r3, #3
    3db8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    3dbc:	685b      	ldr	r3, [r3, #4]
    3dbe:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3dc0:	3201      	adds	r2, #1
    3dc2:	e7e7      	b.n	3d94 <SystemInit+0x58>
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    3dc4:	f7ff ffa6 	bl	3d14 <uicr_HFXOSRC_erased>
    3dc8:	b960      	cbnz	r0, 3de4 <SystemInit+0xa8>
    3dca:	f7ff ff97 	bl	3cfc <uicr_HFXOCNT_erased>
    3dce:	b948      	cbnz	r0, 3de4 <SystemInit+0xa8>
        SCB->NSACR |= (3UL << 10);
    3dd0:	4a28      	ldr	r2, [pc, #160]	; (3e74 <SystemInit+0x138>)
    3dd2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    3dd6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    3dda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClockUpdate();
    3dde:	f7ff ffa5 	bl	3d2c <SystemCoreClockUpdate>
}
    3de2:	bd08      	pop	{r3, pc}
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3de4:	4b24      	ldr	r3, [pc, #144]	; (3e78 <SystemInit+0x13c>)
    3de6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3dea:	2b01      	cmp	r3, #1
    3dec:	d1fa      	bne.n	3de4 <SystemInit+0xa8>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    3dee:	4b22      	ldr	r3, [pc, #136]	; (3e78 <SystemInit+0x13c>)
    3df0:	2201      	movs	r2, #1
    3df2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3df6:	4b20      	ldr	r3, [pc, #128]	; (3e78 <SystemInit+0x13c>)
    3df8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3dfc:	2b01      	cmp	r3, #1
    3dfe:	d1fa      	bne.n	3df6 <SystemInit+0xba>
          if (uicr_HFXOSRC_erased()){
    3e00:	f7ff ff88 	bl	3d14 <uicr_HFXOSRC_erased>
    3e04:	b148      	cbz	r0, 3e1a <SystemInit+0xde>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    3e06:	4a1d      	ldr	r2, [pc, #116]	; (3e7c <SystemInit+0x140>)
    3e08:	69d3      	ldr	r3, [r2, #28]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    3e0a:	f023 0301 	bic.w	r3, r3, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    3e0e:	61d3      	str	r3, [r2, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3e10:	4b19      	ldr	r3, [pc, #100]	; (3e78 <SystemInit+0x13c>)
    3e12:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3e16:	2b01      	cmp	r3, #1
    3e18:	d1fa      	bne.n	3e10 <SystemInit+0xd4>
          if (uicr_HFXOCNT_erased()){
    3e1a:	f7ff ff6f 	bl	3cfc <uicr_HFXOCNT_erased>
    3e1e:	b158      	cbz	r0, 3e38 <SystemInit+0xfc>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    3e20:	4a16      	ldr	r2, [pc, #88]	; (3e7c <SystemInit+0x140>)
    3e22:	6a13      	ldr	r3, [r2, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    3e24:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    3e28:	f043 0320 	orr.w	r3, r3, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    3e2c:	6213      	str	r3, [r2, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3e2e:	4b12      	ldr	r3, [pc, #72]	; (3e78 <SystemInit+0x13c>)
    3e30:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3e34:	2b01      	cmp	r3, #1
    3e36:	d1fa      	bne.n	3e2e <SystemInit+0xf2>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    3e38:	4b0f      	ldr	r3, [pc, #60]	; (3e78 <SystemInit+0x13c>)
    3e3a:	2200      	movs	r2, #0
    3e3c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3e40:	4b0d      	ldr	r3, [pc, #52]	; (3e78 <SystemInit+0x13c>)
    3e42:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3e46:	2b01      	cmp	r3, #1
    3e48:	d1fa      	bne.n	3e40 <SystemInit+0x104>
  __ASM volatile ("dsb 0xF":::"memory");
    3e4a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3e4e:	4909      	ldr	r1, [pc, #36]	; (3e74 <SystemInit+0x138>)
    3e50:	68ca      	ldr	r2, [r1, #12]
    3e52:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3e56:	4b0a      	ldr	r3, [pc, #40]	; (3e80 <SystemInit+0x144>)
    3e58:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3e5a:	60cb      	str	r3, [r1, #12]
    3e5c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3e60:	bf00      	nop
    3e62:	e7fd      	b.n	3e60 <SystemInit+0x124>
    3e64:	50004a38 	.word	0x50004a38
    3e68:	50004000 	.word	0x50004000
    3e6c:	5003aee4 	.word	0x5003aee4
    3e70:	5000470c 	.word	0x5000470c
    3e74:	e000ed00 	.word	0xe000ed00
    3e78:	50039000 	.word	0x50039000
    3e7c:	00ff8000 	.word	0x00ff8000
    3e80:	05fa0004 	.word	0x05fa0004

00003e84 <nvmc_readonly_mode_set>:
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    3e84:	4b02      	ldr	r3, [pc, #8]	; (3e90 <nvmc_readonly_mode_set+0xc>)
    3e86:	2200      	movs	r2, #0
    3e88:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#if defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#else
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    3e8c:	4770      	bx	lr
    3e8e:	bf00      	nop
    3e90:	50039000 	.word	0x50039000

00003e94 <nvmc_write_mode_set>:
    3e94:	4b02      	ldr	r3, [pc, #8]	; (3ea0 <nvmc_write_mode_set+0xc>)
    3e96:	2201      	movs	r2, #1
    3e98:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#if defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#else
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
    3e9c:	4770      	bx	lr
    3e9e:	bf00      	nop
    3ea0:	50039000 	.word	0x50039000

00003ea4 <nvmc_erase_mode_set>:
    3ea4:	4b02      	ldr	r3, [pc, #8]	; (3eb0 <nvmc_erase_mode_set+0xc>)
    3ea6:	2202      	movs	r2, #2
    3ea8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#if defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#else
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
    3eac:	4770      	bx	lr
    3eae:	bf00      	nop
    3eb0:	50039000 	.word	0x50039000

00003eb4 <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    3eb4:	4b04      	ldr	r3, [pc, #16]	; (3ec8 <nvmc_word_write+0x14>)
    3eb6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    3eba:	f013 0f01 	tst.w	r3, #1
    3ebe:	d0f9      	beq.n	3eb4 <nvmc_word_write>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    3ec0:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    3ec2:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    3ec6:	4770      	bx	lr
    3ec8:	50039000 	.word	0x50039000

00003ecc <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    3ecc:	b510      	push	{r4, lr}
    3ece:	4604      	mov	r4, r0
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());

    if (!is_page_aligned_check(addr))
    3ed0:	f003 fd59 	bl	7986 <is_page_aligned_check>
    3ed4:	b908      	cbnz	r0, 3eda <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
    3ed6:	4808      	ldr	r0, [pc, #32]	; (3ef8 <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
    3ed8:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
    3eda:	f7ff ffe3 	bl	3ea4 <nvmc_erase_mode_set>
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    3ede:	f04f 33ff 	mov.w	r3, #4294967295
    3ee2:	6023      	str	r3, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3ee4:	4b05      	ldr	r3, [pc, #20]	; (3efc <nrfx_nvmc_page_erase+0x30>)
    3ee6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    3eea:	f013 0f01 	tst.w	r3, #1
    3eee:	d0f9      	beq.n	3ee4 <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
    3ef0:	f7ff ffc8 	bl	3e84 <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
    3ef4:	4802      	ldr	r0, [pc, #8]	; (3f00 <nrfx_nvmc_page_erase+0x34>)
    3ef6:	e7ef      	b.n	3ed8 <nrfx_nvmc_page_erase+0xc>
    3ef8:	0bad000a 	.word	0x0bad000a
    3efc:	50039000 	.word	0x50039000
    3f00:	0bad0000 	.word	0x0bad0000

00003f04 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    3f04:	b538      	push	{r3, r4, r5, lr}
    3f06:	4605      	mov	r5, r0
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    3f08:	4b0a      	ldr	r3, [pc, #40]	; (3f34 <z_sys_device_do_config_level+0x30>)
    3f0a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3f0e:	e000      	b.n	3f12 <z_sys_device_do_config_level+0xe>
								info++) {
    3f10:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
    3f12:	1c6b      	adds	r3, r5, #1
    3f14:	4a07      	ldr	r2, [pc, #28]	; (3f34 <z_sys_device_do_config_level+0x30>)
    3f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3f1a:	42a3      	cmp	r3, r4
    3f1c:	d908      	bls.n	3f30 <z_sys_device_do_config_level+0x2c>
		int retval;
		const struct device_config *device_conf = info->config;
    3f1e:	6823      	ldr	r3, [r4, #0]

		retval = device_conf->init(info);
    3f20:	685b      	ldr	r3, [r3, #4]
    3f22:	4620      	mov	r0, r4
    3f24:	4798      	blx	r3
		if (retval != 0) {
    3f26:	2800      	cmp	r0, #0
    3f28:	d0f2      	beq.n	3f10 <z_sys_device_do_config_level+0xc>
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    3f2a:	2300      	movs	r3, #0
    3f2c:	6063      	str	r3, [r4, #4]
    3f2e:	e7ef      	b.n	3f10 <z_sys_device_do_config_level+0xc>
		} else {
			z_object_init(info);
		}
	}
}
    3f30:	bd38      	pop	{r3, r4, r5, pc}
    3f32:	bf00      	nop
    3f34:	000087fc 	.word	0x000087fc

00003f38 <z_impl_device_get_binding>:

struct device *z_impl_device_get_binding(const char *name)
{
    3f38:	b538      	push	{r3, r4, r5, lr}
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    3f3a:	4c11      	ldr	r4, [pc, #68]	; (3f80 <z_impl_device_get_binding+0x48>)
    3f3c:	e000      	b.n	3f40 <z_impl_device_get_binding+0x8>
    3f3e:	340c      	adds	r4, #12
    3f40:	4b10      	ldr	r3, [pc, #64]	; (3f84 <z_impl_device_get_binding+0x4c>)
    3f42:	429c      	cmp	r4, r3
    3f44:	d008      	beq.n	3f58 <z_impl_device_get_binding+0x20>
		if ((info->driver_api != NULL) &&
    3f46:	6863      	ldr	r3, [r4, #4]
    3f48:	2b00      	cmp	r3, #0
    3f4a:	d0f8      	beq.n	3f3e <z_impl_device_get_binding+0x6>
		    (info->config->name == name)) {
    3f4c:	6823      	ldr	r3, [r4, #0]
    3f4e:	681b      	ldr	r3, [r3, #0]
		if ((info->driver_api != NULL) &&
    3f50:	4283      	cmp	r3, r0
    3f52:	d1f4      	bne.n	3f3e <z_impl_device_get_binding+0x6>
			return info;
		}
	}

	return NULL;
}
    3f54:	4620      	mov	r0, r4
    3f56:	bd38      	pop	{r3, r4, r5, pc}
    3f58:	4605      	mov	r5, r0
	for (info = __device_init_start; info != __device_init_end; info++) {
    3f5a:	4c09      	ldr	r4, [pc, #36]	; (3f80 <z_impl_device_get_binding+0x48>)
    3f5c:	e000      	b.n	3f60 <z_impl_device_get_binding+0x28>
    3f5e:	340c      	adds	r4, #12
    3f60:	4b08      	ldr	r3, [pc, #32]	; (3f84 <z_impl_device_get_binding+0x4c>)
    3f62:	429c      	cmp	r4, r3
    3f64:	d00a      	beq.n	3f7c <z_impl_device_get_binding+0x44>
		if (info->driver_api == NULL) {
    3f66:	6863      	ldr	r3, [r4, #4]
    3f68:	2b00      	cmp	r3, #0
    3f6a:	d0f8      	beq.n	3f5e <z_impl_device_get_binding+0x26>
		if (strcmp(name, info->config->name) == 0) {
    3f6c:	6823      	ldr	r3, [r4, #0]
    3f6e:	6819      	ldr	r1, [r3, #0]
    3f70:	4628      	mov	r0, r5
    3f72:	f001 fd08 	bl	5986 <strcmp>
    3f76:	2800      	cmp	r0, #0
    3f78:	d1f1      	bne.n	3f5e <z_impl_device_get_binding+0x26>
    3f7a:	e7eb      	b.n	3f54 <z_impl_device_get_binding+0x1c>
	return NULL;
    3f7c:	2400      	movs	r4, #0
    3f7e:	e7e9      	b.n	3f54 <z_impl_device_get_binding+0x1c>
    3f80:	20005780 	.word	0x20005780
    3f84:	20005810 	.word	0x20005810

00003f88 <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
    3f88:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3f8a:	4803      	ldr	r0, [pc, #12]	; (3f98 <z_bss_zero+0x10>)
    3f8c:	4a03      	ldr	r2, [pc, #12]	; (3f9c <z_bss_zero+0x14>)
    3f8e:	1a12      	subs	r2, r2, r0
    3f90:	2100      	movs	r1, #0
    3f92:	f001 fd3c 	bl	5a0e <memset>
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((u32_t) &__gcov_bss_end - (u32_t) &__gcov_bss_start));
#endif
}
    3f96:	bd08      	pop	{r3, pc}
    3f98:	20000000 	.word	0x20000000
    3f9c:	2000272c 	.word	0x2000272c

00003fa0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3fa0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    3fa2:	4806      	ldr	r0, [pc, #24]	; (3fbc <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3fa4:	4a06      	ldr	r2, [pc, #24]	; (3fc0 <z_data_copy+0x20>)
    3fa6:	1a12      	subs	r2, r2, r0
    3fa8:	4906      	ldr	r1, [pc, #24]	; (3fc4 <z_data_copy+0x24>)
    3faa:	f001 fd0d 	bl	59c8 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3fae:	4a06      	ldr	r2, [pc, #24]	; (3fc8 <z_data_copy+0x28>)
    3fb0:	4906      	ldr	r1, [pc, #24]	; (3fcc <z_data_copy+0x2c>)
    3fb2:	4807      	ldr	r0, [pc, #28]	; (3fd0 <z_data_copy+0x30>)
    3fb4:	f001 fd08 	bl	59c8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3fb8:	bd08      	pop	{r3, pc}
    3fba:	bf00      	nop
    3fbc:	20005730 	.word	0x20005730
    3fc0:	20005834 	.word	0x20005834
    3fc4:	00008860 	.word	0x00008860
    3fc8:	00000000 	.word	0x00000000
    3fcc:	00008860 	.word	0x00008860
    3fd0:	20000000 	.word	0x20000000

00003fd4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3fd4:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    3fd6:	4b0b      	ldr	r3, [pc, #44]	; (4004 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_STORAGE+0x4>)
    3fd8:	2201      	movs	r2, #1
    3fda:	701a      	strb	r2, [r3, #0]

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3fdc:	2002      	movs	r0, #2
    3fde:	f7ff ff91 	bl	3f04 <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    3fe2:	4a09      	ldr	r2, [pc, #36]	; (4008 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_STORAGE+0x8>)
    3fe4:	4909      	ldr	r1, [pc, #36]	; (400c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_STORAGE+0xc>)
    3fe6:	480a      	ldr	r0, [pc, #40]	; (4010 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_STORAGE+0x10>)
    3fe8:	f001 f981 	bl	52ee <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    3fec:	2003      	movs	r0, #3
    3fee:	f7ff ff89 	bl	3f04 <z_sys_device_do_config_level>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    3ff2:	f7fc fa25 	bl	440 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3ff6:	4a07      	ldr	r2, [pc, #28]	; (4014 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_STORAGE+0x14>)
    3ff8:	7b13      	ldrb	r3, [r2, #12]
    3ffa:	f023 0301 	bic.w	r3, r3, #1
    3ffe:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4000:	bd08      	pop	{r3, pc}
    4002:	bf00      	nop
    4004:	20002729 	.word	0x20002729
    4008:	00008404 	.word	0x00008404
    400c:	00008814 	.word	0x00008814
    4010:	00008834 	.word	0x00008834
    4014:	2000268c 	.word	0x2000268c

00004018 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    4018:	b508      	push	{r3, lr}
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    401a:	f7fd fbe1 	bl	17e0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    401e:	4b16      	ldr	r3, [pc, #88]	; (4078 <z_cstart+0x60>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4020:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4024:	4c15      	ldr	r4, [pc, #84]	; (407c <z_cstart+0x64>)
    4026:	23e0      	movs	r3, #224	; 0xe0
    4028:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    402c:	2500      	movs	r5, #0
    402e:	77e5      	strb	r5, [r4, #31]
    4030:	7625      	strb	r5, [r4, #24]
    4032:	7665      	strb	r5, [r4, #25]
    4034:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4036:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4038:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    403c:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    403e:	f7fe f94d 	bl	22dc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4042:	f7fe f81b 	bl	207c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4046:	f04f 33ff 	mov.w	r3, #4294967295
    404a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    404c:	62e3      	str	r3, [r4, #44]	; 0x2c
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    404e:	4628      	mov	r0, r5
    4050:	f7ff ff58 	bl	3f04 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4054:	2001      	movs	r0, #1
    4056:	f7ff ff55 	bl	3f04 <z_sys_device_do_config_level>

#ifdef CONFIG_MULTITHREADING
	prepare_multithreading(&dummy_thread);
	switch_to_main_thread();
#else
	bg_thread_main(NULL, NULL, NULL);
    405a:	462a      	mov	r2, r5
    405c:	4629      	mov	r1, r5
    405e:	4628      	mov	r0, r5
    4060:	f7ff ffb8 	bl	3fd4 <bg_thread_main>
    4064:	f04f 0220 	mov.w	r2, #32
    4068:	f3ef 8311 	mrs	r3, BASEPRI
    406c:	f382 8811 	msr	BASEPRI, r2
    4070:	f3bf 8f6f 	isb	sy
	/* LCOV_EXCL_START
	 * We've already dumped coverage data at this point.
	 */
	irq_lock();
	while (true) {
	}
    4074:	e7fe      	b.n	4074 <z_cstart+0x5c>
    4076:	bf00      	nop
    4078:	20005730 	.word	0x20005730
    407c:	e000ed00 	.word	0xe000ed00

00004080 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    4080:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4082:	4c06      	ldr	r4, [pc, #24]	; (409c <init_mem_slab_module+0x1c>)
	int rc = 0;
    4084:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4086:	4b06      	ldr	r3, [pc, #24]	; (40a0 <init_mem_slab_module+0x20>)
    4088:	429c      	cmp	r4, r3
    408a:	d206      	bcs.n	409a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    408c:	4620      	mov	r0, r4
    408e:	f003 fcbc 	bl	7a0a <create_free_list>
		if (rc < 0) {
    4092:	2800      	cmp	r0, #0
    4094:	db01      	blt.n	409a <init_mem_slab_module+0x1a>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4096:	341c      	adds	r4, #28
    4098:	e7f5      	b.n	4086 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    409a:	bd10      	pop	{r4, pc}
    409c:	20005810 	.word	0x20005810
    40a0:	20005810 	.word	0x20005810

000040a4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    40a4:	4b0a      	ldr	r3, [pc, #40]	; (40d0 <z_priq_dumb_remove+0x2c>)
    40a6:	4283      	cmp	r3, r0
    40a8:	d008      	beq.n	40bc <z_priq_dumb_remove+0x18>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    40aa:	684a      	ldr	r2, [r1, #4]
    40ac:	680b      	ldr	r3, [r1, #0]
    40ae:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    40b0:	684a      	ldr	r2, [r1, #4]
    40b2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    40b4:	2300      	movs	r3, #0
    40b6:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    40b8:	604b      	str	r3, [r1, #4]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    40ba:	4770      	bx	lr
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    40bc:	3b20      	subs	r3, #32
    40be:	689b      	ldr	r3, [r3, #8]
    40c0:	428b      	cmp	r3, r1
    40c2:	d1f2      	bne.n	40aa <z_priq_dumb_remove+0x6>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
}

static inline bool z_is_thread_prevented_from_running(struct k_thread *thread)
{
	u8_t state = thread->base.thread_state;
    40c4:	7b4b      	ldrb	r3, [r1, #13]
    40c6:	f013 0f1f 	tst.w	r3, #31
    40ca:	d0ee      	beq.n	40aa <z_priq_dumb_remove+0x6>
    40cc:	e7f5      	b.n	40ba <z_priq_dumb_remove+0x16>
    40ce:	bf00      	nop
    40d0:	20002718 	.word	0x20002718

000040d4 <update_cache>:
{
    40d4:	b510      	push	{r4, lr}
    40d6:	4604      	mov	r4, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    40d8:	480c      	ldr	r0, [pc, #48]	; (410c <update_cache+0x38>)
    40da:	f003 fcda 	bl	7a92 <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
    40de:	4603      	mov	r3, r0
    40e0:	b170      	cbz	r0, 4100 <update_cache+0x2c>
	if (preempt_ok != 0) {
    40e2:	b984      	cbnz	r4, 4106 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    40e4:	4a0a      	ldr	r2, [pc, #40]	; (4110 <update_cache+0x3c>)
    40e6:	6892      	ldr	r2, [r2, #8]
    40e8:	7b51      	ldrb	r1, [r2, #13]
    40ea:	f011 0f1f 	tst.w	r1, #31
    40ee:	d10a      	bne.n	4106 <update_cache+0x32>
	return node->next != NULL;
    40f0:	6999      	ldr	r1, [r3, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    40f2:	b941      	cbnz	r1, 4106 <update_cache+0x32>
	if (!IS_ENABLED(CONFIG_PREEMPT_ENABLED) &&
    40f4:	4907      	ldr	r1, [pc, #28]	; (4114 <update_cache+0x40>)
    40f6:	428a      	cmp	r2, r1
    40f8:	d005      	beq.n	4106 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    40fa:	4b05      	ldr	r3, [pc, #20]	; (4110 <update_cache+0x3c>)
    40fc:	61da      	str	r2, [r3, #28]
    40fe:	e004      	b.n	410a <update_cache+0x36>
	return thread ? thread : _current_cpu->idle_thread;
    4100:	4b03      	ldr	r3, [pc, #12]	; (4110 <update_cache+0x3c>)
    4102:	68db      	ldr	r3, [r3, #12]
    4104:	e7ed      	b.n	40e2 <update_cache+0xe>
		_kernel.ready_q.cache = thread;
    4106:	4a02      	ldr	r2, [pc, #8]	; (4110 <update_cache+0x3c>)
    4108:	61d3      	str	r3, [r2, #28]
}
    410a:	bd10      	pop	{r4, pc}
    410c:	20002718 	.word	0x20002718
    4110:	200026f8 	.word	0x200026f8
    4114:	20002620 	.word	0x20002620

00004118 <z_add_thread_to_ready_q>:
{
    4118:	b570      	push	{r4, r5, r6, lr}
    411a:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    411c:	2300      	movs	r3, #0
    411e:	f04f 0220 	mov.w	r2, #32
    4122:	f3ef 8611 	mrs	r6, BASEPRI
    4126:	f382 8811 	msr	BASEPRI, r2
    412a:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    412e:	e01c      	b.n	416a <z_add_thread_to_ready_q+0x52>
	node->prev = successor->prev;
    4130:	6863      	ldr	r3, [r4, #4]
    4132:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4134:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    4136:	6863      	ldr	r3, [r4, #4]
    4138:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    413a:	6065      	str	r5, [r4, #4]
    413c:	e009      	b.n	4152 <z_add_thread_to_ready_q+0x3a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    413e:	2400      	movs	r4, #0
    4140:	e019      	b.n	4176 <z_add_thread_to_ready_q+0x5e>
	node->next = list;
    4142:	4b16      	ldr	r3, [pc, #88]	; (419c <z_add_thread_to_ready_q+0x84>)
    4144:	f103 0220 	add.w	r2, r3, #32
    4148:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
    414a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    414c:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
    414e:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4150:	625d      	str	r5, [r3, #36]	; 0x24
	thread->base.thread_state &= ~_THREAD_PENDING;
}

static inline void z_set_thread_states(struct k_thread *thread, u32_t states)
{
	thread->base.thread_state |= states;
    4152:	7b6b      	ldrb	r3, [r5, #13]
    4154:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4158:	736b      	strb	r3, [r5, #13]
		update_cache(0);
    415a:	2000      	movs	r0, #0
    415c:	f7ff ffba 	bl	40d4 <update_cache>
	__asm__ volatile(
    4160:	f386 8811 	msr	BASEPRI, r6
    4164:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4168:	2301      	movs	r3, #1
    416a:	b9b3      	cbnz	r3, 419a <z_add_thread_to_ready_q+0x82>
	return list->head == list;
    416c:	4b0b      	ldr	r3, [pc, #44]	; (419c <z_add_thread_to_ready_q+0x84>)
    416e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4172:	429c      	cmp	r4, r3
    4174:	d0e3      	beq.n	413e <z_add_thread_to_ready_q+0x26>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4176:	2c00      	cmp	r4, #0
    4178:	d0e3      	beq.n	4142 <z_add_thread_to_ready_q+0x2a>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    417a:	4621      	mov	r1, r4
    417c:	4628      	mov	r0, r5
    417e:	f003 fc5d 	bl	7a3c <z_is_t1_higher_prio_than_t2>
    4182:	2800      	cmp	r0, #0
    4184:	d1d4      	bne.n	4130 <z_add_thread_to_ready_q+0x18>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4186:	2c00      	cmp	r4, #0
    4188:	d0db      	beq.n	4142 <z_add_thread_to_ready_q+0x2a>
	return (node == list->tail) ? NULL : node->next;
    418a:	4b04      	ldr	r3, [pc, #16]	; (419c <z_add_thread_to_ready_q+0x84>)
    418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    418e:	429c      	cmp	r4, r3
    4190:	d0d7      	beq.n	4142 <z_add_thread_to_ready_q+0x2a>
    4192:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4194:	2c00      	cmp	r4, #0
    4196:	d1ee      	bne.n	4176 <z_add_thread_to_ready_q+0x5e>
    4198:	e7d3      	b.n	4142 <z_add_thread_to_ready_q+0x2a>
}
    419a:	bd70      	pop	{r4, r5, r6, pc}
    419c:	200026f8 	.word	0x200026f8

000041a0 <z_thread_single_abort>:
{
    41a0:	b538      	push	{r3, r4, r5, lr}
    41a2:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    41a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
    41a6:	b103      	cbz	r3, 41aa <z_thread_single_abort+0xa>
		thread->fn_abort();
    41a8:	4798      	blx	r3
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    41aa:	f104 0018 	add.w	r0, r4, #24
    41ae:	f003 fcd3 	bl	7b58 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    41b2:	2300      	movs	r3, #0
	__asm__ volatile(
    41b4:	f04f 0220 	mov.w	r2, #32
    41b8:	f3ef 8511 	mrs	r5, BASEPRI
    41bc:	f382 8811 	msr	BASEPRI, r2
    41c0:	f3bf 8f6f 	isb	sy
    41c4:	e016      	b.n	41f4 <z_thread_single_abort+0x54>
		if (z_is_thread_ready(thread)) {
    41c6:	f012 0f01 	tst.w	r2, #1
    41ca:	d027      	beq.n	421c <z_thread_single_abort+0x7c>
			if (z_is_thread_queued(thread)) {
    41cc:	f013 0f80 	tst.w	r3, #128	; 0x80
    41d0:	d11b      	bne.n	420a <z_thread_single_abort+0x6a>
			update_cache(thread == _current);
    41d2:	4b1b      	ldr	r3, [pc, #108]	; (4240 <z_thread_single_abort+0xa0>)
    41d4:	6898      	ldr	r0, [r3, #8]
    41d6:	42a0      	cmp	r0, r4
    41d8:	bf14      	ite	ne
    41da:	2000      	movne	r0, #0
    41dc:	2001      	moveq	r0, #1
    41de:	f7ff ff79 	bl	40d4 <update_cache>
		thread->base.thread_state |= mask;
    41e2:	7b63      	ldrb	r3, [r4, #13]
    41e4:	f043 0308 	orr.w	r3, r3, #8
    41e8:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    41ea:	f385 8811 	msr	BASEPRI, r5
    41ee:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    41f2:	2301      	movs	r3, #1
    41f4:	461a      	mov	r2, r3
    41f6:	bb0b      	cbnz	r3, 423c <z_thread_single_abort+0x9c>
	u8_t state = thread->base.thread_state;
    41f8:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    41fa:	f013 0f1f 	tst.w	r3, #31
    41fe:	d1e2      	bne.n	41c6 <z_thread_single_abort+0x26>
	return node->next != NULL;
    4200:	69a1      	ldr	r1, [r4, #24]
    4202:	2900      	cmp	r1, #0
    4204:	d1df      	bne.n	41c6 <z_thread_single_abort+0x26>
    4206:	2201      	movs	r2, #1
    4208:	e7dd      	b.n	41c6 <z_thread_single_abort+0x26>
				_priq_run_remove(&_kernel.ready_q.runq,
    420a:	4621      	mov	r1, r4
    420c:	480d      	ldr	r0, [pc, #52]	; (4244 <z_thread_single_abort+0xa4>)
    420e:	f7ff ff49 	bl	40a4 <z_priq_dumb_remove>
}

static inline void z_reset_thread_states(struct k_thread *thread,
					u32_t states)
{
	thread->base.thread_state &= ~states;
    4212:	7b63      	ldrb	r3, [r4, #13]
    4214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4218:	7363      	strb	r3, [r4, #13]
    421a:	e7da      	b.n	41d2 <z_thread_single_abort+0x32>
			if (z_is_thread_pending(thread)) {
    421c:	f013 0f02 	tst.w	r3, #2
    4220:	d0df      	beq.n	41e2 <z_thread_single_abort+0x42>
				_priq_wait_remove(&pended_on(thread)->waitq,
    4222:	4620      	mov	r0, r4
    4224:	f003 fc08 	bl	7a38 <pended_on>
    4228:	4621      	mov	r1, r4
    422a:	f7ff ff3b 	bl	40a4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    422e:	7b63      	ldrb	r3, [r4, #13]
    4230:	f023 0302 	bic.w	r3, r3, #2
    4234:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    4236:	2300      	movs	r3, #0
    4238:	60a3      	str	r3, [r4, #8]
    423a:	e7d2      	b.n	41e2 <z_thread_single_abort+0x42>
}
    423c:	bd38      	pop	{r3, r4, r5, pc}
    423e:	bf00      	nop
    4240:	200026f8 	.word	0x200026f8
    4244:	20002718 	.word	0x20002718

00004248 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    4248:	4b01      	ldr	r3, [pc, #4]	; (4250 <z_impl_k_current_get+0x8>)
    424a:	6898      	ldr	r0, [r3, #8]
    424c:	4770      	bx	lr
    424e:	bf00      	nop
    4250:	200026f8 	.word	0x200026f8

00004254 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4254:	b570      	push	{r4, r5, r6, lr}
    4256:	4606      	mov	r6, r0
	__asm__ volatile(
    4258:	f04f 0320 	mov.w	r3, #32
    425c:	f3ef 8511 	mrs	r5, BASEPRI
    4260:	f383 8811 	msr	BASEPRI, r3
    4264:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    4268:	f003 fc1a 	bl	7aa0 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
    426c:	b1b8      	cbz	r0, 429e <z_impl_k_sem_give+0x4a>
    426e:	4604      	mov	r4, r0
	u8_t state = thread->base.thread_state;
    4270:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4272:	f013 0f1f 	tst.w	r3, #31
    4276:	d105      	bne.n	4284 <z_impl_k_sem_give+0x30>
    4278:	6983      	ldr	r3, [r0, #24]
    427a:	b10b      	cbz	r3, 4280 <z_impl_k_sem_give+0x2c>
    427c:	2300      	movs	r3, #0
    427e:	e002      	b.n	4286 <z_impl_k_sem_give+0x32>
    4280:	2301      	movs	r3, #1
    4282:	e000      	b.n	4286 <z_impl_k_sem_give+0x32>
    4284:	2300      	movs	r3, #0
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    4286:	b933      	cbnz	r3, 4296 <z_impl_k_sem_give+0x42>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4288:	2300      	movs	r3, #0
    428a:	66a3      	str	r3, [r4, #104]	; 0x68
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    428c:	4629      	mov	r1, r5
    428e:	4809      	ldr	r0, [pc, #36]	; (42b4 <z_impl_k_sem_give+0x60>)
    4290:	f003 fbde 	bl	7a50 <z_reschedule>
}
    4294:	bd70      	pop	{r4, r5, r6, pc}
		z_add_thread_to_ready_q(thread);
    4296:	4620      	mov	r0, r4
    4298:	f7ff ff3e 	bl	4118 <z_add_thread_to_ready_q>
    429c:	e7f4      	b.n	4288 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    429e:	68b3      	ldr	r3, [r6, #8]
    42a0:	68f2      	ldr	r2, [r6, #12]
    42a2:	4293      	cmp	r3, r2
    42a4:	d003      	beq.n	42ae <z_impl_k_sem_give+0x5a>
    42a6:	2201      	movs	r2, #1
    42a8:	4413      	add	r3, r2
    42aa:	60b3      	str	r3, [r6, #8]
	ARG_UNUSED(sem);
    42ac:	e7ee      	b.n	428c <z_impl_k_sem_give+0x38>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    42ae:	2200      	movs	r2, #0
    42b0:	e7fa      	b.n	42a8 <z_impl_k_sem_give+0x54>
    42b2:	bf00      	nop
    42b4:	20002720 	.word	0x20002720

000042b8 <first>:
	return list->head == list;
    42b8:	4b03      	ldr	r3, [pc, #12]	; (42c8 <first+0x10>)
    42ba:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    42bc:	4298      	cmp	r0, r3
    42be:	d000      	beq.n	42c2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    42c0:	4770      	bx	lr
    42c2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    42c4:	e7fc      	b.n	42c0 <first+0x8>
    42c6:	bf00      	nop
    42c8:	20005778 	.word	0x20005778

000042cc <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    42cc:	b130      	cbz	r0, 42dc <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    42ce:	4a04      	ldr	r2, [pc, #16]	; (42e0 <next+0x14>)
    42d0:	6852      	ldr	r2, [r2, #4]
    42d2:	4290      	cmp	r0, r2
    42d4:	d001      	beq.n	42da <next+0xe>
    42d6:	6800      	ldr	r0, [r0, #0]
    42d8:	4770      	bx	lr
    42da:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    42dc:	4770      	bx	lr
    42de:	bf00      	nop
    42e0:	20005778 	.word	0x20005778

000042e4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
    42e4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    42e6:	4b04      	ldr	r3, [pc, #16]	; (42f8 <elapsed+0x14>)
    42e8:	681b      	ldr	r3, [r3, #0]
    42ea:	b10b      	cbz	r3, 42f0 <elapsed+0xc>
    42ec:	2000      	movs	r0, #0
}
    42ee:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    42f0:	f7fd fe1a 	bl	1f28 <z_clock_elapsed>
    42f4:	e7fb      	b.n	42ee <elapsed+0xa>
    42f6:	bf00      	nop
    42f8:	20002720 	.word	0x20002720

000042fc <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    42fc:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
    4300:	f04f 0320 	mov.w	r3, #32
    4304:	f3ef 8511 	mrs	r5, BASEPRI
    4308:	f383 8811 	msr	BASEPRI, r3
    430c:	f3bf 8f6f 	isb	sy
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4310:	4b24      	ldr	r3, [pc, #144]	; (43a4 <z_clock_announce+0xa8>)
    4312:	6018      	str	r0, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4314:	f7ff ffd0 	bl	42b8 <first>
    4318:	4604      	mov	r4, r0
    431a:	b328      	cbz	r0, 4368 <z_clock_announce+0x6c>
    431c:	6882      	ldr	r2, [r0, #8]
    431e:	4b21      	ldr	r3, [pc, #132]	; (43a4 <z_clock_announce+0xa8>)
    4320:	681b      	ldr	r3, [r3, #0]
    4322:	429a      	cmp	r2, r3
    4324:	dc20      	bgt.n	4368 <z_clock_announce+0x6c>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4326:	4e20      	ldr	r6, [pc, #128]	; (43a8 <z_clock_announce+0xac>)
    4328:	e9d6 0100 	ldrd	r0, r1, [r6]
    432c:	eb10 0b02 	adds.w	fp, r0, r2
    4330:	eb41 7ce2 	adc.w	ip, r1, r2, asr #31
    4334:	e9c6 bc00 	strd	fp, ip, [r6]
		announce_remaining -= dt;
    4338:	1a9b      	subs	r3, r3, r2
    433a:	4a1a      	ldr	r2, [pc, #104]	; (43a4 <z_clock_announce+0xa8>)
    433c:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    433e:	2300      	movs	r3, #0
    4340:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    4342:	4620      	mov	r0, r4
    4344:	f003 fbe7 	bl	7b16 <remove_timeout>
	__asm__ volatile(
    4348:	f385 8811 	msr	BASEPRI, r5
    434c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    4350:	68e3      	ldr	r3, [r4, #12]
    4352:	4620      	mov	r0, r4
    4354:	4798      	blx	r3
	__asm__ volatile(
    4356:	f04f 0320 	mov.w	r3, #32
    435a:	f3ef 8511 	mrs	r5, BASEPRI
    435e:	f383 8811 	msr	BASEPRI, r3
    4362:	f3bf 8f6f 	isb	sy
    4366:	e7d5      	b.n	4314 <z_clock_announce+0x18>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    4368:	b124      	cbz	r4, 4374 <z_clock_announce+0x78>
		first()->dticks -= announce_remaining;
    436a:	68a3      	ldr	r3, [r4, #8]
    436c:	4a0d      	ldr	r2, [pc, #52]	; (43a4 <z_clock_announce+0xa8>)
    436e:	6812      	ldr	r2, [r2, #0]
    4370:	1a9b      	subs	r3, r3, r2
    4372:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    4374:	480c      	ldr	r0, [pc, #48]	; (43a8 <z_clock_announce+0xac>)
    4376:	490b      	ldr	r1, [pc, #44]	; (43a4 <z_clock_announce+0xa8>)
    4378:	680c      	ldr	r4, [r1, #0]
    437a:	e9d0 2300 	ldrd	r2, r3, [r0]
    437e:	eb12 0b04 	adds.w	fp, r2, r4
    4382:	eb43 7ce4 	adc.w	ip, r3, r4, asr #31
    4386:	e9c0 bc00 	strd	fp, ip, [r0]
	announce_remaining = 0;
    438a:	2400      	movs	r4, #0
    438c:	600c      	str	r4, [r1, #0]

	z_clock_set_timeout(next_timeout(), false);
    438e:	f003 fbd4 	bl	7b3a <next_timeout>
    4392:	4621      	mov	r1, r4
    4394:	f7fd fd6a 	bl	1e6c <z_clock_set_timeout>
	__asm__ volatile(
    4398:	f385 8811 	msr	BASEPRI, r5
    439c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    43a0:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
    43a4:	20002720 	.word	0x20002720
    43a8:	20000000 	.word	0x20000000

000043ac <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    43ac:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    43ae:	4c05      	ldr	r4, [pc, #20]	; (43c4 <init_static_pools+0x18>)
    43b0:	4b05      	ldr	r3, [pc, #20]	; (43c8 <init_static_pools+0x1c>)
    43b2:	429c      	cmp	r4, r3
    43b4:	d204      	bcs.n	43c0 <init_static_pools+0x14>
		k_mem_pool_init(p);
    43b6:	4620      	mov	r0, r4
    43b8:	f003 fbec 	bl	7b94 <k_mem_pool_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    43bc:	341c      	adds	r4, #28
    43be:	e7f7      	b.n	43b0 <init_static_pools+0x4>
	}

	return 0;
}
    43c0:	2000      	movs	r0, #0
    43c2:	bd10      	pop	{r4, pc}
    43c4:	20005810 	.word	0x20005810
    43c8:	20005810 	.word	0x20005810

000043cc <do_boot>:
{
    43cc:	b570      	push	{r4, r5, r6, lr}
    43ce:	b082      	sub	sp, #8
    43d0:	4605      	mov	r5, r0
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
    43d2:	a901      	add	r1, sp, #4
    43d4:	7900      	ldrb	r0, [r0, #4]
    43d6:	f7fc f8db 	bl	590 <flash_device_base>
                                     rsp->br_image_off +
    43da:	68ac      	ldr	r4, [r5, #8]
    vt = (struct arm_vector_table *)(flash_base +
    43dc:	9b01      	ldr	r3, [sp, #4]
    43de:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
    43e0:	682b      	ldr	r3, [r5, #0]
    43e2:	891d      	ldrh	r5, [r3, #8]
                                     rsp->br_image_off +
    43e4:	1966      	adds	r6, r4, r5
	__asm__ volatile(
    43e6:	f04f 0220 	mov.w	r2, #32
    43ea:	f3ef 8311 	mrs	r3, BASEPRI
    43ee:	f382 8811 	msr	BASEPRI, r2
    43f2:	f3bf 8f6f 	isb	sy
    sys_clock_disable();
    43f6:	f001 fa4f 	bl	5898 <sys_clock_disable>
    __set_MSP(vt->msp);
    43fa:	5963      	ldr	r3, [r4, r5]
    43fc:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
    4400:	6873      	ldr	r3, [r6, #4]
    4402:	4798      	blx	r3
}
    4404:	b002      	add	sp, #8
    4406:	bd70      	pop	{r4, r5, r6, pc}

00004408 <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    4408:	b121      	cbz	r1, 4414 <flash_area_id_from_multi_image_slot+0xc>
    440a:	2901      	cmp	r1, #1
    440c:	d004      	beq.n	4418 <flash_area_id_from_multi_image_slot+0x10>
#if !defined(CONFIG_BOOT_SWAP_USING_MOVE)
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
    440e:	f06f 0015 	mvn.w	r0, #21
    4412:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    4414:	2003      	movs	r0, #3
    4416:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    4418:	2007      	movs	r0, #7
}
    441a:	4770      	bx	lr

0000441c <flash_area_erased_val>:
#define ERASED_VAL 0xff
uint8_t flash_area_erased_val(const struct flash_area *fap)
{
    (void)fap;
    return ERASED_VAL;
}
    441c:	20ff      	movs	r0, #255	; 0xff
    441e:	4770      	bx	lr

00004420 <flash_area_read_is_empty>:

int flash_area_read_is_empty(const struct flash_area *fa, uint32_t off,
        void *dst, uint32_t len)
{
    4420:	b538      	push	{r3, r4, r5, lr}
    4422:	4615      	mov	r5, r2
    4424:	461c      	mov	r4, r3
    uint8_t i;
    uint8_t *u8dst;
    int rc;

    rc = flash_area_read(fa, off, dst, len);
    4426:	f001 f873 	bl	5510 <flash_area_read>
    if (rc) {
    442a:	b958      	cbnz	r0, 4444 <flash_area_read_is_empty+0x24>
    442c:	4601      	mov	r1, r0
        return -1;
    }

    for (i = 0, u8dst = (uint8_t *)dst; i < len; i++) {
    442e:	2300      	movs	r3, #0
    4430:	42a3      	cmp	r3, r4
    4432:	d205      	bcs.n	4440 <flash_area_read_is_empty+0x20>
        if (u8dst[i] != ERASED_VAL) {
    4434:	5cea      	ldrb	r2, [r5, r3]
    4436:	2aff      	cmp	r2, #255	; 0xff
    4438:	d106      	bne.n	4448 <flash_area_read_is_empty+0x28>
    for (i = 0, u8dst = (uint8_t *)dst; i < len; i++) {
    443a:	3301      	adds	r3, #1
    443c:	b2db      	uxtb	r3, r3
    443e:	e7f7      	b.n	4430 <flash_area_read_is_empty+0x10>
            return 0;
        }
    }

    return 1;
    4440:	2101      	movs	r1, #1
    4442:	e001      	b.n	4448 <flash_area_read_is_empty+0x28>
        return -1;
    4444:	f04f 31ff 	mov.w	r1, #4294967295
}
    4448:	4608      	mov	r0, r1
    444a:	bd38      	pop	{r3, r4, r5, pc}

0000444c <boot_write_sz>:
{
    444c:	b508      	push	{r3, lr}
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    444e:	6a00      	ldr	r0, [r0, #32]
    4450:	f001 f8db 	bl	560a <flash_area_align>
}
    4454:	bd08      	pop	{r3, pc}

00004456 <boot_read_image_size>:
{
    4456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    445a:	b082      	sub	sp, #8
    445c:	4607      	mov	r7, r0
    445e:	460e      	mov	r6, r1
    4460:	4615      	mov	r5, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    4462:	2000      	movs	r0, #0
    4464:	f7ff ffd0 	bl	4408 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    4468:	a901      	add	r1, sp, #4
    446a:	b2c0      	uxtb	r0, r0
    446c:	f7fd fc28 	bl	1cc0 <flash_area_open>
    if (rc != 0) {
    4470:	b140      	cbz	r0, 4484 <boot_read_image_size+0x2e>
        rc = BOOT_EFLASH;
    4472:	f04f 0801 	mov.w	r8, #1
    flash_area_close(fap);
    4476:	9801      	ldr	r0, [sp, #4]
    4478:	f001 f849 	bl	550e <flash_area_close>
}
    447c:	4640      	mov	r0, r8
    447e:	b002      	add	sp, #8
    4480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    4484:	232c      	movs	r3, #44	; 0x2c
    4486:	fb03 7306 	mla	r3, r3, r6, r7
    448a:	891c      	ldrh	r4, [r3, #8]
    448c:	68db      	ldr	r3, [r3, #12]
    448e:	441c      	add	r4, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    4490:	2304      	movs	r3, #4
    4492:	466a      	mov	r2, sp
    4494:	4621      	mov	r1, r4
    4496:	9801      	ldr	r0, [sp, #4]
    4498:	f001 f83a 	bl	5510 <flash_area_read>
    449c:	4680      	mov	r8, r0
    449e:	bb40      	cbnz	r0, 44f2 <boot_read_image_size+0x9c>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    44a0:	202c      	movs	r0, #44	; 0x2c
    44a2:	fb00 7006 	mla	r0, r0, r6, r7
    44a6:	8946      	ldrh	r6, [r0, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    44a8:	f8bd 2000 	ldrh.w	r2, [sp]
    44ac:	f646 1308 	movw	r3, #26888	; 0x6908
    44b0:	429a      	cmp	r2, r3
    44b2:	d00c      	beq.n	44ce <boot_read_image_size+0x78>
    } else if (protect_tlv_size != 0) {
    44b4:	bb06      	cbnz	r6, 44f8 <boot_read_image_size+0xa2>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    44b6:	f8bd 2000 	ldrh.w	r2, [sp]
    44ba:	f646 1307 	movw	r3, #26887	; 0x6907
    44be:	429a      	cmp	r2, r3
    44c0:	d11d      	bne.n	44fe <boot_read_image_size+0xa8>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    44c2:	4434      	add	r4, r6
    44c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    44c8:	441c      	add	r4, r3
    44ca:	602c      	str	r4, [r5, #0]
    rc = 0;
    44cc:	e7d3      	b.n	4476 <boot_read_image_size+0x20>
        if (protect_tlv_size != info.it_tlv_tot) {
    44ce:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    44d2:	428e      	cmp	r6, r1
    44d4:	d002      	beq.n	44dc <boot_read_image_size+0x86>
            rc = BOOT_EBADIMAGE;
    44d6:	f04f 0803 	mov.w	r8, #3
    44da:	e7cc      	b.n	4476 <boot_read_image_size+0x20>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    44dc:	2304      	movs	r3, #4
    44de:	466a      	mov	r2, sp
    44e0:	4421      	add	r1, r4
    44e2:	9801      	ldr	r0, [sp, #4]
    44e4:	f001 f814 	bl	5510 <flash_area_read>
    44e8:	2800      	cmp	r0, #0
    44ea:	d0e4      	beq.n	44b6 <boot_read_image_size+0x60>
            rc = BOOT_EFLASH;
    44ec:	f04f 0801 	mov.w	r8, #1
    44f0:	e7c1      	b.n	4476 <boot_read_image_size+0x20>
        rc = BOOT_EFLASH;
    44f2:	f04f 0801 	mov.w	r8, #1
    44f6:	e7be      	b.n	4476 <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    44f8:	f04f 0803 	mov.w	r8, #3
    44fc:	e7bb      	b.n	4476 <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    44fe:	f04f 0803 	mov.w	r8, #3
    4502:	e7b8      	b.n	4476 <boot_read_image_size+0x20>

00004504 <boot_check_header_erased>:
{
    4504:	b5f0      	push	{r4, r5, r6, r7, lr}
    4506:	b083      	sub	sp, #12
    4508:	4607      	mov	r7, r0
    450a:	460c      	mov	r4, r1
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    450c:	2000      	movs	r0, #0
    450e:	f7ff ff7b 	bl	4408 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    4512:	a901      	add	r1, sp, #4
    4514:	b2c0      	uxtb	r0, r0
    4516:	f7fd fbd3 	bl	1cc0 <flash_area_open>
    if (rc != 0) {
    451a:	b9d0      	cbnz	r0, 4552 <boot_check_header_erased+0x4e>
    451c:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    451e:	9801      	ldr	r0, [sp, #4]
    4520:	f7ff ff7c 	bl	441c <flash_area_erased_val>
    4524:	4605      	mov	r5, r0
    flash_area_close(fap);
    4526:	9801      	ldr	r0, [sp, #4]
    4528:	f000 fff1 	bl	550e <flash_area_close>
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    452c:	202c      	movs	r0, #44	; 0x2c
    452e:	fb00 7004 	mla	r0, r0, r4, r7
    for (i = 0; i < len; i++) {
    4532:	2300      	movs	r3, #0
    4534:	2b03      	cmp	r3, #3
    4536:	d805      	bhi.n	4544 <boot_check_header_erased+0x40>
        if (val != p[i]) {
    4538:	5cc2      	ldrb	r2, [r0, r3]
    453a:	4295      	cmp	r5, r2
    453c:	d107      	bne.n	454e <boot_check_header_erased+0x4a>
    for (i = 0; i < len; i++) {
    453e:	3301      	adds	r3, #1
    4540:	b2db      	uxtb	r3, r3
    4542:	e7f7      	b.n	4534 <boot_check_header_erased+0x30>
    return true;
    4544:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    4546:	b13b      	cbz	r3, 4558 <boot_check_header_erased+0x54>
}
    4548:	4630      	mov	r0, r6
    454a:	b003      	add	sp, #12
    454c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return false;
    454e:	2300      	movs	r3, #0
    4550:	e7f9      	b.n	4546 <boot_check_header_erased+0x42>
        return -1;
    4552:	f04f 36ff 	mov.w	r6, #4294967295
    4556:	e7f7      	b.n	4548 <boot_check_header_erased+0x44>
        return -1;
    4558:	f04f 36ff 	mov.w	r6, #4294967295
    455c:	e7f4      	b.n	4548 <boot_check_header_erased+0x44>

0000455e <boot_initialize_area>:
{
    455e:	b510      	push	{r4, lr}
    4560:	b082      	sub	sp, #8
    num_sectors = BOOT_MAX_IMG_SECTORS;
    4562:	2380      	movs	r3, #128	; 0x80
    4564:	9301      	str	r3, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    4566:	2903      	cmp	r1, #3
    4568:	d005      	beq.n	4576 <boot_initialize_area+0x18>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    456a:	2907      	cmp	r1, #7
    456c:	d111      	bne.n	4592 <boot_initialize_area+0x34>
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    456e:	6d02      	ldr	r2, [r0, #80]	; 0x50
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    4570:	f100 0454 	add.w	r4, r0, #84	; 0x54
    4574:	e002      	b.n	457c <boot_initialize_area+0x1e>
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    4576:	6a42      	ldr	r2, [r0, #36]	; 0x24
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    4578:	f100 0428 	add.w	r4, r0, #40	; 0x28
    457c:	4608      	mov	r0, r1
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    457e:	a901      	add	r1, sp, #4
    4580:	f7fd fbb2 	bl	1ce8 <flash_area_get_sectors>
    if (rc != 0) {
    4584:	4603      	mov	r3, r0
    4586:	b908      	cbnz	r0, 458c <boot_initialize_area+0x2e>
    *out_num_sectors = num_sectors;
    4588:	9a01      	ldr	r2, [sp, #4]
    458a:	6022      	str	r2, [r4, #0]
}
    458c:	4618      	mov	r0, r3
    458e:	b002      	add	sp, #8
    4590:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    4592:	2301      	movs	r3, #1
    4594:	e7fa      	b.n	458c <boot_initialize_area+0x2e>

00004596 <boot_read_sectors>:
{
    4596:	b538      	push	{r3, r4, r5, lr}
    4598:	4605      	mov	r5, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    459a:	2103      	movs	r1, #3
    459c:	f7ff ffdf 	bl	455e <boot_initialize_area>
    if (rc != 0) {
    45a0:	b110      	cbz	r0, 45a8 <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    45a2:	2401      	movs	r4, #1
}
    45a4:	4620      	mov	r0, r4
    45a6:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    45a8:	2107      	movs	r1, #7
    45aa:	4628      	mov	r0, r5
    45ac:	f7ff ffd7 	bl	455e <boot_initialize_area>
    if (rc != 0) {
    45b0:	4604      	mov	r4, r0
    45b2:	b108      	cbz	r0, 45b8 <boot_read_sectors+0x22>
        return BOOT_EFLASH;
    45b4:	2401      	movs	r4, #1
    45b6:	e7f5      	b.n	45a4 <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    45b8:	4628      	mov	r0, r5
    45ba:	f7ff ff47 	bl	444c <boot_write_sz>
    45be:	65e8      	str	r0, [r5, #92]	; 0x5c
    return 0;
    45c0:	e7f0      	b.n	45a4 <boot_read_sectors+0xe>

000045c2 <boot_read_image_headers>:
{
    45c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45c4:	4605      	mov	r5, r0
    45c6:	460f      	mov	r7, r1
    45c8:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    45ca:	2400      	movs	r4, #0
    45cc:	2c01      	cmp	r4, #1
    45ce:	dc10      	bgt.n	45f2 <boot_read_image_headers+0x30>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    45d0:	4633      	mov	r3, r6
    45d2:	222c      	movs	r2, #44	; 0x2c
    45d4:	fb02 5204 	mla	r2, r2, r4, r5
    45d8:	4621      	mov	r1, r4
    45da:	4628      	mov	r0, r5
    45dc:	f7fc fb4c 	bl	c78 <boot_read_image_header>
        if (rc != 0) {
    45e0:	4603      	mov	r3, r0
    45e2:	b908      	cbnz	r0, 45e8 <boot_read_image_headers+0x26>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    45e4:	3401      	adds	r4, #1
    45e6:	e7f1      	b.n	45cc <boot_read_image_headers+0xa>
            if (i > 0 && !require_all) {
    45e8:	2c00      	cmp	r4, #0
    45ea:	dd03      	ble.n	45f4 <boot_read_image_headers+0x32>
    45ec:	b917      	cbnz	r7, 45f4 <boot_read_image_headers+0x32>
                return 0;
    45ee:	2300      	movs	r3, #0
    45f0:	e000      	b.n	45f4 <boot_read_image_headers+0x32>
    return 0;
    45f2:	2300      	movs	r3, #0
}
    45f4:	4618      	mov	r0, r3
    45f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000045f8 <boot_validated_swap_type>:
{
    45f8:	b570      	push	{r4, r5, r6, lr}
    45fa:	4605      	mov	r5, r0
    45fc:	460e      	mov	r6, r1
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    45fe:	2000      	movs	r0, #0
    4600:	f7fc fe16 	bl	1230 <boot_swap_type_multi>
    4604:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    4606:	2802      	cmp	r0, #2
    4608:	d005      	beq.n	4616 <boot_validated_swap_type+0x1e>
    460a:	2804      	cmp	r0, #4
    460c:	d003      	beq.n	4616 <boot_validated_swap_type+0x1e>
    460e:	2803      	cmp	r0, #3
    4610:	d001      	beq.n	4616 <boot_validated_swap_type+0x1e>
}
    4612:	4620      	mov	r0, r4
    4614:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs);
    4616:	4632      	mov	r2, r6
    4618:	2101      	movs	r1, #1
    461a:	4628      	mov	r0, r5
    461c:	f7fc f81e 	bl	65c <boot_validate_slot>
        if (rc == 1) {
    4620:	2801      	cmp	r0, #1
    4622:	d003      	beq.n	462c <boot_validated_swap_type+0x34>
        } else if (rc != 0) {
    4624:	2800      	cmp	r0, #0
    4626:	d0f4      	beq.n	4612 <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    4628:	2405      	movs	r4, #5
    return swap_type;
    462a:	e7f2      	b.n	4612 <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_NONE;
    462c:	4604      	mov	r4, r0
    462e:	e7f0      	b.n	4612 <boot_validated_swap_type+0x1a>

00004630 <boot_status_reset>:
    bs->use_scratch = 0;
    4630:	2300      	movs	r3, #0
    4632:	7183      	strb	r3, [r0, #6]
    bs->swap_size = 0;
    4634:	6083      	str	r3, [r0, #8]
    bs->source = 0;
    4636:	60c3      	str	r3, [r0, #12]
    bs->op = BOOT_STATUS_OP_MOVE;
    4638:	2301      	movs	r3, #1
    463a:	7143      	strb	r3, [r0, #5]
    bs->idx = BOOT_STATUS_IDX_0;
    463c:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    463e:	7103      	strb	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    4640:	71c3      	strb	r3, [r0, #7]
}
    4642:	4770      	bx	lr

00004644 <boot_status_is_reset>:
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    4644:	7943      	ldrb	r3, [r0, #5]
            bs->idx == BOOT_STATUS_IDX_0 &&
    4646:	2b01      	cmp	r3, #1
    4648:	d001      	beq.n	464e <boot_status_is_reset+0xa>
    464a:	2000      	movs	r0, #0
    464c:	4770      	bx	lr
    464e:	6803      	ldr	r3, [r0, #0]
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    4650:	2b01      	cmp	r3, #1
    4652:	d001      	beq.n	4658 <boot_status_is_reset+0x14>
            bs->idx == BOOT_STATUS_IDX_0 &&
    4654:	2000      	movs	r0, #0
    4656:	4770      	bx	lr
            bs->state == BOOT_STATUS_STATE_0);
    4658:	7903      	ldrb	r3, [r0, #4]
            bs->idx == BOOT_STATUS_IDX_0 &&
    465a:	2b01      	cmp	r3, #1
    465c:	d001      	beq.n	4662 <boot_status_is_reset+0x1e>
    465e:	2000      	movs	r0, #0
    4660:	4770      	bx	lr
    4662:	2001      	movs	r0, #1
}
    4664:	4770      	bx	lr

00004666 <boot_perform_update>:
{
    4666:	b538      	push	{r3, r4, r5, lr}
    4668:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    466a:	f7fc f857 	bl	71c <boot_swap_image>
    466e:	4602      	mov	r2, r0
    swap_type = BOOT_SWAP_TYPE(state);
    4670:	f895 4058 	ldrb.w	r4, [r5, #88]	; 0x58
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    4674:	1ee3      	subs	r3, r4, #3
    4676:	b2db      	uxtb	r3, r3
    4678:	2b01      	cmp	r3, #1
    467a:	d90f      	bls.n	469c <boot_perform_update+0x36>
    if (BOOT_IS_UPGRADE(swap_type)) {
    467c:	2c02      	cmp	r4, #2
    467e:	d003      	beq.n	4688 <boot_perform_update+0x22>
    4680:	2c04      	cmp	r4, #4
    4682:	d001      	beq.n	4688 <boot_perform_update+0x22>
    4684:	2c03      	cmp	r4, #3
    4686:	d107      	bne.n	4698 <boot_perform_update+0x32>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    4688:	2000      	movs	r0, #0
    468a:	f000 f8db 	bl	4844 <swap_set_copy_done>
        if (rc != 0) {
    468e:	4602      	mov	r2, r0
    4690:	b110      	cbz	r0, 4698 <boot_perform_update+0x32>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    4692:	23ff      	movs	r3, #255	; 0xff
    4694:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
}
    4698:	4610      	mov	r0, r2
    469a:	bd38      	pop	{r3, r4, r5, pc}
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    469c:	2000      	movs	r0, #0
    469e:	f000 f8e4 	bl	486a <swap_set_image_ok>
        if (rc != 0) {
    46a2:	4602      	mov	r2, r0
    46a4:	2800      	cmp	r0, #0
    46a6:	d0e9      	beq.n	467c <boot_perform_update+0x16>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    46a8:	24ff      	movs	r4, #255	; 0xff
    46aa:	f885 4058 	strb.w	r4, [r5, #88]	; 0x58
    if (BOOT_IS_UPGRADE(swap_type)) {
    46ae:	e7e7      	b.n	4680 <boot_perform_update+0x1a>

000046b0 <boot_write_status>:
{
    46b0:	b570      	push	{r4, r5, r6, lr}
    46b2:	b084      	sub	sp, #16
    46b4:	4606      	mov	r6, r0
    46b6:	460c      	mov	r4, r1
    rc = flash_area_open(area_id, &fap);
    46b8:	a903      	add	r1, sp, #12
    46ba:	2003      	movs	r0, #3
    46bc:	f7fd fb00 	bl	1cc0 <flash_area_open>
    if (rc != 0) {
    46c0:	b130      	cbz	r0, 46d0 <boot_write_status+0x20>
        rc = BOOT_EFLASH;
    46c2:	2401      	movs	r4, #1
    flash_area_close(fap);
    46c4:	9803      	ldr	r0, [sp, #12]
    46c6:	f000 ff22 	bl	550e <flash_area_close>
}
    46ca:	4620      	mov	r0, r4
    46cc:	b004      	add	sp, #16
    46ce:	bd70      	pop	{r4, r5, r6, pc}
    off = boot_status_off(fap) +
    46d0:	9803      	ldr	r0, [sp, #12]
    46d2:	f000 f96d 	bl	49b0 <boot_status_off>
    46d6:	4605      	mov	r5, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    46d8:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    46da:	4620      	mov	r0, r4
    46dc:	f000 f8e5 	bl	48aa <boot_status_internal_off>
    off = boot_status_off(fap) +
    46e0:	4405      	add	r5, r0
    align = flash_area_align(fap);
    46e2:	9803      	ldr	r0, [sp, #12]
    46e4:	f000 ff91 	bl	560a <flash_area_align>
    46e8:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    46ea:	9803      	ldr	r0, [sp, #12]
    46ec:	f7ff fe96 	bl	441c <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    46f0:	2208      	movs	r2, #8
    46f2:	4601      	mov	r1, r0
    46f4:	a801      	add	r0, sp, #4
    46f6:	f001 f98a 	bl	5a0e <memset>
    buf[0] = bs->state;
    46fa:	7923      	ldrb	r3, [r4, #4]
    46fc:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    4700:	4633      	mov	r3, r6
    4702:	aa01      	add	r2, sp, #4
    4704:	4629      	mov	r1, r5
    4706:	9803      	ldr	r0, [sp, #12]
    4708:	f000 ff21 	bl	554e <flash_area_write>
    if (rc != 0) {
    470c:	4604      	mov	r4, r0
    470e:	2800      	cmp	r0, #0
    4710:	d0d8      	beq.n	46c4 <boot_write_status+0x14>
        rc = BOOT_EFLASH;
    4712:	2401      	movs	r4, #1
    4714:	e7d6      	b.n	46c4 <boot_write_status+0x14>

00004716 <boot_erase_region>:
{
    4716:	b508      	push	{r3, lr}
    return flash_area_erase(fap, off, sz);
    4718:	f000 ff49 	bl	55ae <flash_area_erase>
}
    471c:	bd08      	pop	{r3, pc}

0000471e <swap_erase_trailer_sectors>:
#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)

int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    471e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4722:	4606      	mov	r6, r0
    4724:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    4726:	2100      	movs	r1, #0
    4728:	4608      	mov	r0, r1
    472a:	f7ff fe6d 	bl	4408 <flash_area_id_from_multi_image_slot>
    472e:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    4730:	2101      	movs	r1, #1
    4732:	2000      	movs	r0, #0
    4734:	f7ff fe68 	bl	4408 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    4738:	783b      	ldrb	r3, [r7, #0]
    473a:	429c      	cmp	r4, r3
    473c:	d023      	beq.n	4786 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    473e:	4298      	cmp	r0, r3
    4740:	d123      	bne.n	478a <swap_erase_trailer_sectors+0x6c>
        slot = BOOT_SECONDARY_SLOT;
    4742:	2301      	movs	r3, #1
    } else {
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    4744:	4699      	mov	r9, r3
    4746:	222c      	movs	r2, #44	; 0x2c
    4748:	fb02 6303 	mla	r3, r2, r3, r6
    474c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    474e:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    4750:	6df0      	ldr	r0, [r6, #92]	; 0x5c
    4752:	f000 f91a 	bl	498a <boot_trailer_sz>
    4756:	4680      	mov	r8, r0
    total_sz = 0;
    4758:	2500      	movs	r5, #0
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    475a:	232c      	movs	r3, #44	; 0x2c
    475c:	fb03 6309 	mla	r3, r3, r9, r6
    4760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4762:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    4766:	f8d2 a004 	ldr.w	sl, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    476a:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    476e:	681b      	ldr	r3, [r3, #0]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    4770:	4652      	mov	r2, sl
    4772:	1ac9      	subs	r1, r1, r3
    4774:	4638      	mov	r0, r7
    4776:	f7ff ffce 	bl	4716 <boot_erase_region>
        assert(rc == 0);

        sector--;
    477a:	3c01      	subs	r4, #1
        total_sz += sz;
    477c:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    477e:	45a8      	cmp	r8, r5
    4780:	d8eb      	bhi.n	475a <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    4782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    4786:	2300      	movs	r3, #0
    4788:	e7dc      	b.n	4744 <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    478a:	2001      	movs	r0, #1
    478c:	e7f9      	b.n	4782 <swap_erase_trailer_sectors+0x64>

0000478e <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    478e:	b530      	push	{r4, r5, lr}
    4790:	b083      	sub	sp, #12
    4792:	460c      	mov	r4, r1
    4794:	4615      	mov	r5, r2

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    4796:	4669      	mov	r1, sp
    4798:	2007      	movs	r0, #7
    479a:	f000 f975 	bl	4a88 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    479e:	79e9      	ldrb	r1, [r5, #7]
    47a0:	2901      	cmp	r1, #1
    47a2:	d10d      	bne.n	47c0 <swap_status_init+0x32>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    47a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    47a8:	2b01      	cmp	r3, #1
    47aa:	d00e      	beq.n	47ca <swap_status_init+0x3c>
        rc = boot_write_image_ok(fap);
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    47ac:	68a9      	ldr	r1, [r5, #8]
    47ae:	4620      	mov	r0, r4
    47b0:	f000 f9ba 	bl	4b28 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    47b4:	4620      	mov	r0, r4
    47b6:	f7fc fd2b 	bl	1210 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    47ba:	2000      	movs	r0, #0
    47bc:	b003      	add	sp, #12
    47be:	bd30      	pop	{r4, r5, pc}
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    47c0:	2200      	movs	r2, #0
    47c2:	4620      	mov	r0, r4
    47c4:	f000 f99e 	bl	4b04 <boot_write_swap_info>
    47c8:	e7ec      	b.n	47a4 <swap_status_init+0x16>
        rc = boot_write_image_ok(fap);
    47ca:	4620      	mov	r0, r4
    47cc:	f000 f993 	bl	4af6 <boot_write_image_ok>
    47d0:	e7ec      	b.n	47ac <swap_status_init+0x1e>

000047d2 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    47d2:	b570      	push	{r4, r5, r6, lr}
    47d4:	b082      	sub	sp, #8
    47d6:	4606      	mov	r6, r0
    47d8:	460d      	mov	r5, r1
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    47da:	f7fc fb81 	bl	ee0 <swap_status_source>
    47de:	4604      	mov	r4, r0
    47e0:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    47e2:	b360      	cbz	r0, 483e <swap_read_status+0x6c>
    47e4:	2802      	cmp	r0, #2
    47e6:	d129      	bne.n	483c <swap_read_status+0x6a>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    47e8:	a901      	add	r1, sp, #4
    47ea:	2003      	movs	r0, #3
    47ec:	f7fd fa68 	bl	1cc0 <flash_area_open>
    if (rc != 0) {
    47f0:	b108      	cbz	r0, 47f6 <swap_read_status+0x24>
        return BOOT_EFLASH;
    47f2:	2401      	movs	r4, #1
    47f4:	e023      	b.n	483e <swap_read_status+0x6c>
    }

    rc = swap_read_status_bytes(fap, state, bs);
    47f6:	462a      	mov	r2, r5
    47f8:	4631      	mov	r1, r6
    47fa:	9801      	ldr	r0, [sp, #4]
    47fc:	f7fc fa98 	bl	d30 <swap_read_status_bytes>
    if (rc == 0) {
    4800:	4604      	mov	r4, r0
    4802:	b118      	cbz	r0, 480c <swap_read_status+0x3a>

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    }

    flash_area_close(fap);
    4804:	9801      	ldr	r0, [sp, #4]
    4806:	f000 fe82 	bl	550e <flash_area_close>

    return rc;
    480a:	e018      	b.n	483e <swap_read_status+0x6c>
        off = boot_swap_info_off(fap);
    480c:	9801      	ldr	r0, [sp, #4]
    480e:	f000 f8d8 	bl	49c2 <boot_swap_info_off>
        rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    4812:	2301      	movs	r3, #1
    4814:	f10d 0203 	add.w	r2, sp, #3
    4818:	4601      	mov	r1, r0
    481a:	9801      	ldr	r0, [sp, #4]
    481c:	f7ff fe00 	bl	4420 <flash_area_read_is_empty>
        if (rc == 1) {
    4820:	2801      	cmp	r0, #1
    4822:	d006      	beq.n	4832 <swap_read_status+0x60>
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4824:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4828:	f003 030f 	and.w	r3, r3, #15
    482c:	71eb      	strb	r3, [r5, #7]
    482e:	4604      	mov	r4, r0
    4830:	e7e8      	b.n	4804 <swap_read_status+0x32>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    4832:	2301      	movs	r3, #1
    4834:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
    4838:	4620      	mov	r0, r4
    483a:	e7f3      	b.n	4824 <swap_read_status+0x52>
        return BOOT_EBADARGS;
    483c:	2407      	movs	r4, #7
}
    483e:	4620      	mov	r0, r4
    4840:	b002      	add	sp, #8
    4842:	bd70      	pop	{r4, r5, r6, pc}

00004844 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    4844:	b510      	push	{r4, lr}
    4846:	b082      	sub	sp, #8
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    4848:	a901      	add	r1, sp, #4
    484a:	2003      	movs	r0, #3
    484c:	f7fd fa38 	bl	1cc0 <flash_area_open>
            &fap);
    if (rc != 0) {
    4850:	b118      	cbz	r0, 485a <swap_set_copy_done+0x16>
        return BOOT_EFLASH;
    4852:	2401      	movs	r4, #1
    }

    rc = boot_write_copy_done(fap);
    flash_area_close(fap);
    return rc;
}
    4854:	4620      	mov	r0, r4
    4856:	b002      	add	sp, #8
    4858:	bd10      	pop	{r4, pc}
    rc = boot_write_copy_done(fap);
    485a:	9801      	ldr	r0, [sp, #4]
    485c:	f000 f944 	bl	4ae8 <boot_write_copy_done>
    4860:	4604      	mov	r4, r0
    flash_area_close(fap);
    4862:	9801      	ldr	r0, [sp, #4]
    4864:	f000 fe53 	bl	550e <flash_area_close>
    return rc;
    4868:	e7f4      	b.n	4854 <swap_set_copy_done+0x10>

0000486a <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    486a:	b510      	push	{r4, lr}
    486c:	b084      	sub	sp, #16
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    486e:	a903      	add	r1, sp, #12
    4870:	2003      	movs	r0, #3
    4872:	f7fd fa25 	bl	1cc0 <flash_area_open>
            &fap);
    if (rc != 0) {
    4876:	b118      	cbz	r0, 4880 <swap_set_image_ok+0x16>
        return BOOT_EFLASH;
    4878:	2401      	movs	r4, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    487a:	4620      	mov	r0, r4
    487c:	b004      	add	sp, #16
    487e:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, &state);
    4880:	a901      	add	r1, sp, #4
    4882:	9803      	ldr	r0, [sp, #12]
    4884:	f000 f8a0 	bl	49c8 <boot_read_swap_state>
    if (rc != 0) {
    4888:	4604      	mov	r4, r0
    488a:	b960      	cbnz	r0, 48a6 <swap_set_image_ok+0x3c>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    488c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4890:	2b03      	cmp	r3, #3
    4892:	d003      	beq.n	489c <swap_set_image_ok+0x32>
    flash_area_close(fap);
    4894:	9803      	ldr	r0, [sp, #12]
    4896:	f000 fe3a 	bl	550e <flash_area_close>
    return rc;
    489a:	e7ee      	b.n	487a <swap_set_image_ok+0x10>
        rc = boot_write_image_ok(fap);
    489c:	9803      	ldr	r0, [sp, #12]
    489e:	f000 f92a 	bl	4af6 <boot_write_image_ok>
    48a2:	4604      	mov	r4, r0
    48a4:	e7f6      	b.n	4894 <swap_set_image_ok+0x2a>
        rc = BOOT_EFLASH;
    48a6:	2401      	movs	r4, #1
    48a8:	e7f4      	b.n	4894 <swap_set_image_ok+0x2a>

000048aa <boot_status_internal_off>:
{
    48aa:	b430      	push	{r4, r5}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    48ac:	7943      	ldrb	r3, [r0, #5]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    48ae:	2b01      	cmp	r3, #1
    48b0:	d010      	beq.n	48d4 <boot_status_internal_off+0x2a>
    48b2:	2202      	movs	r2, #2
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    48b4:	fb01 f402 	mul.w	r4, r1, r2
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    48b8:	2b01      	cmp	r3, #1
    48ba:	d00d      	beq.n	48d8 <boot_status_internal_off+0x2e>
    48bc:	01cd      	lsls	r5, r1, #7
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    48be:	7903      	ldrb	r3, [r0, #4]
    48c0:	3b01      	subs	r3, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    48c2:	6802      	ldr	r2, [r0, #0]
    48c4:	3a01      	subs	r2, #1
    48c6:	fb02 f204 	mul.w	r2, r2, r4
    48ca:	fb01 2303 	mla	r3, r1, r3, r2
}
    48ce:	1958      	adds	r0, r3, r5
    48d0:	bc30      	pop	{r4, r5}
    48d2:	4770      	bx	lr
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    48d4:	2201      	movs	r2, #1
    48d6:	e7ed      	b.n	48b4 <boot_status_internal_off+0xa>
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    48d8:	2500      	movs	r5, #0
    48da:	e7f0      	b.n	48be <boot_status_internal_off+0x14>

000048dc <boot_flag_decode>:
    if (flag != BOOT_FLAG_SET) {
    48dc:	2801      	cmp	r0, #1
    48de:	d100      	bne.n	48e2 <boot_flag_decode+0x6>
}
    48e0:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    48e2:	2002      	movs	r0, #2
    48e4:	e7fc      	b.n	48e0 <boot_flag_decode+0x4>

000048e6 <boot_write_trailer>:
{
    48e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    48ea:	b083      	sub	sp, #12
    48ec:	4606      	mov	r6, r0
    48ee:	460f      	mov	r7, r1
    48f0:	4690      	mov	r8, r2
    48f2:	461c      	mov	r4, r3
    align = flash_area_align(fap);
    48f4:	f000 fe89 	bl	560a <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    48f8:	2c08      	cmp	r4, #8
    48fa:	d821      	bhi.n	4940 <boot_write_trailer+0x5a>
    48fc:	4605      	mov	r5, r0
    48fe:	2808      	cmp	r0, #8
    4900:	d902      	bls.n	4908 <boot_write_trailer+0x22>
        return -1;
    4902:	f04f 33ff 	mov.w	r3, #4294967295
    4906:	e01d      	b.n	4944 <boot_write_trailer+0x5e>
    erased_val = flash_area_erased_val(fap);
    4908:	4630      	mov	r0, r6
    490a:	f7ff fd87 	bl	441c <flash_area_erased_val>
    490e:	4681      	mov	r9, r0
    if (align < inlen) {
    4910:	42a5      	cmp	r5, r4
    4912:	d200      	bcs.n	4916 <boot_write_trailer+0x30>
        align = inlen;
    4914:	4625      	mov	r5, r4
    memcpy(buf, inbuf, inlen);
    4916:	4622      	mov	r2, r4
    4918:	4641      	mov	r1, r8
    491a:	4668      	mov	r0, sp
    491c:	f001 f854 	bl	59c8 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    4920:	1b2a      	subs	r2, r5, r4
    4922:	4649      	mov	r1, r9
    4924:	eb0d 0004 	add.w	r0, sp, r4
    4928:	f001 f871 	bl	5a0e <memset>
    rc = flash_area_write(fap, off, buf, align);
    492c:	462b      	mov	r3, r5
    492e:	466a      	mov	r2, sp
    4930:	4639      	mov	r1, r7
    4932:	4630      	mov	r0, r6
    4934:	f000 fe0b 	bl	554e <flash_area_write>
    if (rc != 0) {
    4938:	4603      	mov	r3, r0
    493a:	b118      	cbz	r0, 4944 <boot_write_trailer+0x5e>
        return BOOT_EFLASH;
    493c:	2301      	movs	r3, #1
    493e:	e001      	b.n	4944 <boot_write_trailer+0x5e>
        return -1;
    4940:	f04f 33ff 	mov.w	r3, #4294967295
}
    4944:	4618      	mov	r0, r3
    4946:	b003      	add	sp, #12
    4948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000494c <boot_write_trailer_flag>:
{
    494c:	b500      	push	{lr}
    494e:	b083      	sub	sp, #12
    const uint8_t buf[1] = { flag_val };
    4950:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    4954:	2301      	movs	r3, #1
    4956:	aa01      	add	r2, sp, #4
    4958:	f7ff ffc5 	bl	48e6 <boot_write_trailer>
}
    495c:	b003      	add	sp, #12
    495e:	f85d fb04 	ldr.w	pc, [sp], #4

00004962 <boot_magic_compatible_check>:
    switch (tbl_val) {
    4962:	2804      	cmp	r0, #4
    4964:	d00b      	beq.n	497e <boot_magic_compatible_check+0x1c>
    4966:	2805      	cmp	r0, #5
    4968:	d104      	bne.n	4974 <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
    496a:	f111 30ff 	adds.w	r0, r1, #4294967295
    496e:	bf18      	it	ne
    4970:	2001      	movne	r0, #1
    4972:	4770      	bx	lr
        return tbl_val == val;
    4974:	4288      	cmp	r0, r1
    4976:	bf14      	ite	ne
    4978:	2000      	movne	r0, #0
    497a:	2001      	moveq	r0, #1
    497c:	4770      	bx	lr
        return 1;
    497e:	2001      	movs	r0, #1
}
    4980:	4770      	bx	lr

00004982 <boot_status_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    4982:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    4986:	01d8      	lsls	r0, r3, #7
}
    4988:	4770      	bx	lr

0000498a <boot_trailer_sz>:
{
    498a:	b508      	push	{r3, lr}
           boot_status_sz(min_write_sz)           +
    498c:	f7ff fff9 	bl	4982 <boot_status_sz>
}
    4990:	3030      	adds	r0, #48	; 0x30
    4992:	bd08      	pop	{r3, pc}

00004994 <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    4994:	780b      	ldrb	r3, [r1, #0]
    4996:	2b03      	cmp	r3, #3
    4998:	d007      	beq.n	49aa <boot_status_entries+0x16>
    499a:	2b07      	cmp	r3, #7
    499c:	d102      	bne.n	49a4 <boot_status_entries+0x10>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    499e:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    49a2:	4770      	bx	lr
    return -1;
    49a4:	f04f 30ff 	mov.w	r0, #4294967295
    49a8:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    49aa:	f44f 70c0 	mov.w	r0, #384	; 0x180
    49ae:	4770      	bx	lr

000049b0 <boot_status_off>:
{
    49b0:	b510      	push	{r4, lr}
    49b2:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    49b4:	f000 fe29 	bl	560a <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    49b8:	f7ff ffe7 	bl	498a <boot_trailer_sz>
    return fap->fa_size - off_from_end;
    49bc:	68a3      	ldr	r3, [r4, #8]
}
    49be:	1a18      	subs	r0, r3, r0
    49c0:	bd10      	pop	{r4, pc}

000049c2 <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    49c2:	6880      	ldr	r0, [r0, #8]
}
    49c4:	3828      	subs	r0, #40	; 0x28
    49c6:	4770      	bx	lr

000049c8 <boot_read_swap_state>:
{
    49c8:	b530      	push	{r4, r5, lr}
    49ca:	b087      	sub	sp, #28
    49cc:	4605      	mov	r5, r0
    49ce:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    49d0:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    49d2:	2310      	movs	r3, #16
    49d4:	aa02      	add	r2, sp, #8
    49d6:	3910      	subs	r1, #16
    49d8:	f7ff fd22 	bl	4420 <flash_area_read_is_empty>
    if (rc < 0) {
    49dc:	2800      	cmp	r0, #0
    49de:	db4a      	blt.n	4a76 <boot_read_swap_state+0xae>
    if (rc == 1) {
    49e0:	2801      	cmp	r0, #1
    49e2:	d13c      	bne.n	4a5e <boot_read_swap_state+0x96>
        state->magic = BOOT_MAGIC_UNSET;
    49e4:	2303      	movs	r3, #3
    49e6:	7023      	strb	r3, [r4, #0]
    off = boot_swap_info_off(fap);
    49e8:	4628      	mov	r0, r5
    49ea:	f7ff ffea 	bl	49c2 <boot_swap_info_off>
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    49ee:	2301      	movs	r3, #1
    49f0:	f10d 0207 	add.w	r2, sp, #7
    49f4:	4601      	mov	r1, r0
    49f6:	4628      	mov	r0, r5
    49f8:	f7ff fd12 	bl	4420 <flash_area_read_is_empty>
    if (rc < 0) {
    49fc:	2800      	cmp	r0, #0
    49fe:	db3d      	blt.n	4a7c <boot_read_swap_state+0xb4>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4a00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4a04:	f003 020f 	and.w	r2, r3, #15
    4a08:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    4a0a:	091b      	lsrs	r3, r3, #4
    4a0c:	7123      	strb	r3, [r4, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    4a0e:	2801      	cmp	r0, #1
    4a10:	d001      	beq.n	4a16 <boot_read_swap_state+0x4e>
    4a12:	2a04      	cmp	r2, #4
    4a14:	d903      	bls.n	4a1e <boot_read_swap_state+0x56>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    4a16:	2301      	movs	r3, #1
    4a18:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    4a1a:	2300      	movs	r3, #0
    4a1c:	7123      	strb	r3, [r4, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    4a1e:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    4a20:	2301      	movs	r3, #1
    4a22:	1ca2      	adds	r2, r4, #2
    4a24:	3920      	subs	r1, #32
    4a26:	4628      	mov	r0, r5
    4a28:	f7ff fcfa 	bl	4420 <flash_area_read_is_empty>
    if (rc < 0) {
    4a2c:	2800      	cmp	r0, #0
    4a2e:	db27      	blt.n	4a80 <boot_read_swap_state+0xb8>
    if (rc == 1) {
    4a30:	2801      	cmp	r0, #1
    4a32:	d019      	beq.n	4a68 <boot_read_swap_state+0xa0>
        state->copy_done = boot_flag_decode(state->copy_done);
    4a34:	78a0      	ldrb	r0, [r4, #2]
    4a36:	f7ff ff51 	bl	48dc <boot_flag_decode>
    4a3a:	70a0      	strb	r0, [r4, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
    4a3c:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    4a3e:	2301      	movs	r3, #1
    4a40:	1ce2      	adds	r2, r4, #3
    4a42:	3918      	subs	r1, #24
    4a44:	4628      	mov	r0, r5
    4a46:	f7ff fceb 	bl	4420 <flash_area_read_is_empty>
    if (rc < 0) {
    4a4a:	2800      	cmp	r0, #0
    4a4c:	db1a      	blt.n	4a84 <boot_read_swap_state+0xbc>
    if (rc == 1) {
    4a4e:	2801      	cmp	r0, #1
    4a50:	d00d      	beq.n	4a6e <boot_read_swap_state+0xa6>
        state->image_ok = boot_flag_decode(state->image_ok);
    4a52:	78e0      	ldrb	r0, [r4, #3]
    4a54:	f7ff ff42 	bl	48dc <boot_flag_decode>
    4a58:	70e0      	strb	r0, [r4, #3]
    return 0;
    4a5a:	2000      	movs	r0, #0
    4a5c:	e00c      	b.n	4a78 <boot_read_swap_state+0xb0>
        state->magic = boot_magic_decode(magic);
    4a5e:	a802      	add	r0, sp, #8
    4a60:	f7fc fb92 	bl	1188 <boot_magic_decode>
    4a64:	7020      	strb	r0, [r4, #0]
    4a66:	e7bf      	b.n	49e8 <boot_read_swap_state+0x20>
        state->copy_done = BOOT_FLAG_UNSET;
    4a68:	2303      	movs	r3, #3
    4a6a:	70a3      	strb	r3, [r4, #2]
    4a6c:	e7e6      	b.n	4a3c <boot_read_swap_state+0x74>
        state->image_ok = BOOT_FLAG_UNSET;
    4a6e:	2303      	movs	r3, #3
    4a70:	70e3      	strb	r3, [r4, #3]
    return 0;
    4a72:	2000      	movs	r0, #0
    4a74:	e000      	b.n	4a78 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    4a76:	2001      	movs	r0, #1
}
    4a78:	b007      	add	sp, #28
    4a7a:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    4a7c:	2001      	movs	r0, #1
    4a7e:	e7fb      	b.n	4a78 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    4a80:	2001      	movs	r0, #1
    4a82:	e7f9      	b.n	4a78 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    4a84:	2001      	movs	r0, #1
    4a86:	e7f7      	b.n	4a78 <boot_read_swap_state+0xb0>

00004a88 <boot_read_swap_state_by_id>:
{
    4a88:	b510      	push	{r4, lr}
    4a8a:	b082      	sub	sp, #8
    4a8c:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    4a8e:	a901      	add	r1, sp, #4
    4a90:	b2c0      	uxtb	r0, r0
    4a92:	f7fd f915 	bl	1cc0 <flash_area_open>
    if (rc != 0) {
    4a96:	b118      	cbz	r0, 4aa0 <boot_read_swap_state_by_id+0x18>
        return BOOT_EFLASH;
    4a98:	2401      	movs	r4, #1
}
    4a9a:	4620      	mov	r0, r4
    4a9c:	b002      	add	sp, #8
    4a9e:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    4aa0:	4621      	mov	r1, r4
    4aa2:	9801      	ldr	r0, [sp, #4]
    4aa4:	f7ff ff90 	bl	49c8 <boot_read_swap_state>
    4aa8:	4604      	mov	r4, r0
    flash_area_close(fap);
    4aaa:	9801      	ldr	r0, [sp, #4]
    4aac:	f000 fd2f 	bl	550e <flash_area_close>
    return rc;
    4ab0:	e7f3      	b.n	4a9a <boot_read_swap_state_by_id+0x12>

00004ab2 <boot_read_swap_size>:
{
    4ab2:	b530      	push	{r4, r5, lr}
    4ab4:	b083      	sub	sp, #12
    4ab6:	460d      	mov	r5, r1
    rc = boot_find_status(image_index, &fap);
    4ab8:	a901      	add	r1, sp, #4
    4aba:	f7fc fb71 	bl	11a0 <boot_find_status>
    if (rc == 0) {
    4abe:	4604      	mov	r4, r0
    4ac0:	b110      	cbz	r0, 4ac8 <boot_read_swap_size+0x16>
}
    4ac2:	4620      	mov	r0, r4
    4ac4:	b003      	add	sp, #12
    4ac6:	bd30      	pop	{r4, r5, pc}
        off = boot_swap_size_off(fap);
    4ac8:	9c01      	ldr	r4, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    4aca:	4620      	mov	r0, r4
    4acc:	f7ff ff79 	bl	49c2 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    4ad0:	2304      	movs	r3, #4
    4ad2:	462a      	mov	r2, r5
    4ad4:	f1a0 0108 	sub.w	r1, r0, #8
    4ad8:	4620      	mov	r0, r4
    4ada:	f000 fd19 	bl	5510 <flash_area_read>
    4ade:	4604      	mov	r4, r0
        flash_area_close(fap);
    4ae0:	9801      	ldr	r0, [sp, #4]
    4ae2:	f000 fd14 	bl	550e <flash_area_close>
    return rc;
    4ae6:	e7ec      	b.n	4ac2 <boot_read_swap_size+0x10>

00004ae8 <boot_write_copy_done>:
{
    4ae8:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    4aea:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    4aec:	2201      	movs	r2, #1
    4aee:	3920      	subs	r1, #32
    4af0:	f7ff ff2c 	bl	494c <boot_write_trailer_flag>
}
    4af4:	bd08      	pop	{r3, pc}

00004af6 <boot_write_image_ok>:
{
    4af6:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    4af8:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    4afa:	2201      	movs	r2, #1
    4afc:	3918      	subs	r1, #24
    4afe:	f7ff ff25 	bl	494c <boot_write_trailer_flag>
}
    4b02:	bd08      	pop	{r3, pc}

00004b04 <boot_write_swap_info>:
{
    4b04:	b510      	push	{r4, lr}
    4b06:	b082      	sub	sp, #8
    4b08:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    4b0a:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    4b0e:	f88d 2007 	strb.w	r2, [sp, #7]
    off = boot_swap_info_off(fap);
    4b12:	f7ff ff56 	bl	49c2 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    4b16:	2301      	movs	r3, #1
    4b18:	f10d 0207 	add.w	r2, sp, #7
    4b1c:	4601      	mov	r1, r0
    4b1e:	4620      	mov	r0, r4
    4b20:	f7ff fee1 	bl	48e6 <boot_write_trailer>
}
    4b24:	b002      	add	sp, #8
    4b26:	bd10      	pop	{r4, pc}

00004b28 <boot_write_swap_size>:
{
    4b28:	b510      	push	{r4, lr}
    4b2a:	b082      	sub	sp, #8
    4b2c:	4604      	mov	r4, r0
    4b2e:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    4b30:	f7ff ff47 	bl	49c2 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    4b34:	2304      	movs	r3, #4
    4b36:	eb0d 0203 	add.w	r2, sp, r3
    4b3a:	f1a0 0108 	sub.w	r1, r0, #8
    4b3e:	4620      	mov	r0, r4
    4b40:	f7ff fed1 	bl	48e6 <boot_write_trailer>
}
    4b44:	b002      	add	sp, #8
    4b46:	bd10      	pop	{r4, pc}

00004b48 <bootutil_img_hash>:
{
    4b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b4c:	b09d      	sub	sp, #116	; 0x74
    4b4e:	4615      	mov	r5, r2
    4b50:	4699      	mov	r9, r3
    4b52:	9f24      	ldr	r7, [sp, #144]	; 0x90
    4b54:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    4b58:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    mbedtls_sha256_init(ctx);
    4b5a:	a801      	add	r0, sp, #4
    4b5c:	f002 fe1c 	bl	7798 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    4b60:	2100      	movs	r1, #0
    4b62:	a801      	add	r0, sp, #4
    4b64:	f7fe fc42 	bl	33ec <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
    4b68:	b114      	cbz	r4, 4b70 <bootutil_img_hash+0x28>
    4b6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	dc06      	bgt.n	4b7e <bootutil_img_hash+0x36>
    size = hdr_size = hdr->ih_hdr_size;
    4b70:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    4b72:	68ee      	ldr	r6, [r5, #12]
    4b74:	4433      	add	r3, r6
    size += hdr->ih_protect_tlv_size;
    4b76:	896e      	ldrh	r6, [r5, #10]
    4b78:	441e      	add	r6, r3
    for (off = 0; off < size; off += blk_sz) {
    4b7a:	2500      	movs	r5, #0
    4b7c:	e013      	b.n	4ba6 <bootutil_img_hash+0x5e>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    4b7e:	461a      	mov	r2, r3
    4b80:	4621      	mov	r1, r4
    4b82:	a801      	add	r0, sp, #4
    4b84:	f002 fe0e 	bl	77a4 <mbedtls_sha256_update_ret>
    4b88:	e7f2      	b.n	4b70 <bootutil_img_hash+0x28>
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    4b8a:	4623      	mov	r3, r4
    4b8c:	463a      	mov	r2, r7
    4b8e:	4629      	mov	r1, r5
    4b90:	4648      	mov	r0, r9
    4b92:	f000 fcbd 	bl	5510 <flash_area_read>
        if (rc) {
    4b96:	4603      	mov	r3, r0
    4b98:	b988      	cbnz	r0, 4bbe <bootutil_img_hash+0x76>
    4b9a:	4622      	mov	r2, r4
    4b9c:	4639      	mov	r1, r7
    4b9e:	a801      	add	r0, sp, #4
    4ba0:	f002 fe00 	bl	77a4 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    4ba4:	4425      	add	r5, r4
    4ba6:	42b5      	cmp	r5, r6
    4ba8:	d204      	bcs.n	4bb4 <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    4baa:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    4bac:	4544      	cmp	r4, r8
    4bae:	d9ec      	bls.n	4b8a <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    4bb0:	4644      	mov	r4, r8
    4bb2:	e7ea      	b.n	4b8a <bootutil_img_hash+0x42>
    (void)mbedtls_sha256_finish_ret(ctx, output);
    4bb4:	9926      	ldr	r1, [sp, #152]	; 0x98
    4bb6:	a801      	add	r0, sp, #4
    4bb8:	f002 fe37 	bl	782a <mbedtls_sha256_finish_ret>
    return 0;
    4bbc:	2300      	movs	r3, #0
}
    4bbe:	4618      	mov	r0, r3
    4bc0:	b01d      	add	sp, #116	; 0x74
    4bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00004bc6 <bootutil_parse_rsakey>:
{
    4bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bca:	b084      	sub	sp, #16
    4bcc:	4604      	mov	r4, r0
    4bce:	460e      	mov	r6, r1
    4bd0:	4615      	mov	r5, r2
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
    4bd2:	2330      	movs	r3, #48	; 0x30
    4bd4:	aa03      	add	r2, sp, #12
    4bd6:	4629      	mov	r1, r5
    4bd8:	4630      	mov	r0, r6
    4bda:	f001 fa96 	bl	610a <mbedtls_asn1_get_tag>
    4bde:	bba8      	cbnz	r0, 4c4c <bootutil_parse_rsakey+0x86>
    if (*p + len != end) {
    4be0:	6833      	ldr	r3, [r6, #0]
    4be2:	9a03      	ldr	r2, [sp, #12]
    4be4:	4413      	add	r3, r2
    4be6:	42ab      	cmp	r3, r5
    4be8:	d133      	bne.n	4c52 <bootutil_parse_rsakey+0x8c>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
    4bea:	f104 0708 	add.w	r7, r4, #8
    4bee:	463a      	mov	r2, r7
    4bf0:	4629      	mov	r1, r5
    4bf2:	4630      	mov	r0, r6
    4bf4:	f001 fa9c 	bl	6130 <mbedtls_asn1_get_mpi>
    4bf8:	bb28      	cbnz	r0, 4c46 <bootutil_parse_rsakey+0x80>
      (rc = mbedtls_asn1_get_mpi(p, end, &ctx->E)) != 0) {
    4bfa:	f104 0814 	add.w	r8, r4, #20
    4bfe:	4642      	mov	r2, r8
    4c00:	4629      	mov	r1, r5
    4c02:	4630      	mov	r0, r6
    4c04:	f001 fa94 	bl	6130 <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
    4c08:	b9e8      	cbnz	r0, 4c46 <bootutil_parse_rsakey+0x80>
    ctx->len = mbedtls_mpi_size(&ctx->N);
    4c0a:	4638      	mov	r0, r7
    4c0c:	f001 fd9c 	bl	6748 <mbedtls_mpi_size>
    4c10:	6060      	str	r0, [r4, #4]
    if (*p != end) {
    4c12:	6833      	ldr	r3, [r6, #0]
    4c14:	42ab      	cmp	r3, r5
    4c16:	d11f      	bne.n	4c58 <bootutil_parse_rsakey+0x92>
    rc = mbedtls_rsa_import(ctx, &ctx->N, NULL, NULL, NULL, &ctx->E);
    4c18:	f8cd 8004 	str.w	r8, [sp, #4]
    4c1c:	2200      	movs	r2, #0
    4c1e:	9200      	str	r2, [sp, #0]
    4c20:	4613      	mov	r3, r2
    4c22:	4639      	mov	r1, r7
    4c24:	4620      	mov	r0, r4
    4c26:	f002 fd32 	bl	768e <mbedtls_rsa_import>
    if (rc != 0) {
    4c2a:	b9c0      	cbnz	r0, 4c5e <bootutil_parse_rsakey+0x98>
    rc = mbedtls_rsa_check_pubkey(ctx);
    4c2c:	4620      	mov	r0, r4
    4c2e:	f7fe fb71 	bl	3314 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
    4c32:	4605      	mov	r5, r0
    4c34:	b9b0      	cbnz	r0, 4c64 <bootutil_parse_rsakey+0x9e>
    ctx->len = mbedtls_mpi_size(&ctx->N);
    4c36:	4638      	mov	r0, r7
    4c38:	f001 fd86 	bl	6748 <mbedtls_mpi_size>
    4c3c:	6060      	str	r0, [r4, #4]
}
    4c3e:	4628      	mov	r0, r5
    4c40:	b004      	add	sp, #16
    4c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -3;
    4c46:	f06f 0502 	mvn.w	r5, #2
    4c4a:	e7f8      	b.n	4c3e <bootutil_parse_rsakey+0x78>
        return -1;
    4c4c:	f04f 35ff 	mov.w	r5, #4294967295
    4c50:	e7f5      	b.n	4c3e <bootutil_parse_rsakey+0x78>
        return -2;
    4c52:	f06f 0501 	mvn.w	r5, #1
    4c56:	e7f2      	b.n	4c3e <bootutil_parse_rsakey+0x78>
        return -4;
    4c58:	f06f 0503 	mvn.w	r5, #3
    4c5c:	e7ef      	b.n	4c3e <bootutil_parse_rsakey+0x78>
        return -5;
    4c5e:	f06f 0504 	mvn.w	r5, #4
    4c62:	e7ec      	b.n	4c3e <bootutil_parse_rsakey+0x78>
        return -6;
    4c64:	f06f 0505 	mvn.w	r5, #5
    4c68:	e7e9      	b.n	4c3e <bootutil_parse_rsakey+0x78>

00004c6a <pss_mgf1>:
{
    4c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c6c:	b0a5      	sub	sp, #148	; 0x94
    4c6e:	4606      	mov	r6, r0
    4c70:	460f      	mov	r7, r1
    uint8_t counter[4] = { 0, 0, 0, 0 };
    4c72:	2300      	movs	r3, #0
    4c74:	9308      	str	r3, [sp, #32]
    int count = PSS_MASK_LEN;
    4c76:	24df      	movs	r4, #223	; 0xdf
    while (count > 0) {
    4c78:	e007      	b.n	4c8a <pss_mgf1+0x20>
            bytes = count;
    4c7a:	4625      	mov	r5, r4
        memcpy(mask, htmp, bytes);
    4c7c:	462a      	mov	r2, r5
    4c7e:	4669      	mov	r1, sp
    4c80:	4630      	mov	r0, r6
    4c82:	f000 fea1 	bl	59c8 <memcpy>
        mask += bytes;
    4c86:	442e      	add	r6, r5
        count -= bytes;
    4c88:	1b64      	subs	r4, r4, r5
    while (count > 0) {
    4c8a:	2c00      	cmp	r4, #0
    4c8c:	dd1d      	ble.n	4cca <pss_mgf1+0x60>
    mbedtls_sha256_init(ctx);
    4c8e:	a809      	add	r0, sp, #36	; 0x24
    4c90:	f002 fd82 	bl	7798 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    4c94:	2100      	movs	r1, #0
    4c96:	a809      	add	r0, sp, #36	; 0x24
    4c98:	f7fe fba8 	bl	33ec <mbedtls_sha256_starts_ret>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    4c9c:	2220      	movs	r2, #32
    4c9e:	4639      	mov	r1, r7
    4ca0:	a809      	add	r0, sp, #36	; 0x24
    4ca2:	f002 fd7f 	bl	77a4 <mbedtls_sha256_update_ret>
    4ca6:	2204      	movs	r2, #4
    4ca8:	a908      	add	r1, sp, #32
    4caa:	a809      	add	r0, sp, #36	; 0x24
    4cac:	f002 fd7a 	bl	77a4 <mbedtls_sha256_update_ret>
    (void)mbedtls_sha256_finish_ret(ctx, output);
    4cb0:	4669      	mov	r1, sp
    4cb2:	a809      	add	r0, sp, #36	; 0x24
    4cb4:	f002 fdb9 	bl	782a <mbedtls_sha256_finish_ret>
        counter[3]++;
    4cb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    4cbc:	3301      	adds	r3, #1
    4cbe:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        if (bytes > count)
    4cc2:	2c1f      	cmp	r4, #31
    4cc4:	ddd9      	ble.n	4c7a <pss_mgf1+0x10>
        bytes = PSS_HLEN;
    4cc6:	2520      	movs	r5, #32
    4cc8:	e7d8      	b.n	4c7c <pss_mgf1+0x12>
}
    4cca:	b025      	add	sp, #148	; 0x94
    4ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004cce <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    4cce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4cd2:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    4cd4:	2800      	cmp	r0, #0
    4cd6:	d04a      	beq.n	4d6e <bootutil_tlv_iter_begin+0xa0>
    4cd8:	4605      	mov	r5, r0
    4cda:	2900      	cmp	r1, #0
    4cdc:	d04a      	beq.n	4d74 <bootutil_tlv_iter_begin+0xa6>
    4cde:	2a00      	cmp	r2, #0
    4ce0:	d04b      	beq.n	4d7a <bootutil_tlv_iter_begin+0xac>
    4ce2:	4699      	mov	r9, r3
    4ce4:	4617      	mov	r7, r2
    4ce6:	460c      	mov	r4, r1
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    4ce8:	890e      	ldrh	r6, [r1, #8]
    4cea:	68cb      	ldr	r3, [r1, #12]
    4cec:	441e      	add	r6, r3
    if (flash_area_read(fap, off_, &info, sizeof(info))) {
    4cee:	2304      	movs	r3, #4
    4cf0:	eb0d 0203 	add.w	r2, sp, r3
    4cf4:	4631      	mov	r1, r6
    4cf6:	4638      	mov	r0, r7
    4cf8:	f000 fc0a 	bl	5510 <flash_area_read>
    4cfc:	4680      	mov	r8, r0
    4cfe:	2800      	cmp	r0, #0
    4d00:	d13e      	bne.n	4d80 <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    4d02:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4d06:	f646 1308 	movw	r3, #26888	; 0x6908
    4d0a:	429a      	cmp	r2, r3
    4d0c:	d01e      	beq.n	4d4c <bootutil_tlv_iter_begin+0x7e>
        }

        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    4d0e:	8963      	ldrh	r3, [r4, #10]
    4d10:	2b00      	cmp	r3, #0
    4d12:	d13b      	bne.n	4d8c <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    4d14:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4d18:	f646 1307 	movw	r3, #26887	; 0x6907
    4d1c:	429a      	cmp	r2, r3
    4d1e:	d138      	bne.n	4d92 <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    4d20:	602c      	str	r4, [r5, #0]
    it->fap = fap;
    4d22:	606f      	str	r7, [r5, #4]
    it->type = type;
    4d24:	f8a5 9008 	strh.w	r9, [r5, #8]
    it->prot = prot;
    4d28:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    4d2c:	72ab      	strb	r3, [r5, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    4d2e:	8963      	ldrh	r3, [r4, #10]
    4d30:	4433      	add	r3, r6
    4d32:	60eb      	str	r3, [r5, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    4d34:	8963      	ldrh	r3, [r4, #10]
    4d36:	4433      	add	r3, r6
    4d38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    4d3c:	4413      	add	r3, r2
    4d3e:	616b      	str	r3, [r5, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    4d40:	3604      	adds	r6, #4
    4d42:	612e      	str	r6, [r5, #16]
    return 0;
}
    4d44:	4640      	mov	r0, r8
    4d46:	b003      	add	sp, #12
    4d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    4d4c:	8963      	ldrh	r3, [r4, #10]
    4d4e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    4d52:	428b      	cmp	r3, r1
    4d54:	d117      	bne.n	4d86 <bootutil_tlv_iter_begin+0xb8>
        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
    4d56:	2304      	movs	r3, #4
    4d58:	eb0d 0203 	add.w	r2, sp, r3
    4d5c:	4431      	add	r1, r6
    4d5e:	4638      	mov	r0, r7
    4d60:	f000 fbd6 	bl	5510 <flash_area_read>
    4d64:	2800      	cmp	r0, #0
    4d66:	d0d5      	beq.n	4d14 <bootutil_tlv_iter_begin+0x46>
            return -1;
    4d68:	f04f 38ff 	mov.w	r8, #4294967295
    4d6c:	e7ea      	b.n	4d44 <bootutil_tlv_iter_begin+0x76>
        return -1;
    4d6e:	f04f 38ff 	mov.w	r8, #4294967295
    4d72:	e7e7      	b.n	4d44 <bootutil_tlv_iter_begin+0x76>
    4d74:	f04f 38ff 	mov.w	r8, #4294967295
    4d78:	e7e4      	b.n	4d44 <bootutil_tlv_iter_begin+0x76>
    4d7a:	f04f 38ff 	mov.w	r8, #4294967295
    4d7e:	e7e1      	b.n	4d44 <bootutil_tlv_iter_begin+0x76>
        return -1;
    4d80:	f04f 38ff 	mov.w	r8, #4294967295
    4d84:	e7de      	b.n	4d44 <bootutil_tlv_iter_begin+0x76>
            return -1;
    4d86:	f04f 38ff 	mov.w	r8, #4294967295
    4d8a:	e7db      	b.n	4d44 <bootutil_tlv_iter_begin+0x76>
        return -1;
    4d8c:	f04f 38ff 	mov.w	r8, #4294967295
    4d90:	e7d8      	b.n	4d44 <bootutil_tlv_iter_begin+0x76>
        return -1;
    4d92:	f04f 38ff 	mov.w	r8, #4294967295
    4d96:	e7d5      	b.n	4d44 <bootutil_tlv_iter_begin+0x76>

00004d98 <bootutil_tlv_iter_next>:
                       uint16_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    4d98:	2800      	cmp	r0, #0
    4d9a:	d04d      	beq.n	4e38 <bootutil_tlv_iter_next+0xa0>
{
    4d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d9e:	b083      	sub	sp, #12
    4da0:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    4da2:	6800      	ldr	r0, [r0, #0]
    4da4:	2800      	cmp	r0, #0
    4da6:	d04b      	beq.n	4e40 <bootutil_tlv_iter_next+0xa8>
    4da8:	461d      	mov	r5, r3
    4daa:	4616      	mov	r6, r2
    4dac:	460f      	mov	r7, r1
    4dae:	6863      	ldr	r3, [r4, #4]
    4db0:	bb0b      	cbnz	r3, 4df6 <bootutil_tlv_iter_next+0x5e>
        return -1;
    4db2:	f04f 31ff 	mov.w	r1, #4294967295
    4db6:	e03a      	b.n	4e2e <bootutil_tlv_iter_next+0x96>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = flash_area_read(it->fap, it->tlv_off, &tlv, sizeof tlv);
    4db8:	2304      	movs	r3, #4
    4dba:	eb0d 0203 	add.w	r2, sp, r3
    4dbe:	6921      	ldr	r1, [r4, #16]
    4dc0:	6860      	ldr	r0, [r4, #4]
    4dc2:	f000 fba5 	bl	5510 <flash_area_read>
        if (rc) {
    4dc6:	4601      	mov	r1, r0
    4dc8:	2800      	cmp	r0, #0
    4dca:	d13c      	bne.n	4e46 <bootutil_tlv_iter_next+0xae>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    4dcc:	7aa3      	ldrb	r3, [r4, #10]
    4dce:	b11b      	cbz	r3, 4dd8 <bootutil_tlv_iter_next+0x40>
    4dd0:	6922      	ldr	r2, [r4, #16]
    4dd2:	68e3      	ldr	r3, [r4, #12]
    4dd4:	429a      	cmp	r2, r3
    4dd6:	d239      	bcs.n	4e4c <bootutil_tlv_iter_next+0xb4>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    4dd8:	8923      	ldrh	r3, [r4, #8]
    4dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4dde:	4293      	cmp	r3, r2
    4de0:	d017      	beq.n	4e12 <bootutil_tlv_iter_next+0x7a>
    4de2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4de6:	4293      	cmp	r3, r2
    4de8:	d013      	beq.n	4e12 <bootutil_tlv_iter_next+0x7a>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    4dea:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    4dee:	6923      	ldr	r3, [r4, #16]
    4df0:	4418      	add	r0, r3
    4df2:	3004      	adds	r0, #4
    4df4:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    4df6:	6920      	ldr	r0, [r4, #16]
    4df8:	6963      	ldr	r3, [r4, #20]
    4dfa:	4298      	cmp	r0, r3
    4dfc:	d21a      	bcs.n	4e34 <bootutil_tlv_iter_next+0x9c>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    4dfe:	6823      	ldr	r3, [r4, #0]
    4e00:	895b      	ldrh	r3, [r3, #10]
    4e02:	2b00      	cmp	r3, #0
    4e04:	d0d8      	beq.n	4db8 <bootutil_tlv_iter_next+0x20>
    4e06:	68e3      	ldr	r3, [r4, #12]
    4e08:	4283      	cmp	r3, r0
    4e0a:	d1d5      	bne.n	4db8 <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    4e0c:	3004      	adds	r0, #4
    4e0e:	6120      	str	r0, [r4, #16]
    4e10:	e7d2      	b.n	4db8 <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    4e12:	b115      	cbz	r5, 4e1a <bootutil_tlv_iter_next+0x82>
                *type = tlv.it_type;
    4e14:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    4e18:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    4e1a:	6923      	ldr	r3, [r4, #16]
    4e1c:	3304      	adds	r3, #4
    4e1e:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    4e20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4e24:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    4e26:	6922      	ldr	r2, [r4, #16]
    4e28:	4413      	add	r3, r2
    4e2a:	3304      	adds	r3, #4
    4e2c:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    4e2e:	4608      	mov	r0, r1
    4e30:	b003      	add	sp, #12
    4e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    4e34:	2101      	movs	r1, #1
    4e36:	e7fa      	b.n	4e2e <bootutil_tlv_iter_next+0x96>
        return -1;
    4e38:	f04f 31ff 	mov.w	r1, #4294967295
}
    4e3c:	4608      	mov	r0, r1
    4e3e:	4770      	bx	lr
        return -1;
    4e40:	f04f 31ff 	mov.w	r1, #4294967295
    4e44:	e7f3      	b.n	4e2e <bootutil_tlv_iter_next+0x96>
            return -1;
    4e46:	f04f 31ff 	mov.w	r1, #4294967295
    4e4a:	e7f0      	b.n	4e2e <bootutil_tlv_iter_next+0x96>
            return 1;
    4e4c:	2101      	movs	r1, #1
    4e4e:	e7ee      	b.n	4e2e <bootutil_tlv_iter_next+0x96>

00004e50 <block_ptr>:
#define LVL_ARRAY_SZ(n) (n)
#endif

static void *block_ptr(struct sys_mem_pool_base *p, size_t lsz, int block)
{
	return (u8_t *)p->buf + lsz * block;
    4e50:	6800      	ldr	r0, [r0, #0]
}
    4e52:	fb01 0002 	mla	r0, r1, r2, r0
    4e56:	4770      	bx	lr

00004e58 <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    4e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e5a:	4604      	mov	r4, r0
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    4e5c:	f8b0 c008 	ldrh.w	ip, [r0, #8]
    4e60:	6840      	ldr	r0, [r0, #4]
    4e62:	fb00 fc0c 	mul.w	ip, r0, ip
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    4e66:	6827      	ldr	r7, [r4, #0]
    4e68:	4467      	add	r7, ip

	p->max_inline_level = -1;
    4e6a:	23ff      	movs	r3, #255	; 0xff
    4e6c:	72e3      	strb	r3, [r4, #11]

	for (i = 0; i < p->n_levels; i++) {
    4e6e:	2200      	movs	r2, #0
    4e70:	e00a      	b.n	4e88 <z_sys_mem_pool_base_init+0x30>
		sys_dlist_init(&p->levels[i].free_list);

		if (nblocks <= sizeof(p->levels[i].bits)*8) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
    4e72:	68e3      	ldr	r3, [r4, #12]
    4e74:	515f      	str	r7, [r3, r5]
			bits += (nblocks + 31)/32;
    4e76:	311f      	adds	r1, #31
    4e78:	d417      	bmi.n	4eaa <z_sys_mem_pool_base_init+0x52>
    4e7a:	1149      	asrs	r1, r1, #5
    4e7c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		}

		sz = WB_DN(sz / 4);
    4e80:	0880      	lsrs	r0, r0, #2
    4e82:	f020 0003 	bic.w	r0, r0, #3
	for (i = 0; i < p->n_levels; i++) {
    4e86:	3201      	adds	r2, #1
    4e88:	7aa3      	ldrb	r3, [r4, #10]
    4e8a:	4293      	cmp	r3, r2
    4e8c:	dd0f      	ble.n	4eae <z_sys_mem_pool_base_init+0x56>
		int nblocks = buflen / sz;
    4e8e:	fbbc f1f0 	udiv	r1, ip, r0
		sys_dlist_init(&p->levels[i].free_list);
    4e92:	68e3      	ldr	r3, [r4, #12]
    4e94:	eb02 0642 	add.w	r6, r2, r2, lsl #1
    4e98:	00b5      	lsls	r5, r6, #2
    4e9a:	442b      	add	r3, r5
    4e9c:	1d1e      	adds	r6, r3, #4
	list->head = (sys_dnode_t *)list;
    4e9e:	605e      	str	r6, [r3, #4]
	list->tail = (sys_dnode_t *)list;
    4ea0:	609e      	str	r6, [r3, #8]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    4ea2:	2920      	cmp	r1, #32
    4ea4:	d8e5      	bhi.n	4e72 <z_sys_mem_pool_base_init+0x1a>
			p->max_inline_level = i;
    4ea6:	72e2      	strb	r2, [r4, #11]
    4ea8:	e7ea      	b.n	4e80 <z_sys_mem_pool_base_init+0x28>
			bits += (nblocks + 31)/32;
    4eaa:	311f      	adds	r1, #31
    4eac:	e7e5      	b.n	4e7a <z_sys_mem_pool_base_init+0x22>
	}

	for (i = 0; i < p->n_max; i++) {
    4eae:	2500      	movs	r5, #0
    4eb0:	e00c      	b.n	4ecc <z_sys_mem_pool_base_init+0x74>
		void *block = block_ptr(p, p->max_sz, i);
    4eb2:	462a      	mov	r2, r5
    4eb4:	6861      	ldr	r1, [r4, #4]
    4eb6:	4620      	mov	r0, r4
    4eb8:	f7ff ffca 	bl	4e50 <block_ptr>

		sys_dlist_append(&p->levels[0].free_list, block);
    4ebc:	68e3      	ldr	r3, [r4, #12]
    4ebe:	1d1a      	adds	r2, r3, #4
	node->next = list;
    4ec0:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    4ec2:	689a      	ldr	r2, [r3, #8]
    4ec4:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    4ec6:	6010      	str	r0, [r2, #0]
	list->tail = node;
    4ec8:	6098      	str	r0, [r3, #8]
	for (i = 0; i < p->n_max; i++) {
    4eca:	3501      	adds	r5, #1
    4ecc:	8923      	ldrh	r3, [r4, #8]
    4ece:	42ab      	cmp	r3, r5
    4ed0:	dcef      	bgt.n	4eb2 <z_sys_mem_pool_base_init+0x5a>
	}
}
    4ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004ed4 <arch_printk_char_out>:
}
    4ed4:	2000      	movs	r0, #0
    4ed6:	4770      	bx	lr

00004ed8 <print_err>:
{
    4ed8:	b538      	push	{r3, r4, r5, lr}
    4eda:	4604      	mov	r4, r0
    4edc:	460d      	mov	r5, r1
	out('E', ctx);
    4ede:	2045      	movs	r0, #69	; 0x45
    4ee0:	47a0      	blx	r4
	out('R', ctx);
    4ee2:	4629      	mov	r1, r5
    4ee4:	2052      	movs	r0, #82	; 0x52
    4ee6:	47a0      	blx	r4
	out('R', ctx);
    4ee8:	4629      	mov	r1, r5
    4eea:	2052      	movs	r0, #82	; 0x52
    4eec:	47a0      	blx	r4
}
    4eee:	bd38      	pop	{r3, r4, r5, pc}

00004ef0 <_printk_hex_ulong>:
{
    4ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ef4:	b083      	sub	sp, #12
    4ef6:	4681      	mov	r9, r0
    4ef8:	9100      	str	r1, [sp, #0]
    4efa:	4690      	mov	r8, r2
    4efc:	461e      	mov	r6, r3
    4efe:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
	int digits = 0;
    4f02:	2500      	movs	r5, #0
	int remaining = 16; /* 16 digits max */
    4f04:	f04f 0a10 	mov.w	sl, #16
	int found_largest_digit = 0;
    4f08:	462f      	mov	r7, r5
	int shift = sizeof(num) * 8;
    4f0a:	2440      	movs	r4, #64	; 0x40
	while (shift >= 4) {
    4f0c:	e007      	b.n	4f1e <_printk_hex_ulong+0x2e>
			nibble += nibble > 9 ? 87 : 48;
    4f0e:	2809      	cmp	r0, #9
    4f10:	d92a      	bls.n	4f68 <_printk_hex_ulong+0x78>
    4f12:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    4f14:	9900      	ldr	r1, [sp, #0]
    4f16:	4418      	add	r0, r3
    4f18:	47c8      	blx	r9
			digits++;
    4f1a:	3501      	adds	r5, #1
			found_largest_digit = 1;
    4f1c:	2701      	movs	r7, #1
	while (shift >= 4) {
    4f1e:	2c03      	cmp	r4, #3
    4f20:	dd33      	ble.n	4f8a <_printk_hex_ulong+0x9a>
		shift -= 4;
    4f22:	3c04      	subs	r4, #4
		nibble = (num >> shift) & 0xf;
    4f24:	f1c4 0220 	rsb	r2, r4, #32
    4f28:	f1a4 0320 	sub.w	r3, r4, #32
    4f2c:	fa28 f004 	lsr.w	r0, r8, r4
    4f30:	fa06 f202 	lsl.w	r2, r6, r2
    4f34:	4310      	orrs	r0, r2
    4f36:	fa26 f303 	lsr.w	r3, r6, r3
    4f3a:	4318      	orrs	r0, r3
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    4f3c:	f010 000f 	ands.w	r0, r0, #15
    4f40:	d1e5      	bne.n	4f0e <_printk_hex_ulong+0x1e>
    4f42:	2f00      	cmp	r7, #0
    4f44:	d1e3      	bne.n	4f0e <_printk_hex_ulong+0x1e>
    4f46:	2c00      	cmp	r4, #0
    4f48:	d0e1      	beq.n	4f0e <_printk_hex_ulong+0x1e>
		if (remaining-- <= min_width) {
    4f4a:	f10a 33ff 	add.w	r3, sl, #4294967295
    4f4e:	9301      	str	r3, [sp, #4]
    4f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4f52:	459a      	cmp	sl, r3
    4f54:	dc16      	bgt.n	4f84 <_printk_hex_ulong+0x94>
			if (padding == PAD_ZERO_BEFORE) {
    4f56:	f1bb 0f01 	cmp.w	fp, #1
    4f5a:	d007      	beq.n	4f6c <_printk_hex_ulong+0x7c>
			} else if (padding == PAD_SPACE_BEFORE) {
    4f5c:	f1bb 0f02 	cmp.w	fp, #2
    4f60:	d00a      	beq.n	4f78 <_printk_hex_ulong+0x88>
		if (remaining-- <= min_width) {
    4f62:	f8dd a004 	ldr.w	sl, [sp, #4]
    4f66:	e7da      	b.n	4f1e <_printk_hex_ulong+0x2e>
			nibble += nibble > 9 ? 87 : 48;
    4f68:	2330      	movs	r3, #48	; 0x30
    4f6a:	e7d3      	b.n	4f14 <_printk_hex_ulong+0x24>
				out('0', ctx);
    4f6c:	9900      	ldr	r1, [sp, #0]
    4f6e:	2030      	movs	r0, #48	; 0x30
    4f70:	47c8      	blx	r9
		if (remaining-- <= min_width) {
    4f72:	f8dd a004 	ldr.w	sl, [sp, #4]
    4f76:	e7d2      	b.n	4f1e <_printk_hex_ulong+0x2e>
				out(' ', ctx);
    4f78:	9900      	ldr	r1, [sp, #0]
    4f7a:	2020      	movs	r0, #32
    4f7c:	47c8      	blx	r9
		if (remaining-- <= min_width) {
    4f7e:	f8dd a004 	ldr.w	sl, [sp, #4]
    4f82:	e7cc      	b.n	4f1e <_printk_hex_ulong+0x2e>
    4f84:	f8dd a004 	ldr.w	sl, [sp, #4]
    4f88:	e7c9      	b.n	4f1e <_printk_hex_ulong+0x2e>
	if (padding == PAD_SPACE_AFTER) {
    4f8a:	f1bb 0f03 	cmp.w	fp, #3
    4f8e:	d002      	beq.n	4f96 <_printk_hex_ulong+0xa6>
}
    4f90:	b003      	add	sp, #12
    4f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    4f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4f98:	ebc5 0543 	rsb	r5, r5, r3, lsl #1
		while (remaining-- > 0) {
    4f9c:	e003      	b.n	4fa6 <_printk_hex_ulong+0xb6>
			out(' ', ctx);
    4f9e:	9900      	ldr	r1, [sp, #0]
    4fa0:	2020      	movs	r0, #32
    4fa2:	47c8      	blx	r9
		while (remaining-- > 0) {
    4fa4:	4625      	mov	r5, r4
    4fa6:	1e6c      	subs	r4, r5, #1
    4fa8:	2d00      	cmp	r5, #0
    4faa:	dcf8      	bgt.n	4f9e <_printk_hex_ulong+0xae>
    4fac:	e7f0      	b.n	4f90 <_printk_hex_ulong+0xa0>

00004fae <z_vprintk>:
{
    4fae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fb2:	b087      	sub	sp, #28
    4fb4:	4607      	mov	r7, r0
    4fb6:	460e      	mov	r6, r1
    4fb8:	4614      	mov	r4, r2
    4fba:	9305      	str	r3, [sp, #20]
	char length_mod = 0;
    4fbc:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    4fc0:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
    4fc4:	46c2      	mov	sl, r8
	int might_format = 0; /* 1 if encountered a '%' */
    4fc6:	4645      	mov	r5, r8
	while (*fmt) {
    4fc8:	e002      	b.n	4fd0 <z_vprintk+0x22>
				out((int)*fmt, ctx);
    4fca:	4631      	mov	r1, r6
    4fcc:	47b8      	blx	r7
		++fmt;
    4fce:	3401      	adds	r4, #1
	while (*fmt) {
    4fd0:	7820      	ldrb	r0, [r4, #0]
    4fd2:	2800      	cmp	r0, #0
    4fd4:	f000 8188 	beq.w	52e8 <z_vprintk+0x33a>
		if (!might_format) {
    4fd8:	b945      	cbnz	r5, 4fec <z_vprintk+0x3e>
			if (*fmt != '%') {
    4fda:	2825      	cmp	r0, #37	; 0x25
    4fdc:	d1f5      	bne.n	4fca <z_vprintk+0x1c>
				length_mod = 0;
    4fde:	f04f 0800 	mov.w	r8, #0
				min_width = -1;
    4fe2:	f04f 39ff 	mov.w	r9, #4294967295
				padding = PAD_NONE;
    4fe6:	46c2      	mov	sl, r8
				might_format = 1;
    4fe8:	2501      	movs	r5, #1
    4fea:	e7f0      	b.n	4fce <z_vprintk+0x20>
			switch (*fmt) {
    4fec:	4602      	mov	r2, r0
    4fee:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    4ff2:	2b55      	cmp	r3, #85	; 0x55
    4ff4:	f200 816a 	bhi.w	52cc <z_vprintk+0x31e>
    4ff8:	e8df f013 	tbh	[pc, r3, lsl #1]
    4ffc:	01680163 	.word	0x01680163
    5000:	01680168 	.word	0x01680168
    5004:	01680168 	.word	0x01680168
    5008:	01680168 	.word	0x01680168
    500c:	01680170 	.word	0x01680170
    5010:	00560168 	.word	0x00560168
    5014:	005d005d 	.word	0x005d005d
    5018:	005d005d 	.word	0x005d005d
    501c:	005d005d 	.word	0x005d005d
    5020:	005d005d 	.word	0x005d005d
    5024:	0168005d 	.word	0x0168005d
    5028:	01680168 	.word	0x01680168
    502c:	01680168 	.word	0x01680168
    5030:	01680168 	.word	0x01680168
    5034:	01680168 	.word	0x01680168
    5038:	01680168 	.word	0x01680168
    503c:	01680168 	.word	0x01680168
    5040:	01680168 	.word	0x01680168
    5044:	01680168 	.word	0x01680168
    5048:	01680168 	.word	0x01680168
    504c:	01680168 	.word	0x01680168
    5050:	01680168 	.word	0x01680168
    5054:	01680168 	.word	0x01680168
    5058:	01680168 	.word	0x01680168
    505c:	01680168 	.word	0x01680168
    5060:	010d0168 	.word	0x010d0168
    5064:	01680168 	.word	0x01680168
    5068:	01680168 	.word	0x01680168
    506c:	01680168 	.word	0x01680168
    5070:	01680168 	.word	0x01680168
    5074:	01680168 	.word	0x01680168
    5078:	008b015b 	.word	0x008b015b
    507c:	01680168 	.word	0x01680168
    5080:	00710168 	.word	0x00710168
    5084:	0168008b 	.word	0x0168008b
    5088:	00710168 	.word	0x00710168
    508c:	01680168 	.word	0x01680168
    5090:	01030168 	.word	0x01030168
    5094:	01680168 	.word	0x01680168
    5098:	0168013b 	.word	0x0168013b
    509c:	016800d0 	.word	0x016800d0
    50a0:	010d0168 	.word	0x010d0168
    50a4:	00710168 	.word	0x00710168
				if (min_width < 0 && padding == PAD_NONE) {
    50a8:	f1b9 0f00 	cmp.w	r9, #0
    50ac:	da03      	bge.n	50b6 <z_vprintk+0x108>
    50ae:	f1ba 0f00 	cmp.w	sl, #0
    50b2:	f000 8116 	beq.w	52e2 <z_vprintk+0x334>
				if (min_width < 0) {
    50b6:	f1b9 0f00 	cmp.w	r9, #0
    50ba:	db0d      	blt.n	50d8 <z_vprintk+0x12a>
					min_width = 10 * min_width + *fmt - '0';
    50bc:	eb09 0389 	add.w	r3, r9, r9, lsl #2
    50c0:	ea4f 0943 	mov.w	r9, r3, lsl #1
    50c4:	4491      	add	r9, r2
    50c6:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
				if (padding == PAD_NONE) {
    50ca:	f1ba 0f00 	cmp.w	sl, #0
    50ce:	f47f af7e 	bne.w	4fce <z_vprintk+0x20>
					padding = PAD_SPACE_BEFORE;
    50d2:	f04f 0a02 	mov.w	sl, #2
				goto still_might_format;
    50d6:	e77a      	b.n	4fce <z_vprintk+0x20>
					min_width = *fmt - '0';
    50d8:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
    50dc:	e7f5      	b.n	50ca <z_vprintk+0x11c>
				if (*fmt == 'h' && length_mod == 'h') {
    50de:	2868      	cmp	r0, #104	; 0x68
    50e0:	d00c      	beq.n	50fc <z_vprintk+0x14e>
				} else if (*fmt == 'l' && length_mod == 'l') {
    50e2:	286c      	cmp	r0, #108	; 0x6c
    50e4:	d010      	beq.n	5108 <z_vprintk+0x15a>
				} else if (length_mod == 0) {
    50e6:	f1b8 0f00 	cmp.w	r8, #0
    50ea:	d00b      	beq.n	5104 <z_vprintk+0x156>
					out((int)'%', ctx);
    50ec:	4631      	mov	r1, r6
    50ee:	2025      	movs	r0, #37	; 0x25
    50f0:	47b8      	blx	r7
					out((int)*fmt, ctx);
    50f2:	4631      	mov	r1, r6
    50f4:	7820      	ldrb	r0, [r4, #0]
    50f6:	47b8      	blx	r7
			might_format = 0;
    50f8:	2500      	movs	r5, #0
					break;
    50fa:	e768      	b.n	4fce <z_vprintk+0x20>
				if (*fmt == 'h' && length_mod == 'h') {
    50fc:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    5100:	d1ef      	bne.n	50e2 <z_vprintk+0x134>
					length_mod = 'H';
    5102:	2048      	movs	r0, #72	; 0x48
				goto still_might_format;
    5104:	4680      	mov	r8, r0
    5106:	e762      	b.n	4fce <z_vprintk+0x20>
				} else if (*fmt == 'l' && length_mod == 'l') {
    5108:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    510c:	d1eb      	bne.n	50e6 <z_vprintk+0x138>
					length_mod = 'L';
    510e:	204c      	movs	r0, #76	; 0x4c
    5110:	e7f8      	b.n	5104 <z_vprintk+0x156>
				if (length_mod == 'z') {
    5112:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    5116:	d00a      	beq.n	512e <z_vprintk+0x180>
				} else if (length_mod == 'l') {
    5118:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    511c:	d017      	beq.n	514e <z_vprintk+0x1a0>
				} else if (length_mod == 'L') {
    511e:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    5122:	d019      	beq.n	5158 <z_vprintk+0x1aa>
					d = va_arg(ap, int);
    5124:	9b05      	ldr	r3, [sp, #20]
    5126:	1d1a      	adds	r2, r3, #4
    5128:	9205      	str	r2, [sp, #20]
    512a:	681d      	ldr	r5, [r3, #0]
    512c:	e003      	b.n	5136 <z_vprintk+0x188>
					d = va_arg(ap, ssize_t);
    512e:	9b05      	ldr	r3, [sp, #20]
    5130:	1d1a      	adds	r2, r3, #4
    5132:	9205      	str	r2, [sp, #20]
    5134:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    5136:	2d00      	cmp	r5, #0
    5138:	db29      	blt.n	518e <z_vprintk+0x1e0>
				_printk_dec_ulong(out, ctx, d, padding,
    513a:	f8cd 9000 	str.w	r9, [sp]
    513e:	4653      	mov	r3, sl
    5140:	462a      	mov	r2, r5
    5142:	4631      	mov	r1, r6
    5144:	4638      	mov	r0, r7
    5146:	f7fc fa99 	bl	167c <_printk_dec_ulong>
			might_format = 0;
    514a:	2500      	movs	r5, #0
				break;
    514c:	e73f      	b.n	4fce <z_vprintk+0x20>
					d = va_arg(ap, long);
    514e:	9b05      	ldr	r3, [sp, #20]
    5150:	1d1a      	adds	r2, r3, #4
    5152:	9205      	str	r2, [sp, #20]
    5154:	681d      	ldr	r5, [r3, #0]
    5156:	e7ee      	b.n	5136 <z_vprintk+0x188>
					long long lld = va_arg(ap, long long);
    5158:	9b05      	ldr	r3, [sp, #20]
    515a:	3307      	adds	r3, #7
    515c:	f023 0307 	bic.w	r3, r3, #7
    5160:	f103 0208 	add.w	r2, r3, #8
    5164:	9205      	str	r2, [sp, #20]
    5166:	681d      	ldr	r5, [r3, #0]
    5168:	685b      	ldr	r3, [r3, #4]
					if (lld > __LONG_MAX__ ||
    516a:	f115 4200 	adds.w	r2, r5, #2147483648	; 0x80000000
    516e:	9202      	str	r2, [sp, #8]
    5170:	f143 0300 	adc.w	r3, r3, #0
    5174:	9303      	str	r3, [sp, #12]
    5176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    517a:	2b01      	cmp	r3, #1
    517c:	bf08      	it	eq
    517e:	2a00      	cmpeq	r2, #0
    5180:	d3d9      	bcc.n	5136 <z_vprintk+0x188>
						print_err(out, ctx);
    5182:	4631      	mov	r1, r6
    5184:	4638      	mov	r0, r7
    5186:	f7ff fea7 	bl	4ed8 <print_err>
			might_format = 0;
    518a:	2500      	movs	r5, #0
						break;
    518c:	e71f      	b.n	4fce <z_vprintk+0x20>
					out((int)'-', ctx);
    518e:	4631      	mov	r1, r6
    5190:	202d      	movs	r0, #45	; 0x2d
    5192:	47b8      	blx	r7
					d = -d;
    5194:	426d      	negs	r5, r5
					min_width--;
    5196:	f109 39ff 	add.w	r9, r9, #4294967295
    519a:	e7ce      	b.n	513a <z_vprintk+0x18c>
				if (length_mod == 'z') {
    519c:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    51a0:	d00a      	beq.n	51b8 <z_vprintk+0x20a>
				} else if (length_mod == 'l') {
    51a2:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    51a6:	d014      	beq.n	51d2 <z_vprintk+0x224>
				} else if (length_mod == 'L') {
    51a8:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    51ac:	d016      	beq.n	51dc <z_vprintk+0x22e>
					u = va_arg(ap, unsigned int);
    51ae:	9b05      	ldr	r3, [sp, #20]
    51b0:	1d1a      	adds	r2, r3, #4
    51b2:	9205      	str	r2, [sp, #20]
    51b4:	681a      	ldr	r2, [r3, #0]
    51b6:	e003      	b.n	51c0 <z_vprintk+0x212>
					u = va_arg(ap, size_t);
    51b8:	9b05      	ldr	r3, [sp, #20]
    51ba:	1d1a      	adds	r2, r3, #4
    51bc:	9205      	str	r2, [sp, #20]
    51be:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    51c0:	f8cd 9000 	str.w	r9, [sp]
    51c4:	4653      	mov	r3, sl
    51c6:	4631      	mov	r1, r6
    51c8:	4638      	mov	r0, r7
    51ca:	f7fc fa57 	bl	167c <_printk_dec_ulong>
			might_format = 0;
    51ce:	2500      	movs	r5, #0
				break;
    51d0:	e6fd      	b.n	4fce <z_vprintk+0x20>
					u = va_arg(ap, unsigned long);
    51d2:	9b05      	ldr	r3, [sp, #20]
    51d4:	1d1a      	adds	r2, r3, #4
    51d6:	9205      	str	r2, [sp, #20]
    51d8:	681a      	ldr	r2, [r3, #0]
    51da:	e7f1      	b.n	51c0 <z_vprintk+0x212>
					unsigned long long llu =
    51dc:	9b05      	ldr	r3, [sp, #20]
    51de:	3307      	adds	r3, #7
    51e0:	f023 0307 	bic.w	r3, r3, #7
    51e4:	f103 0208 	add.w	r2, r3, #8
    51e8:	9205      	str	r2, [sp, #20]
    51ea:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
    51ee:	2b01      	cmp	r3, #1
    51f0:	bf08      	it	eq
    51f2:	2a00      	cmpeq	r2, #0
    51f4:	d3e4      	bcc.n	51c0 <z_vprintk+0x212>
						print_err(out, ctx);
    51f6:	4631      	mov	r1, r6
    51f8:	4638      	mov	r0, r7
    51fa:	f7ff fe6d 	bl	4ed8 <print_err>
			might_format = 0;
    51fe:	2500      	movs	r5, #0
						break;
    5200:	e6e5      	b.n	4fce <z_vprintk+0x20>
				out('0', ctx);
    5202:	4631      	mov	r1, r6
    5204:	2030      	movs	r0, #48	; 0x30
    5206:	47b8      	blx	r7
				out('x', ctx);
    5208:	4631      	mov	r1, r6
    520a:	2078      	movs	r0, #120	; 0x78
    520c:	47b8      	blx	r7
					min_width = 8;
    520e:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    5212:	f04f 0a01 	mov.w	sl, #1
				if (*fmt == 'p') {
    5216:	7823      	ldrb	r3, [r4, #0]
    5218:	2b70      	cmp	r3, #112	; 0x70
    521a:	d00b      	beq.n	5234 <z_vprintk+0x286>
				} else if (length_mod == 'l') {
    521c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    5220:	d017      	beq.n	5252 <z_vprintk+0x2a4>
				} else if (length_mod == 'L') {
    5222:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    5226:	d01a      	beq.n	525e <z_vprintk+0x2b0>
					x = va_arg(ap, unsigned int);
    5228:	9b05      	ldr	r3, [sp, #20]
    522a:	1d1a      	adds	r2, r3, #4
    522c:	9205      	str	r2, [sp, #20]
    522e:	681a      	ldr	r2, [r3, #0]
    5230:	2300      	movs	r3, #0
    5232:	e004      	b.n	523e <z_vprintk+0x290>
					x = (uintptr_t)va_arg(ap, void *);
    5234:	9b05      	ldr	r3, [sp, #20]
    5236:	1d1a      	adds	r2, r3, #4
    5238:	9205      	str	r2, [sp, #20]
    523a:	681a      	ldr	r2, [r3, #0]
    523c:	2300      	movs	r3, #0
				_printk_hex_ulong(out, ctx, x, padding,
    523e:	f8cd 9004 	str.w	r9, [sp, #4]
    5242:	f8cd a000 	str.w	sl, [sp]
    5246:	4631      	mov	r1, r6
    5248:	4638      	mov	r0, r7
    524a:	f7ff fe51 	bl	4ef0 <_printk_hex_ulong>
			might_format = 0;
    524e:	2500      	movs	r5, #0
				break;
    5250:	e6bd      	b.n	4fce <z_vprintk+0x20>
					x = va_arg(ap, unsigned long);
    5252:	9b05      	ldr	r3, [sp, #20]
    5254:	1d1a      	adds	r2, r3, #4
    5256:	9205      	str	r2, [sp, #20]
    5258:	681a      	ldr	r2, [r3, #0]
    525a:	2300      	movs	r3, #0
    525c:	e7ef      	b.n	523e <z_vprintk+0x290>
					x = va_arg(ap, unsigned long long);
    525e:	9b05      	ldr	r3, [sp, #20]
    5260:	3307      	adds	r3, #7
    5262:	f023 0307 	bic.w	r3, r3, #7
    5266:	f103 0208 	add.w	r2, r3, #8
    526a:	9205      	str	r2, [sp, #20]
    526c:	681a      	ldr	r2, [r3, #0]
    526e:	685b      	ldr	r3, [r3, #4]
    5270:	e7e5      	b.n	523e <z_vprintk+0x290>
				char *s = va_arg(ap, char *);
    5272:	9b05      	ldr	r3, [sp, #20]
    5274:	1d1a      	adds	r2, r3, #4
    5276:	9205      	str	r2, [sp, #20]
    5278:	f8d3 b000 	ldr.w	fp, [r3]
    527c:	465d      	mov	r5, fp
				while (*s) {
    527e:	e002      	b.n	5286 <z_vprintk+0x2d8>
					out((int)(*s++), ctx);
    5280:	3501      	adds	r5, #1
    5282:	4631      	mov	r1, r6
    5284:	47b8      	blx	r7
				while (*s) {
    5286:	7828      	ldrb	r0, [r5, #0]
    5288:	2800      	cmp	r0, #0
    528a:	d1f9      	bne.n	5280 <z_vprintk+0x2d2>
				if (padding == PAD_SPACE_AFTER) {
    528c:	f1ba 0f03 	cmp.w	sl, #3
    5290:	d001      	beq.n	5296 <z_vprintk+0x2e8>
			might_format = 0;
    5292:	2500      	movs	r5, #0
    5294:	e69b      	b.n	4fce <z_vprintk+0x20>
					int remaining = min_width - (s - start);
    5296:	eba5 030b 	sub.w	r3, r5, fp
    529a:	eba9 0303 	sub.w	r3, r9, r3
					while (remaining-- > 0) {
    529e:	e003      	b.n	52a8 <z_vprintk+0x2fa>
						out(' ', ctx);
    52a0:	4631      	mov	r1, r6
    52a2:	2020      	movs	r0, #32
    52a4:	47b8      	blx	r7
					while (remaining-- > 0) {
    52a6:	462b      	mov	r3, r5
    52a8:	1e5d      	subs	r5, r3, #1
    52aa:	2b00      	cmp	r3, #0
    52ac:	dcf8      	bgt.n	52a0 <z_vprintk+0x2f2>
			might_format = 0;
    52ae:	2500      	movs	r5, #0
    52b0:	e68d      	b.n	4fce <z_vprintk+0x20>
				int c = va_arg(ap, int);
    52b2:	9b05      	ldr	r3, [sp, #20]
    52b4:	1d1a      	adds	r2, r3, #4
    52b6:	9205      	str	r2, [sp, #20]
				out(c, ctx);
    52b8:	4631      	mov	r1, r6
    52ba:	6818      	ldr	r0, [r3, #0]
    52bc:	47b8      	blx	r7
			might_format = 0;
    52be:	2500      	movs	r5, #0
				break;
    52c0:	e685      	b.n	4fce <z_vprintk+0x20>
				out((int)'%', ctx);
    52c2:	4631      	mov	r1, r6
    52c4:	2025      	movs	r0, #37	; 0x25
    52c6:	47b8      	blx	r7
			might_format = 0;
    52c8:	2500      	movs	r5, #0
				break;
    52ca:	e680      	b.n	4fce <z_vprintk+0x20>
				out((int)'%', ctx);
    52cc:	4631      	mov	r1, r6
    52ce:	2025      	movs	r0, #37	; 0x25
    52d0:	47b8      	blx	r7
				out((int)*fmt, ctx);
    52d2:	4631      	mov	r1, r6
    52d4:	7820      	ldrb	r0, [r4, #0]
    52d6:	47b8      	blx	r7
			might_format = 0;
    52d8:	2500      	movs	r5, #0
				break;
    52da:	e678      	b.n	4fce <z_vprintk+0x20>
				padding = PAD_SPACE_AFTER;
    52dc:	f04f 0a03 	mov.w	sl, #3
    52e0:	e675      	b.n	4fce <z_vprintk+0x20>
					padding = PAD_ZERO_BEFORE;
    52e2:	f04f 0a01 	mov.w	sl, #1
    52e6:	e672      	b.n	4fce <z_vprintk+0x20>
}
    52e8:	b007      	add	sp, #28
    52ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000052ee <printk>:
{
    52ee:	b40f      	push	{r0, r1, r2, r3}
    52f0:	b500      	push	{lr}
    52f2:	b083      	sub	sp, #12
    52f4:	a904      	add	r1, sp, #16
    52f6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    52fa:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    52fc:	f7fc fa1c 	bl	1738 <vprintk>
}
    5300:	b003      	add	sp, #12
    5302:	f85d eb04 	ldr.w	lr, [sp], #4
    5306:	b004      	add	sp, #16
    5308:	4770      	bx	lr

0000530a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    530a:	4770      	bx	lr

0000530c <z_platform_init>:
{
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
    530c:	b508      	push	{r3, lr}
	SystemInit();
    530e:	f7fe fd15 	bl	3d3c <SystemInit>
}
    5312:	bd08      	pop	{r3, pc}

00005314 <dummy_timestamp>:
}
    5314:	2000      	movs	r0, #0
    5316:	4770      	bx	lr

00005318 <k_cycle_get_32_wrapper>:
{
    5318:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    531a:	f7fc fe1b 	bl	1f54 <z_timer_cycle_get_32>
}
    531e:	bd08      	pop	{r3, pc}

00005320 <log_string_sync>:
{
    5320:	b40e      	push	{r1, r2, r3}
    5322:	b500      	push	{lr}
    5324:	b082      	sub	sp, #8
    5326:	aa03      	add	r2, sp, #12
    5328:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
    532c:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap);
    532e:	f7fc fa27 	bl	1780 <log_generic>
}
    5332:	b002      	add	sp, #8
    5334:	f85d eb04 	ldr.w	lr, [sp], #4
    5338:	b003      	add	sp, #12
    533a:	4770      	bx	lr

0000533c <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    533c:	b508      	push	{r3, lr}
				K_THREAD_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    533e:	f7fc fa8b 	bl	1858 <log_init>
	}

	return 0;
}
    5342:	2000      	movs	r0, #0
    5344:	bd08      	pop	{r3, pc}

00005346 <out_func>:
{
    5346:	b500      	push	{lr}
    5348:	b083      	sub	sp, #12
    534a:	9001      	str	r0, [sp, #4]
		out_ctx->func((u8_t *)&c, 1, out_ctx->control_block->ctx);
    534c:	680b      	ldr	r3, [r1, #0]
    534e:	684a      	ldr	r2, [r1, #4]
    5350:	6852      	ldr	r2, [r2, #4]
    5352:	2101      	movs	r1, #1
    5354:	a801      	add	r0, sp, #4
    5356:	4798      	blx	r3
}
    5358:	2000      	movs	r0, #0
    535a:	b003      	add	sp, #12
    535c:	f85d fb04 	ldr.w	pc, [sp], #4

00005360 <buffer_write>:
{
    5360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5362:	4607      	mov	r7, r0
    5364:	460d      	mov	r5, r1
    5366:	4614      	mov	r4, r2
    5368:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    536a:	4632      	mov	r2, r6
    536c:	4621      	mov	r1, r4
    536e:	4628      	mov	r0, r5
    5370:	47b8      	blx	r7
		buf += processed;
    5372:	4405      	add	r5, r0
	} while (len != 0);
    5374:	1a24      	subs	r4, r4, r0
    5376:	d1f8      	bne.n	536a <buffer_write+0xa>
}
    5378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000537a <ends_with_newline>:
	char c = '\0';
    537a:	2200      	movs	r2, #0
	while (*fmt != '\0') {
    537c:	7803      	ldrb	r3, [r0, #0]
    537e:	b113      	cbz	r3, 5386 <ends_with_newline+0xc>
		fmt++;
    5380:	3001      	adds	r0, #1
		c = *fmt;
    5382:	461a      	mov	r2, r3
    5384:	e7fa      	b.n	537c <ends_with_newline+0x2>
}
    5386:	2a0a      	cmp	r2, #10
    5388:	bf14      	ite	ne
    538a:	2000      	movne	r0, #0
    538c:	2001      	moveq	r0, #1
    538e:	4770      	bx	lr

00005390 <color_prefix>:
{
    5390:	b508      	push	{r3, lr}
	color_print(log_output, color, true, level);
    5392:	4613      	mov	r3, r2
    5394:	2201      	movs	r2, #1
    5396:	f7fc fb0f 	bl	19b8 <color_print>
}
    539a:	bd08      	pop	{r3, pc}

0000539c <color_postfix>:
{
    539c:	b508      	push	{r3, lr}
	color_print(log_output, color, false, level);
    539e:	4613      	mov	r3, r2
    53a0:	2200      	movs	r2, #0
    53a2:	f7fc fb09 	bl	19b8 <color_print>
}
    53a6:	bd08      	pop	{r3, pc}

000053a8 <postfix_print>:
{
    53a8:	b538      	push	{r3, r4, r5, lr}
    53aa:	4605      	mov	r5, r0
    53ac:	460c      	mov	r4, r1
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
    53ae:	f001 0101 	and.w	r1, r1, #1
    53b2:	f7ff fff3 	bl	539c <color_postfix>
	newline_print(log_output, flags);
    53b6:	4621      	mov	r1, r4
    53b8:	4628      	mov	r0, r5
    53ba:	f7fc fb13 	bl	19e4 <newline_print>
}
    53be:	bd38      	pop	{r3, r4, r5, pc}

000053c0 <prefix_print>:
{
    53c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    53c4:	b083      	sub	sp, #12
    53c6:	4604      	mov	r4, r0
    53c8:	4690      	mov	r8, r2
    53ca:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    53ce:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    53d2:	f3c1 07c0 	ubfx	r7, r1, #3, #1
	if (stamp) {
    53d6:	f011 0602 	ands.w	r6, r1, #2
    53da:	d113      	bne.n	5404 <prefix_print+0x44>
		color_prefix(log_output, colors_on, level);
    53dc:	462a      	mov	r2, r5
    53de:	4649      	mov	r1, r9
    53e0:	4620      	mov	r0, r4
    53e2:	f7ff ffd5 	bl	5390 <color_prefix>
		length += ids_print(log_output, level_on, func_on,
    53e6:	9501      	str	r5, [sp, #4]
    53e8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    53ec:	9300      	str	r3, [sp, #0]
    53ee:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    53f2:	4642      	mov	r2, r8
    53f4:	4639      	mov	r1, r7
    53f6:	4620      	mov	r0, r4
    53f8:	f7fc fb66 	bl	1ac8 <ids_print>
}
    53fc:	4430      	add	r0, r6
    53fe:	b003      	add	sp, #12
    5400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(log_output, flags, timestamp);
    5404:	461a      	mov	r2, r3
    5406:	f7fc fa91 	bl	192c <timestamp_print>
    540a:	4606      	mov	r6, r0
    540c:	e7e6      	b.n	53dc <prefix_print+0x1c>

0000540e <log_output_flush>:
{
    540e:	b510      	push	{r4, lr}
    5410:	4604      	mov	r4, r0
		     log_output->control_block->offset,
    5412:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
    5414:	6853      	ldr	r3, [r2, #4]
    5416:	6812      	ldr	r2, [r2, #0]
    5418:	6881      	ldr	r1, [r0, #8]
    541a:	6800      	ldr	r0, [r0, #0]
    541c:	f7ff ffa0 	bl	5360 <buffer_write>
	log_output->control_block->offset = 0;
    5420:	6863      	ldr	r3, [r4, #4]
    5422:	2200      	movs	r2, #0
    5424:	601a      	str	r2, [r3, #0]
}
    5426:	bd10      	pop	{r4, pc}

00005428 <char_out>:
{
    5428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    542a:	4607      	mov	r7, r0
    542c:	460e      	mov	r6, r1
    542e:	4615      	mov	r5, r2
	for (size_t i = 0; i < length; i++) {
    5430:	2400      	movs	r4, #0
    5432:	42b4      	cmp	r4, r6
    5434:	d206      	bcs.n	5444 <char_out+0x1c>
		uart_poll_out(dev, data[i]);
    5436:	5d39      	ldrb	r1, [r7, r4]
	const struct uart_driver_api *api =
    5438:	686b      	ldr	r3, [r5, #4]
	api->poll_out(dev, out_char);
    543a:	685b      	ldr	r3, [r3, #4]
    543c:	4628      	mov	r0, r5
    543e:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    5440:	3401      	adds	r4, #1
    5442:	e7f6      	b.n	5432 <char_out+0xa>
}
    5444:	4630      	mov	r0, r6
    5446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005448 <should_bail>:
	if (info->start_offset < data->area_off) {
    5448:	6800      	ldr	r0, [r0, #0]
    544a:	684b      	ldr	r3, [r1, #4]
    544c:	4298      	cmp	r0, r3
    544e:	d30b      	bcc.n	5468 <should_bail+0x20>
{
    5450:	b410      	push	{r4}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    5452:	688c      	ldr	r4, [r1, #8]
    5454:	4423      	add	r3, r4
    5456:	4298      	cmp	r0, r3
    5458:	d209      	bcs.n	546e <should_bail+0x26>
	} else if (data->ret_idx >= data->ret_len) {
    545a:	6908      	ldr	r0, [r1, #16]
    545c:	694b      	ldr	r3, [r1, #20]
    545e:	4298      	cmp	r0, r3
    5460:	d209      	bcs.n	5476 <should_bail+0x2e>
	return false;
    5462:	2000      	movs	r0, #0
}
    5464:	bc10      	pop	{r4}
    5466:	4770      	bx	lr
		*bail_value = true;
    5468:	2001      	movs	r0, #1
    546a:	7010      	strb	r0, [r2, #0]
}
    546c:	4770      	bx	lr
		*bail_value = false;
    546e:	2300      	movs	r3, #0
    5470:	7013      	strb	r3, [r2, #0]
		return true;
    5472:	2001      	movs	r0, #1
    5474:	e7f6      	b.n	5464 <should_bail+0x1c>
		data->status = -ENOMEM;
    5476:	f06f 030b 	mvn.w	r3, #11
    547a:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    547c:	2300      	movs	r3, #0
    547e:	7013      	strb	r3, [r2, #0]
		return true;
    5480:	2001      	movs	r0, #1
    5482:	e7ef      	b.n	5464 <should_bail+0x1c>

00005484 <get_sectors_cb>:
{
    5484:	b570      	push	{r4, r5, r6, lr}
    5486:	b082      	sub	sp, #8
    5488:	4606      	mov	r6, r0
    548a:	460c      	mov	r4, r1
	struct flash_sector *ret = data->ret;
    548c:	68cd      	ldr	r5, [r1, #12]
	if (should_bail(info, data, &bail)) {
    548e:	f10d 0207 	add.w	r2, sp, #7
    5492:	f7ff ffd9 	bl	5448 <should_bail>
    5496:	b980      	cbnz	r0, 54ba <get_sectors_cb+0x36>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    5498:	6833      	ldr	r3, [r6, #0]
    549a:	6861      	ldr	r1, [r4, #4]
    549c:	6922      	ldr	r2, [r4, #16]
    549e:	1a5b      	subs	r3, r3, r1
    54a0:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    54a4:	6923      	ldr	r3, [r4, #16]
    54a6:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    54aa:	6873      	ldr	r3, [r6, #4]
    54ac:	606b      	str	r3, [r5, #4]
	data->ret_idx++;
    54ae:	6923      	ldr	r3, [r4, #16]
    54b0:	3301      	adds	r3, #1
    54b2:	6123      	str	r3, [r4, #16]
	return true;
    54b4:	2001      	movs	r0, #1
}
    54b6:	b002      	add	sp, #8
    54b8:	bd70      	pop	{r4, r5, r6, pc}
		return bail;
    54ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
    54be:	e7fa      	b.n	54b6 <get_sectors_cb+0x32>

000054c0 <flash_area_layout>:
{
    54c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54c2:	460d      	mov	r5, r1
    54c4:	4616      	mov	r6, r2
    54c6:	461f      	mov	r7, r3
    54c8:	9c06      	ldr	r4, [sp, #24]
	cb_data->area_idx = idx;
    54ca:	6020      	str	r0, [r4, #0]
	fa = get_flash_area_from_id(idx);
    54cc:	f7fc fbe0 	bl	1c90 <get_flash_area_from_id>
	if (fa == NULL) {
    54d0:	b1b8      	cbz	r0, 5502 <flash_area_layout+0x42>
	cb_data->area_off = fa->fa_off;
    54d2:	6842      	ldr	r2, [r0, #4]
    54d4:	6062      	str	r2, [r4, #4]
	cb_data->area_len = fa->fa_size;
    54d6:	6882      	ldr	r2, [r0, #8]
    54d8:	60a2      	str	r2, [r4, #8]
	cb_data->ret = ret;
    54da:	60e6      	str	r6, [r4, #12]
	cb_data->ret_idx = 0U;
    54dc:	2200      	movs	r2, #0
    54de:	6122      	str	r2, [r4, #16]
	cb_data->ret_len = *cnt;
    54e0:	6829      	ldr	r1, [r5, #0]
    54e2:	6161      	str	r1, [r4, #20]
	cb_data->status = 0;
    54e4:	61a2      	str	r2, [r4, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
    54e6:	68c0      	ldr	r0, [r0, #12]
    54e8:	f7fe fd26 	bl	3f38 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
    54ec:	b160      	cbz	r0, 5508 <flash_area_layout+0x48>
	flash_page_foreach(flash_dev, cb, cb_data);
    54ee:	4622      	mov	r2, r4
    54f0:	4639      	mov	r1, r7
    54f2:	f000 fc1c 	bl	5d2e <flash_page_foreach>
	if (cb_data->status == 0) {
    54f6:	69a3      	ldr	r3, [r4, #24]
    54f8:	b90b      	cbnz	r3, 54fe <flash_area_layout+0x3e>
		*cnt = cb_data->ret_idx;
    54fa:	6923      	ldr	r3, [r4, #16]
    54fc:	602b      	str	r3, [r5, #0]
	return cb_data->status;
    54fe:	69a0      	ldr	r0, [r4, #24]
}
    5500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    5502:	f06f 0015 	mvn.w	r0, #21
    5506:	e7fb      	b.n	5500 <flash_area_layout+0x40>
		return -ENODEV;
    5508:	f06f 0012 	mvn.w	r0, #18
    550c:	e7f8      	b.n	5500 <flash_area_layout+0x40>

0000550e <flash_area_close>:
}
    550e:	4770      	bx	lr

00005510 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    5510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5512:	6884      	ldr	r4, [r0, #8]
    5514:	428c      	cmp	r4, r1
    5516:	d304      	bcc.n	5522 <flash_area_read+0x12>
    5518:	185d      	adds	r5, r3, r1
    551a:	42ac      	cmp	r4, r5
    551c:	d212      	bcs.n	5544 <flash_area_read+0x34>
    551e:	2400      	movs	r4, #0
    5520:	e000      	b.n	5524 <flash_area_read+0x14>
    5522:	2400      	movs	r4, #0
	struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    5524:	b184      	cbz	r4, 5548 <flash_area_read+0x38>
    5526:	461e      	mov	r6, r3
    5528:	4617      	mov	r7, r2
    552a:	460d      	mov	r5, r1
    552c:	4604      	mov	r4, r0
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    552e:	68c0      	ldr	r0, [r0, #12]
    5530:	f7fe fd02 	bl	3f38 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    5534:	6861      	ldr	r1, [r4, #4]
    5536:	4429      	add	r1, r5
			 size_t len);

static inline int z_impl_flash_read(struct device *dev, off_t offset, void *data,
			     size_t len)
{
	const struct flash_driver_api *api =
    5538:	6843      	ldr	r3, [r0, #4]
		(const struct flash_driver_api *)dev->driver_api;

	return api->read(dev, offset, data, len);
    553a:	681c      	ldr	r4, [r3, #0]
    553c:	4633      	mov	r3, r6
    553e:	463a      	mov	r2, r7
    5540:	47a0      	blx	r4
}
    5542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5544:	2401      	movs	r4, #1
    5546:	e7ed      	b.n	5524 <flash_area_read+0x14>
		return -EINVAL;
    5548:	f06f 0015 	mvn.w	r0, #21
    554c:	e7f9      	b.n	5542 <flash_area_read+0x32>

0000554e <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    554e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5552:	6884      	ldr	r4, [r0, #8]
    5554:	428c      	cmp	r4, r1
    5556:	d304      	bcc.n	5562 <flash_area_write+0x14>
    5558:	185d      	adds	r5, r3, r1
    555a:	42ac      	cmp	r4, r5
    555c:	d222      	bcs.n	55a4 <flash_area_write+0x56>
    555e:	2400      	movs	r4, #0
    5560:	e000      	b.n	5564 <flash_area_write+0x16>
    5562:	2400      	movs	r4, #0
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    5564:	b304      	cbz	r4, 55a8 <flash_area_write+0x5a>
    5566:	461f      	mov	r7, r3
    5568:	4690      	mov	r8, r2
    556a:	460d      	mov	r5, r1
    556c:	4604      	mov	r4, r0
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    556e:	68c0      	ldr	r0, [r0, #12]
    5570:	f7fe fce2 	bl	3f38 <z_impl_device_get_binding>
    5574:	4606      	mov	r6, r0
__syscall int flash_write_protection_set(struct device *dev, bool enable);

static inline int z_impl_flash_write_protection_set(struct device *dev,
						   bool enable)
{
	const struct flash_driver_api *api =
    5576:	6843      	ldr	r3, [r0, #4]
		(const struct flash_driver_api *)dev->driver_api;

	return api->write_protection(dev, enable);
    5578:	68db      	ldr	r3, [r3, #12]
    557a:	2100      	movs	r1, #0
    557c:	4798      	blx	r3

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    557e:	4681      	mov	r9, r0
    5580:	b968      	cbnz	r0, 559e <flash_area_write+0x50>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    5582:	6861      	ldr	r1, [r4, #4]
    5584:	4429      	add	r1, r5
	const struct flash_driver_api *api =
    5586:	6873      	ldr	r3, [r6, #4]
	return api->write(dev, offset, data, len);
    5588:	685c      	ldr	r4, [r3, #4]
    558a:	463b      	mov	r3, r7
    558c:	4642      	mov	r2, r8
    558e:	4630      	mov	r0, r6
    5590:	47a0      	blx	r4
    5592:	4681      	mov	r9, r0
	const struct flash_driver_api *api =
    5594:	6873      	ldr	r3, [r6, #4]
	return api->write_protection(dev, enable);
    5596:	68db      	ldr	r3, [r3, #12]
    5598:	2101      	movs	r1, #1
    559a:	4630      	mov	r0, r6
    559c:	4798      	blx	r3

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    559e:	4648      	mov	r0, r9
    55a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    55a4:	2401      	movs	r4, #1
    55a6:	e7dd      	b.n	5564 <flash_area_write+0x16>
		return -EINVAL;
    55a8:	f06f 0915 	mvn.w	r9, #21
    55ac:	e7f7      	b.n	559e <flash_area_write+0x50>

000055ae <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    55ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    55b2:	6883      	ldr	r3, [r0, #8]
    55b4:	428b      	cmp	r3, r1
    55b6:	d304      	bcc.n	55c2 <flash_area_erase+0x14>
    55b8:	1854      	adds	r4, r2, r1
    55ba:	42a3      	cmp	r3, r4
    55bc:	d220      	bcs.n	5600 <flash_area_erase+0x52>
    55be:	2300      	movs	r3, #0
    55c0:	e000      	b.n	55c4 <flash_area_erase+0x16>
    55c2:	2300      	movs	r3, #0
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    55c4:	b1f3      	cbz	r3, 5604 <flash_area_erase+0x56>
    55c6:	4617      	mov	r7, r2
    55c8:	460e      	mov	r6, r1
    55ca:	4604      	mov	r4, r0
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    55cc:	68c0      	ldr	r0, [r0, #12]
    55ce:	f7fe fcb3 	bl	3f38 <z_impl_device_get_binding>
    55d2:	4605      	mov	r5, r0
	const struct flash_driver_api *api =
    55d4:	6843      	ldr	r3, [r0, #4]
	return api->write_protection(dev, enable);
    55d6:	68db      	ldr	r3, [r3, #12]
    55d8:	2100      	movs	r1, #0
    55da:	4798      	blx	r3

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    55dc:	4680      	mov	r8, r0
    55de:	b960      	cbnz	r0, 55fa <flash_area_erase+0x4c>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    55e0:	6861      	ldr	r1, [r4, #4]
    55e2:	4431      	add	r1, r6
	const struct flash_driver_api *api =
    55e4:	686b      	ldr	r3, [r5, #4]
	return api->erase(dev, offset, size);
    55e6:	689b      	ldr	r3, [r3, #8]
    55e8:	463a      	mov	r2, r7
    55ea:	4628      	mov	r0, r5
    55ec:	4798      	blx	r3
    55ee:	4680      	mov	r8, r0
	const struct flash_driver_api *api =
    55f0:	686b      	ldr	r3, [r5, #4]
	return api->write_protection(dev, enable);
    55f2:	68db      	ldr	r3, [r3, #12]
    55f4:	2101      	movs	r1, #1
    55f6:	4628      	mov	r0, r5
    55f8:	4798      	blx	r3

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    55fa:	4640      	mov	r0, r8
    55fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5600:	2301      	movs	r3, #1
    5602:	e7df      	b.n	55c4 <flash_area_erase+0x16>
		return -EINVAL;
    5604:	f06f 0815 	mvn.w	r8, #21
    5608:	e7f7      	b.n	55fa <flash_area_erase+0x4c>

0000560a <flash_area_align>:

u8_t flash_area_align(const struct flash_area *fa)
{
    560a:	b508      	push	{r3, lr}
	struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    560c:	68c0      	ldr	r0, [r0, #12]
    560e:	f7fe fc93 	bl	3f38 <z_impl_device_get_binding>
 */
__syscall size_t flash_get_write_block_size(struct device *dev);

static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api =
    5612:	6843      	ldr	r3, [r0, #4]

	return flash_get_write_block_size(dev);
}
    5614:	7d18      	ldrb	r0, [r3, #20]
    5616:	bd08      	pop	{r3, pc}

00005618 <clock_event_check_and_clean>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5618:	f100 2250 	add.w	r2, r0, #1342197760	; 0x50005000
    561c:	6813      	ldr	r3, [r2, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    561e:	b13b      	cbz	r3, 5630 <clock_event_check_and_clean+0x18>
    return p_reg->INTENSET & mask;
    5620:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5624:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    5628:	4219      	tst	r1, r3
    562a:	d007      	beq.n	563c <clock_event_check_and_clean+0x24>
    562c:	2301      	movs	r3, #1
    562e:	e000      	b.n	5632 <clock_event_check_and_clean+0x1a>
    5630:	2300      	movs	r3, #0
	if (ret) {
    5632:	4618      	mov	r0, r3
    5634:	b10b      	cbz	r3, 563a <clock_event_check_and_clean+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5636:	2300      	movs	r3, #0
    5638:	6013      	str	r3, [r2, #0]
}
    563a:	4770      	bx	lr
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    563c:	2300      	movs	r3, #0
    563e:	e7f8      	b.n	5632 <clock_event_check_and_clean+0x1a>

00005640 <clock_irqs_disable>:
    p_reg->INTENCLR = mask;
    5640:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5644:	2203      	movs	r2, #3
    5646:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    564a:	4770      	bx	lr

0000564c <clock_irqs_enable>:
    p_reg->INTENSET = mask;
    564c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5650:	2203      	movs	r2, #3
    5652:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5656:	4770      	bx	lr

00005658 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->driver_data;
    5658:	6880      	ldr	r0, [r0, #8]
	return &data->subsys[type];
    565a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    565e:	008b      	lsls	r3, r1, #2
}
    5660:	4418      	add	r0, r3
    5662:	4770      	bx	lr

00005664 <get_sub_config>:
						dev->config->config_info;
    5664:	6803      	ldr	r3, [r0, #0]
	const struct nrf_clock_control_config *config =
    5666:	6898      	ldr	r0, [r3, #8]
}
    5668:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    566c:	4770      	bx	lr

0000566e <get_status>:
{
    566e:	b508      	push	{r3, lr}
	data = get_sub_data(dev, type);
    5670:	b2c9      	uxtb	r1, r1
    5672:	f7ff fff1 	bl	5658 <get_sub_data>
	if (data->started) {
    5676:	7a43      	ldrb	r3, [r0, #9]
    5678:	b91b      	cbnz	r3, 5682 <get_status+0x14>
	if (data->ref > 0) {
    567a:	7a03      	ldrb	r3, [r0, #8]
    567c:	b91b      	cbnz	r3, 5686 <get_status+0x18>
	return CLOCK_CONTROL_STATUS_OFF;
    567e:	2001      	movs	r0, #1
}
    5680:	bd08      	pop	{r3, pc}
		return CLOCK_CONTROL_STATUS_ON;
    5682:	2002      	movs	r0, #2
    5684:	e7fc      	b.n	5680 <get_status+0x12>
		return CLOCK_CONTROL_STATUS_STARTING;
    5686:	2000      	movs	r0, #0
    5688:	e7fa      	b.n	5680 <get_status+0x12>

0000568a <clock_stop>:
{
    568a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    568c:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    568e:	b2cc      	uxtb	r4, r1
	config = get_sub_config(dev, type);
    5690:	4621      	mov	r1, r4
    5692:	f7ff ffe7 	bl	5664 <get_sub_config>
    5696:	4607      	mov	r7, r0
	data = get_sub_data(dev, type);
    5698:	4621      	mov	r1, r4
    569a:	4628      	mov	r0, r5
    569c:	f7ff ffdc 	bl	5658 <get_sub_data>
    56a0:	f04f 0320 	mov.w	r3, #32
    56a4:	f3ef 8611 	mrs	r6, BASEPRI
    56a8:	f383 8811 	msr	BASEPRI, r3
    56ac:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    56b0:	7a03      	ldrb	r3, [r0, #8]
    56b2:	b1c3      	cbz	r3, 56e6 <clock_stop+0x5c>
    56b4:	4604      	mov	r4, r0
	data->ref--;
    56b6:	3b01      	subs	r3, #1
    56b8:	b2db      	uxtb	r3, r3
    56ba:	7203      	strb	r3, [r0, #8]
	if (data->ref == 0) {
    56bc:	b9b3      	cbnz	r3, 56ec <clock_stop+0x62>
	list->head = NULL;
    56be:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    56c0:	6043      	str	r3, [r0, #4]
		do_stop =  (config->stop_handler) ?
    56c2:	687b      	ldr	r3, [r7, #4]
				config->stop_handler(dev) : true;
    56c4:	b113      	cbz	r3, 56cc <clock_stop+0x42>
    56c6:	4628      	mov	r0, r5
    56c8:	4798      	blx	r3
    56ca:	b148      	cbz	r0, 56e0 <clock_stop+0x56>
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    56cc:	7afb      	ldrb	r3, [r7, #11]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    56ce:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    56d2:	2201      	movs	r2, #1
    56d4:	601a      	str	r2, [r3, #0]
			nrf_clock_event_clear(NRF_CLOCK, config->started_evt);
    56d6:	893b      	ldrh	r3, [r7, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    56d8:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    56dc:	2200      	movs	r2, #0
    56de:	601a      	str	r2, [r3, #0]
		data->started = false;
    56e0:	2000      	movs	r0, #0
    56e2:	7260      	strb	r0, [r4, #9]
    56e4:	e003      	b.n	56ee <clock_stop+0x64>
		err = -EALREADY;
    56e6:	f06f 0044 	mvn.w	r0, #68	; 0x44
    56ea:	e000      	b.n	56ee <clock_stop+0x64>
	int err = 0;
    56ec:	2000      	movs	r0, #0
	__asm__ volatile(
    56ee:	f386 8811 	msr	BASEPRI, r6
    56f2:	f3bf 8f6f 	isb	sy
}
    56f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000056f8 <is_in_list>:
	return list->head;
    56f8:	6803      	ldr	r3, [r0, #0]
		if (item == node) {
    56fa:	428b      	cmp	r3, r1
    56fc:	d005      	beq.n	570a <is_in_list+0x12>
Z_GENLIST_PEEK_NEXT(slist, snode)
    56fe:	b133      	cbz	r3, 570e <is_in_list+0x16>
	return node->next;
    5700:	681b      	ldr	r3, [r3, #0]
	} while (item);
    5702:	2b00      	cmp	r3, #0
    5704:	d1f9      	bne.n	56fa <is_in_list+0x2>
	return false;
    5706:	2000      	movs	r0, #0
    5708:	4770      	bx	lr
			return true;
    570a:	2001      	movs	r0, #1
    570c:	4770      	bx	lr
	return false;
    570e:	2000      	movs	r0, #0
}
    5710:	4770      	bx	lr

00005712 <list_append>:
	__asm__ volatile(
    5712:	f04f 0320 	mov.w	r3, #32
    5716:	f3ef 8211 	mrs	r2, BASEPRI
    571a:	f383 8811 	msr	BASEPRI, r3
    571e:	f3bf 8f6f 	isb	sy
	parent->next = child;
    5722:	2300      	movs	r3, #0
    5724:	600b      	str	r3, [r1, #0]
	return list->tail;
    5726:	6843      	ldr	r3, [r0, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5728:	b133      	cbz	r3, 5738 <list_append+0x26>
	parent->next = child;
    572a:	6019      	str	r1, [r3, #0]
	list->tail = node;
    572c:	6041      	str	r1, [r0, #4]
	__asm__ volatile(
    572e:	f382 8811 	msr	BASEPRI, r2
    5732:	f3bf 8f6f 	isb	sy
}
    5736:	4770      	bx	lr
    5738:	6041      	str	r1, [r0, #4]
	list->head = node;
    573a:	6001      	str	r1, [r0, #0]
    573c:	e7f7      	b.n	572e <list_append+0x1c>

0000573e <list_get>:
	__asm__ volatile(
    573e:	f04f 0320 	mov.w	r3, #32
    5742:	f3ef 8211 	mrs	r2, BASEPRI
    5746:	f383 8811 	msr	BASEPRI, r3
    574a:	f3bf 8f6f 	isb	sy
	return list->head;
    574e:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    5750:	b173      	cbz	r3, 5770 <list_get+0x32>
{
    5752:	b410      	push	{r4}
	return node->next;
    5754:	6819      	ldr	r1, [r3, #0]
	list->head = node;
    5756:	6001      	str	r1, [r0, #0]
	return list->tail;
    5758:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    575a:	42a3      	cmp	r3, r4
    575c:	d006      	beq.n	576c <list_get+0x2e>
	__asm__ volatile(
    575e:	f382 8811 	msr	BASEPRI, r2
    5762:	f3bf 8f6f 	isb	sy
}
    5766:	4618      	mov	r0, r3
    5768:	bc10      	pop	{r4}
    576a:	4770      	bx	lr
	list->tail = node;
    576c:	6041      	str	r1, [r0, #4]
    576e:	e7f6      	b.n	575e <list_get+0x20>
    5770:	f382 8811 	msr	BASEPRI, r2
    5774:	f3bf 8f6f 	isb	sy
    5778:	4618      	mov	r0, r3
    577a:	4770      	bx	lr

0000577c <clkstarted_handle>:
{
    577c:	b538      	push	{r3, r4, r5, lr}
    577e:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    5780:	f7ff ff6a 	bl	5658 <get_sub_data>
    5784:	4604      	mov	r4, r0
	sub_data->started = true;
    5786:	2301      	movs	r3, #1
    5788:	7243      	strb	r3, [r0, #9]
	while ((async_data = list_get(&sub_data->list)) != NULL) {
    578a:	4620      	mov	r0, r4
    578c:	f7ff ffd7 	bl	573e <list_get>
    5790:	4603      	mov	r3, r0
    5792:	b120      	cbz	r0, 579e <clkstarted_handle+0x22>
		async_data->cb(dev, async_data->user_data);
    5794:	685a      	ldr	r2, [r3, #4]
    5796:	6899      	ldr	r1, [r3, #8]
    5798:	4628      	mov	r0, r5
    579a:	4790      	blx	r2
    579c:	e7f5      	b.n	578a <clkstarted_handle+0xe>
}
    579e:	bd38      	pop	{r3, r4, r5, pc}

000057a0 <clock_async_start>:
{
    57a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    57a4:	4680      	mov	r8, r0
    57a6:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    57a8:	b2cf      	uxtb	r7, r1
	config = get_sub_config(dev, type);
    57aa:	4639      	mov	r1, r7
    57ac:	f7ff ff5a 	bl	5664 <get_sub_config>
    57b0:	4681      	mov	r9, r0
	clk_data = get_sub_data(dev, type);
    57b2:	4639      	mov	r1, r7
    57b4:	4640      	mov	r0, r8
    57b6:	f7ff ff4f 	bl	5658 <get_sub_data>
    57ba:	4606      	mov	r6, r0
	if ((data != NULL)
    57bc:	b125      	cbz	r5, 57c8 <clock_async_start+0x28>
	    && is_in_list(&clk_data->list, &data->node)) {
    57be:	4629      	mov	r1, r5
    57c0:	f7ff ff9a 	bl	56f8 <is_in_list>
    57c4:	2800      	cmp	r0, #0
    57c6:	d13e      	bne.n	5846 <clock_async_start+0xa6>
	__asm__ volatile(
    57c8:	f04f 0220 	mov.w	r2, #32
    57cc:	f3ef 8311 	mrs	r3, BASEPRI
    57d0:	f382 8811 	msr	BASEPRI, r2
    57d4:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    57d8:	7a34      	ldrb	r4, [r6, #8]
    57da:	3401      	adds	r4, #1
    57dc:	b2e4      	uxtb	r4, r4
    57de:	7234      	strb	r4, [r6, #8]
	__asm__ volatile(
    57e0:	f383 8811 	msr	BASEPRI, r3
    57e4:	f3bf 8f6f 	isb	sy
	if (data) {
    57e8:	b17d      	cbz	r5, 580a <clock_async_start+0x6a>
		clock_irqs_disable();
    57ea:	f7ff ff29 	bl	5640 <clock_irqs_disable>
		already_started = clk_data->started;
    57ee:	f896 a009 	ldrb.w	sl, [r6, #9]
		if (!already_started) {
    57f2:	f1ba 0f00 	cmp.w	sl, #0
    57f6:	d00d      	beq.n	5814 <clock_async_start+0x74>
		clock_irqs_enable();
    57f8:	f7ff ff28 	bl	564c <clock_irqs_enable>
		if (already_started) {
    57fc:	f1ba 0f00 	cmp.w	sl, #0
    5800:	d003      	beq.n	580a <clock_async_start+0x6a>
			data->cb(dev, data->user_data);
    5802:	686b      	ldr	r3, [r5, #4]
    5804:	68a9      	ldr	r1, [r5, #8]
    5806:	4640      	mov	r0, r8
    5808:	4798      	blx	r3
	if (ref == 1) {
    580a:	2c01      	cmp	r4, #1
    580c:	d007      	beq.n	581e <clock_async_start+0x7e>
	return 0;
    580e:	2000      	movs	r0, #0
}
    5810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			list_append(&clk_data->list, &data->node);
    5814:	4629      	mov	r1, r5
    5816:	4630      	mov	r0, r6
    5818:	f7ff ff7b 	bl	5712 <list_append>
    581c:	e7ec      	b.n	57f8 <clock_async_start+0x58>
		do_start =  (config->start_handler) ?
    581e:	f8d9 3000 	ldr.w	r3, [r9]
				config->start_handler(dev) : true;
    5822:	b113      	cbz	r3, 582a <clock_async_start+0x8a>
    5824:	4640      	mov	r0, r8
    5826:	4798      	blx	r3
    5828:	b138      	cbz	r0, 583a <clock_async_start+0x9a>
			nrf_clock_task_trigger(NRF_CLOCK,
    582a:	f899 300a 	ldrb.w	r3, [r9, #10]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    582e:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    5832:	2201      	movs	r2, #1
    5834:	601a      	str	r2, [r3, #0]
	return 0;
    5836:	2000      	movs	r0, #0
    5838:	e7ea      	b.n	5810 <clock_async_start+0x70>
			clkstarted_handle(dev, type);
    583a:	4639      	mov	r1, r7
    583c:	4640      	mov	r0, r8
    583e:	f7ff ff9d 	bl	577c <clkstarted_handle>
	return 0;
    5842:	2000      	movs	r0, #0
    5844:	e7e4      	b.n	5810 <clock_async_start+0x70>
		return -EBUSY;
    5846:	f06f 000f 	mvn.w	r0, #15
    584a:	e7e1      	b.n	5810 <clock_async_start+0x70>

0000584c <clock_start>:
{
    584c:	b508      	push	{r3, lr}
	return clock_async_start(dev, sub_system, NULL);
    584e:	2200      	movs	r2, #0
    5850:	f7ff ffa6 	bl	57a0 <clock_async_start>
}
    5854:	bd08      	pop	{r3, pc}

00005856 <clk_init>:
{
    5856:	b538      	push	{r3, r4, r5, lr}
    5858:	4605      	mov	r5, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    585a:	2200      	movs	r2, #0
    585c:	2101      	movs	r1, #1
    585e:	2005      	movs	r0, #5
    5860:	f7fc fbf6 	bl	2050 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    5864:	2005      	movs	r0, #5
    5866:	f7fc fbe3 	bl	2030 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    586a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    586e:	2202      	movs	r2, #2
    5870:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	clock_irqs_enable();
    5874:	f7ff feea 	bl	564c <clock_irqs_enable>
	for (enum clock_control_nrf_type i = 0;
    5878:	2400      	movs	r4, #0
    587a:	e008      	b.n	588e <clk_init+0x38>
		sys_slist_init(&(get_sub_data(dev, i)->list));
    587c:	4621      	mov	r1, r4
    587e:	4628      	mov	r0, r5
    5880:	f7ff feea 	bl	5658 <get_sub_data>
	list->head = NULL;
    5884:	2300      	movs	r3, #0
    5886:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    5888:	6043      	str	r3, [r0, #4]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    588a:	3401      	adds	r4, #1
    588c:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    588e:	2c01      	cmp	r4, #1
    5890:	d9f4      	bls.n	587c <clk_init+0x26>
}
    5892:	2000      	movs	r0, #0
    5894:	bd38      	pop	{r3, r4, r5, pc}

00005896 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    5896:	4770      	bx	lr

00005898 <sys_clock_disable>:
{
}

void __weak sys_clock_disable(void)
{
}
    5898:	4770      	bx	lr

0000589a <counter_sub>:
	return (a - b) & COUNTER_MAX;
    589a:	1a40      	subs	r0, r0, r1
}
    589c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    58a0:	4770      	bx	lr

000058a2 <z_irq_spurious>:
 * See z_arm_reserved().
 *
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
    58a2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	z_arm_reserved();
    58a4:	f7fc fbf0 	bl	2088 <z_arm_bus_fault>
}
    58a8:	bd08      	pop	{r3, pc}

000058aa <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    58aa:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    58ac:	f002 f89f 	bl	79ee <z_fatal_error>
}
    58b0:	bd08      	pop	{r3, pc}

000058b2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    58b2:	b508      	push	{r3, lr}
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
    58b4:	4601      	mov	r1, r0
    58b6:	6800      	ldr	r0, [r0, #0]
    58b8:	f7ff fff7 	bl	58aa <z_arm_fatal_error>
}
    58bc:	bd08      	pop	{r3, pc}

000058be <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    58be:	b508      	push	{r3, lr}
	handler();
    58c0:	f7fc fbec 	bl	209c <z_SysNmiOnReset>
	z_arm_exc_exit();
    58c4:	f7fc fb5e 	bl	1f84 <z_arm_exc_exit>
}
    58c8:	bd08      	pop	{r3, pc}

000058ca <memory_fault_recoverable>:
}
    58ca:	2000      	movs	r0, #0
    58cc:	4770      	bx	lr

000058ce <fault_handle>:
{
    58ce:	b508      	push	{r3, lr}
	*recoverable = false;
    58d0:	2300      	movs	r3, #0
    58d2:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    58d4:	3903      	subs	r1, #3
    58d6:	2903      	cmp	r1, #3
    58d8:	d812      	bhi.n	5900 <fault_handle+0x32>
    58da:	e8df f001 	tbb	[pc, r1]
    58de:	0602      	.short	0x0602
    58e0:	0e0a      	.short	0x0e0a
		reason = hard_fault(esf, recoverable);
    58e2:	4611      	mov	r1, r2
    58e4:	f7fc fc80 	bl	21e8 <hard_fault>
}
    58e8:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    58ea:	2100      	movs	r1, #0
    58ec:	f7fc fc1c 	bl	2128 <mem_manage_fault>
		break;
    58f0:	e7fa      	b.n	58e8 <fault_handle+0x1a>
		reason = bus_fault(esf, 0, recoverable);
    58f2:	2100      	movs	r1, #0
    58f4:	f7fc fc3c 	bl	2170 <bus_fault>
		break;
    58f8:	e7f6      	b.n	58e8 <fault_handle+0x1a>
		reason = usage_fault(esf);
    58fa:	f7fc fc63 	bl	21c4 <usage_fault>
		break;
    58fe:	e7f3      	b.n	58e8 <fault_handle+0x1a>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    5900:	2000      	movs	r0, #0
	return reason;
    5902:	e7f1      	b.n	58e8 <fault_handle+0x1a>

00005904 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    5904:	b508      	push	{r3, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    5906:	2100      	movs	r1, #0
    5908:	4668      	mov	r0, sp
    590a:	f000 f82e 	bl	596a <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    590e:	bd08      	pop	{r3, pc}

00005910 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    5910:	6843      	ldr	r3, [r0, #4]
		&&
    5912:	2b1f      	cmp	r3, #31
    5914:	d90a      	bls.n	592c <mpu_partition_is_valid+0x1c>
		&&
    5916:	f013 0f1f 	tst.w	r3, #31
    591a:	d001      	beq.n	5920 <mpu_partition_is_valid+0x10>
		&&
    591c:	2000      	movs	r0, #0
    591e:	4770      	bx	lr
		((part->start &
    5920:	6803      	ldr	r3, [r0, #0]
		&&
    5922:	f013 0f1f 	tst.w	r3, #31
    5926:	d003      	beq.n	5930 <mpu_partition_is_valid+0x20>
    5928:	2000      	movs	r0, #0
    592a:	4770      	bx	lr
    592c:	2000      	movs	r0, #0
    592e:	4770      	bx	lr
    5930:	2001      	movs	r0, #1
}
    5932:	4770      	bx	lr

00005934 <mpu_configure_region>:
{
    5934:	b530      	push	{r4, r5, lr}
    5936:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    5938:	680b      	ldr	r3, [r1, #0]
    593a:	9300      	str	r3, [sp, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    593c:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    593e:	890d      	ldrh	r5, [r1, #8]
    5940:	f89d 2008 	ldrb.w	r2, [sp, #8]
    5944:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    5948:	7a89      	ldrb	r1, [r1, #10]
    594a:	f361 1247 	bfi	r2, r1, #5, #3
    594e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    5952:	f023 031f 	bic.w	r3, r3, #31
    5956:	4423      	add	r3, r4
    5958:	3b01      	subs	r3, #1
    595a:	f023 031f 	bic.w	r3, r3, #31
    595e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    5960:	4669      	mov	r1, sp
    5962:	f7fc fd23 	bl	23ac <region_allocate_and_init>
}
    5966:	b005      	add	sp, #20
    5968:	bd30      	pop	{r4, r5, pc}

0000596a <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    596a:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    596c:	f7fc fe32 	bl	25d4 <mpu_configure_dynamic_mpu_regions>
}
    5970:	bd08      	pop	{r3, pc}

00005972 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    5972:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    5976:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    597a:	d001      	beq.n	5980 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    597c:	b2c0      	uxtb	r0, r0
    597e:	4770      	bx	lr
	}

	return -EINVAL;
    5980:	f06f 0015 	mvn.w	r0, #21
}
    5984:	4770      	bx	lr

00005986 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    5986:	7803      	ldrb	r3, [r0, #0]
    5988:	780a      	ldrb	r2, [r1, #0]
    598a:	4293      	cmp	r3, r2
    598c:	d103      	bne.n	5996 <strcmp+0x10>
    598e:	b113      	cbz	r3, 5996 <strcmp+0x10>
		s1++;
    5990:	3001      	adds	r0, #1
		s2++;
    5992:	3101      	adds	r1, #1
    5994:	e7f7      	b.n	5986 <strcmp>
	}

	return *s1 - *s2;
}
    5996:	1a98      	subs	r0, r3, r2
    5998:	4770      	bx	lr

0000599a <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    599a:	b17a      	cbz	r2, 59bc <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    599c:	1e53      	subs	r3, r2, #1
    599e:	d00f      	beq.n	59c0 <memcmp+0x26>
{
    59a0:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
    59a2:	7804      	ldrb	r4, [r0, #0]
    59a4:	780a      	ldrb	r2, [r1, #0]
    59a6:	4294      	cmp	r4, r2
    59a8:	d103      	bne.n	59b2 <memcmp+0x18>
		c1++;
    59aa:	3001      	adds	r0, #1
		c2++;
    59ac:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
    59ae:	3b01      	subs	r3, #1
    59b0:	d1f7      	bne.n	59a2 <memcmp+0x8>
	}

	return *c1 - *c2;
    59b2:	7800      	ldrb	r0, [r0, #0]
    59b4:	780b      	ldrb	r3, [r1, #0]
    59b6:	1ac0      	subs	r0, r0, r3
}
    59b8:	bc10      	pop	{r4}
    59ba:	4770      	bx	lr
		return 0;
    59bc:	2000      	movs	r0, #0
    59be:	4770      	bx	lr
	return *c1 - *c2;
    59c0:	7800      	ldrb	r0, [r0, #0]
    59c2:	780b      	ldrb	r3, [r1, #0]
    59c4:	1ac0      	subs	r0, r0, r3
}
    59c6:	4770      	bx	lr

000059c8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    59c8:	b410      	push	{r4}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    59ca:	ea80 0301 	eor.w	r3, r0, r1
    59ce:	f013 0f03 	tst.w	r3, #3
    59d2:	d007      	beq.n	59e4 <memcpy+0x1c>
	unsigned char *d_byte = (unsigned char *)d;
    59d4:	4603      	mov	r3, r0
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    59d6:	b1c2      	cbz	r2, 5a0a <memcpy+0x42>
		*(d_byte++) = *(s_byte++);
    59d8:	f811 4b01 	ldrb.w	r4, [r1], #1
    59dc:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    59e0:	3a01      	subs	r2, #1
    59e2:	e7f8      	b.n	59d6 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    59e4:	4603      	mov	r3, r0
		while (((uintptr_t)d_byte) & mask) {
    59e6:	f013 0f03 	tst.w	r3, #3
    59ea:	d00b      	beq.n	5a04 <memcpy+0x3c>
			if (n == 0) {
    59ec:	b16a      	cbz	r2, 5a0a <memcpy+0x42>
			*(d_byte++) = *(s_byte++);
    59ee:	f811 4b01 	ldrb.w	r4, [r1], #1
    59f2:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    59f6:	3a01      	subs	r2, #1
    59f8:	e7f5      	b.n	59e6 <memcpy+0x1e>
			*(d_word++) = *(s_word++);
    59fa:	f851 4b04 	ldr.w	r4, [r1], #4
    59fe:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    5a02:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    5a04:	2a03      	cmp	r2, #3
    5a06:	d8f8      	bhi.n	59fa <memcpy+0x32>
    5a08:	e7e5      	b.n	59d6 <memcpy+0xe>
	}

	return d;
}
    5a0a:	bc10      	pop	{r4}
    5a0c:	4770      	bx	lr

00005a0e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    5a0e:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5a10:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    5a12:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5a14:	f013 0f03 	tst.w	r3, #3
    5a18:	d004      	beq.n	5a24 <memset+0x16>
		if (n == 0) {
    5a1a:	b1a2      	cbz	r2, 5a46 <memset+0x38>
			return buf;
		}
		*(d_byte++) = c_byte;
    5a1c:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    5a20:	3a01      	subs	r2, #1
    5a22:	e7f7      	b.n	5a14 <memset+0x6>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    5a24:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    5a26:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    5a2a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    5a2e:	e002      	b.n	5a36 <memset+0x28>
		*(d_word++) = c_word;
    5a30:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    5a34:	3a04      	subs	r2, #4
	while (n >= sizeof(mem_word_t)) {
    5a36:	2a03      	cmp	r2, #3
    5a38:	d8fa      	bhi.n	5a30 <memset+0x22>
    5a3a:	e002      	b.n	5a42 <memset+0x34>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
    5a3c:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    5a40:	3a01      	subs	r2, #1
	while (n > 0) {
    5a42:	2a00      	cmp	r2, #0
    5a44:	d1fa      	bne.n	5a3c <memset+0x2e>
	}

	return buf;
}
    5a46:	bc10      	pop	{r4}
    5a48:	4770      	bx	lr

00005a4a <_stdout_hook_default>:
}
    5a4a:	f04f 30ff 	mov.w	r0, #4294967295
    5a4e:	4770      	bx	lr

00005a50 <gpio_nrfx_write>:
{
    5a50:	b410      	push	{r4}
	return port->config->config_info;
    5a52:	6804      	ldr	r4, [r0, #0]
    5a54:	68a4      	ldr	r4, [r4, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a56:	6824      	ldr	r4, [r4, #0]
	return port->driver_data;
    5a58:	6880      	ldr	r0, [r0, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    5a5a:	2901      	cmp	r1, #1
    5a5c:	d010      	beq.n	5a80 <gpio_nrfx_write+0x30>
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    5a5e:	3300      	adds	r3, #0
    5a60:	bf18      	it	ne
    5a62:	2301      	movne	r3, #1
    5a64:	69c1      	ldr	r1, [r0, #28]
    5a66:	40d1      	lsrs	r1, r2
    5a68:	f001 0101 	and.w	r1, r1, #1
    5a6c:	b2c9      	uxtb	r1, r1
    5a6e:	428b      	cmp	r3, r1
    5a70:	d00a      	beq.n	5a88 <gpio_nrfx_write+0x38>
			nrf_gpio_port_out_set(reg, BIT(pin));
    5a72:	2301      	movs	r3, #1
    5a74:	fa03 f202 	lsl.w	r2, r3, r2
    p_reg->OUTSET = set_mask;
    5a78:	60a2      	str	r2, [r4, #8]
}
    5a7a:	2000      	movs	r0, #0
    5a7c:	bc10      	pop	{r4}
    5a7e:	4770      	bx	lr
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    5a80:	69c2      	ldr	r2, [r0, #28]
    5a82:	4053      	eors	r3, r2
    p_reg->OUT = value;
    5a84:	6063      	str	r3, [r4, #4]
    5a86:	e7f8      	b.n	5a7a <gpio_nrfx_write+0x2a>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    5a88:	2301      	movs	r3, #1
    5a8a:	fa03 f202 	lsl.w	r2, r3, r2
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    5a8e:	60e2      	str	r2, [r4, #12]
    5a90:	e7f3      	b.n	5a7a <gpio_nrfx_write+0x2a>

00005a92 <gpio_nrfx_read>:
{
    5a92:	b4f0      	push	{r4, r5, r6, r7}
	return port->config->config_info;
    5a94:	6804      	ldr	r4, [r0, #0]
    5a96:	68a4      	ldr	r4, [r4, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a98:	6824      	ldr	r4, [r4, #0]
	return port->driver_data;
    5a9a:	6886      	ldr	r6, [r0, #8]
    return p_reg->DIR;
    5a9c:	6967      	ldr	r7, [r4, #20]
    return p_reg->IN;
    5a9e:	6925      	ldr	r5, [r4, #16]
    return p_reg->OUT;
    5aa0:	6860      	ldr	r0, [r4, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    5aa2:	4068      	eors	r0, r5
    5aa4:	4038      	ands	r0, r7
    5aa6:	4068      	eors	r0, r5
    5aa8:	69f4      	ldr	r4, [r6, #28]
    5aaa:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    5aac:	2901      	cmp	r1, #1
    5aae:	d006      	beq.n	5abe <gpio_nrfx_read+0x2c>
		*value = (port_val & BIT(pin)) ? 1 : 0;
    5ab0:	40d0      	lsrs	r0, r2
    5ab2:	f000 0001 	and.w	r0, r0, #1
    5ab6:	6018      	str	r0, [r3, #0]
}
    5ab8:	2000      	movs	r0, #0
    5aba:	bcf0      	pop	{r4, r5, r6, r7}
    5abc:	4770      	bx	lr
		*value = port_val;
    5abe:	6018      	str	r0, [r3, #0]
    5ac0:	e7fa      	b.n	5ab8 <gpio_nrfx_read+0x26>

00005ac2 <gpio_nrfx_manage_callback>:
{
    5ac2:	b430      	push	{r4, r5}
	return port->driver_data;
    5ac4:	6880      	ldr	r0, [r0, #8]
	return list->head;
    5ac6:	6803      	ldr	r3, [r0, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    5ac8:	b1d3      	cbz	r3, 5b00 <gpio_nrfx_manage_callback+0x3e>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    5aca:	460d      	mov	r5, r1
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5acc:	2400      	movs	r4, #0
    5ace:	b1b3      	cbz	r3, 5afe <gpio_nrfx_manage_callback+0x3c>
    5ad0:	429d      	cmp	r5, r3
    5ad2:	d002      	beq.n	5ada <gpio_nrfx_manage_callback+0x18>
    5ad4:	461c      	mov	r4, r3
    5ad6:	681b      	ldr	r3, [r3, #0]
    5ad8:	e7f9      	b.n	5ace <gpio_nrfx_manage_callback+0xc>
Z_GENLIST_REMOVE(slist, snode)
    5ada:	b13c      	cbz	r4, 5aec <gpio_nrfx_manage_callback+0x2a>
	return node->next;
    5adc:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    5ade:	6023      	str	r3, [r4, #0]
	return list->tail;
    5ae0:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    5ae2:	4299      	cmp	r1, r3
    5ae4:	d009      	beq.n	5afa <gpio_nrfx_manage_callback+0x38>
	parent->next = child;
    5ae6:	2300      	movs	r3, #0
    5ae8:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5aea:	e009      	b.n	5b00 <gpio_nrfx_manage_callback+0x3e>
	return node->next;
    5aec:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5aee:	6003      	str	r3, [r0, #0]
	return list->tail;
    5af0:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    5af2:	42a1      	cmp	r1, r4
    5af4:	d1f7      	bne.n	5ae6 <gpio_nrfx_manage_callback+0x24>
	list->tail = node;
    5af6:	6043      	str	r3, [r0, #4]
    5af8:	e7f5      	b.n	5ae6 <gpio_nrfx_manage_callback+0x24>
    5afa:	6044      	str	r4, [r0, #4]
    5afc:	e7f3      	b.n	5ae6 <gpio_nrfx_manage_callback+0x24>
			if (!set) {
    5afe:	b152      	cbz	r2, 5b16 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
			}
		}
	}

	if (set) {
    5b00:	b162      	cbz	r2, 5b1c <gpio_nrfx_manage_callback+0x5a>
	return list->head;
    5b02:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
    5b04:	600b      	str	r3, [r1, #0]
	list->head = node;
    5b06:	6001      	str	r1, [r0, #0]
	return list->tail;
    5b08:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    5b0a:	b10b      	cbz	r3, 5b10 <gpio_nrfx_manage_callback+0x4e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5b0c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5b0e:	e006      	b.n	5b1e <gpio_nrfx_manage_callback+0x5c>
	list->tail = node;
    5b10:	6041      	str	r1, [r0, #4]
    5b12:	2000      	movs	r0, #0
    5b14:	e003      	b.n	5b1e <gpio_nrfx_manage_callback+0x5c>
				return -EINVAL;
    5b16:	f06f 0015 	mvn.w	r0, #21
    5b1a:	e000      	b.n	5b1e <gpio_nrfx_manage_callback+0x5c>
	return 0;
    5b1c:	2000      	movs	r0, #0
}
    5b1e:	bc30      	pop	{r4, r5}
    5b20:	4770      	bx	lr

00005b22 <gpio_nrfx_pin_manage_callback>:
{
    5b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b26:	4606      	mov	r6, r0
    5b28:	4698      	mov	r8, r3
	return port->driver_data;
    5b2a:	6885      	ldr	r5, [r0, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    5b2c:	2901      	cmp	r1, #1
    5b2e:	d003      	beq.n	5b38 <gpio_nrfx_pin_manage_callback+0x16>
		from_pin = pin;
    5b30:	b2d4      	uxtb	r4, r2
		to_pin   = pin;
    5b32:	4627      	mov	r7, r4
	int res = 0;
    5b34:	2300      	movs	r3, #0
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    5b36:	e010      	b.n	5b5a <gpio_nrfx_pin_manage_callback+0x38>
		to_pin   = 31U;
    5b38:	271f      	movs	r7, #31
		from_pin = 0U;
    5b3a:	2400      	movs	r4, #0
    5b3c:	e7fa      	b.n	5b34 <gpio_nrfx_pin_manage_callback+0x12>
		WRITE_BIT(data->int_en, curr_pin, enable);
    5b3e:	68eb      	ldr	r3, [r5, #12]
    5b40:	2201      	movs	r2, #1
    5b42:	40a2      	lsls	r2, r4
    5b44:	ea23 0302 	bic.w	r3, r3, r2
    5b48:	60eb      	str	r3, [r5, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    5b4a:	4621      	mov	r1, r4
    5b4c:	4630      	mov	r0, r6
    5b4e:	f7fc fe15 	bl	277c <gpiote_pin_int_cfg>
		if (res != 0) {
    5b52:	4603      	mov	r3, r0
    5b54:	b958      	cbnz	r0, 5b6e <gpio_nrfx_pin_manage_callback+0x4c>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    5b56:	3401      	adds	r4, #1
    5b58:	b2e4      	uxtb	r4, r4
    5b5a:	42a7      	cmp	r7, r4
    5b5c:	d307      	bcc.n	5b6e <gpio_nrfx_pin_manage_callback+0x4c>
		WRITE_BIT(data->int_en, curr_pin, enable);
    5b5e:	f1b8 0f00 	cmp.w	r8, #0
    5b62:	d0ec      	beq.n	5b3e <gpio_nrfx_pin_manage_callback+0x1c>
    5b64:	68eb      	ldr	r3, [r5, #12]
    5b66:	2201      	movs	r2, #1
    5b68:	40a2      	lsls	r2, r4
    5b6a:	4313      	orrs	r3, r2
    5b6c:	e7ec      	b.n	5b48 <gpio_nrfx_pin_manage_callback+0x26>
}
    5b6e:	4618      	mov	r0, r3
    5b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005b74 <gpio_nrfx_pin_enable_callback>:
{
    5b74:	b508      	push	{r3, lr}
	return gpio_nrfx_pin_manage_callback(port, access_op, pin, true);
    5b76:	2301      	movs	r3, #1
    5b78:	f7ff ffd3 	bl	5b22 <gpio_nrfx_pin_manage_callback>
}
    5b7c:	bd08      	pop	{r3, pc}

00005b7e <gpio_nrfx_pin_disable_callback>:
{
    5b7e:	b508      	push	{r3, lr}
	return gpio_nrfx_pin_manage_callback(port, access_op, pin, false);
    5b80:	2300      	movs	r3, #0
    5b82:	f7ff ffce 	bl	5b22 <gpio_nrfx_pin_manage_callback>
}
    5b86:	bd08      	pop	{r3, pc}

00005b88 <flash_nrf_write_protection>:
}
    5b88:	2000      	movs	r0, #0
    5b8a:	4770      	bx	lr

00005b8c <shift_write_context>:
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
}

static void shift_write_context(u32_t shift, struct flash_context *w_ctx)
{
	w_ctx->flash_addr += shift;
    5b8c:	684b      	ldr	r3, [r1, #4]
    5b8e:	4403      	add	r3, r0
    5b90:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
    5b92:	680b      	ldr	r3, [r1, #0]
    5b94:	4403      	add	r3, r0
    5b96:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
    5b98:	688b      	ldr	r3, [r1, #8]
    5b9a:	1a1b      	subs	r3, r3, r0
    5b9c:	608b      	str	r3, [r1, #8]
}
    5b9e:	4770      	bx	lr

00005ba0 <erase_op>:
{
    5ba0:	b538      	push	{r3, r4, r5, lr}
    5ba2:	4604      	mov	r4, r0
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5ba4:	f001 ff0b 	bl	79be <nrfx_nvmc_flash_page_size_get>
    5ba8:	4605      	mov	r5, r0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    5baa:	6860      	ldr	r0, [r4, #4]
    5bac:	f7fe f98e 	bl	3ecc <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
    5bb0:	68a3      	ldr	r3, [r4, #8]
    5bb2:	1b5b      	subs	r3, r3, r5
    5bb4:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
    5bb6:	6862      	ldr	r2, [r4, #4]
    5bb8:	442a      	add	r2, r5
    5bba:	6062      	str	r2, [r4, #4]
	} while (e_ctx->len > 0);
    5bbc:	2b00      	cmp	r3, #0
    5bbe:	d1f4      	bne.n	5baa <erase_op+0xa>
}
    5bc0:	2000      	movs	r0, #0
    5bc2:	bd38      	pop	{r3, r4, r5, pc}

00005bc4 <erase>:

	return FLASH_OP_DONE;
}

static int erase(u32_t addr, u32_t size)
{
    5bc4:	b500      	push	{lr}
    5bc6:	b085      	sub	sp, #20
	struct flash_context context = {
    5bc8:	2300      	movs	r3, #0
    5bca:	9301      	str	r3, [sp, #4]
    5bcc:	9002      	str	r0, [sp, #8]
    5bce:	9103      	str	r1, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return	erase_op(&context);
    5bd0:	a801      	add	r0, sp, #4
    5bd2:	f7ff ffe5 	bl	5ba0 <erase_op>
}
    5bd6:	b005      	add	sp, #20
    5bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00005bdc <flash_nrf_erase>:
{
    5bdc:	b570      	push	{r4, r5, r6, lr}
    5bde:	460c      	mov	r4, r1
    5be0:	4615      	mov	r5, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5be2:	f001 feec 	bl	79be <nrfx_nvmc_flash_page_size_get>
    5be6:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
    5be8:	f001 fee5 	bl	79b6 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    5bec:	42a0      	cmp	r0, r4
    5bee:	d919      	bls.n	5c24 <flash_nrf_erase+0x48>
    5bf0:	2c00      	cmp	r4, #0
    5bf2:	db1a      	blt.n	5c2a <flash_nrf_erase+0x4e>
	    addr < 0 ||
    5bf4:	4285      	cmp	r5, r0
    5bf6:	d81b      	bhi.n	5c30 <flash_nrf_erase+0x54>
	    (addr) + len > flash_size) {
    5bf8:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    5bfa:	4298      	cmp	r0, r3
    5bfc:	d31b      	bcc.n	5c36 <flash_nrf_erase+0x5a>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    5bfe:	fbb4 f3f6 	udiv	r3, r4, r6
    5c02:	fb06 4313 	mls	r3, r6, r3, r4
    5c06:	b9cb      	cbnz	r3, 5c3c <flash_nrf_erase+0x60>
    5c08:	fbb5 f3f6 	udiv	r3, r5, r6
    5c0c:	fb06 5313 	mls	r3, r6, r3, r5
    5c10:	b9bb      	cbnz	r3, 5c42 <flash_nrf_erase+0x66>
		if (!n_pages) {
    5c12:	42ae      	cmp	r6, r5
    5c14:	d901      	bls.n	5c1a <flash_nrf_erase+0x3e>
			return 0;
    5c16:	2000      	movs	r0, #0
    5c18:	e006      	b.n	5c28 <flash_nrf_erase+0x4c>
		ret = erase(addr, size);
    5c1a:	4629      	mov	r1, r5
    5c1c:	4620      	mov	r0, r4
    5c1e:	f7ff ffd1 	bl	5bc4 <erase>
	return ret;
    5c22:	e001      	b.n	5c28 <flash_nrf_erase+0x4c>
		return -EINVAL;
    5c24:	f06f 0015 	mvn.w	r0, #21
}
    5c28:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    5c2a:	f06f 0015 	mvn.w	r0, #21
    5c2e:	e7fb      	b.n	5c28 <flash_nrf_erase+0x4c>
    5c30:	f06f 0015 	mvn.w	r0, #21
    5c34:	e7f8      	b.n	5c28 <flash_nrf_erase+0x4c>
    5c36:	f06f 0015 	mvn.w	r0, #21
    5c3a:	e7f5      	b.n	5c28 <flash_nrf_erase+0x4c>
			return -EINVAL;
    5c3c:	f06f 0015 	mvn.w	r0, #21
    5c40:	e7f2      	b.n	5c28 <flash_nrf_erase+0x4c>
    5c42:	f06f 0015 	mvn.w	r0, #21
    5c46:	e7ef      	b.n	5c28 <flash_nrf_erase+0x4c>

00005c48 <write_op>:
{
    5c48:	b510      	push	{r4, lr}
    5c4a:	4604      	mov	r4, r0
	while (w_ctx->len >= sizeof(u32_t)) {
    5c4c:	68a3      	ldr	r3, [r4, #8]
    5c4e:	2b03      	cmp	r3, #3
    5c50:	d909      	bls.n	5c66 <write_op+0x1e>
				     UNALIGNED_GET((u32_t *)w_ctx->data_addr));
    5c52:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    5c54:	6819      	ldr	r1, [r3, #0]
    5c56:	6860      	ldr	r0, [r4, #4]
    5c58:	f001 fea1 	bl	799e <nrfx_nvmc_word_write>
		shift_write_context(sizeof(u32_t), w_ctx);
    5c5c:	4621      	mov	r1, r4
    5c5e:	2004      	movs	r0, #4
    5c60:	f7ff ff94 	bl	5b8c <shift_write_context>
    5c64:	e7f2      	b.n	5c4c <write_op+0x4>
	nvmc_wait_ready();
    5c66:	f7fc ff9b 	bl	2ba0 <nvmc_wait_ready>
}
    5c6a:	2000      	movs	r0, #0
    5c6c:	bd10      	pop	{r4, pc}

00005c6e <write>:

static int write(off_t addr, const void *data, size_t len)
{
    5c6e:	b500      	push	{lr}
    5c70:	b085      	sub	sp, #20
	struct flash_context context = {
    5c72:	9101      	str	r1, [sp, #4]
    5c74:	9002      	str	r0, [sp, #8]
    5c76:	9203      	str	r2, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return write_op(&context);
    5c78:	a801      	add	r0, sp, #4
    5c7a:	f7ff ffe5 	bl	5c48 <write_op>
}
    5c7e:	b005      	add	sp, #20
    5c80:	f85d fb04 	ldr.w	pc, [sp], #4

00005c84 <flash_nrf_write>:
{
    5c84:	b570      	push	{r4, r5, r6, lr}
    5c86:	460c      	mov	r4, r1
    5c88:	4616      	mov	r6, r2
    5c8a:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    5c8c:	f001 fe93 	bl	79b6 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    5c90:	4284      	cmp	r4, r0
    5c92:	d215      	bcs.n	5cc0 <flash_nrf_write+0x3c>
    5c94:	2c00      	cmp	r4, #0
    5c96:	db16      	blt.n	5cc6 <flash_nrf_write+0x42>
	    addr < 0 ||
    5c98:	4285      	cmp	r5, r0
    5c9a:	d817      	bhi.n	5ccc <flash_nrf_write+0x48>
	    (addr) + len > flash_size) {
    5c9c:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    5c9e:	4298      	cmp	r0, r3
    5ca0:	d317      	bcc.n	5cd2 <flash_nrf_write+0x4e>
	if (!is_aligned_32(addr) || (len % sizeof(u32_t))) {
    5ca2:	f014 0f03 	tst.w	r4, #3
    5ca6:	d117      	bne.n	5cd8 <flash_nrf_write+0x54>
    5ca8:	f015 0f03 	tst.w	r5, #3
    5cac:	d117      	bne.n	5cde <flash_nrf_write+0x5a>
	if (!len) {
    5cae:	b90d      	cbnz	r5, 5cb4 <flash_nrf_write+0x30>
		return 0;
    5cb0:	2000      	movs	r0, #0
    5cb2:	e007      	b.n	5cc4 <flash_nrf_write+0x40>
		ret = write(addr, data, len);
    5cb4:	462a      	mov	r2, r5
    5cb6:	4631      	mov	r1, r6
    5cb8:	4620      	mov	r0, r4
    5cba:	f7ff ffd8 	bl	5c6e <write>
	return ret;
    5cbe:	e001      	b.n	5cc4 <flash_nrf_write+0x40>
		return -EINVAL;
    5cc0:	f06f 0015 	mvn.w	r0, #21
}
    5cc4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    5cc6:	f06f 0015 	mvn.w	r0, #21
    5cca:	e7fb      	b.n	5cc4 <flash_nrf_write+0x40>
    5ccc:	f06f 0015 	mvn.w	r0, #21
    5cd0:	e7f8      	b.n	5cc4 <flash_nrf_write+0x40>
    5cd2:	f06f 0015 	mvn.w	r0, #21
    5cd6:	e7f5      	b.n	5cc4 <flash_nrf_write+0x40>
		return -EINVAL;
    5cd8:	f06f 0015 	mvn.w	r0, #21
    5cdc:	e7f2      	b.n	5cc4 <flash_nrf_write+0x40>
    5cde:	f06f 0015 	mvn.w	r0, #21
    5ce2:	e7ef      	b.n	5cc4 <flash_nrf_write+0x40>

00005ce4 <flash_nrf_read>:
{
    5ce4:	b570      	push	{r4, r5, r6, lr}
    5ce6:	460c      	mov	r4, r1
    5ce8:	4616      	mov	r6, r2
    5cea:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    5cec:	f001 fe63 	bl	79b6 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    5cf0:	42a0      	cmp	r0, r4
    5cf2:	d910      	bls.n	5d16 <flash_nrf_read+0x32>
    5cf4:	2c00      	cmp	r4, #0
    5cf6:	db11      	blt.n	5d1c <flash_nrf_read+0x38>
	    addr < 0 ||
    5cf8:	4285      	cmp	r5, r0
    5cfa:	d812      	bhi.n	5d22 <flash_nrf_read+0x3e>
	    (addr) + len > flash_size) {
    5cfc:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    5cfe:	4298      	cmp	r0, r3
    5d00:	d312      	bcc.n	5d28 <flash_nrf_read+0x44>
	if (!len) {
    5d02:	b90d      	cbnz	r5, 5d08 <flash_nrf_read+0x24>
		return 0;
    5d04:	2000      	movs	r0, #0
    5d06:	e008      	b.n	5d1a <flash_nrf_read+0x36>
	memcpy(data, (void *)addr, len);
    5d08:	462a      	mov	r2, r5
    5d0a:	4621      	mov	r1, r4
    5d0c:	4630      	mov	r0, r6
    5d0e:	f7ff fe5b 	bl	59c8 <memcpy>
	return 0;
    5d12:	2000      	movs	r0, #0
    5d14:	e001      	b.n	5d1a <flash_nrf_read+0x36>
		return -EINVAL;
    5d16:	f06f 0015 	mvn.w	r0, #21
}
    5d1a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    5d1c:	f06f 0015 	mvn.w	r0, #21
    5d20:	e7fb      	b.n	5d1a <flash_nrf_read+0x36>
    5d22:	f06f 0015 	mvn.w	r0, #21
    5d26:	e7f8      	b.n	5d1a <flash_nrf_read+0x36>
    5d28:	f06f 0015 	mvn.w	r0, #21
    5d2c:	e7f5      	b.n	5d1a <flash_nrf_read+0x36>

00005d2e <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
    5d2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d32:	b086      	sub	sp, #24
    5d34:	4689      	mov	r9, r1
    5d36:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->driver_api;
    5d38:	6843      	ldr	r3, [r0, #4]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    5d3a:	691b      	ldr	r3, [r3, #16]
    5d3c:	aa01      	add	r2, sp, #4
    5d3e:	a905      	add	r1, sp, #20
    5d40:	4798      	blx	r3
	off_t off = 0;
    5d42:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    5d44:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
    5d46:	46a2      	mov	sl, r4
    5d48:	9b01      	ldr	r3, [sp, #4]
    5d4a:	4553      	cmp	r3, sl
    5d4c:	d916      	bls.n	5d7c <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
    5d4e:	9f05      	ldr	r7, [sp, #20]
    5d50:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
    5d54:	687b      	ldr	r3, [r7, #4]
    5d56:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
    5d58:	2500      	movs	r5, #0
    5d5a:	683b      	ldr	r3, [r7, #0]
    5d5c:	42ab      	cmp	r3, r5
    5d5e:	d90a      	bls.n	5d76 <flash_page_foreach+0x48>
			page_info.start_offset = off;
    5d60:	9402      	str	r4, [sp, #8]
			page_info.index = page;
    5d62:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
    5d64:	4641      	mov	r1, r8
    5d66:	a802      	add	r0, sp, #8
    5d68:	47c8      	blx	r9
    5d6a:	b138      	cbz	r0, 5d7c <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
    5d6c:	9b03      	ldr	r3, [sp, #12]
    5d6e:	441c      	add	r4, r3
			page++;
    5d70:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
    5d72:	3501      	adds	r5, #1
    5d74:	e7f1      	b.n	5d5a <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
    5d76:	f10a 0a01 	add.w	sl, sl, #1
    5d7a:	e7e5      	b.n	5d48 <flash_page_foreach+0x1a>
		}
	}
}
    5d7c:	b006      	add	sp, #24
    5d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00005d82 <uarte_nrfx_isr_int>:
{
    5d82:	b508      	push	{r3, lr}
	return dev->driver_data;
    5d84:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
    5d86:	6803      	ldr	r3, [r0, #0]
    5d88:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5d8a:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
    5d8c:	6891      	ldr	r1, [r2, #8]
    5d8e:	7b89      	ldrb	r1, [r1, #14]
    5d90:	b111      	cbz	r1, 5d98 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d92:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    5d96:	b959      	cbnz	r1, 5db0 <uarte_nrfx_isr_int+0x2e>
    5d98:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    5d9c:	b111      	cbz	r1, 5da4 <uarte_nrfx_isr_int+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d9e:	2100      	movs	r1, #0
    5da0:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    5da4:	6892      	ldr	r2, [r2, #8]
    5da6:	6813      	ldr	r3, [r2, #0]
    5da8:	b10b      	cbz	r3, 5dae <uarte_nrfx_isr_int+0x2c>
		data->int_driven->cb(data->int_driven->cb_data);
    5daa:	6850      	ldr	r0, [r2, #4]
    5dac:	4798      	blx	r3
}
    5dae:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    5db0:	f44f 7180 	mov.w	r1, #256	; 0x100
    5db4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5db8:	2101      	movs	r1, #1
    5dba:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
    5dbc:	6893      	ldr	r3, [r2, #8]
    5dbe:	2200      	movs	r2, #0
    5dc0:	739a      	strb	r2, [r3, #14]
		return;
    5dc2:	e7f4      	b.n	5dae <uarte_nrfx_isr_int+0x2c>

00005dc4 <uarte_nrfx_configure>:
{
    5dc4:	b570      	push	{r4, r5, r6, lr}
    5dc6:	b082      	sub	sp, #8
	switch (cfg->stop_bits) {
    5dc8:	794b      	ldrb	r3, [r1, #5]
    5dca:	2b01      	cmp	r3, #1
    5dcc:	d006      	beq.n	5ddc <uarte_nrfx_configure+0x18>
    5dce:	2b03      	cmp	r3, #3
    5dd0:	d011      	beq.n	5df6 <uarte_nrfx_configure+0x32>
		return -ENOTSUP;
    5dd2:	f06f 0322 	mvn.w	r3, #34	; 0x22
}
    5dd6:	4618      	mov	r0, r3
    5dd8:	b002      	add	sp, #8
    5dda:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    5ddc:	2300      	movs	r3, #0
    5dde:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5de2:	798b      	ldrb	r3, [r1, #6]
    5de4:	2b03      	cmp	r3, #3
    5de6:	d13d      	bne.n	5e64 <uarte_nrfx_configure+0xa0>
	switch (cfg->flow_ctrl) {
    5de8:	79cb      	ldrb	r3, [r1, #7]
    5dea:	b143      	cbz	r3, 5dfe <uarte_nrfx_configure+0x3a>
    5dec:	2b01      	cmp	r3, #1
    5dee:	d010      	beq.n	5e12 <uarte_nrfx_configure+0x4e>
		return -ENOTSUP;
    5df0:	f06f 0322 	mvn.w	r3, #34	; 0x22
    5df4:	e7ef      	b.n	5dd6 <uarte_nrfx_configure+0x12>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5df6:	2310      	movs	r3, #16
    5df8:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    5dfc:	e7f1      	b.n	5de2 <uarte_nrfx_configure+0x1e>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    5dfe:	2300      	movs	r3, #0
    5e00:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    5e04:	790b      	ldrb	r3, [r1, #4]
    5e06:	b163      	cbz	r3, 5e22 <uarte_nrfx_configure+0x5e>
    5e08:	2b02      	cmp	r3, #2
    5e0a:	d027      	beq.n	5e5c <uarte_nrfx_configure+0x98>
		return -ENOTSUP;
    5e0c:	f06f 0322 	mvn.w	r3, #34	; 0x22
    5e10:	e7e1      	b.n	5dd6 <uarte_nrfx_configure+0x12>
	return dev->config->config_info;
    5e12:	6803      	ldr	r3, [r0, #0]
    5e14:	689b      	ldr	r3, [r3, #8]
		if (get_dev_config(dev)->rts_cts_pins_set) {
    5e16:	791b      	ldrb	r3, [r3, #4]
    5e18:	b33b      	cbz	r3, 5e6a <uarte_nrfx_configure+0xa6>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    5e1a:	2301      	movs	r3, #1
    5e1c:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    5e20:	e7f0      	b.n	5e04 <uarte_nrfx_configure+0x40>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    5e22:	2300      	movs	r3, #0
    5e24:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    5e28:	460c      	mov	r4, r1
    5e2a:	4605      	mov	r5, r0
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5e2c:	6809      	ldr	r1, [r1, #0]
    5e2e:	f7fc fed5 	bl	2bdc <baudrate_set>
    5e32:	4603      	mov	r3, r0
    5e34:	b9e0      	cbnz	r0, 5e70 <uarte_nrfx_configure+0xac>
	return dev->config->config_info;
    5e36:	682a      	ldr	r2, [r5, #0]
    5e38:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
    5e3a:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5e3c:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    5e40:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    5e44:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5e48:	4331      	orrs	r1, r6
    5e4a:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5e4c:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->driver_data;
    5e50:	68aa      	ldr	r2, [r5, #8]
	get_dev_data(dev)->uart_config = *cfg;
    5e52:	e894 0003 	ldmia.w	r4, {r0, r1}
    5e56:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    5e5a:	e7bc      	b.n	5dd6 <uarte_nrfx_configure+0x12>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5e5c:	230e      	movs	r3, #14
    5e5e:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    5e62:	e7e1      	b.n	5e28 <uarte_nrfx_configure+0x64>
		return -ENOTSUP;
    5e64:	f06f 0322 	mvn.w	r3, #34	; 0x22
    5e68:	e7b5      	b.n	5dd6 <uarte_nrfx_configure+0x12>
			return -ENOTSUP;
    5e6a:	f06f 0322 	mvn.w	r3, #34	; 0x22
    5e6e:	e7b2      	b.n	5dd6 <uarte_nrfx_configure+0x12>
		return -ENOTSUP;
    5e70:	f06f 0322 	mvn.w	r3, #34	; 0x22
    5e74:	e7af      	b.n	5dd6 <uarte_nrfx_configure+0x12>

00005e76 <uarte_nrfx_config_get>:
{
    5e76:	460b      	mov	r3, r1
	return dev->driver_data;
    5e78:	6882      	ldr	r2, [r0, #8]
	*cfg = get_dev_data(dev)->uart_config;
    5e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
    5e7e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5e82:	2000      	movs	r0, #0
    5e84:	4770      	bx	lr

00005e86 <uarte_nrfx_err_check>:
	return dev->config->config_info;
    5e86:	6803      	ldr	r3, [r0, #0]
    5e88:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5e8a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5e8c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5e90:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5e94:	4770      	bx	lr

00005e96 <uarte_nrfx_poll_in>:
{
    5e96:	b410      	push	{r4}
	return dev->driver_data;
    5e98:	6884      	ldr	r4, [r0, #8]
	return dev->config->config_info;
    5e9a:	6803      	ldr	r3, [r0, #0]
    5e9c:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5e9e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ea0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5ea4:	b142      	cbz	r2, 5eb8 <uarte_nrfx_poll_in+0x22>
	*c = data->rx_data;
    5ea6:	7b22      	ldrb	r2, [r4, #12]
    5ea8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5eaa:	2000      	movs	r0, #0
    5eac:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5eb0:	2201      	movs	r2, #1
    5eb2:	601a      	str	r2, [r3, #0]
}
    5eb4:	bc10      	pop	{r4}
    5eb6:	4770      	bx	lr
		return -1;
    5eb8:	f04f 30ff 	mov.w	r0, #4294967295
    5ebc:	e7fa      	b.n	5eb4 <uarte_nrfx_poll_in+0x1e>

00005ebe <uarte_nrfx_poll_out>:
{
    5ebe:	b082      	sub	sp, #8
    5ec0:	f88d 1007 	strb.w	r1, [sp, #7]
	return dev->config->config_info;
    5ec4:	6803      	ldr	r3, [r0, #0]
    5ec6:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5ec8:	681a      	ldr	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5eca:	2300      	movs	r3, #0
    5ecc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5ed0:	f10d 0307 	add.w	r3, sp, #7
    5ed4:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5ed8:	2301      	movs	r3, #1
    5eda:	f8c2 3548 	str.w	r3, [r2, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ede:	6093      	str	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ee0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5ee4:	2b00      	cmp	r3, #0
    5ee6:	d0fb      	beq.n	5ee0 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ee8:	2301      	movs	r3, #1
    5eea:	60d3      	str	r3, [r2, #12]
}
    5eec:	b002      	add	sp, #8
    5eee:	4770      	bx	lr

00005ef0 <uarte_nrfx_fifo_fill>:
{
    5ef0:	b470      	push	{r4, r5, r6}
	return dev->config->config_info;
    5ef2:	6803      	ldr	r3, [r0, #0]
    5ef4:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5ef6:	681e      	ldr	r6, [r3, #0]
	return dev->driver_data;
    5ef8:	6885      	ldr	r5, [r0, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5efa:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5efe:	b1cb      	cbz	r3, 5f34 <uarte_nrfx_fifo_fill+0x44>
	if (len > data->int_driven->tx_buff_size) {
    5f00:	68ab      	ldr	r3, [r5, #8]
    5f02:	8998      	ldrh	r0, [r3, #12]
    5f04:	4290      	cmp	r0, r2
    5f06:	db00      	blt.n	5f0a <uarte_nrfx_fifo_fill+0x1a>
    5f08:	4610      	mov	r0, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f0a:	2300      	movs	r3, #0
    5f0c:	f8c6 3120 	str.w	r3, [r6, #288]	; 0x120
	for (int i = 0; i < len; i++) {
    5f10:	4298      	cmp	r0, r3
    5f12:	dd05      	ble.n	5f20 <uarte_nrfx_fifo_fill+0x30>
		data->int_driven->tx_buffer[i] = tx_data[i];
    5f14:	68aa      	ldr	r2, [r5, #8]
    5f16:	6892      	ldr	r2, [r2, #8]
    5f18:	5ccc      	ldrb	r4, [r1, r3]
    5f1a:	54d4      	strb	r4, [r2, r3]
	for (int i = 0; i < len; i++) {
    5f1c:	3301      	adds	r3, #1
    5f1e:	e7f7      	b.n	5f10 <uarte_nrfx_fifo_fill+0x20>
	nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, len);
    5f20:	68ab      	ldr	r3, [r5, #8]
    5f22:	689b      	ldr	r3, [r3, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5f24:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5f28:	f8c6 0548 	str.w	r0, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f2c:	2301      	movs	r3, #1
    5f2e:	60b3      	str	r3, [r6, #8]
}
    5f30:	bc70      	pop	{r4, r5, r6}
    5f32:	4770      	bx	lr
		return 0;
    5f34:	2000      	movs	r0, #0
    5f36:	e7fb      	b.n	5f30 <uarte_nrfx_fifo_fill+0x40>

00005f38 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
    5f38:	6803      	ldr	r3, [r0, #0]
    5f3a:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5f3c:	681b      	ldr	r3, [r3, #0]
	return dev->driver_data;
    5f3e:	6880      	ldr	r0, [r0, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f40:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5f44:	b13a      	cbz	r2, 5f56 <uarte_nrfx_fifo_read+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f46:	2200      	movs	r2, #0
    5f48:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (u8_t)data->rx_data;
    5f4c:	7b02      	ldrb	r2, [r0, #12]
    5f4e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f50:	2001      	movs	r0, #1
    5f52:	6018      	str	r0, [r3, #0]
    5f54:	4770      	bx	lr
	int num_rx = 0;
    5f56:	2000      	movs	r0, #0
}
    5f58:	4770      	bx	lr

00005f5a <uarte_nrfx_irq_tx_enable>:
	return dev->config->config_info;
    5f5a:	6803      	ldr	r3, [r0, #0]
    5f5c:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5f5e:	681b      	ldr	r3, [r3, #0]
	return dev->driver_data;
    5f60:	6882      	ldr	r2, [r0, #8]
	data->int_driven->disable_tx_irq = false;
    5f62:	6892      	ldr	r2, [r2, #8]
    5f64:	2100      	movs	r1, #0
    5f66:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
    5f68:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5f70:	4770      	bx	lr

00005f72 <uarte_nrfx_irq_tx_disable>:
	return dev->driver_data;
    5f72:	6883      	ldr	r3, [r0, #8]
	data->int_driven->disable_tx_irq = true;
    5f74:	689b      	ldr	r3, [r3, #8]
    5f76:	2201      	movs	r2, #1
    5f78:	739a      	strb	r2, [r3, #14]
}
    5f7a:	4770      	bx	lr

00005f7c <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
    5f7c:	6803      	ldr	r3, [r0, #0]
    5f7e:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5f80:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f82:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
    5f86:	b132      	cbz	r2, 5f96 <uarte_nrfx_irq_tx_ready_complete+0x1a>
    return p_reg->INTENSET & mask;
    5f88:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    5f8c:	f413 7f80 	tst.w	r3, #256	; 0x100
    5f90:	d003      	beq.n	5f9a <uarte_nrfx_irq_tx_ready_complete+0x1e>
    5f92:	2001      	movs	r0, #1
    5f94:	4770      	bx	lr
    5f96:	2000      	movs	r0, #0
    5f98:	4770      	bx	lr
    5f9a:	2000      	movs	r0, #0
}
    5f9c:	4770      	bx	lr

00005f9e <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
    5f9e:	6803      	ldr	r3, [r0, #0]
    5fa0:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5fa2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5fa4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    5fa8:	3000      	adds	r0, #0
    5faa:	bf18      	it	ne
    5fac:	2001      	movne	r0, #1
    5fae:	4770      	bx	lr

00005fb0 <uarte_nrfx_irq_rx_enable>:
	return dev->config->config_info;
    5fb0:	6803      	ldr	r3, [r0, #0]
    5fb2:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5fb4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5fb6:	2210      	movs	r2, #16
    5fb8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5fbc:	4770      	bx	lr

00005fbe <uarte_nrfx_irq_rx_disable>:
	return dev->config->config_info;
    5fbe:	6803      	ldr	r3, [r0, #0]
    5fc0:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5fc2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5fc4:	2210      	movs	r2, #16
    5fc6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    5fca:	4770      	bx	lr

00005fcc <uarte_nrfx_irq_err_enable>:
	return dev->config->config_info;
    5fcc:	6803      	ldr	r3, [r0, #0]
    5fce:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5fd0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
    5fd6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5fda:	4770      	bx	lr

00005fdc <uarte_nrfx_irq_err_disable>:
	return dev->config->config_info;
    5fdc:	6803      	ldr	r3, [r0, #0]
    5fde:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5fe0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
    5fe6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    5fea:	4770      	bx	lr

00005fec <uarte_nrfx_irq_is_pending>:
{
    5fec:	b538      	push	{r3, r4, r5, lr}
    5fee:	4605      	mov	r5, r0
	return dev->config->config_info;
    5ff0:	6803      	ldr	r3, [r0, #0]
    5ff2:	689b      	ldr	r3, [r3, #8]
	return config->uarte_regs;
    5ff4:	681c      	ldr	r4, [r3, #0]
    return p_reg->INTENSET & mask;
    5ff6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		||
    5ffa:	f413 7f80 	tst.w	r3, #256	; 0x100
    5ffe:	d107      	bne.n	6010 <uarte_nrfx_irq_is_pending+0x24>
    6000:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    6004:	f013 0f10 	tst.w	r3, #16
    6008:	d108      	bne.n	601c <uarte_nrfx_irq_is_pending+0x30>
    600a:	2300      	movs	r3, #0
}
    600c:	4618      	mov	r0, r3
    600e:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    6010:	f7ff ffb4 	bl	5f7c <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
    6014:	2800      	cmp	r0, #0
    6016:	d0f3      	beq.n	6000 <uarte_nrfx_irq_is_pending+0x14>
		||
    6018:	2301      	movs	r3, #1
    601a:	e7f7      	b.n	600c <uarte_nrfx_irq_is_pending+0x20>
		 uarte_nrfx_irq_rx_ready(dev)));
    601c:	4628      	mov	r0, r5
    601e:	f7ff ffbe 	bl	5f9e <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    6022:	4603      	mov	r3, r0
    6024:	2800      	cmp	r0, #0
    6026:	d0f1      	beq.n	600c <uarte_nrfx_irq_is_pending+0x20>
		||
    6028:	2301      	movs	r3, #1
    602a:	e7ef      	b.n	600c <uarte_nrfx_irq_is_pending+0x20>

0000602c <uarte_nrfx_irq_update>:
}
    602c:	2001      	movs	r0, #1
    602e:	4770      	bx	lr

00006030 <uarte_nrfx_irq_callback_set>:
	return dev->driver_data;
    6030:	6883      	ldr	r3, [r0, #8]
	data->int_driven->cb = cb;
    6032:	6898      	ldr	r0, [r3, #8]
    6034:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    6036:	689b      	ldr	r3, [r3, #8]
    6038:	605a      	str	r2, [r3, #4]
}
    603a:	4770      	bx	lr

0000603c <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    603c:	2000      	movs	r0, #0
    603e:	4770      	bx	lr

00006040 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    6040:	b430      	push	{r4, r5}
    if( ( end - *p ) < 1 )
    6042:	6803      	ldr	r3, [r0, #0]
    6044:	1acd      	subs	r5, r1, r3
    6046:	2d00      	cmp	r5, #0
    6048:	dd4a      	ble.n	60e0 <mbedtls_asn1_get_len+0xa0>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    604a:	781c      	ldrb	r4, [r3, #0]
    604c:	f014 0f80 	tst.w	r4, #128	; 0x80
    6050:	d10b      	bne.n	606a <mbedtls_asn1_get_len+0x2a>
        *len = *(*p)++;
    6052:	1c5c      	adds	r4, r3, #1
    6054:	6004      	str	r4, [r0, #0]
    6056:	781b      	ldrb	r3, [r3, #0]
    6058:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    605a:	6813      	ldr	r3, [r2, #0]
    605c:	6802      	ldr	r2, [r0, #0]
    605e:	1a89      	subs	r1, r1, r2
    6060:	428b      	cmp	r3, r1
    6062:	d84f      	bhi.n	6104 <mbedtls_asn1_get_len+0xc4>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
    6064:	2000      	movs	r0, #0
}
    6066:	bc30      	pop	{r4, r5}
    6068:	4770      	bx	lr
        switch( **p & 0x7F )
    606a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    606e:	3c01      	subs	r4, #1
    6070:	2c03      	cmp	r4, #3
    6072:	d838      	bhi.n	60e6 <mbedtls_asn1_get_len+0xa6>
    6074:	e8df f004 	tbb	[pc, r4]
    6078:	23150a02 	.word	0x23150a02
            if( ( end - *p ) < 2 )
    607c:	2d01      	cmp	r5, #1
    607e:	dd35      	ble.n	60ec <mbedtls_asn1_get_len+0xac>
            *len = (*p)[1];
    6080:	785b      	ldrb	r3, [r3, #1]
    6082:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    6084:	6803      	ldr	r3, [r0, #0]
    6086:	3302      	adds	r3, #2
    6088:	6003      	str	r3, [r0, #0]
            break;
    608a:	e7e6      	b.n	605a <mbedtls_asn1_get_len+0x1a>
            if( ( end - *p ) < 3 )
    608c:	2d02      	cmp	r5, #2
    608e:	dd30      	ble.n	60f2 <mbedtls_asn1_get_len+0xb2>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6090:	785c      	ldrb	r4, [r3, #1]
    6092:	789b      	ldrb	r3, [r3, #2]
    6094:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    6098:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    609a:	6803      	ldr	r3, [r0, #0]
    609c:	3303      	adds	r3, #3
    609e:	6003      	str	r3, [r0, #0]
            break;
    60a0:	e7db      	b.n	605a <mbedtls_asn1_get_len+0x1a>
            if( ( end - *p ) < 4 )
    60a2:	2d03      	cmp	r5, #3
    60a4:	dd28      	ble.n	60f8 <mbedtls_asn1_get_len+0xb8>
            *len = ( (size_t)(*p)[1] << 16 ) |
    60a6:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    60a8:	789c      	ldrb	r4, [r3, #2]
    60aa:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    60ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    60b0:	78db      	ldrb	r3, [r3, #3]
    60b2:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    60b4:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    60b6:	6803      	ldr	r3, [r0, #0]
    60b8:	3304      	adds	r3, #4
    60ba:	6003      	str	r3, [r0, #0]
            break;
    60bc:	e7cd      	b.n	605a <mbedtls_asn1_get_len+0x1a>
            if( ( end - *p ) < 5 )
    60be:	2d04      	cmp	r5, #4
    60c0:	dd1d      	ble.n	60fe <mbedtls_asn1_get_len+0xbe>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    60c2:	785d      	ldrb	r5, [r3, #1]
    60c4:	789c      	ldrb	r4, [r3, #2]
    60c6:	0424      	lsls	r4, r4, #16
    60c8:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
    60cc:	78dd      	ldrb	r5, [r3, #3]
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    60ce:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
    60d2:	791b      	ldrb	r3, [r3, #4]
    60d4:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    60d6:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    60d8:	6803      	ldr	r3, [r0, #0]
    60da:	3305      	adds	r3, #5
    60dc:	6003      	str	r3, [r0, #0]
            break;
    60de:	e7bc      	b.n	605a <mbedtls_asn1_get_len+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    60e0:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    60e4:	e7bf      	b.n	6066 <mbedtls_asn1_get_len+0x26>
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    60e6:	f06f 0063 	mvn.w	r0, #99	; 0x63
    60ea:	e7bc      	b.n	6066 <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    60ec:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    60f0:	e7b9      	b.n	6066 <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    60f2:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    60f6:	e7b6      	b.n	6066 <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    60f8:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    60fc:	e7b3      	b.n	6066 <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    60fe:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6102:	e7b0      	b.n	6066 <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6104:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6108:	e7ad      	b.n	6066 <mbedtls_asn1_get_len+0x26>

0000610a <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    610a:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
    610c:	6804      	ldr	r4, [r0, #0]
    610e:	1b0d      	subs	r5, r1, r4
    6110:	2d00      	cmp	r5, #0
    6112:	dd07      	ble.n	6124 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    6114:	7825      	ldrb	r5, [r4, #0]
    6116:	429d      	cmp	r5, r3
    6118:	d107      	bne.n	612a <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    611a:	3401      	adds	r4, #1
    611c:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
    611e:	f7ff ff8f 	bl	6040 <mbedtls_asn1_get_len>
}
    6122:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6124:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6128:	e7fb      	b.n	6122 <mbedtls_asn1_get_tag+0x18>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    612a:	f06f 0061 	mvn.w	r0, #97	; 0x61
    612e:	e7f8      	b.n	6122 <mbedtls_asn1_get_tag+0x18>

00006130 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    6130:	b530      	push	{r4, r5, lr}
    6132:	b083      	sub	sp, #12
    6134:	4604      	mov	r4, r0
    6136:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    6138:	2302      	movs	r3, #2
    613a:	aa01      	add	r2, sp, #4
    613c:	f7ff ffe5 	bl	610a <mbedtls_asn1_get_tag>
    6140:	4603      	mov	r3, r0
    6142:	b110      	cbz	r0, 614a <mbedtls_asn1_get_mpi+0x1a>
    ret = mbedtls_mpi_read_binary( X, *p, len );

    *p += len;

    return( ret );
}
    6144:	4618      	mov	r0, r3
    6146:	b003      	add	sp, #12
    6148:	bd30      	pop	{r4, r5, pc}
    ret = mbedtls_mpi_read_binary( X, *p, len );
    614a:	9a01      	ldr	r2, [sp, #4]
    614c:	6821      	ldr	r1, [r4, #0]
    614e:	4628      	mov	r0, r5
    6150:	f000 fb00 	bl	6754 <mbedtls_mpi_read_binary>
    6154:	4603      	mov	r3, r0
    *p += len;
    6156:	6822      	ldr	r2, [r4, #0]
    6158:	9901      	ldr	r1, [sp, #4]
    615a:	440a      	add	r2, r1
    615c:	6022      	str	r2, [r4, #0]
    return( ret );
    615e:	e7f1      	b.n	6144 <mbedtls_asn1_get_mpi+0x14>

00006160 <mbedtls_clz>:
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    6160:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
    6164:	2300      	movs	r3, #0
    6166:	2b1f      	cmp	r3, #31
    6168:	d804      	bhi.n	6174 <mbedtls_clz+0x14>
    {
        if( x & mask ) break;
    616a:	4202      	tst	r2, r0
    616c:	d102      	bne.n	6174 <mbedtls_clz+0x14>

        mask >>= 1;
    616e:	0852      	lsrs	r2, r2, #1
    for( j = 0; j < biL; j++ )
    6170:	3301      	adds	r3, #1
    6172:	e7f8      	b.n	6166 <mbedtls_clz+0x6>
    }

    return j;
}
    6174:	4618      	mov	r0, r3
    6176:	4770      	bx	lr

00006178 <mpi_uint_bigendian_to_host_c>:

/* Convert a big-endian byte array aligned to the size of mbedtls_mpi_uint
 * into the storage form used by mbedtls_mpi. */

static mbedtls_mpi_uint mpi_uint_bigendian_to_host_c( mbedtls_mpi_uint x )
{
    6178:	b410      	push	{r4}
    uint8_t i;
    mbedtls_mpi_uint tmp = 0;
    617a:	2400      	movs	r4, #0
    /* This works regardless of the endianness. */
    for( i = 0; i < ciL; i++, x >>= 8 )
    617c:	4623      	mov	r3, r4
    617e:	e008      	b.n	6192 <mpi_uint_bigendian_to_host_c+0x1a>
        tmp |= ( x & 0xFF ) << ( ( ciL - 1 - i ) << 3 );
    6180:	b2c2      	uxtb	r2, r0
    6182:	f1c3 0103 	rsb	r1, r3, #3
    6186:	00c9      	lsls	r1, r1, #3
    6188:	408a      	lsls	r2, r1
    618a:	4314      	orrs	r4, r2
    for( i = 0; i < ciL; i++, x >>= 8 )
    618c:	3301      	adds	r3, #1
    618e:	b2db      	uxtb	r3, r3
    6190:	0a00      	lsrs	r0, r0, #8
    6192:	2b03      	cmp	r3, #3
    6194:	d9f4      	bls.n	6180 <mpi_uint_bigendian_to_host_c+0x8>
    return( tmp );
}
    6196:	4620      	mov	r0, r4
    6198:	bc10      	pop	{r4}
    619a:	4770      	bx	lr

0000619c <mpi_uint_bigendian_to_host>:

static mbedtls_mpi_uint mpi_uint_bigendian_to_host( mbedtls_mpi_uint x )
{
    619c:	b508      	push	{r3, lr}
#endif /* __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ */
#endif /* __BYTE_ORDER__ */

    /* Fall back to C-based reordering if we don't know the byte order
     * or we couldn't use a compiler-specific builtin. */
    return( mpi_uint_bigendian_to_host_c( x ) );
    619e:	f7ff ffeb 	bl	6178 <mpi_uint_bigendian_to_host_c>
}
    61a2:	bd08      	pop	{r3, pc}

000061a4 <mpi_bigendian_to_host>:

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
    61a4:	b1a9      	cbz	r1, 61d2 <mpi_bigendian_to_host+0x2e>
{
    61a6:	b570      	push	{r4, r5, r6, lr}
    61a8:	4605      	mov	r5, r0
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    61aa:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    61ae:	3c01      	subs	r4, #1
    61b0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    61b4:	42a5      	cmp	r5, r4
    61b6:	d80b      	bhi.n	61d0 <mpi_bigendian_to_host+0x2c>
         cur_limb_left++, cur_limb_right-- )
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    61b8:	6828      	ldr	r0, [r5, #0]
    61ba:	f7ff ffef 	bl	619c <mpi_uint_bigendian_to_host>
    61be:	4606      	mov	r6, r0
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    61c0:	6820      	ldr	r0, [r4, #0]
    61c2:	f7ff ffeb 	bl	619c <mpi_uint_bigendian_to_host>
    61c6:	f845 0b04 	str.w	r0, [r5], #4
        *cur_limb_right = tmp;
    61ca:	f844 6904 	str.w	r6, [r4], #-4
    61ce:	e7f1      	b.n	61b4 <mpi_bigendian_to_host+0x10>
    }
}
    61d0:	bd70      	pop	{r4, r5, r6, pc}
    61d2:	4770      	bx	lr

000061d4 <mpi_sub_hlp>:

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    61d4:	b4f0      	push	{r4, r5, r6, r7}
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
    61d6:	2300      	movs	r3, #0
    61d8:	461d      	mov	r5, r3
    61da:	4285      	cmp	r5, r0
    61dc:	d21c      	bcs.n	6218 <mpi_sub_hlp+0x44>
    {
        z = ( *d <  c );     *d -=  c;
    61de:	6817      	ldr	r7, [r2, #0]
    61e0:	1afc      	subs	r4, r7, r3
    61e2:	6014      	str	r4, [r2, #0]
        c = ( *d < *s ) + z; *d -= *s;
    61e4:	f851 6b04 	ldr.w	r6, [r1], #4
    61e8:	42b4      	cmp	r4, r6
    61ea:	bf2c      	ite	cs
    61ec:	f04f 0c00 	movcs.w	ip, #0
    61f0:	f04f 0c01 	movcc.w	ip, #1
    61f4:	429f      	cmp	r7, r3
    61f6:	bf2c      	ite	cs
    61f8:	4663      	movcs	r3, ip
    61fa:	f10c 0301 	addcc.w	r3, ip, #1
    61fe:	1ba4      	subs	r4, r4, r6
    6200:	f842 4b04 	str.w	r4, [r2], #4
    for( i = c = 0; i < n; i++, s++, d++ )
    6204:	3501      	adds	r5, #1
    6206:	e7e8      	b.n	61da <mpi_sub_hlp+0x6>
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
    6208:	6811      	ldr	r1, [r2, #0]
    620a:	1ac8      	subs	r0, r1, r3
    620c:	f842 0b04 	str.w	r0, [r2], #4
        c = z; d++;
    6210:	4299      	cmp	r1, r3
    6212:	bf2c      	ite	cs
    6214:	2300      	movcs	r3, #0
    6216:	2301      	movcc	r3, #1
    while( c != 0 )
    6218:	2b00      	cmp	r3, #0
    621a:	d1f5      	bne.n	6208 <mpi_sub_hlp+0x34>
    }
}
    621c:	bcf0      	pop	{r4, r5, r6, r7}
    621e:	4770      	bx	lr

00006220 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    6220:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    mbedtls_mpi_uint c = 0, t = 0;
    6224:	2400      	movs	r4, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    6226:	280f      	cmp	r0, #15
    6228:	f240 8173 	bls.w	6512 <mpi_mul_hlp+0x2f2>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    622c:	680d      	ldr	r5, [r1, #0]
    622e:	fba5 8903 	umull	r8, r9, r5, r3
    6232:	eb14 0408 	adds.w	r4, r4, r8
    6236:	bf2c      	ite	cs
    6238:	2501      	movcs	r5, #1
    623a:	2500      	movcc	r5, #0
    623c:	eb05 0709 	add.w	r7, r5, r9
    6240:	6816      	ldr	r6, [r2, #0]
    6242:	1936      	adds	r6, r6, r4
    6244:	bf2c      	ite	cs
    6246:	2501      	movcs	r5, #1
    6248:	2500      	movcc	r5, #0
    624a:	443d      	add	r5, r7
    624c:	6016      	str	r6, [r2, #0]
    624e:	684e      	ldr	r6, [r1, #4]
    6250:	fba3 6706 	umull	r6, r7, r3, r6
    6254:	19ad      	adds	r5, r5, r6
    6256:	bf2c      	ite	cs
    6258:	2401      	movcs	r4, #1
    625a:	2400      	movcc	r4, #0
    625c:	4427      	add	r7, r4
    625e:	6856      	ldr	r6, [r2, #4]
    6260:	1975      	adds	r5, r6, r5
    6262:	bf2c      	ite	cs
    6264:	2401      	movcs	r4, #1
    6266:	2400      	movcc	r4, #0
    6268:	443c      	add	r4, r7
    626a:	6055      	str	r5, [r2, #4]
        MULADDC_CORE   MULADDC_CORE
    626c:	688e      	ldr	r6, [r1, #8]
    626e:	fba3 7806 	umull	r7, r8, r3, r6
    6272:	19e4      	adds	r4, r4, r7
    6274:	bf2c      	ite	cs
    6276:	2601      	movcs	r6, #1
    6278:	2600      	movcc	r6, #0
    627a:	4446      	add	r6, r8
    627c:	6895      	ldr	r5, [r2, #8]
    627e:	192d      	adds	r5, r5, r4
    6280:	bf2c      	ite	cs
    6282:	2401      	movcs	r4, #1
    6284:	2400      	movcc	r4, #0
    6286:	4434      	add	r4, r6
    6288:	6095      	str	r5, [r2, #8]
    628a:	68ce      	ldr	r6, [r1, #12]
    628c:	fba3 7806 	umull	r7, r8, r3, r6
    6290:	19e4      	adds	r4, r4, r7
    6292:	bf2c      	ite	cs
    6294:	2601      	movcs	r6, #1
    6296:	2600      	movcc	r6, #0
    6298:	4446      	add	r6, r8
    629a:	68d5      	ldr	r5, [r2, #12]
    629c:	192d      	adds	r5, r5, r4
    629e:	bf2c      	ite	cs
    62a0:	2401      	movcs	r4, #1
    62a2:	2400      	movcc	r4, #0
    62a4:	4434      	add	r4, r6
    62a6:	60d5      	str	r5, [r2, #12]
        MULADDC_CORE   MULADDC_CORE
    62a8:	690e      	ldr	r6, [r1, #16]
    62aa:	fba3 7806 	umull	r7, r8, r3, r6
    62ae:	19e4      	adds	r4, r4, r7
    62b0:	bf2c      	ite	cs
    62b2:	2601      	movcs	r6, #1
    62b4:	2600      	movcc	r6, #0
    62b6:	4446      	add	r6, r8
    62b8:	6915      	ldr	r5, [r2, #16]
    62ba:	192d      	adds	r5, r5, r4
    62bc:	bf2c      	ite	cs
    62be:	2401      	movcs	r4, #1
    62c0:	2400      	movcc	r4, #0
    62c2:	4434      	add	r4, r6
    62c4:	6115      	str	r5, [r2, #16]
    62c6:	694e      	ldr	r6, [r1, #20]
    62c8:	fba3 7806 	umull	r7, r8, r3, r6
    62cc:	19e4      	adds	r4, r4, r7
    62ce:	bf2c      	ite	cs
    62d0:	2601      	movcs	r6, #1
    62d2:	2600      	movcc	r6, #0
    62d4:	4446      	add	r6, r8
    62d6:	6955      	ldr	r5, [r2, #20]
    62d8:	192d      	adds	r5, r5, r4
    62da:	bf2c      	ite	cs
    62dc:	2401      	movcs	r4, #1
    62de:	2400      	movcc	r4, #0
    62e0:	4434      	add	r4, r6
    62e2:	6155      	str	r5, [r2, #20]
        MULADDC_CORE   MULADDC_CORE
    62e4:	698e      	ldr	r6, [r1, #24]
    62e6:	fba3 7806 	umull	r7, r8, r3, r6
    62ea:	19e4      	adds	r4, r4, r7
    62ec:	bf2c      	ite	cs
    62ee:	2601      	movcs	r6, #1
    62f0:	2600      	movcc	r6, #0
    62f2:	4446      	add	r6, r8
    62f4:	6995      	ldr	r5, [r2, #24]
    62f6:	192d      	adds	r5, r5, r4
    62f8:	bf2c      	ite	cs
    62fa:	2401      	movcs	r4, #1
    62fc:	2400      	movcc	r4, #0
    62fe:	4434      	add	r4, r6
    6300:	6195      	str	r5, [r2, #24]
    6302:	69ce      	ldr	r6, [r1, #28]
    6304:	fba3 7806 	umull	r7, r8, r3, r6
    6308:	19e4      	adds	r4, r4, r7
    630a:	bf2c      	ite	cs
    630c:	2601      	movcs	r6, #1
    630e:	2600      	movcc	r6, #0
    6310:	4446      	add	r6, r8
    6312:	69d5      	ldr	r5, [r2, #28]
    6314:	192d      	adds	r5, r5, r4
    6316:	bf2c      	ite	cs
    6318:	2401      	movcs	r4, #1
    631a:	2400      	movcc	r4, #0
    631c:	4434      	add	r4, r6
    631e:	61d5      	str	r5, [r2, #28]

        MULADDC_CORE   MULADDC_CORE
    6320:	6a0e      	ldr	r6, [r1, #32]
    6322:	fba3 7806 	umull	r7, r8, r3, r6
    6326:	19e4      	adds	r4, r4, r7
    6328:	bf2c      	ite	cs
    632a:	2601      	movcs	r6, #1
    632c:	2600      	movcc	r6, #0
    632e:	4446      	add	r6, r8
    6330:	6a15      	ldr	r5, [r2, #32]
    6332:	192d      	adds	r5, r5, r4
    6334:	bf2c      	ite	cs
    6336:	2401      	movcs	r4, #1
    6338:	2400      	movcc	r4, #0
    633a:	4434      	add	r4, r6
    633c:	6215      	str	r5, [r2, #32]
    633e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
    6340:	fba3 7806 	umull	r7, r8, r3, r6
    6344:	19e4      	adds	r4, r4, r7
    6346:	bf2c      	ite	cs
    6348:	2601      	movcs	r6, #1
    634a:	2600      	movcc	r6, #0
    634c:	4446      	add	r6, r8
    634e:	6a55      	ldr	r5, [r2, #36]	; 0x24
    6350:	192d      	adds	r5, r5, r4
    6352:	bf2c      	ite	cs
    6354:	2401      	movcs	r4, #1
    6356:	2400      	movcc	r4, #0
    6358:	4434      	add	r4, r6
    635a:	6255      	str	r5, [r2, #36]	; 0x24
        MULADDC_CORE   MULADDC_CORE
    635c:	6a8e      	ldr	r6, [r1, #40]	; 0x28
    635e:	fba3 7806 	umull	r7, r8, r3, r6
    6362:	19e4      	adds	r4, r4, r7
    6364:	bf2c      	ite	cs
    6366:	2601      	movcs	r6, #1
    6368:	2600      	movcc	r6, #0
    636a:	4446      	add	r6, r8
    636c:	6a95      	ldr	r5, [r2, #40]	; 0x28
    636e:	192d      	adds	r5, r5, r4
    6370:	bf2c      	ite	cs
    6372:	2401      	movcs	r4, #1
    6374:	2400      	movcc	r4, #0
    6376:	4434      	add	r4, r6
    6378:	6295      	str	r5, [r2, #40]	; 0x28
    637a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
    637c:	fba3 7806 	umull	r7, r8, r3, r6
    6380:	19e4      	adds	r4, r4, r7
    6382:	bf2c      	ite	cs
    6384:	2601      	movcs	r6, #1
    6386:	2600      	movcc	r6, #0
    6388:	4446      	add	r6, r8
    638a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    638c:	192d      	adds	r5, r5, r4
    638e:	bf2c      	ite	cs
    6390:	2401      	movcs	r4, #1
    6392:	2400      	movcc	r4, #0
    6394:	4434      	add	r4, r6
    6396:	62d5      	str	r5, [r2, #44]	; 0x2c
        MULADDC_CORE   MULADDC_CORE
    6398:	6b0e      	ldr	r6, [r1, #48]	; 0x30
    639a:	fba3 7806 	umull	r7, r8, r3, r6
    639e:	19e4      	adds	r4, r4, r7
    63a0:	bf2c      	ite	cs
    63a2:	2601      	movcs	r6, #1
    63a4:	2600      	movcc	r6, #0
    63a6:	4446      	add	r6, r8
    63a8:	6b15      	ldr	r5, [r2, #48]	; 0x30
    63aa:	192d      	adds	r5, r5, r4
    63ac:	bf2c      	ite	cs
    63ae:	2401      	movcs	r4, #1
    63b0:	2400      	movcc	r4, #0
    63b2:	4434      	add	r4, r6
    63b4:	6315      	str	r5, [r2, #48]	; 0x30
    63b6:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    63b8:	fba3 7806 	umull	r7, r8, r3, r6
    63bc:	19e4      	adds	r4, r4, r7
    63be:	bf2c      	ite	cs
    63c0:	2601      	movcs	r6, #1
    63c2:	2600      	movcc	r6, #0
    63c4:	4446      	add	r6, r8
    63c6:	6b55      	ldr	r5, [r2, #52]	; 0x34
    63c8:	192d      	adds	r5, r5, r4
    63ca:	bf2c      	ite	cs
    63cc:	2401      	movcs	r4, #1
    63ce:	2400      	movcc	r4, #0
    63d0:	4434      	add	r4, r6
    63d2:	6355      	str	r5, [r2, #52]	; 0x34
        MULADDC_CORE   MULADDC_CORE
    63d4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    63d6:	fba3 7806 	umull	r7, r8, r3, r6
    63da:	19e4      	adds	r4, r4, r7
    63dc:	bf2c      	ite	cs
    63de:	2601      	movcs	r6, #1
    63e0:	2600      	movcc	r6, #0
    63e2:	4446      	add	r6, r8
    63e4:	6b95      	ldr	r5, [r2, #56]	; 0x38
    63e6:	192d      	adds	r5, r5, r4
    63e8:	bf2c      	ite	cs
    63ea:	2401      	movcs	r4, #1
    63ec:	2400      	movcc	r4, #0
    63ee:	4434      	add	r4, r6
    63f0:	6395      	str	r5, [r2, #56]	; 0x38
    63f2:	6bce      	ldr	r6, [r1, #60]	; 0x3c
    63f4:	fba3 7806 	umull	r7, r8, r3, r6
    63f8:	19e4      	adds	r4, r4, r7
    63fa:	bf2c      	ite	cs
    63fc:	2601      	movcs	r6, #1
    63fe:	2600      	movcc	r6, #0
    6400:	4446      	add	r6, r8
    6402:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    6404:	192d      	adds	r5, r5, r4
    6406:	bf2c      	ite	cs
    6408:	2401      	movcs	r4, #1
    640a:	2400      	movcc	r4, #0
    640c:	4434      	add	r4, r6
    640e:	63d5      	str	r5, [r2, #60]	; 0x3c
    for( ; i >= 16; i -= 16 )
    6410:	3810      	subs	r0, #16
        MULADDC_CORE   MULADDC_CORE
    6412:	3240      	adds	r2, #64	; 0x40
    6414:	3140      	adds	r1, #64	; 0x40
    6416:	e706      	b.n	6226 <mpi_mul_hlp+0x6>
    }

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    6418:	680d      	ldr	r5, [r1, #0]
    641a:	fba5 8903 	umull	r8, r9, r5, r3
    641e:	eb14 0408 	adds.w	r4, r4, r8
    6422:	bf2c      	ite	cs
    6424:	2501      	movcs	r5, #1
    6426:	2500      	movcc	r5, #0
    6428:	eb05 0709 	add.w	r7, r5, r9
    642c:	6816      	ldr	r6, [r2, #0]
    642e:	1936      	adds	r6, r6, r4
    6430:	bf2c      	ite	cs
    6432:	2501      	movcs	r5, #1
    6434:	2500      	movcc	r5, #0
    6436:	443d      	add	r5, r7
    6438:	6016      	str	r6, [r2, #0]
    643a:	684e      	ldr	r6, [r1, #4]
    643c:	fba3 6706 	umull	r6, r7, r3, r6
    6440:	19ad      	adds	r5, r5, r6
    6442:	bf2c      	ite	cs
    6444:	2401      	movcs	r4, #1
    6446:	2400      	movcc	r4, #0
    6448:	4427      	add	r7, r4
    644a:	6856      	ldr	r6, [r2, #4]
    644c:	1975      	adds	r5, r6, r5
    644e:	bf2c      	ite	cs
    6450:	2401      	movcs	r4, #1
    6452:	2400      	movcc	r4, #0
    6454:	443c      	add	r4, r7
    6456:	6055      	str	r5, [r2, #4]
        MULADDC_CORE   MULADDC_CORE
    6458:	688e      	ldr	r6, [r1, #8]
    645a:	fba3 7806 	umull	r7, r8, r3, r6
    645e:	19e4      	adds	r4, r4, r7
    6460:	bf2c      	ite	cs
    6462:	2601      	movcs	r6, #1
    6464:	2600      	movcc	r6, #0
    6466:	4446      	add	r6, r8
    6468:	6895      	ldr	r5, [r2, #8]
    646a:	192d      	adds	r5, r5, r4
    646c:	bf2c      	ite	cs
    646e:	2401      	movcs	r4, #1
    6470:	2400      	movcc	r4, #0
    6472:	4434      	add	r4, r6
    6474:	6095      	str	r5, [r2, #8]
    6476:	68ce      	ldr	r6, [r1, #12]
    6478:	fba3 7806 	umull	r7, r8, r3, r6
    647c:	19e4      	adds	r4, r4, r7
    647e:	bf2c      	ite	cs
    6480:	2601      	movcs	r6, #1
    6482:	2600      	movcc	r6, #0
    6484:	4446      	add	r6, r8
    6486:	68d5      	ldr	r5, [r2, #12]
    6488:	192d      	adds	r5, r5, r4
    648a:	bf2c      	ite	cs
    648c:	2401      	movcs	r4, #1
    648e:	2400      	movcc	r4, #0
    6490:	4434      	add	r4, r6
    6492:	60d5      	str	r5, [r2, #12]

        MULADDC_CORE   MULADDC_CORE
    6494:	690e      	ldr	r6, [r1, #16]
    6496:	fba3 7806 	umull	r7, r8, r3, r6
    649a:	19e4      	adds	r4, r4, r7
    649c:	bf2c      	ite	cs
    649e:	2601      	movcs	r6, #1
    64a0:	2600      	movcc	r6, #0
    64a2:	4446      	add	r6, r8
    64a4:	6915      	ldr	r5, [r2, #16]
    64a6:	192d      	adds	r5, r5, r4
    64a8:	bf2c      	ite	cs
    64aa:	2401      	movcs	r4, #1
    64ac:	2400      	movcc	r4, #0
    64ae:	4434      	add	r4, r6
    64b0:	6115      	str	r5, [r2, #16]
    64b2:	694e      	ldr	r6, [r1, #20]
    64b4:	fba3 7806 	umull	r7, r8, r3, r6
    64b8:	19e4      	adds	r4, r4, r7
    64ba:	bf2c      	ite	cs
    64bc:	2601      	movcs	r6, #1
    64be:	2600      	movcc	r6, #0
    64c0:	4446      	add	r6, r8
    64c2:	6955      	ldr	r5, [r2, #20]
    64c4:	192d      	adds	r5, r5, r4
    64c6:	bf2c      	ite	cs
    64c8:	2401      	movcs	r4, #1
    64ca:	2400      	movcc	r4, #0
    64cc:	4434      	add	r4, r6
    64ce:	6155      	str	r5, [r2, #20]
        MULADDC_CORE   MULADDC_CORE
    64d0:	698e      	ldr	r6, [r1, #24]
    64d2:	fba3 7806 	umull	r7, r8, r3, r6
    64d6:	19e4      	adds	r4, r4, r7
    64d8:	bf2c      	ite	cs
    64da:	2601      	movcs	r6, #1
    64dc:	2600      	movcc	r6, #0
    64de:	4446      	add	r6, r8
    64e0:	6995      	ldr	r5, [r2, #24]
    64e2:	192d      	adds	r5, r5, r4
    64e4:	bf2c      	ite	cs
    64e6:	2401      	movcs	r4, #1
    64e8:	2400      	movcc	r4, #0
    64ea:	4434      	add	r4, r6
    64ec:	6195      	str	r5, [r2, #24]
    64ee:	69ce      	ldr	r6, [r1, #28]
    64f0:	fba3 7806 	umull	r7, r8, r3, r6
    64f4:	19e4      	adds	r4, r4, r7
    64f6:	bf2c      	ite	cs
    64f8:	2601      	movcs	r6, #1
    64fa:	2600      	movcc	r6, #0
    64fc:	4446      	add	r6, r8
    64fe:	69d5      	ldr	r5, [r2, #28]
    6500:	192d      	adds	r5, r5, r4
    6502:	bf2c      	ite	cs
    6504:	2401      	movcs	r4, #1
    6506:	2400      	movcc	r4, #0
    6508:	4434      	add	r4, r6
    650a:	61d5      	str	r5, [r2, #28]
    for( ; i >= 8; i -= 8 )
    650c:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
    650e:	3220      	adds	r2, #32
    6510:	3120      	adds	r1, #32
    for( ; i >= 8; i -= 8 )
    6512:	2807      	cmp	r0, #7
    6514:	d880      	bhi.n	6418 <mpi_mul_hlp+0x1f8>
    6516:	e011      	b.n	653c <mpi_mul_hlp+0x31c>
    }

    for( ; i > 0; i-- )
    {
        MULADDC_INIT
        MULADDC_CORE
    6518:	f851 6b04 	ldr.w	r6, [r1], #4
    651c:	fba6 7803 	umull	r7, r8, r6, r3
    6520:	19e4      	adds	r4, r4, r7
    6522:	bf2c      	ite	cs
    6524:	2601      	movcs	r6, #1
    6526:	2600      	movcc	r6, #0
    6528:	4446      	add	r6, r8
    652a:	6815      	ldr	r5, [r2, #0]
    652c:	192d      	adds	r5, r5, r4
    652e:	bf2c      	ite	cs
    6530:	2401      	movcs	r4, #1
    6532:	2400      	movcc	r4, #0
    6534:	4434      	add	r4, r6
    6536:	f842 5b04 	str.w	r5, [r2], #4
    for( ; i > 0; i-- )
    653a:	3801      	subs	r0, #1
    653c:	2800      	cmp	r0, #0
    653e:	d1eb      	bne.n	6518 <mpi_mul_hlp+0x2f8>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
    6540:	6813      	ldr	r3, [r2, #0]
    6542:	4423      	add	r3, r4
    6544:	f842 3b04 	str.w	r3, [r2], #4
    6548:	42a3      	cmp	r3, r4
    654a:	bf34      	ite	cc
    654c:	2401      	movcc	r4, #1
    654e:	2400      	movcs	r4, #0
    }
    while( c != 0 );
    6550:	d3f6      	bcc.n	6540 <mpi_mul_hlp+0x320>
}
    6552:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    6556:	4770      	bx	lr

00006558 <mbedtls_int_div_int>:
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
    6558:	b1e2      	cbz	r2, 6594 <mbedtls_int_div_int+0x3c>
{
    655a:	b570      	push	{r4, r5, r6, lr}
    655c:	4616      	mov	r6, r2
    if( 0 == d || u1 >= d )
    655e:	4282      	cmp	r2, r0
    6560:	d911      	bls.n	6586 <mbedtls_int_div_int+0x2e>
    6562:	461d      	mov	r5, r3
    6564:	460c      	mov	r4, r1
    6566:	4601      	mov	r1, r0
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
    6568:	2300      	movs	r3, #0
    656a:	4620      	mov	r0, r4
    656c:	f7f9 fdea 	bl	144 <__aeabi_uldivmod>
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    6570:	2901      	cmp	r1, #1
    6572:	bf08      	it	eq
    6574:	2800      	cmpeq	r0, #0
    6576:	d301      	bcc.n	657c <mbedtls_int_div_int+0x24>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;
    6578:	f04f 30ff 	mov.w	r0, #4294967295

    if( r != NULL )
    657c:	b115      	cbz	r5, 6584 <mbedtls_int_div_int+0x2c>
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );
    657e:	fb06 4410 	mls	r4, r6, r0, r4
    6582:	602c      	str	r4, [r5, #0]

    quotient = q1 * radix + q0;

    return quotient;
#endif
}
    6584:	bd70      	pop	{r4, r5, r6, pc}
        if (r != NULL) *r = ~0;
    6586:	b113      	cbz	r3, 658e <mbedtls_int_div_int+0x36>
    6588:	f04f 32ff 	mov.w	r2, #4294967295
    658c:	601a      	str	r2, [r3, #0]
        return ( ~0 );
    658e:	f04f 30ff 	mov.w	r0, #4294967295
    6592:	e7f7      	b.n	6584 <mbedtls_int_div_int+0x2c>
        if (r != NULL) *r = ~0;
    6594:	b113      	cbz	r3, 659c <mbedtls_int_div_int+0x44>
    6596:	f04f 32ff 	mov.w	r2, #4294967295
    659a:	601a      	str	r2, [r3, #0]
        return ( ~0 );
    659c:	f04f 30ff 	mov.w	r0, #4294967295
}
    65a0:	4770      	bx	lr

000065a2 <mpi_montg_init>:

/*
 * Fast Montgomery initialization (thanks to Tom St Denis)
 */
static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
{
    65a2:	b410      	push	{r4}
    mbedtls_mpi_uint x, m0 = N->p[0];
    65a4:	688b      	ldr	r3, [r1, #8]
    65a6:	681c      	ldr	r4, [r3, #0]
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
    65a8:	1ca3      	adds	r3, r4, #2
    65aa:	005b      	lsls	r3, r3, #1
    65ac:	f003 0308 	and.w	r3, r3, #8
    65b0:	4423      	add	r3, r4

    for( i = biL; i >= 8; i /= 2 )
    65b2:	2120      	movs	r1, #32
    65b4:	2907      	cmp	r1, #7
    65b6:	d907      	bls.n	65c8 <mpi_montg_init+0x26>
        x *= ( 2 - ( m0 * x ) );
    65b8:	fb04 f203 	mul.w	r2, r4, r3
    65bc:	f1c2 0202 	rsb	r2, r2, #2
    65c0:	fb02 f303 	mul.w	r3, r2, r3
    for( i = biL; i >= 8; i /= 2 )
    65c4:	0849      	lsrs	r1, r1, #1
    65c6:	e7f5      	b.n	65b4 <mpi_montg_init+0x12>

    *mm = ~x + 1;
    65c8:	425b      	negs	r3, r3
    65ca:	6003      	str	r3, [r0, #0]
}
    65cc:	bc10      	pop	{r4}
    65ce:	4770      	bx	lr

000065d0 <mbedtls_mpi_zeroize>:
{
    65d0:	b508      	push	{r3, lr}
    mbedtls_platform_zeroize( v, ciL * n );
    65d2:	0089      	lsls	r1, r1, #2
    65d4:	f7fc fe2c 	bl	3230 <mbedtls_platform_zeroize>
}
    65d8:	bd08      	pop	{r3, pc}

000065da <mbedtls_mpi_init>:
    X->s = 1;
    65da:	2301      	movs	r3, #1
    65dc:	6003      	str	r3, [r0, #0]
    X->n = 0;
    65de:	2300      	movs	r3, #0
    65e0:	6043      	str	r3, [r0, #4]
    X->p = NULL;
    65e2:	6083      	str	r3, [r0, #8]
}
    65e4:	4770      	bx	lr

000065e6 <mbedtls_mpi_free>:
    if( X == NULL )
    65e6:	b178      	cbz	r0, 6608 <mbedtls_mpi_free+0x22>
{
    65e8:	b510      	push	{r4, lr}
    65ea:	4604      	mov	r4, r0
    if( X->p != NULL )
    65ec:	6880      	ldr	r0, [r0, #8]
    65ee:	b128      	cbz	r0, 65fc <mbedtls_mpi_free+0x16>
        mbedtls_mpi_zeroize( X->p, X->n );
    65f0:	6861      	ldr	r1, [r4, #4]
    65f2:	f7ff ffed 	bl	65d0 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
    65f6:	68a0      	ldr	r0, [r4, #8]
    65f8:	f7fc fe08 	bl	320c <mbedtls_free>
    X->s = 1;
    65fc:	2301      	movs	r3, #1
    65fe:	6023      	str	r3, [r4, #0]
    X->n = 0;
    6600:	2300      	movs	r3, #0
    6602:	6063      	str	r3, [r4, #4]
    X->p = NULL;
    6604:	60a3      	str	r3, [r4, #8]
}
    6606:	bd10      	pop	{r4, pc}
    6608:	4770      	bx	lr

0000660a <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    660a:	f242 7310 	movw	r3, #10000	; 0x2710
    660e:	4299      	cmp	r1, r3
    6610:	d81e      	bhi.n	6650 <mbedtls_mpi_grow+0x46>
    if( X->n < nblimbs )
    6612:	6843      	ldr	r3, [r0, #4]
    6614:	428b      	cmp	r3, r1
    6616:	d301      	bcc.n	661c <mbedtls_mpi_grow+0x12>
    return( 0 );
    6618:	2000      	movs	r0, #0
}
    661a:	4770      	bx	lr
{
    661c:	b570      	push	{r4, r5, r6, lr}
    661e:	460d      	mov	r5, r1
    6620:	4604      	mov	r4, r0
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    6622:	2104      	movs	r1, #4
    6624:	4628      	mov	r0, r5
    6626:	f7fc fde9 	bl	31fc <mbedtls_calloc>
    662a:	4606      	mov	r6, r0
    662c:	b198      	cbz	r0, 6656 <mbedtls_mpi_grow+0x4c>
        if( X->p != NULL )
    662e:	68a1      	ldr	r1, [r4, #8]
    6630:	b151      	cbz	r1, 6648 <mbedtls_mpi_grow+0x3e>
            memcpy( p, X->p, X->n * ciL );
    6632:	6862      	ldr	r2, [r4, #4]
    6634:	0092      	lsls	r2, r2, #2
    6636:	f7ff f9c7 	bl	59c8 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
    663a:	6861      	ldr	r1, [r4, #4]
    663c:	68a0      	ldr	r0, [r4, #8]
    663e:	f7ff ffc7 	bl	65d0 <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
    6642:	68a0      	ldr	r0, [r4, #8]
    6644:	f7fc fde2 	bl	320c <mbedtls_free>
        X->n = nblimbs;
    6648:	6065      	str	r5, [r4, #4]
        X->p = p;
    664a:	60a6      	str	r6, [r4, #8]
    return( 0 );
    664c:	2000      	movs	r0, #0
}
    664e:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    6650:	f06f 000f 	mvn.w	r0, #15
    6654:	4770      	bx	lr
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    6656:	f06f 000f 	mvn.w	r0, #15
    665a:	e7f8      	b.n	664e <mbedtls_mpi_grow+0x44>

0000665c <mbedtls_mpi_copy>:
{
    665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( X == Y )
    665e:	4288      	cmp	r0, r1
    6660:	d02c      	beq.n	66bc <mbedtls_mpi_copy+0x60>
    6662:	460d      	mov	r5, r1
    6664:	4606      	mov	r6, r0
    if( Y->p == NULL )
    6666:	688c      	ldr	r4, [r1, #8]
    6668:	b13c      	cbz	r4, 667a <mbedtls_mpi_copy+0x1e>
    for( i = Y->n - 1; i > 0; i-- )
    666a:	684b      	ldr	r3, [r1, #4]
    666c:	3b01      	subs	r3, #1
    666e:	b143      	cbz	r3, 6682 <mbedtls_mpi_copy+0x26>
        if( Y->p[i] != 0 )
    6670:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    6674:	b92a      	cbnz	r2, 6682 <mbedtls_mpi_copy+0x26>
    for( i = Y->n - 1; i > 0; i-- )
    6676:	3b01      	subs	r3, #1
    6678:	e7f9      	b.n	666e <mbedtls_mpi_copy+0x12>
        mbedtls_mpi_free( X );
    667a:	f7ff ffb4 	bl	65e6 <mbedtls_mpi_free>
        return( 0 );
    667e:	2700      	movs	r7, #0
    6680:	e01a      	b.n	66b8 <mbedtls_mpi_copy+0x5c>
    i++;
    6682:	1c5c      	adds	r4, r3, #1
    X->s = Y->s;
    6684:	682b      	ldr	r3, [r5, #0]
    6686:	6033      	str	r3, [r6, #0]
    if( X->n < i )
    6688:	6872      	ldr	r2, [r6, #4]
    668a:	42a2      	cmp	r2, r4
    668c:	d206      	bcs.n	669c <mbedtls_mpi_copy+0x40>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    668e:	4621      	mov	r1, r4
    6690:	4630      	mov	r0, r6
    6692:	f7ff ffba 	bl	660a <mbedtls_mpi_grow>
    6696:	4607      	mov	r7, r0
    6698:	b148      	cbz	r0, 66ae <mbedtls_mpi_copy+0x52>
    669a:	e00d      	b.n	66b8 <mbedtls_mpi_copy+0x5c>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    669c:	68b0      	ldr	r0, [r6, #8]
    669e:	1b12      	subs	r2, r2, r4
    66a0:	0092      	lsls	r2, r2, #2
    66a2:	2100      	movs	r1, #0
    66a4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    66a8:	f7ff f9b1 	bl	5a0e <memset>
    int ret = 0;
    66ac:	2700      	movs	r7, #0
    memcpy( X->p, Y->p, i * ciL );
    66ae:	00a2      	lsls	r2, r4, #2
    66b0:	68a9      	ldr	r1, [r5, #8]
    66b2:	68b0      	ldr	r0, [r6, #8]
    66b4:	f7ff f988 	bl	59c8 <memcpy>
}
    66b8:	4638      	mov	r0, r7
    66ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( 0 );
    66bc:	2700      	movs	r7, #0
    66be:	e7fb      	b.n	66b8 <mbedtls_mpi_copy+0x5c>

000066c0 <mbedtls_mpi_lset>:
{
    66c0:	b570      	push	{r4, r5, r6, lr}
    66c2:	4604      	mov	r4, r0
    66c4:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    66c6:	2101      	movs	r1, #1
    66c8:	f7ff ff9f 	bl	660a <mbedtls_mpi_grow>
    66cc:	4605      	mov	r5, r0
    66ce:	b108      	cbz	r0, 66d4 <mbedtls_mpi_lset+0x14>
}
    66d0:	4628      	mov	r0, r5
    66d2:	bd70      	pop	{r4, r5, r6, pc}
    memset( X->p, 0, X->n * ciL );
    66d4:	6862      	ldr	r2, [r4, #4]
    66d6:	0092      	lsls	r2, r2, #2
    66d8:	2100      	movs	r1, #0
    66da:	68a0      	ldr	r0, [r4, #8]
    66dc:	f7ff f997 	bl	5a0e <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    66e0:	68a3      	ldr	r3, [r4, #8]
    66e2:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    66e6:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    66ea:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    66ec:	2e00      	cmp	r6, #0
    66ee:	db02      	blt.n	66f6 <mbedtls_mpi_lset+0x36>
    66f0:	2301      	movs	r3, #1
    66f2:	6023      	str	r3, [r4, #0]
    return( ret );
    66f4:	e7ec      	b.n	66d0 <mbedtls_mpi_lset+0x10>
    X->s    = ( z < 0 ) ? -1 : 1;
    66f6:	f04f 33ff 	mov.w	r3, #4294967295
    66fa:	e7fa      	b.n	66f2 <mbedtls_mpi_lset+0x32>

000066fc <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    66fc:	6843      	ldr	r3, [r0, #4]
    66fe:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    6702:	d209      	bcs.n	6718 <mbedtls_mpi_get_bit+0x1c>
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    6704:	6883      	ldr	r3, [r0, #8]
    6706:	094a      	lsrs	r2, r1, #5
    6708:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    670c:	f001 011f 	and.w	r1, r1, #31
    6710:	40c8      	lsrs	r0, r1
    6712:	f000 0001 	and.w	r0, r0, #1
    6716:	4770      	bx	lr
        return( 0 );
    6718:	2000      	movs	r0, #0
}
    671a:	4770      	bx	lr

0000671c <mbedtls_mpi_bitlen>:
{
    671c:	b510      	push	{r4, lr}
    if( X->n == 0 )
    671e:	6844      	ldr	r4, [r0, #4]
    6720:	b184      	cbz	r4, 6744 <mbedtls_mpi_bitlen+0x28>
    for( i = X->n - 1; i > 0; i-- )
    6722:	3c01      	subs	r4, #1
    6724:	b12c      	cbz	r4, 6732 <mbedtls_mpi_bitlen+0x16>
        if( X->p[i] != 0 )
    6726:	6883      	ldr	r3, [r0, #8]
    6728:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    672c:	b90b      	cbnz	r3, 6732 <mbedtls_mpi_bitlen+0x16>
    for( i = X->n - 1; i > 0; i-- )
    672e:	3c01      	subs	r4, #1
    6730:	e7f8      	b.n	6724 <mbedtls_mpi_bitlen+0x8>
    j = biL - mbedtls_clz( X->p[i] );
    6732:	6883      	ldr	r3, [r0, #8]
    6734:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    6738:	f7ff fd12 	bl	6160 <mbedtls_clz>
    673c:	f1c0 0020 	rsb	r0, r0, #32
    return( ( i * biL ) + j );
    6740:	eb00 1444 	add.w	r4, r0, r4, lsl #5
}
    6744:	4620      	mov	r0, r4
    6746:	bd10      	pop	{r4, pc}

00006748 <mbedtls_mpi_size>:
{
    6748:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    674a:	f7ff ffe7 	bl	671c <mbedtls_mpi_bitlen>
    674e:	3007      	adds	r0, #7
}
    6750:	08c0      	lsrs	r0, r0, #3
    6752:	bd08      	pop	{r3, pc}

00006754 <mbedtls_mpi_read_binary>:
{
    6754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6758:	4605      	mov	r5, r0
    675a:	4688      	mov	r8, r1
    675c:	4616      	mov	r6, r2
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    675e:	f012 0103 	ands.w	r1, r2, #3
    6762:	bf18      	it	ne
    6764:	2101      	movne	r1, #1
    6766:	eb01 0492 	add.w	r4, r1, r2, lsr #2
    size_t const overhead = ( limbs * ciL ) - buflen;
    676a:	ebc2 0984 	rsb	r9, r2, r4, lsl #2
    if( X->n != limbs )
    676e:	6843      	ldr	r3, [r0, #4]
    6770:	42a3      	cmp	r3, r4
    6772:	d00a      	beq.n	678a <mbedtls_mpi_read_binary+0x36>
        mbedtls_mpi_free( X );
    6774:	f7ff ff37 	bl	65e6 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
    6778:	4628      	mov	r0, r5
    677a:	f7ff ff2e 	bl	65da <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    677e:	4621      	mov	r1, r4
    6780:	4628      	mov	r0, r5
    6782:	f7ff ff42 	bl	660a <mbedtls_mpi_grow>
    6786:	4607      	mov	r7, r0
    6788:	b990      	cbnz	r0, 67b0 <mbedtls_mpi_read_binary+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    678a:	2100      	movs	r1, #0
    678c:	4628      	mov	r0, r5
    678e:	f7ff ff97 	bl	66c0 <mbedtls_mpi_lset>
    6792:	4607      	mov	r7, r0
    6794:	b960      	cbnz	r0, 67b0 <mbedtls_mpi_read_binary+0x5c>
    if( buf != NULL )
    6796:	f1b8 0f00 	cmp.w	r8, #0
    679a:	d009      	beq.n	67b0 <mbedtls_mpi_read_binary+0x5c>
        Xp = (unsigned char*) X->p;
    679c:	68a8      	ldr	r0, [r5, #8]
        memcpy( Xp + overhead, buf, buflen );
    679e:	4632      	mov	r2, r6
    67a0:	4641      	mov	r1, r8
    67a2:	4448      	add	r0, r9
    67a4:	f7ff f910 	bl	59c8 <memcpy>
        mpi_bigendian_to_host( X->p, limbs );
    67a8:	4621      	mov	r1, r4
    67aa:	68a8      	ldr	r0, [r5, #8]
    67ac:	f7ff fcfa 	bl	61a4 <mpi_bigendian_to_host>
}
    67b0:	4638      	mov	r0, r7
    67b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000067b6 <mbedtls_mpi_write_binary>:
{
    67b6:	b570      	push	{r4, r5, r6, lr}
    67b8:	4605      	mov	r5, r0
    67ba:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
    67bc:	686e      	ldr	r6, [r5, #4]
    67be:	00b6      	lsls	r6, r6, #2
    if( stored_bytes < buflen )
    67c0:	4296      	cmp	r6, r2
    67c2:	d30f      	bcc.n	67e4 <mbedtls_mpi_write_binary+0x2e>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    67c4:	4613      	mov	r3, r2
    67c6:	42b3      	cmp	r3, r6
    67c8:	d213      	bcs.n	67f2 <mbedtls_mpi_write_binary+0x3c>
            if( GET_BYTE( X, i ) != 0 )
    67ca:	68ac      	ldr	r4, [r5, #8]
    67cc:	f023 0103 	bic.w	r1, r3, #3
    67d0:	5861      	ldr	r1, [r4, r1]
    67d2:	f003 0403 	and.w	r4, r3, #3
    67d6:	00e4      	lsls	r4, r4, #3
    67d8:	40e1      	lsrs	r1, r4
    67da:	f011 0fff 	tst.w	r1, #255	; 0xff
    67de:	d11a      	bne.n	6816 <mbedtls_mpi_write_binary+0x60>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    67e0:	3301      	adds	r3, #1
    67e2:	e7f0      	b.n	67c6 <mbedtls_mpi_write_binary+0x10>
        p = buf + buflen - stored_bytes;
    67e4:	1b92      	subs	r2, r2, r6
    67e6:	188c      	adds	r4, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    67e8:	2100      	movs	r1, #0
    67ea:	f7ff f910 	bl	5a0e <memset>
        p = buf + buflen - stored_bytes;
    67ee:	4620      	mov	r0, r4
        bytes_to_copy = stored_bytes;
    67f0:	4632      	mov	r2, r6
    for( i = 0; i < bytes_to_copy; i++ )
    67f2:	2300      	movs	r3, #0
    67f4:	429a      	cmp	r2, r3
    67f6:	d90c      	bls.n	6812 <mbedtls_mpi_write_binary+0x5c>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    67f8:	68ac      	ldr	r4, [r5, #8]
    67fa:	f023 0103 	bic.w	r1, r3, #3
    67fe:	5864      	ldr	r4, [r4, r1]
    6800:	f003 0103 	and.w	r1, r3, #3
    6804:	00c9      	lsls	r1, r1, #3
    6806:	40cc      	lsrs	r4, r1
    6808:	1ad1      	subs	r1, r2, r3
    680a:	3901      	subs	r1, #1
    680c:	5444      	strb	r4, [r0, r1]
    for( i = 0; i < bytes_to_copy; i++ )
    680e:	3301      	adds	r3, #1
    6810:	e7f0      	b.n	67f4 <mbedtls_mpi_write_binary+0x3e>
    return( 0 );
    6812:	2000      	movs	r0, #0
}
    6814:	bd70      	pop	{r4, r5, r6, pc}
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    6816:	f06f 0007 	mvn.w	r0, #7
    681a:	e7fb      	b.n	6814 <mbedtls_mpi_write_binary+0x5e>

0000681c <mbedtls_mpi_shift_l>:
{
    681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    681e:	4605      	mov	r5, r0
    6820:	460f      	mov	r7, r1
    v0 = count / (biL    );
    6822:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    6824:	f001 061f 	and.w	r6, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    6828:	f7ff ff78 	bl	671c <mbedtls_mpi_bitlen>
    682c:	4438      	add	r0, r7
    if( X->n * biL < i )
    682e:	686b      	ldr	r3, [r5, #4]
    6830:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    6834:	d810      	bhi.n	6858 <mbedtls_mpi_shift_l+0x3c>
    if( v0 > 0 )
    6836:	2f1f      	cmp	r7, #31
    6838:	d925      	bls.n	6886 <mbedtls_mpi_shift_l+0x6a>
        for( i = X->n; i > v0; i-- )
    683a:	686b      	ldr	r3, [r5, #4]
    683c:	42a3      	cmp	r3, r4
    683e:	d920      	bls.n	6882 <mbedtls_mpi_shift_l+0x66>
            X->p[i - 1] = X->p[i - v0 - 1];
    6840:	68a9      	ldr	r1, [r5, #8]
    6842:	1b1a      	subs	r2, r3, r4
    6844:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    6848:	181f      	adds	r7, r3, r0
    684a:	4402      	add	r2, r0
    684c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    6850:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
        for( i = X->n; i > v0; i-- )
    6854:	3b01      	subs	r3, #1
    6856:	e7f1      	b.n	683c <mbedtls_mpi_shift_l+0x20>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    6858:	f010 011f 	ands.w	r1, r0, #31
    685c:	bf18      	it	ne
    685e:	2101      	movne	r1, #1
    6860:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    6864:	4628      	mov	r0, r5
    6866:	f7ff fed0 	bl	660a <mbedtls_mpi_grow>
    686a:	4603      	mov	r3, r0
    686c:	2800      	cmp	r0, #0
    686e:	d0e2      	beq.n	6836 <mbedtls_mpi_shift_l+0x1a>
    6870:	e00b      	b.n	688a <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
    6872:	68a9      	ldr	r1, [r5, #8]
    6874:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6878:	3a01      	subs	r2, #1
    687a:	2000      	movs	r0, #0
    687c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
        for( ; i > 0; i-- )
    6880:	3b01      	subs	r3, #1
    6882:	2b00      	cmp	r3, #0
    6884:	d1f5      	bne.n	6872 <mbedtls_mpi_shift_l+0x56>
    if( t1 > 0 )
    6886:	b9ce      	cbnz	r6, 68bc <mbedtls_mpi_shift_l+0xa0>
    ret = 0;
    6888:	2300      	movs	r3, #0
}
    688a:	4618      	mov	r0, r3
    688c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            r1 = X->p[i] >> (biL - t1);
    688e:	68a8      	ldr	r0, [r5, #8]
    6890:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
    6894:	f1c6 0320 	rsb	r3, r6, #32
            X->p[i] <<= t1;
    6898:	fa01 f206 	lsl.w	r2, r1, r6
    689c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
            X->p[i] |= r0;
    68a0:	68a8      	ldr	r0, [r5, #8]
    68a2:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    68a6:	433a      	orrs	r2, r7
    68a8:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
        for( i = v0; i < X->n; i++ )
    68ac:	3401      	adds	r4, #1
            r0 = r1;
    68ae:	fa21 f703 	lsr.w	r7, r1, r3
        for( i = v0; i < X->n; i++ )
    68b2:	6869      	ldr	r1, [r5, #4]
    68b4:	42a1      	cmp	r1, r4
    68b6:	d8ea      	bhi.n	688e <mbedtls_mpi_shift_l+0x72>
    ret = 0;
    68b8:	2300      	movs	r3, #0
    return( ret );
    68ba:	e7e6      	b.n	688a <mbedtls_mpi_shift_l+0x6e>
    mbedtls_mpi_uint r0 = 0, r1;
    68bc:	2700      	movs	r7, #0
    68be:	e7f8      	b.n	68b2 <mbedtls_mpi_shift_l+0x96>

000068c0 <mbedtls_mpi_shift_r>:
{
    68c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    v0 = count /  biL;
    68c2:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    68c4:	6843      	ldr	r3, [r0, #4]
    68c6:	42a3      	cmp	r3, r4
    68c8:	d323      	bcc.n	6912 <mbedtls_mpi_shift_r+0x52>
    68ca:	f001 071f 	and.w	r7, r1, #31
    68ce:	d01e      	beq.n	690e <mbedtls_mpi_shift_r+0x4e>
    if( v0 > 0 )
    68d0:	291f      	cmp	r1, #31
    68d2:	d822      	bhi.n	691a <mbedtls_mpi_shift_r+0x5a>
    if( v1 > 0 )
    68d4:	2f00      	cmp	r7, #0
    68d6:	d038      	beq.n	694a <mbedtls_mpi_shift_r+0x8a>
        for( i = X->n; i > 0; i-- )
    68d8:	6842      	ldr	r2, [r0, #4]
    mbedtls_mpi_uint r0 = 0, r1;
    68da:	f04f 0c00 	mov.w	ip, #0
        for( i = X->n; i > 0; i-- )
    68de:	b392      	cbz	r2, 6946 <mbedtls_mpi_shift_r+0x86>
            r1 = X->p[i - 1] << (biL - v1);
    68e0:	6886      	ldr	r6, [r0, #8]
    68e2:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    68e6:	3b01      	subs	r3, #1
    68e8:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
    68ec:	f1c7 0120 	rsb	r1, r7, #32
            X->p[i - 1] >>= v1;
    68f0:	fa25 f407 	lsr.w	r4, r5, r7
    68f4:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
            X->p[i - 1] |= r0;
    68f8:	6886      	ldr	r6, [r0, #8]
    68fa:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
    68fe:	ea44 040c 	orr.w	r4, r4, ip
    6902:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
        for( i = X->n; i > 0; i-- )
    6906:	3a01      	subs	r2, #1
            r0 = r1;
    6908:	fa05 fc01 	lsl.w	ip, r5, r1
    690c:	e7e7      	b.n	68de <mbedtls_mpi_shift_r+0x1e>
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    690e:	2f00      	cmp	r7, #0
    6910:	d0de      	beq.n	68d0 <mbedtls_mpi_shift_r+0x10>
        return mbedtls_mpi_lset( X, 0 );
    6912:	2100      	movs	r1, #0
    6914:	f7ff fed4 	bl	66c0 <mbedtls_mpi_lset>
    6918:	e018      	b.n	694c <mbedtls_mpi_shift_r+0x8c>
        for( i = 0; i < X->n - v0; i++ )
    691a:	2300      	movs	r3, #0
    691c:	6842      	ldr	r2, [r0, #4]
    691e:	1b12      	subs	r2, r2, r4
    6920:	429a      	cmp	r2, r3
    6922:	d907      	bls.n	6934 <mbedtls_mpi_shift_r+0x74>
            X->p[i] = X->p[i + v0];
    6924:	6882      	ldr	r2, [r0, #8]
    6926:	1919      	adds	r1, r3, r4
    6928:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    692c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    6930:	3301      	adds	r3, #1
    6932:	e7f3      	b.n	691c <mbedtls_mpi_shift_r+0x5c>
        for( ; i < X->n; i++ )
    6934:	6842      	ldr	r2, [r0, #4]
    6936:	429a      	cmp	r2, r3
    6938:	d9cc      	bls.n	68d4 <mbedtls_mpi_shift_r+0x14>
            X->p[i] = 0;
    693a:	6882      	ldr	r2, [r0, #8]
    693c:	2100      	movs	r1, #0
    693e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for( ; i < X->n; i++ )
    6942:	3301      	adds	r3, #1
    6944:	e7f6      	b.n	6934 <mbedtls_mpi_shift_r+0x74>
    return( 0 );
    6946:	2000      	movs	r0, #0
    6948:	e000      	b.n	694c <mbedtls_mpi_shift_r+0x8c>
    694a:	2000      	movs	r0, #0
}
    694c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000694e <mbedtls_mpi_cmp_abs>:
{
    694e:	b430      	push	{r4, r5}
    for( i = X->n; i > 0; i-- )
    6950:	6843      	ldr	r3, [r0, #4]
    6952:	b143      	cbz	r3, 6966 <mbedtls_mpi_cmp_abs+0x18>
        if( X->p[i - 1] != 0 )
    6954:	6884      	ldr	r4, [r0, #8]
    6956:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    695a:	3a01      	subs	r2, #1
    695c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    6960:	b90a      	cbnz	r2, 6966 <mbedtls_mpi_cmp_abs+0x18>
    for( i = X->n; i > 0; i-- )
    6962:	3b01      	subs	r3, #1
    6964:	e7f5      	b.n	6952 <mbedtls_mpi_cmp_abs+0x4>
    for( j = Y->n; j > 0; j-- )
    6966:	684a      	ldr	r2, [r1, #4]
    6968:	b142      	cbz	r2, 697c <mbedtls_mpi_cmp_abs+0x2e>
        if( Y->p[j - 1] != 0 )
    696a:	688d      	ldr	r5, [r1, #8]
    696c:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
    6970:	3c01      	subs	r4, #1
    6972:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    6976:	b90c      	cbnz	r4, 697c <mbedtls_mpi_cmp_abs+0x2e>
    for( j = Y->n; j > 0; j-- )
    6978:	3a01      	subs	r2, #1
    697a:	e7f5      	b.n	6968 <mbedtls_mpi_cmp_abs+0x1a>
    if( i == 0 && j == 0 )
    697c:	b903      	cbnz	r3, 6980 <mbedtls_mpi_cmp_abs+0x32>
    697e:	b1c2      	cbz	r2, 69b2 <mbedtls_mpi_cmp_abs+0x64>
    if( i > j ) return(  1 );
    6980:	4293      	cmp	r3, r2
    6982:	d818      	bhi.n	69b6 <mbedtls_mpi_cmp_abs+0x68>
    if( j > i ) return( -1 );
    6984:	d203      	bcs.n	698e <mbedtls_mpi_cmp_abs+0x40>
    6986:	f04f 30ff 	mov.w	r0, #4294967295
    698a:	e015      	b.n	69b8 <mbedtls_mpi_cmp_abs+0x6a>
    for( ; i > 0; i-- )
    698c:	3b01      	subs	r3, #1
    698e:	b173      	cbz	r3, 69ae <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    6990:	6884      	ldr	r4, [r0, #8]
    6992:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6996:	3a01      	subs	r2, #1
    6998:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    699c:	688d      	ldr	r5, [r1, #8]
    699e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    69a2:	4294      	cmp	r4, r2
    69a4:	d80a      	bhi.n	69bc <mbedtls_mpi_cmp_abs+0x6e>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    69a6:	d2f1      	bcs.n	698c <mbedtls_mpi_cmp_abs+0x3e>
    69a8:	f04f 30ff 	mov.w	r0, #4294967295
    69ac:	e004      	b.n	69b8 <mbedtls_mpi_cmp_abs+0x6a>
    return( 0 );
    69ae:	2000      	movs	r0, #0
    69b0:	e002      	b.n	69b8 <mbedtls_mpi_cmp_abs+0x6a>
        return( 0 );
    69b2:	2000      	movs	r0, #0
    69b4:	e000      	b.n	69b8 <mbedtls_mpi_cmp_abs+0x6a>
    if( i > j ) return(  1 );
    69b6:	2001      	movs	r0, #1
}
    69b8:	bc30      	pop	{r4, r5}
    69ba:	4770      	bx	lr
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    69bc:	2001      	movs	r0, #1
    69be:	e7fb      	b.n	69b8 <mbedtls_mpi_cmp_abs+0x6a>

000069c0 <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    69c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69c4:	b083      	sub	sp, #12
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
    69c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    69c8:	6865      	ldr	r5, [r4, #4]
    69ca:	6854      	ldr	r4, [r2, #4]
    69cc:	3401      	adds	r4, #1
    69ce:	42a5      	cmp	r5, r4
    69d0:	d35d      	bcc.n	6a8e <mpi_montmul+0xce>
    69d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    69d4:	68a4      	ldr	r4, [r4, #8]
    69d6:	2c00      	cmp	r4, #0
    69d8:	d05c      	beq.n	6a94 <mpi_montmul+0xd4>
    69da:	9301      	str	r3, [sp, #4]
    69dc:	4691      	mov	r9, r2
    69de:	468b      	mov	fp, r1
    69e0:	4682      	mov	sl, r0
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
    69e2:	00aa      	lsls	r2, r5, #2
    69e4:	2100      	movs	r1, #0
    69e6:	4620      	mov	r0, r4
    69e8:	f7ff f811 	bl	5a0e <memset>

    d = T->p;
    69ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    69ee:	689c      	ldr	r4, [r3, #8]
    n = N->n;
    69f0:	f8d9 8004 	ldr.w	r8, [r9, #4]
    m = ( B->n < n ) ? B->n : n;
    69f4:	f8db 3004 	ldr.w	r3, [fp, #4]
    69f8:	4543      	cmp	r3, r8
    69fa:	bf28      	it	cs
    69fc:	4643      	movcs	r3, r8
    69fe:	9300      	str	r3, [sp, #0]

    for( i = 0; i < n; i++ )
    6a00:	2600      	movs	r6, #0
    6a02:	4546      	cmp	r6, r8
    6a04:	d221      	bcs.n	6a4a <mpi_montmul+0x8a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
    6a06:	f8da 3008 	ldr.w	r3, [sl, #8]
    6a0a:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    6a0e:	6823      	ldr	r3, [r4, #0]
    6a10:	f8db 1008 	ldr.w	r1, [fp, #8]
    6a14:	680d      	ldr	r5, [r1, #0]
    6a16:	fb07 3505 	mla	r5, r7, r5, r3
    6a1a:	9b01      	ldr	r3, [sp, #4]
    6a1c:	fb03 f505 	mul.w	r5, r3, r5

        mpi_mul_hlp( m, B->p, d, u0 );
    6a20:	463b      	mov	r3, r7
    6a22:	4622      	mov	r2, r4
    6a24:	9800      	ldr	r0, [sp, #0]
    6a26:	f7ff fbfb 	bl	6220 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    6a2a:	462b      	mov	r3, r5
    6a2c:	4622      	mov	r2, r4
    6a2e:	f8d9 1008 	ldr.w	r1, [r9, #8]
    6a32:	4640      	mov	r0, r8
    6a34:	f7ff fbf4 	bl	6220 <mpi_mul_hlp>

        *d++ = u0; d[n + 1] = 0;
    6a38:	f844 7b04 	str.w	r7, [r4], #4
    6a3c:	f108 0301 	add.w	r3, r8, #1
    6a40:	2200      	movs	r2, #0
    6a42:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( i = 0; i < n; i++ )
    6a46:	3601      	adds	r6, #1
    6a48:	e7db      	b.n	6a02 <mpi_montmul+0x42>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
    6a4a:	f108 0201 	add.w	r2, r8, #1
    6a4e:	0092      	lsls	r2, r2, #2
    6a50:	4621      	mov	r1, r4
    6a52:	f8da 0008 	ldr.w	r0, [sl, #8]
    6a56:	f7fe ffb7 	bl	59c8 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
    6a5a:	4649      	mov	r1, r9
    6a5c:	4650      	mov	r0, sl
    6a5e:	f7ff ff76 	bl	694e <mbedtls_mpi_cmp_abs>
    6a62:	2800      	cmp	r0, #0
    6a64:	db0a      	blt.n	6a7c <mpi_montmul+0xbc>
        mpi_sub_hlp( n, N->p, A->p );
    6a66:	f8da 2008 	ldr.w	r2, [sl, #8]
    6a6a:	f8d9 1008 	ldr.w	r1, [r9, #8]
    6a6e:	4640      	mov	r0, r8
    6a70:	f7ff fbb0 	bl	61d4 <mpi_sub_hlp>
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
    6a74:	2000      	movs	r0, #0
}
    6a76:	b003      	add	sp, #12
    6a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mpi_sub_hlp( n, A->p, T->p );
    6a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6a7e:	689a      	ldr	r2, [r3, #8]
    6a80:	f8da 1008 	ldr.w	r1, [sl, #8]
    6a84:	4640      	mov	r0, r8
    6a86:	f7ff fba5 	bl	61d4 <mpi_sub_hlp>
    return( 0 );
    6a8a:	2000      	movs	r0, #0
    6a8c:	e7f3      	b.n	6a76 <mpi_montmul+0xb6>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    6a8e:	f06f 0003 	mvn.w	r0, #3
    6a92:	e7f0      	b.n	6a76 <mpi_montmul+0xb6>
    6a94:	f06f 0003 	mvn.w	r0, #3
    6a98:	e7ed      	b.n	6a76 <mpi_montmul+0xb6>

00006a9a <mpi_montred>:
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    6a9a:	b510      	push	{r4, lr}
    6a9c:	b086      	sub	sp, #24
    mbedtls_mpi_uint z = 1;
    6a9e:	2401      	movs	r4, #1
    6aa0:	9405      	str	r4, [sp, #20]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    6aa2:	9402      	str	r4, [sp, #8]
    6aa4:	9403      	str	r4, [sp, #12]
    U.p = &z;
    6aa6:	ac05      	add	r4, sp, #20
    6aa8:	9404      	str	r4, [sp, #16]

    return( mpi_montmul( A, &U, N, mm, T ) );
    6aaa:	9300      	str	r3, [sp, #0]
    6aac:	4613      	mov	r3, r2
    6aae:	460a      	mov	r2, r1
    6ab0:	a902      	add	r1, sp, #8
    6ab2:	f7ff ff85 	bl	69c0 <mpi_montmul>
}
    6ab6:	b006      	add	sp, #24
    6ab8:	bd10      	pop	{r4, pc}

00006aba <mbedtls_mpi_cmp_mpi>:
{
    6aba:	b470      	push	{r4, r5, r6}
    for( i = X->n; i > 0; i-- )
    6abc:	6843      	ldr	r3, [r0, #4]
    6abe:	b143      	cbz	r3, 6ad2 <mbedtls_mpi_cmp_mpi+0x18>
        if( X->p[i - 1] != 0 )
    6ac0:	6884      	ldr	r4, [r0, #8]
    6ac2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6ac6:	3a01      	subs	r2, #1
    6ac8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    6acc:	b90a      	cbnz	r2, 6ad2 <mbedtls_mpi_cmp_mpi+0x18>
    for( i = X->n; i > 0; i-- )
    6ace:	3b01      	subs	r3, #1
    6ad0:	e7f5      	b.n	6abe <mbedtls_mpi_cmp_mpi+0x4>
    for( j = Y->n; j > 0; j-- )
    6ad2:	684a      	ldr	r2, [r1, #4]
    6ad4:	b142      	cbz	r2, 6ae8 <mbedtls_mpi_cmp_mpi+0x2e>
        if( Y->p[j - 1] != 0 )
    6ad6:	688d      	ldr	r5, [r1, #8]
    6ad8:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
    6adc:	3c01      	subs	r4, #1
    6ade:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    6ae2:	b90c      	cbnz	r4, 6ae8 <mbedtls_mpi_cmp_mpi+0x2e>
    for( j = Y->n; j > 0; j-- )
    6ae4:	3a01      	subs	r2, #1
    6ae6:	e7f5      	b.n	6ad4 <mbedtls_mpi_cmp_mpi+0x1a>
    if( i == 0 && j == 0 )
    6ae8:	b903      	cbnz	r3, 6aec <mbedtls_mpi_cmp_mpi+0x32>
    6aea:	b342      	cbz	r2, 6b3e <mbedtls_mpi_cmp_mpi+0x84>
    if( i > j ) return(  X->s );
    6aec:	4293      	cmp	r3, r2
    6aee:	d81b      	bhi.n	6b28 <mbedtls_mpi_cmp_mpi+0x6e>
    if( j > i ) return( -Y->s );
    6af0:	4293      	cmp	r3, r2
    6af2:	d31d      	bcc.n	6b30 <mbedtls_mpi_cmp_mpi+0x76>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    6af4:	6806      	ldr	r6, [r0, #0]
    6af6:	2e00      	cmp	r6, #0
    6af8:	dd02      	ble.n	6b00 <mbedtls_mpi_cmp_mpi+0x46>
    6afa:	680a      	ldr	r2, [r1, #0]
    6afc:	2a00      	cmp	r2, #0
    6afe:	db20      	blt.n	6b42 <mbedtls_mpi_cmp_mpi+0x88>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    6b00:	680a      	ldr	r2, [r1, #0]
    6b02:	2a00      	cmp	r2, #0
    6b04:	dd01      	ble.n	6b0a <mbedtls_mpi_cmp_mpi+0x50>
    6b06:	2e00      	cmp	r6, #0
    6b08:	db1d      	blt.n	6b46 <mbedtls_mpi_cmp_mpi+0x8c>
    for( ; i > 0; i-- )
    6b0a:	b1b3      	cbz	r3, 6b3a <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    6b0c:	6884      	ldr	r4, [r0, #8]
    6b0e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6b12:	3a01      	subs	r2, #1
    6b14:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    6b18:	688d      	ldr	r5, [r1, #8]
    6b1a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    6b1e:	4294      	cmp	r4, r2
    6b20:	d803      	bhi.n	6b2a <mbedtls_mpi_cmp_mpi+0x70>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    6b22:	d308      	bcc.n	6b36 <mbedtls_mpi_cmp_mpi+0x7c>
    for( ; i > 0; i-- )
    6b24:	3b01      	subs	r3, #1
    6b26:	e7f0      	b.n	6b0a <mbedtls_mpi_cmp_mpi+0x50>
    if( i > j ) return(  X->s );
    6b28:	6806      	ldr	r6, [r0, #0]
}
    6b2a:	4630      	mov	r0, r6
    6b2c:	bc70      	pop	{r4, r5, r6}
    6b2e:	4770      	bx	lr
    if( j > i ) return( -Y->s );
    6b30:	680e      	ldr	r6, [r1, #0]
    6b32:	4276      	negs	r6, r6
    6b34:	e7f9      	b.n	6b2a <mbedtls_mpi_cmp_mpi+0x70>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    6b36:	4276      	negs	r6, r6
    6b38:	e7f7      	b.n	6b2a <mbedtls_mpi_cmp_mpi+0x70>
    return( 0 );
    6b3a:	2600      	movs	r6, #0
    6b3c:	e7f5      	b.n	6b2a <mbedtls_mpi_cmp_mpi+0x70>
        return( 0 );
    6b3e:	2600      	movs	r6, #0
    6b40:	e7f3      	b.n	6b2a <mbedtls_mpi_cmp_mpi+0x70>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    6b42:	2601      	movs	r6, #1
    6b44:	e7f1      	b.n	6b2a <mbedtls_mpi_cmp_mpi+0x70>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    6b46:	f04f 36ff 	mov.w	r6, #4294967295
    6b4a:	e7ee      	b.n	6b2a <mbedtls_mpi_cmp_mpi+0x70>

00006b4c <mbedtls_mpi_cmp_int>:
{
    6b4c:	b500      	push	{lr}
    6b4e:	b085      	sub	sp, #20
    *p  = ( z < 0 ) ? -z : z;
    6b50:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    6b54:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    6b58:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    6b5a:	2900      	cmp	r1, #0
    6b5c:	db0b      	blt.n	6b76 <mbedtls_mpi_cmp_int+0x2a>
    6b5e:	2301      	movs	r3, #1
    6b60:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    6b62:	2301      	movs	r3, #1
    6b64:	9302      	str	r3, [sp, #8]
    Y.p = p;
    6b66:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    6b6a:	a901      	add	r1, sp, #4
    6b6c:	f7ff ffa5 	bl	6aba <mbedtls_mpi_cmp_mpi>
}
    6b70:	b005      	add	sp, #20
    6b72:	f85d fb04 	ldr.w	pc, [sp], #4
    Y.s = ( z < 0 ) ? -1 : 1;
    6b76:	f04f 33ff 	mov.w	r3, #4294967295
    6b7a:	e7f1      	b.n	6b60 <mbedtls_mpi_cmp_int+0x14>

00006b7c <mbedtls_mpi_add_abs>:
{
    6b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b7e:	4607      	mov	r7, r0
    6b80:	4614      	mov	r4, r2
    if( X == B )
    6b82:	4290      	cmp	r0, r2
    6b84:	d014      	beq.n	6bb0 <mbedtls_mpi_add_abs+0x34>
    if( X != A )
    6b86:	42b9      	cmp	r1, r7
    6b88:	d005      	beq.n	6b96 <mbedtls_mpi_add_abs+0x1a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    6b8a:	4638      	mov	r0, r7
    6b8c:	f7ff fd66 	bl	665c <mbedtls_mpi_copy>
    6b90:	4684      	mov	ip, r0
    6b92:	2800      	cmp	r0, #0
    6b94:	d142      	bne.n	6c1c <mbedtls_mpi_add_abs+0xa0>
    X->s = 1;
    6b96:	2301      	movs	r3, #1
    6b98:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
    6b9a:	6866      	ldr	r6, [r4, #4]
    6b9c:	b15e      	cbz	r6, 6bb6 <mbedtls_mpi_add_abs+0x3a>
        if( B->p[j - 1] != 0 )
    6b9e:	68a2      	ldr	r2, [r4, #8]
    6ba0:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
    6ba4:	3b01      	subs	r3, #1
    6ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6baa:	b923      	cbnz	r3, 6bb6 <mbedtls_mpi_add_abs+0x3a>
    for( j = B->n; j > 0; j-- )
    6bac:	3e01      	subs	r6, #1
    6bae:	e7f5      	b.n	6b9c <mbedtls_mpi_add_abs+0x20>
        const mbedtls_mpi *T = A; A = X; B = T;
    6bb0:	460c      	mov	r4, r1
    6bb2:	4601      	mov	r1, r0
    6bb4:	e7e7      	b.n	6b86 <mbedtls_mpi_add_abs+0xa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    6bb6:	4631      	mov	r1, r6
    6bb8:	4638      	mov	r0, r7
    6bba:	f7ff fd26 	bl	660a <mbedtls_mpi_grow>
    6bbe:	4684      	mov	ip, r0
    6bc0:	bb60      	cbnz	r0, 6c1c <mbedtls_mpi_add_abs+0xa0>
    o = B->p; p = X->p; c = 0;
    6bc2:	68a0      	ldr	r0, [r4, #8]
    6bc4:	68bb      	ldr	r3, [r7, #8]
    6bc6:	2400      	movs	r4, #0
    for( i = 0; i < j; i++, o++, p++ )
    6bc8:	4625      	mov	r5, r4
    6bca:	42b5      	cmp	r5, r6
    6bcc:	d218      	bcs.n	6c00 <mbedtls_mpi_add_abs+0x84>
        tmp= *o;
    6bce:	f850 1b04 	ldr.w	r1, [r0], #4
        *p +=  c; c  = ( *p <  c );
    6bd2:	681a      	ldr	r2, [r3, #0]
    6bd4:	18a4      	adds	r4, r4, r2
    6bd6:	bf2c      	ite	cs
    6bd8:	2201      	movcs	r2, #1
    6bda:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
    6bdc:	440c      	add	r4, r1
    6bde:	f843 4b04 	str.w	r4, [r3], #4
    6be2:	428c      	cmp	r4, r1
    6be4:	bf2c      	ite	cs
    6be6:	4614      	movcs	r4, r2
    6be8:	1c54      	addcc	r4, r2, #1
    for( i = 0; i < j; i++, o++, p++ )
    6bea:	3501      	adds	r5, #1
    6bec:	e7ed      	b.n	6bca <mbedtls_mpi_add_abs+0x4e>
        *p += c; c = ( *p < c ); i++; p++;
    6bee:	681a      	ldr	r2, [r3, #0]
    6bf0:	4422      	add	r2, r4
    6bf2:	f843 2b04 	str.w	r2, [r3], #4
    6bf6:	42a2      	cmp	r2, r4
    6bf8:	bf2c      	ite	cs
    6bfa:	2400      	movcs	r4, #0
    6bfc:	2401      	movcc	r4, #1
    6bfe:	3501      	adds	r5, #1
    while( c != 0 )
    6c00:	b164      	cbz	r4, 6c1c <mbedtls_mpi_add_abs+0xa0>
        if( i >= X->n )
    6c02:	687a      	ldr	r2, [r7, #4]
    6c04:	42aa      	cmp	r2, r5
    6c06:	d8f2      	bhi.n	6bee <mbedtls_mpi_add_abs+0x72>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    6c08:	1c69      	adds	r1, r5, #1
    6c0a:	4638      	mov	r0, r7
    6c0c:	f7ff fcfd 	bl	660a <mbedtls_mpi_grow>
    6c10:	4684      	mov	ip, r0
    6c12:	b918      	cbnz	r0, 6c1c <mbedtls_mpi_add_abs+0xa0>
            p = X->p + i;
    6c14:	68bb      	ldr	r3, [r7, #8]
    6c16:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6c1a:	e7e8      	b.n	6bee <mbedtls_mpi_add_abs+0x72>
}
    6c1c:	4660      	mov	r0, ip
    6c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006c20 <mbedtls_mpi_sub_abs>:
{
    6c20:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c22:	b085      	sub	sp, #20
    6c24:	4605      	mov	r5, r0
    6c26:	460e      	mov	r6, r1
    6c28:	4614      	mov	r4, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    6c2a:	4611      	mov	r1, r2
    6c2c:	4630      	mov	r0, r6
    6c2e:	f7ff fe8e 	bl	694e <mbedtls_mpi_cmp_abs>
    6c32:	2800      	cmp	r0, #0
    6c34:	db2c      	blt.n	6c90 <mbedtls_mpi_sub_abs+0x70>
    mbedtls_mpi_init( &TB );
    6c36:	a801      	add	r0, sp, #4
    6c38:	f7ff fccf 	bl	65da <mbedtls_mpi_init>
    if( X == B )
    6c3c:	42ac      	cmp	r4, r5
    6c3e:	d014      	beq.n	6c6a <mbedtls_mpi_sub_abs+0x4a>
    if( X != A )
    6c40:	42ae      	cmp	r6, r5
    6c42:	d005      	beq.n	6c50 <mbedtls_mpi_sub_abs+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    6c44:	4631      	mov	r1, r6
    6c46:	4628      	mov	r0, r5
    6c48:	f7ff fd08 	bl	665c <mbedtls_mpi_copy>
    6c4c:	4607      	mov	r7, r0
    6c4e:	b9c8      	cbnz	r0, 6c84 <mbedtls_mpi_sub_abs+0x64>
    X->s = 1;
    6c50:	2301      	movs	r3, #1
    6c52:	602b      	str	r3, [r5, #0]
    for( n = B->n; n > 0; n-- )
    6c54:	6860      	ldr	r0, [r4, #4]
    6c56:	b180      	cbz	r0, 6c7a <mbedtls_mpi_sub_abs+0x5a>
        if( B->p[n - 1] != 0 )
    6c58:	68a2      	ldr	r2, [r4, #8]
    6c5a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    6c5e:	3b01      	subs	r3, #1
    6c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c64:	b94b      	cbnz	r3, 6c7a <mbedtls_mpi_sub_abs+0x5a>
    for( n = B->n; n > 0; n-- )
    6c66:	3801      	subs	r0, #1
    6c68:	e7f5      	b.n	6c56 <mbedtls_mpi_sub_abs+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
    6c6a:	4621      	mov	r1, r4
    6c6c:	a801      	add	r0, sp, #4
    6c6e:	f7ff fcf5 	bl	665c <mbedtls_mpi_copy>
    6c72:	4607      	mov	r7, r0
    6c74:	b930      	cbnz	r0, 6c84 <mbedtls_mpi_sub_abs+0x64>
        B = &TB;
    6c76:	ac01      	add	r4, sp, #4
    6c78:	e7e2      	b.n	6c40 <mbedtls_mpi_sub_abs+0x20>
    mpi_sub_hlp( n, B->p, X->p );
    6c7a:	68aa      	ldr	r2, [r5, #8]
    6c7c:	68a1      	ldr	r1, [r4, #8]
    6c7e:	f7ff faa9 	bl	61d4 <mpi_sub_hlp>
    ret = 0;
    6c82:	2700      	movs	r7, #0
    mbedtls_mpi_free( &TB );
    6c84:	a801      	add	r0, sp, #4
    6c86:	f7ff fcae 	bl	65e6 <mbedtls_mpi_free>
}
    6c8a:	4638      	mov	r0, r7
    6c8c:	b005      	add	sp, #20
    6c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    6c90:	f06f 0709 	mvn.w	r7, #9
    6c94:	e7f9      	b.n	6c8a <mbedtls_mpi_sub_abs+0x6a>

00006c96 <mbedtls_mpi_add_mpi>:
{
    6c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c98:	4607      	mov	r7, r0
    6c9a:	460c      	mov	r4, r1
    6c9c:	4615      	mov	r5, r2
    s = A->s;
    6c9e:	680e      	ldr	r6, [r1, #0]
    if( A->s * B->s < 0 )
    6ca0:	6813      	ldr	r3, [r2, #0]
    6ca2:	fb06 f303 	mul.w	r3, r6, r3
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	da18      	bge.n	6cdc <mbedtls_mpi_add_mpi+0x46>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    6caa:	4611      	mov	r1, r2
    6cac:	4620      	mov	r0, r4
    6cae:	f7ff fe4e 	bl	694e <mbedtls_mpi_cmp_abs>
    6cb2:	2800      	cmp	r0, #0
    6cb4:	db08      	blt.n	6cc8 <mbedtls_mpi_add_mpi+0x32>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    6cb6:	462a      	mov	r2, r5
    6cb8:	4621      	mov	r1, r4
    6cba:	4638      	mov	r0, r7
    6cbc:	f7ff ffb0 	bl	6c20 <mbedtls_mpi_sub_abs>
    6cc0:	4603      	mov	r3, r0
    6cc2:	b980      	cbnz	r0, 6ce6 <mbedtls_mpi_add_mpi+0x50>
            X->s =  s;
    6cc4:	603e      	str	r6, [r7, #0]
    6cc6:	e00e      	b.n	6ce6 <mbedtls_mpi_add_mpi+0x50>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    6cc8:	4622      	mov	r2, r4
    6cca:	4629      	mov	r1, r5
    6ccc:	4638      	mov	r0, r7
    6cce:	f7ff ffa7 	bl	6c20 <mbedtls_mpi_sub_abs>
    6cd2:	4603      	mov	r3, r0
    6cd4:	b938      	cbnz	r0, 6ce6 <mbedtls_mpi_add_mpi+0x50>
            X->s = -s;
    6cd6:	4276      	negs	r6, r6
    6cd8:	603e      	str	r6, [r7, #0]
    6cda:	e004      	b.n	6ce6 <mbedtls_mpi_add_mpi+0x50>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    6cdc:	f7ff ff4e 	bl	6b7c <mbedtls_mpi_add_abs>
    6ce0:	4603      	mov	r3, r0
    6ce2:	b900      	cbnz	r0, 6ce6 <mbedtls_mpi_add_mpi+0x50>
        X->s = s;
    6ce4:	603e      	str	r6, [r7, #0]
}
    6ce6:	4618      	mov	r0, r3
    6ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006cea <mbedtls_mpi_sub_mpi>:
{
    6cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6cec:	4607      	mov	r7, r0
    6cee:	460c      	mov	r4, r1
    6cf0:	4615      	mov	r5, r2
    s = A->s;
    6cf2:	680e      	ldr	r6, [r1, #0]
    if( A->s * B->s > 0 )
    6cf4:	6813      	ldr	r3, [r2, #0]
    6cf6:	fb06 f303 	mul.w	r3, r6, r3
    6cfa:	2b00      	cmp	r3, #0
    6cfc:	dd1a      	ble.n	6d34 <mbedtls_mpi_sub_mpi+0x4a>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    6cfe:	4611      	mov	r1, r2
    6d00:	4620      	mov	r0, r4
    6d02:	f7ff fe24 	bl	694e <mbedtls_mpi_cmp_abs>
    6d06:	2800      	cmp	r0, #0
    6d08:	db09      	blt.n	6d1e <mbedtls_mpi_sub_mpi+0x34>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    6d0a:	462a      	mov	r2, r5
    6d0c:	4621      	mov	r1, r4
    6d0e:	4638      	mov	r0, r7
    6d10:	f7ff ff86 	bl	6c20 <mbedtls_mpi_sub_abs>
    6d14:	4603      	mov	r3, r0
    6d16:	b900      	cbnz	r0, 6d1a <mbedtls_mpi_sub_mpi+0x30>
            X->s =  s;
    6d18:	603e      	str	r6, [r7, #0]
}
    6d1a:	4618      	mov	r0, r3
    6d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    6d1e:	4622      	mov	r2, r4
    6d20:	4629      	mov	r1, r5
    6d22:	4638      	mov	r0, r7
    6d24:	f7ff ff7c 	bl	6c20 <mbedtls_mpi_sub_abs>
    6d28:	4603      	mov	r3, r0
    6d2a:	2800      	cmp	r0, #0
    6d2c:	d1f5      	bne.n	6d1a <mbedtls_mpi_sub_mpi+0x30>
            X->s = -s;
    6d2e:	4276      	negs	r6, r6
    6d30:	603e      	str	r6, [r7, #0]
    6d32:	e7f2      	b.n	6d1a <mbedtls_mpi_sub_mpi+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    6d34:	f7ff ff22 	bl	6b7c <mbedtls_mpi_add_abs>
    6d38:	4603      	mov	r3, r0
    6d3a:	2800      	cmp	r0, #0
    6d3c:	d1ed      	bne.n	6d1a <mbedtls_mpi_sub_mpi+0x30>
        X->s = s;
    6d3e:	603e      	str	r6, [r7, #0]
    return( ret );
    6d40:	e7eb      	b.n	6d1a <mbedtls_mpi_sub_mpi+0x30>

00006d42 <mbedtls_mpi_mul_mpi>:
{
    6d42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6d46:	b087      	sub	sp, #28
    6d48:	4680      	mov	r8, r0
    6d4a:	460e      	mov	r6, r1
    6d4c:	4617      	mov	r7, r2
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
    6d4e:	a803      	add	r0, sp, #12
    6d50:	f7ff fc43 	bl	65da <mbedtls_mpi_init>
    6d54:	4668      	mov	r0, sp
    6d56:	f7ff fc40 	bl	65da <mbedtls_mpi_init>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    6d5a:	45b0      	cmp	r8, r6
    6d5c:	d00c      	beq.n	6d78 <mbedtls_mpi_mul_mpi+0x36>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    6d5e:	45b8      	cmp	r8, r7
    6d60:	d012      	beq.n	6d88 <mbedtls_mpi_mul_mpi+0x46>
    for( i = A->n; i > 0; i-- )
    6d62:	6875      	ldr	r5, [r6, #4]
    6d64:	b1c5      	cbz	r5, 6d98 <mbedtls_mpi_mul_mpi+0x56>
        if( A->p[i - 1] != 0 )
    6d66:	68b2      	ldr	r2, [r6, #8]
    6d68:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    6d6c:	3b01      	subs	r3, #1
    6d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d72:	b98b      	cbnz	r3, 6d98 <mbedtls_mpi_mul_mpi+0x56>
    for( i = A->n; i > 0; i-- )
    6d74:	3d01      	subs	r5, #1
    6d76:	e7f5      	b.n	6d64 <mbedtls_mpi_mul_mpi+0x22>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    6d78:	4631      	mov	r1, r6
    6d7a:	a803      	add	r0, sp, #12
    6d7c:	f7ff fc6e 	bl	665c <mbedtls_mpi_copy>
    6d80:	4681      	mov	r9, r0
    6d82:	b9d0      	cbnz	r0, 6dba <mbedtls_mpi_mul_mpi+0x78>
    6d84:	ae03      	add	r6, sp, #12
    6d86:	e7ea      	b.n	6d5e <mbedtls_mpi_mul_mpi+0x1c>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    6d88:	4639      	mov	r1, r7
    6d8a:	4668      	mov	r0, sp
    6d8c:	f7ff fc66 	bl	665c <mbedtls_mpi_copy>
    6d90:	4681      	mov	r9, r0
    6d92:	b990      	cbnz	r0, 6dba <mbedtls_mpi_mul_mpi+0x78>
    6d94:	466f      	mov	r7, sp
    6d96:	e7e4      	b.n	6d62 <mbedtls_mpi_mul_mpi+0x20>
    for( j = B->n; j > 0; j-- )
    6d98:	687c      	ldr	r4, [r7, #4]
    6d9a:	b144      	cbz	r4, 6dae <mbedtls_mpi_mul_mpi+0x6c>
        if( B->p[j - 1] != 0 )
    6d9c:	68ba      	ldr	r2, [r7, #8]
    6d9e:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    6da2:	3b01      	subs	r3, #1
    6da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6da8:	b90b      	cbnz	r3, 6dae <mbedtls_mpi_mul_mpi+0x6c>
    for( j = B->n; j > 0; j-- )
    6daa:	3c01      	subs	r4, #1
    6dac:	e7f5      	b.n	6d9a <mbedtls_mpi_mul_mpi+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    6dae:	1929      	adds	r1, r5, r4
    6db0:	4640      	mov	r0, r8
    6db2:	f7ff fc2a 	bl	660a <mbedtls_mpi_grow>
    6db6:	4681      	mov	r9, r0
    6db8:	b148      	cbz	r0, 6dce <mbedtls_mpi_mul_mpi+0x8c>
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
    6dba:	4668      	mov	r0, sp
    6dbc:	f7ff fc13 	bl	65e6 <mbedtls_mpi_free>
    6dc0:	a803      	add	r0, sp, #12
    6dc2:	f7ff fc10 	bl	65e6 <mbedtls_mpi_free>
}
    6dc6:	4648      	mov	r0, r9
    6dc8:	b007      	add	sp, #28
    6dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    6dce:	2100      	movs	r1, #0
    6dd0:	4640      	mov	r0, r8
    6dd2:	f7ff fc75 	bl	66c0 <mbedtls_mpi_lset>
    6dd6:	4681      	mov	r9, r0
    6dd8:	b178      	cbz	r0, 6dfa <mbedtls_mpi_mul_mpi+0xb8>
    6dda:	e7ee      	b.n	6dba <mbedtls_mpi_mul_mpi+0x78>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
    6ddc:	f8d8 1008 	ldr.w	r1, [r8, #8]
    6de0:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    6de4:	3a01      	subs	r2, #1
    6de6:	68bb      	ldr	r3, [r7, #8]
    6de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6dec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6df0:	68b1      	ldr	r1, [r6, #8]
    6df2:	4628      	mov	r0, r5
    6df4:	f7ff fa14 	bl	6220 <mpi_mul_hlp>
    for( ; j > 0; j-- )
    6df8:	3c01      	subs	r4, #1
    6dfa:	2c00      	cmp	r4, #0
    6dfc:	d1ee      	bne.n	6ddc <mbedtls_mpi_mul_mpi+0x9a>
    X->s = A->s * B->s;
    6dfe:	6832      	ldr	r2, [r6, #0]
    6e00:	683b      	ldr	r3, [r7, #0]
    6e02:	fb03 f302 	mul.w	r3, r3, r2
    6e06:	f8c8 3000 	str.w	r3, [r8]
    6e0a:	e7d6      	b.n	6dba <mbedtls_mpi_mul_mpi+0x78>

00006e0c <mbedtls_mpi_mul_int>:
{
    6e0c:	b500      	push	{lr}
    6e0e:	b085      	sub	sp, #20
    _B.s = 1;
    6e10:	2301      	movs	r3, #1
    6e12:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    6e14:	9302      	str	r3, [sp, #8]
    _B.p = p;
    6e16:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;
    6e1a:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
    6e1c:	aa01      	add	r2, sp, #4
    6e1e:	f7ff ff90 	bl	6d42 <mbedtls_mpi_mul_mpi>
}
    6e22:	b005      	add	sp, #20
    6e24:	f85d fb04 	ldr.w	pc, [sp], #4

00006e28 <mbedtls_mpi_div_mpi>:
{
    6e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e2c:	b097      	sub	sp, #92	; 0x5c
    6e2e:	4606      	mov	r6, r0
    6e30:	460f      	mov	r7, r1
    6e32:	4615      	mov	r5, r2
    6e34:	469b      	mov	fp, r3
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    6e36:	2100      	movs	r1, #0
    6e38:	4618      	mov	r0, r3
    6e3a:	f7ff fe87 	bl	6b4c <mbedtls_mpi_cmp_int>
    6e3e:	2800      	cmp	r0, #0
    6e40:	f000 81bc 	beq.w	71bc <mbedtls_mpi_div_mpi+0x394>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    6e44:	a813      	add	r0, sp, #76	; 0x4c
    6e46:	f7ff fbc8 	bl	65da <mbedtls_mpi_init>
    6e4a:	a810      	add	r0, sp, #64	; 0x40
    6e4c:	f7ff fbc5 	bl	65da <mbedtls_mpi_init>
    6e50:	a80d      	add	r0, sp, #52	; 0x34
    6e52:	f7ff fbc2 	bl	65da <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
    6e56:	a80a      	add	r0, sp, #40	; 0x28
    6e58:	f7ff fbbf 	bl	65da <mbedtls_mpi_init>
    6e5c:	a807      	add	r0, sp, #28
    6e5e:	f7ff fbbc 	bl	65da <mbedtls_mpi_init>
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    6e62:	4659      	mov	r1, fp
    6e64:	4628      	mov	r0, r5
    6e66:	f7ff fd72 	bl	694e <mbedtls_mpi_cmp_abs>
    6e6a:	2800      	cmp	r0, #0
    6e6c:	da0f      	bge.n	6e8e <mbedtls_mpi_div_mpi+0x66>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    6e6e:	b12e      	cbz	r6, 6e7c <mbedtls_mpi_div_mpi+0x54>
    6e70:	2100      	movs	r1, #0
    6e72:	4630      	mov	r0, r6
    6e74:	f7ff fc24 	bl	66c0 <mbedtls_mpi_lset>
    6e78:	4604      	mov	r4, r0
    6e7a:	b970      	cbnz	r0, 6e9a <mbedtls_mpi_div_mpi+0x72>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    6e7c:	b12f      	cbz	r7, 6e8a <mbedtls_mpi_div_mpi+0x62>
    6e7e:	4629      	mov	r1, r5
    6e80:	4638      	mov	r0, r7
    6e82:	f7ff fbeb 	bl	665c <mbedtls_mpi_copy>
    6e86:	4604      	mov	r4, r0
    6e88:	b938      	cbnz	r0, 6e9a <mbedtls_mpi_div_mpi+0x72>
        return( 0 );
    6e8a:	2400      	movs	r4, #0
    6e8c:	e014      	b.n	6eb8 <mbedtls_mpi_div_mpi+0x90>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    6e8e:	4629      	mov	r1, r5
    6e90:	a813      	add	r0, sp, #76	; 0x4c
    6e92:	f7ff fbe3 	bl	665c <mbedtls_mpi_copy>
    6e96:	4604      	mov	r4, r0
    6e98:	b190      	cbz	r0, 6ec0 <mbedtls_mpi_div_mpi+0x98>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    6e9a:	a813      	add	r0, sp, #76	; 0x4c
    6e9c:	f7ff fba3 	bl	65e6 <mbedtls_mpi_free>
    6ea0:	a810      	add	r0, sp, #64	; 0x40
    6ea2:	f7ff fba0 	bl	65e6 <mbedtls_mpi_free>
    6ea6:	a80d      	add	r0, sp, #52	; 0x34
    6ea8:	f7ff fb9d 	bl	65e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
    6eac:	a80a      	add	r0, sp, #40	; 0x28
    6eae:	f7ff fb9a 	bl	65e6 <mbedtls_mpi_free>
    6eb2:	a807      	add	r0, sp, #28
    6eb4:	f7ff fb97 	bl	65e6 <mbedtls_mpi_free>
}
    6eb8:	4620      	mov	r0, r4
    6eba:	b017      	add	sp, #92	; 0x5c
    6ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    6ec0:	4659      	mov	r1, fp
    6ec2:	a810      	add	r0, sp, #64	; 0x40
    6ec4:	f7ff fbca 	bl	665c <mbedtls_mpi_copy>
    6ec8:	4604      	mov	r4, r0
    6eca:	2800      	cmp	r0, #0
    6ecc:	d1e5      	bne.n	6e9a <mbedtls_mpi_div_mpi+0x72>
    X.s = Y.s = 1;
    6ece:	2301      	movs	r3, #1
    6ed0:	9310      	str	r3, [sp, #64]	; 0x40
    6ed2:	9313      	str	r3, [sp, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    6ed4:	6869      	ldr	r1, [r5, #4]
    6ed6:	3102      	adds	r1, #2
    6ed8:	a80d      	add	r0, sp, #52	; 0x34
    6eda:	f7ff fb96 	bl	660a <mbedtls_mpi_grow>
    6ede:	4604      	mov	r4, r0
    6ee0:	2800      	cmp	r0, #0
    6ee2:	d1da      	bne.n	6e9a <mbedtls_mpi_div_mpi+0x72>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    6ee4:	2100      	movs	r1, #0
    6ee6:	a80d      	add	r0, sp, #52	; 0x34
    6ee8:	f7ff fbea 	bl	66c0 <mbedtls_mpi_lset>
    6eec:	4604      	mov	r4, r0
    6eee:	2800      	cmp	r0, #0
    6ef0:	d1d3      	bne.n	6e9a <mbedtls_mpi_div_mpi+0x72>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
    6ef2:	2102      	movs	r1, #2
    6ef4:	a80a      	add	r0, sp, #40	; 0x28
    6ef6:	f7ff fb88 	bl	660a <mbedtls_mpi_grow>
    6efa:	4604      	mov	r4, r0
    6efc:	2800      	cmp	r0, #0
    6efe:	d1cc      	bne.n	6e9a <mbedtls_mpi_div_mpi+0x72>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
    6f00:	2103      	movs	r1, #3
    6f02:	a807      	add	r0, sp, #28
    6f04:	f7ff fb81 	bl	660a <mbedtls_mpi_grow>
    6f08:	4604      	mov	r4, r0
    6f0a:	2800      	cmp	r0, #0
    6f0c:	d1c5      	bne.n	6e9a <mbedtls_mpi_div_mpi+0x72>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    6f0e:	a810      	add	r0, sp, #64	; 0x40
    6f10:	f7ff fc04 	bl	671c <mbedtls_mpi_bitlen>
    6f14:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    6f18:	281e      	cmp	r0, #30
    6f1a:	d811      	bhi.n	6f40 <mbedtls_mpi_div_mpi+0x118>
        k = biL - 1 - k;
    6f1c:	f1c0 031f 	rsb	r3, r0, #31
    6f20:	9300      	str	r3, [sp, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    6f22:	4698      	mov	r8, r3
    6f24:	4619      	mov	r1, r3
    6f26:	a813      	add	r0, sp, #76	; 0x4c
    6f28:	f7ff fc78 	bl	681c <mbedtls_mpi_shift_l>
    6f2c:	4604      	mov	r4, r0
    6f2e:	2800      	cmp	r0, #0
    6f30:	d1b3      	bne.n	6e9a <mbedtls_mpi_div_mpi+0x72>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    6f32:	4641      	mov	r1, r8
    6f34:	a810      	add	r0, sp, #64	; 0x40
    6f36:	f7ff fc71 	bl	681c <mbedtls_mpi_shift_l>
    6f3a:	4604      	mov	r4, r0
    6f3c:	b110      	cbz	r0, 6f44 <mbedtls_mpi_div_mpi+0x11c>
    6f3e:	e7ac      	b.n	6e9a <mbedtls_mpi_div_mpi+0x72>
    else k = 0;
    6f40:	2300      	movs	r3, #0
    6f42:	9300      	str	r3, [sp, #0]
    n = X.n - 1;
    6f44:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6f46:	f103 3aff 	add.w	sl, r3, #4294967295
    t = Y.n - 1;
    6f4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6f4c:	9201      	str	r2, [sp, #4]
    6f4e:	f102 39ff 	add.w	r9, r2, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    6f52:	eba3 0802 	sub.w	r8, r3, r2
    6f56:	ea4f 1348 	mov.w	r3, r8, lsl #5
    6f5a:	9302      	str	r3, [sp, #8]
    6f5c:	4619      	mov	r1, r3
    6f5e:	a810      	add	r0, sp, #64	; 0x40
    6f60:	f7ff fc5c 	bl	681c <mbedtls_mpi_shift_l>
    6f64:	4604      	mov	r4, r0
    6f66:	2800      	cmp	r0, #0
    6f68:	d197      	bne.n	6e9a <mbedtls_mpi_div_mpi+0x72>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    6f6a:	a910      	add	r1, sp, #64	; 0x40
    6f6c:	a813      	add	r0, sp, #76	; 0x4c
    6f6e:	f7ff fda4 	bl	6aba <mbedtls_mpi_cmp_mpi>
    6f72:	2800      	cmp	r0, #0
    6f74:	db0e      	blt.n	6f94 <mbedtls_mpi_div_mpi+0x16c>
        Z.p[n - t]++;
    6f76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6f78:	f852 3028 	ldr.w	r3, [r2, r8, lsl #2]
    6f7c:	3301      	adds	r3, #1
    6f7e:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    6f82:	aa10      	add	r2, sp, #64	; 0x40
    6f84:	a913      	add	r1, sp, #76	; 0x4c
    6f86:	4608      	mov	r0, r1
    6f88:	f7ff feaf 	bl	6cea <mbedtls_mpi_sub_mpi>
    6f8c:	4604      	mov	r4, r0
    6f8e:	2800      	cmp	r0, #0
    6f90:	d0eb      	beq.n	6f6a <mbedtls_mpi_div_mpi+0x142>
    6f92:	e782      	b.n	6e9a <mbedtls_mpi_div_mpi+0x72>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    6f94:	9902      	ldr	r1, [sp, #8]
    6f96:	a810      	add	r0, sp, #64	; 0x40
    6f98:	f7ff fc92 	bl	68c0 <mbedtls_mpi_shift_r>
    6f9c:	4604      	mov	r4, r0
    6f9e:	2800      	cmp	r0, #0
    6fa0:	f47f af7b 	bne.w	6e9a <mbedtls_mpi_div_mpi+0x72>
    6fa4:	9602      	str	r6, [sp, #8]
    6fa6:	9703      	str	r7, [sp, #12]
    6fa8:	464f      	mov	r7, r9
    6faa:	9504      	str	r5, [sp, #16]
    6fac:	4655      	mov	r5, sl
    6fae:	f8cd b014 	str.w	fp, [sp, #20]
    6fb2:	f8dd b004 	ldr.w	fp, [sp, #4]
    for( i = n; i > t ; i-- )
    6fb6:	42bd      	cmp	r5, r7
    6fb8:	f240 80cd 	bls.w	7156 <mbedtls_mpi_div_mpi+0x32e>
        if( X.p[i] >= Y.p[t] )
    6fbc:	9915      	ldr	r1, [sp, #84]	; 0x54
    6fbe:	ea4f 0885 	mov.w	r8, r5, lsl #2
    6fc2:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
    6fc6:	ea4f 0987 	mov.w	r9, r7, lsl #2
    6fca:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6fcc:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    6fd0:	4290      	cmp	r0, r2
    6fd2:	d317      	bcc.n	7004 <mbedtls_mpi_div_mpi+0x1dc>
            Z.p[i - t - 1] = ~0;
    6fd4:	1beb      	subs	r3, r5, r7
    6fd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6fda:	3b01      	subs	r3, #1
    6fdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6fde:	f04f 31ff 	mov.w	r1, #4294967295
    6fe2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Z.p[i - t - 1]++;
    6fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6fe8:	1beb      	subs	r3, r5, r7
    6fea:	9301      	str	r3, [sp, #4]
    6fec:	f103 4a80 	add.w	sl, r3, #1073741824	; 0x40000000
    6ff0:	f10a 3aff 	add.w	sl, sl, #4294967295
    6ff4:	ea4f 068a 	mov.w	r6, sl, lsl #2
    6ff8:	f852 302a 	ldr.w	r3, [r2, sl, lsl #2]
    6ffc:	3301      	adds	r3, #1
    6ffe:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
    7002:	e046      	b.n	7092 <mbedtls_mpi_div_mpi+0x26a>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    7004:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    7008:	eb05 0c03 	add.w	ip, r5, r3
    700c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    700e:	1bec      	subs	r4, r5, r7
    7010:	441c      	add	r4, r3
    7012:	2300      	movs	r3, #0
    7014:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
    7018:	f7ff fa9e 	bl	6558 <mbedtls_int_div_int>
    701c:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    7020:	e7e1      	b.n	6fe6 <mbedtls_mpi_div_mpi+0x1be>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7022:	463a      	mov	r2, r7
    7024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7026:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
    7028:	9b12      	ldr	r3, [sp, #72]	; 0x48
    702a:	f853 2009 	ldr.w	r2, [r3, r9]
    702e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7030:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    7032:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7034:	599a      	ldr	r2, [r3, r6]
    7036:	a90a      	add	r1, sp, #40	; 0x28
    7038:	4608      	mov	r0, r1
    703a:	f7ff fee7 	bl	6e0c <mbedtls_mpi_mul_int>
    703e:	4604      	mov	r4, r0
    7040:	2800      	cmp	r0, #0
    7042:	f47f af2a 	bne.w	6e9a <mbedtls_mpi_div_mpi+0x72>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
    7046:	2100      	movs	r1, #0
    7048:	a807      	add	r0, sp, #28
    704a:	f7ff fb39 	bl	66c0 <mbedtls_mpi_lset>
    704e:	4604      	mov	r4, r0
    7050:	2800      	cmp	r0, #0
    7052:	f47f af22 	bne.w	6e9a <mbedtls_mpi_div_mpi+0x72>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    7056:	2d01      	cmp	r5, #1
    7058:	d930      	bls.n	70bc <mbedtls_mpi_div_mpi+0x294>
    705a:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    705e:	3b02      	subs	r3, #2
    7060:	9a15      	ldr	r2, [sp, #84]	; 0x54
    7062:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7066:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7068:	601a      	str	r2, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    706a:	b34d      	cbz	r5, 70c0 <mbedtls_mpi_div_mpi+0x298>
    706c:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    7070:	3b01      	subs	r3, #1
    7072:	9a15      	ldr	r2, [sp, #84]	; 0x54
    7074:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7078:	9b09      	ldr	r3, [sp, #36]	; 0x24
    707a:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
    707c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    707e:	f853 2008 	ldr.w	r2, [r3, r8]
    7082:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7084:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    7086:	a907      	add	r1, sp, #28
    7088:	a80a      	add	r0, sp, #40	; 0x28
    708a:	f7ff fd16 	bl	6aba <mbedtls_mpi_cmp_mpi>
    708e:	2800      	cmp	r0, #0
    7090:	dd18      	ble.n	70c4 <mbedtls_mpi_div_mpi+0x29c>
            Z.p[i - t - 1]--;
    7092:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7094:	5993      	ldr	r3, [r2, r6]
    7096:	3b01      	subs	r3, #1
    7098:	5193      	str	r3, [r2, r6]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    709a:	2100      	movs	r1, #0
    709c:	a80a      	add	r0, sp, #40	; 0x28
    709e:	f7ff fb0f 	bl	66c0 <mbedtls_mpi_lset>
    70a2:	4604      	mov	r4, r0
    70a4:	2800      	cmp	r0, #0
    70a6:	f47f aef8 	bne.w	6e9a <mbedtls_mpi_div_mpi+0x72>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    70aa:	2f00      	cmp	r7, #0
    70ac:	d0b9      	beq.n	7022 <mbedtls_mpi_div_mpi+0x1fa>
    70ae:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
    70b2:	3b02      	subs	r3, #2
    70b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    70b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    70ba:	e7b3      	b.n	7024 <mbedtls_mpi_div_mpi+0x1fc>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    70bc:	2200      	movs	r2, #0
    70be:	e7d2      	b.n	7066 <mbedtls_mpi_div_mpi+0x23e>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    70c0:	462a      	mov	r2, r5
    70c2:	e7d9      	b.n	7078 <mbedtls_mpi_div_mpi+0x250>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    70c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    70c6:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
    70ca:	a910      	add	r1, sp, #64	; 0x40
    70cc:	a80a      	add	r0, sp, #40	; 0x28
    70ce:	f7ff fe9d 	bl	6e0c <mbedtls_mpi_mul_int>
    70d2:	4604      	mov	r4, r0
    70d4:	2800      	cmp	r0, #0
    70d6:	f47f aee0 	bne.w	6e9a <mbedtls_mpi_div_mpi+0x72>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    70da:	9b01      	ldr	r3, [sp, #4]
    70dc:	f103 6600 	add.w	r6, r3, #134217728	; 0x8000000
    70e0:	3e01      	subs	r6, #1
    70e2:	0176      	lsls	r6, r6, #5
    70e4:	4631      	mov	r1, r6
    70e6:	a80a      	add	r0, sp, #40	; 0x28
    70e8:	f7ff fb98 	bl	681c <mbedtls_mpi_shift_l>
    70ec:	4604      	mov	r4, r0
    70ee:	2800      	cmp	r0, #0
    70f0:	f47f aed3 	bne.w	6e9a <mbedtls_mpi_div_mpi+0x72>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    70f4:	aa0a      	add	r2, sp, #40	; 0x28
    70f6:	a913      	add	r1, sp, #76	; 0x4c
    70f8:	4608      	mov	r0, r1
    70fa:	f7ff fdf6 	bl	6cea <mbedtls_mpi_sub_mpi>
    70fe:	4604      	mov	r4, r0
    7100:	2800      	cmp	r0, #0
    7102:	f47f aeca 	bne.w	6e9a <mbedtls_mpi_div_mpi+0x72>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    7106:	2100      	movs	r1, #0
    7108:	a813      	add	r0, sp, #76	; 0x4c
    710a:	f7ff fd1f 	bl	6b4c <mbedtls_mpi_cmp_int>
    710e:	2800      	cmp	r0, #0
    7110:	db01      	blt.n	7116 <mbedtls_mpi_div_mpi+0x2ee>
    for( i = n; i > t ; i-- )
    7112:	3d01      	subs	r5, #1
    7114:	e74f      	b.n	6fb6 <mbedtls_mpi_div_mpi+0x18e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    7116:	a910      	add	r1, sp, #64	; 0x40
    7118:	a80a      	add	r0, sp, #40	; 0x28
    711a:	f7ff fa9f 	bl	665c <mbedtls_mpi_copy>
    711e:	4604      	mov	r4, r0
    7120:	2800      	cmp	r0, #0
    7122:	f47f aeba 	bne.w	6e9a <mbedtls_mpi_div_mpi+0x72>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    7126:	4631      	mov	r1, r6
    7128:	a80a      	add	r0, sp, #40	; 0x28
    712a:	f7ff fb77 	bl	681c <mbedtls_mpi_shift_l>
    712e:	4604      	mov	r4, r0
    7130:	2800      	cmp	r0, #0
    7132:	f47f aeb2 	bne.w	6e9a <mbedtls_mpi_div_mpi+0x72>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    7136:	aa0a      	add	r2, sp, #40	; 0x28
    7138:	a913      	add	r1, sp, #76	; 0x4c
    713a:	4608      	mov	r0, r1
    713c:	f7ff fdab 	bl	6c96 <mbedtls_mpi_add_mpi>
    7140:	4604      	mov	r4, r0
    7142:	2800      	cmp	r0, #0
    7144:	f47f aea9 	bne.w	6e9a <mbedtls_mpi_div_mpi+0x72>
            Z.p[i - t - 1]--;
    7148:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    714a:	f852 302a 	ldr.w	r3, [r2, sl, lsl #2]
    714e:	3b01      	subs	r3, #1
    7150:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
    7154:	e7dd      	b.n	7112 <mbedtls_mpi_div_mpi+0x2ea>
    7156:	9e02      	ldr	r6, [sp, #8]
    7158:	9f03      	ldr	r7, [sp, #12]
    715a:	9d04      	ldr	r5, [sp, #16]
    715c:	f8dd b014 	ldr.w	fp, [sp, #20]
    if( Q != NULL )
    7160:	b16e      	cbz	r6, 717e <mbedtls_mpi_div_mpi+0x356>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    7162:	a90d      	add	r1, sp, #52	; 0x34
    7164:	4630      	mov	r0, r6
    7166:	f7ff fa79 	bl	665c <mbedtls_mpi_copy>
    716a:	4604      	mov	r4, r0
    716c:	2800      	cmp	r0, #0
    716e:	f47f ae94 	bne.w	6e9a <mbedtls_mpi_div_mpi+0x72>
        Q->s = A->s * B->s;
    7172:	682a      	ldr	r2, [r5, #0]
    7174:	f8db 3000 	ldr.w	r3, [fp]
    7178:	fb03 f302 	mul.w	r3, r3, r2
    717c:	6033      	str	r3, [r6, #0]
    if( R != NULL )
    717e:	2f00      	cmp	r7, #0
    7180:	f43f ae8b 	beq.w	6e9a <mbedtls_mpi_div_mpi+0x72>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    7184:	9900      	ldr	r1, [sp, #0]
    7186:	a813      	add	r0, sp, #76	; 0x4c
    7188:	f7ff fb9a 	bl	68c0 <mbedtls_mpi_shift_r>
    718c:	4604      	mov	r4, r0
    718e:	2800      	cmp	r0, #0
    7190:	f47f ae83 	bne.w	6e9a <mbedtls_mpi_div_mpi+0x72>
        X.s = A->s;
    7194:	682b      	ldr	r3, [r5, #0]
    7196:	9313      	str	r3, [sp, #76]	; 0x4c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    7198:	a913      	add	r1, sp, #76	; 0x4c
    719a:	4638      	mov	r0, r7
    719c:	f7ff fa5e 	bl	665c <mbedtls_mpi_copy>
    71a0:	4604      	mov	r4, r0
    71a2:	2800      	cmp	r0, #0
    71a4:	f47f ae79 	bne.w	6e9a <mbedtls_mpi_div_mpi+0x72>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    71a8:	2100      	movs	r1, #0
    71aa:	4638      	mov	r0, r7
    71ac:	f7ff fcce 	bl	6b4c <mbedtls_mpi_cmp_int>
    71b0:	2800      	cmp	r0, #0
    71b2:	f47f ae72 	bne.w	6e9a <mbedtls_mpi_div_mpi+0x72>
            R->s = 1;
    71b6:	2301      	movs	r3, #1
    71b8:	603b      	str	r3, [r7, #0]
    71ba:	e66e      	b.n	6e9a <mbedtls_mpi_div_mpi+0x72>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    71bc:	f06f 040b 	mvn.w	r4, #11
    71c0:	e67a      	b.n	6eb8 <mbedtls_mpi_div_mpi+0x90>

000071c2 <mbedtls_mpi_mod_mpi>:
{
    71c2:	b570      	push	{r4, r5, r6, lr}
    71c4:	4604      	mov	r4, r0
    71c6:	460e      	mov	r6, r1
    71c8:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    71ca:	2100      	movs	r1, #0
    71cc:	4610      	mov	r0, r2
    71ce:	f7ff fcbd 	bl	6b4c <mbedtls_mpi_cmp_int>
    71d2:	2800      	cmp	r0, #0
    71d4:	db26      	blt.n	7224 <mbedtls_mpi_mod_mpi+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    71d6:	462b      	mov	r3, r5
    71d8:	4632      	mov	r2, r6
    71da:	4621      	mov	r1, r4
    71dc:	2000      	movs	r0, #0
    71de:	f7ff fe23 	bl	6e28 <mbedtls_mpi_div_mpi>
    71e2:	4606      	mov	r6, r0
    71e4:	b968      	cbnz	r0, 7202 <mbedtls_mpi_mod_mpi+0x40>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    71e6:	2100      	movs	r1, #0
    71e8:	4620      	mov	r0, r4
    71ea:	f7ff fcaf 	bl	6b4c <mbedtls_mpi_cmp_int>
    71ee:	2800      	cmp	r0, #0
    71f0:	da09      	bge.n	7206 <mbedtls_mpi_mod_mpi+0x44>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    71f2:	462a      	mov	r2, r5
    71f4:	4621      	mov	r1, r4
    71f6:	4620      	mov	r0, r4
    71f8:	f7ff fd4d 	bl	6c96 <mbedtls_mpi_add_mpi>
    71fc:	4606      	mov	r6, r0
    71fe:	2800      	cmp	r0, #0
    7200:	d0f1      	beq.n	71e6 <mbedtls_mpi_mod_mpi+0x24>
}
    7202:	4630      	mov	r0, r6
    7204:	bd70      	pop	{r4, r5, r6, pc}
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    7206:	4629      	mov	r1, r5
    7208:	4620      	mov	r0, r4
    720a:	f7ff fc56 	bl	6aba <mbedtls_mpi_cmp_mpi>
    720e:	2800      	cmp	r0, #0
    7210:	dbf7      	blt.n	7202 <mbedtls_mpi_mod_mpi+0x40>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    7212:	462a      	mov	r2, r5
    7214:	4621      	mov	r1, r4
    7216:	4620      	mov	r0, r4
    7218:	f7ff fd67 	bl	6cea <mbedtls_mpi_sub_mpi>
    721c:	4606      	mov	r6, r0
    721e:	2800      	cmp	r0, #0
    7220:	d0f1      	beq.n	7206 <mbedtls_mpi_mod_mpi+0x44>
    7222:	e7ee      	b.n	7202 <mbedtls_mpi_mod_mpi+0x40>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    7224:	f06f 0609 	mvn.w	r6, #9
    7228:	e7eb      	b.n	7202 <mbedtls_mpi_mod_mpi+0x40>

0000722a <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    722a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    722e:	f2ad 6d44 	subw	sp, sp, #1604	; 0x644
    7232:	9002      	str	r0, [sp, #8]
    7234:	468b      	mov	fp, r1
    7236:	4692      	mov	sl, r2
    7238:	461d      	mov	r5, r3
    723a:	f8dd 9668 	ldr.w	r9, [sp, #1640]	; 0x668
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    723e:	2100      	movs	r1, #0
    7240:	4618      	mov	r0, r3
    7242:	f7ff fc83 	bl	6b4c <mbedtls_mpi_cmp_int>
    7246:	2800      	cmp	r0, #0
    7248:	f340 8214 	ble.w	7674 <mbedtls_mpi_exp_mod+0x44a>
    724c:	68ab      	ldr	r3, [r5, #8]
    724e:	681f      	ldr	r7, [r3, #0]
    7250:	f017 0701 	ands.w	r7, r7, #1
    7254:	f000 8211 	beq.w	767a <mbedtls_mpi_exp_mod+0x450>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    7258:	2100      	movs	r1, #0
    725a:	4650      	mov	r0, sl
    725c:	f7ff fc76 	bl	6b4c <mbedtls_mpi_cmp_int>
    7260:	2800      	cmp	r0, #0
    7262:	f2c0 820d 	blt.w	7680 <mbedtls_mpi_exp_mod+0x456>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    /*
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    7266:	4629      	mov	r1, r5
    7268:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    726c:	f7ff f999 	bl	65a2 <mpi_montg_init>
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    7270:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    7274:	f7ff f9b1 	bl	65da <mbedtls_mpi_init>
    7278:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    727c:	f7ff f9ad 	bl	65da <mbedtls_mpi_init>
    mbedtls_mpi_init( &Apos );
    7280:	a806      	add	r0, sp, #24
    7282:	f7ff f9aa 	bl	65da <mbedtls_mpi_init>
    memset( W, 0, sizeof( W ) );
    7286:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    728a:	2100      	movs	r1, #0
    728c:	a809      	add	r0, sp, #36	; 0x24
    728e:	f7fe fbbe 	bl	5a0e <memset>

    i = mbedtls_mpi_bitlen( E );
    7292:	4650      	mov	r0, sl
    7294:	f7ff fa42 	bl	671c <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    7298:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    729c:	d207      	bcs.n	72ae <mbedtls_mpi_exp_mod+0x84>
    729e:	28ef      	cmp	r0, #239	; 0xef
    72a0:	d81f      	bhi.n	72e2 <mbedtls_mpi_exp_mod+0xb8>
    72a2:	284f      	cmp	r0, #79	; 0x4f
    72a4:	d81f      	bhi.n	72e6 <mbedtls_mpi_exp_mod+0xbc>
    72a6:	2817      	cmp	r0, #23
    72a8:	d91f      	bls.n	72ea <mbedtls_mpi_exp_mod+0xc0>
    72aa:	2403      	movs	r4, #3
    72ac:	e000      	b.n	72b0 <mbedtls_mpi_exp_mod+0x86>
    72ae:	2406      	movs	r4, #6
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    72b0:	686e      	ldr	r6, [r5, #4]
    72b2:	3601      	adds	r6, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    72b4:	4631      	mov	r1, r6
    72b6:	9802      	ldr	r0, [sp, #8]
    72b8:	f7ff f9a7 	bl	660a <mbedtls_mpi_grow>
    72bc:	4680      	mov	r8, r0
    72be:	b1b0      	cbz	r0, 72ee <mbedtls_mpi_exp_mod+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    72c0:	1e63      	subs	r3, r4, #1
    72c2:	2501      	movs	r5, #1
    72c4:	409d      	lsls	r5, r3
    72c6:	2301      	movs	r3, #1
    72c8:	40a3      	lsls	r3, r4
    72ca:	42ab      	cmp	r3, r5
    72cc:	f240 81b8 	bls.w	7640 <mbedtls_mpi_exp_mod+0x416>
        mbedtls_mpi_free( &W[i] );
    72d0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    72d4:	0098      	lsls	r0, r3, #2
    72d6:	ab09      	add	r3, sp, #36	; 0x24
    72d8:	4418      	add	r0, r3
    72da:	f7ff f984 	bl	65e6 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    72de:	3501      	adds	r5, #1
    72e0:	e7f1      	b.n	72c6 <mbedtls_mpi_exp_mod+0x9c>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    72e2:	2405      	movs	r4, #5
    72e4:	e7e4      	b.n	72b0 <mbedtls_mpi_exp_mod+0x86>
    72e6:	2404      	movs	r4, #4
    72e8:	e7e2      	b.n	72b0 <mbedtls_mpi_exp_mod+0x86>
    72ea:	463c      	mov	r4, r7
    72ec:	e7e0      	b.n	72b0 <mbedtls_mpi_exp_mod+0x86>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    72ee:	4631      	mov	r1, r6
    72f0:	a80c      	add	r0, sp, #48	; 0x30
    72f2:	f7ff f98a 	bl	660a <mbedtls_mpi_grow>
    72f6:	4680      	mov	r8, r0
    72f8:	2800      	cmp	r0, #0
    72fa:	d1e1      	bne.n	72c0 <mbedtls_mpi_exp_mod+0x96>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    72fc:	0071      	lsls	r1, r6, #1
    72fe:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    7302:	f7ff f982 	bl	660a <mbedtls_mpi_grow>
    7306:	4680      	mov	r8, r0
    7308:	2800      	cmp	r0, #0
    730a:	d1d9      	bne.n	72c0 <mbedtls_mpi_exp_mod+0x96>
    neg = ( A->s == -1 );
    730c:	f8db 3000 	ldr.w	r3, [fp]
    7310:	9303      	str	r3, [sp, #12]
    if( neg )
    7312:	f1b3 3fff 	cmp.w	r3, #4294967295
    7316:	d047      	beq.n	73a8 <mbedtls_mpi_exp_mod+0x17e>
    if( _RR == NULL || _RR->p == NULL )
    7318:	f1b9 0f00 	cmp.w	r9, #0
    731c:	d050      	beq.n	73c0 <mbedtls_mpi_exp_mod+0x196>
    731e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    7322:	2b00      	cmp	r3, #0
    7324:	d04c      	beq.n	73c0 <mbedtls_mpi_exp_mod+0x196>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    7326:	220c      	movs	r2, #12
    7328:	4649      	mov	r1, r9
    732a:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    732e:	f7fe fb4b 	bl	59c8 <memcpy>
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    7332:	4629      	mov	r1, r5
    7334:	4658      	mov	r0, fp
    7336:	f7ff fbc0 	bl	6aba <mbedtls_mpi_cmp_mpi>
    733a:	2800      	cmp	r0, #0
    733c:	db67      	blt.n	740e <mbedtls_mpi_exp_mod+0x1e4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    733e:	462a      	mov	r2, r5
    7340:	4659      	mov	r1, fp
    7342:	a80c      	add	r0, sp, #48	; 0x30
    7344:	f7ff ff3d 	bl	71c2 <mbedtls_mpi_mod_mpi>
    7348:	4680      	mov	r8, r0
    734a:	2800      	cmp	r0, #0
    734c:	d1b8      	bne.n	72c0 <mbedtls_mpi_exp_mod+0x96>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
    734e:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    7352:	9300      	str	r3, [sp, #0]
    7354:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    7358:	462a      	mov	r2, r5
    735a:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    735e:	a80c      	add	r0, sp, #48	; 0x30
    7360:	f7ff fb2e 	bl	69c0 <mpi_montmul>
    7364:	4680      	mov	r8, r0
    7366:	2800      	cmp	r0, #0
    7368:	d1aa      	bne.n	72c0 <mbedtls_mpi_exp_mod+0x96>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    736a:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    736e:	9e02      	ldr	r6, [sp, #8]
    7370:	4630      	mov	r0, r6
    7372:	f7ff f973 	bl	665c <mbedtls_mpi_copy>
    7376:	4680      	mov	r8, r0
    7378:	2800      	cmp	r0, #0
    737a:	d1a1      	bne.n	72c0 <mbedtls_mpi_exp_mod+0x96>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
    737c:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    7380:	f8dd 263c 	ldr.w	r2, [sp, #1596]	; 0x63c
    7384:	4629      	mov	r1, r5
    7386:	4630      	mov	r0, r6
    7388:	f7ff fb87 	bl	6a9a <mpi_montred>
    738c:	4680      	mov	r8, r0
    738e:	2800      	cmp	r0, #0
    7390:	d196      	bne.n	72c0 <mbedtls_mpi_exp_mod+0x96>
    if( wsize > 1 )
    7392:	2c01      	cmp	r4, #1
    7394:	d843      	bhi.n	741e <mbedtls_mpi_exp_mod+0x1f4>
    nblimbs = E->n;
    7396:	f8da 2004 	ldr.w	r2, [sl, #4]
    state   = 0;
    739a:	2300      	movs	r3, #0
    739c:	9305      	str	r3, [sp, #20]
    nbits   = 0;
    739e:	461e      	mov	r6, r3
    bufsize = 0;
    73a0:	469b      	mov	fp, r3
    wbits   = 0;
    73a2:	9304      	str	r3, [sp, #16]
    73a4:	4690      	mov	r8, r2
    73a6:	e0a7      	b.n	74f8 <mbedtls_mpi_exp_mod+0x2ce>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    73a8:	4659      	mov	r1, fp
    73aa:	a806      	add	r0, sp, #24
    73ac:	f7ff f956 	bl	665c <mbedtls_mpi_copy>
    73b0:	4680      	mov	r8, r0
    73b2:	2800      	cmp	r0, #0
    73b4:	d184      	bne.n	72c0 <mbedtls_mpi_exp_mod+0x96>
        Apos.s = 1;
    73b6:	2301      	movs	r3, #1
    73b8:	9306      	str	r3, [sp, #24]
        A = &Apos;
    73ba:	f10d 0b18 	add.w	fp, sp, #24
    73be:	e7ab      	b.n	7318 <mbedtls_mpi_exp_mod+0xee>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    73c0:	2101      	movs	r1, #1
    73c2:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    73c6:	f7ff f97b 	bl	66c0 <mbedtls_mpi_lset>
    73ca:	4680      	mov	r8, r0
    73cc:	2800      	cmp	r0, #0
    73ce:	f47f af77 	bne.w	72c0 <mbedtls_mpi_exp_mod+0x96>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    73d2:	6869      	ldr	r1, [r5, #4]
    73d4:	0189      	lsls	r1, r1, #6
    73d6:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    73da:	f7ff fa1f 	bl	681c <mbedtls_mpi_shift_l>
    73de:	4680      	mov	r8, r0
    73e0:	2800      	cmp	r0, #0
    73e2:	f47f af6d 	bne.w	72c0 <mbedtls_mpi_exp_mod+0x96>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    73e6:	462a      	mov	r2, r5
    73e8:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    73ec:	4608      	mov	r0, r1
    73ee:	f7ff fee8 	bl	71c2 <mbedtls_mpi_mod_mpi>
    73f2:	4680      	mov	r8, r0
    73f4:	2800      	cmp	r0, #0
    73f6:	f47f af63 	bne.w	72c0 <mbedtls_mpi_exp_mod+0x96>
        if( _RR != NULL )
    73fa:	f1b9 0f00 	cmp.w	r9, #0
    73fe:	d098      	beq.n	7332 <mbedtls_mpi_exp_mod+0x108>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    7400:	220c      	movs	r2, #12
    7402:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    7406:	4648      	mov	r0, r9
    7408:	f7fe fade 	bl	59c8 <memcpy>
    740c:	e791      	b.n	7332 <mbedtls_mpi_exp_mod+0x108>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    740e:	4659      	mov	r1, fp
    7410:	a80c      	add	r0, sp, #48	; 0x30
    7412:	f7ff f923 	bl	665c <mbedtls_mpi_copy>
    7416:	4680      	mov	r8, r0
    7418:	2800      	cmp	r0, #0
    741a:	d098      	beq.n	734e <mbedtls_mpi_exp_mod+0x124>
    741c:	e750      	b.n	72c0 <mbedtls_mpi_exp_mod+0x96>
        j =  one << ( wsize - 1 );
    741e:	1e63      	subs	r3, r4, #1
    7420:	9304      	str	r3, [sp, #16]
    7422:	2601      	movs	r6, #1
    7424:	409e      	lsls	r6, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    7426:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    742a:	0093      	lsls	r3, r2, #2
    742c:	aa09      	add	r2, sp, #36	; 0x24
    742e:	18d3      	adds	r3, r2, r3
    7430:	9305      	str	r3, [sp, #20]
    7432:	6869      	ldr	r1, [r5, #4]
    7434:	3101      	adds	r1, #1
    7436:	469b      	mov	fp, r3
    7438:	4618      	mov	r0, r3
    743a:	f7ff f8e6 	bl	660a <mbedtls_mpi_grow>
    743e:	4680      	mov	r8, r0
    7440:	2800      	cmp	r0, #0
    7442:	f47f af3d 	bne.w	72c0 <mbedtls_mpi_exp_mod+0x96>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    7446:	a90c      	add	r1, sp, #48	; 0x30
    7448:	4658      	mov	r0, fp
    744a:	f7ff f907 	bl	665c <mbedtls_mpi_copy>
    744e:	4680      	mov	r8, r0
    7450:	2800      	cmp	r0, #0
    7452:	f47f af35 	bne.w	72c0 <mbedtls_mpi_exp_mod+0x96>
        for( i = 0; i < wsize - 1; i++ )
    7456:	f04f 0b00 	mov.w	fp, #0
    745a:	9b04      	ldr	r3, [sp, #16]
    745c:	455b      	cmp	r3, fp
    745e:	d910      	bls.n	7482 <mbedtls_mpi_exp_mod+0x258>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
    7460:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    7464:	9300      	str	r3, [sp, #0]
    7466:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    746a:	462a      	mov	r2, r5
    746c:	9805      	ldr	r0, [sp, #20]
    746e:	4601      	mov	r1, r0
    7470:	f7ff faa6 	bl	69c0 <mpi_montmul>
    7474:	4680      	mov	r8, r0
    7476:	2800      	cmp	r0, #0
    7478:	f47f af22 	bne.w	72c0 <mbedtls_mpi_exp_mod+0x96>
        for( i = 0; i < wsize - 1; i++ )
    747c:	f10b 0b01 	add.w	fp, fp, #1
    7480:	e7eb      	b.n	745a <mbedtls_mpi_exp_mod+0x230>
        for( i = j + 1; i < ( one << wsize ); i++ )
    7482:	3601      	adds	r6, #1
    7484:	2301      	movs	r3, #1
    7486:	40a3      	lsls	r3, r4
    7488:	42b3      	cmp	r3, r6
    748a:	d984      	bls.n	7396 <mbedtls_mpi_exp_mod+0x16c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    748c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    7490:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    7494:	ab09      	add	r3, sp, #36	; 0x24
    7496:	449b      	add	fp, r3
    7498:	6869      	ldr	r1, [r5, #4]
    749a:	3101      	adds	r1, #1
    749c:	4658      	mov	r0, fp
    749e:	f7ff f8b4 	bl	660a <mbedtls_mpi_grow>
    74a2:	4680      	mov	r8, r0
    74a4:	2800      	cmp	r0, #0
    74a6:	f47f af0b 	bne.w	72c0 <mbedtls_mpi_exp_mod+0x96>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    74aa:	1e73      	subs	r3, r6, #1
    74ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    74b0:	0099      	lsls	r1, r3, #2
    74b2:	ab09      	add	r3, sp, #36	; 0x24
    74b4:	4419      	add	r1, r3
    74b6:	4658      	mov	r0, fp
    74b8:	f7ff f8d0 	bl	665c <mbedtls_mpi_copy>
    74bc:	4680      	mov	r8, r0
    74be:	2800      	cmp	r0, #0
    74c0:	f47f aefe 	bne.w	72c0 <mbedtls_mpi_exp_mod+0x96>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
    74c4:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    74c8:	9300      	str	r3, [sp, #0]
    74ca:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    74ce:	462a      	mov	r2, r5
    74d0:	a90c      	add	r1, sp, #48	; 0x30
    74d2:	4658      	mov	r0, fp
    74d4:	f7ff fa74 	bl	69c0 <mpi_montmul>
    74d8:	4680      	mov	r8, r0
    74da:	2800      	cmp	r0, #0
    74dc:	f47f aef0 	bne.w	72c0 <mbedtls_mpi_exp_mod+0x96>
        for( i = j + 1; i < ( one << wsize ); i++ )
    74e0:	3601      	adds	r6, #1
    74e2:	e7cf      	b.n	7484 <mbedtls_mpi_exp_mod+0x25a>
        nbits++;
    74e4:	3601      	adds	r6, #1
        wbits |= ( ei << ( wsize - nbits ) );
    74e6:	1ba2      	subs	r2, r4, r6
    74e8:	4093      	lsls	r3, r2
    74ea:	9a04      	ldr	r2, [sp, #16]
    74ec:	431a      	orrs	r2, r3
    74ee:	9204      	str	r2, [sp, #16]
        if( nbits == wsize )
    74f0:	42b4      	cmp	r4, r6
    74f2:	d02c      	beq.n	754e <mbedtls_mpi_exp_mod+0x324>
        state = 2;
    74f4:	2302      	movs	r3, #2
    74f6:	9305      	str	r3, [sp, #20]
        if( bufsize == 0 )
    74f8:	f1bb 0f00 	cmp.w	fp, #0
    74fc:	d106      	bne.n	750c <mbedtls_mpi_exp_mod+0x2e2>
            if( nblimbs == 0 )
    74fe:	f1b8 0f00 	cmp.w	r8, #0
    7502:	d06f      	beq.n	75e4 <mbedtls_mpi_exp_mod+0x3ba>
            nblimbs--;
    7504:	f108 38ff 	add.w	r8, r8, #4294967295
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    7508:	f04f 0b20 	mov.w	fp, #32
        bufsize--;
    750c:	f10b 3bff 	add.w	fp, fp, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
    7510:	f8da 3008 	ldr.w	r3, [sl, #8]
    7514:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
    7518:	fa23 f30b 	lsr.w	r3, r3, fp
        if( ei == 0 && state == 0 )
    751c:	f013 0301 	ands.w	r3, r3, #1
    7520:	d102      	bne.n	7528 <mbedtls_mpi_exp_mod+0x2fe>
    7522:	9a05      	ldr	r2, [sp, #20]
    7524:	2a00      	cmp	r2, #0
    7526:	d0e7      	beq.n	74f8 <mbedtls_mpi_exp_mod+0x2ce>
        if( ei == 0 && state == 1 )
    7528:	2b00      	cmp	r3, #0
    752a:	d1db      	bne.n	74e4 <mbedtls_mpi_exp_mod+0x2ba>
    752c:	9a05      	ldr	r2, [sp, #20]
    752e:	2a01      	cmp	r2, #1
    7530:	d1d8      	bne.n	74e4 <mbedtls_mpi_exp_mod+0x2ba>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
    7532:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    7536:	9300      	str	r3, [sp, #0]
    7538:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    753c:	462a      	mov	r2, r5
    753e:	9802      	ldr	r0, [sp, #8]
    7540:	4601      	mov	r1, r0
    7542:	f7ff fa3d 	bl	69c0 <mpi_montmul>
    7546:	2800      	cmp	r0, #0
    7548:	d0d6      	beq.n	74f8 <mbedtls_mpi_exp_mod+0x2ce>
    754a:	4680      	mov	r8, r0
    754c:	e6b8      	b.n	72c0 <mbedtls_mpi_exp_mod+0x96>
            for( i = 0; i < wsize; i++ )
    754e:	2600      	movs	r6, #0
    7550:	42a6      	cmp	r6, r4
    7552:	d20d      	bcs.n	7570 <mbedtls_mpi_exp_mod+0x346>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
    7554:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    7558:	9300      	str	r3, [sp, #0]
    755a:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    755e:	462a      	mov	r2, r5
    7560:	9802      	ldr	r0, [sp, #8]
    7562:	4601      	mov	r1, r0
    7564:	f7ff fa2c 	bl	69c0 <mpi_montmul>
    7568:	2800      	cmp	r0, #0
    756a:	d165      	bne.n	7638 <mbedtls_mpi_exp_mod+0x40e>
            for( i = 0; i < wsize; i++ )
    756c:	3601      	adds	r6, #1
    756e:	e7ef      	b.n	7550 <mbedtls_mpi_exp_mod+0x326>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
    7570:	9b04      	ldr	r3, [sp, #16]
    7572:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7576:	0099      	lsls	r1, r3, #2
    7578:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    757c:	9300      	str	r3, [sp, #0]
    757e:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    7582:	462a      	mov	r2, r5
    7584:	a809      	add	r0, sp, #36	; 0x24
    7586:	4401      	add	r1, r0
    7588:	9802      	ldr	r0, [sp, #8]
    758a:	f7ff fa19 	bl	69c0 <mpi_montmul>
    758e:	2800      	cmp	r0, #0
    7590:	d154      	bne.n	763c <mbedtls_mpi_exp_mod+0x412>
            state--;
    7592:	9705      	str	r7, [sp, #20]
            nbits = 0;
    7594:	2600      	movs	r6, #0
            wbits = 0;
    7596:	9604      	str	r6, [sp, #16]
    7598:	e7ae      	b.n	74f8 <mbedtls_mpi_exp_mod+0x2ce>
    for( i = 0; i < nbits; i++ )
    759a:	f10b 0b01 	add.w	fp, fp, #1
    759e:	45b3      	cmp	fp, r6
    75a0:	d223      	bcs.n	75ea <mbedtls_mpi_exp_mod+0x3c0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
    75a2:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    75a6:	9300      	str	r3, [sp, #0]
    75a8:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    75ac:	462a      	mov	r2, r5
    75ae:	9802      	ldr	r0, [sp, #8]
    75b0:	4601      	mov	r1, r0
    75b2:	f7ff fa05 	bl	69c0 <mpi_montmul>
    75b6:	4680      	mov	r8, r0
    75b8:	2800      	cmp	r0, #0
    75ba:	f47f ae81 	bne.w	72c0 <mbedtls_mpi_exp_mod+0x96>
        wbits <<= 1;
    75be:	007f      	lsls	r7, r7, #1
        if( ( wbits & ( one << wsize ) ) != 0 )
    75c0:	2301      	movs	r3, #1
    75c2:	40a3      	lsls	r3, r4
    75c4:	423b      	tst	r3, r7
    75c6:	d0e8      	beq.n	759a <mbedtls_mpi_exp_mod+0x370>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
    75c8:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    75cc:	9300      	str	r3, [sp, #0]
    75ce:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    75d2:	462a      	mov	r2, r5
    75d4:	a90c      	add	r1, sp, #48	; 0x30
    75d6:	9802      	ldr	r0, [sp, #8]
    75d8:	f7ff f9f2 	bl	69c0 <mpi_montmul>
    75dc:	4680      	mov	r8, r0
    75de:	2800      	cmp	r0, #0
    75e0:	d0db      	beq.n	759a <mbedtls_mpi_exp_mod+0x370>
    75e2:	e66d      	b.n	72c0 <mbedtls_mpi_exp_mod+0x96>
    75e4:	9f04      	ldr	r7, [sp, #16]
    75e6:	46c3      	mov	fp, r8
    75e8:	e7d9      	b.n	759e <mbedtls_mpi_exp_mod+0x374>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
    75ea:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    75ee:	f8dd 263c 	ldr.w	r2, [sp, #1596]	; 0x63c
    75f2:	4629      	mov	r1, r5
    75f4:	9802      	ldr	r0, [sp, #8]
    75f6:	f7ff fa50 	bl	6a9a <mpi_montred>
    75fa:	4680      	mov	r8, r0
    75fc:	2800      	cmp	r0, #0
    75fe:	f47f ae5f 	bne.w	72c0 <mbedtls_mpi_exp_mod+0x96>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    7602:	9b03      	ldr	r3, [sp, #12]
    7604:	f1b3 3fff 	cmp.w	r3, #4294967295
    7608:	f47f ae5a 	bne.w	72c0 <mbedtls_mpi_exp_mod+0x96>
    760c:	f8da 3004 	ldr.w	r3, [sl, #4]
    7610:	2b00      	cmp	r3, #0
    7612:	f43f ae55 	beq.w	72c0 <mbedtls_mpi_exp_mod+0x96>
    7616:	f8da 3008 	ldr.w	r3, [sl, #8]
    761a:	681b      	ldr	r3, [r3, #0]
    761c:	f013 0f01 	tst.w	r3, #1
    7620:	f43f ae4e 	beq.w	72c0 <mbedtls_mpi_exp_mod+0x96>
        X->s = -1;
    7624:	f04f 33ff 	mov.w	r3, #4294967295
    7628:	9802      	ldr	r0, [sp, #8]
    762a:	4602      	mov	r2, r0
    762c:	6003      	str	r3, [r0, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    762e:	4629      	mov	r1, r5
    7630:	f7ff fb31 	bl	6c96 <mbedtls_mpi_add_mpi>
    7634:	4680      	mov	r8, r0
cleanup:
    7636:	e643      	b.n	72c0 <mbedtls_mpi_exp_mod+0x96>
    7638:	4680      	mov	r8, r0
    763a:	e641      	b.n	72c0 <mbedtls_mpi_exp_mod+0x96>
    763c:	4680      	mov	r8, r0
    763e:	e63f      	b.n	72c0 <mbedtls_mpi_exp_mod+0x96>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    7640:	a80c      	add	r0, sp, #48	; 0x30
    7642:	f7fe ffd0 	bl	65e6 <mbedtls_mpi_free>
    7646:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    764a:	f7fe ffcc 	bl	65e6 <mbedtls_mpi_free>
    764e:	a806      	add	r0, sp, #24
    7650:	f7fe ffc9 	bl	65e6 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    7654:	f1b9 0f00 	cmp.w	r9, #0
    7658:	d007      	beq.n	766a <mbedtls_mpi_exp_mod+0x440>
    765a:	f8d9 3008 	ldr.w	r3, [r9, #8]
    765e:	b123      	cbz	r3, 766a <mbedtls_mpi_exp_mod+0x440>
        mbedtls_mpi_free( &RR );

    return( ret );
}
    7660:	4640      	mov	r0, r8
    7662:	f20d 6d44 	addw	sp, sp, #1604	; 0x644
    7666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_mpi_free( &RR );
    766a:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    766e:	f7fe ffba 	bl	65e6 <mbedtls_mpi_free>
    7672:	e7f5      	b.n	7660 <mbedtls_mpi_exp_mod+0x436>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    7674:	f06f 0803 	mvn.w	r8, #3
    7678:	e7f2      	b.n	7660 <mbedtls_mpi_exp_mod+0x436>
    767a:	f06f 0803 	mvn.w	r8, #3
    767e:	e7ef      	b.n	7660 <mbedtls_mpi_exp_mod+0x436>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    7680:	f06f 0803 	mvn.w	r8, #3
    7684:	e7ec      	b.n	7660 <mbedtls_mpi_exp_mod+0x436>

00007686 <platform_calloc_uninit>:
}
    7686:	2000      	movs	r0, #0
    7688:	4770      	bx	lr

0000768a <platform_free_uninit>:
}
    768a:	4770      	bx	lr

0000768c <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    768c:	4770      	bx	lr

0000768e <mbedtls_rsa_import>:
{
    768e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7690:	4604      	mov	r4, r0
    7692:	4615      	mov	r5, r2
    7694:	461e      	mov	r6, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    7696:	460f      	mov	r7, r1
    7698:	b121      	cbz	r1, 76a4 <mbedtls_rsa_import+0x16>
    769a:	3008      	adds	r0, #8
    769c:	f7fe ffde 	bl	665c <mbedtls_mpi_copy>
    76a0:	4603      	mov	r3, r0
    76a2:	bb48      	cbnz	r0, 76f8 <mbedtls_rsa_import+0x6a>
    76a4:	b135      	cbz	r5, 76b4 <mbedtls_rsa_import+0x26>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    76a6:	4629      	mov	r1, r5
    76a8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    76ac:	f7fe ffd6 	bl	665c <mbedtls_mpi_copy>
    76b0:	4603      	mov	r3, r0
    76b2:	bb08      	cbnz	r0, 76f8 <mbedtls_rsa_import+0x6a>
    76b4:	b136      	cbz	r6, 76c4 <mbedtls_rsa_import+0x36>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    76b6:	4631      	mov	r1, r6
    76b8:	f104 0038 	add.w	r0, r4, #56	; 0x38
    76bc:	f7fe ffce 	bl	665c <mbedtls_mpi_copy>
    76c0:	4603      	mov	r3, r0
    76c2:	b9c8      	cbnz	r0, 76f8 <mbedtls_rsa_import+0x6a>
    76c4:	9b06      	ldr	r3, [sp, #24]
    76c6:	b133      	cbz	r3, 76d6 <mbedtls_rsa_import+0x48>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    76c8:	4619      	mov	r1, r3
    76ca:	f104 0020 	add.w	r0, r4, #32
    76ce:	f7fe ffc5 	bl	665c <mbedtls_mpi_copy>
    76d2:	4603      	mov	r3, r0
    76d4:	b980      	cbnz	r0, 76f8 <mbedtls_rsa_import+0x6a>
    76d6:	9b07      	ldr	r3, [sp, #28]
    76d8:	b133      	cbz	r3, 76e8 <mbedtls_rsa_import+0x5a>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    76da:	4619      	mov	r1, r3
    76dc:	f104 0014 	add.w	r0, r4, #20
    76e0:	f7fe ffbc 	bl	665c <mbedtls_mpi_copy>
    76e4:	4603      	mov	r3, r0
    76e6:	b938      	cbnz	r0, 76f8 <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    76e8:	b14f      	cbz	r7, 76fe <mbedtls_rsa_import+0x70>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    76ea:	f104 0008 	add.w	r0, r4, #8
    76ee:	f7ff f82b 	bl	6748 <mbedtls_mpi_size>
    76f2:	6060      	str	r0, [r4, #4]
    return( 0 );
    76f4:	2000      	movs	r0, #0
    76f6:	e001      	b.n	76fc <mbedtls_rsa_import+0x6e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
    76f8:	f5a3 4081 	sub.w	r0, r3, #16512	; 0x4080
}
    76fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
    76fe:	2000      	movs	r0, #0
    7700:	e7fc      	b.n	76fc <mbedtls_rsa_import+0x6e>

00007702 <mbedtls_rsa_set_padding>:
    ctx->padding = padding;
    7702:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
    ctx->hash_id = hash_id;
    7706:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}
    770a:	4770      	bx	lr

0000770c <mbedtls_rsa_init>:
{
    770c:	b570      	push	{r4, r5, r6, lr}
    770e:	4604      	mov	r4, r0
    7710:	460d      	mov	r5, r1
    7712:	4616      	mov	r6, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    7714:	22ac      	movs	r2, #172	; 0xac
    7716:	2100      	movs	r1, #0
    7718:	f7fe f979 	bl	5a0e <memset>
    mbedtls_rsa_set_padding( ctx, padding, hash_id );
    771c:	4632      	mov	r2, r6
    771e:	4629      	mov	r1, r5
    7720:	4620      	mov	r0, r4
    7722:	f7ff ffee 	bl	7702 <mbedtls_rsa_set_padding>
}
    7726:	bd70      	pop	{r4, r5, r6, pc}

00007728 <mbedtls_rsa_free>:
/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    if( ctx == NULL )
    7728:	b3a8      	cbz	r0, 7796 <mbedtls_rsa_free+0x6e>
{
    772a:	b510      	push	{r4, lr}
    772c:	4604      	mov	r4, r0
        return;

    mbedtls_mpi_free( &ctx->Vi );
    772e:	308c      	adds	r0, #140	; 0x8c
    7730:	f7fe ff59 	bl	65e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    7734:	f104 0098 	add.w	r0, r4, #152	; 0x98
    7738:	f7fe ff55 	bl	65e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    773c:	f104 0068 	add.w	r0, r4, #104	; 0x68
    7740:	f7fe ff51 	bl	65e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    7744:	f104 0020 	add.w	r0, r4, #32
    7748:	f7fe ff4d 	bl	65e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    774c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    7750:	f7fe ff49 	bl	65e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    7754:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7758:	f7fe ff45 	bl	65e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    775c:	f104 0014 	add.w	r0, r4, #20
    7760:	f7fe ff41 	bl	65e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    7764:	f104 0008 	add.w	r0, r4, #8
    7768:	f7fe ff3d 	bl	65e6 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    776c:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7770:	f7fe ff39 	bl	65e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    7774:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7778:	f7fe ff35 	bl	65e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    777c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    7780:	f7fe ff31 	bl	65e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    7784:	f104 0050 	add.w	r0, r4, #80	; 0x50
    7788:	f7fe ff2d 	bl	65e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    778c:	f104 0044 	add.w	r0, r4, #68	; 0x44
    7790:	f7fe ff29 	bl	65e6 <mbedtls_mpi_free>
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
    7794:	bd10      	pop	{r4, pc}
    7796:	4770      	bx	lr

00007798 <mbedtls_sha256_init>:
{
    7798:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    779a:	226c      	movs	r2, #108	; 0x6c
    779c:	2100      	movs	r1, #0
    779e:	f7fe f936 	bl	5a0e <memset>
}
    77a2:	bd08      	pop	{r3, pc}

000077a4 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    77a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    77a8:	b3da      	cbz	r2, 7822 <mbedtls_sha256_update_ret+0x7e>
    77aa:	4606      	mov	r6, r0
    77ac:	460d      	mov	r5, r1
    77ae:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    77b0:	6803      	ldr	r3, [r0, #0]
    77b2:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    77b6:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    77ba:	4413      	add	r3, r2
    77bc:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    77be:	4293      	cmp	r3, r2
    77c0:	d202      	bcs.n	77c8 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    77c2:	6843      	ldr	r3, [r0, #4]
    77c4:	3301      	adds	r3, #1
    77c6:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    77c8:	b10f      	cbz	r7, 77ce <mbedtls_sha256_update_ret+0x2a>
    77ca:	4544      	cmp	r4, r8
    77cc:	d20a      	bcs.n	77e4 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    77ce:	2c3f      	cmp	r4, #63	; 0x3f
    77d0:	d91b      	bls.n	780a <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    77d2:	4629      	mov	r1, r5
    77d4:	4630      	mov	r0, r6
    77d6:	f7fb fe5b 	bl	3490 <mbedtls_internal_sha256_process>
    77da:	4603      	mov	r3, r0
    77dc:	bb10      	cbnz	r0, 7824 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    77de:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    77e0:	3c40      	subs	r4, #64	; 0x40
    77e2:	e7f4      	b.n	77ce <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    77e4:	f106 0928 	add.w	r9, r6, #40	; 0x28
    77e8:	4642      	mov	r2, r8
    77ea:	4629      	mov	r1, r5
    77ec:	eb09 0007 	add.w	r0, r9, r7
    77f0:	f7fe f8ea 	bl	59c8 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    77f4:	4649      	mov	r1, r9
    77f6:	4630      	mov	r0, r6
    77f8:	f7fb fe4a 	bl	3490 <mbedtls_internal_sha256_process>
    77fc:	4603      	mov	r3, r0
    77fe:	b988      	cbnz	r0, 7824 <mbedtls_sha256_update_ret+0x80>
        input += fill;
    7800:	4445      	add	r5, r8
        ilen  -= fill;
    7802:	3f40      	subs	r7, #64	; 0x40
    7804:	443c      	add	r4, r7
        left = 0;
    7806:	2700      	movs	r7, #0
    7808:	e7e1      	b.n	77ce <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    780a:	b90c      	cbnz	r4, 7810 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    780c:	2300      	movs	r3, #0
    780e:	e009      	b.n	7824 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    7810:	f106 0028 	add.w	r0, r6, #40	; 0x28
    7814:	4622      	mov	r2, r4
    7816:	4629      	mov	r1, r5
    7818:	4438      	add	r0, r7
    781a:	f7fe f8d5 	bl	59c8 <memcpy>
    return( 0 );
    781e:	2300      	movs	r3, #0
    7820:	e000      	b.n	7824 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    7822:	2300      	movs	r3, #0
}
    7824:	4618      	mov	r0, r3
    7826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000782a <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    782a:	b570      	push	{r4, r5, r6, lr}
    782c:	4604      	mov	r4, r0
    782e:	460d      	mov	r5, r1
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    7830:	6803      	ldr	r3, [r0, #0]
    7832:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    7836:	1c58      	adds	r0, r3, #1
    7838:	4423      	add	r3, r4
    783a:	2280      	movs	r2, #128	; 0x80
    783c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    7840:	2838      	cmp	r0, #56	; 0x38
    7842:	d87b      	bhi.n	793c <mbedtls_sha256_finish_ret+0x112>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    7844:	f104 0328 	add.w	r3, r4, #40	; 0x28
    7848:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    784c:	2100      	movs	r1, #0
    784e:	4418      	add	r0, r3
    7850:	f7fe f8dd 	bl	5a0e <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    7854:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    7856:	6863      	ldr	r3, [r4, #4]
    7858:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    785a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    785e:	00d2      	lsls	r2, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    7860:	0e19      	lsrs	r1, r3, #24
    7862:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    7866:	f3c3 4107 	ubfx	r1, r3, #16, #8
    786a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    786e:	f3c3 2107 	ubfx	r1, r3, #8, #8
    7872:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    7876:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    787a:	0e13      	lsrs	r3, r2, #24
    787c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    7880:	f3c2 4307 	ubfx	r3, r2, #16, #8
    7884:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    7888:	f3c2 2307 	ubfx	r3, r2, #8, #8
    788c:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    7890:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    7894:	f104 0128 	add.w	r1, r4, #40	; 0x28
    7898:	4620      	mov	r0, r4
    789a:	f7fb fdf9 	bl	3490 <mbedtls_internal_sha256_process>
    789e:	4603      	mov	r3, r0
    78a0:	2800      	cmp	r0, #0
    78a2:	d159      	bne.n	7958 <mbedtls_sha256_finish_ret+0x12e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    78a4:	7ae2      	ldrb	r2, [r4, #11]
    78a6:	702a      	strb	r2, [r5, #0]
    78a8:	7aa2      	ldrb	r2, [r4, #10]
    78aa:	706a      	strb	r2, [r5, #1]
    78ac:	7a62      	ldrb	r2, [r4, #9]
    78ae:	70aa      	strb	r2, [r5, #2]
    78b0:	7a22      	ldrb	r2, [r4, #8]
    78b2:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    78b4:	7be2      	ldrb	r2, [r4, #15]
    78b6:	712a      	strb	r2, [r5, #4]
    78b8:	7ba2      	ldrb	r2, [r4, #14]
    78ba:	716a      	strb	r2, [r5, #5]
    78bc:	7b62      	ldrb	r2, [r4, #13]
    78be:	71aa      	strb	r2, [r5, #6]
    78c0:	7b22      	ldrb	r2, [r4, #12]
    78c2:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    78c4:	7ce2      	ldrb	r2, [r4, #19]
    78c6:	722a      	strb	r2, [r5, #8]
    78c8:	7ca2      	ldrb	r2, [r4, #18]
    78ca:	726a      	strb	r2, [r5, #9]
    78cc:	7c62      	ldrb	r2, [r4, #17]
    78ce:	72aa      	strb	r2, [r5, #10]
    78d0:	7c22      	ldrb	r2, [r4, #16]
    78d2:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    78d4:	7de2      	ldrb	r2, [r4, #23]
    78d6:	732a      	strb	r2, [r5, #12]
    78d8:	7da2      	ldrb	r2, [r4, #22]
    78da:	736a      	strb	r2, [r5, #13]
    78dc:	7d62      	ldrb	r2, [r4, #21]
    78de:	73aa      	strb	r2, [r5, #14]
    78e0:	7d22      	ldrb	r2, [r4, #20]
    78e2:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    78e4:	7ee2      	ldrb	r2, [r4, #27]
    78e6:	742a      	strb	r2, [r5, #16]
    78e8:	7ea2      	ldrb	r2, [r4, #26]
    78ea:	746a      	strb	r2, [r5, #17]
    78ec:	7e62      	ldrb	r2, [r4, #25]
    78ee:	74aa      	strb	r2, [r5, #18]
    78f0:	7e22      	ldrb	r2, [r4, #24]
    78f2:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    78f4:	7fe2      	ldrb	r2, [r4, #31]
    78f6:	752a      	strb	r2, [r5, #20]
    78f8:	7fa2      	ldrb	r2, [r4, #30]
    78fa:	756a      	strb	r2, [r5, #21]
    78fc:	7f62      	ldrb	r2, [r4, #29]
    78fe:	75aa      	strb	r2, [r5, #22]
    7900:	7f22      	ldrb	r2, [r4, #28]
    7902:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    7904:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    7908:	762a      	strb	r2, [r5, #24]
    790a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    790e:	766a      	strb	r2, [r5, #25]
    7910:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    7914:	76aa      	strb	r2, [r5, #26]
    7916:	f894 2020 	ldrb.w	r2, [r4, #32]
    791a:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    791c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    791e:	b9da      	cbnz	r2, 7958 <mbedtls_sha256_finish_ret+0x12e>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    7920:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    7924:	772b      	strb	r3, [r5, #28]
    7926:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    792a:	776b      	strb	r3, [r5, #29]
    792c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    7930:	77ab      	strb	r3, [r5, #30]
    7932:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    7936:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    7938:	4613      	mov	r3, r2
    793a:	e00d      	b.n	7958 <mbedtls_sha256_finish_ret+0x12e>
        memset( ctx->buffer + used, 0, 64 - used );
    793c:	f104 0628 	add.w	r6, r4, #40	; 0x28
    7940:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    7944:	2100      	movs	r1, #0
    7946:	4430      	add	r0, r6
    7948:	f7fe f861 	bl	5a0e <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    794c:	4631      	mov	r1, r6
    794e:	4620      	mov	r0, r4
    7950:	f7fb fd9e 	bl	3490 <mbedtls_internal_sha256_process>
    7954:	4603      	mov	r3, r0
    7956:	b108      	cbz	r0, 795c <mbedtls_sha256_finish_ret+0x132>
}
    7958:	4618      	mov	r0, r3
    795a:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    795c:	2238      	movs	r2, #56	; 0x38
    795e:	2100      	movs	r1, #0
    7960:	4630      	mov	r0, r6
    7962:	f7fe f854 	bl	5a0e <memset>
    7966:	e775      	b.n	7854 <mbedtls_sha256_finish_ret+0x2a>

00007968 <flash_page_size_get>:
}
    7968:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    796c:	4770      	bx	lr

0000796e <flash_page_count_get>:
}
    796e:	f44f 7080 	mov.w	r0, #256	; 0x100
    7972:	4770      	bx	lr

00007974 <flash_total_size_get>:
{
    7974:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
    7976:	f7ff fff7 	bl	7968 <flash_page_size_get>
    797a:	4604      	mov	r4, r0
    797c:	f7ff fff7 	bl	796e <flash_page_count_get>
}
    7980:	fb00 f004 	mul.w	r0, r0, r4
    7984:	bd10      	pop	{r4, pc}

00007986 <is_page_aligned_check>:
{
    7986:	b510      	push	{r4, lr}
    7988:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
    798a:	f7ff ffed 	bl	7968 <flash_page_size_get>
    798e:	fbb4 f3f0 	udiv	r3, r4, r0
    7992:	fb00 4013 	mls	r0, r0, r3, r4
}
    7996:	fab0 f080 	clz	r0, r0
    799a:	0940      	lsrs	r0, r0, #5
    799c:	bd10      	pop	{r4, pc}

0000799e <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    799e:	b538      	push	{r3, r4, r5, lr}
    79a0:	4604      	mov	r4, r0
    79a2:	460d      	mov	r5, r1
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
    79a4:	f7fc fa76 	bl	3e94 <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
    79a8:	4629      	mov	r1, r5
    79aa:	4620      	mov	r0, r4
    79ac:	f7fc fa82 	bl	3eb4 <nvmc_word_write>

    nvmc_readonly_mode_set();
    79b0:	f7fc fa68 	bl	3e84 <nvmc_readonly_mode_set>
}
    79b4:	bd38      	pop	{r3, r4, r5, pc}

000079b6 <nrfx_nvmc_flash_size_get>:

    nvmc_readonly_mode_set();
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    79b6:	b508      	push	{r3, lr}
    return flash_total_size_get();
    79b8:	f7ff ffdc 	bl	7974 <flash_total_size_get>
}
    79bc:	bd08      	pop	{r3, pc}

000079be <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    79be:	b508      	push	{r3, lr}
    return flash_page_size_get();
    79c0:	f7ff ffd2 	bl	7968 <flash_page_size_get>
}
    79c4:	bd08      	pop	{r3, pc}

000079c6 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    79c6:	b508      	push	{r3, lr}
    return flash_page_count_get();
    79c8:	f7ff ffd1 	bl	796e <flash_page_count_get>
}
    79cc:	bd08      	pop	{r3, pc}

000079ce <arch_system_halt>:
	__asm__ volatile(
    79ce:	f04f 0220 	mov.w	r2, #32
    79d2:	f3ef 8311 	mrs	r3, BASEPRI
    79d6:	f382 8811 	msr	BASEPRI, r2
    79da:	f3bf 8f6f 	isb	sy
	 */

	(void)arch_irq_lock();
	for (;;) {
		/* Spin endlessly */
	}
    79de:	e7fe      	b.n	79de <arch_system_halt+0x10>

000079e0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    79e0:	b510      	push	{r4, lr}
    79e2:	4604      	mov	r4, r0
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    79e4:	f7f9 ff66 	bl	18b4 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    79e8:	4620      	mov	r0, r4
    79ea:	f7ff fff0 	bl	79ce <arch_system_halt>

000079ee <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    79ee:	b570      	push	{r4, r5, r6, lr}
    79f0:	4605      	mov	r5, r0
    79f2:	460e      	mov	r6, r1
	return z_impl_k_current_get();
    79f4:	f7fc fc28 	bl	4248 <z_impl_k_current_get>
    79f8:	4604      	mov	r4, r0
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    79fa:	4631      	mov	r1, r6
    79fc:	4628      	mov	r0, r5
    79fe:	f7ff ffef 	bl	79e0 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    7a02:	4620      	mov	r0, r4
    7a04:	f7fa fc8c 	bl	2320 <z_impl_k_thread_abort>
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
    7a08:	bd70      	pop	{r4, r5, r6, pc}

00007a0a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7a0a:	68c2      	ldr	r2, [r0, #12]
    7a0c:	6903      	ldr	r3, [r0, #16]
    7a0e:	431a      	orrs	r2, r3
    7a10:	f012 0203 	ands.w	r2, r2, #3
    7a14:	d10d      	bne.n	7a32 <create_free_list+0x28>
	slab->free_list = NULL;
    7a16:	2100      	movs	r1, #0
    7a18:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7a1a:	6881      	ldr	r1, [r0, #8]
    7a1c:	4291      	cmp	r1, r2
    7a1e:	d906      	bls.n	7a2e <create_free_list+0x24>
		*(char **)p = slab->free_list;
    7a20:	6941      	ldr	r1, [r0, #20]
    7a22:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    7a24:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    7a26:	68c1      	ldr	r1, [r0, #12]
    7a28:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    7a2a:	3201      	adds	r2, #1
    7a2c:	e7f5      	b.n	7a1a <create_free_list+0x10>
	return 0;
    7a2e:	2000      	movs	r0, #0
    7a30:	4770      	bx	lr
		return -EINVAL;
    7a32:	f06f 0015 	mvn.w	r0, #21
}
    7a36:	4770      	bx	lr

00007a38 <pended_on>:
}
    7a38:	6880      	ldr	r0, [r0, #8]
    7a3a:	4770      	bx	lr

00007a3c <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
    7a3c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7a40:	f991 300e 	ldrsb.w	r3, [r1, #14]
    7a44:	429a      	cmp	r2, r3
    7a46:	db01      	blt.n	7a4c <z_is_t1_higher_prio_than_t2+0x10>
	return false;
    7a48:	2000      	movs	r0, #0
    7a4a:	4770      	bx	lr
		return true;
    7a4c:	2001      	movs	r0, #1
}
    7a4e:	4770      	bx	lr

00007a50 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7a50:	4608      	mov	r0, r1
    7a52:	b959      	cbnz	r1, 7a6c <z_reschedule+0x1c>
{
    7a54:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7a56:	f3ef 8305 	mrs	r3, IPSR
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7a5a:	b913      	cbnz	r3, 7a62 <z_reschedule+0x12>
    7a5c:	f7fa fa94 	bl	1f88 <arch_swap>
#ifndef CONFIG_ARM
	sys_trace_thread_switched_in();
#endif
	return ret;
    7a60:	e003      	b.n	7a6a <z_reschedule+0x1a>
	__asm__ volatile(
    7a62:	f381 8811 	msr	BASEPRI, r1
    7a66:	f3bf 8f6f 	isb	sy
}
    7a6a:	bd08      	pop	{r3, pc}
    7a6c:	f381 8811 	msr	BASEPRI, r1
    7a70:	f3bf 8f6f 	isb	sy
    7a74:	4770      	bx	lr

00007a76 <z_reschedule_irqlock>:
{
    7a76:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7a78:	4603      	mov	r3, r0
    7a7a:	b928      	cbnz	r0, 7a88 <z_reschedule_irqlock+0x12>
    7a7c:	f3ef 8205 	mrs	r2, IPSR
    7a80:	b912      	cbnz	r2, 7a88 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    7a82:	f7fa fa81 	bl	1f88 <arch_swap>
	return ret;
    7a86:	e003      	b.n	7a90 <z_reschedule_irqlock+0x1a>
    7a88:	f383 8811 	msr	BASEPRI, r3
    7a8c:	f3bf 8f6f 	isb	sy
}
    7a90:	bd08      	pop	{r3, pc}

00007a92 <z_priq_dumb_best>:
	return list->head == list;
    7a92:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7a94:	4298      	cmp	r0, r3
    7a96:	d001      	beq.n	7a9c <z_priq_dumb_best+0xa>
}
    7a98:	4618      	mov	r0, r3
    7a9a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    7a9c:	2300      	movs	r3, #0
	return thread;
    7a9e:	e7fb      	b.n	7a98 <z_priq_dumb_best+0x6>

00007aa0 <z_unpend_first_thread>:
{
    7aa0:	b570      	push	{r4, r5, r6, lr}
    7aa2:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    7aa4:	2300      	movs	r3, #0
	__asm__ volatile(
    7aa6:	f04f 0220 	mov.w	r2, #32
    7aaa:	f3ef 8511 	mrs	r5, BASEPRI
    7aae:	f382 8811 	msr	BASEPRI, r2
    7ab2:	f3bf 8f6f 	isb	sy
	struct k_thread *ret = NULL;
    7ab6:	461c      	mov	r4, r3
	LOCKED(&sched_spinlock) {
    7ab8:	b94b      	cbnz	r3, 7ace <z_unpend_first_thread+0x2e>
		ret = _priq_wait_best(&wait_q->waitq);
    7aba:	4630      	mov	r0, r6
    7abc:	f7ff ffe9 	bl	7a92 <z_priq_dumb_best>
    7ac0:	4604      	mov	r4, r0
	__asm__ volatile(
    7ac2:	f385 8811 	msr	BASEPRI, r5
    7ac6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7aca:	2301      	movs	r3, #1
    7acc:	e7f4      	b.n	7ab8 <z_unpend_first_thread+0x18>

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    7ace:	b1dc      	cbz	r4, 7b08 <z_unpend_first_thread+0x68>
	LOCKED(&sched_spinlock) {
    7ad0:	2300      	movs	r3, #0
	__asm__ volatile(
    7ad2:	f04f 0220 	mov.w	r2, #32
    7ad6:	f3ef 8511 	mrs	r5, BASEPRI
    7ada:	f382 8811 	msr	BASEPRI, r2
    7ade:	f3bf 8f6f 	isb	sy
    7ae2:	b97b      	cbnz	r3, 7b04 <z_unpend_first_thread+0x64>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    7ae4:	4620      	mov	r0, r4
    7ae6:	f7ff ffa7 	bl	7a38 <pended_on>
    7aea:	4621      	mov	r1, r4
    7aec:	f7fc fada 	bl	40a4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7af0:	7b63      	ldrb	r3, [r4, #13]
    7af2:	f023 0302 	bic.w	r3, r3, #2
    7af6:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    7af8:	f385 8811 	msr	BASEPRI, r5
    7afc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7b00:	2301      	movs	r3, #1
    7b02:	e7ee      	b.n	7ae2 <z_unpend_first_thread+0x42>
	thread->base.pended_on = NULL;
    7b04:	2300      	movs	r3, #0
    7b06:	60a3      	str	r3, [r4, #8]
	if (thread != NULL) {
    7b08:	b11c      	cbz	r4, 7b12 <z_unpend_first_thread+0x72>
    7b0a:	f104 0018 	add.w	r0, r4, #24
    7b0e:	f000 f823 	bl	7b58 <z_abort_timeout>
}
    7b12:	4620      	mov	r0, r4
    7b14:	bd70      	pop	{r4, r5, r6, pc}

00007b16 <remove_timeout>:
{
    7b16:	b510      	push	{r4, lr}
    7b18:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    7b1a:	f7fc fbd7 	bl	42cc <next>
    7b1e:	b118      	cbz	r0, 7b28 <remove_timeout+0x12>
		next(t)->dticks += t->dticks;
    7b20:	68a1      	ldr	r1, [r4, #8]
    7b22:	6883      	ldr	r3, [r0, #8]
    7b24:	440b      	add	r3, r1
    7b26:	6083      	str	r3, [r0, #8]
	node->prev->next = node->next;
    7b28:	6862      	ldr	r2, [r4, #4]
    7b2a:	6823      	ldr	r3, [r4, #0]
    7b2c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    7b2e:	6862      	ldr	r2, [r4, #4]
    7b30:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7b32:	2300      	movs	r3, #0
    7b34:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    7b36:	6063      	str	r3, [r4, #4]
}
    7b38:	bd10      	pop	{r4, pc}

00007b3a <next_timeout>:
{
    7b3a:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    7b3c:	f7fc fbbc 	bl	42b8 <first>
    7b40:	4604      	mov	r4, r0
	s32_t ticks_elapsed = elapsed();
    7b42:	f7fc fbcf 	bl	42e4 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    7b46:	b124      	cbz	r4, 7b52 <next_timeout+0x18>
    7b48:	68a3      	ldr	r3, [r4, #8]
    7b4a:	1a18      	subs	r0, r3, r0
    7b4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    7b50:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    7b52:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
    7b56:	e7fb      	b.n	7b50 <next_timeout+0x16>

00007b58 <z_abort_timeout>:
{
    7b58:	b570      	push	{r4, r5, r6, lr}
    7b5a:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    7b5c:	2300      	movs	r3, #0
	__asm__ volatile(
    7b5e:	f04f 0220 	mov.w	r2, #32
    7b62:	f3ef 8611 	mrs	r6, BASEPRI
    7b66:	f382 8811 	msr	BASEPRI, r2
    7b6a:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    7b6e:	f06f 0015 	mvn.w	r0, #21
    7b72:	e008      	b.n	7b86 <z_abort_timeout+0x2e>
			remove_timeout(to);
    7b74:	4620      	mov	r0, r4
    7b76:	f7ff ffce 	bl	7b16 <remove_timeout>
			ret = 0;
    7b7a:	4628      	mov	r0, r5
	__asm__ volatile(
    7b7c:	f386 8811 	msr	BASEPRI, r6
    7b80:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7b84:	2301      	movs	r3, #1
    7b86:	461d      	mov	r5, r3
    7b88:	b91b      	cbnz	r3, 7b92 <z_abort_timeout+0x3a>
	return node->next != NULL;
    7b8a:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	d1f1      	bne.n	7b74 <z_abort_timeout+0x1c>
    7b90:	e7f4      	b.n	7b7c <z_abort_timeout+0x24>
}
    7b92:	bd70      	pop	{r4, r5, r6, pc}

00007b94 <k_mem_pool_init>:
{
    7b94:	b508      	push	{r3, lr}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7b96:	f100 0214 	add.w	r2, r0, #20
	list->head = (sys_dnode_t *)list;
    7b9a:	6142      	str	r2, [r0, #20]
	list->tail = (sys_dnode_t *)list;
    7b9c:	6182      	str	r2, [r0, #24]
	z_sys_mem_pool_base_init(&p->base);
    7b9e:	f7fd f95b 	bl	4e58 <z_sys_mem_pool_base_init>
}
    7ba2:	bd08      	pop	{r3, pc}

00007ba4 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    7ba4:	4770      	bx	lr
